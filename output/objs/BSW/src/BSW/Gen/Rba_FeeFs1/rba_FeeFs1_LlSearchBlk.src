	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc16916a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\rba_FeeFs1_LlSearchBlk.src BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c'

	
$TC16X
	
	.sdecl	'.text.rba_FeeFs1_LlSearchBlk.Fee_LLSearchSpecifiedBlkHeader',code,cluster('Fee_LLSearchSpecifiedBlkHeader')
	.sect	'.text.rba_FeeFs1_LlSearchBlk.Fee_LLSearchSpecifiedBlkHeader'
	.align	2
	
	.global	Fee_LLSearchSpecifiedBlkHeader

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	     1  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	     2  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	     3  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	     4  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	     5   **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	     6   * \moduledescription
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	     7   *           AUTOSAR FEE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	     8   *           According to Document Version 3.0.0, Part of Release 4.0, Revision 2
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	     9   * \scope    INTERN
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    10   **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    11   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    12  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    13  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    14  /*
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    15   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    16   * Includes
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    17   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    18   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    19  #include "Fee.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    20  #include "rba_FeeFs1_Prv.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    21  #include "Fls.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    22  #include "rba_FeeFs1_SyncRead.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    23  #if (FEE_SIMULATION_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    24  #include "rba_FlsIfx.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    25  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    26  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    27  #if (!defined(FLS_AR_RELEASE_MAJOR_VERSION) || (FLS_AR_RELEASE_MAJOR_VERSION != FEE_AR_RELEASE_MAJOR_VERSION))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    28      #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    29  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    30  #if (!defined(FLS_AR_RELEASE_MINOR_VERSION) || ((FLS_AR_RELEASE_MINOR_VERSION != 0) && (FLS_AR_RELEASE_MINOR_VERSION != 2)))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    31      #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    32  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    33  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    34  #include "Crc.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    35  #if (!defined(CRC_AR_RELEASE_MAJOR_VERSION) || (CRC_AR_RELEASE_MAJOR_VERSION != FEE_AR_RELEASE_MAJOR_VERSION))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    36      #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    37  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    38  #if (!defined(CRC_AR_RELEASE_MINOR_VERSION) || ((CRC_AR_RELEASE_MINOR_VERSION != 0) && (CRC_AR_RELEASE_MINOR_VERSION != 2)))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    39      #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    40  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    41  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    42  #if (FEE_PRV_DEBUGGING != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    43  #include "Mcu.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    44  #include "Eep.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    45  /* FEE_PRV_DEBUGGING */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    46  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    47  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    48  #if(defined(FEE_PRV_CFG_SELECTED_FS) && (1 == FEE_PRV_CFG_SELECTED_FS))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    49  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    50  #if (FEE_PRESENT == 1)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    51  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    52   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    53   * Fee_LLSearchSpecifiedBlkHeader(): Search for a specific block header
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    54   *                                   within all sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    55   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    56   * This function searches for a specific block header within all
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    57   * sectors.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    58   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    59   * \param    FeeIdx_u16:            Fee block index to search
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    60   * \param    LastHdrAddr_ptr:       Address pointer for the last header address
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    61   * \param    GlobBlkHdr_ptr:        Pointer for the block header content
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    62   *                                  that will be found
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    63   * \param    SearchRetry_b:         Retry of search
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    64   * \return
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    65   * \retval   FEE_ERROR_E:           The block does not exist in the flash
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    66   * \retval   FEE_ABORTED_E:         The cache access did not work (another block
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    67   *                                  or no block index was referenced)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    68   *                                  The function needs to be called again.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    69   * \retval   FEE_ORDER_FINISHED_E:  Order is finished with success
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    70   * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    71   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    72   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    73   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    74  #define FEE_START_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    75  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    76  FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLSearchSpecifiedBlkHeader(VAR(uint16, AUTOMATIC) FeeIdx_u16,
; Function Fee_LLSearchSpecifiedBlkHeader
.L261:
Fee_LLSearchSpecifiedBlkHeader:	.type	func
	sub.a	a10,#32
.L502:
	mov	d9,d4
.L504:
	mov.aa	a12,a4
.L505:
	mov.aa	a13,a5
.L506:
	mov	d10,d5
.L507:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    77                                                                  P2VAR(uint32, AUTOMATIC, FEE_APPL_DATA) LastHdrAddr_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    78                                                                  P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) GlobBlkHdr_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    79                                                                  VAR(boolean, AUTOMATIC) SearchRetry_b)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    80  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    81      VAR(Fee_stRetVal_ten, AUTOMATIC) xRetVal    = FEE_ORDER_PENDING_E;  /* Function return */
	mov	d11,#0
.L508:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    82      VAR(Fee_stRetVal_ten, AUTOMATIC) xtmpRetVal = FEE_ORDER_PENDING_E;  /* Temp return */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    83  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    84      VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC) xTmpBlkHdr_st;         /* Temporary block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    85      VAR(uint8, AUTOMATIC)   xLogSecIdx_u8;                              /* Index of the logical sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    86      VAR(boolean, AUTOMATIC) xContinueSearch_b = FALSE;                  /* Seach indicator */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    87      VAR(uint32, AUTOMATIC)  xTmpAddr_u32 = FEE_CACHE_INIT_VALUE;        /* Temp variable */
	mov.u	d12,#45054
	addih	d12,d12,#51966
.L816:
	mov	d13,d12
.L509:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    88      VAR(boolean, AUTOMATIC) xForcePageBufReload_b = FALSE;              /* Force no reload of the page buffer */
	mov	d8,#0
.L511:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    89  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    90      static uint8 xPhySecIdx_u8  = FEE_NO_SEC_IDX_FOUND;                 /* Index of the active sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    91      static uint8 xSearchType_u8 = FEE_USE_MANUAL_ACCESS;                /* Search type (Cached / manual) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    92  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    93      #if (FEE_PRV_DEBUGGING != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    94      if(Eep_stMain == EEP_FIRSTINIT_INI)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    95      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    96          Fee_Prv_stModuleTest_st.Fee_SearchSpecificBlockHeaderNum_u32++;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    97      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    98      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	    99  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   100  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   101      /* Switch over state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   102      switch (Fee_RdWrOrder_st.Fee_LLSearchBlkHdr_en)
	movh.a	a2,#@his(Fee_RdWrOrder_st)
	lea	a2,[a2]@los(Fee_RdWrOrder_st)
	st.a	[a10]16,a2
.L817:
	lea	a15,[a2]104
	st.a	[a10]20,a15
	ld.w	d0,[a2]104
.L818:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   103      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   104          /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   105          case FEE_LL_SEARCHBLK_INIT_E:
	mov	d15,#0
	jeq	d15,d0,.L2
.L819:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   106          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   107              /* Check if this is the first try to find a valid block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   108              if((SearchRetry_b == FALSE) ||
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   109                 (*LastHdrAddr_ptr == FEE_MAXUINT32))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   110              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   111                  /* Detect the most current sector because this is no retry due to
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   112                   * an invalid block checksum. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   113                  xPhySecIdx_u8 = Fee_GetMostCurrentSectorIdx();
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   114              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   115              else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   116              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   117                  /* Get the corresponding sector index of the current read sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   118                   * (this might be a retry within the most current or an elder sector) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   119                  xPhySecIdx_u8 = Fee_GetPhysSectorByAddress(Fee_RdWrOrder_st.xRdAddress);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   120              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   121  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   122              /* Cache is not available for unknown blocks during the "afterburner" run
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   123               * which will be visible by a return of FEE_CACHE_INIT_VALUE. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   124              if((Fee_Prv_stReorg_u8 != FEE_PRV_ST_REORG_AFTERB_RUNNING) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   125                 (SearchRetry_b == FALSE))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   126              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   127                  /* Try to get a valid address via cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   128                  xTmpAddr_u32 = Fee_LLGetAddressFromCache(FeeIdx_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   129              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   130  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   131              /* Evaluate the cache content */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   132              if((xTmpAddr_u32 != FEE_CACHE_INIT_VALUE) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   133                 (xTmpAddr_u32 != FEE_CACHE_TMP_INVALID_VALUE))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   134              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   135                  /* Cache can be used */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   136                  xSearchType_u8 = FEE_USE_CACHED_ACCESS;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   137  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   138                  /* Copy cache address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   139                  Fee_RdWrOrder_st.xRdAddress = xTmpAddr_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   140              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   141              else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   142              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   143                  /* Start the manual search from the beginning of the sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   144                  Fee_RdWrOrder_st.xRdAddress = Fee_LLGetSecStartAddress(xPhySecIdx_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   145  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   146                  /* A manual search is necessary */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   147                  xSearchType_u8 = FEE_USE_MANUAL_ACCESS;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   148              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   149  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   150              /* This pattern is used to detect if at least 1 time a valid header was copied */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   151              GlobBlkHdr_ptr->FeeIndex_u16 = FEE_MAXUINT16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   152  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   153              /* Force a reload of the page buffer because the init state is only passed for
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   154               * new block read orders */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   155              xForcePageBufReload_b = TRUE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   156  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   157              /* Set next state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   158              Fee_RdWrOrder_st.Fee_LLSearchBlkHdr_en = FEE_LL_SEARCHBLK_BLK_HEADER_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   159          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   160          /* No break to save time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   161  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   162          /* Search any block header beginning at Fee_RdWrOrder_st.xRdAddress (manual search without cache) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   163          /* MR12 RULE 16.3 VIOLATION: Time critical position */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   164          case FEE_LL_SEARCHBLK_BLK_HEADER_E:
	mov	d1,#1
	jeq	d1,d0,.L3
	j	.L4
.L2:
	movh.a	a14,#@his(_999001_xPhySecIdx_u8)
	lea	a14,[a14]@los(_999001_xPhySecIdx_u8)
.L820:
	jeq	d10,#0,.L5
.L821:
	ld.w	d15,[a12]
.L822:
	jne	d15,#-1,.L6
.L5:
	call	Fee_GetMostCurrentSectorIdx
.L503:
	st.b	[a14],d2
.L823:
	j	.L7
.L6:
	ld.a	a15,[a10]16
	ld.w	d4,[a15]
.L513:
	call	Fee_GetPhysSectorByAddress
.L514:
	st.b	[a14],d2
.L7:
	movh.a	a15,#@his(Fee_Prv_stReorg_u8)
	lea	a15,[a15]@los(Fee_Prv_stReorg_u8)
	ld.bu	d15,[a15]
.L824:
	jeq	d15,#2,.L8
.L825:
	jne	d10,#0,.L9
.L826:
	mov	d4,d9
.L515:
	call	Fee_LLGetAddressFromCache
.L510:
	mov	d13,d2
.L9:
.L8:
	movh.a	a15,#@his(_999002_xSearchType_u8)
	lea	a15,[a15]@los(_999002_xSearchType_u8)
.L827:
	jeq	d13,d12,.L10
.L828:
	mov.u	d15,#51966
	addih	d15,d15,#45054
.L829:
	jeq	d15,d13,.L11
.L830:
	mov	d15,#1
.L831:
	st.b	[a15],d15
.L832:
	ld.a	a15,[a10]16
	st.w	[a15],d13
.L833:
	j	.L12
.L11:
.L10:
	ld.bu	d4,[a14]
	call	Fee_LLGetSecStartAddress
.L834:
	ld.a	a2,[a10]16
	st.w	[a2],d2
.L835:
	mov	d15,#0
.L836:
	st.b	[a15],d15
.L12:
	mov.u	d15,#65535
.L837:
	st.h	[a13]12,d15
.L838:
	mov	d8,#1
.L839:
	mov	d15,#1
.L840:
	ld.a	a15,[a10]20
	st.w	[a15],d15
.L3:
	movh.a	a14,#@his(_999001_xPhySecIdx_u8)
	lea	a14,[a14]@los(_999001_xPhySecIdx_u8)
.L841:
	movh.a	a15,#@his(_999002_xSearchType_u8)
	lea	a15,[a15]@los(_999002_xSearchType_u8)
	st.a	[a10]24,a15
.L842:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   165          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   166              /* Search for the next block header. If cached access is used, the address for the header is already
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   167               * in the cache. If the manual search is used, the start address for the search can be changed
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   168               * via Fee_RdWrOrder_st.xRdAddress.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   169               *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   170               * The cache will always contain the latest version of the block. If this block is corrupt,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   171               * the calling function comes back with the LastHdrAddr_ptr as the upper limit of the search.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   172               * The area before this address has to be checked now in order to find elder versions of this
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   173               * block inside any of the sectors.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   174               *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   175               * During the initialization (and shutdown), the most current sector has already been checked via
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   176               * Fee_LLFindNextEmptyPage and the cache has been build up. All available blocks within the most
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   177               * current USED sector are available via cache from this moment onwards. Therefor this sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   178               * can be skipped for the subsequent read orders during the initialization if no cache entry
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   179               * is available.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   180               * */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   181  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   182              /* Check if the current sector has to be used for the search. This is indicated by the
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   183               * update status array for the cache. In case the respective sector has already been checked,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   184               * all found blocks out of the configuration are already in the cache).
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   185               * Searches can be skipped in case there is no cache entry available and the sector has
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   186               * been checked already and no older version is necessary to be detected. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   187              /* MR12 RULE 13.5 VIOLATION: Search must be continued when any of the multiple conditions are failed. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   188              if((Fee_LLGetCacheUpdateStForSect(xPhySecIdx_u8) == FEE_CACHE_UPD_COMP_FOR_SECT) &&
	ld.bu	d4,[a14]
	call	Fee_LLGetCacheUpdateStForSect
.L843:
	jne	d2,#1,.L13
.L844:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   189                 (xSearchType_u8 == FEE_USE_MANUAL_ACCESS) &&
	ld.bu	d15,[a15]
.L845:
	jne	d15,#0,.L14
.L846:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   190                 (SearchRetry_b == FALSE) &&
	jne	d10,#0,.L15
.L847:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   191                 (Fee_LLGetAddressFromCache(FeeIdx_u16) != FEE_CACHE_TMP_INVALID_VALUE) &&
	mov	d4,d9
.L517:
	call	Fee_LLGetAddressFromCache
.L518:
	mov.u	d15,#51966
	addih	d15,d15,#45054
.L848:
	jeq	d15,d2,.L16
.L849:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   192                 (Fee_Prv_stReorg_u8 != FEE_PRV_ST_REORG_AFTERB_RUNNING))
	movh.a	a15,#@his(Fee_Prv_stReorg_u8)
	lea	a15,[a15]@los(Fee_Prv_stReorg_u8)
	ld.bu	d15,[a15]
.L850:
	jeq	d15,#2,.L17
.L851:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   193              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   194                  /* Skip the search within the current sector and check if other sectors
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   195                   * might be used for the search */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   196                  xtmpRetVal = FEE_SEARCH_ABORTED_E;
	mov	d2,#8
.L519:
	j	.L18
.L17:
.L16:
.L15:
.L14:
.L13:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   197              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   198              else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   199              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   200                  /* Search the next block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   201                  xtmpRetVal = Fee_LLSearchNextBlkHeader(&xTmpBlkHdr_st, xSearchType_u8, FEE_NO_CACHE_UPDATE, xForcePageBufReload_b, 0);
	lea	a4,[a10]0
.L852:
	ld.a	a15,[a10]24
	ld.bu	d4,[a15]
.L853:
	mov	d5,#0
.L854:
	mov	d7,#0
	mov	d6,d8
.L520:
	call	Fee_LLSearchNextBlkHeader
.L18:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   202              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   203  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   204              /* Switch function return */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   205              switch(xtmpRetVal)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   206              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   207                  /* Order is still pending */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   208                  case FEE_ORDER_PENDING_E:
	mov	d15,#0
	jeq	d15,d2,.L19
.L855:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   209                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   210                      /* Just wait */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   211                      ;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   212                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   213                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   214  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   215                  /* One valid header was found */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   216                  case FEE_ORDER_FINISHED_E:
	mov	d15,#1
	jeq	d15,d2,.L20
.L856:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   217                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   218  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   219                      /* Check if the correct block index was found */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   220                      /* MR12 RULE 9.1 VIOLATION: Due to the return type, the variable cannot be unset */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   221                      if((xTmpBlkHdr_st.FeeIndex_u16 == FeeIdx_u16) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   222                         ((Fee_RdWrOrder_st.Fee_LLSecReorg_en == FEE_LL_REORG_SEARCH_BLK_E) || /* sector change is active and no entry in the Fee_OrderFifo_st exists */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   223                      /* Search for an unknown block without cache. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   224                      #if(((FEE_RB_ACT_SURVIVAL_EVAL != FALSE) && (FEE_RB_ACT_UNKNOWN_BLOCK_REORG == FALSE)) || ((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) && (FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE == 0)))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   225                           (Fee_RdWrOrder_st.Fee_LLSearchUnknBlkHdr_en == FEE_LL_SEARCHUNKNBLK_SPEC_BLK_HEADER_E) || /* sector change is active and no entry in the Fee_OrderFifo_st exists */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   226                      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   227                           /* MR12 RULE 9.1 VIOLATION: The variable xTmpBlkHdr_st.BlkLength_u16 cannot be unset */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   228                           (Fee_BlockProperties_st[Fee_OrderFifo_st[Fee_idxActQueue_u8].BlockPropIdx_u16].Length_u16 == xTmpBlkHdr_st.BlkLength_u16) ||
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   229                          (Fee_OrderFifo_st[Fee_idxActQueue_u8].Length_u16 == 0) || (xTmpBlkHdr_st.BlkLength_u16 == 0) ||
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   230                          (Fee_BlockProperties_st[Fee_OrderFifo_st[Fee_idxActQueue_u8].BlockPropIdx_u16].Length_u16 == (xTmpBlkHdr_st.BlkLength_u16 + 4))))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   231                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   232                          /* Check if this is a retry due to an invalid latest copy and if the address of the
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   233                           * newer, invalid block is already reached. There is no need to differ between a
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   234                           * first try and a later try */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   235                          /* MR12 RULE 9.1 VIOLATION: Due to the return type, the variable cannot be unset */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   236                          if(*LastHdrAddr_ptr > xTmpBlkHdr_st.AdrBlkHeader_u32)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   237                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   238                              /* LastHdrAddr has the init value or an older copy was found
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   239                               * --> search for newer copies inside the same sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   240  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   241                              /* Save the block info */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   242                              /* MR12 RULE 9.1 VIOLATION: Due to the return type, the variable cannot be unset */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   243                              GlobBlkHdr_ptr->AdrBlkHeader_u32 = xTmpBlkHdr_st.AdrBlkHeader_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   244                              /* MR12 RULE 9.1 VIOLATION: Due to the return type, the variable cannot be unset */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   245                              GlobBlkHdr_ptr->BlkLength_u16    = xTmpBlkHdr_st.BlkLength_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   246                              /* MR12 RULE 9.1 VIOLATION: Due to the return type, the variable cannot be unset */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   247                              GlobBlkHdr_ptr->BlkStatus_u8     = xTmpBlkHdr_st.BlkStatus_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   248                              /* MR12 RULE 9.1 VIOLATION: Due to the return type, the variable cannot be unset */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   249                              GlobBlkHdr_ptr->FeeIndex_u16     = xTmpBlkHdr_st.FeeIndex_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   250                              /* MR12 RULE 9.1 VIOLATION: Due to the return type, the variable cannot be unset */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   251                              GlobBlkHdr_ptr->BlkCrc32_u32     = xTmpBlkHdr_st.BlkCrc32_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   252                              /* MR12 RULE 9.1 VIOLATION: Due to the return type, the variable cannot be unset */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   253                              GlobBlkHdr_ptr->HdrCrc16_u16     = xTmpBlkHdr_st.HdrCrc16_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   254  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   255                              /* Check if the search can be finished (the cache always contains the latest copy) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   256                              if(xSearchType_u8 == FEE_USE_CACHED_ACCESS)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   257                              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   258                                  /* Block was found (latest copy), do not search until the sector end is reached */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   259                                  xRetVal = FEE_ORDER_FINISHED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   260                              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   261                              else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   262                              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   263                                  /* Update the read address to the last found block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   264                                  Fee_RdWrOrder_st.xRdAddress = xTmpBlkHdr_st.AdrBlkHeader_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   265  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   266                                  /* Increment the read address page wise ("safety mode") and search for the next
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   267                                   * block header until the complete sector is checked
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   268                                   * --> search for all copies of the block in order to find the latest one */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   269                                  Fee_IncAddressInsideSector(&Fee_RdWrOrder_st.xRdAddress, FEE_PAGE_LEN, TRUE);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   270                              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   271                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   272                          else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   273                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   274                              /* The end address (former invalid block) is reached
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   275                               * --> Check if at least one header was found before */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   276  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   277                              if(GlobBlkHdr_ptr->FeeIndex_u16 != FEE_MAXUINT16)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   278                              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   279                                  /* The latest valid copy was found */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   280                                  xRetVal = FEE_ORDER_FINISHED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   281                              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   282                              else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   283                              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   284                                  /* There was no valid header found in the address space before the last invalid block
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   285                                   * --> Valid block is not within the current sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   286                                   * --> Search within older sectors if possible */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   287  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   288                                  /* Get the corresponding sector index of the sector that has been
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   289                                   * used for the search */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   290                                  xPhySecIdx_u8 = Fee_GetPhysSectorByAddress(Fee_RdWrOrder_st.xRdAddress);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   291  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   292                                  /* Get the corresponding logical sector index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   293                                  xLogSecIdx_u8 = Fee_idxLLSectorOrder_au8[xPhySecIdx_u8];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   294  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   295                                  /* Reset the search indicator */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   296                                  xContinueSearch_b = FALSE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   297  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   298                                  /* Check if there are more logical sectors available (0 is the lowest possible value)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   299                                   * and if one of these sectors is either in the state FULL or USED */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   300                                  if(xLogSecIdx_u8 > 0)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   301                                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   302                                      do
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   303                                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   304                                          /* Decrement the logical sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   305                                          xLogSecIdx_u8--;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   306  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   307                                          /* Check for relevant sector states */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   308                                          if((Fee_LLSectorOrder_st[xLogSecIdx_u8].SecState_en == FEE_SECTOR_USED_E) ||
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   309                                             (Fee_LLSectorOrder_st[xLogSecIdx_u8].SecState_en == FEE_SECTOR_FULL_E))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   310                                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   311                                              /* Go on with the previous sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   312                                              xContinueSearch_b = TRUE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   313  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   314                                              /* Get respective physical sector index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   315                                              xPhySecIdx_u8 = Fee_LLSectorOrder_st[xLogSecIdx_u8].xPhySecIdx_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   316  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   317                                              /* This sector has to be checked, starting at the beginning */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   318                                              Fee_RdWrOrder_st.xRdAddress = Fee_FlashProp_st[xPhySecIdx_u8].Fee_LogStartAddress_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   319  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   320                                              /* Set back the LastHrAddr_ptr because the new sector might have new adress ranges */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   321                                              *LastHdrAddr_ptr = FEE_MAXUINT32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   322  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   323                                              /* Make sure the manual search will be started in the next sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   324                                              xSearchType_u8 = FEE_USE_MANUAL_ACCESS;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   325  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   326                                              /* The next search will start in the previous sector and will continue until the
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   327                                               * end of this sector is reached */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   328                                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   329                                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   330                                      while((xLogSecIdx_u8 > 0) && (xContinueSearch_b == FALSE));
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   331                                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   332  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   333                                  /* Check if all relevant sectors have been checked already */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   334                                  if(xContinueSearch_b == FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   335                                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   336                                      /* All relevant sectors have been checked, block header cannot be found,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   337                                       * invalidate the cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   338                                      Fee_LLInvalidateAddressInCache(FeeIdx_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   339  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   340                                      /* Set the return value */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   341                                      xRetVal = FEE_ERROR_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   342                                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   343                              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   344                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   345                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   346                      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   347                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   348                          /* Another block was found */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   349                          /* *********************** */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   350  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   351                          /* Evaluate the search type */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   352                          if(xSearchType_u8 == FEE_USE_CACHED_ACCESS)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   353                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   354                              /* The address inside the cache was not correct or the data inside
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   355                               * the header is corrupt.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   356                               * The manual search will be started automatically (no valid cache entry available). */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   357  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   358                              /* Mark the cache for the activation of the manual search instead of avoiding
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   359                               * this during the sector reorganization */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   360                              Fee_LLUpdateAddressInCache(xTmpBlkHdr_st.FeeIndex_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   361                                                         FEE_CACHE_TMP_INVALID_VALUE);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   362  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   363                              /* Set return value */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   364                              xRetVal = FEE_ABORTED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   365                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   366                          else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   367                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   368                              /* Get the block address from the cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   369                              xTmpAddr_u32 = Fee_LLGetAddressFromCache(xTmpBlkHdr_st.FeeIndex_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   370  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   371                              /* Check if a cache entry is already available and the search will be
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   372                               * continued until the end of a sector (*LastHdrAddr_ptr == FEE_MAXUINT32).
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   373                               * Not for retries after finding a block with a corrupted block checksum.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   374                               * Hint: the block checksum is not verified */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   375                              if(((xTmpAddr_u32 == FEE_CACHE_INIT_VALUE) ||
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   376                                  (xTmpAddr_u32 == FEE_CACHE_TMP_INVALID_VALUE)) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   377                                  (*LastHdrAddr_ptr == FEE_MAXUINT32))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   378                              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   379                                  /* There is no valid entry available, update the cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   380                                  Fee_LLUpdateAddressInCache(xTmpBlkHdr_st.FeeIndex_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   381                                                             /* MR12 RULE 9.1 VIOLATION: Due to the return type, the variable cannot be unset */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   382                                                             xTmpBlkHdr_st.AdrBlkHeader_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   383                              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   384                              else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   385                              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   386                                  /* A cache entry already exists, an update might be possible */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   387  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   388                                  /* Get the corresponding sector index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   389                                  xPhySecIdx_u8 = Fee_GetPhysSectorByAddress(Fee_RdWrOrder_st.xRdAddress);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   390  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   391                                  /* Check if the address is within the same sector because
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   392                                   * later versions will always be located behind old copies and if
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   393                                   * the search will be continued until the end of the sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   394                                   * (a retry after a defect block CRC was found is indicated via
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   395                                   *  *LastHdrAddr_ptr != FEE_MAXUINT32 := upper limit for the search)*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   396                                  if((xTmpAddr_u32 >= Fee_FlashProp_st[xPhySecIdx_u8].Fee_LogStartAddress_u32) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   397                                     (xTmpAddr_u32 <  Fee_FlashProp_st[xPhySecIdx_u8].Fee_LogEndAddress_u32) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   398                                     (*LastHdrAddr_ptr == FEE_MAXUINT32))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   399                                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   400                                      /* Overwrite the cache entry with a later block version */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   401                                      Fee_LLUpdateAddressInCache(xTmpBlkHdr_st.FeeIndex_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   402                                                                 xTmpBlkHdr_st.AdrBlkHeader_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   403                                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   404                              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   405  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   406                              /* Update the read address to the last found block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   407                              Fee_RdWrOrder_st.xRdAddress = xTmpBlkHdr_st.AdrBlkHeader_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   408  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   409                              /* Increment the read address page wise ("safety mode") and search for the next
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   410                               * block header until the end of the sector is reached */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   411                              Fee_IncAddressInsideSector(&Fee_RdWrOrder_st.xRdAddress, FEE_PAGE_LEN, TRUE);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   412                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   413                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   414                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   415                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   416  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   417                  /* The requested header was not found in the sector that was used for the search */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   418                  case FEE_SECTORFULL_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   419                  case FEE_SEARCH_ABORTED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   420                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   421  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   422                      /* Get the corresponding sector index of the sector that has been
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   423                       * used for the search */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   424                      xPhySecIdx_u8 = Fee_GetPhysSectorByAddress(Fee_RdWrOrder_st.xRdAddress);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   425  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   426                      /* Mark the respective sector as checked for building up the cache during
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   427                       * the initialization phase of the driver or if it is manual search
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   428                       * (during the manual search the cache is updated on "its" way to the
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   429                       *  end of the sector) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   430                      if(xSearchType_u8 == FEE_USE_MANUAL_ACCESS)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   431                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   432                          /* Update the cache status array for the current sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   433                          Fee_LLUpdateCacheStForSect(xPhySecIdx_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   434                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   435  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   436                      /* Check if at least one header was found before */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   437                      if(GlobBlkHdr_ptr->FeeIndex_u16 != FEE_MAXUINT16)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   438                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   439                          /* The end of the sector is reached and the latest copy was found */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   440                          xRetVal = FEE_ORDER_FINISHED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   441                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   442                      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   443                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   444                          /* Check if another sector might be used to continue with the search */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   445  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   446                          /* Get the corresponding logical sector index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   447                          xLogSecIdx_u8 = Fee_idxLLSectorOrder_au8[xPhySecIdx_u8];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   448                          /* Reset the search indicator */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   449                          xContinueSearch_b = FALSE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   450  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   451                          /* Check if there are more logical sectors available (0 is the lowest possible value)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   452                           * and if one of these sectors is either in the state FULL or USED */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   453                          if(xLogSecIdx_u8 > 0)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   454                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   455                              do
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   456                              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   457                                  /* Decrement the logical sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   458                                  xLogSecIdx_u8--;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   459  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   460                                  /* Check for relevant sector states */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   461                                  if((Fee_LLSectorOrder_st[xLogSecIdx_u8].SecState_en == FEE_SECTOR_USED_E) ||
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   462                                     (Fee_LLSectorOrder_st[xLogSecIdx_u8].SecState_en == FEE_SECTOR_FULL_E))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   463                                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   464                                      /* Go on with the previous sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   465                                      xContinueSearch_b = TRUE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   466  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   467                                      /* Get respective physical sector index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   468                                      xPhySecIdx_u8 = Fee_LLSectorOrder_st[xLogSecIdx_u8].xPhySecIdx_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   469  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   470                                      /* This sector has to be checked, starting at the beginning */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   471                                      Fee_RdWrOrder_st.xRdAddress = Fee_FlashProp_st[xPhySecIdx_u8].Fee_LogStartAddress_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   472  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   473                                      /* Set back the LastHrAddr_ptr because the new sector might have new address ranges */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   474                                      *LastHdrAddr_ptr = FEE_MAXUINT32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   475  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   476                                      /* Make sure the manual search will be started in the next sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   477                                      xSearchType_u8 = FEE_USE_MANUAL_ACCESS;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   478  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   479                                      /* The next search will start in the previous sector and will continue until the
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   480                                       * end of this sector is reached */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   481                                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   482                              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   483                              while((xLogSecIdx_u8 > 0) && (xContinueSearch_b == FALSE));
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   484                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   485  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   486                          /* Check if all relevant sectors have been checked already */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   487                          if(xContinueSearch_b == FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   488                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   489                              /* All relevant sectors have been checked, block header cannot be found,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   490                               * invalidate the cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   491                              Fee_LLInvalidateAddressInCache(FeeIdx_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   492  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   493                              /* Set the return value */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   494                              xRetVal = FEE_ERROR_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   495                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   496                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   497                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   498                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   499  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   500                  /* Cache access did not show any result */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   501                  case FEE_ERROR_E:
	mov	d15,#3
	jeq	d15,d2,.L21
.L857:
	mov	d15,#5
	jeq	d15,d2,.L22
.L858:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   502                      /* Mark the cache for the activation of the manual search instead of avoiding
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   503                       * this during the sector reorganization */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   504                      Fee_LLUpdateAddressInCache(FeeIdx_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   505                                                 FEE_CACHE_TMP_INVALID_VALUE);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   506  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   507                      /* Return with an error to be called again with the manual search */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   508                      xRetVal = FEE_ABORTED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   509                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   510  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   511                  /* Error cases */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   512                  case FEE_ABORTED_E:
	mov	d15,#6
	jeq	d15,d2,.L23
.L859:
	mov	d15,#8
	jeq	d15,d2,.L24
	j	.L25
.L19:
	j	.L26
.L20:
	ld.hu	d4,[a10]12
.L860:
	jne	d4,d9,.L27
.L861:
	ld.a	a15,[a10]16
	ld.w	d15,[a15]40
.L862:
	jeq	d15,#2,.L28
.L863:
	ld.hu	d15,[a10]10
.L864:
	movh.a	a15,#@his(Fee_idxActQueue_u8)
	lea	a15,[a15]@los(Fee_idxActQueue_u8)
	ld.bu	d0,[a15]
.L865:
	mul	d0,d0,#24
.L866:
	movh.a	a15,#@his(Fee_OrderFifo_st)
	lea	a15,[a15]@los(Fee_OrderFifo_st)
.L867:
	addsc.a	a15,a15,d0,#0
.L868:
	ld.hu	d0,[a15]6
	sha	d0,#4
.L869:
	movh.a	a2,#@his(Fee_BlockProperties_st)
	lea	a2,[a2]@los(Fee_BlockProperties_st)
.L870:
	addsc.a	a2,a2,d0,#0
.L871:
	ld.hu	d0,[a2]4
.L872:
	jeq	d15,d0,.L29
.L873:
	ld.hu	d1,[a15]10
.L874:
	jeq	d1,#0,.L30
.L875:
	jeq	d15,#0,.L31
.L876:
	add	d15,#4
.L877:
	jne	d15,d0,.L32
.L31:
.L30:
.L29:
.L28:
	ld.w	d15,[a10]
.L878:
	ld.w	d0,[a12]
.L879:
	jge.u	d15,d0,.L33
.L880:
	st.w	[a13],d15
.L881:
	ld.hu	d15,[a10]10
.L882:
	st.h	[a13]10,d15
.L883:
	ld.bu	d15,[a10]14
.L884:
	st.b	[a13]14,d15
.L885:
	ld.hu	d15,[a10]12
.L886:
	st.h	[a13]12,d15
.L887:
	ld.w	d15,[a10]4
.L888:
	st.w	[a13]4,d15
.L889:
	ld.hu	d15,[a10]8
.L890:
	st.h	[a13]8,d15
.L891:
	ld.a	a15,[a10]24
	ld.bu	d15,[a15]
.L892:
	jne	d15,#1,.L34
.L893:
	mov	d11,#1
.L894:
	j	.L35
.L34:
	ld.w	d15,[a10]
.L895:
	ld.a	a4,[a10]16
	st.w	[a4],d15
.L896:
	mov	d4,#8
.L897:
	mov	d5,#1
	call	Fee_IncAddressInsideSector
.L35:
	j	.L36
.L33:
	ld.hu	d0,[a13]12
.L898:
	mov.u	d15,#65535
.L899:
	jeq	d15,d0,.L37
.L900:
	mov	d11,#1
.L901:
	j	.L38
.L37:
	ld.a	a15,[a10]16
	ld.w	d4,[a15]
	call	Fee_GetPhysSectorByAddress
.L521:
	st.b	[a14],d2
.L902:
	ld.bu	d15,[a14]
.L903:
	movh.a	a15,#@his(Fee_idxLLSectorOrder_au8)
	lea	a15,[a15]@los(Fee_idxLLSectorOrder_au8)
.L904:
	addsc.a	a15,a15,d15,#0
	ld.bu	d0,[a15]
.L522:
	mov	d1,#0
.L524:
	jeq	d0,#0,.L39
.L40:
	add	d0,#-1
.L905:
	mul	d15,d0,#12
.L906:
	movh.a	a15,#@his(Fee_LLSectorOrder_st)
	lea	a15,[a15]@los(Fee_LLSectorOrder_st)
.L907:
	addsc.a	a15,a15,d15,#0
.L908:
	ld.w	d15,[a15]4
.L909:
	jeq	d15,#2,.L41
.L910:
	jne	d15,#3,.L42
.L41:
	mov	d1,#1
.L911:
	ld.bu	d15,[a15]8
.L912:
	st.b	[a14],d15
.L913:
	ld.bu	d15,[a14]
	sha	d15,#4
.L914:
	movh.a	a15,#@his(Fee_FlashProp_st)
	lea	a15,[a15]@los(Fee_FlashProp_st)
.L915:
	addsc.a	a15,a15,d15,#0
.L916:
	ld.w	d15,[a15]8
.L917:
	ld.a	a15,[a10]16
	st.w	[a15],d15
.L918:
	mov	d15,#-1
.L919:
	st.w	[a12],d15
.L920:
	mov	d15,#0
.L921:
	ld.a	a15,[a10]24
	st.b	[a15],d15
.L42:
	jeq	d0,#0,.L43
.L922:
	jeq	d1,#0,.L40
.L43:
.L39:
	jne	d1,#0,.L44
.L923:
	mov	e4,d12,d9
	call	Fee_LLUpdateAddressInCache
.L523:
	mov	d11,#3
.L44:
.L38:
.L36:
	j	.L45
.L32:
.L27:
	ld.a	a15,[a10]24
	ld.bu	d15,[a15]
.L924:
	jne	d15,#1,.L46
.L925:
	mov.u	d5,#51966
	addih	d5,d5,#45054
	call	Fee_LLUpdateAddressInCache
.L525:
	mov	d11,#6
.L926:
	j	.L47
.L46:
	call	Fee_LLGetAddressFromCache
.L516:
	mov	d8,d2
.L512:
	jeq	d8,d12,.L48
.L927:
	mov.u	d15,#51966
	addih	d15,d15,#45054
.L928:
	jne	d15,d8,.L49
.L48:
	ld.w	d15,[a12]
.L929:
	jne	d15,#-1,.L50
.L930:
	ld.hu	d4,[a10]12
.L931:
	ld.w	d5,[a10]
	call	Fee_LLUpdateAddressInCache
.L526:
	j	.L51
.L50:
.L49:
	ld.a	a15,[a10]16
	ld.w	d4,[a15]
	call	Fee_GetPhysSectorByAddress
.L527:
	st.b	[a14],d2
.L932:
	ld.bu	d0,[a14]
	sha	d0,#4
.L933:
	movh.a	a15,#@his(Fee_FlashProp_st)
	lea	a15,[a15]@los(Fee_FlashProp_st)
.L934:
	addsc.a	a15,a15,d0,#0
.L935:
	ld.w	d15,[a15]8
.L936:
	jlt.u	d8,d15,.L52
.L937:
	ld.w	d15,[a15]12
.L938:
	jge.u	d8,d15,.L53
.L939:
	ld.w	d15,[a12]
.L940:
	jne	d15,#-1,.L54
.L941:
	ld.hu	d4,[a10]12
.L942:
	ld.w	d5,[a10]
	call	Fee_LLUpdateAddressInCache
.L54:
.L53:
.L52:
.L51:
	ld.w	d15,[a10]
.L943:
	ld.a	a4,[a10]16
	st.w	[a4],d15
.L944:
	mov	d4,#8
.L945:
	mov	d5,#1
	call	Fee_IncAddressInsideSector
.L47:
.L45:
	j	.L55
.L22:
.L24:
	ld.a	a15,[a10]16
	ld.w	d4,[a15]
	call	Fee_GetPhysSectorByAddress
.L528:
	st.b	[a14],d2
.L946:
	ld.a	a15,[a10]24
	ld.bu	d15,[a15]
.L947:
	jne	d15,#0,.L56
.L948:
	ld.bu	d4,[a14]
	call	Fee_LLUpdateCacheStForSect
.L56:
	ld.hu	d0,[a13]12
.L949:
	mov.u	d15,#65535
.L950:
	jeq	d15,d0,.L57
.L951:
	mov	d11,#1
.L952:
	j	.L58
.L57:
	ld.bu	d15,[a14]
.L953:
	movh.a	a15,#@his(Fee_idxLLSectorOrder_au8)
	lea	a15,[a15]@los(Fee_idxLLSectorOrder_au8)
.L954:
	addsc.a	a15,a15,d15,#0
	ld.bu	d0,[a15]
.L529:
	mov	d1,#0
.L531:
	jeq	d0,#0,.L59
.L60:
	add	d0,#-1
.L955:
	mul	d15,d0,#12
.L956:
	movh.a	a15,#@his(Fee_LLSectorOrder_st)
	lea	a15,[a15]@los(Fee_LLSectorOrder_st)
.L957:
	addsc.a	a15,a15,d15,#0
.L958:
	ld.w	d15,[a15]4
.L959:
	jeq	d15,#2,.L61
.L960:
	jne	d15,#3,.L62
.L61:
	mov	d1,#1
.L961:
	ld.bu	d15,[a15]8
.L962:
	st.b	[a14],d15
.L963:
	ld.bu	d15,[a14]
	sha	d15,#4
.L964:
	movh.a	a15,#@his(Fee_FlashProp_st)
	lea	a15,[a15]@los(Fee_FlashProp_st)
.L965:
	addsc.a	a15,a15,d15,#0
.L966:
	ld.w	d15,[a15]8
.L967:
	ld.a	a15,[a10]16
	st.w	[a15],d15
.L968:
	mov	d15,#-1
.L969:
	st.w	[a12],d15
.L970:
	mov	d15,#0
.L971:
	ld.a	a15,[a10]24
	st.b	[a15],d15
.L62:
	jeq	d0,#0,.L63
.L972:
	jeq	d1,#0,.L60
.L63:
.L59:
	jne	d1,#0,.L64
.L973:
	mov	e4,d12,d9
	call	Fee_LLUpdateAddressInCache
.L530:
	mov	d11,#3
.L64:
.L58:
	j	.L65
.L21:
	mov.u	d5,#51966
	addih	d5,d5,#45054
	mov	d4,d9
.L533:
	call	Fee_LLUpdateAddressInCache
.L532:
	mov	d11,#6
.L974:
	j	.L66
.L23:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   513                  default:
.L25:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   514                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   515                      /* States should never be reached,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   516                       * invalidate the cache entry */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   517                      Fee_LLUpdateAddressInCache(FeeIdx_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   518                                                    FEE_CACHE_TMP_INVALID_VALUE);
	mov.u	d5,#51966
	addih	d5,d5,#45054
	mov	d4,d9
.L535:
	call	Fee_LLUpdateAddressInCache
.L534:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   519  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   520                      /* Set the return value */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   521                      xRetVal = FEE_ERROR_E;
	mov	d11,#3
.L975:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   522                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   523                  break;
	j	.L67

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   524              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   525          }
.L67:
.L66:
.L65:
.L55:
.L26:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   526          break;
	j	.L68

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   527  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   528          /* Default case */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   529          default:
.L4:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   530          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   531              /* States should never be reached,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   532               * mark the cache for the activation of the manual search */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   533              Fee_LLUpdateAddressInCache(FeeIdx_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   534                                         FEE_CACHE_TMP_INVALID_VALUE);
	mov.u	d5,#51966
.L537:
	addih	d5,d5,#45054
	mov	d4,d9
	call	Fee_LLUpdateAddressInCache
.L536:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   535  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   536              /* Set the return value */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   537              xRetVal = FEE_ERROR_E;
	mov	d11,#3
.L976:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   538          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   539          break;
	j	.L69

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   540      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   541  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   542  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   543      /* Check for necessary resets */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   544      if(xRetVal != FEE_ORDER_PENDING_E)
.L69:
.L68:
	jeq	d11,#0,.L70
.L977:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   545      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   546          /* Reset state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   547          Fee_RdWrOrder_st.Fee_LLSearchBlkHdr_en = FEE_LL_SEARCHBLK_INIT_E;
	mov	d15,#0
.L978:
	ld.a	a15,[a10]20
	st.w	[a15],d15
.L979:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   548  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   549          /* Reset physical sector index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   550          xPhySecIdx_u8 = FEE_NO_SEC_IDX_FOUND;
	movh.a	a15,#@his(_999001_xPhySecIdx_u8)
	lea	a15,[a15]@los(_999001_xPhySecIdx_u8)
.L980:
	mov	d15,#255
.L981:
	st.b	[a15],d15
.L982:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   551  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   552          /* Reset search type */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   553          xSearchType_u8 = FEE_USE_MANUAL_ACCESS;
	movh.a	a15,#@his(_999002_xSearchType_u8)
	lea	a15,[a15]@los(_999002_xSearchType_u8)
.L983:
	mov	d15,#0
.L984:
	st.b	[a15],d15
.L70:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   554      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   555  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   556      return (xRetVal);
	mov	d2,d11
.L538:
	j	.L71

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   557  }
.L71:
	ret
.L405:
	
__Fee_LLSearchSpecifiedBlkHeader_function_end:
	.size	Fee_LLSearchSpecifiedBlkHeader,__Fee_LLSearchSpecifiedBlkHeader_function_end-Fee_LLSearchSpecifiedBlkHeader
.L305:
	; End of function
	
	.sdecl	'.text.rba_FeeFs1_LlSearchBlk.Fee_LLSearchNextBlkHeader',code,cluster('Fee_LLSearchNextBlkHeader')
	.sect	'.text.rba_FeeFs1_LlSearchBlk.Fee_LLSearchNextBlkHeader'
	.align	2
	
	.global	Fee_LLSearchNextBlkHeader

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   558  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   559  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   560  #if((FEE_RB_ACT_SURVIVAL_EVAL != FALSE) || (FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   561  /* Search for an unknown block without cache. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   562  #if (FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE == 0)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   563  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   564   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   565   * Fee_LLSearchUnknownBlkHeader(): Search for an unknown block header
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   566   *                                 within all sector. Search is without cache.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   567   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   568   * This function searches for an unknown block header within all
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   569   * sectors and returns the latest valid copy of this block.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   570   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   571   * \param    StartHdrAddr_ptr:      Start address for the search
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   572   * \param    LastHdrAddr_ptr:       Address pointer for the last header address
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   573   * \param    GlobBlkHdr_ptr:        Pointer for the block header content
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   574   *                                  that will be found
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   575   * \param    SearchRetry_ptr:       Retry of search
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   576   * \return
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   577   * \return   FEE_PENDING_E:         Search is still ongoing
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   578   * \retval   FEE_ERROR_E:           No unknown block exists in the
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   579   *                                  eldest FULL sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   580   * \retval   FEE_ORDER_FINISHED_E:  Order is finished with success
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   581   * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   582   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   583   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   584   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   585  FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLSearchUnknownBlkHeader(P2VAR(uint32, AUTOMATIC, FEE_APPL_DATA) StartHdrAddr_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   586                                                                P2VAR(uint32, AUTOMATIC, FEE_APPL_DATA) LastHdrAddr_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   587                                                                P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) GlobBlkHdr_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   588                                                                P2VAR(boolean, AUTOMATIC, FEE_APPL_DATA) SearchRetry_ptr)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   589  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   590      VAR(Fee_stRetVal_ten, AUTOMATIC) xRetVal    = FEE_ORDER_PENDING_E;  /* Function return */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   591      VAR(Fee_stRetVal_ten, AUTOMATIC) xtmpRetVal = FEE_ORDER_PENDING_E;  /* Temp return */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   592  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   593      VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC) xTmpNxtBlkHdr_st;      /* Temporary block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   594  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   595      VAR(boolean, AUTOMATIC) xForcePageBufReload_b = FALSE;              /* Force no reload of the page buffer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   596      VAR(uint16, AUTOMATIC)  xDummyCacheIdx_u16 = 0;                     /* Cache index dummy */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   597      VAR(uint8, AUTOMATIC)   xPhySecIdx_u8  = FEE_NO_SEC_IDX_FOUND;      /* Index of the active sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   598      static uint16           xFeeIdx_u16 = FEE_MAXUINT16;                /* Block index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   599  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   600  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   601      /* Loop if polling mode is active and function state is pending */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   602      do
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   603      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   604          /* Switch over state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   605          switch (Fee_RdWrOrder_st.Fee_LLSearchUnknBlkHdr_en)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   606          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   607              /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   608              case FEE_LL_SEARCHUNKNBLK_INIT_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   609              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   610                  /* Force a reload of the page buffer because the init state is only passed for
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   611                   * new block read orders */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   612                  xForcePageBufReload_b = TRUE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   613  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   614                  /* Check for a retry because of an invalid block checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   615                  if(*SearchRetry_ptr == FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   616                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   617                      /* Reset the next block index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   618                      xFeeIdx_u16 = FEE_MAXUINT16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   619  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   620                      /* Copy the start address for the search */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   621                      Fee_RdWrOrder_st.xRdAddress = *StartHdrAddr_ptr;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   622  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   623                      /* Set next state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   624                      Fee_RdWrOrder_st.Fee_LLSearchUnknBlkHdr_en = FEE_LL_SEARCHUNKNBLK_UNKN_BLK_HEADER_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   625                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   626                  else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   627                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   628                      /* Return to the specified header search because this is a retry */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   629                      Fee_RdWrOrder_st.Fee_LLSearchUnknBlkHdr_en = FEE_LL_SEARCHUNKNBLK_SPEC_BLK_HEADER_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   630  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   631                      /* Get the corresponding sector index of the current read sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   632                       * (this might be a retry within the most current or an elder sector) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   633                      xPhySecIdx_u8 = Fee_GetPhysSectorByAddress(Fee_RdWrOrder_st.xRdAddress);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   634  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   635                      /* Start the manual search from the beginning of the sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   636                      Fee_RdWrOrder_st.xRdAddress = Fee_LLGetSecStartAddress(xPhySecIdx_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   637  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   638                      break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   639                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   640              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   641              /* No break to save time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   642  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   643              /* Search any block header beginning at Fee_RdWrOrder_st.xRdAddress (manual search without cache) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   644              /* MR12 RULE 16.3 VIOLATION: Time critical position */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   645              case FEE_LL_SEARCHUNKNBLK_UNKN_BLK_HEADER_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   646              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   647                  /* Search for the next block header. The start address for the search can be changed
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   648                   * via Fee_RdWrOrder_st.xRdAddress.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   649                   * */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   650  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   651                  /* Search the next block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   652                  xtmpRetVal = Fee_LLSearchNextBlkHeader(&xTmpNxtBlkHdr_st, FEE_USE_MANUAL_ACCESS, FEE_NO_CACHE_UPDATE, xForcePageBufReload_b, 0);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   653  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   654                  /* Switch function return */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   655                  switch(xtmpRetVal)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   656                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   657                      /* Order is still pending */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   658                      case FEE_ORDER_PENDING_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   659                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   660                          /* Just wait */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   661                          ;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   662                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   663                      break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   664  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   665                      /* One valid unknown block header was found (within the oldest FULL sector) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   666                      case FEE_ORDER_FINISHED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   667                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   668                          /* Reset the forced reload for the initialization (init value will remain
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   669                           * true in case the polling mode is active) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   670                          xForcePageBufReload_b = FALSE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   671  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   672                          /* Check if the found block index is within the configuration or not */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   673                          if(Fee_SrvBinarySearchInBlockProp(xTmpNxtBlkHdr_st.FeeIndex_u16, &xDummyCacheIdx_u16) == FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   674                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   675                              /* Check if this block has to be transfered. This is the case if:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   676                               * Block is not in the layout (afterburner is running) AND
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   677                               *      - Survival flag is TRUE (config setting must be taken out of the DFlash) OR
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   678                               *      - FEE_RB_ACT_UNKNOWN_BLOCK_REORG == TRUE (valid for all blocks) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   679                              if(((xTmpNxtBlkHdr_st.BlkStatus_u8 & (uint8)FEE_FLAG_SURV_ATTR_MSK) > 0u) ||
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   680                                 (FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   681                              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   682                                  /* The first copy of an unknown block index was found,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   683                                   * identify the latest valid version of this block in the next step */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   684  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   685                                  /* Update the read address to the last found block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   686                                  Fee_RdWrOrder_st.xRdAddress = xTmpNxtBlkHdr_st.AdrBlkHeader_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   687  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   688                                  /* Increment the read address page wise ("safety mode") and search for the next
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   689                                   * block header until the complete sector is checked
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   690                                   * --> search for all copies of the block in order to find the latest one */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   691                                  Fee_IncAddressInsideSector(&Fee_RdWrOrder_st.xRdAddress, FEE_PAGE_LEN, TRUE);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   692  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   693                                  /* Save the block info */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   694                                  GlobBlkHdr_ptr->AdrBlkHeader_u32 = xTmpNxtBlkHdr_st.AdrBlkHeader_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   695                                  GlobBlkHdr_ptr->BlkLength_u16    = xTmpNxtBlkHdr_st.BlkLength_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   696                                  GlobBlkHdr_ptr->BlkStatus_u8     = xTmpNxtBlkHdr_st.BlkStatus_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   697                                  GlobBlkHdr_ptr->FeeIndex_u16     = xTmpNxtBlkHdr_st.FeeIndex_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   698                                  GlobBlkHdr_ptr->BlkCrc32_u32     = xTmpNxtBlkHdr_st.BlkCrc32_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   699                                  GlobBlkHdr_ptr->HdrCrc16_u16     = xTmpNxtBlkHdr_st.HdrCrc16_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   700  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   701                                  /* Copy the block index for the search */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   702                                  xFeeIdx_u16 = GlobBlkHdr_ptr->FeeIndex_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   703  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   704                                  /* Set the next state to find the latest valid block version inside
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   705                                   * all sectors */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   706                                  Fee_RdWrOrder_st.Fee_LLSearchUnknBlkHdr_en = FEE_LL_SEARCHUNKNBLK_SPEC_BLK_HEADER_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   707                              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   708                              else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   709                              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   710                                  /* The found unknown block need not be transffered
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   711                                   * --> Go on with the search */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   712  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   713                                  /* Update the read address to the last found block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   714                                  Fee_RdWrOrder_st.xRdAddress = xTmpNxtBlkHdr_st.AdrBlkHeader_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   715  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   716                                  /* Increment the read address page wise ("safety mode") and search for the next
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   717                                   * block header until the complete sector is checked
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   718                                   * --> search for all copies of the block in order to find the latest one */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   719                                  Fee_IncAddressInsideSector(&Fee_RdWrOrder_st.xRdAddress, FEE_PAGE_LEN, TRUE);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   720                              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   721                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   722                          else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   723                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   724                              /* The found block is within the layout and not relevant for this search
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   725                               * --> Go on with the search */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   726  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   727                              /* Update the read address to the last found block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   728                              Fee_RdWrOrder_st.xRdAddress = xTmpNxtBlkHdr_st.AdrBlkHeader_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   729  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   730                              /* Increment the read address page wise ("safety mode") and search for the next
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   731                               * block header until the complete sector is checked
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   732                               * --> search for all copies of the block in order to find the latest one */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   733                              Fee_IncAddressInsideSector(&Fee_RdWrOrder_st.xRdAddress, FEE_PAGE_LEN, TRUE);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   734                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   735  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   736                          /* Save the address as start value for the next run for finding the next
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   737                           * unknown block index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   738                          *StartHdrAddr_ptr = Fee_RdWrOrder_st.xRdAddress;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   739                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   740                      break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   741  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   742                      /* The sector end address is reached */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   743                      case FEE_SECTORFULL_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   744                      case FEE_SEARCH_ABORTED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   745                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   746                          /* The end address for the search is set inside the calling function */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   747  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   748                          /* Function can be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   749                          xRetVal = FEE_SECTORFULL_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   750                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   751                      break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   752  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   753                      /* Error cases */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   754                      case FEE_ABORTED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   755                      case FEE_ERROR_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   756                      default:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   757                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   758                          /* States should never be reached */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   759                          xRetVal = FEE_ERROR_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   760                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   761                      break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   762                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   763              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   764              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   765  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   766              /* Search the next specific block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   767              case FEE_LL_SEARCHUNKNBLK_SPEC_BLK_HEADER_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   768                  /* Search for the next block header with the given FeeIdx.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   769                   * The start address for the search can be set with the variable xAdrLastBlkHeader_u32. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   770                  xtmpRetVal = Fee_LLSearchSpecifiedBlkHeader(xFeeIdx_u16,        /* FeeIdx */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   771                                                              LastHdrAddr_ptr,    /* End address for the search */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   772                                                              GlobBlkHdr_ptr,     /* Result structure */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   773                                                              *SearchRetry_ptr);     /* Indicate first try or not */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   774  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   775                  /* Evaluate the search result */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   776                  switch(xtmpRetVal)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   777                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   778                      /* Order not finished yet */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   779                      case FEE_ORDER_PENDING_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   780                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   781                          /* Just wait */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   782                          ;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   783                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   784                      break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   785  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   786                      /* The latest valid block header was found (maybe the one that
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   787                       * was found before in the oldest FULL sector) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   788                      case FEE_ORDER_FINISHED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   789                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   790                          /* Finish function */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   791                          xRetVal = FEE_ORDER_FINISHED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   792                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   793                      break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   794  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   795                      /* No valid header page was found within the complete flash (all sectors have been checked
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   796                       * until the end address LastHdrAddr_ptr has been reached) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   797                      case FEE_ERROR_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   798                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   799                          /* Set the read address to the end address of the search and reset the end address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   800                          Fee_RdWrOrder_st.xRdAddress = *LastHdrAddr_ptr;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   801                          *LastHdrAddr_ptr = FEE_MAXUINT32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   802  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   803                          /* Increment the read address page wise ("safety mode") and search for the next
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   804                           * block header until the complete sector is checked
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   805                           * --> search for all copies of the block in order to find the latest one */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   806                          Fee_IncAddressInsideSector(&Fee_RdWrOrder_st.xRdAddress, FEE_PAGE_LEN, TRUE);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   807  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   808                          /* Reset the retry indicator (normally done by calling function) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   809                          *SearchRetry_ptr = FALSE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   810  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   811                          /* Go on with the search */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   812                          Fee_RdWrOrder_st.Fee_LLSearchUnknBlkHdr_en = FEE_LL_SEARCHUNKNBLK_INIT_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   813  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   814                          /* Do not set the error return but keep on searching. Otherwise the
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   815                           * unkown block reorganization will be finished without reaching the
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   816                           * end of the sector. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   817                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   818                      break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   819  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   820                      /* These cases should never be reached (cannot be returned by Fee_LLSearchSpecifiedBlkHeader).
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   821                       * FEE_ERROR_E and FEE_ABORTED_E cannot be reached because cache is not used and the block
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   822                       * which is searched will be there at least once in the oldest FULL sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   823                      case FEE_BLOCK_INVALIDATED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   824                      case FEE_ABORTED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   825                      case FEE_NUM_RET_VAL_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   826                      case FEE_ERASE_SECTOR_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   827                      case FEE_SECTORCHANGE_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   828                      case FEE_SECTORFULL_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   829                      default:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   830                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   831                          /* Return an error */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   832                          xRetVal = FEE_ABORTED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   833                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   834                      break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   835                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   836              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   837  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   838              /* Default case */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   839              default:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   840              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   841                  /* State should never be reached */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   842                  xRetVal = FEE_ERROR_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   843              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   844              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   845          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   846      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   847      while((Fee_stMain == FEE_POLLING_MODE_E) && (xRetVal == FEE_ORDER_PENDING_E));
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   848  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   849      /* Check for necessary resets */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   850      if(xRetVal != FEE_ORDER_PENDING_E)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   851      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   852          /* Reset state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   853          Fee_RdWrOrder_st.Fee_LLSearchUnknBlkHdr_en = FEE_LL_SEARCHUNKNBLK_INIT_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   854      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   855  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   856      return (xRetVal);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   857  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   858  #else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   859  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   860   *********************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   861   * Fee_BuildUpCacheUnknownBlk(): Build up the cache for unkown blocks over the oldest sector.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   862   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   863   * This function builds up the cache for the unknown blocks that are present in the oldest sector.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   864   * The block checksum and data checksum are both considered while building the cahce.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   865   * The function continues to scan the remaining sectors for finding the latest copy of the unknown blocks.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   866   * The function is designed to be called when cyclic tasks are running.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   867   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   868   * \return
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   869   * \retval   FEE_ORDER_PENDING_E:   Order is pending
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   870   * \retval   FEE_ABORTED_E:         Order was aborted
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   871   * \retval   FEE_SECTORFULL_E:      The end address of the sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   872   *                                  was reached
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   873   * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   874   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   875   *********************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   876   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   877  FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_BuildUpCacheUnknownBlk(void)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   878  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   879      VAR(Fee_stRetVal_ten, AUTOMATIC) xRetVal    = FEE_ORDER_PENDING_E;  /* Function return value */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   880      VAR(Fee_stRetVal_ten, AUTOMATIC) xtmpRetVal = FEE_ORDER_PENDING_E;  /* To hold return values of the functions Fee_LLCalcBlkCrcInFlash and Fee_LLSearchNextBlkHeader */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   881      VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC) xTmpNxtBlkHdr_st;      /* To hold the details of the unkown block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   882      VAR(uint16,  AUTOMATIC) i;                                           /* For loop Variable */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   883      VAR(uint16,  AUTOMATIC) xDummyCacheIdx_u16 = 0;                     /* Dummy cache index for the function Fee_SrvBinarySearchInBlockProp */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   884      VAR(uint8,   AUTOMATIC) xPhySecIdx_u8;                              /* Index of the physical sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   885      VAR(uint8,   AUTOMATIC) xLogSecIdx_u8;                              /* Index of the logical sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   886      VAR(boolean, AUTOMATIC) xContinueSearch_b = FALSE;                  /* Flag to indicate if search needs to be continued in other sector or not */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   887      VAR(boolean, AUTOMATIC) xForcePageBufReload_b = FALSE;              /* Force no reload of the page buffer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   888      VAR(boolean, AUTOMATIC)    xOldUnknonwBlk;                                /* Flag to indicate if the unknown block is new or old */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   889  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   890      /* Switch over state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   891      switch (Fee_RdWrOrder_st.Fee_LLBuildUpCacheUnknownBlk_en)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   892      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   893          /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   894          case FEE_LL_BLD_UP_CACHE_UNKOWN_BLK_INIT_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   895          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   896              /* Initialise cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   897              for (i=0;i<FEE_RB_ACT_UNKNOWN_BLK_CACHE_ARRAY_SIZE;i++)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   898              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   899                  Fee_UnknownBlkCache_Addr_au32[i]    = FEE_CACHE_INIT_VALUE;    /* Block header address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   900                  Fee_UnknownBlkCache_FeeIndex_u16[i] = 0;                      /* Fee index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   901              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   902  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   903              /* Clear the count of number of unknown blocks */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   904              Fee_RdWrOrder_st.Fee_UnknownBlkCacheIdx_u16 = 0;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   905  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   906              /* Set to next state to build up the cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   907              Fee_RdWrOrder_st.Fee_LLBuildUpCacheUnknownBlk_en = FEE_LL_BLD_UP_CACHE_UNKOWN_BLK_READ_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   908  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   909              /* Force a reload of the page buffer because the init state is only passed for new block read orders */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   910              xForcePageBufReload_b = TRUE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   911  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   912              /* Copy the start address for the search, start address is from the last scanned address, if the address is within the range. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   913              if ((Fee_RdWrOrder_st.Fee_UnknownBlkCacheAdd_u32 >= Fee_FlashProp_st[Fee_LLSectorOrder_st[0].xPhySecIdx_u8].Fee_LogStartAddress_u32) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   914                  (Fee_RdWrOrder_st.Fee_UnknownBlkCacheAdd_u32 <=  Fee_FlashProp_st[Fee_LLSectorOrder_st[0].xPhySecIdx_u8].Fee_LogEndAddress_u32))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   915              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   916                  Fee_RdWrOrder_st.xRdAddress = Fee_RdWrOrder_st.Fee_UnknownBlkCacheAdd_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   917              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   918              else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   919              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   920                  /* The cache is not built up yet, start from the top of the oldest sector. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   921                  Fee_RdWrOrder_st.Fee_UnknownBlkCacheAdd_u32 = Fee_FlashProp_st[Fee_LLSectorOrder_st[0].xPhySecIdx_u8].Fee_LogStartAddress_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   922                  Fee_RdWrOrder_st.xRdAddress = Fee_RdWrOrder_st.Fee_UnknownBlkCacheAdd_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   923              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   924          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   925          //break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   926  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   927          /* MR12 RULE 16.3 VIOLATION: Time critical position, skip break for faster processing */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   928          case FEE_LL_BLD_UP_CACHE_UNKOWN_BLK_READ_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   929          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   930              /* Search the next block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   931              xtmpRetVal = Fee_LLSearchNextBlkHeader(&xTmpNxtBlkHdr_st, FEE_USE_MANUAL_ACCESS, FEE_NO_CACHE_UPDATE, xForcePageBufReload_b, 0);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   932  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   933              /* Switch function return */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   934              switch(xtmpRetVal)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   935              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   936                  /* Order is still pending */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   937                  case FEE_ORDER_PENDING_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   938                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   939                      /* Just wait */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   940                      ;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   941                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   942                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   943  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   944                  /* One valid header was found */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   945                  case FEE_ORDER_FINISHED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   946                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   947                      /* Reset the forced reload for the initialization (init value will remain
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   948                       * true in case the polling mode is active) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   949                      xForcePageBufReload_b = FALSE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   950  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   951                      /* Check if the found block index is within the configuration or not */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   952                      if(Fee_SrvBinarySearchInBlockProp(xTmpNxtBlkHdr_st.FeeIndex_u16, &xDummyCacheIdx_u16) == FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   953                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   954                          /* The first copy of an unknown block index was found, validate if Data CRC is ok */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   955  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   956                          /* Update the read address to the last found block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   957                          Fee_RdWrOrder_st.xRdAddress = xTmpNxtBlkHdr_st.AdrBlkHeader_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   958  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   959                          /* Increment the read address page wise ("safety mode") and search for the next
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   960                           * block header until the complete sector is checked
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   961                           * --> search for all copies of the block in order to find the latest one */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   962                          Fee_IncAddressInsideSector(&Fee_RdWrOrder_st.xRdAddress, FEE_PAGE_LEN, TRUE);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   963  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   964                          /* Update the address till where the sector is scanned till:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   965                           * 1. The unknown block cache is full and a new unknown block is found or
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   966                           * 2. Till end of oldest sector is reached.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   967                           */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   968                          if ((Fee_RdWrOrder_st.Fee_UnknownBlkCacheIdx_u16 < FEE_RB_ACT_UNKNOWN_BLK_CACHE_ARRAY_SIZE) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   969                              (Fee_RdWrOrder_st.xRdAddress >= Fee_FlashProp_st[Fee_LLSectorOrder_st[0].xPhySecIdx_u8].Fee_LogStartAddress_u32) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   970                              (Fee_RdWrOrder_st.xRdAddress <= Fee_FlashProp_st[Fee_LLSectorOrder_st[0].xPhySecIdx_u8].Fee_LogEndAddress_u32))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   971                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   972                              Fee_RdWrOrder_st.Fee_UnknownBlkCacheAdd_u32 = Fee_RdWrOrder_st.xRdAddress;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   973                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   974                          else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   975                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   976                              /* Cache for unknown block cant be built further.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   977                               * Fee_RdWrOrder_st.Fee_UnknownBlkCacheAdd_u32 should hold the last address till where the cahce was built.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   978                               * Hence, do nothing here.  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   979                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   980  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   981                          /* Save the block info */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   982                          Fee_GlobInfoLastRdHeader_st.AdrBlkHeader_u32 = xTmpNxtBlkHdr_st.AdrBlkHeader_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   983                          Fee_GlobInfoLastRdHeader_st.BlkLength_u16    = xTmpNxtBlkHdr_st.BlkLength_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   984                          Fee_GlobInfoLastRdHeader_st.BlkStatus_u8     = xTmpNxtBlkHdr_st.BlkStatus_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   985                          Fee_GlobInfoLastRdHeader_st.FeeIndex_u16     = xTmpNxtBlkHdr_st.FeeIndex_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   986                          Fee_GlobInfoLastRdHeader_st.BlkCrc32_u32     = xTmpNxtBlkHdr_st.BlkCrc32_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   987                          Fee_GlobInfoLastRdHeader_st.HdrCrc16_u16     = xTmpNxtBlkHdr_st.HdrCrc16_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   988  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   989                          /* Go to next state to validate the Data CRC for this copy */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   990                          Fee_RdWrOrder_st.Fee_LLBuildUpCacheUnknownBlk_en = FEE_LL_BLD_UP_CACHE_UNKOWN_BLK_VALIDATEDATA_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   991                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   992                      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   993                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   994                          /* The found block is a known block and not relevant for this search
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   995                           * --> Go on with the search */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   996  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   997                          /* Update the read address to the last found block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   998                          Fee_RdWrOrder_st.xRdAddress = xTmpNxtBlkHdr_st.AdrBlkHeader_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	   999  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1000                          /* Increment the read address page wise ("safety mode") and search for the next
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1001                           * block header until the complete sector is checked
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1002                           * --> search for all copies of the block in order to find the latest one */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1003                          Fee_IncAddressInsideSector(&Fee_RdWrOrder_st.xRdAddress, FEE_PAGE_LEN, TRUE);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1004  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1005                          /* Update the address till where the sector is scanned till:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1006                           * 1. The unknown block cache is full and a new unknown block is found or
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1007                           * 2. Till end of oldest sector is reached.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1008                           */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1009                          if ((Fee_RdWrOrder_st.Fee_UnknownBlkCacheIdx_u16 < FEE_RB_ACT_UNKNOWN_BLK_CACHE_ARRAY_SIZE) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1010                              (Fee_RdWrOrder_st.xRdAddress >= Fee_FlashProp_st[Fee_LLSectorOrder_st[0].xPhySecIdx_u8].Fee_LogStartAddress_u32) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1011                              (Fee_RdWrOrder_st.xRdAddress <= Fee_FlashProp_st[Fee_LLSectorOrder_st[0].xPhySecIdx_u8].Fee_LogEndAddress_u32))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1012                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1013                              Fee_RdWrOrder_st.Fee_UnknownBlkCacheAdd_u32 = Fee_RdWrOrder_st.xRdAddress;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1014                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1015                          else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1016                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1017                              /* Cache for unknown block cant be built further.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1018                               * Fee_RdWrOrder_st.Fee_UnknownBlkCacheAdd_u32 should hold the last address till where the cahce was built.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1019                               * Hence, do nothing here.  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1020                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1021                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1022                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1023                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1024  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1025                  /* The sector end address is reached */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1026                  case FEE_SECTORFULL_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1027                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1028                      /* Update the address till where the sector is scanned till:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1029                       * 1. The unknown block cache is full and a new unknown block is found or
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1030                       * 2. Till end of oldest sector is reached.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1031                       */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1032                      if ((Fee_RdWrOrder_st.Fee_UnknownBlkCacheIdx_u16 < FEE_RB_ACT_UNKNOWN_BLK_CACHE_ARRAY_SIZE) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1033                          (Fee_RdWrOrder_st.xRdAddress >= Fee_FlashProp_st[Fee_LLSectorOrder_st[0].xPhySecIdx_u8].Fee_LogStartAddress_u32) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1034                          (Fee_RdWrOrder_st.xRdAddress <= Fee_FlashProp_st[Fee_LLSectorOrder_st[0].xPhySecIdx_u8].Fee_LogEndAddress_u32))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1035                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1036                          Fee_RdWrOrder_st.Fee_UnknownBlkCacheAdd_u32 = Fee_RdWrOrder_st.xRdAddress;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1037                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1038                      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1039                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1040                          /* Cache for unknown block cant be built further.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1041                           * Fee_RdWrOrder_st.Fee_UnknownBlkCacheAdd_u32 should hold the last address till where the cahce was built.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1042                           * Hence, do nothing here.  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1043                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1044  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1045                      /* Continue scanning the other sectors as PLC must be built over all the sectors */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1046                      /* Get the corresponding physical sector index of the sector that has been used for the search */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1047                      xPhySecIdx_u8 = Fee_GetPhysSectorByAddress(Fee_RdWrOrder_st.xRdAddress);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1048  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1049                      /* Get the corresponding logical sector index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1050                      xLogSecIdx_u8 = Fee_idxLLSectorOrder_au8[xPhySecIdx_u8];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1051  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1052                      /* Reset the search indicator */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1053                      xContinueSearch_b = FALSE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1054  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1055                      /* Check if there are more logical sectors available (Fee_NumFlashBanksUsed_u8 is the biggest possible value)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1056                       * and if one of these sectors is either in the state FULL or USED */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1057                      do
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1058                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1059                          /* Decrement the logical sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1060                          xLogSecIdx_u8++;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1061  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1062                          /* Check for overflow */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1063                          if(xLogSecIdx_u8 < Fee_NumFlashBanksUsed_u8)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1064                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1065                              /* Check for relevant sector states */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1066                              if((Fee_LLSectorOrder_st[xLogSecIdx_u8].SecState_en == FEE_SECTOR_USED_E) ||
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1067                                 (Fee_LLSectorOrder_st[xLogSecIdx_u8].SecState_en == FEE_SECTOR_FULL_E))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1068                              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1069                                  /* Go on with the next sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1070                                  xContinueSearch_b = TRUE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1071  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1072                                  /* Get respective physical sector index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1073                                  xPhySecIdx_u8 = Fee_LLSectorOrder_st[xLogSecIdx_u8].xPhySecIdx_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1074  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1075                                  /* This sector has to be checked, starting at the beginning */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1076                                  Fee_RdWrOrder_st.xRdAddress = Fee_FlashProp_st[xPhySecIdx_u8].Fee_LogStartAddress_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1077  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1078                                  /* The next search will start in the next sector and will continue until the most active sector is reached */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1079                             }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1080                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1081                          else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1082                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1083                              /* End of the sectors have been reached, the loop must be exited now. Do nothing. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1084                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1085                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1086                      while((xLogSecIdx_u8 < Fee_NumFlashBanksUsed_u8) && (xContinueSearch_b == FALSE));
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1087  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1088                      /* Check if all relevant sectors have been checked already */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1089                      if(xContinueSearch_b == FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1090                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1091                          /* All relevant sectors have been checked and cache building is complete. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1092                          /* Set the return value */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1093                          xRetVal = FEE_ORDER_FINISHED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1094                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1095                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1096                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1097  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1098                  /* Error cases */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1099                  case FEE_SEARCH_ABORTED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1100                  case FEE_ABORTED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1101                  case FEE_ERROR_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1102                  default:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1103                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1104                      /* States should never be reached */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1105                      xRetVal = FEE_ERROR_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1106                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1107                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1108              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1109          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1110          break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1111  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1112          case FEE_LL_BLD_UP_CACHE_UNKOWN_BLK_VALIDATEDATA_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1113          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1114              /* Call to validate if the data CRC is valid */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1115              xtmpRetVal = Fee_LLCalcBlkCrcInFlash(&Fee_GlobInfoLastRdHeader_st);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1116  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1117              /* Update cache if the CRC is valid */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1118              /* Switch function return */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1119              switch(xtmpRetVal)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1120              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1121                  /* Order is still pending */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1122                  case FEE_ORDER_PENDING_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1123                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1124                      /* Just wait */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1125                      ;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1126                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1127                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1128  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1129                  /* One valid header was found */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1130                  case FEE_ORDER_FINISHED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1131                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1132                      /* A unknown block with valid header and valid data is found, store the contents in the cache. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1133                      /* Clear the flag to check if this unknown block is already found earlier or not. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1134                      xOldUnknonwBlk = FALSE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1135  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1136                      /* Check if this unknown block was found earlier.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1137                       * It is suffient to do the check till Fee_UnknownBlkCacheIdx_u16, as this will hold the index till which the cache is filled. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1138                      for(i=0; i<Fee_RdWrOrder_st.Fee_UnknownBlkCacheIdx_u16; i++)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1139                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1140                          if (Fee_UnknownBlkCache_FeeIndex_u16[i] == Fee_GlobInfoLastRdHeader_st.FeeIndex_u16)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1141                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1142                              /* Block was already found earlier, stop the search and set the flag for updating cache. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1143                              xOldUnknonwBlk = TRUE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1144                              /* Store the index and address, the location to store is there in variable i */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1145                              Fee_UnknownBlkCache_Addr_au32[i]   = Fee_GlobInfoLastRdHeader_st.AdrBlkHeader_u32;    /* Store block header address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1146  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1147                              /* Update of the Fee index is not required as the Fee index is already known now and only the address is being updated now */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1148                              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1149                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1150                          else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1151                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1152                              /* Continue the search for the remaning entries in cache. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1153                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1154                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1155  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1156                      /* If cache is not yet updated, then, update in next available space in cache.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1157                       * Also, consider only the unknown blocks of the oldest sector only. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1158                      if ((xOldUnknonwBlk == FALSE) && (Fee_RdWrOrder_st.Fee_UnknownBlkCacheIdx_u16 < FEE_RB_ACT_UNKNOWN_BLK_CACHE_ARRAY_SIZE) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1159                          (Fee_GlobInfoLastRdHeader_st.AdrBlkHeader_u32 < Fee_FlashProp_st[Fee_LLSectorOrder_st[0].xPhySecIdx_u8].Fee_LogEndAddress_u32))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1160                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1161                          /* This is a new unknown block found, store at the next available location in the cache. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1162                          Fee_UnknownBlkCache_Addr_au32[Fee_RdWrOrder_st.Fee_UnknownBlkCacheIdx_u16]   = Fee_GlobInfoLastRdHeader_st.AdrBlkHeader_u32;            /* Block header address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1163                          Fee_UnknownBlkCache_FeeIndex_u16[Fee_RdWrOrder_st.Fee_UnknownBlkCacheIdx_u16]     = Fee_GlobInfoLastRdHeader_st.FeeIndex_u16;  /* Fee index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1164  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1165                          /* Increment the index to next location in cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1166                          Fee_RdWrOrder_st.Fee_UnknownBlkCacheIdx_u16++;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1167                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1168                      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1169                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1170                          /* This place is reached only when:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1171                           *  1. The cache for unknown block is full i.e., there are more unknown blocks and its details cant be remembered or
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1172                           *  2. All the unknown blocks of the oldest sector are scanned.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1173                           * In the first case, cache must be build for the remaining area of the sector after all the current blocks are transfered.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1174                           * In the second case, no more cache building is required. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1175                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1176  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1177                      /* Continue with the search for the next unknown block and cache build up. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1178                      Fee_RdWrOrder_st.Fee_LLBuildUpCacheUnknownBlk_en = FEE_LL_BLD_UP_CACHE_UNKOWN_BLK_READ_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1179  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1180                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1181                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1182  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1183                  /* Found unknown block copy was invalid, skip this copy and continue the search. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1184                  case FEE_ERROR_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1185                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1186                      Fee_RdWrOrder_st.Fee_LLBuildUpCacheUnknownBlk_en = FEE_LL_BLD_UP_CACHE_UNKOWN_BLK_READ_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1187                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1188                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1189  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1190                  /* Error cases */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1191                  case FEE_SECTORFULL_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1192                  case FEE_SEARCH_ABORTED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1193                  case FEE_ABORTED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1194                  default:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1195                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1196                      /* States should never be reached */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1197                      xRetVal = FEE_ERROR_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1198                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1199                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1200              }/* End of switch case of Fee_LLCalcBlkCrcInFlash */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1201          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1202          break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1203          default:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1204          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1205              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1206          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1207      }/*End of switch case */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1208  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1209      /* Check if the search was aborted or the sector is full */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1210      if (xRetVal != FEE_ORDER_PENDING_E)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1211      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1212          /* No valid block header found yet, reset the state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1213          Fee_RdWrOrder_st.Fee_LLBuildUpCacheUnknownBlk_en = FEE_LL_BLD_UP_CACHE_UNKOWN_BLK_INIT_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1214      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1215  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1216      return(xRetVal);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1217  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1218  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1219  #endif /* End of (FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE == 0) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1220  #endif /* End of ((FEE_RB_ACT_SURVIVAL_EVAL != FALSE) || (FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE)) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1221  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1222  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1223   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1224   * Fee_LLSearchNextBlkHeader(): Search for the next block header
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1225   *                              within one sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1226   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1227   * This function searches for the next block header within one sector.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1228   * Therefore the internal page buffer Fee_llPageBuf_au32 is used. If only the
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1229   * erase pattern is found within the page buffer, the rest of the
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1230   * sector is assumed to be empty. The function searches not until the
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1231   * very end of the respective sector.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1232   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1233   * \param    Fee_GlobInfoLastRdHeader_ptr: Pointer to headers structure
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1234   * \param    CachedAccess_boolean:    TRUE:   Cached access
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1235   *                                    FALSE:  "Manual search"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1236   * \param    FastCacheUpdate_boolean: TRUE:   Update cache if an index
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1237   *                                            is found
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1238   *                                    FALSE:  Do not update the cache
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1239   * \param    xForcePageBufReload_b:   TRUE:   The page buffer will be
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1240   *                                            reloaded
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1241   *                                    FALSE:  The page buffer will only
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1242   *                                            be reloaded if necessary
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1243   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1244   * \return
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1245   * \retval   FEE_ORDER_PENDING_E:   Order is pending
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1246   * \retval   FEE_ABORTED_E:         Order was aborted
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1247   * \retval   FEE_SECTORFULL_E:      The end of the sector is reached
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1248   * \retval   FEE_ERROR_E:           Cached access did not work or
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1249   *                                  the default state was reached
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1250   * \retval   FEE_ORDER_FINISHED_E:  Order is finished
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1251   * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1252   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1253   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1254   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1255  /* MR12 RULE 1505 VIOLATION: This function is used within the same file and has no external linkage */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1256  FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLSearchNextBlkHeader(P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) Fee_GlobInfoLastRdHeader_ptr,
; Function Fee_LLSearchNextBlkHeader
.L263:
Fee_LLSearchNextBlkHeader:	.type	func
	sub.a	a10,#24
.L539:
	st.a	[a10]20,a4
.L540:
	mov	e8,d5,d4
	mov	d10,d6
.L541:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1257                                                             VAR(uint8, AUTOMATIC) CachedAccess_u8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1258                                                             VAR(uint8, AUTOMATIC) FastCacheUpdate_u8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1259                                                             VAR(boolean, AUTOMATIC) xForcePageBufReload_b,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1260                                                             VAR(uint32, AUTOMATIC) strAddrHdrSearch)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1261  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1262      VAR(Fee_stRetVal_ten, AUTOMATIC) xRetVal = FEE_ORDER_PENDING_E;     /* Function return */
	mov	d11,#0
.L542:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1263  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1264      #if ((FEE_HEADER_RECHECK_ACTIVE != FALSE) || (FEE_NO_FALLBACK_ACTIVE != FALSE))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1265      /* In case NoFallback is activated the last block header has to be stored until the NoFallback marker is evaluated */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1266      static Fee_BlkHeader_tst xCurrBlkHeader_st;                         /* Block header structure */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1267      static uint32 xBlkHeaderAdr_u32;                                    /* Address of the last block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1268      #else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1269      VAR(Fee_BlkHeader_tst, AUTOMATIC) xCurrBlkHeader_st;                /* Block header structure */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1270      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1271  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1272      VAR(uint8, AUTOMATIC)           xPhySecIdx_u8;                      /* Physical sector index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1273      VAR(uint8, AUTOMATIC)           xPhyWrSecIdx_u8;                    /* Physical sector index for the next write request */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1274      VAR(uint16, AUTOMATIC)          i_u16 = 0;                          /* Loop counter */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1275      VAR(uint16, AUTOMATIC)          xCalcCrc_u16 = 0;                   /* Block header CRC */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1276      VAR(uint32, AUTOMATIC)          xLoopInRamCounter_u32 = 0;          /* Loop counter */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1277      static uint16                   xNumBytes2Read_u16 = 0;             /* Bytes to read via Fls_Read */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1278      static boolean xPageBufReloaded_b = TRUE;                           /* Reloaded page buffer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1279      static uint8 xCntRetry_u8 = FEE_MAX_RD_WR_COMP_RETRIES;             /* Retries for read */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1280      static uint8 xLoopReduction_u8 = 0;                                    /* Loop reduction counter */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1281  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1282      #if(FEE_FAST_CACHE_INIT_ACTIVE == FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1283      uint8 local_loop_u8;                                                /* Loop variable for checking page contents */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1284      uint32* Fee_PageBytePtr_pu32;                                       /* Temp pointer to read contents of page buffer. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1285      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1286  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1287      #if (FEE_PRV_DEBUGGING != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1288      uint32 xTimeStart_u32 = 0;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1289  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1290      if(Eep_stMain == EEP_FIRSTINIT_INI)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1291      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1292          Fee_Prv_stModuleTest_st.Fee_SearchNextBlockHeaderNum_u32++;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1293      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1294      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1295      if (strAddrHdrSearch != 0uL)
	jeq	d7,#0,.L72
.L646:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1296      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1297          Fee_RdWrOrder_st.xRdAddress = strAddrHdrSearch;
	movh.a	a15,#@his(Fee_RdWrOrder_st)
	lea	a15,[a15]@los(Fee_RdWrOrder_st)
.L647:
	st.w	[a15],d7
.L72:
	movh.a	a12,#@his(Fee_RdWrOrder_st)
	lea	a12,[a12]@los(Fee_RdWrOrder_st)
.L648:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1298      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1299      /* Loop if function state is pending */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1300      do
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1301      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1302          /* Switch over state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1303          switch(Fee_RdWrOrder_st.Fee_LLRdState_en)
	lea	a15,[a12]92
	st.a	[a10]16,a15

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1304          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1305              /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1306              case FEE_LL_INIT_READ_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1307              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1308                  /* Get index of the physical sector belonging to a read request */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1309                  xPhySecIdx_u8   = Fee_GetPhysSectorByAddress(Fee_RdWrOrder_st.xRdAddress);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1310  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1311                  /* Get index of the physical sector belonging to a write request */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1312                  xPhyWrSecIdx_u8 = Fee_GetPhysSectorByAddress(Fee_RdWrOrder_st.xWrAddress);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1313  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1314                  /* Check if the user address is outside the active (logical) sector or behind the next
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1315                   * write address (per definition the flash is empty behind the next write address if
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1316                   * writing and reading is done in the same sector) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1317                  if((Fee_RdWrOrder_st.xRdAddress >= Fee_FlashProp_st[xPhySecIdx_u8].Fee_LogEndAddress_u32 ) ||
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1318                     ((Fee_RdWrOrder_st.xRdAddress >= Fee_RdWrOrder_st.xWrAddress) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1319                      (xPhySecIdx_u8 == xPhyWrSecIdx_u8)))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1320                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1321                      /* Check if the read address is behind the active sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1322                      if(Fee_RdWrOrder_st.xRdAddress >= Fee_FlashProp_st[xPhySecIdx_u8].Fee_LogEndAddress_u32)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1323                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1324                          /* Reset the address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1325                          Fee_RdWrOrder_st.xRdAddress = Fee_FlashProp_st[xPhySecIdx_u8].Fee_LogEndAddress_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1326                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1327  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1328                      /* Sector is full */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1329                      xRetVal = FEE_SECTORFULL_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1330  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1331                      /* Leave loop */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1332                      break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1333                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1334  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1335                  /* Check if a reload via Fls is necessary or not */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1336                  /* MR12 RULE 13.5 VIOLATION: Reload of buffer is required only when multiple conditions are not satisifed. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1337                  if((xForcePageBufReload_b == FALSE) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1338                     (Fee_RdWrOrder_st.AdrHdSearchStart_u32 != FEE_MAXUINT32) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1339                     (Fee_RdWrOrder_st.xRdAddress < ((Fee_RdWrOrder_st.AdrHdSearchStart_u32 + (uint32)FEE_LL_PAGEBUFFSIZE) - (uint32)xLoopReduction_u8)) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1340                     (Fee_RdWrOrder_st.xRdAddress >= Fee_RdWrOrder_st.AdrHdSearchStart_u32) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1341                     (xPhySecIdx_u8 == Fee_GetPhysSectorByAddress(Fee_RdWrOrder_st.AdrHdSearchStart_u32)))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1342                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1343                      /* Reload is NOT necessary, indicate a still valid page buffer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1344                      xPageBufReloaded_b = FALSE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1345  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1346                      /* Evaluate the rest of the page buffer content */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1347                      Fee_RdWrOrder_st.Fee_LLRdState_en = FEE_LL_READ_FINISHED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1348  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1349                      /* Break in order to jump over the Fls_Read state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1350                      break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1351                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1352                  else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1353                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1354                      /* Indicate a necessary reload */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1355                      xPageBufReloaded_b = TRUE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1356  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1357                      /* Reset the start address for the search */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1358                      Fee_RdWrOrder_st.AdrHdSearchStart_u32 = Fee_RdWrOrder_st.xRdAddress;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1359  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1360  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1361                      /* Check for the necessity of a cached access */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1362                      if(CachedAccess_u8 == (uint8)FEE_USE_CACHED_ACCESS)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1363                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1364                          /* Cached access is possible, only read the necessary amount of data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1365                          xNumBytes2Read_u16 = FEE_BLK_HEADER_SIZE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1366                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1367                      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1368                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1369                          /* Set default value for the number of bytes to read */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1370                          xNumBytes2Read_u16 = FEE_LL_PAGEBUFFSIZE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1371  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1372                          /* 1. Check if the current sector has enough free pages left to fill the internal page buffer completely */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1373                          if((Fee_RdWrOrder_st.xRdAddress + (uint32)FEE_LL_PAGEBUFFSIZE) > Fee_FlashProp_st[xPhySecIdx_u8].Fee_LogEndAddress_u32)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1374                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1375                             /* Reduce the number of bytes to read */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1376                             xNumBytes2Read_u16 = (uint16)((Fee_FlashProp_st[xPhySecIdx_u8].Fee_LogEndAddress_u32 + 1u)-
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1377                                                           Fee_RdWrOrder_st.xRdAddress);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1378                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1379  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1380                          /* 2. Check if reading of a complete page buffer exceeds the current write address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1381                          if(((Fee_RdWrOrder_st.xRdAddress + (uint32)FEE_LL_PAGEBUFFSIZE) >= Fee_RdWrOrder_st.xWrAddress) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1382                             (xPhySecIdx_u8 == xPhyWrSecIdx_u8))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1383                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1384                             /* Reduce the number of bytes to read */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1385                             xNumBytes2Read_u16 = (uint16)(Fee_RdWrOrder_st.xWrAddress - Fee_RdWrOrder_st.xRdAddress);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1386                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1387                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1388  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1389                      /* Set next state in order to fill the page buffer with data from the flash */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1390                      Fee_RdWrOrder_st.Fee_LLRdState_en = FEE_LL_READ_PAGE_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1391                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1392              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1393              /* No break to save time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1394  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1395              /* Read a page */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1396              /* MR12 RULE 16.3 VIOLATION: Time critical position */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1397              case FEE_LL_READ_PAGE_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1398              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1399                  /* Read the data from either the logical sector start address or the last known DFlash position of
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1400                   * the requested block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1401                  if(Fls_Read(Fee_RdWrOrder_st.xRdAddress, (uint8*)&Fee_PageBytePtr_cpu8[0], xNumBytes2Read_u16) != E_NOT_OK)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1402                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1403                      /* Set next state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1404                      Fee_RdWrOrder_st.Fee_LLRdState_en = FEE_LL_WAIT_READ_PAGE_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1405                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1406                  else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1407                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1408                      /* Fls did not accept the order due to wrong parameters or an internal busy state.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1409                       * Reset the state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1410                      xRetVal = FEE_ABORTED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1411                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1412              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1413              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1414  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1415              /* Wait for the read order to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1416              case FEE_LL_WAIT_READ_PAGE_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1417              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1418                  /* The next state will be set by the Fee_JobEndNotification () or
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1419                   * Fee_JobErrorNotification() function automatically */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1420  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1421                  /* Call the Fls main function manually */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1422                  Fls_MainFunction();
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1423  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1424                  #if (STD_ON == FEE_POLLING_MODE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1425                  /* Use the FLS polling mechanism in order to reach the next state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1426                  Fee_CheckFlsJobResult();
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1427                  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1428              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1429              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1430  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1431              /* Error reaction for read error */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1432              case FEE_LL_READ_ERROR_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1433                  /* Reset the complete read buffer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1434                  Fee_SrvMemSet8((uint8*)&Fee_PageBytePtr_cpu8[0], (uint8)FEE_ERASE_PATTERN, (uint32)FEE_LL_PAGEBUFFSIZE);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1435  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1436                  /* Verify retry possibility */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1437                  if(xCntRetry_u8 > 0u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1438                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1439                      /* Decrement retry possibilities */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1440                      xCntRetry_u8--;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1441  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1442                      /* Try again to call the Fls and perform the read procedure */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1443                      Fee_RdWrOrder_st.Fee_LLRdState_en = FEE_LL_READ_PAGE_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1444                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1445                  else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1446                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1447                      /* Reading failed somewhere in between the currently read flash area
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1448                       * --> Cached access:    regular behaviour (switch over to manual read)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1449                       * --> Noncached access: Increment read address and repeat reading afterwards */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1450                      if(CachedAccess_u8 == FEE_USE_CACHED_ACCESS)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1451                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1452                          /* Error handling must be done by upper layer
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1453                           * --> Current entry will be marked as temp invalid in the cache and a
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1454                           *     manual search will be triggered starting at the beginning of the current
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1455                           *     read sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1456                          xRetVal = FEE_ERROR_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1457                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1458                      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1459                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1460                          /* Force a reload and start searching within the next area
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1461                           * --> the formerly read flash area will not be used anymore,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1462                           *     data might get lost (no influence on cache and cache status) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1463                          Fee_IncAddressInsideSector(&Fee_RdWrOrder_st.xRdAddress, xNumBytes2Read_u16, TRUE);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1464  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1465                          /* Reset state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1466                          Fee_RdWrOrder_st.Fee_LLRdState_en = FEE_LL_INIT_READ_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1467                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1468                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1469              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1470  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1471              /* Evaluate the content of the page buffer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1472              case FEE_LL_READ_FINISHED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1473              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1474                  /*
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1475                   * Header overview:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1476                   *  +----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1477                   *  |            Preamble            |Blk Status|       FeeIndex      |     Block length    |     Header CRC16    |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1478                   *  +----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1479                   *  Preamble   : 0xA53C96 fix pattern
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1480                   *  Blk Status : Contains information like security level, etc.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1481                   *  FeeIndex   : Block index
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1482                   *  Block length: Block length without the header length
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1483                   *  Header CRC16: CRC16 checksum over Preamble, Blk Status, Fee Index and Block length.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1484                   *                The start value is FEE_MARKER_PATTERN (0xCAFE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1485                   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1486                   *  Hint: A block header will always start at the beginning of a page.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1487                   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1488  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1489                  /* Check if a complete new page buffer was loaded */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1490                  if(xPageBufReloaded_b == FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1491                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1492                      /* Go on with the search within the same page buffer at the corresponding offset */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1493                      i_u16 = (uint16)((Fee_RdWrOrder_st.xRdAddress - Fee_RdWrOrder_st.AdrHdSearchStart_u32) / (uint32)FEE_PAGE_LEN);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1494                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1495                  else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1496                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1497                      /* Reset the loop counter start value*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1498                      i_u16 = 0u;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1499  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1500                      #if (FEE_PRV_DEBUGGING != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1501                      Fee_Prv_stModuleTest_st.Fee_SearchNextBlockHeaderNumReload_u32++;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1502                      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1503                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1504  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1505                  /* Set the loop counter end value to the temp value */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1506                  xLoopInRamCounter_u32 = xNumBytes2Read_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1507  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1508                  /* Check for the page alignment of the loop counter */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1509                  while((xLoopInRamCounter_u32 % (uint32)FEE_PAGE_LEN) != 0u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1510                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1511                      /* Increment address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1512                      xLoopInRamCounter_u32++;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1513                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1514  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1515                  /* Copy the preamble out of the last 8 Bytes of the buffer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1516                  if(xLoopInRamCounter_u32 >= (uint32)FEE_LL_PAGEBUFFSIZE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1517                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1518                      /* Copy the preamble out of the last 8 Bytes of the buffer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1519                      Fee_LLCopyPageBuff2HeaderStart(&xCurrBlkHeader_st, &Fee_PageBytePtr_cpu8[xLoopInRamCounter_u32 - 8uL]);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1520  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1521                      /* Check if the end of the buffer contains a preamble */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1522                      if ((xCurrBlkHeader_st.Preamble_au8[2] == (uint8)FEE_BLK_HEADER_PREAMBEL_BYTE_2) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1523                          (xCurrBlkHeader_st.Preamble_au8[1] == (uint8)FEE_BLK_HEADER_PREAMBEL_BYTE_1) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1524                          (xCurrBlkHeader_st.Preamble_au8[0] == (uint8)FEE_BLK_HEADER_PREAMBEL_BYTE_0))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1525                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1526                          /* Set the loop reduction counter to the smallest supported page size. Otherwise only the first
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1527                           * half out of the block header might be available inside the page buffer. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1528                          xLoopReduction_u8 = (uint8)FEE_BKL_HEADER_REDUCTION;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1529                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1530                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1531  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1532                  /* Reduce the upper limit of the loop */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1533                  xLoopInRamCounter_u32 -= xLoopReduction_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1534                  xLoopInRamCounter_u32 /= (uint32)FEE_PAGE_LEN;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1535  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1536                  #if (FEE_PRV_DEBUGGING != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1537                  xTimeStart_u32 = Mcu_Rb_GetSysTimePart(TIM0);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1538                  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1539  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1540                  /* Loop over all pages inside the page buffer
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1541                   * Hints:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1542                   * - a complete block header must be evaluated which are 14 bytes
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1543                   *   (--> the upper limit for the search varies depending on the page size
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1544                   *        in order to access only the buffer area)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1545                   * - also possible for the cached access, because the header information
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1546                   *   will be located within the first two bytes */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1547                  for(; i_u16 < xLoopInRamCounter_u32; i_u16++)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1548                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1549                      /* Extract the preamble out of the page buffer and copy it to the block structure */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1550                      Fee_LLCopyPageBuff2HeaderStart(&xCurrBlkHeader_st, &Fee_PageBytePtr_cpu8[(i_u16 * (uint16)FEE_PAGE_LEN)]);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1551  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1552                      /* Compare the preamble of the block header byte - wise */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1553                      if ((xCurrBlkHeader_st.Preamble_au8[2] == (uint8)FEE_BLK_HEADER_PREAMBEL_BYTE_2) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1554                          (xCurrBlkHeader_st.Preamble_au8[1] == (uint8)FEE_BLK_HEADER_PREAMBEL_BYTE_1) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1555                          (xCurrBlkHeader_st.Preamble_au8[0] == (uint8)FEE_BLK_HEADER_PREAMBEL_BYTE_0))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1556                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1557  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1558                          /* For controllers with no Cache init, the last programmed page is identified here during the Next Free page identification.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1559                           * Set the last programmed address after the complete header. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1560                          #if(FEE_FAST_CACHE_INIT_ACTIVE == FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1561                          if (Fee_stMain == FEE_POLLING_MODE_E)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1562                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1563                              Fee_RdWrOrder_st.LastProgrammedAddress_u32 = (uint32)(Fee_RdWrOrder_st.AdrHdSearchStart_u32 + (uint32)(i_u16 * (uint16)FEE_PAGE_LEN));
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1564                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1565                          else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1566                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1567                              /* Software is running in Normal mode. it is not required to identify the last programmed page. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1568                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1569                          #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1570  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1571                          /* Set the loop reduction counter to the smallest supported page size. Otherwise only the first
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1572                           * half out of the block header might be available inside the page buffer. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1573                          xLoopReduction_u8 = (uint8)FEE_BKL_HEADER_REDUCTION;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1574  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1575                          /* Extract the rest up to the Crc32 out of the page buffer and copy it to the block structure */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1576                          Fee_LLCopyPageBuff2HeaderMid(&xCurrBlkHeader_st, &Fee_PageBytePtr_cpu8[(i_u16 * (uint16)FEE_PAGE_LEN)]);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1577  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1578                          /* Read BIT7 and check if the block shall be considered or not.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1579                           * If this bit is set the block was written in plant and must be ignored from application. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1580                          if((xCurrBlkHeader_st.BlkStatus_u8 & FEE_MASK_BIT7) == 0u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1581                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1582                              /* Check the block header CRC */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1583                              xCalcCrc_u16 = Crc_CalculateCRC16((uint8*)&Fee_PageBytePtr_cpu8[(i_u16 * (uint16)FEE_PAGE_LEN)],
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1584                                                                (uint32)(FEE_BLK_HEADER_SIZE - 6u),
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1585                                                                (uint16)FEE_MARKER_PATTERN,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1586                                                                FALSE);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1587  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1588                              /* Check the header consistency */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1589                              if(xCalcCrc_u16 == xCurrBlkHeader_st.HdrCrc16_u16)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1590                              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1591                                  /* This is a valid header. Nevertheless it is possible that this order was not finished correct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1592                                   * or that the block checksum is wrong. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1593  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1594                                  /* Extract the rest out of the page buffer and copy it to the block structure */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1595                                  Fee_LLCopyPageBuff2HeaderEnd(&xCurrBlkHeader_st, &Fee_PageBytePtr_cpu8[(i_u16 * (uint16)FEE_PAGE_LEN)]);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1596  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1597                                  /* Store the block header's start address to the global info structure */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1598                                  Fee_GlobInfoLastRdHeader_ptr->AdrBlkHeader_u32 = (uint32)(Fee_RdWrOrder_st.AdrHdSearchStart_u32 +
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1599                                                                                            (uint32)(i_u16 * (uint16)FEE_PAGE_LEN));
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1600                                  Fee_GlobInfoLastRdHeader_ptr->FeeIndex_u16     = xCurrBlkHeader_st.FeeIndex_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1601                                  Fee_GlobInfoLastRdHeader_ptr->BlkStatus_u8     = xCurrBlkHeader_st.BlkStatus_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1602                                  Fee_GlobInfoLastRdHeader_ptr->BlkLength_u16    = xCurrBlkHeader_st.BlkLength_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1603                                  Fee_GlobInfoLastRdHeader_ptr->HdrCrc16_u16     = xCurrBlkHeader_st.HdrCrc16_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1604                                  Fee_GlobInfoLastRdHeader_ptr->BlkCrc32_u32     = xCurrBlkHeader_st.BlkCrc32_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1605  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1606                                  /* Check for an an init run because the special cache update without the evaluation
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1607                                   * of the data checksum will be done in order to fasten up the system */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1608                                  if(FastCacheUpdate_u8 == (uint8)FEE_UPDATE_CACHE_IN_INIT)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1609                                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1610                                      /* Update the cache with the current header address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1611                                      Fee_LLUpdateAddressInCache(Fee_GlobInfoLastRdHeader_ptr->FeeIndex_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1612                                                                 Fee_GlobInfoLastRdHeader_ptr->AdrBlkHeader_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1613                                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1614  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1615                                  /* Finish the order */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1616                                  xRetVal = FEE_ORDER_FINISHED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1617  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1618                                  /* Finish the loop */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1619                                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1620                              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1621                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1622                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1623                      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1624                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1625                          /* For controllers with no Cache init, the last programmed page is identified here during the Next Free page identification.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1626                           * Check if the page is blank or programmed by comparing against the erase pattern. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1627                          #if(FEE_FAST_CACHE_INIT_ACTIVE == FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1628                          if (Fee_stMain == FEE_POLLING_MODE_E)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1629                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1630                              /* For faster operation, use 32 bytes compare. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1631                              Fee_PageBytePtr_pu32 = (uint32*)Fee_PageBytePtr_cpu8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1632                              local_loop_u8 = (i_u16 * (uint16)FEE_PAGE_LEN)/4u;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1633                              if((Fee_PageBytePtr_pu32[local_loop_u8] != FEE_ERASE_PATTERN_U32) ||
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1634                                 (Fee_PageBytePtr_pu32[(local_loop_u8 + 1u)] != FEE_ERASE_PATTERN_U32))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1635                              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1636                                  /* Page is not blank. Store the address of the page as last programmed page. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1637                                  Fee_RdWrOrder_st.LastProgrammedAddress_u32 = (uint32)(Fee_RdWrOrder_st.AdrHdSearchStart_u32 + (uint32)(i_u16 * (uint16)FEE_PAGE_LEN));
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1638                              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1639                              else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1640                              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1641                                  /* Page is blank. Continue to identify the last programmed page. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1642                              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1643                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1644                          else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1645                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1646                              /* Software is running in Normal mode. it is not required to identify the last programmed page. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1647                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1648                          #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1649  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1650                          /* Page contains no block header (missing preamble)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1651                           * --> search within the next page that has already been loaded
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1652                           *     or leave the loop in case this was a cached access */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1653                          if(CachedAccess_u8 == (uint8)FEE_USE_CACHED_ACCESS)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1654                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1655                              /* MR12 RULE 15.4 VIOLATION: Save time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1656                              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1657                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1658                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1659                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1660  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1661  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1662                  #if (FEE_PRV_DEBUGGING != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1663                  Fee_Prv_stModuleTest_st.Fee_SearchNextBlockHeaderLoopRamDiff_u32 +=
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1664                          MCU_RB_TIM0TICKS_TO_US(Mcu_Rb_GetSysTimePart(TIM0) - xTimeStart_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1665                  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1666  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1667  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1668                  /* Check whether a valid block header has been found or not */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1669                  if (xRetVal != FEE_ORDER_FINISHED_E)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1670                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1671                      /* A complete page buffer (or a some pages only in case of a cached access)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1672                       * contain(s) no valid block header. The start address
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1673                       * for this search was either the sector beginning or a pointer out of
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1674                       * the last valid block header (or the address out of the cache). */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1675  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1676                      /* No abortion, go on until the end of the sector is reached unless it
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1677                       * was a cached access */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1678                      if(CachedAccess_u8 == (uint8)FEE_USE_MANUAL_ACCESS)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1679                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1680                          /* No valid block header was found, increment address for next search. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1681  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1682                          /* Set the read address for the next page buffer reload by the Fls right
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1683                           * behind the end of the last loaded address area -1 page
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1684                           * (The last page of the buffer was not evaluated because only complete
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1685                           *  block headers can be checked (14 bytes)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1686                           *  --> do not skip this page but force a check).
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1687                           * Ensure page alignment and keep the address within the current sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1688                           * If the end of the sector is reached, the function will restrict the
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1689                           * read address to the sector end address which will lead to a sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1690                           * full return in the init read state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1691  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1692                          Fee_IncAddressInsideSector(&Fee_RdWrOrder_st.xRdAddress,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1693                                                     (uint16)(((Fee_RdWrOrder_st.AdrHdSearchStart_u32 +
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1694                                                                (uint32)FEE_LL_PAGEBUFFSIZE) -
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1695                                                               Fee_RdWrOrder_st.xRdAddress) -
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1696                                                              (uint32)xLoopReduction_u8),
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1697                                                     TRUE);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1698  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1699                          /* Reset state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1700                          Fee_RdWrOrder_st.Fee_LLRdState_en = FEE_LL_INIT_READ_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1701                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1702                      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1703                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1704                          /* Cache address is not correct */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1705                          xRetVal = FEE_ERROR_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1706                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1707                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1708                  #if (FEE_HEADER_RECHECK_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1709                  /* The NoFallback feature can be activated only if header recheck is activated */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1710                  else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1711                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1712                      /* If the function is called during init additional checks are skipped */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1713                      if (FastCacheUpdate_u8 != (uint8)FEE_UPDATE_CACHE_IN_INIT)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1714                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1715                          #if (FEE_NO_FALLBACK_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1716                          /* A valid block header has been found
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1717                           * --> check if the block is configured as NoFallback */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1718                          if ((Fee_GlobInfoLastRdHeader_ptr->BlkStatus_u8 & (uint8)FEE_FLAG_NOFALLBACK_MSK) > 0)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1719                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1720                              /* The block shall be considered only if the NoFallback marker is not written
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1721                               * -> perform a blank check over the NoFallback marker area */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1722                              Fee_RdWrOrder_st.Fee_LLRdState_en = FEE_LL_NOFALLBACK_MARKER_CHECK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1723                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1724                          else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1725                          #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1726                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1727                              Fee_RdWrOrder_st.Fee_LLRdState_en = FEE_LL_RECHECK_HEADER_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1728                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1729  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1730                          /* Store the block header's start address separately since it is not part of the local structure */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1731                          xBlkHeaderAdr_u32 = Fee_GlobInfoLastRdHeader_ptr->AdrBlkHeader_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1732  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1733                          /* The order is finished only if the NoFallback marker has been checked */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1734                          xRetVal = FEE_ORDER_PENDING_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1735                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1736                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1737                  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1738              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1739              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1740  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1741              #if (FEE_HEADER_RECHECK_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1742              #if (FEE_NO_FALLBACK_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1743              case FEE_LL_NOFALLBACK_MARKER_CHECK_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1744              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1745                  /* Call the blank check function */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1746                  if (Fls_Rb_BlankCheck(xBlkHeaderAdr_u32 - FEE_PAGE_LEN, NULL_PTR, FEE_PAGE_LEN) != E_NOT_OK)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1747                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1748                      /* Set the next state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1749                      Fee_RdWrOrder_st.Fee_LLRdState_en = FEE_LL_NOFALLBACK_MARKER_CHECK_WAIT_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1750                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1751                  else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1752                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1753                      /* Fls did not accept the order due to wrong parameters or an internal busy state.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1754                       * Reset the state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1755                      xRetVal = FEE_ABORTED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1756                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1757              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1758              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1759              /* FEE_NO_FALLBACK_ACTIVE != FALSE */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1760              #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1761  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1762              case FEE_LL_RECHECK_HEADER_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1763              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1764                  /* Call the blank check function */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1765                  if (Fls_Rb_BlankCheck(xBlkHeaderAdr_u32 + ((FEE_PAGES_USED_BY_BLK_HEADER * FEE_PAGE_LEN) - FEE_PHY_PAGE_LEN),
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1766                                        NULL_PTR,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1767                                        FEE_PHY_PAGE_LEN) != E_NOT_OK)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1768                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1769                      /* Set the next state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1770                      Fee_RdWrOrder_st.Fee_LLRdState_en = FEE_LL_RECHECK_HEADER_WAIT_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1771                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1772                  else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1773                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1774                      /* Fls did not accept the order due to wrong parameters or an internal busy state.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1775                       * Reset the state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1776                      xRetVal = FEE_ABORTED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1777                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1778              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1779              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1780  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1781              /* Wait for the blank check to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1782              case FEE_LL_RECHECK_HEADER_WAIT_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1783              #if (FEE_NO_FALLBACK_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1784              case FEE_LL_NOFALLBACK_MARKER_CHECK_WAIT_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1785              #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1786              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1787                  /* The next state will be set by the Fee_JobEndNotification() or Fee_JobErrorNotification() function automatically */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1788  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1789                  /* Check whether the OS is currently running or not */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1790                  if (Fee_stMain == FEE_POLLING_MODE_E)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1791                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1792                      /* Call the Fls main function manually */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1793                      Fls_MainFunction();
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1794                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1795  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1796                  #if (STD_ON == FEE_POLLING_MODE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1797                  /* Use the FLS polling mechanism in order to reach the next state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1798                  Fee_CheckFlsJobResult();
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1799                  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1800              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1801              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1802  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1803              /* Reading of the block is allowed since
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1804               * - the NoFallback marker for NoFallback blocks is not programmed
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1805               * - the block header is fully programmed */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1806              case FEE_LL_RECHECK_HEADER_FINISHED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1807              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1808                  /* Store the block header information to the global info structure */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1809                  Fee_GlobInfoLastRdHeader_ptr->AdrBlkHeader_u32 = xBlkHeaderAdr_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1810                  Fee_GlobInfoLastRdHeader_ptr->FeeIndex_u16     = xCurrBlkHeader_st.FeeIndex_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1811                  Fee_GlobInfoLastRdHeader_ptr->BlkStatus_u8     = xCurrBlkHeader_st.BlkStatus_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1812                  Fee_GlobInfoLastRdHeader_ptr->BlkLength_u16    = xCurrBlkHeader_st.BlkLength_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1813                  Fee_GlobInfoLastRdHeader_ptr->HdrCrc16_u16     = xCurrBlkHeader_st.HdrCrc16_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1814                  Fee_GlobInfoLastRdHeader_ptr->BlkCrc32_u32     = xCurrBlkHeader_st.BlkCrc32_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1815  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1816                  /* Finish the order */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1817                  xRetVal = FEE_ORDER_FINISHED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1818              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1819              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1820  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1821              /* If the NoFallback marker area is not blank reading of the block is not allowed */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1822              case FEE_LL_RECHECK_HEADER_FAILED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1823              #if (FEE_NO_FALLBACK_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1824              case FEE_LL_NOFALLBACK_MARKER_CHECK_FAILED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1825              #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1826              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1827                  if (CachedAccess_u8 == (uint8)FEE_USE_MANUAL_ACCESS)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1828                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1829                      /* Update the read address to the last found block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1830                      Fee_RdWrOrder_st.xRdAddress = xBlkHeaderAdr_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1831  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1832                      /* Increment the read address page wise ("safety mode") and search for the next
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1833                       * block header until the end of the page buffer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1834                      Fee_IncAddressInsideSector(&Fee_RdWrOrder_st.xRdAddress, FEE_PAGE_LEN, TRUE);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1835  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1836                      /* Reset the state machine and continue the search */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1837                      Fee_RdWrOrder_st.Fee_LLRdState_en = FEE_LL_INIT_READ_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1838                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1839                  else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1840                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1841                      /* Cache address is not correct */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1842                      xRetVal = FEE_ERROR_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1843                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1844              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1845              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1846              /* FEE_HEADER_RECHECK_ACTIVE != FALSE */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1847              #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1848  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1849              /* Default case should never be reached */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1850              default:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1851              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1852                  /* Set error state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1853                  xRetVal = FEE_ERROR_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1854  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1855                  /* No valid block header found yet, reset the state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1856                  Fee_RdWrOrder_st.Fee_LLRdState_en = FEE_LL_INIT_READ_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1857              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1858              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1859          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1860      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1861      while((xRetVal == FEE_ORDER_PENDING_E) && (Fee_stMain == FEE_POLLING_MODE_E));
.L73:
	ld.a	a15,[a10]16
	ld.w	d0,[a15]
.L649:
	mov	d15,#0
	jeq	d15,d0,.L74
.L650:
	mov	d1,#3
	jeq	d1,d0,.L75
.L651:
	mov	d1,#4
	jeq	d1,d0,.L76
.L652:
	mov	d15,#5
	jeq	d15,d0,.L77
.L653:
	mov	d15,#6
	jeq	d15,d0,.L78
	j	.L79
.L74:
	ld.w	d4,[a12]
	call	Fee_GetPhysSectorByAddress
.L543:
	mov	d12,d2
.L545:
	mov.aa	a13,a12
	add.a	a13,#4
	ld.w	d4,[a13]
	call	Fee_GetPhysSectorByAddress
.L544:
	mov	d13,d2
.L547:
	sha	d15,d12,#4
.L654:
	movh.a	a2,#@his(Fee_FlashProp_st)
	lea	a2,[a2]@los(Fee_FlashProp_st)
.L655:
	addsc.a	a15,a2,d15,#0
.L656:
	lea	a15,[a15]12
	ld.w	d0,[a15]
.L657:
	ld.w	d15,[a12]
.L658:
	jge.u	d15,d0,.L80
.L659:
	ld.w	d1,[a13]
.L660:
	jlt.u	d15,d1,.L81
.L661:
	jne	d12,d13,.L82
.L80:
	jlt.u	d15,d0,.L83
.L662:
	st.w	[a12],d0
.L83:
	mov	d11,#5
.L663:
	j	.L84
.L82:
.L81:
	movh.a	a14,#@his(_999004_xPageBufReloaded_b)
	lea	a14,[a14]@los(_999004_xPageBufReloaded_b)
.L664:
	jne	d10,#0,.L85
.L665:
	ld.w	d4,[a12]20
.L666:
	jeq	d4,#-1,.L86
.L667:
	addi	d0,d4,#1024
.L668:
	movh.a	a2,#@his(_999006_xLoopReduction_u8)
	lea	a2,[a2]@los(_999006_xLoopReduction_u8)
	ld.bu	d1,[a2]
.L669:
	sub	d0,d1
.L670:
	jge.u	d15,d0,.L87
.L671:
	jlt.u	d15,d4,.L88
.L672:
	call	Fee_GetPhysSectorByAddress
.L546:
	jne	d12,d2,.L89
.L673:
	mov	d15,#0
.L674:
	st.b	[a14],d15
.L675:
	mov	d15,#6
.L676:
	ld.a	a15,[a10]16
	st.w	[a15],d15
.L677:
	j	.L90
.L89:
	ld.w	d15,[a12]
.L88:
.L87:
.L86:
.L85:
	mov	d0,#1
.L678:
	st.b	[a14],d0
.L679:
	st.w	[a12]20,d15
.L680:
	movh.a	a2,#@his(_999003_xNumBytes2Read_u16)
	lea	a2,[a2]@los(_999003_xNumBytes2Read_u16)
.L548:
	jne	d8,#1,.L91
.L549:
	mov	d15,#14
.L681:
	st.h	[a2],d15
.L682:
	j	.L92
.L91:
	mov	d15,#1024
.L683:
	st.h	[a2],d15
.L684:
	ld.w	d15,[a15]
.L685:
	ld.w	d0,[a12]
.L686:
	addi	d1,d0,#1024
.L687:
	jge.u	d15,d1,.L93
.L688:
	sub	d15,d0
	add	d15,#1
.L689:
	st.h	[a2],d15
.L93:
	ld.w	d15,[a13]
.L690:
	jlt.u	d1,d15,.L94
.L691:
	jne	d12,d13,.L95
.L692:
	ld.w	d0,[a12]
.L693:
	sub	d15,d0
.L694:
	st.h	[a2],d15
.L95:
.L94:
.L92:
	mov	d15,#3
.L695:
	ld.a	a15,[a10]16
	st.w	[a15],d15
.L75:
	movh.a	a15,#@his(_999003_xNumBytes2Read_u16)
	lea	a15,[a15]@los(_999003_xNumBytes2Read_u16)
.L696:
	movh.a	a2,#@his(Fee_PageBytePtr_cpu8)
	lea	a2,[a2]@los(Fee_PageBytePtr_cpu8)
	ld.w	d4,[a12]
	ld.a	a4,[a2]
	ld.hu	d5,[a15]0
	call	Fls_17_Pmu_Read
.L697:
	jeq	d2,#1,.L96
.L698:
	mov	d15,#4
.L699:
	ld.a	a15,[a10]16
	st.w	[a15],d15
.L700:
	j	.L97
.L96:
	mov	d11,#6
.L97:
	j	.L98
.L76:
	call	Fls_17_Pmu_MainFunction
.L701:
	call	Fee_CheckFlsJobResult
.L702:
	j	.L99
.L77:
	mov	d5,#1024
.L703:
	movh.a	a15,#@his(Fee_PageBytePtr_cpu8)
	lea	a15,[a15]@los(Fee_PageBytePtr_cpu8)
	ld.a	a4,[a15]
.L704:
	mov	d4,#0
.L705:
	call	Fee_SrvMemSet8
.L706:
	movh.a	a15,#@his(_999005_xCntRetry_u8)
	lea	a15,[a15]@los(_999005_xCntRetry_u8)
	ld.bu	d15,[a15]
.L707:
	jeq	d15,#0,.L100
.L708:
	add	d15,#-1
	st.b	[a15],d15
.L709:
	mov	d15,#3
.L710:
	ld.a	a15,[a10]16
	st.w	[a15],d15
.L711:
	j	.L101
.L100:
	jne	d8,#1,.L102
.L550:
	mov	d11,#3
.L712:
	j	.L103
.L102:
	movh.a	a15,#@his(_999003_xNumBytes2Read_u16)
	lea	a15,[a15]@los(_999003_xNumBytes2Read_u16)
	ld.hu	d4,[a15]0
.L713:
	mov	d5,#1
	mov.aa	a4,a12
	call	Fee_IncAddressInsideSector
.L714:
	mov	d15,#0
.L715:
	st.w	[a12]92,d15
.L103:
.L101:
	j	.L104
.L78:
	movh.a	a15,#@his(_999004_xPageBufReloaded_b)
	lea	a15,[a15]@los(_999004_xPageBufReloaded_b)
	ld.bu	d15,[a15]
.L716:
	jne	d15,#0,.L105
.L717:
	ld.w	d15,[a12]20
.L718:
	ld.w	d0,[a12]
.L719:
	sub	d0,d15
	sh	d0,#-3
.L720:
	extr.u	d12,d0,#0,#16
.L551:
	j	.L106
.L105:
	mov	d12,#0
.L106:
	movh.a	a15,#@his(_999003_xNumBytes2Read_u16)
	lea	a15,[a15]@los(_999003_xNumBytes2Read_u16)
	ld.hu	d1,[a15]0
.L553:
	j	.L107
.L108:
	add	d1,#1
.L107:
	and	d15,d1,#7
.L721:
	jne	d15,#0,.L108
.L722:
	mov	d0,#1024
.L723:
	jlt.u	d1,d0,.L109
.L724:
	lea	a2,[a10]0
.L725:
	movh.a	a15,#@his(Fee_PageBytePtr_cpu8)
	lea	a15,[a15]@los(Fee_PageBytePtr_cpu8)
	ld.a	a15,[a15]
.L726:
	addsc.a	a15,a15,d1,#0
	lea	a15,[a15]-8
.L396:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     1  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     2  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     3  #ifndef RBA_FEEFS1_PRV_H
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     4  #define RBA_FEEFS1_PRV_H
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     5  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     6  #if(defined(FEE_PRV_CFG_SELECTED_FS) && (1 == FEE_PRV_CFG_SELECTED_FS))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     7  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     8  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     9   **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    10   * \moduledescription
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    11   *           AUTOSAR FEE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    12   *           According to Document Version 3.0.0, Part of Release 4.0, Revision 2
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    13   * \scope    INTERN
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    14   **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    15   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    16  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    17  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    18  /*
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    19  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    20  * Defines/Macros
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    21  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    22  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    23  /* General defines */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    24  #define FEE_MAXUINT32               (0xFFFFFFFFuL)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    25  #define FEE_MAXUINT16               (0xFFFFu)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    26  #define FEE_NULL                    (0u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    27  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    28  #define FEE_MARKER_PATTERN          0xCAFEu                 /* Pattern to identify a marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    29  #define FEE_NUM_MARKER_IN_HEADER    (FEE_NUM_MARKER_E - 1)  /* A sector has at least 4 states:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    30                                                                 ERASED -> USED -> FULL -> ERASE_REQ
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    31                                                                 Value is also in used in Fee_Process.pm */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    32  #define FEE_NO_SEC_IDX_FOUND        0xFFu                   /* No active sector / matching flash bank found */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    33  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    34  #define FEE_MARKER_SIZE             8u                      /* Each marker has a size of 8 Bytes (fix value is used in Fee_Process.pm) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    35  #define FEE_MARKER_CS_SIZE          2u                      /* Size of CRC16 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    36  #define FEE_LL_DATABUFFSIZE         256u                    /* Size of the internal data buffer used for writing */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    37                                                              /* (The page buffer size is auto generated) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    38  #define FEE_LL_CRC_CALC_RESTRICTION FEE_LL_DATABUFFSIZE     /* Restriction for the Crc calculation */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    39  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    40  #define FEE_FREE_PAGES_FOR_ERASED_ST    1u                  /* Number of pages containing the erased value */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    41  #define FEE_SIZE_OF_BLOCK_CS            4                   /* Size of block checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    42  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    43  /* Special values for sector change counter within the RAM array */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    44  #define FEE_SEC_CHANGE_CNT_RESET_REQ  0xFFFFFFFFuL
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    45  #define FEE_SEC_CHANGE_CNT_UNDEF      FEE_SEC_CHANGE_CNT_RESET_REQ
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    46  #define FEE_SEC_CHANGE_CNT_ERASED     (FEE_SEC_CHANGE_CNT_RESET_REQ - 1u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    47  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    48  /* Mask for accessing block flags in the configuration and in the block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    49  #define FEE_FLAG_SEC_LEVEL_MSK      0x0001u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    50  #define FEE_FLAG_SEC_LEVEL_BP       0u       /* Security level setting is bit 0 within the block flags */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    51  #define FEE_BLK_INT_DOUBLE_STORAGE  1u       /* Internal double block storage definition */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    52  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    53  #define FEE_FLAG_DATAFILTERTYPE_ATTR_MSK      0x0006u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    54  #define FEE_FLAG_DATAFILTERTYPE_ATTR_BP       1u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    55  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    56  #define FEE_FLAG_INVALID_MSK        0x08u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    57  #define FEE_FLAG_INVALID_BP         3u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    58  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    59  #define FEE_FLAG_SURV_ATTR_MSK      0x0010u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    60  #define FEE_FLAG_SURV_ATTR_BP       4u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    61  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    62  #define FEE_FLAG_ROBUST_ATTR_MSK    0x0020
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    63  #define FEE_FLAG_ROBUST_ATTR_BP     5
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    64  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    65  #define FEE_FLAG_NOFALLBACK_MSK     0x0040u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    66  #define FEE_FLAG_NOFALLBACK_BP      6u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    67  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    68  #define FEE_MASK_BIT7               (uint8)0x80
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    69  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    70  /* Mask for accessing block flags (upper byte only) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    71  #define FEE_FLAG_JOBTYPE_MSK        0x0300u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    72  #define FEE_FLAG_JOBTYPE_BP         8u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    73  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    74  #define FEE_FLAG_JOBPRIO_MSK        0x0400u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    75  #define FEE_FLAG_JOBPRIO_BP         10u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    76  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    77  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    78  /* Macros for the conversion of the Sec Level settings:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    79   * Internal storage level:      Sec Level 1  --> 0 / Sec Level 2 --> 1
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    80   * User Config storage level:   Sec Level 1  --> 1 / Sec Level 2 --> 2 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    81  #define FEE_INT_TO_USER_STORAGE_TYPE(SEC_LEVEL) ((SEC_LEVEL) + 1u)   /* Convert the Sec Level setting from
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    82                                                                         header/properties == internal to user config format */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    83  #define FEE_CNT_FIRST_COPY          0u       /* Internal counter value for first copy */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    84  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    85  /* Erase actions */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    86  #define FEE_NO_SECTOR_TO_ERASE      0xFFu    /* No sector has to be erased */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    87  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    88  /* Block header validation */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    89  #define FEE_BLK_HEADER_PREAMBEL             0xA53C96uL                                  /* Pattern of preambel */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    90  #define FEE_BLK_HEADER_PREAMBEL_BYTE_2      (FEE_BLK_HEADER_PREAMBEL & 0xFFu)           /* 0x96 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    91  #define FEE_BLK_HEADER_PREAMBEL_BYTE_1      ((FEE_BLK_HEADER_PREAMBEL >> 8u) & 0xFFu)   /* 0x3C */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    92  #define FEE_BLK_HEADER_PREAMBEL_BYTE_0      ((FEE_BLK_HEADER_PREAMBEL >> 16u) & 0xFFu)  /* 0xA5 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    93  #define FEE_BLK_HEADER_SIZE                 14u                                         /* Size of block header in bytes */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    94  #define FEE_BKL_HEADER_REDUCTION            FEE_VIRTUAL_PAGE_SIZE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    95  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    96  /* Calculation of free byte in current sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    97  #define FEE_LL_SECTOR_USED_FOR_WRITING      Fee_RdWrOrder_st.xWrAddress
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    98  #define FEE_LL_SECTOR_USED_FOR_READING      Fee_RdWrOrder_st.xRdAddress
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    99  #define FEE_LL_SECTOR_USED_FOR_COMPARING    Fee_RdWrOrder_st.xCmpAddress
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   100  #define FEE_LL_SECTOR_USED_FOR_CRC_CALC     Fee_RdWrOrder_st.xCrcAddress
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   101  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   102  /* Cache usage*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   103  #define FEE_INVLD_BLOCK_PROP_IDX        0xFFFFFFFFuL    /* Invalid Fee Idx that can be passed to the block header search function
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   104                                                             in order to ignore the cache during the init phase */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   105  #define FEE_USE_CACHED_ACCESS               0x01u       /* Use the cache method for finding the next block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   106  #define FEE_USE_MANUAL_ACCESS               0x00u       /* Search manually for headers */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   107  #define FEE_UPDATE_CACHE_IN_INIT            0x01u       /* Update the cache for fast access in init */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   108  #define FEE_NO_CACHE_UPDATE                 0x00u       /* Do not use the fast access method (only evaluated blocks are added to the cache) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   109  #define FEE_CACHE_UPD_NOT_COMP_FOR_SECT     0x00u       /* The respective sector was not completely checked */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   110  #define FEE_CACHE_UPD_COMP_FOR_SECT         0x01u       /* The respective sector was checked completely */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   111  #define FEE_CACHE_UPD_COMP_FOR_ALL_SECT     0x02u       /* All sectors have been checked completely */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   112  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   113  #define Fee_LLInvalidateAddressInCache(FEEIDX) Fee_LLUpdateAddressInCache(FEEIDX, FEE_CACHE_INIT_VALUE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   114  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   115  /* Fee init defines */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   116  #define FEE_PRV_ST_INIT_RUNNING             0x00u       /* Module is still uninitialized */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   117  #define FEE_PRV_ST_INIT_DONE                0x01u       /* Module has been initialized */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   118  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   119  /* Fee reorganization defines */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   120  #define FEE_PRV_ST_REORG_IDLE               0x00u       /* No reorganization is running */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   121  #define FEE_PRV_ST_REORG_STANDARD_RUNNING   0x01u       /* Standard reorganization is running */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   122  #define FEE_PRV_ST_REORG_AFTERB_RUNNING     0x02u       /* "Afterburner" of the reorganization is runnning */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   123  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   124  /* Amount of sectors used by the emulation  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   125  #define FEE_NUM_FLASH_BANKS         Fee_NumFlashBanksUsed_u8  /* Number of sectors which can be used by the Fee */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   126  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   127  #if (FEE_RB_ADDONS_CCAS == TRUE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   128  #define FEE_RB_REQUEST_STOP_MODE            TRUE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   129  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   130  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   131  #if(FEE_ROBUST_PROG_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   132  #define FEE_ROBMARKER_BUFF_SIZE             96u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   133  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   134  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   135  #if (FEE_PAGES_USED_BY_BLK_HEADER == 2u)     /* Robust block programming states (Hdpg1 -> Data -> Hdpg2 write) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   136  #define FEE_FIRSTDATAPAGE_NOTPROGRAMMED 0x00u            /* First data pages in Fee_LlFls2FlsCopy is not yet programmed. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   137  #define FEE_FIRSTDATAPAGE_PROGRAMMED     0x01u            /* First data pages in Fee_LlFls2FlsCopy is programmed. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   138  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   139  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   140  /*
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   141  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   142  * Type definitions
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   143  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   144  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   145  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   146  /* Order priority */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   147  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   148  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   149      FEE_NORMAL_PRIO_E = 0,      /* e.g. if FeeImmediateData is configured to no */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   150      FEE_HIGH_PRIO_E   = 1       /* e.g. if FeeImmediateData is configured to yes */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   151  }Fee_HlPriority_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   152  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   153  /* This enumerator list contains the index inside the order queue.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   154   * Attention: The order in the enumerator is from Low (FEE_ADAPTER_JOB) to High (FEE_INTERNAL_JOB).
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   155   *            Do not change this order!
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   156   * */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   157  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   158  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   159      FEE_INTERNAL_JOB,           /* Internal job (reorganization or sector erase) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   160      FEE_NVM_JOB,                /* Nvm job */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   161      FEE_ADAPTER_JOB,            /* Adapter job (e.g. Mx17 Eep) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   162      FEE_QUEUE_SIZE              /* Size of the Fee internal queue (each job type has 1 entry) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   163  }Fee_HlJobType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   164  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   165  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   166  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   167      uint8*  DataBufferPtr_pu8;  /* Pointer to the read- or write-buffer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   168      uint16  FeeIdx_u16;         /* FeeRbBlockPersistentId */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   169      uint16  BlockPropIdx_u16;   /* Respective block properties table index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   170      uint16  Offset_u16;         /* Offset inside block (could be != 0 only for read-orders --> R4.0 Rev1) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   171      uint16  Length_u16;         /* Block length, only required for element-read-jobs */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   172      Fee_HlMode_ten Mode_en;     /* Type of this order: Read, Write, Invalidate */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   173      Fee_HlPriority_ten Prio_en; /* Priority out of the configuration */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   174      uint8   SecLevel_u8;        /* Security level out of the configuration */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   175  }Fee_OrderFifo_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   176  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   177  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   178  /* Hint:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   179   * For calculation of the sector order (old -> new -> erased -> undef) the sector change counter is a valid criteria.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   180   * The lowest valid value points to the eldest data, the most current value to the most current data.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   181   * These following defines are used for an implicit sorting:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   182   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   183   *  +------+------+------+------+------+------+------+------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   184   *  |MarkerPattern|Ident | marker content     |marker CRC16 |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   185   *  +------+------+------+------+------+------+------+------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   186   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   187   *  Sector headers: 12 times available as default
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   188   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   189   *      +------+------+------+------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   190   *    0 |Erased| Used | Full |Erase |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   191   *      +------+------+------+------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   192   *    4 |      |      |      |      |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   193   *      +------+------+------+------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   194   *    8 |      |      |      |      |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   195   *      +------+------+------+------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   196   *      |<---->|
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   197   *        Page
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   198   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   199   * Erased:  Sector was erased successfully. This marker also contains the sector erase counter
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   200   * Used:    Sector contains user data. This marker will be written first before data is written into a sector.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   201   *          This marker also contains the sector change counter.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   202   * Full:    Sector is completely full and must not be considered for searching for the first empty page.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   203   *          This marker also contains the sector change counter.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   204   * Erase:   Sector contains no valid data anymore and can be erased in the background task.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   205   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   206   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   207  enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   208  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   209      FEE_ERASED_MARKER_ID_E = 0x01u, /* Sector was erased successfully */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   210      FEE_USED_MARKER_ID_E,           /* Sector was used to store data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   211      FEE_FULL_MARKER_ID_E,           /* Sector is full */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   212      FEE_ERASE_REQUEST_ID_E,         /* Sector should be erased */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   213      FEE_START_MARKER_ID_E,            /* Double storage of USED marker, contains address of first blockheader */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   214      FEE_CLONE_START_MARKER_ID_E,    /* Marker to indicate that cloning of a defect sector has startet in this sector --> Ifx robust programming */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   215      FEE_RESERVED_MARKER_ID1_E,      /* Reserved range marker space in the sector header, currently not used! */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   216      FEE_RESERVED_MARKER_ID2_E,      /*    "       "     "      "   "    "      "         "      "    "   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   217      FEE_RESERVED_MARKER_ID3_E,      /*    "       "     "      "   "    "      "         "      "    "   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   218      FEE_RESERVED_MARKER_ID4_E,      /*    "       "     "      "   "    "      "         "      "    "   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   219      FEE_RESERVED_MARKER_ID5_E,      /*    "       "     "      "   "    "      "         "      "    "   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   220      FEE_RESERVED_MARKER_ID6_E,      /*    "       "     "      "   "    "      "         "      "    "   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   221      FEE_NUM_MARKER_E                /* Amount of required markers in the sector header + 1 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   222  };
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   223  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   224  /* Sector marker structure */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   225  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   226  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   227      uint16  xPattern;               /* Static marker pattern: 0xCAFE */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   228      uint8   xIdent;                 /* Ident to identify the marker: 0x01 Erased-Marker, 0x02 Used-Marker, 0x03 Full-Marker, 0x04 Erase-Request */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   229      uint8   xContent[3];            /* Sector change counter */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   230      uint16  xChecksum;              /* Crc16 checksum, calculation over Patter, Ident and content */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   231  }Fee_MarkerProp_t;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   232  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   233  /* Sector detection type */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   234  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   235  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   236      uint32  SecChngCnt_u32;         /* Sector change counter */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   237      uint8   ctErasedMarker_u8;      /* Number of found ERASED markers */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   238      uint8   ctUsedMarker_u8;        /* Number of found USED markers */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   239      uint8   ctFullMarker_u8;        /* Number of found FULL markers */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   240      uint8   ctEraseReq_u8;          /* Number of found ERASE requests */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   241      uint32  xStartAddr_u32;         /* Address of first blockheader in the sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   242      uint8   ctCloneMarker_u8;       /* Cloning of data has started (only Ifx robust programming algorithm */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   243  }Fee_stSecDet_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   244  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   245  /* Sector states */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   246  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   247  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   248      FEE_SECTOR_STATE_UNDEF_E        = 0,                      /* undefined sector-state --> no marker found */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   249      FEE_SECTOR_ERASED_E             = FEE_ERASED_MARKER_ID_E, /* sector was erased */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   250      FEE_SECTOR_USED_E               = FEE_USED_MARKER_ID_E,   /* sector was used to write data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   251      FEE_SECTOR_FULL_E               = FEE_FULL_MARKER_ID_E,   /* sector is full */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   252      FEE_SECTOR_REQUEST2ERASE_E      = FEE_ERASE_REQUEST_ID_E, /* sector could be erased */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   253      FEE_SECTOR_CONSIDERED_E         = FEE_NUM_MARKER_E        /* sector was considered in function Fee_LLDetectActiveSector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   254  }Fee_SectorState_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   255  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   256  /* Sector order after sort sequence */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   257  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   258  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   259      uint32 SecChngCnt_u32;                  /* Sector change counter */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   260      Fee_SectorState_ten SecState_en;        /* Sector state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   261      uint8 xPhySecIdx_u8;                    /* Sector index (physical sector) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   262  }Fee_LLSectorOrder_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   263  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   264  /* Fee internal return types */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   265  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   266  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   267      FEE_ORDER_PENDING_E,            /* The order is still pending*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   268      FEE_ORDER_FINISHED_E,           /* The order was finished without error */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   269      FEE_BLOCK_INVALIDATED_E,        /* The block was invalidated in the block status */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   270      FEE_ERROR_E,                    /* An error occured, maybe data in flash was not valid */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   271      FEE_SECTORCHANGE_E,             /* A sector change has to be done */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   272      FEE_SECTORFULL_E,               /* The sector is full */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   273      FEE_ABORTED_E,                  /* An order was aborted*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   274      FEE_ERASE_SECTOR_E,             /* The sector must be erased */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   275      FEE_SEARCH_ABORTED_E,           /* Searching was aborted */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   276      FEE_NUM_RET_VAL_E               /* Number of return values */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   277  }Fee_stRetVal_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   278  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   279  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   280  /* Flash properties */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   281  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   282  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   283      uint32  Fee_PhysStartAddress_u32;       /* Physical sector: start address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   284      uint32  Fee_PhysEndAddress_u32;         /* physical sector: end address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   285      uint32  Fee_LogStartAddress_u32;        /* logical sector: start address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   286      uint32  Fee_LogEndAddress_u32;          /* logical sector: end address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   287  }Fee_FlashProp_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   288  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   289  /* Block properties for all Fee blocks
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   290   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   291   * Status Flags:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   292   * Block flags will help to specify a more detailed block configuration. The low Byte of these block flags is also stored
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   293   * in the flash (status byte inside the block header). This information (in Flash) can be used to read/write the layout
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   294   * without configuration (PAV, CB).
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   295   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   296   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   297   *                                                 |<----- Block Status Byte in Block Header ----->|
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   298   * |<---------------------------------------- Block Flags ---------------------------------------->|
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   299   *    F     E     D     C     B     A     9     8  |  7     6     5     4     3     2     1     0  |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   300   * +-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   301   * |     |     |     |     |     |Prio-| Job type  |     |     | Rob |Surv.|(Inv)| DataFilter| Sec-|
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   302   * |     |     |     |     |     |rity |           |     |     |Attr.|Attr.|     |    Type   | lvl |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   303   * +-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   304   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   305   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   306   *  0  ... SecurityLevel      => 0...SingleStorage, 1...DoubleStorage
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   307   * 1+2 ... Data Filter Type   => 0...Dynamic:         Anybody can erase this block (e.g. during migration)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   308   *                               1...Static:          Only certain users (e.g. repair shops) can erase this block
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   309   *                               2...Permanent:       Only very certain users (e.g. OEM) can erase this block
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   310   *                               3...Super Permanent: Block can never be erased
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   311   *  3 .... Invalid            => 0...Block OK, 1...Block is invalid  --> can be changed by function Fee_InvalidateBlock
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   312   *  4 .... Survival Attribute => 0...No survival, 1... Survival (even without being part of the layout)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   313   *  5 .... Robustness Attribute (Robustness against data modification during write execution)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   314   *                            => 0...Deactivated:     No additional checksum is used
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   315   *                            => 1...Activated:       Additional checksum is used
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   316   * 8+9 ... TypeOfBlock        => 0...InternalJob, 1...NvmJob, 2...AdapterJob (e.g. Mx17 Eep adapter)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   317   *  A .... Priority           => Job priority:        0...FEE_NORMAL_PRIO_E --> FeeImmediateData = No
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   318   *                                                    1...FEE_HIGH_PRIO_E   --> FeeImmediateData = Yes
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   319   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   320  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   321  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   322      uint16 BlockPersistentId_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   323      uint16 Flags_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   324      uint16 Length_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   325      void (* const JobEndNotification_pfn) (void);      /* callback function, will be called if a job was successfully finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   326      void (* const JobErrorNotification_pfn) (void);    /* callback function, will be called if a job was finished with an error */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   327  }Fee_BlockPropertiesType_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   328  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   329  /* Job types corresponding to the queue index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   330  enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   331  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   332      FEE_JOB_TYPE_INTERNAL_E = 0,            /* Internal job index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   333      FEE_JOB_TYPE_NVM_E      = 1,            /* NvM job index  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   334      FEE_JOB_TYPE_ADAPTER_E  = 2             /* Adapter job index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   335  };
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   336  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   337  /* State machine types for the function Fee_LLWriteMarker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   338  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   339  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   340      FEE_LL_MARKER_INIT_E,                   /* Init state                                    */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   341      FEE_LL_MARKER_BLK_CHK_E,                /* Perform a blank check over one page           */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   342      FEE_LL_MARKER_BLK_CHK_WAIT_E,           /* Wait for the blank check order to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   343      FEE_LL_MARKER_BLK_CHK_ERROR_E,          /* Differences detected                          */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   344      FEE_LL_MARKER_BLK_CHK_FINISHED_E,       /* Start write order of the marker               */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   345      FEE_LL_MARKER_WRITE_WAIT_E,             /* Wait for the write order to be finished       */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   346      FEE_LL_MARKER_WRITE_ERROR_E,            /* Read or write error                           */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   347      FEE_LL_MARKER_VERIFY_E,                 /* Verify written marker                         */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   348      FEE_LL_MARKER_VERIFY_WAIT_E,            /* Wait for verify marker                        */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   349      FEE_LL_MARKER_VERIFY_FINISHED_E         /* Verify marker finished                        */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   350  }Fee_LLWrMarkerType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   351  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   352  /* State machine types for the function Fee_HLWriteBlock and Fee_HLReadBlock */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   353  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   354  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   355      FEE_HL_RDWR_BLK_INIT_E,                 /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   356      FEE_HL_SEARCH_BLK_HDR_E,                /* Search block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   357      FEE_HL_READ_BLK_HDR_WAIT_E,                  /* Read block header for redundant blocks */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   358      FEE_HL_CHECK_BLK_HDR_E,                 /* Check block header for redundant blocks */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   359      FEE_HL_CALC_BLK_CS_E,                   /* Calculate the user checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   360      FEE_HL_CHECK_BLK_CS_E,                  /* Verify the block checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   361      FEE_HL_RD_DATA_FROM_BLK_E,              /* Read the block data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   362      FEE_HL_COMP_BLK_E,                      /* Compare the complete block data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   363  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   364      /* Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   365      #if (defined(RBA_FLSIFX_FLASH) || defined(RBA_FLSJDP_FLASH))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   366      FEE_HL_RD_WAIT_FOR_FLS_E,               /* Wait for the Fls to overstamp an invalid header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   367      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   368      /* END Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   369  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   370      FEE_HL_WR_BLK_E                         /* Write the block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   371  }Fee_HLRdWrBlockType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   372  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   373  /* State machine types for the function Fee_LLWriteBlock */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   374  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   375  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   376      FEE_LL_WR_BLK_INIT_E,                   /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   377      FEE_LL_WR_WRITEHEADER_E,                /* Write the header (and first data bytes) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   378      FEE_LL_WR_SIZECHECK_HSR_E,              /* check for space until HSR */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   379      #if (FEE_NO_FALLBACK_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   380      FEE_LL_WR_BLANKCHECK_NOFB_WR_E,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   381      FEE_LL_WR_BLANKCHECK_NOFB_WR_WAIT_E,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   382      FEE_LL_WR_WRITE_NOFB_MARKER_E,          /* Write the NoFallback marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   383      FEE_LL_WR_WRITE_NOFB_MARKER_WAIT_E,     /* Wait until the programming of the NoFallback marker is finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   384      FEE_LL_WR_FILL_SECTOR_END_E,            /* Changes the active sector and fills the empty pages if necessary */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   385      FEE_LL_WR_FILL_SECTOR_END_WAIT_E,       /* Wait until the write order to fill the empty pages is finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   386      FEE_LL_WR_FILL_SECTOR_END_ERROR_E,      /* Errors during write occured */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   387      FEE_LL_WR_WRITE_NOFB_MARKER_ERROR_E,    /* Errors during write occured */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   388      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   389      FEE_LL_WR_WRITEHEADER_WAIT_E,           /* Wait until the write order is finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   390      FEE_LL_WR_VERIFYHEADER_E,               /* Verify the header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   391      FEE_LL_WR_VERIFYHEADER_WAIT_E,          /* Wait for the verification to end */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   392      FEE_LL_WR_VERIFYHEADER_ERROR_E,         /* Verify error */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   393      FEE_LL_WR_WRITEDATA_SEC_A_E,            /* Write the data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   394      FEE_LL_WR_WAIT_WRITEDATA_SEC_A_E,       /* Wait until the write order is finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   395      FEE_LL_WR_WRITE_ERROR_E,                /* Error during write (header or data page writes) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   396  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   397      FEE_LL_WR_WRITE_FULL_MARKER_E,          /* Write the FULL marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   398      FEE_LL_WR_ERASE_SECTOR_E,               /* Erase a sector and write the ERASED marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   399      FEE_LL_WR_WRITE_USED_MARKER_E,          /* Write the USED marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   400      FEE_LL_WR_WRITE_START_MARKER_E,         /* Write the START marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   401  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   402      /* Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   403      #if (defined(RBA_FLSIFX_FLASH) || defined(RBA_FLSJDP_FLASH))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   404      FEE_LL_WR_WAIT_FOR_FLS_OVERPROGRAMMING_E,   /* Wait for the Fls to overstamp an invalid header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   405      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   406      /* END Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   407  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   408      #if(FEE_ROBUST_PROG_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   409      FEE_LL_WR_WRITEDATA_IFX_HANDLING_E,     /* robust Ifx handling in case of wordline fails */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   410      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   411      FEE_LL_WR_VERIFY_BLK_E                  /* Verify the complete data including the block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   412  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   413      /* Robust block programming states (Hdpg1 -> Data -> Hdpg2 write) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   414      #if (FEE_PAGES_USED_BY_BLK_HEADER == 2u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   415      ,FEE_LL_WR_WRITEHDRPG2_E,                /* Write the 2nd header page. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   416      FEE_LL_WR_WAIT_WRITEHDRPG2_E            /* Wait until 2nd header page write is completed. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   417      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   418  }Fee_LLWrBlockType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   419  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   420  /* State machine types for the function Fee_LLCompBlkInFlash */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   421  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   422  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   423      FEE_LL_CMP_BLK_INIT_E,                  /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   424      FEE_LL_CMP_HEADER_E,                    /* Compare the complete block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   425      FEE_LL_CMP_WAIT_HEADER_E,               /* Wait for the compare to finish */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   426      FEE_LL_CMP_CHECK_OVERLAP_E,             /* Check for an overlap */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   427      FEE_LL_CMP_DATA_SEC_A_E,                /* Check the header compare result and compare the data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   428      FEE_LL_CMP_WAIT_DATA_SEC_A_E,           /* Wait for the compare to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   429      FEE_LL_CMP_FINISHED_E                   /* Verify the data compare result and reset the state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   430  }Fee_LLCmpBlkType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   431  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   432  /* State machine types for the function Fee_LLCopyData2Buffer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   433  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   434  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   435      FEE_LL_CPY_BLK_INIT_E,                  /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   436      FEE_LL_CPY_BLOCK_START_E,               /* Read out the data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   437      FEE_LL_CPY_BLOCK_WAIT_E,                /* Wait for the read order to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   438      FEE_LL_CPY_BLOCK_ERROR_E,               /* Error in the read function */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   439      FEE_LL_CPY_BLOCK_FINISHED_E             /* Finish the function or the data transfer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   440  }Fee_LLCpyBlkType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   441  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   442  /* State machine types for the function Fee_LLCalcBlkCrcInFlash */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   443  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   444  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   445      FEE_LL_CRC_BLK_INIT_E,                  /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   446      FEE_LL_CRC_RD_HD_PAGE_E,                /* Read the header page */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   447      FEE_LL_CRC_RD_PAGE_E,                   /* Calculate the block checksums */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   448      FEE_LL_CRC_CHECK_OVERLAP_E,             /* Check for an overlap */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   449      #if(FEE_ROB_FEATURE_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   450      FEE_LL_CRC_RD_ROB_PAGE_E,               /* Retry with the robustness checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   451      FEE_LL_CRC_CHECK_OVERLAP_ROB_E,         /* Check for an overlap */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   452      FEE_LL_CRC_RD_ROB_PAGE_WAIT_E,          /* Wait until the read access is finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   453      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   454      FEE_LL_CRC_RD_PAGE_WAIT_E,              /* Wait until the read access is finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   455      FEE_LL_CRC_RD_ERROR_E                   /* Read error case */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   456  }Fee_LLCalcCrcBlkType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   457  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   458  /* State machine types for reading */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   459  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   460  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   461      FEE_LL_INIT_READ_E                      /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   462      ,FEE_LL_BLANK_CHECK_E                    /* Perform a blank check */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   463      ,FEE_LL_BLANK_CHECK_WAIT_E                /* Wait for the blank check to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   464      ,FEE_LL_READ_PAGE_E                     /* Read pages */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   465      ,FEE_LL_WAIT_READ_PAGE_E                /* Wait for the read order to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   466      ,FEE_LL_READ_ERROR_E                    /* Error reaction for read error */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   467      ,FEE_LL_READ_FINISHED_E                 /* Finish state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   468      #if (FEE_HEADER_RECHECK_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   469      #if (FEE_NO_FALLBACK_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   470      ,FEE_LL_NOFALLBACK_MARKER_CHECK_E
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   471      ,FEE_LL_NOFALLBACK_MARKER_CHECK_WAIT_E
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   472      ,FEE_LL_NOFALLBACK_MARKER_CHECK_FAILED_E
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   473      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   474      ,FEE_LL_RECHECK_HEADER_E
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   475      ,FEE_LL_RECHECK_HEADER_WAIT_E
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   476      ,FEE_LL_RECHECK_HEADER_FAILED_E
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   477      ,FEE_LL_RECHECK_HEADER_FINISHED_E
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   478      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   479  } Fee_LLRdStateType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   480  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   481  /* States for function Fee_LLCheckErasePattern */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   482  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   483  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   484      FEE_LL_INIT_BLANK_CHECK_E,              /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   485      FEE_LL_PERFORM_BLANK_CHECK_E,           /* Perform a blank check */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   486      FEE_LL_WAIT_PERFORM_BLANK_CHECK_E,      /* Wait for the blank check order to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   487      FEE_LL_BLANK_CHECK_ERROR_E,             /* Differences detected */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   488      FEE_LL_BLANK_CHECK_FINISHED_E           /* Finish state machine with success */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   489  } Fee_LLBlankCheckType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   490  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   491  /* State of function Fee_Prv_LLFindEmptyPage */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   492  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   493  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   494      #if ( defined(RBA_FLSRH850P1xC_FLASH) || defined(RBA_FLSV850R1x_FLASH) || defined(RBA_FLSRH850xx_FLASH) )
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   495      FEE_LL_FINDEMPTYPGE_INIT_E,             /* Initalize find empty page state machine  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   496      FEE_LL_FINDEMPTYPGE_CHECK_E,            /* Begin a blank check                      */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   497      FEE_LL_FINDEMPTYPGE_WAIT_E,             /* Wait until the blank check finished      */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   498      FEE_LL_FINDEMPTYPGE_RESULT_BLANK_E,     /* Checked chunk was completely blank       */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   499      FEE_LL_FINDEMPTYPGE_RESULT_NOT_BLANK_E  /* Checked chunk was not completely blank   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   500      #else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   501      FEE_LL_FIND_CURRENT_SECTOR_E,           /* Evaluate the sector with most current values */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   502      FEE_LL_FIND_LAST_HEADER_E,              /* Search the last block header in the active sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   503      FEE_LL_FINISHED_E                       /* Function finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   504      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   505  }Fee_LLFndEmptyPgeType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   506  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   507  /* State of the function Fee_LLSearchSpecifiedBlkHeader */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   508  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   509  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   510      FEE_LL_SEARCHBLK_INIT_E,                /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   511      FEE_LL_SEARCHBLK_BLK_HEADER_E           /* Search for the next block header*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   512  }Fee_LLSearchBlkHdrType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   513  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   514  #if(FEE_FAST_CACHE_INIT_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   515  /* State of the function Fee_BuildUpCache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   516  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   517  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   518      FEE_LL_BLD_UP_CACHE_INIT_E,             /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   519      FEE_LL_BLD_UP_CACHE_READ_E              /* Read out data directly if possible */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   520  }Fee_LLBuildUpCache_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   521  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   522  /* State of the function Fee_BuildUpCacheForAllSect */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   523  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   524  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   525      FEE_LL_BLD_UP_CACHE_ALL_SECT_INIT_E,/* Init case */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   526      FEE_LL_BLD_UP_CACHE_ALL_SECT_DO_E   /* Build up the cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   527  }Fee_LLBuildUpCacheAllSect_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   528  /* FEE_FAST_CACHE_INIT_ACTIVE != FALSE */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   529  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   530  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   531  #if((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) || (FEE_RB_ACT_SURVIVAL_EVAL != FALSE))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   532  #if (FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE == 0)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   533  /* Unknown blcok sector reorganiation without cache: State of the function Fee_LLSearchUnknBlkHeader */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   534  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   535  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   536      FEE_LL_SEARCHUNKNBLK_INIT_E,            /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   537      FEE_LL_SEARCHUNKNBLK_UNKN_BLK_HEADER_E, /* Search the next unknown block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   538      FEE_LL_SEARCHUNKNBLK_SPEC_BLK_HEADER_E  /* Search the next specific block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   539  }Fee_LLSearchUnknBlkHdrType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   540  #else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   541  /* Unknown block sector reorganiation with cache: states of cache build up function Fee_BuildUpCacheUnknownBlk */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   542  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   543  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   544      FEE_LL_BLD_UP_CACHE_UNKOWN_BLK_INIT_E,             /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   545      FEE_LL_BLD_UP_CACHE_UNKOWN_BLK_READ_E,             /* Read out data directly if possible */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   546      FEE_LL_BLD_UP_CACHE_UNKOWN_BLK_VALIDATEDATA_E      /* Validate the data CRC of the uknown block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   547  }Fee_LLBuildUpUnknownBlkCache_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   548  #endif /* End of (FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE == 0) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   549  #endif /* End of ((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) || (FEE_RB_ACT_SURVIVAL_EVAL != FALSE)) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   550  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   551  /* States for the function Fee_LLSectorReorganization */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   552  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   553  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   554      FEE_LL_REORG_INIT_E,                    /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   555      FEE_LL_REORG_PREP_SEARCH_BLK_E,         /* Prepare the next block search */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   556      FEE_LL_REORG_SEARCH_BLK_E,              /* Search for a specific block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   557      FEE_LL_REORG_CHECK_BLOCK_CS_E,          /* Evaluate the block checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   558      FEE_LL_REORG_REDUNDANT_BLK_CHK_E,       /* Check if redundant copy is not lost during sector reorg. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   559      FEE_LL_REORG_WRITE_BLOCK_E,             /* Write a block into the latest sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   560  #if((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) || (FEE_RB_ACT_SURVIVAL_EVAL != FALSE))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   561      FEE_LL_REORG_SEARCH_UNK_BLK_E,          /* Search for an unknown block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   562   #if(FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE != 0) /* Unknown blcok sector reorganiation with cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   563      FEE_LL_REORG_CACHEBUILDUP_UNK_BLK_E,    /* Building of cache for unknown block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   564      FEE_LL_REORG_SEARCH_UNK_HDRBLK_WAIT_E,            /* Wait till reading of unknown block header is finished. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   565      FEE_LL_REORG_SEARCH_UNK_HDRBLK_READ_ERROR_E,    /* Failure during read of unknown block header. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   566      FEE_LL_REORG_SEARCH_UNK_HDRBLK_READ_FINISHED_E,    /* Unknown block header read successful. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   567   #endif /* End of (FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE != 0) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   568  #endif /* End of ((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) || (FEE_RB_ACT_SURVIVAL_EVAL != FALSE)) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   569  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   570      /* Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   571      #if (defined(RBA_FLSIFX_FLASH) || defined(RBA_FLSJDP_FLASH))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   572      FEE_LL_REORG_WAIT_FOR_FLS_E,            /* Wait for the Fls to overstamp an invalid header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   573      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   574      /* END Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   575  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   576      FEE_LL_REORG_FINISHED_E                 /* Function finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   577  }Fee_LLSecReorgType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   578  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   579  /* States for the function Fee_LLRedundantCpyChk */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   580  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   581  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   582      FEE_LL_REDUNDANT_CPY_CHK_INIT_E,            /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   583      FEE_LL_REDUNDANT_CPY_CHK_SEARCH_HDR_E,      /* Search header of redundant copy */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   584      FEE_LL_REDUNDANT_CPY_CHK_BLK_CS_E           /* Validate data CRC of redundant copy */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   585  }Fee_LLRedundantCpyChk_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   586  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   587  /* States for the function Fee_LLCpyBlkFromFls2Fls */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   588  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   589  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   590      FEE_LL_CPY_FLS2FLS_INIT_E,                      /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   591  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   592      #if (FEE_NO_FALLBACK_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   593      FEE_LL_CPY_FLS2FLS_WRITE_NOFB_MARKER_E,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   594      FEE_LL_CPY_FLS2FLS_WAIT_WRITE_NOFB_MARKER_E,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   595      FEE_LL_CPY_FLS2FLS_WRITE_NOFB_MARKER_ERROR_E,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   596      FEE_LL_CPY_FLS2FLS_WAIT_FILL_SECTOR_END_E,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   597      FEE_LL_CPY_FLS2FLS_FILL_SECTOR_END_ERROR_E,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   598      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   599  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   600      FEE_LL_CPY_FLS2FLS_READ_E,                      /* Read out the complete block (header and data) and finish the function if possible */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   601      FEE_LL_CPY_FLS2FLS_WAIT_READ_E,                 /* Wait for the read order to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   602      FEE_LL_CPY_FLS2FLS_READ_ERROR_E,                /* Read error state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   603  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   604      /* Robust block programming states (Hdpg1 -> Data -> Hdpg2 write) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   605      #if (FEE_PAGES_USED_BY_BLK_HEADER == 2u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   606      FEE_LL_CPY_FLS2FLS_HDRPG1_WRITE_E,              /* Write the header page 1 into the new sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   607      FEE_LL_CPY_FLS2FLS_WAIT_HDRPG1_WRITE_E,         /* Wait for the header page 1 write order to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   608      FEE_LL_CPY_FLS2FLS_HDRPG1_WRITE_ERROR_E,        /* Write error state for header page 1 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   609      FEE_LL_CPY_FLS2FLS_HDRPG1_VERIFY_E,             /* Compare the header page 1 write */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   610      FEE_LL_CPY_FLS2FLS_WAIT_HDRPG1_VERIFY_E,        /* Wait for the header page 1 verification to finish */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   611      FEE_LL_CPY_FLS2FLS_HDRPG1_VERIFY_ERROR_E,       /* Verification error for header page 1 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   612      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   613  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   614      FEE_LL_CPY_FLS2FLS_WRITE_E,                     /* Write the data into the new sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   615      FEE_LL_CPY_FLS2FLS_WAIT_WRITE_E,                /* Wait for the write order to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   616      FEE_LL_CPY_FLS2FLS_WRITE_ERROR_E,               /* Write error state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   617      FEE_LL_CPY_FLS2FLS_VERIFY_E,                    /* Compare the programmed data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   618      FEE_LL_CPY_FLS2FLS_WAIT_VERIFY_E,               /* Wait for the verification to finish */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   619      FEE_LL_CPY_FLS2FLS_VERIFY_ERROR_E,              /* Verification error */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   620  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   621      /* Robust block programming states (Hdpg1 -> Data -> Hdpg2 write) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   622      #if (FEE_PAGES_USED_BY_BLK_HEADER == 2u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   623      FEE_LL_CPY_FLS2FLS_HDRPG2_WRITE_E,              /* Write the header page 2 into the new sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   624      FEE_LL_CPY_FLS2FLS_WAIT_HDRPG2_WRITE_E,         /* Wait for the header page 2 write order to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   625      FEE_LL_CPY_FLS2FLS_HDRPG2_WRITE_ERROR_E,        /* Write error state for header page 2 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   626      FEE_LL_CPY_FLS2FLS_HDRPG2_VERIFY_E,             /* Compare the header page 2 write */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   627      FEE_LL_CPY_FLS2FLS_WAIT_HDRPG2_VERIFY_E,        /* Wait for the header page 2 verification to finish */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   628      FEE_LL_CPY_FLS2FLS_HDRPG2_VERIFY_ERROR_E,       /* Verification error for header page 2 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   629      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   630  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   631      FEE_LL_CPY_FLS2FLS_CHECK_ADR_OVERFLOW_E,        /* Data transfer is finished, check a possible address overflow */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   632      FEE_LL_CPY_FLS2FLS_WRITE_FULL_MARKER_E,         /* Write the FULL marker to the "old" sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   633      FEE_LL_CPY_FLS2FLS_ERASE_SECTOR_E,              /* Erase the sector that will be used as a new USED sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   634      FEE_LL_CPY_FLS2FLS_WRITE_USED_MARKER_E,         /* Write the USED marker to new sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   635  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   636      #if(FEE_ROBUST_PROG_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   637      FEE_LL_CPY_FLS2FLS_ROBUST_IFX_HANDLING_E,       /* robust Ifx handling in case of wordline fails */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   638      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   639  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   640      #if defined (FEE_PRV_ROBUST_SECT_OVERFLOW)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   641      FEE_LL_CPY_FLS2FLS_ROBUST_SECT_OVERFLOW_E,      /* Robust sector reorganisation when sector overflow occurs during sector reorg. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   642      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   643  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   644      FEE_LL_CPY_FLS2FLS_WRITE_START_MARKER_E         /* Write the START marker to the new sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   645  }Fee_LLCpyBlkFls2Fls_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   646  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   647  /* States for the function Fee_LlRobustSectorOverflow */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   648  #if defined (FEE_PRV_ROBUST_SECT_OVERFLOW)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   649  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   650  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   651      FEE_LL_ROBUST_SECTOR_OVERFLOW_INIT_E,           /* Init state. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   652      FEE_LL_ROBUST_SECTOR_OVERFLOW_WR_CM_E,          /* Write Clone marker in the latest sector. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   653      FEE_LL_ROBUST_SECTOR_OVERFLOW_PREPARE_E,        /* Compute the address and number of bytes for the operation. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   654  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   655      #if ( defined(RBA_FLSRH850P1xC_FLASH) || defined(RBA_FLSV850R1x_FLASH) || defined(RBA_FLSRH850xx_FLASH) )
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   656      FEE_LL_ROBUST_SECTOR_OVERFLOW_BLANK_CHK_E,      /* Check if the page is blank, transfer only programmed pages. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   657      FEE_LL_ROBUST_SECTOR_OVERFLOW_BLANK_CHK_WAIT_E, /* Wait for Blank check operation to complete. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   658      #endif /* #if ( defined(RBA_FLSRH850P1xC_FLASH) || defined(RBA_FLSV850R1x_FLASH) || defined(RBA_FLSRH850xx_FLASH) ) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   659  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   660      FEE_LL_ROBUST_SECTOR_OVERFLOW_READ_PAGE_E,      /* Read out the programmed page in an internal buffer. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   661      FEE_LL_ROBUST_SECTOR_OVERFLOW_READ_PAGE_WAIT_E, /* Wait for Read operation to complete. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   662      FEE_LL_ROBUST_SECTOR_OVERFLOW_COPY_DATA_E,      /* Copy data to new sector. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   663      FEE_LL_ROBUST_SECTOR_OVERFLOW_COPY_DATA_WAIT_E, /* Wait for Write operation to complete. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   664      FEE_LL_ROBUST_SECTOR_OVERFLOW_VERIFY_DATA_E,    /* Verify the copied data. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   665      FEE_LL_ROBUST_SECTOR_OVERFLOW_VERIFY_DATA_WAIT_E,/* Wait for Verify operation to complete. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   666      FEE_LL_ROBUST_SECTOR_OVERFLOW_VERIFY_SUCCESS_E, /* Check if more bytes are left to be programmed. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   667      FEE_LL_ROBUST_SECTOR_OVERFLOW_WR_UM_E,          /* Write Used marker in the latest sector. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   668      FEE_LL_ROBUST_SECTOR_OVERFLOW_SORT_SECT_E,      /* Sort sectors */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   669      FEE_LL_ROBUST_SECTOR_OVERFLOW_ERROR_E,          /* Error state for all kinds of error in this state machine. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   670      FEE_LL_ROBUST_SECTOR_OVERFLOW_ERASE_E           /* Re-erase the older sector, this state is reached for error handling. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   671  }Fee_LLRobustSectOverflow_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   672  #endif /* #if defined (FEE_PRV_ROBUST_SECT_OVERFLOW) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   673  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   674  /* Read / write order type */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   675  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   676  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   677      uint32                              xRdAddress;                     /* Address for reading (Fee_LLReadBlock) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   678      uint32                              xWrAddress;                     /* Address for writing (Fee_LLWriteBlock) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   679      uint32                              xCmpAddress;                    /* Address for comparing (Fee_LLCompBlkInFlash) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   680      uint32                              xCrcAddress;                    /* Address for the CRC (Fee_LLCompBlkInFlash) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   681      uint32                              xCpyAddress;                    /* Address for copying (Fee_LLCompBlkInFlash) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   682      uint32                              AdrHdSearchStart_u32;           /* Start address for the header search after reloads */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   683      uint32                              xStartAddrNextSector_u32;        /* Payload of START-Marker, contains the expected address of the 1. blockheader */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   684  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   685  /* Robust block programming states (Hdpg1 -> Data -> Hdpg2 write) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   686  #if (FEE_PAGES_USED_BY_BLK_HEADER == 2u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   687      uint32                              xHdPg2Address;                   /* Address for writing the header 2nd page. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   688  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   689  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   690  #if !( defined(RBA_FLSRH850P1xC_FLASH) || defined(RBA_FLSV850R1x_FLASH) || defined(RBA_FLSRH850xx_FLASH) )
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   691      uint32                              LastProgrammedAddress_u32;        /* Last programmed page during cache build up. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   692      uint32                              LastValidHdrAddress_u32;          /* Last valid header found during cache build up. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   693  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   694  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   695      Fee_LLSecReorgType_ten              Fee_LLSecReorg_en;                /* State machine for the sector reorganization */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   696      Fee_LLRedundantCpyChk_ten           Fee_LLRedundantCpyChk_en;         /* State machine for checking redundant copy */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   697      Fee_LLCpyBlkFls2Fls_ten             Fee_LLCpyBlkFls2Fls_en;           /* State machine for copying one block from one sector to another one */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   698  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   699  #if defined (FEE_PRV_ROBUST_SECT_OVERFLOW)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   700      Fee_LLRobustSectOverflow_ten        Fee_LLRobustSectOverflow_en;      /* LL state machine for Robust sector overflow */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   701  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   702  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   703      Fee_HLRdWrBlockType_ten             Fee_HLWrBlock_en;                  /* HL state machine for writing a block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   704  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   705  #if(FEE_RB_MAINTAIN != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   706      Fee_HLRdWrBlockType_ten             Fee_HLMtBlock_en;                  /* HL state machine for maintaining a block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   707   #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   708  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   709      Fee_LLWrBlockType_ten               Fee_LLWrBlock_en;                  /* LL State machine for writing a block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   710      Fee_HLRdWrBlockType_ten             Fee_HLRdBlock;                     /* state machine for reading a block High Level */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   711      Fee_LLWrBlockType_ten               Fee_LLNextUsedWrBlock_en;          /* LL state for saving the next write state if a USED marker is necessary in between */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   712      Fee_LLWrBlockType_ten               Fee_LLNextEraseWrBlock_en;         /* LL state for saving the next write state if an erase operation is necessary in between */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   713      Fee_LLCmpBlkType_ten                Fee_LLCompBlk;                     /* LL state machine for comparing data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   714      Fee_LLCpyBlkType_ten                Fee_LLCopyBlk_en;                  /* LL state machine for copying data from the flash to the user buffer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   715      Fee_LLCalcCrcBlkType_ten            Fee_LLCalcCrcBlk_en;               /* LL state machine for calculating the checksum of a block inside the flash */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   716      Fee_LLWrMarkerType_ten              Fee_LLWrMarker_en;                 /* LL state machine for writing a sector marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   717      Fee_LLRdStateType_ten               Fee_LLRdState_en;                  /* LL state machine to read a specified address in the sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   718      Fee_LLBlankCheckType_ten            Fee_LLBlankCheckState_en;          /* LL State machine to perform a blank check */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   719      Fee_LLFndEmptyPgeType_ten           Fee_LLFindEmptyPageState_en;       /* LL state machine to find an empty page within one sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   720      Fee_LLSearchBlkHdrType_ten          Fee_LLSearchBlkHdr_en;             /* LL state machine to find a specified block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   721  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   722  #if((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) || (FEE_RB_ACT_SURVIVAL_EVAL != FALSE))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   723   #if(FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE == 0) /* Unknown block sector reorganiation without cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   724      Fee_LLSearchUnknBlkHdrType_ten      Fee_LLSearchUnknBlkHdr_en;          /* LL state machine to find an unknown block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   725   #else /* Unknown blcok sector reorganiation with cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   726      uint32                              Fee_UnknownBlkCacheAdd_u32;         /* Address till where the cache for unknown block is scanned */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   727      uint16                              Fee_UnknownBlkCacheIdx_u16;         /* Index till which the cache for unknown block is built */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   728      Fee_LLBuildUpUnknownBlkCache_ten    Fee_LLBuildUpCacheUnknownBlk_en;    /* LL state machine to build up the cache for unknown blocks */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   729   #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   730  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   731  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   732  #if(FEE_FAST_CACHE_INIT_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   733      Fee_LLBuildUpCache_ten              Fee_LLBuildUpCache_en;              /* LL state machine to build up the cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   734      Fee_LLBuildUpCacheAllSect_ten       Fee_LLBuildUpCacheAllSect_en;       /* LL state machine to build up the cache for all sectors */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   735  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   736  } Fee_RdWrOrder_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   737  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   738  /* Block header info type */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   739  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   740  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   741      uint32 AdrBlkHeader_u32;    /* Read address for for the function Fee_LLReadBlock and Fee_LLCpyBlkFromFls2Fls */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   742      uint32 BlkCrc32_u32;        /* Block data checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   743      uint16 HdrCrc16_u16;        /* Block header checksum (start value for block data checksum) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   744      uint16 BlkLength_u16;       /* Extracted block length from the block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   745      uint16 FeeIndex_u16;        /* Fee Index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   746      uint8  BlkStatus_u8;        /* Block status */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   747  }Fee_GlobInfoLastRdHeader_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   748  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   749  /* Block write type */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   750  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   751  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   752      uint16  BytesAlrdyConsid_u16;   /* Write offset in user data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   753      uint16  BytesAlrdyCompared_u16;    /* Number of bytes already compared */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   754      uint16  Bytes2Read_u16;          /* Number of bytes to read */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   755      uint8   CompareResult_u8;       /* Result of last Fls_Compare */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   756      uint8   cntWriteRetry_u8;       /* Count number of write retries */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   757      uint8   cntCopies_u8;           /* Count number of written copies */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   758  }Fee_GlobInfoWrBlock_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   759  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   760  /* Sector reorganization type */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   761  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   762  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   763      uint32 xRdAddress_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   764      uint16 xNumBytesAlrdyCopied_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   765      uint16 xNumBytesLeftToRdWr_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   766      uint8  xCntCopies_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   767  #if (FEE_PAGES_USED_BY_BLK_HEADER == 2u)    /* Robust block programming states (Hdpg1 -> Data -> Hdpg2 write) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   768      uint8  xFirstDataPgPgm_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   769  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   770  }Fee_LLSecReorgStruct_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   771  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   772  /* Erase sector types */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   773  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   774  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   775      FEE_ERASESEC_IDLE_E = 0,        /* Idle state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   776      FEE_ERASESEC_CHECK_CACHE_E,     /* Check of cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   777      FEE_ERASESEC_START_E,           /* Erase sequence started */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   778      FEE_ERASESEC_DO_E,              /* Wait until erasing was finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   779      FEE_ERASESEC_WRITE_MARKER_E,    /* Write the sector ERASED marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   780      FEE_ERASESEC_ERROR_E            /* Error state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   781  }Fee_LLEraseStateType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   782  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   783  /* Erase Order type */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   784  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   785  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   786      Fee_LLEraseStateType_ten EraseState_en; /* State machine state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   787      uint8   xPhySectorIdx_u8;               /* Idx of sector that should get erased  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   788  }Fee_LLEraseOrderType_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   789  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   790  /* Block header structure */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   791  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   792  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   793      uint8   Preamble_au8[3];    /* Preambel (0xA53C96) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   794      uint8   BlkStatus_u8;       /* Block status, contains information like security level, etc. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   795      uint16  FeeIndex_u16;       /* FeeIndex */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   796      uint16  BlkLength_u16;      /* Block length without header and block checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   797      uint16  HdrCrc16_u16;       /* Header checksum, start value is 0xCAFE */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   798      uint32  BlkCrc32_u32;       /* Block data checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   799  }Fee_BlkHeader_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   800  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   801  /* Linked function structure */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   802  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   803  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   804      void(* Fee_ResetUsedSectors_pfn)(void);     /* Function for resetting the amount of used sectors */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   805  }Fee_LinkedFunctions_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   806  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   807  #if (FEE_PRV_DEBUG_MONITOR != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   808  #define FEE_DBM_ERROR_ENTRIES   15
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   809  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   810  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   811  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   812      FEE_DBM_ERROR_ERASE_FCT_E,        /* Used in function Fee_LLEraseSector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   813      FEE_DBM_ERROR_LLMARKER_FCT_E,     /* USed in function Fee_LLWriteMarker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   814      FEE_DBM_ERROR_XX_E                /* not used yet....                   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   815  } Fee_DebugMonitoringFct_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   816  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   817  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   818  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   819      uint32                       xSecChngCntVal;             /* value of sector change counter while error occurs */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   820      uint16                       FeeBlkIdx;                  /* if the error couldn't be assigned to a NvmBlock, this is 0xFFFF */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   821      Fee_DebugMonitoringFct_ten   xError;                     /* error number */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   822      uint8                        xErrorInfo;                 /* error info, if necessary */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   823  } FeeDBMErrInfo_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   824  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   825  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   826  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   827      FeeDBMErrInfo_tst  xErrorEntry[FEE_DBM_ERROR_ENTRIES];  /* array of a structure with detail info to the errors */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   828      uint8   idxNewEntry;                /* index points on the next free entry in the xErrorEntry buffer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   829      uint8   ctBuffOverflow;             /* counter countrs how often the FEE_DBM_ERROR_ENTRIES error overflow. Startvalue is 1, used for ProtRAM validation! */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   830  } Fee_DebugMonitoring_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   831  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   832  #define FEE_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   833  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   834  extern Fee_DebugMonitoring_tst Fee_DebugMonitoring;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   835  #define FEE_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   836  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   837  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   838  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   839  #if(FEE_ROBUST_PROG_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   840  /* Ifx robust programming */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   841  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   842  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   843      FEE_ROB_IFX_INIT,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   844      FEE_ROB_IFX_MARK_SECTOR,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   845      FEE_ROB_IFX_STORE_BUFFER,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   846      FEE_ROB_IFX_STORE_BUFFER_WAIT,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   847      FEE_ROB_IFX_COPY_DATA,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   848      FEE_ROB_IFX_STORE_COPY_WAIT,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   849      FEE_ROB_IFX_ERASE_SECTOR,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   850      FEE_ROB_IFX_WRITE_USED_MARK_SECTOR,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   851      FEE_ROB_SORT_SECTOR,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   852      FEE_ROB_IFX_FINISHED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   853  }Fee_RobIfxHdl_e;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   854  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   855  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   856  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   857      Fls_AddressType xStartAddress;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   858      uint8* DataBuffer;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   859      Fls_LengthType numBytes;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   860      uint16 offInBuf_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   861  }Fee_IfxRobustProgramming_t;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   862  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   863  #define FEE_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   864  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   865  extern Fee_IfxRobustProgramming_t Fee_IfxRobustProgramming_s;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   866  extern Fee_RobIfxHdl_e Fee_RobIfxHdl;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   867  #define FEE_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   868  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   869  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   870  #define FEE_START_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   871  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   872  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_RobIfxHandling(uint8 xActLogWrSect_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   873  #define FEE_STOP_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   874  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   875  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   876  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   877  #if ((FEE_RB_MAINTAIN != FALSE) && (FEE_NO_FALLBACK_ACTIVE != FALSE))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   878  /* Additional MainFunction write states in case NoFallback is activated */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   879  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   880  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   881      FEE_WRITE_NOFB_IDLE_E = 0,      /* Idle state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   882      FEE_WRITE_NOFB_MAINTAIN_E,      /* Maintain a NoFallback block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   883      FEE_WRITE_NOFB_BLOCK_E          /* Write a NoFallback block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   884  }Fee_WriteStateNoFb_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   885  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   886  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   887  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   888  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   889      uint32 Fee_Totalfree_bytes;    /* Total number of free bytes  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   890      uint32 Fee_hardThreshold;      /* Hard Threshold configures */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   891      uint32 Fee_softThershold;      /* Soft therosold configured*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   892  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   893  }Fee_FreeByte_thrshold_t;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   894  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   895  /*
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   896  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   897  * Extern declarations
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   898  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   899  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   900  /* Structures and variables */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   901  #define FEE_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   902  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   903  extern CONST(Fee_FlashProp_tst, FEE_CONST)          Fee_FlashProp_st[FEE_NUM_FLASH_BANKS_AVAILABLE];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   904  extern CONST (MemIf_JobResultType, AUTOMATIC)       Fee_JobTypeMapping[FEE_NUM_RET_VAL_E];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   905  extern CONST (Fee_LinkedFunctions_tst, FEE_CONST)   Fee_LinkedFunctions_cst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   906  #define FEE_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   907  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   908  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   909  #define FEE_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   910  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   911  extern P2VAR(uint8, AUTOMATIC, FEE_APPL_DATA)       Fee_PageBytePtr_cpu8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   912  extern VAR(Fee_RdWrOrder_tst, AUTOMATIC)            Fee_RdWrOrder_st;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   913  extern VAR(Fee_LLSectorOrder_tst, AUTOMATIC)        Fee_LLSectorOrder_st[FEE_NUM_FLASH_BANKS_AVAILABLE];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   914  extern VAR(Fee_LLEraseOrderType_tst, AUTOMATIC)     Fee_LLEraseOrder_st;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   915  extern VAR(Fee_OrderFifo_tst, AUTOMATIC)            Fee_OrderFifo_st[FEE_QUEUE_SIZE];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   916  extern VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC) Fee_GlobInfoLastRdHeader_st;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   917  extern VAR(Fee_GlobInfoWrBlock_tst, FEE_VAR)        Fee_GlobInfoWrBlock_st;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   918  extern VAR(Fee_LLSecReorgStruct_tst, FEE_VAR)       Fee_LLSecReorgStruct_st;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   919  extern VAR(MemIf_JobResultType, AUTOMATIC)          Fee_JobResult[FEE_QUEUE_SIZE];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   920  #define FEE_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   921  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   922  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   923  #define FEE_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   924  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   925  extern CONSTP2VAR(uint8, AUTOMATIC, FEE_APPL_DATA)  Fee_MarkerBufBytePtr_cpu8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   926  extern CONSTP2VAR(uint8, AUTOMATIC, FEE_APPL_DATA)  Fee_DataBytePtr_cpu8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   927  #define FEE_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   928  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   929  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   930  #define FEE_START_SEC_VAR_INIT_8
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   931  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   932  extern VAR(uint8, FEE_VAR)                          Fee_Prv_stInit_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   933  extern VAR(uint8, FEE_VAR)                          Fee_Prv_stReorg_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   934  extern VAR(uint8, FEE_VAR)                          Fee_NumFlashBanksUsed_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   935  extern VAR(uint8, AUTOMATIC)                        Fee_idxActQueueBackUp;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   936  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   937  /* Buffer to hold 2nd header page contents. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   938  #if (FEE_PAGES_USED_BY_BLK_HEADER == 2u)    /* Robust block programming states (Hdpg1 -> Data -> Hdpg2 write) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   939  extern VAR(uint8, AUTOMATIC) Fee_hdr2Buffer_au8[FEE_PAGE_LEN];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   940  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   941  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   942  /* Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   943  #if (defined(RBA_FLSIFX_FLASH) || defined(RBA_FLSJDP_FLASH))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   944  extern VAR(uint8, AUTOMATIC)                        Fee_hdrBuffer_au8[FEE_PAGE_LEN];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   945  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   946  /* END Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   947  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   948  #define FEE_STOP_SEC_VAR_INIT_8
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   949  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   950  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   951  #define FEE_START_SEC_VAR_INIT_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   952  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   953  extern VAR(MemIf_StatusType, FEE_VAR)               Fee_GlobModuleState_st;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   954  extern VAR(Fee_Rb_WorkingStateType_ten, AUTOMATIC)  Fee_Rb_WorkingStateBackUp_en;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   955  #define FEE_STOP_SEC_VAR_INIT_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   956  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   957  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   958  #define FEE_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   959  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   960  extern VAR(uint8, AUTOMATIC)                        Fee_idxLLSectorOrder_au8[FEE_NUM_FLASH_BANKS_AVAILABLE];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   961  extern VAR(uint8, FEE_VAR)                          Fee_idxActQueue_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   962  extern VAR(uint8, FEE_CONST)                        Fee_CacheUpdCompForSect_au8[FEE_NUM_FLASH_BANKS_AVAILABLE];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   963  extern VAR(uint8, AUTOMATIC)                        Fee_RdWrRetries_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   964  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   965  #if (FEE_RB_ACT_ERASE_SUSPENSION != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   966  extern VAR(boolean, AUTOMATIC) Fee_Prv_stSuspendActiv_b;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   967  extern VAR(boolean, AUTOMATIC) Fee_Prv_stHardReOrgErase_b;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   968  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   969  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   970  #if (FEE_RB_ADDONS_CCAS == TRUE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   971  extern VAR(boolean, AUTOMATIC) Fee_Rb_stRequestStopMode_b;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   972  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   973  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   974  #define FEE_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   975  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   976  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   977  #define FEE_START_SEC_VAR_CLEARED_32
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   978  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   979  extern VAR(uint32, AUTOMATIC)                       Fee_llMarkerPageBuf_au32[FEE_SEC_HEADER_SIZE / 4u];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   980  extern VAR(uint32, FEE_CONST)                       Fee_Cache_au32[FEE_NUM_BLOCKS];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   981  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   982  #if(FEE_ROB_FEATURE_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   983  extern VAR(uint32, AUTOMATIC)                       Fee_DataByteStartCrc_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   984  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   985  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   986  #define FEE_STOP_SEC_VAR_CLEARED_32
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   987  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   988  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   989  #define FEE_START_SEC_VAR_CLEARED_SECURED_32
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   990  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   991  extern VAR(uint32, AUTOMATIC)                       Fee_llPageBuf_au32[(FEE_LL_PAGEBUFFSIZE / 4u) + 2u];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   992  extern VAR(uint32, AUTOMATIC)                       Fee_llDataBuf_au32[FEE_LL_DATABUFFSIZE / 4u];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   993  #define FEE_STOP_SEC_VAR_CLEARED_SECURED_32
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   994  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   995  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   996  #ifdef FEE_PRV_USE_ROM_TABLE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   997  #define FEE_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   998  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   999  extern CONST(Fee_BlockPropertiesType_tst, FEE_CONST)  Fee_BlockProperties_st[FEE_NUM_BLOCKS];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1000  #define FEE_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1001  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1002  #else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1003  #define FEE_START_SEC_VAR_INIT_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1004  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1005  extern VAR(Fee_BlockPropertiesType_tst, AUTOMATIC)  Fee_BlockProperties_st[FEE_NUM_BLOCKS];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1006  #define FEE_STOP_SEC_VAR_INIT_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1007  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1008  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1009  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1010  #if (FEE_NO_FALLBACK_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1011  #define FEE_START_SEC_VAR_INIT_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1012  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1013  extern Fee_WriteStateNoFb_ten Fee_WriteStateNoFb_en;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1014  #define FEE_STOP_SEC_VAR_INIT_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1015  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1016  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1017  #define FEE_START_SEC_VAR_CLEARED_32
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1018  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1019  extern VAR(uint32, AUTOMATIC)   Fee_Rb_NoFallback_RemAdr_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1020  #define FEE_STOP_SEC_VAR_CLEARED_32
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1021  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1022  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1023  #define FEE_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1024  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1025  extern VAR(boolean, AUTOMATIC)  Fee_Rb_NoFallback_LastBlockCfg_b;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1026  extern VAR(boolean, AUTOMATIC)  Fee_Rb_InvalidateOldCopy_b;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1027  extern VAR(boolean, AUTOMATIC)  Fee_Rb_MaintainRun_b;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1028  #define FEE_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1029  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1030  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1031  #define FEE_START_SEC_CONST_8
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1032  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1033  extern const uint8 Fee_NoFallbackMarkerPattern[FEE_PAGES_USED_BY_BLK_HEADER * FEE_PAGE_LEN];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1034  #define FEE_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1035  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1036  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1037  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1038  #if((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) && (FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE != 0))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1039  /* Unknown blcok sector reorganiation with cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1040  #define FEE_START_SEC_VAR_CLEARED_32
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1041  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1042  extern VAR(uint32, AUTOMATIC) Fee_UnknownBlkCache_Addr_au32[FEE_RB_ACT_UNKNOWN_BLK_CACHE_ARRAY_SIZE];   /* Address of unknown block. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1043  #define FEE_STOP_SEC_VAR_CLEARED_32
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1044  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1045  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1046  #define FEE_START_SEC_VAR_CLEARED_16
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1047  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1048  extern VAR(uint16, AUTOMATIC) Fee_UnknownBlkCache_FeeIndex_u16[FEE_RB_ACT_UNKNOWN_BLK_CACHE_ARRAY_SIZE]; /* Index of unknown block. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1049  #define FEE_STOP_SEC_VAR_CLEARED_16
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1050  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1051  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1052  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1053  /* Lower Layer functions of the Fee */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1054  #define FEE_START_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1055  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1056  extern FUNC(uint32, FEE_CODE) Fee_CalculateNumOfFreeBytesInCurSector(VAR(uint32, FEE_VAR) DataEndAdr_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1057  extern FUNC(void, FEE_CODE)   Fee_InitVarAndState(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1058  extern FUNC(void, FEE_CODE)   Fee_InitCache(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1059  extern FUNC(void, FEE_CODE)   Fee_InitOrderFifoBuffer(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1060  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1061  /* Active sector detection */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1062  extern FUNC(void ,FEE_CODE)   Fee_LLSearchSectors(P2VAR(Fee_stSecDet_tst, AUTOMATIC, FEE_APPL_DATA) Fee_stSecDet_ps);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1063  extern FUNC(uint8, FEE_CODE)  Fee_LLDetectActiveSector(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1064  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLFindEmptyPage(uint8 PhySectIdxUsedSect_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1065  extern FUNC(uint8, FEE_CODE)  Fee_GetMostCurrentSectorIdx(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1066  extern FUNC(void, FEE_CODE)   Fee_CheckErasedSectorEmpty(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1067  extern FUNC(uint8, FEE_CODE)  Fee_GetPhysSectorByAddress(VAR(uint32, AUTOMATIC) Address_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1068  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1069  /* Marker handling */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1070  extern FUNC(Fee_stRetVal_ten,FEE_CODE)  Fee_LLWriteMarker(VAR(uint8, AUTOMATIC) PhySectIdx_u8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1071                                                            VAR(uint8, AUTOMATIC) MarkerID_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1072  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1073  /* Erase functions */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1074  extern FUNC(Fee_stRetVal_ten,FEE_CODE)  Fee_LLEraseSector(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1075  extern FUNC(void,FEE_CODE)              Fee_LLSetEraseSector(VAR(uint8, AUTOMATIC) EraseLogIdx);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1076  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1077  /* Block header access */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1078  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLSearchNextBlkHeader(P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) Fee_GlobInfoLastRdHeader_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1079                                                                    VAR(uint8, AUTOMATIC) CachedAccess_u8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1080                                                                    VAR(uint8, AUTOMATIC) FastCacheUpdate_u8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1081                                                                    VAR(boolean, AUTOMATIC) xForcePageBufReload_b,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1082                                                                    VAR(uint32, AUTOMATIC) strAddrHdrSearch);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1083  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1084  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLSearchSpecifiedBlkHeader(VAR(uint16, AUTOMATIC) FeeIdx_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1085                                                                         P2VAR(uint32, AUTOMATIC, FEE_APPL_DATA) LastHdrAddr_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1086                                                                         P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) GlobBlkHdr_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1087                                                                         VAR(boolean, AUTOMATIC) SearchRetry_b);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1088  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1089  #if((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) || (FEE_RB_ACT_SURVIVAL_EVAL != FALSE))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1090  /* Unknown blcok sector reorganiation without cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1091  #if(FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE == 0)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1092  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLSearchUnknownBlkHeader(P2VAR(uint32, AUTOMATIC, FEE_APPL_DATA) StartHdrAddr_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1093                                                                       P2VAR(uint32, AUTOMATIC, FEE_APPL_DATA) LastHdrAddr_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1094                                                                       P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) GlobBlkHdr_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1095                                                                       P2VAR(boolean, AUTOMATIC, FEE_APPL_DATA) SearchRetry_ptr);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1096  #else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1097  /* Unknown blcok sector reorganiation with cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1098  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_BuildUpCacheUnknownBlk(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1099  #endif /* (FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE == 0) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1100  #endif /* ((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) || (FEE_RB_ACT_SURVIVAL_EVAL != FALSE)) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1101  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1102  extern FUNC(uint32, FEE_CODE) Fee_LLGetSecStartAddress(VAR(uint8, AUTOMATIC) xPhySectorIdx_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1103  extern FUNC(uint32, FEE_CODE) Fee_LLGetSecEndAddress(VAR(uint8, AUTOMATIC) xPhySectorIdx_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1104  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1105  /* Verification and handling of blocks */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1106  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLCompBlkInFlash(P2CONST(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) HeaderInfo_pcst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1107                                                               P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) Data_pcu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1108  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLCalcBlkCrcInFlash(P2CONST(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) HeaderInfo_pcst);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1109  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLCpyBlkFromFls2Fls(P2CONST(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) Fee_GlobInfoLastRdHeader_pcst, boolean Fee_WriteTwice_b);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1110  #if defined (FEE_PRV_ROBUST_SECT_OVERFLOW)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1111  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LlRobustSectorOverflow(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1112  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1113  extern FUNC(void, FEE_CODE)             Fee_LLPrepMarkerBufWithMarkerData(P2CONST(Fee_MarkerProp_t, AUTOMATIC, FEE_APPL_DATA) Marker_pcst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1114                                                                            P2VAR(uint8, AUTOMATIC, FEE_APPL_DATA) MarkerBuf_pu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1115  extern FUNC(void, FEE_CODE)             Fee_LLCopyPageBuff2Marker(P2VAR(Fee_MarkerProp_t, AUTOMATIC, FEE_APPL_DATA) Marker_pst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1116                                                                    P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) PageBuf_pcu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1117  extern FUNC(void, FEE_CODE)             Fee_LLPrepPageBufWithHdrDataStart(P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) HeaderInfo_pst);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1118  extern FUNC(void, FEE_CODE)             Fee_LLPrepPageBufWithHdrDataEnd(P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) HeaderInfo_pst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1119                                                                                 P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) Data_pcu8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1120                                                                                 VAR(uint32, AUTOMATIC) BlkCrc32_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1121  #define FEE_STOP_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1122  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1123  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1124  LOCAL_INLINE FUNC(void, FEE_CODE)       Fee_LLCopyPageBuff2HeaderStart(P2VAR(Fee_BlkHeader_tst, AUTOMATIC, FEE_APPL_DATA) BlkHdr_pst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1125                                                                         P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) PageBuf_pcu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1126  #if(FEE_FAST_CACHE_INIT_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1127  LOCAL_INLINE FUNC(void, FEE_CODE)       Fee_LLCopyPageBuff2HeaderIdxAndCrc(P2VAR(Fee_BlkHeader_tst, AUTOMATIC, FEE_APPL_DATA) BlkHdr_pst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1128                                                                             P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) PageBuf_pcu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1129  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1130  #define FEE_START_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1131  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1132  #if !( defined(RBA_FLSRH850P1xC_FLASH) || defined(RBA_FLSV850R1x_FLASH) || defined(RBA_FLSRH850xx_FLASH) )
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1133  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_SearchLastBlkHeader(P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) Fee_GlobInfoLastRdHeader_ptr);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1134  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1135  #define FEE_STOP_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1136  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1137  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1138  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1139  #define FEE_START_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1140  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1141  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1142  extern FUNC(uint32, FEE_CODE)           Fee_SearchHighestCacheEntry(VAR(uint32,FEE_VAR) UpperBoundary_u32, VAR(uint8, FEE_VAR) SectIdx_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1143  extern FUNC(void, FEE_CODE)             Fee_InvalidateCacheByAddress(VAR(uint32,FEE_VAR) xAddress_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1144  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1145  extern FUNC(void, FEE_CODE)             Fee_LLCopyPageBuff2HeaderMid(P2VAR(Fee_BlkHeader_tst, AUTOMATIC, FEE_APPL_DATA) BlkHdr_pst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1146                                                                       P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) PageBuf_pcu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1147  extern FUNC(void, FEE_CODE)             Fee_LLCopyPageBuff2HeaderEnd(P2VAR(Fee_BlkHeader_tst, AUTOMATIC, FEE_APPL_DATA) BlkHdr_pst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1148                                                                       P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) PageBuf_pcu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1149  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLCopyData2Buffer(P2CONST(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) Fee_GlobInfoLastRdHeader_pcst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1150                                                                    P2VAR(uint8, AUTOMATIC, FEE_APPL_DATA) DataPtr_pu8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1151                                                                    VAR(uint16, FEE_VAR) DataOffset_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1152                                                                    VAR(uint16, FEE_VAR) DataLength_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1153  extern FUNC(void, FEE_CODE)             Fee_IncAddressInsideSector(P2VAR(uint32, AUTOMATIC, FEE_APPL_DATA) Address_u32,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1154                                                                     VAR(uint16, FEE_VAR) numBytes_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1155                                                                     VAR(boolean, FEE_VAR) EnsurePageAlign_b);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1156  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1157  /* Sector reorganization */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1158  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLCheckReorganizationNeed(VAR(uint32, AUTOMATIC) Threshold_u32,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1159                                                                        VAR(uint16, AUTOMATIC) DataLength_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1160  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLSectorReorganization(P2VAR(boolean, AUTOMATIC, FEE_APPL_DATA) SectReorgInterSt_pb);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1161  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1162  /* Block writes */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1163  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_HLWriteBlock(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1164  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLWriteBlock(P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) Info_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1165                                                           P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) Data_pcu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1166  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1167  /* Block reading */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1168  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_HLReadBlock(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1169  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLReadBlock(P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) Info_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1170                                                          P2VAR(uint8,AUTOMATIC, FEE_APPL_DATA) Data_ptr);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1171   #if(FEE_RB_MAINTAIN != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1172      /* Block maintaining*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1173      extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_HLMaintainBlock(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1174   #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1175  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1176  /* Order handling */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1177  extern FUNC(Std_ReturnType, FEE_CODE)   Fee_HLPlaceOrder(VAR(uint16, AUTOMATIC) Blocknumber_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1178                                                           VAR(uint16, AUTOMATIC) Offset_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1179                                                           P2VAR(uint8, AUTOMATIC, FEE_APPL_DATA) DataBufferPtr_pu8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1180                                                           VAR(uint16, AUTOMATIC) Length_16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1181                                                           VAR(Fee_HlMode_ten, AUTOMATIC) Mode_en);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1182  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1183  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1184  /* Cache handling */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1185  extern FUNC(uint32, FEE_CODE) Fee_LLGetAddressFromCache(VAR(uint16, AUTOMATIC) FeeIdx_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1186  extern FUNC(boolean, FEE_CODE) Fee_LLCheckAddressInCache(VAR(uint32, AUTOMATIC) AdrInSector_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1187  extern FUNC(void, FEE_CODE)   Fee_LLUpdateAddressInCache(VAR(uint16, AUTOMATIC) FeeIdx_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1188                                                           VAR(uint32, AUTOMATIC) Addr_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1189  extern FUNC(void, FEE_CODE)  Fee_LLUpdateCacheStForSect(VAR(uint8, AUTOMATIC) PhySecIdx_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1190  extern FUNC(void, FEE_CODE)  Fee_LLEraseCacheStForSect(VAR(uint8, AUTOMATIC) PhySecIdx_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1191  extern FUNC(uint8, FEE_CODE) Fee_LLGetCacheUpdateStForSect(VAR(uint8, AUTOMATIC) PhySecIdx_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1192  extern FUNC(uint8, FEE_CODE) Fee_LLGetCacheUpdateStForAllSect(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1193  extern FUNC(boolean, FEE_CODE) Fee_SrvBinarySearchInBlockProp(VAR(uint16, AUTOMATIC) FeeIdx_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1194                                                                P2VAR(uint16, AUTOMATIC, FEE_APPL_DATA) CacheIdx_pu16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1195  #define FEE_STOP_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1196  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1197  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1198  #if(FEE_FAST_CACHE_INIT_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1199  LOCAL_INLINE FUNC(boolean, FEE_CODE) Fee_SrvBinarySearchInBlockPropFast(VAR(uint16, AUTOMATIC) FeeIdx_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1200                                                                          P2VAR(uint16, AUTOMATIC, FEE_APPL_DATA) CacheIdx_pu16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1201  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1202  #define FEE_START_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1203  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1204  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_BuildUpCache(VAR(uint32, AUTOMATIC) StartAdr_u32,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1205                                                           VAR(uint32, AUTOMATIC) EndAdr_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1206  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_BuildUpCacheForAllSect(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1207  #define FEE_STOP_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1208  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1209  /* FEE_FAST_CACHE_INIT_ACTIVE != FALSE */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1210  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1211  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1212  #define FEE_START_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1213  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1214  /* Services */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1215  extern FUNC(void, FEE_CODE)  Fee_SrvMemSet8(P2VAR(uint8, AUTOMATIC, FEE_APPL_DATA) xDest_pu8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1216                                              VAR(uint32, FEE_VAR) xPattern_u32,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1217                                              VAR(uint32, FEE_VAR) numBytes_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1218  extern FUNC(void, FEE_CODE)  Fee_SrvMemCopy8(P2VAR(uint8, AUTOMATIC, FEE_APPL_DATA) xDest_pu8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1219                                               P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) xSrc_pcu8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1220                                               VAR(uint32, FEE_VAR) numBytes_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1221  extern FUNC(void, FEE_CODE)  Fee_SrvSetFifoMode(VAR(Fee_HlMode_ten, AUTOMATIC) Mode_en,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1222                                                  VAR(uint16, AUTOMATIC) xJobType_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1223  extern FUNC(Fee_HlMode_ten, FEE_CODE) Fee_SrvGetFifoMode(VAR(uint16, AUTOMATIC) xJobType_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1224  extern FUNC(void, FEE_CODE)           Fee_LoadNextOrder(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1225  extern FUNC(uint8, FEE_CODE)          Fee_SearchNextOrder(boolean isIntOrder_b);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1226  extern FUNC(void, FEE_CODE)           Fee_UpdateStatus(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1227  extern FUNC(void, FEE_CODE)           Fee_TriggerHardSectorReorg(VAR(Fee_Rb_WorkingStateType_ten, FEE_VAR) WorkingState_en);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1228  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1229  extern FUNC(Std_ReturnType, FEE_CODE) Fee_CheckBlockCfg(VAR(uint8, AUTOMATIC)  ApiId_u8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1230                                                             VAR(uint16, AUTOMATIC) BlockNum_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1231  extern FUNC(Std_ReturnType, FEE_CODE) Fee_CheckModuleSt(VAR(uint8, AUTOMATIC)  ApiId_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1232  extern FUNC(Std_ReturnType, FEE_CODE) Fee_CheckAdrPtr(VAR(uint8, AUTOMATIC) ApiId_u8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1233                                                        P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) DataBufferPtr_pcu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1234  extern FUNC(Std_ReturnType, FEE_CODE) Fee_CheckBlkOfs(VAR(uint8, AUTOMATIC) ApiId_u8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1235                                                        VAR(uint16, AUTOMATIC) BlockNum_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1236                                                        VAR(uint16, AUTOMATIC) BlockOfs_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1237  extern FUNC(Std_ReturnType, FEE_CODE) Fee_CheckBlkLen(VAR(uint8, AUTOMATIC) ApiId_u8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1238                                                        VAR(uint16, AUTOMATIC) BlockNum_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1239                                                        VAR(uint16, AUTOMATIC) BlockOfs_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1240                                                        VAR(uint16, AUTOMATIC) BlockLen_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1241  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1242  /* Miscellaneous */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1243  extern FUNC(void, FEE_CODE)   Fee_CheckFlsJobResult(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1244  extern void (* Fee_Prv_ResetUsedSectors_pfn)(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1245  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1246  #if (FEE_PRV_DEBUG_MONITOR != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1247  extern FUNC(void ,FEE_CODE) Fee_DBM_RepError(VAR(uint16,FEE_VAR) FeeBlkIdx, VAR(Fee_DebugMonitoringFct_ten,FEE_VAR) xError, VAR(uint8,FEE_VAR) xErrorInfo);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1248  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1249  #define FEE_STOP_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1250  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1251  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1252  /*
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1253  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1254  * Inline functions (Necessary for fastening up the start up time)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1255  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1256  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1257  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1258   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1259   * Fee_LLCopyPageBuff2HeaderStart(): Extract the start of the block header data
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1260   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1261   * This function extracts the preamble of the block header data out
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1262   * of the page buffer (called every 8th byte of the flash).
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1263   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1264   * Hint: Block header structure:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1265   *       {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1266   *          uint8   Preamble_au8[3];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1267   *          uint8   BlkStatus_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1268   *          uint16  FeeIndex_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1269   *          uint16  BlkLength_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1270   *          uint16  HdrCrc16_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1271   *          uint32  BlkCrc32_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1272   *       }Fee_BlkHeader_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1273   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1274   * \param    BlkHdr_pst:    Pointer to the block header that was
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1275   *                          found in the flash.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1276   * \param    PageBuf_pu8:   Pointer to the page buffer
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1277   * \return
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1278   * \retval   none
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1279   * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1280   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1281   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1282   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1283  LOCAL_INLINE FUNC(void, FEE_CODE) Fee_LLCopyPageBuff2HeaderStart(P2VAR(Fee_BlkHeader_tst, AUTOMATIC, FEE_APPL_DATA) BlkHdr_pst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1284                                                                   P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) PageBuf_pcu8)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1285  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1286      BlkHdr_pst->Preamble_au8[0] = PageBuf_pcu8[0];      /* 0xA53C96 <- [0]: A5, [1]: 3C, [2]: 96 */
	ld.bu	d0,[a15]
.L727:
	st.b	[a2],d0
.L728:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1287      BlkHdr_pst->Preamble_au8[1] = PageBuf_pcu8[1];
	ld.bu	d15,[a15]1
.L729:
	st.b	[a10]1,d15
.L730:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1288      BlkHdr_pst->Preamble_au8[2] = PageBuf_pcu8[2];
	ld.bu	d15,[a15]2
.L731:
	st.b	[a10]2,d15
.L397:
	ld.bu	d0,[a10]2
.L732:
	mov	d15,#150
.L733:
	jne	d15,d0,.L110
.L734:
	ld.bu	d0,[a10]1
.L735:
	mov	d15,#60
.L736:
	jne	d15,d0,.L111
.L737:
	ld.bu	d0,[a10]
.L738:
	mov	d15,#165
.L739:
	jne	d15,d0,.L112
.L740:
	movh.a	a15,#@his(_999006_xLoopReduction_u8)
	lea	a15,[a15]@los(_999006_xLoopReduction_u8)
.L741:
	mov	d15,#8
.L742:
	st.b	[a15],d15
.L112:
.L111:
.L110:
.L109:
	movh.a	a15,#@his(_999006_xLoopReduction_u8)
	lea	a15,[a15]@los(_999006_xLoopReduction_u8)
	ld.bu	d15,[a15]
.L743:
	sub	d1,d15
.L744:
	sh	d13,d1,#-3
.L554:
	j	.L113
.L114:
	lea	a15,[a10]0
.L745:
	movh.a	a13,#@his(Fee_PageBytePtr_cpu8)
	lea	a13,[a13]@los(Fee_PageBytePtr_cpu8)
	ld.a	a2,[a13]
.L746:
	addsc.a	a5,a2,d12,#3
.L403:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     1  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     2  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     3  #ifndef RBA_FEEFS1_PRV_H
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     4  #define RBA_FEEFS1_PRV_H
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     5  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     6  #if(defined(FEE_PRV_CFG_SELECTED_FS) && (1 == FEE_PRV_CFG_SELECTED_FS))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     7  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     8  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     9   **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    10   * \moduledescription
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    11   *           AUTOSAR FEE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    12   *           According to Document Version 3.0.0, Part of Release 4.0, Revision 2
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    13   * \scope    INTERN
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    14   **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    15   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    16  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    17  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    18  /*
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    19  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    20  * Defines/Macros
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    21  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    22  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    23  /* General defines */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    24  #define FEE_MAXUINT32               (0xFFFFFFFFuL)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    25  #define FEE_MAXUINT16               (0xFFFFu)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    26  #define FEE_NULL                    (0u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    27  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    28  #define FEE_MARKER_PATTERN          0xCAFEu                 /* Pattern to identify a marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    29  #define FEE_NUM_MARKER_IN_HEADER    (FEE_NUM_MARKER_E - 1)  /* A sector has at least 4 states:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    30                                                                 ERASED -> USED -> FULL -> ERASE_REQ
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    31                                                                 Value is also in used in Fee_Process.pm */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    32  #define FEE_NO_SEC_IDX_FOUND        0xFFu                   /* No active sector / matching flash bank found */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    33  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    34  #define FEE_MARKER_SIZE             8u                      /* Each marker has a size of 8 Bytes (fix value is used in Fee_Process.pm) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    35  #define FEE_MARKER_CS_SIZE          2u                      /* Size of CRC16 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    36  #define FEE_LL_DATABUFFSIZE         256u                    /* Size of the internal data buffer used for writing */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    37                                                              /* (The page buffer size is auto generated) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    38  #define FEE_LL_CRC_CALC_RESTRICTION FEE_LL_DATABUFFSIZE     /* Restriction for the Crc calculation */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    39  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    40  #define FEE_FREE_PAGES_FOR_ERASED_ST    1u                  /* Number of pages containing the erased value */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    41  #define FEE_SIZE_OF_BLOCK_CS            4                   /* Size of block checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    42  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    43  /* Special values for sector change counter within the RAM array */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    44  #define FEE_SEC_CHANGE_CNT_RESET_REQ  0xFFFFFFFFuL
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    45  #define FEE_SEC_CHANGE_CNT_UNDEF      FEE_SEC_CHANGE_CNT_RESET_REQ
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    46  #define FEE_SEC_CHANGE_CNT_ERASED     (FEE_SEC_CHANGE_CNT_RESET_REQ - 1u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    47  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    48  /* Mask for accessing block flags in the configuration and in the block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    49  #define FEE_FLAG_SEC_LEVEL_MSK      0x0001u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    50  #define FEE_FLAG_SEC_LEVEL_BP       0u       /* Security level setting is bit 0 within the block flags */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    51  #define FEE_BLK_INT_DOUBLE_STORAGE  1u       /* Internal double block storage definition */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    52  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    53  #define FEE_FLAG_DATAFILTERTYPE_ATTR_MSK      0x0006u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    54  #define FEE_FLAG_DATAFILTERTYPE_ATTR_BP       1u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    55  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    56  #define FEE_FLAG_INVALID_MSK        0x08u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    57  #define FEE_FLAG_INVALID_BP         3u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    58  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    59  #define FEE_FLAG_SURV_ATTR_MSK      0x0010u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    60  #define FEE_FLAG_SURV_ATTR_BP       4u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    61  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    62  #define FEE_FLAG_ROBUST_ATTR_MSK    0x0020
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    63  #define FEE_FLAG_ROBUST_ATTR_BP     5
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    64  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    65  #define FEE_FLAG_NOFALLBACK_MSK     0x0040u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    66  #define FEE_FLAG_NOFALLBACK_BP      6u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    67  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    68  #define FEE_MASK_BIT7               (uint8)0x80
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    69  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    70  /* Mask for accessing block flags (upper byte only) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    71  #define FEE_FLAG_JOBTYPE_MSK        0x0300u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    72  #define FEE_FLAG_JOBTYPE_BP         8u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    73  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    74  #define FEE_FLAG_JOBPRIO_MSK        0x0400u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    75  #define FEE_FLAG_JOBPRIO_BP         10u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    76  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    77  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    78  /* Macros for the conversion of the Sec Level settings:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    79   * Internal storage level:      Sec Level 1  --> 0 / Sec Level 2 --> 1
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    80   * User Config storage level:   Sec Level 1  --> 1 / Sec Level 2 --> 2 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    81  #define FEE_INT_TO_USER_STORAGE_TYPE(SEC_LEVEL) ((SEC_LEVEL) + 1u)   /* Convert the Sec Level setting from
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    82                                                                         header/properties == internal to user config format */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    83  #define FEE_CNT_FIRST_COPY          0u       /* Internal counter value for first copy */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    84  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    85  /* Erase actions */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    86  #define FEE_NO_SECTOR_TO_ERASE      0xFFu    /* No sector has to be erased */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    87  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    88  /* Block header validation */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    89  #define FEE_BLK_HEADER_PREAMBEL             0xA53C96uL                                  /* Pattern of preambel */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    90  #define FEE_BLK_HEADER_PREAMBEL_BYTE_2      (FEE_BLK_HEADER_PREAMBEL & 0xFFu)           /* 0x96 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    91  #define FEE_BLK_HEADER_PREAMBEL_BYTE_1      ((FEE_BLK_HEADER_PREAMBEL >> 8u) & 0xFFu)   /* 0x3C */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    92  #define FEE_BLK_HEADER_PREAMBEL_BYTE_0      ((FEE_BLK_HEADER_PREAMBEL >> 16u) & 0xFFu)  /* 0xA5 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    93  #define FEE_BLK_HEADER_SIZE                 14u                                         /* Size of block header in bytes */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    94  #define FEE_BKL_HEADER_REDUCTION            FEE_VIRTUAL_PAGE_SIZE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    95  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    96  /* Calculation of free byte in current sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    97  #define FEE_LL_SECTOR_USED_FOR_WRITING      Fee_RdWrOrder_st.xWrAddress
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    98  #define FEE_LL_SECTOR_USED_FOR_READING      Fee_RdWrOrder_st.xRdAddress
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    99  #define FEE_LL_SECTOR_USED_FOR_COMPARING    Fee_RdWrOrder_st.xCmpAddress
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   100  #define FEE_LL_SECTOR_USED_FOR_CRC_CALC     Fee_RdWrOrder_st.xCrcAddress
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   101  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   102  /* Cache usage*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   103  #define FEE_INVLD_BLOCK_PROP_IDX        0xFFFFFFFFuL    /* Invalid Fee Idx that can be passed to the block header search function
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   104                                                             in order to ignore the cache during the init phase */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   105  #define FEE_USE_CACHED_ACCESS               0x01u       /* Use the cache method for finding the next block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   106  #define FEE_USE_MANUAL_ACCESS               0x00u       /* Search manually for headers */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   107  #define FEE_UPDATE_CACHE_IN_INIT            0x01u       /* Update the cache for fast access in init */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   108  #define FEE_NO_CACHE_UPDATE                 0x00u       /* Do not use the fast access method (only evaluated blocks are added to the cache) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   109  #define FEE_CACHE_UPD_NOT_COMP_FOR_SECT     0x00u       /* The respective sector was not completely checked */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   110  #define FEE_CACHE_UPD_COMP_FOR_SECT         0x01u       /* The respective sector was checked completely */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   111  #define FEE_CACHE_UPD_COMP_FOR_ALL_SECT     0x02u       /* All sectors have been checked completely */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   112  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   113  #define Fee_LLInvalidateAddressInCache(FEEIDX) Fee_LLUpdateAddressInCache(FEEIDX, FEE_CACHE_INIT_VALUE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   114  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   115  /* Fee init defines */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   116  #define FEE_PRV_ST_INIT_RUNNING             0x00u       /* Module is still uninitialized */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   117  #define FEE_PRV_ST_INIT_DONE                0x01u       /* Module has been initialized */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   118  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   119  /* Fee reorganization defines */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   120  #define FEE_PRV_ST_REORG_IDLE               0x00u       /* No reorganization is running */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   121  #define FEE_PRV_ST_REORG_STANDARD_RUNNING   0x01u       /* Standard reorganization is running */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   122  #define FEE_PRV_ST_REORG_AFTERB_RUNNING     0x02u       /* "Afterburner" of the reorganization is runnning */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   123  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   124  /* Amount of sectors used by the emulation  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   125  #define FEE_NUM_FLASH_BANKS         Fee_NumFlashBanksUsed_u8  /* Number of sectors which can be used by the Fee */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   126  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   127  #if (FEE_RB_ADDONS_CCAS == TRUE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   128  #define FEE_RB_REQUEST_STOP_MODE            TRUE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   129  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   130  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   131  #if(FEE_ROBUST_PROG_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   132  #define FEE_ROBMARKER_BUFF_SIZE             96u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   133  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   134  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   135  #if (FEE_PAGES_USED_BY_BLK_HEADER == 2u)     /* Robust block programming states (Hdpg1 -> Data -> Hdpg2 write) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   136  #define FEE_FIRSTDATAPAGE_NOTPROGRAMMED 0x00u            /* First data pages in Fee_LlFls2FlsCopy is not yet programmed. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   137  #define FEE_FIRSTDATAPAGE_PROGRAMMED     0x01u            /* First data pages in Fee_LlFls2FlsCopy is programmed. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   138  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   139  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   140  /*
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   141  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   142  * Type definitions
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   143  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   144  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   145  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   146  /* Order priority */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   147  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   148  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   149      FEE_NORMAL_PRIO_E = 0,      /* e.g. if FeeImmediateData is configured to no */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   150      FEE_HIGH_PRIO_E   = 1       /* e.g. if FeeImmediateData is configured to yes */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   151  }Fee_HlPriority_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   152  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   153  /* This enumerator list contains the index inside the order queue.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   154   * Attention: The order in the enumerator is from Low (FEE_ADAPTER_JOB) to High (FEE_INTERNAL_JOB).
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   155   *            Do not change this order!
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   156   * */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   157  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   158  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   159      FEE_INTERNAL_JOB,           /* Internal job (reorganization or sector erase) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   160      FEE_NVM_JOB,                /* Nvm job */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   161      FEE_ADAPTER_JOB,            /* Adapter job (e.g. Mx17 Eep) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   162      FEE_QUEUE_SIZE              /* Size of the Fee internal queue (each job type has 1 entry) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   163  }Fee_HlJobType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   164  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   165  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   166  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   167      uint8*  DataBufferPtr_pu8;  /* Pointer to the read- or write-buffer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   168      uint16  FeeIdx_u16;         /* FeeRbBlockPersistentId */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   169      uint16  BlockPropIdx_u16;   /* Respective block properties table index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   170      uint16  Offset_u16;         /* Offset inside block (could be != 0 only for read-orders --> R4.0 Rev1) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   171      uint16  Length_u16;         /* Block length, only required for element-read-jobs */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   172      Fee_HlMode_ten Mode_en;     /* Type of this order: Read, Write, Invalidate */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   173      Fee_HlPriority_ten Prio_en; /* Priority out of the configuration */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   174      uint8   SecLevel_u8;        /* Security level out of the configuration */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   175  }Fee_OrderFifo_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   176  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   177  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   178  /* Hint:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   179   * For calculation of the sector order (old -> new -> erased -> undef) the sector change counter is a valid criteria.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   180   * The lowest valid value points to the eldest data, the most current value to the most current data.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   181   * These following defines are used for an implicit sorting:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   182   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   183   *  +------+------+------+------+------+------+------+------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   184   *  |MarkerPattern|Ident | marker content     |marker CRC16 |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   185   *  +------+------+------+------+------+------+------+------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   186   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   187   *  Sector headers: 12 times available as default
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   188   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   189   *      +------+------+------+------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   190   *    0 |Erased| Used | Full |Erase |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   191   *      +------+------+------+------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   192   *    4 |      |      |      |      |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   193   *      +------+------+------+------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   194   *    8 |      |      |      |      |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   195   *      +------+------+------+------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   196   *      |<---->|
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   197   *        Page
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   198   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   199   * Erased:  Sector was erased successfully. This marker also contains the sector erase counter
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   200   * Used:    Sector contains user data. This marker will be written first before data is written into a sector.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   201   *          This marker also contains the sector change counter.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   202   * Full:    Sector is completely full and must not be considered for searching for the first empty page.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   203   *          This marker also contains the sector change counter.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   204   * Erase:   Sector contains no valid data anymore and can be erased in the background task.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   205   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   206   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   207  enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   208  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   209      FEE_ERASED_MARKER_ID_E = 0x01u, /* Sector was erased successfully */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   210      FEE_USED_MARKER_ID_E,           /* Sector was used to store data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   211      FEE_FULL_MARKER_ID_E,           /* Sector is full */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   212      FEE_ERASE_REQUEST_ID_E,         /* Sector should be erased */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   213      FEE_START_MARKER_ID_E,            /* Double storage of USED marker, contains address of first blockheader */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   214      FEE_CLONE_START_MARKER_ID_E,    /* Marker to indicate that cloning of a defect sector has startet in this sector --> Ifx robust programming */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   215      FEE_RESERVED_MARKER_ID1_E,      /* Reserved range marker space in the sector header, currently not used! */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   216      FEE_RESERVED_MARKER_ID2_E,      /*    "       "     "      "   "    "      "         "      "    "   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   217      FEE_RESERVED_MARKER_ID3_E,      /*    "       "     "      "   "    "      "         "      "    "   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   218      FEE_RESERVED_MARKER_ID4_E,      /*    "       "     "      "   "    "      "         "      "    "   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   219      FEE_RESERVED_MARKER_ID5_E,      /*    "       "     "      "   "    "      "         "      "    "   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   220      FEE_RESERVED_MARKER_ID6_E,      /*    "       "     "      "   "    "      "         "      "    "   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   221      FEE_NUM_MARKER_E                /* Amount of required markers in the sector header + 1 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   222  };
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   223  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   224  /* Sector marker structure */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   225  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   226  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   227      uint16  xPattern;               /* Static marker pattern: 0xCAFE */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   228      uint8   xIdent;                 /* Ident to identify the marker: 0x01 Erased-Marker, 0x02 Used-Marker, 0x03 Full-Marker, 0x04 Erase-Request */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   229      uint8   xContent[3];            /* Sector change counter */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   230      uint16  xChecksum;              /* Crc16 checksum, calculation over Patter, Ident and content */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   231  }Fee_MarkerProp_t;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   232  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   233  /* Sector detection type */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   234  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   235  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   236      uint32  SecChngCnt_u32;         /* Sector change counter */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   237      uint8   ctErasedMarker_u8;      /* Number of found ERASED markers */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   238      uint8   ctUsedMarker_u8;        /* Number of found USED markers */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   239      uint8   ctFullMarker_u8;        /* Number of found FULL markers */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   240      uint8   ctEraseReq_u8;          /* Number of found ERASE requests */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   241      uint32  xStartAddr_u32;         /* Address of first blockheader in the sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   242      uint8   ctCloneMarker_u8;       /* Cloning of data has started (only Ifx robust programming algorithm */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   243  }Fee_stSecDet_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   244  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   245  /* Sector states */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   246  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   247  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   248      FEE_SECTOR_STATE_UNDEF_E        = 0,                      /* undefined sector-state --> no marker found */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   249      FEE_SECTOR_ERASED_E             = FEE_ERASED_MARKER_ID_E, /* sector was erased */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   250      FEE_SECTOR_USED_E               = FEE_USED_MARKER_ID_E,   /* sector was used to write data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   251      FEE_SECTOR_FULL_E               = FEE_FULL_MARKER_ID_E,   /* sector is full */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   252      FEE_SECTOR_REQUEST2ERASE_E      = FEE_ERASE_REQUEST_ID_E, /* sector could be erased */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   253      FEE_SECTOR_CONSIDERED_E         = FEE_NUM_MARKER_E        /* sector was considered in function Fee_LLDetectActiveSector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   254  }Fee_SectorState_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   255  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   256  /* Sector order after sort sequence */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   257  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   258  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   259      uint32 SecChngCnt_u32;                  /* Sector change counter */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   260      Fee_SectorState_ten SecState_en;        /* Sector state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   261      uint8 xPhySecIdx_u8;                    /* Sector index (physical sector) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   262  }Fee_LLSectorOrder_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   263  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   264  /* Fee internal return types */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   265  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   266  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   267      FEE_ORDER_PENDING_E,            /* The order is still pending*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   268      FEE_ORDER_FINISHED_E,           /* The order was finished without error */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   269      FEE_BLOCK_INVALIDATED_E,        /* The block was invalidated in the block status */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   270      FEE_ERROR_E,                    /* An error occured, maybe data in flash was not valid */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   271      FEE_SECTORCHANGE_E,             /* A sector change has to be done */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   272      FEE_SECTORFULL_E,               /* The sector is full */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   273      FEE_ABORTED_E,                  /* An order was aborted*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   274      FEE_ERASE_SECTOR_E,             /* The sector must be erased */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   275      FEE_SEARCH_ABORTED_E,           /* Searching was aborted */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   276      FEE_NUM_RET_VAL_E               /* Number of return values */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   277  }Fee_stRetVal_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   278  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   279  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   280  /* Flash properties */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   281  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   282  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   283      uint32  Fee_PhysStartAddress_u32;       /* Physical sector: start address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   284      uint32  Fee_PhysEndAddress_u32;         /* physical sector: end address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   285      uint32  Fee_LogStartAddress_u32;        /* logical sector: start address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   286      uint32  Fee_LogEndAddress_u32;          /* logical sector: end address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   287  }Fee_FlashProp_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   288  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   289  /* Block properties for all Fee blocks
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   290   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   291   * Status Flags:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   292   * Block flags will help to specify a more detailed block configuration. The low Byte of these block flags is also stored
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   293   * in the flash (status byte inside the block header). This information (in Flash) can be used to read/write the layout
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   294   * without configuration (PAV, CB).
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   295   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   296   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   297   *                                                 |<----- Block Status Byte in Block Header ----->|
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   298   * |<---------------------------------------- Block Flags ---------------------------------------->|
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   299   *    F     E     D     C     B     A     9     8  |  7     6     5     4     3     2     1     0  |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   300   * +-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   301   * |     |     |     |     |     |Prio-| Job type  |     |     | Rob |Surv.|(Inv)| DataFilter| Sec-|
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   302   * |     |     |     |     |     |rity |           |     |     |Attr.|Attr.|     |    Type   | lvl |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   303   * +-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   304   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   305   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   306   *  0  ... SecurityLevel      => 0...SingleStorage, 1...DoubleStorage
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   307   * 1+2 ... Data Filter Type   => 0...Dynamic:         Anybody can erase this block (e.g. during migration)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   308   *                               1...Static:          Only certain users (e.g. repair shops) can erase this block
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   309   *                               2...Permanent:       Only very certain users (e.g. OEM) can erase this block
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   310   *                               3...Super Permanent: Block can never be erased
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   311   *  3 .... Invalid            => 0...Block OK, 1...Block is invalid  --> can be changed by function Fee_InvalidateBlock
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   312   *  4 .... Survival Attribute => 0...No survival, 1... Survival (even without being part of the layout)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   313   *  5 .... Robustness Attribute (Robustness against data modification during write execution)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   314   *                            => 0...Deactivated:     No additional checksum is used
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   315   *                            => 1...Activated:       Additional checksum is used
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   316   * 8+9 ... TypeOfBlock        => 0...InternalJob, 1...NvmJob, 2...AdapterJob (e.g. Mx17 Eep adapter)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   317   *  A .... Priority           => Job priority:        0...FEE_NORMAL_PRIO_E --> FeeImmediateData = No
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   318   *                                                    1...FEE_HIGH_PRIO_E   --> FeeImmediateData = Yes
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   319   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   320  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   321  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   322      uint16 BlockPersistentId_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   323      uint16 Flags_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   324      uint16 Length_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   325      void (* const JobEndNotification_pfn) (void);      /* callback function, will be called if a job was successfully finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   326      void (* const JobErrorNotification_pfn) (void);    /* callback function, will be called if a job was finished with an error */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   327  }Fee_BlockPropertiesType_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   328  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   329  /* Job types corresponding to the queue index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   330  enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   331  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   332      FEE_JOB_TYPE_INTERNAL_E = 0,            /* Internal job index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   333      FEE_JOB_TYPE_NVM_E      = 1,            /* NvM job index  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   334      FEE_JOB_TYPE_ADAPTER_E  = 2             /* Adapter job index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   335  };
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   336  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   337  /* State machine types for the function Fee_LLWriteMarker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   338  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   339  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   340      FEE_LL_MARKER_INIT_E,                   /* Init state                                    */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   341      FEE_LL_MARKER_BLK_CHK_E,                /* Perform a blank check over one page           */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   342      FEE_LL_MARKER_BLK_CHK_WAIT_E,           /* Wait for the blank check order to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   343      FEE_LL_MARKER_BLK_CHK_ERROR_E,          /* Differences detected                          */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   344      FEE_LL_MARKER_BLK_CHK_FINISHED_E,       /* Start write order of the marker               */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   345      FEE_LL_MARKER_WRITE_WAIT_E,             /* Wait for the write order to be finished       */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   346      FEE_LL_MARKER_WRITE_ERROR_E,            /* Read or write error                           */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   347      FEE_LL_MARKER_VERIFY_E,                 /* Verify written marker                         */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   348      FEE_LL_MARKER_VERIFY_WAIT_E,            /* Wait for verify marker                        */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   349      FEE_LL_MARKER_VERIFY_FINISHED_E         /* Verify marker finished                        */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   350  }Fee_LLWrMarkerType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   351  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   352  /* State machine types for the function Fee_HLWriteBlock and Fee_HLReadBlock */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   353  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   354  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   355      FEE_HL_RDWR_BLK_INIT_E,                 /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   356      FEE_HL_SEARCH_BLK_HDR_E,                /* Search block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   357      FEE_HL_READ_BLK_HDR_WAIT_E,                  /* Read block header for redundant blocks */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   358      FEE_HL_CHECK_BLK_HDR_E,                 /* Check block header for redundant blocks */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   359      FEE_HL_CALC_BLK_CS_E,                   /* Calculate the user checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   360      FEE_HL_CHECK_BLK_CS_E,                  /* Verify the block checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   361      FEE_HL_RD_DATA_FROM_BLK_E,              /* Read the block data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   362      FEE_HL_COMP_BLK_E,                      /* Compare the complete block data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   363  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   364      /* Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   365      #if (defined(RBA_FLSIFX_FLASH) || defined(RBA_FLSJDP_FLASH))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   366      FEE_HL_RD_WAIT_FOR_FLS_E,               /* Wait for the Fls to overstamp an invalid header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   367      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   368      /* END Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   369  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   370      FEE_HL_WR_BLK_E                         /* Write the block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   371  }Fee_HLRdWrBlockType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   372  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   373  /* State machine types for the function Fee_LLWriteBlock */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   374  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   375  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   376      FEE_LL_WR_BLK_INIT_E,                   /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   377      FEE_LL_WR_WRITEHEADER_E,                /* Write the header (and first data bytes) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   378      FEE_LL_WR_SIZECHECK_HSR_E,              /* check for space until HSR */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   379      #if (FEE_NO_FALLBACK_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   380      FEE_LL_WR_BLANKCHECK_NOFB_WR_E,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   381      FEE_LL_WR_BLANKCHECK_NOFB_WR_WAIT_E,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   382      FEE_LL_WR_WRITE_NOFB_MARKER_E,          /* Write the NoFallback marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   383      FEE_LL_WR_WRITE_NOFB_MARKER_WAIT_E,     /* Wait until the programming of the NoFallback marker is finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   384      FEE_LL_WR_FILL_SECTOR_END_E,            /* Changes the active sector and fills the empty pages if necessary */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   385      FEE_LL_WR_FILL_SECTOR_END_WAIT_E,       /* Wait until the write order to fill the empty pages is finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   386      FEE_LL_WR_FILL_SECTOR_END_ERROR_E,      /* Errors during write occured */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   387      FEE_LL_WR_WRITE_NOFB_MARKER_ERROR_E,    /* Errors during write occured */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   388      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   389      FEE_LL_WR_WRITEHEADER_WAIT_E,           /* Wait until the write order is finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   390      FEE_LL_WR_VERIFYHEADER_E,               /* Verify the header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   391      FEE_LL_WR_VERIFYHEADER_WAIT_E,          /* Wait for the verification to end */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   392      FEE_LL_WR_VERIFYHEADER_ERROR_E,         /* Verify error */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   393      FEE_LL_WR_WRITEDATA_SEC_A_E,            /* Write the data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   394      FEE_LL_WR_WAIT_WRITEDATA_SEC_A_E,       /* Wait until the write order is finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   395      FEE_LL_WR_WRITE_ERROR_E,                /* Error during write (header or data page writes) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   396  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   397      FEE_LL_WR_WRITE_FULL_MARKER_E,          /* Write the FULL marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   398      FEE_LL_WR_ERASE_SECTOR_E,               /* Erase a sector and write the ERASED marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   399      FEE_LL_WR_WRITE_USED_MARKER_E,          /* Write the USED marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   400      FEE_LL_WR_WRITE_START_MARKER_E,         /* Write the START marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   401  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   402      /* Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   403      #if (defined(RBA_FLSIFX_FLASH) || defined(RBA_FLSJDP_FLASH))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   404      FEE_LL_WR_WAIT_FOR_FLS_OVERPROGRAMMING_E,   /* Wait for the Fls to overstamp an invalid header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   405      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   406      /* END Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   407  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   408      #if(FEE_ROBUST_PROG_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   409      FEE_LL_WR_WRITEDATA_IFX_HANDLING_E,     /* robust Ifx handling in case of wordline fails */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   410      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   411      FEE_LL_WR_VERIFY_BLK_E                  /* Verify the complete data including the block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   412  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   413      /* Robust block programming states (Hdpg1 -> Data -> Hdpg2 write) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   414      #if (FEE_PAGES_USED_BY_BLK_HEADER == 2u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   415      ,FEE_LL_WR_WRITEHDRPG2_E,                /* Write the 2nd header page. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   416      FEE_LL_WR_WAIT_WRITEHDRPG2_E            /* Wait until 2nd header page write is completed. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   417      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   418  }Fee_LLWrBlockType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   419  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   420  /* State machine types for the function Fee_LLCompBlkInFlash */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   421  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   422  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   423      FEE_LL_CMP_BLK_INIT_E,                  /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   424      FEE_LL_CMP_HEADER_E,                    /* Compare the complete block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   425      FEE_LL_CMP_WAIT_HEADER_E,               /* Wait for the compare to finish */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   426      FEE_LL_CMP_CHECK_OVERLAP_E,             /* Check for an overlap */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   427      FEE_LL_CMP_DATA_SEC_A_E,                /* Check the header compare result and compare the data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   428      FEE_LL_CMP_WAIT_DATA_SEC_A_E,           /* Wait for the compare to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   429      FEE_LL_CMP_FINISHED_E                   /* Verify the data compare result and reset the state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   430  }Fee_LLCmpBlkType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   431  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   432  /* State machine types for the function Fee_LLCopyData2Buffer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   433  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   434  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   435      FEE_LL_CPY_BLK_INIT_E,                  /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   436      FEE_LL_CPY_BLOCK_START_E,               /* Read out the data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   437      FEE_LL_CPY_BLOCK_WAIT_E,                /* Wait for the read order to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   438      FEE_LL_CPY_BLOCK_ERROR_E,               /* Error in the read function */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   439      FEE_LL_CPY_BLOCK_FINISHED_E             /* Finish the function or the data transfer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   440  }Fee_LLCpyBlkType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   441  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   442  /* State machine types for the function Fee_LLCalcBlkCrcInFlash */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   443  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   444  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   445      FEE_LL_CRC_BLK_INIT_E,                  /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   446      FEE_LL_CRC_RD_HD_PAGE_E,                /* Read the header page */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   447      FEE_LL_CRC_RD_PAGE_E,                   /* Calculate the block checksums */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   448      FEE_LL_CRC_CHECK_OVERLAP_E,             /* Check for an overlap */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   449      #if(FEE_ROB_FEATURE_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   450      FEE_LL_CRC_RD_ROB_PAGE_E,               /* Retry with the robustness checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   451      FEE_LL_CRC_CHECK_OVERLAP_ROB_E,         /* Check for an overlap */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   452      FEE_LL_CRC_RD_ROB_PAGE_WAIT_E,          /* Wait until the read access is finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   453      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   454      FEE_LL_CRC_RD_PAGE_WAIT_E,              /* Wait until the read access is finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   455      FEE_LL_CRC_RD_ERROR_E                   /* Read error case */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   456  }Fee_LLCalcCrcBlkType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   457  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   458  /* State machine types for reading */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   459  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   460  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   461      FEE_LL_INIT_READ_E                      /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   462      ,FEE_LL_BLANK_CHECK_E                    /* Perform a blank check */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   463      ,FEE_LL_BLANK_CHECK_WAIT_E                /* Wait for the blank check to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   464      ,FEE_LL_READ_PAGE_E                     /* Read pages */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   465      ,FEE_LL_WAIT_READ_PAGE_E                /* Wait for the read order to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   466      ,FEE_LL_READ_ERROR_E                    /* Error reaction for read error */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   467      ,FEE_LL_READ_FINISHED_E                 /* Finish state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   468      #if (FEE_HEADER_RECHECK_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   469      #if (FEE_NO_FALLBACK_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   470      ,FEE_LL_NOFALLBACK_MARKER_CHECK_E
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   471      ,FEE_LL_NOFALLBACK_MARKER_CHECK_WAIT_E
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   472      ,FEE_LL_NOFALLBACK_MARKER_CHECK_FAILED_E
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   473      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   474      ,FEE_LL_RECHECK_HEADER_E
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   475      ,FEE_LL_RECHECK_HEADER_WAIT_E
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   476      ,FEE_LL_RECHECK_HEADER_FAILED_E
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   477      ,FEE_LL_RECHECK_HEADER_FINISHED_E
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   478      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   479  } Fee_LLRdStateType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   480  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   481  /* States for function Fee_LLCheckErasePattern */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   482  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   483  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   484      FEE_LL_INIT_BLANK_CHECK_E,              /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   485      FEE_LL_PERFORM_BLANK_CHECK_E,           /* Perform a blank check */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   486      FEE_LL_WAIT_PERFORM_BLANK_CHECK_E,      /* Wait for the blank check order to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   487      FEE_LL_BLANK_CHECK_ERROR_E,             /* Differences detected */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   488      FEE_LL_BLANK_CHECK_FINISHED_E           /* Finish state machine with success */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   489  } Fee_LLBlankCheckType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   490  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   491  /* State of function Fee_Prv_LLFindEmptyPage */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   492  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   493  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   494      #if ( defined(RBA_FLSRH850P1xC_FLASH) || defined(RBA_FLSV850R1x_FLASH) || defined(RBA_FLSRH850xx_FLASH) )
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   495      FEE_LL_FINDEMPTYPGE_INIT_E,             /* Initalize find empty page state machine  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   496      FEE_LL_FINDEMPTYPGE_CHECK_E,            /* Begin a blank check                      */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   497      FEE_LL_FINDEMPTYPGE_WAIT_E,             /* Wait until the blank check finished      */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   498      FEE_LL_FINDEMPTYPGE_RESULT_BLANK_E,     /* Checked chunk was completely blank       */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   499      FEE_LL_FINDEMPTYPGE_RESULT_NOT_BLANK_E  /* Checked chunk was not completely blank   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   500      #else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   501      FEE_LL_FIND_CURRENT_SECTOR_E,           /* Evaluate the sector with most current values */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   502      FEE_LL_FIND_LAST_HEADER_E,              /* Search the last block header in the active sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   503      FEE_LL_FINISHED_E                       /* Function finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   504      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   505  }Fee_LLFndEmptyPgeType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   506  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   507  /* State of the function Fee_LLSearchSpecifiedBlkHeader */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   508  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   509  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   510      FEE_LL_SEARCHBLK_INIT_E,                /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   511      FEE_LL_SEARCHBLK_BLK_HEADER_E           /* Search for the next block header*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   512  }Fee_LLSearchBlkHdrType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   513  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   514  #if(FEE_FAST_CACHE_INIT_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   515  /* State of the function Fee_BuildUpCache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   516  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   517  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   518      FEE_LL_BLD_UP_CACHE_INIT_E,             /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   519      FEE_LL_BLD_UP_CACHE_READ_E              /* Read out data directly if possible */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   520  }Fee_LLBuildUpCache_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   521  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   522  /* State of the function Fee_BuildUpCacheForAllSect */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   523  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   524  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   525      FEE_LL_BLD_UP_CACHE_ALL_SECT_INIT_E,/* Init case */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   526      FEE_LL_BLD_UP_CACHE_ALL_SECT_DO_E   /* Build up the cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   527  }Fee_LLBuildUpCacheAllSect_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   528  /* FEE_FAST_CACHE_INIT_ACTIVE != FALSE */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   529  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   530  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   531  #if((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) || (FEE_RB_ACT_SURVIVAL_EVAL != FALSE))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   532  #if (FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE == 0)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   533  /* Unknown blcok sector reorganiation without cache: State of the function Fee_LLSearchUnknBlkHeader */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   534  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   535  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   536      FEE_LL_SEARCHUNKNBLK_INIT_E,            /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   537      FEE_LL_SEARCHUNKNBLK_UNKN_BLK_HEADER_E, /* Search the next unknown block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   538      FEE_LL_SEARCHUNKNBLK_SPEC_BLK_HEADER_E  /* Search the next specific block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   539  }Fee_LLSearchUnknBlkHdrType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   540  #else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   541  /* Unknown block sector reorganiation with cache: states of cache build up function Fee_BuildUpCacheUnknownBlk */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   542  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   543  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   544      FEE_LL_BLD_UP_CACHE_UNKOWN_BLK_INIT_E,             /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   545      FEE_LL_BLD_UP_CACHE_UNKOWN_BLK_READ_E,             /* Read out data directly if possible */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   546      FEE_LL_BLD_UP_CACHE_UNKOWN_BLK_VALIDATEDATA_E      /* Validate the data CRC of the uknown block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   547  }Fee_LLBuildUpUnknownBlkCache_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   548  #endif /* End of (FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE == 0) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   549  #endif /* End of ((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) || (FEE_RB_ACT_SURVIVAL_EVAL != FALSE)) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   550  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   551  /* States for the function Fee_LLSectorReorganization */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   552  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   553  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   554      FEE_LL_REORG_INIT_E,                    /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   555      FEE_LL_REORG_PREP_SEARCH_BLK_E,         /* Prepare the next block search */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   556      FEE_LL_REORG_SEARCH_BLK_E,              /* Search for a specific block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   557      FEE_LL_REORG_CHECK_BLOCK_CS_E,          /* Evaluate the block checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   558      FEE_LL_REORG_REDUNDANT_BLK_CHK_E,       /* Check if redundant copy is not lost during sector reorg. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   559      FEE_LL_REORG_WRITE_BLOCK_E,             /* Write a block into the latest sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   560  #if((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) || (FEE_RB_ACT_SURVIVAL_EVAL != FALSE))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   561      FEE_LL_REORG_SEARCH_UNK_BLK_E,          /* Search for an unknown block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   562   #if(FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE != 0) /* Unknown blcok sector reorganiation with cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   563      FEE_LL_REORG_CACHEBUILDUP_UNK_BLK_E,    /* Building of cache for unknown block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   564      FEE_LL_REORG_SEARCH_UNK_HDRBLK_WAIT_E,            /* Wait till reading of unknown block header is finished. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   565      FEE_LL_REORG_SEARCH_UNK_HDRBLK_READ_ERROR_E,    /* Failure during read of unknown block header. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   566      FEE_LL_REORG_SEARCH_UNK_HDRBLK_READ_FINISHED_E,    /* Unknown block header read successful. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   567   #endif /* End of (FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE != 0) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   568  #endif /* End of ((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) || (FEE_RB_ACT_SURVIVAL_EVAL != FALSE)) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   569  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   570      /* Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   571      #if (defined(RBA_FLSIFX_FLASH) || defined(RBA_FLSJDP_FLASH))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   572      FEE_LL_REORG_WAIT_FOR_FLS_E,            /* Wait for the Fls to overstamp an invalid header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   573      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   574      /* END Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   575  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   576      FEE_LL_REORG_FINISHED_E                 /* Function finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   577  }Fee_LLSecReorgType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   578  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   579  /* States for the function Fee_LLRedundantCpyChk */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   580  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   581  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   582      FEE_LL_REDUNDANT_CPY_CHK_INIT_E,            /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   583      FEE_LL_REDUNDANT_CPY_CHK_SEARCH_HDR_E,      /* Search header of redundant copy */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   584      FEE_LL_REDUNDANT_CPY_CHK_BLK_CS_E           /* Validate data CRC of redundant copy */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   585  }Fee_LLRedundantCpyChk_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   586  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   587  /* States for the function Fee_LLCpyBlkFromFls2Fls */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   588  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   589  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   590      FEE_LL_CPY_FLS2FLS_INIT_E,                      /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   591  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   592      #if (FEE_NO_FALLBACK_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   593      FEE_LL_CPY_FLS2FLS_WRITE_NOFB_MARKER_E,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   594      FEE_LL_CPY_FLS2FLS_WAIT_WRITE_NOFB_MARKER_E,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   595      FEE_LL_CPY_FLS2FLS_WRITE_NOFB_MARKER_ERROR_E,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   596      FEE_LL_CPY_FLS2FLS_WAIT_FILL_SECTOR_END_E,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   597      FEE_LL_CPY_FLS2FLS_FILL_SECTOR_END_ERROR_E,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   598      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   599  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   600      FEE_LL_CPY_FLS2FLS_READ_E,                      /* Read out the complete block (header and data) and finish the function if possible */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   601      FEE_LL_CPY_FLS2FLS_WAIT_READ_E,                 /* Wait for the read order to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   602      FEE_LL_CPY_FLS2FLS_READ_ERROR_E,                /* Read error state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   603  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   604      /* Robust block programming states (Hdpg1 -> Data -> Hdpg2 write) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   605      #if (FEE_PAGES_USED_BY_BLK_HEADER == 2u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   606      FEE_LL_CPY_FLS2FLS_HDRPG1_WRITE_E,              /* Write the header page 1 into the new sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   607      FEE_LL_CPY_FLS2FLS_WAIT_HDRPG1_WRITE_E,         /* Wait for the header page 1 write order to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   608      FEE_LL_CPY_FLS2FLS_HDRPG1_WRITE_ERROR_E,        /* Write error state for header page 1 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   609      FEE_LL_CPY_FLS2FLS_HDRPG1_VERIFY_E,             /* Compare the header page 1 write */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   610      FEE_LL_CPY_FLS2FLS_WAIT_HDRPG1_VERIFY_E,        /* Wait for the header page 1 verification to finish */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   611      FEE_LL_CPY_FLS2FLS_HDRPG1_VERIFY_ERROR_E,       /* Verification error for header page 1 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   612      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   613  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   614      FEE_LL_CPY_FLS2FLS_WRITE_E,                     /* Write the data into the new sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   615      FEE_LL_CPY_FLS2FLS_WAIT_WRITE_E,                /* Wait for the write order to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   616      FEE_LL_CPY_FLS2FLS_WRITE_ERROR_E,               /* Write error state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   617      FEE_LL_CPY_FLS2FLS_VERIFY_E,                    /* Compare the programmed data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   618      FEE_LL_CPY_FLS2FLS_WAIT_VERIFY_E,               /* Wait for the verification to finish */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   619      FEE_LL_CPY_FLS2FLS_VERIFY_ERROR_E,              /* Verification error */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   620  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   621      /* Robust block programming states (Hdpg1 -> Data -> Hdpg2 write) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   622      #if (FEE_PAGES_USED_BY_BLK_HEADER == 2u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   623      FEE_LL_CPY_FLS2FLS_HDRPG2_WRITE_E,              /* Write the header page 2 into the new sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   624      FEE_LL_CPY_FLS2FLS_WAIT_HDRPG2_WRITE_E,         /* Wait for the header page 2 write order to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   625      FEE_LL_CPY_FLS2FLS_HDRPG2_WRITE_ERROR_E,        /* Write error state for header page 2 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   626      FEE_LL_CPY_FLS2FLS_HDRPG2_VERIFY_E,             /* Compare the header page 2 write */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   627      FEE_LL_CPY_FLS2FLS_WAIT_HDRPG2_VERIFY_E,        /* Wait for the header page 2 verification to finish */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   628      FEE_LL_CPY_FLS2FLS_HDRPG2_VERIFY_ERROR_E,       /* Verification error for header page 2 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   629      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   630  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   631      FEE_LL_CPY_FLS2FLS_CHECK_ADR_OVERFLOW_E,        /* Data transfer is finished, check a possible address overflow */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   632      FEE_LL_CPY_FLS2FLS_WRITE_FULL_MARKER_E,         /* Write the FULL marker to the "old" sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   633      FEE_LL_CPY_FLS2FLS_ERASE_SECTOR_E,              /* Erase the sector that will be used as a new USED sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   634      FEE_LL_CPY_FLS2FLS_WRITE_USED_MARKER_E,         /* Write the USED marker to new sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   635  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   636      #if(FEE_ROBUST_PROG_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   637      FEE_LL_CPY_FLS2FLS_ROBUST_IFX_HANDLING_E,       /* robust Ifx handling in case of wordline fails */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   638      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   639  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   640      #if defined (FEE_PRV_ROBUST_SECT_OVERFLOW)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   641      FEE_LL_CPY_FLS2FLS_ROBUST_SECT_OVERFLOW_E,      /* Robust sector reorganisation when sector overflow occurs during sector reorg. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   642      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   643  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   644      FEE_LL_CPY_FLS2FLS_WRITE_START_MARKER_E         /* Write the START marker to the new sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   645  }Fee_LLCpyBlkFls2Fls_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   646  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   647  /* States for the function Fee_LlRobustSectorOverflow */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   648  #if defined (FEE_PRV_ROBUST_SECT_OVERFLOW)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   649  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   650  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   651      FEE_LL_ROBUST_SECTOR_OVERFLOW_INIT_E,           /* Init state. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   652      FEE_LL_ROBUST_SECTOR_OVERFLOW_WR_CM_E,          /* Write Clone marker in the latest sector. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   653      FEE_LL_ROBUST_SECTOR_OVERFLOW_PREPARE_E,        /* Compute the address and number of bytes for the operation. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   654  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   655      #if ( defined(RBA_FLSRH850P1xC_FLASH) || defined(RBA_FLSV850R1x_FLASH) || defined(RBA_FLSRH850xx_FLASH) )
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   656      FEE_LL_ROBUST_SECTOR_OVERFLOW_BLANK_CHK_E,      /* Check if the page is blank, transfer only programmed pages. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   657      FEE_LL_ROBUST_SECTOR_OVERFLOW_BLANK_CHK_WAIT_E, /* Wait for Blank check operation to complete. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   658      #endif /* #if ( defined(RBA_FLSRH850P1xC_FLASH) || defined(RBA_FLSV850R1x_FLASH) || defined(RBA_FLSRH850xx_FLASH) ) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   659  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   660      FEE_LL_ROBUST_SECTOR_OVERFLOW_READ_PAGE_E,      /* Read out the programmed page in an internal buffer. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   661      FEE_LL_ROBUST_SECTOR_OVERFLOW_READ_PAGE_WAIT_E, /* Wait for Read operation to complete. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   662      FEE_LL_ROBUST_SECTOR_OVERFLOW_COPY_DATA_E,      /* Copy data to new sector. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   663      FEE_LL_ROBUST_SECTOR_OVERFLOW_COPY_DATA_WAIT_E, /* Wait for Write operation to complete. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   664      FEE_LL_ROBUST_SECTOR_OVERFLOW_VERIFY_DATA_E,    /* Verify the copied data. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   665      FEE_LL_ROBUST_SECTOR_OVERFLOW_VERIFY_DATA_WAIT_E,/* Wait for Verify operation to complete. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   666      FEE_LL_ROBUST_SECTOR_OVERFLOW_VERIFY_SUCCESS_E, /* Check if more bytes are left to be programmed. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   667      FEE_LL_ROBUST_SECTOR_OVERFLOW_WR_UM_E,          /* Write Used marker in the latest sector. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   668      FEE_LL_ROBUST_SECTOR_OVERFLOW_SORT_SECT_E,      /* Sort sectors */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   669      FEE_LL_ROBUST_SECTOR_OVERFLOW_ERROR_E,          /* Error state for all kinds of error in this state machine. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   670      FEE_LL_ROBUST_SECTOR_OVERFLOW_ERASE_E           /* Re-erase the older sector, this state is reached for error handling. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   671  }Fee_LLRobustSectOverflow_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   672  #endif /* #if defined (FEE_PRV_ROBUST_SECT_OVERFLOW) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   673  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   674  /* Read / write order type */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   675  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   676  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   677      uint32                              xRdAddress;                     /* Address for reading (Fee_LLReadBlock) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   678      uint32                              xWrAddress;                     /* Address for writing (Fee_LLWriteBlock) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   679      uint32                              xCmpAddress;                    /* Address for comparing (Fee_LLCompBlkInFlash) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   680      uint32                              xCrcAddress;                    /* Address for the CRC (Fee_LLCompBlkInFlash) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   681      uint32                              xCpyAddress;                    /* Address for copying (Fee_LLCompBlkInFlash) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   682      uint32                              AdrHdSearchStart_u32;           /* Start address for the header search after reloads */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   683      uint32                              xStartAddrNextSector_u32;        /* Payload of START-Marker, contains the expected address of the 1. blockheader */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   684  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   685  /* Robust block programming states (Hdpg1 -> Data -> Hdpg2 write) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   686  #if (FEE_PAGES_USED_BY_BLK_HEADER == 2u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   687      uint32                              xHdPg2Address;                   /* Address for writing the header 2nd page. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   688  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   689  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   690  #if !( defined(RBA_FLSRH850P1xC_FLASH) || defined(RBA_FLSV850R1x_FLASH) || defined(RBA_FLSRH850xx_FLASH) )
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   691      uint32                              LastProgrammedAddress_u32;        /* Last programmed page during cache build up. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   692      uint32                              LastValidHdrAddress_u32;          /* Last valid header found during cache build up. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   693  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   694  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   695      Fee_LLSecReorgType_ten              Fee_LLSecReorg_en;                /* State machine for the sector reorganization */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   696      Fee_LLRedundantCpyChk_ten           Fee_LLRedundantCpyChk_en;         /* State machine for checking redundant copy */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   697      Fee_LLCpyBlkFls2Fls_ten             Fee_LLCpyBlkFls2Fls_en;           /* State machine for copying one block from one sector to another one */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   698  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   699  #if defined (FEE_PRV_ROBUST_SECT_OVERFLOW)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   700      Fee_LLRobustSectOverflow_ten        Fee_LLRobustSectOverflow_en;      /* LL state machine for Robust sector overflow */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   701  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   702  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   703      Fee_HLRdWrBlockType_ten             Fee_HLWrBlock_en;                  /* HL state machine for writing a block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   704  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   705  #if(FEE_RB_MAINTAIN != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   706      Fee_HLRdWrBlockType_ten             Fee_HLMtBlock_en;                  /* HL state machine for maintaining a block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   707   #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   708  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   709      Fee_LLWrBlockType_ten               Fee_LLWrBlock_en;                  /* LL State machine for writing a block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   710      Fee_HLRdWrBlockType_ten             Fee_HLRdBlock;                     /* state machine for reading a block High Level */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   711      Fee_LLWrBlockType_ten               Fee_LLNextUsedWrBlock_en;          /* LL state for saving the next write state if a USED marker is necessary in between */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   712      Fee_LLWrBlockType_ten               Fee_LLNextEraseWrBlock_en;         /* LL state for saving the next write state if an erase operation is necessary in between */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   713      Fee_LLCmpBlkType_ten                Fee_LLCompBlk;                     /* LL state machine for comparing data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   714      Fee_LLCpyBlkType_ten                Fee_LLCopyBlk_en;                  /* LL state machine for copying data from the flash to the user buffer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   715      Fee_LLCalcCrcBlkType_ten            Fee_LLCalcCrcBlk_en;               /* LL state machine for calculating the checksum of a block inside the flash */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   716      Fee_LLWrMarkerType_ten              Fee_LLWrMarker_en;                 /* LL state machine for writing a sector marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   717      Fee_LLRdStateType_ten               Fee_LLRdState_en;                  /* LL state machine to read a specified address in the sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   718      Fee_LLBlankCheckType_ten            Fee_LLBlankCheckState_en;          /* LL State machine to perform a blank check */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   719      Fee_LLFndEmptyPgeType_ten           Fee_LLFindEmptyPageState_en;       /* LL state machine to find an empty page within one sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   720      Fee_LLSearchBlkHdrType_ten          Fee_LLSearchBlkHdr_en;             /* LL state machine to find a specified block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   721  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   722  #if((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) || (FEE_RB_ACT_SURVIVAL_EVAL != FALSE))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   723   #if(FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE == 0) /* Unknown block sector reorganiation without cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   724      Fee_LLSearchUnknBlkHdrType_ten      Fee_LLSearchUnknBlkHdr_en;          /* LL state machine to find an unknown block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   725   #else /* Unknown blcok sector reorganiation with cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   726      uint32                              Fee_UnknownBlkCacheAdd_u32;         /* Address till where the cache for unknown block is scanned */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   727      uint16                              Fee_UnknownBlkCacheIdx_u16;         /* Index till which the cache for unknown block is built */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   728      Fee_LLBuildUpUnknownBlkCache_ten    Fee_LLBuildUpCacheUnknownBlk_en;    /* LL state machine to build up the cache for unknown blocks */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   729   #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   730  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   731  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   732  #if(FEE_FAST_CACHE_INIT_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   733      Fee_LLBuildUpCache_ten              Fee_LLBuildUpCache_en;              /* LL state machine to build up the cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   734      Fee_LLBuildUpCacheAllSect_ten       Fee_LLBuildUpCacheAllSect_en;       /* LL state machine to build up the cache for all sectors */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   735  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   736  } Fee_RdWrOrder_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   737  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   738  /* Block header info type */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   739  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   740  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   741      uint32 AdrBlkHeader_u32;    /* Read address for for the function Fee_LLReadBlock and Fee_LLCpyBlkFromFls2Fls */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   742      uint32 BlkCrc32_u32;        /* Block data checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   743      uint16 HdrCrc16_u16;        /* Block header checksum (start value for block data checksum) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   744      uint16 BlkLength_u16;       /* Extracted block length from the block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   745      uint16 FeeIndex_u16;        /* Fee Index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   746      uint8  BlkStatus_u8;        /* Block status */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   747  }Fee_GlobInfoLastRdHeader_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   748  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   749  /* Block write type */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   750  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   751  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   752      uint16  BytesAlrdyConsid_u16;   /* Write offset in user data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   753      uint16  BytesAlrdyCompared_u16;    /* Number of bytes already compared */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   754      uint16  Bytes2Read_u16;          /* Number of bytes to read */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   755      uint8   CompareResult_u8;       /* Result of last Fls_Compare */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   756      uint8   cntWriteRetry_u8;       /* Count number of write retries */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   757      uint8   cntCopies_u8;           /* Count number of written copies */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   758  }Fee_GlobInfoWrBlock_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   759  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   760  /* Sector reorganization type */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   761  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   762  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   763      uint32 xRdAddress_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   764      uint16 xNumBytesAlrdyCopied_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   765      uint16 xNumBytesLeftToRdWr_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   766      uint8  xCntCopies_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   767  #if (FEE_PAGES_USED_BY_BLK_HEADER == 2u)    /* Robust block programming states (Hdpg1 -> Data -> Hdpg2 write) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   768      uint8  xFirstDataPgPgm_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   769  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   770  }Fee_LLSecReorgStruct_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   771  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   772  /* Erase sector types */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   773  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   774  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   775      FEE_ERASESEC_IDLE_E = 0,        /* Idle state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   776      FEE_ERASESEC_CHECK_CACHE_E,     /* Check of cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   777      FEE_ERASESEC_START_E,           /* Erase sequence started */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   778      FEE_ERASESEC_DO_E,              /* Wait until erasing was finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   779      FEE_ERASESEC_WRITE_MARKER_E,    /* Write the sector ERASED marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   780      FEE_ERASESEC_ERROR_E            /* Error state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   781  }Fee_LLEraseStateType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   782  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   783  /* Erase Order type */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   784  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   785  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   786      Fee_LLEraseStateType_ten EraseState_en; /* State machine state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   787      uint8   xPhySectorIdx_u8;               /* Idx of sector that should get erased  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   788  }Fee_LLEraseOrderType_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   789  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   790  /* Block header structure */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   791  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   792  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   793      uint8   Preamble_au8[3];    /* Preambel (0xA53C96) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   794      uint8   BlkStatus_u8;       /* Block status, contains information like security level, etc. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   795      uint16  FeeIndex_u16;       /* FeeIndex */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   796      uint16  BlkLength_u16;      /* Block length without header and block checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   797      uint16  HdrCrc16_u16;       /* Header checksum, start value is 0xCAFE */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   798      uint32  BlkCrc32_u32;       /* Block data checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   799  }Fee_BlkHeader_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   800  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   801  /* Linked function structure */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   802  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   803  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   804      void(* Fee_ResetUsedSectors_pfn)(void);     /* Function for resetting the amount of used sectors */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   805  }Fee_LinkedFunctions_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   806  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   807  #if (FEE_PRV_DEBUG_MONITOR != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   808  #define FEE_DBM_ERROR_ENTRIES   15
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   809  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   810  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   811  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   812      FEE_DBM_ERROR_ERASE_FCT_E,        /* Used in function Fee_LLEraseSector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   813      FEE_DBM_ERROR_LLMARKER_FCT_E,     /* USed in function Fee_LLWriteMarker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   814      FEE_DBM_ERROR_XX_E                /* not used yet....                   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   815  } Fee_DebugMonitoringFct_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   816  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   817  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   818  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   819      uint32                       xSecChngCntVal;             /* value of sector change counter while error occurs */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   820      uint16                       FeeBlkIdx;                  /* if the error couldn't be assigned to a NvmBlock, this is 0xFFFF */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   821      Fee_DebugMonitoringFct_ten   xError;                     /* error number */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   822      uint8                        xErrorInfo;                 /* error info, if necessary */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   823  } FeeDBMErrInfo_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   824  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   825  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   826  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   827      FeeDBMErrInfo_tst  xErrorEntry[FEE_DBM_ERROR_ENTRIES];  /* array of a structure with detail info to the errors */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   828      uint8   idxNewEntry;                /* index points on the next free entry in the xErrorEntry buffer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   829      uint8   ctBuffOverflow;             /* counter countrs how often the FEE_DBM_ERROR_ENTRIES error overflow. Startvalue is 1, used for ProtRAM validation! */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   830  } Fee_DebugMonitoring_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   831  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   832  #define FEE_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   833  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   834  extern Fee_DebugMonitoring_tst Fee_DebugMonitoring;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   835  #define FEE_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   836  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   837  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   838  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   839  #if(FEE_ROBUST_PROG_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   840  /* Ifx robust programming */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   841  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   842  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   843      FEE_ROB_IFX_INIT,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   844      FEE_ROB_IFX_MARK_SECTOR,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   845      FEE_ROB_IFX_STORE_BUFFER,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   846      FEE_ROB_IFX_STORE_BUFFER_WAIT,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   847      FEE_ROB_IFX_COPY_DATA,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   848      FEE_ROB_IFX_STORE_COPY_WAIT,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   849      FEE_ROB_IFX_ERASE_SECTOR,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   850      FEE_ROB_IFX_WRITE_USED_MARK_SECTOR,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   851      FEE_ROB_SORT_SECTOR,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   852      FEE_ROB_IFX_FINISHED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   853  }Fee_RobIfxHdl_e;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   854  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   855  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   856  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   857      Fls_AddressType xStartAddress;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   858      uint8* DataBuffer;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   859      Fls_LengthType numBytes;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   860      uint16 offInBuf_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   861  }Fee_IfxRobustProgramming_t;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   862  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   863  #define FEE_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   864  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   865  extern Fee_IfxRobustProgramming_t Fee_IfxRobustProgramming_s;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   866  extern Fee_RobIfxHdl_e Fee_RobIfxHdl;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   867  #define FEE_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   868  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   869  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   870  #define FEE_START_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   871  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   872  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_RobIfxHandling(uint8 xActLogWrSect_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   873  #define FEE_STOP_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   874  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   875  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   876  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   877  #if ((FEE_RB_MAINTAIN != FALSE) && (FEE_NO_FALLBACK_ACTIVE != FALSE))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   878  /* Additional MainFunction write states in case NoFallback is activated */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   879  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   880  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   881      FEE_WRITE_NOFB_IDLE_E = 0,      /* Idle state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   882      FEE_WRITE_NOFB_MAINTAIN_E,      /* Maintain a NoFallback block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   883      FEE_WRITE_NOFB_BLOCK_E          /* Write a NoFallback block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   884  }Fee_WriteStateNoFb_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   885  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   886  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   887  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   888  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   889      uint32 Fee_Totalfree_bytes;    /* Total number of free bytes  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   890      uint32 Fee_hardThreshold;      /* Hard Threshold configures */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   891      uint32 Fee_softThershold;      /* Soft therosold configured*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   892  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   893  }Fee_FreeByte_thrshold_t;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   894  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   895  /*
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   896  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   897  * Extern declarations
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   898  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   899  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   900  /* Structures and variables */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   901  #define FEE_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   902  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   903  extern CONST(Fee_FlashProp_tst, FEE_CONST)          Fee_FlashProp_st[FEE_NUM_FLASH_BANKS_AVAILABLE];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   904  extern CONST (MemIf_JobResultType, AUTOMATIC)       Fee_JobTypeMapping[FEE_NUM_RET_VAL_E];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   905  extern CONST (Fee_LinkedFunctions_tst, FEE_CONST)   Fee_LinkedFunctions_cst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   906  #define FEE_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   907  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   908  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   909  #define FEE_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   910  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   911  extern P2VAR(uint8, AUTOMATIC, FEE_APPL_DATA)       Fee_PageBytePtr_cpu8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   912  extern VAR(Fee_RdWrOrder_tst, AUTOMATIC)            Fee_RdWrOrder_st;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   913  extern VAR(Fee_LLSectorOrder_tst, AUTOMATIC)        Fee_LLSectorOrder_st[FEE_NUM_FLASH_BANKS_AVAILABLE];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   914  extern VAR(Fee_LLEraseOrderType_tst, AUTOMATIC)     Fee_LLEraseOrder_st;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   915  extern VAR(Fee_OrderFifo_tst, AUTOMATIC)            Fee_OrderFifo_st[FEE_QUEUE_SIZE];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   916  extern VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC) Fee_GlobInfoLastRdHeader_st;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   917  extern VAR(Fee_GlobInfoWrBlock_tst, FEE_VAR)        Fee_GlobInfoWrBlock_st;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   918  extern VAR(Fee_LLSecReorgStruct_tst, FEE_VAR)       Fee_LLSecReorgStruct_st;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   919  extern VAR(MemIf_JobResultType, AUTOMATIC)          Fee_JobResult[FEE_QUEUE_SIZE];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   920  #define FEE_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   921  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   922  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   923  #define FEE_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   924  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   925  extern CONSTP2VAR(uint8, AUTOMATIC, FEE_APPL_DATA)  Fee_MarkerBufBytePtr_cpu8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   926  extern CONSTP2VAR(uint8, AUTOMATIC, FEE_APPL_DATA)  Fee_DataBytePtr_cpu8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   927  #define FEE_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   928  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   929  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   930  #define FEE_START_SEC_VAR_INIT_8
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   931  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   932  extern VAR(uint8, FEE_VAR)                          Fee_Prv_stInit_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   933  extern VAR(uint8, FEE_VAR)                          Fee_Prv_stReorg_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   934  extern VAR(uint8, FEE_VAR)                          Fee_NumFlashBanksUsed_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   935  extern VAR(uint8, AUTOMATIC)                        Fee_idxActQueueBackUp;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   936  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   937  /* Buffer to hold 2nd header page contents. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   938  #if (FEE_PAGES_USED_BY_BLK_HEADER == 2u)    /* Robust block programming states (Hdpg1 -> Data -> Hdpg2 write) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   939  extern VAR(uint8, AUTOMATIC) Fee_hdr2Buffer_au8[FEE_PAGE_LEN];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   940  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   941  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   942  /* Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   943  #if (defined(RBA_FLSIFX_FLASH) || defined(RBA_FLSJDP_FLASH))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   944  extern VAR(uint8, AUTOMATIC)                        Fee_hdrBuffer_au8[FEE_PAGE_LEN];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   945  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   946  /* END Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   947  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   948  #define FEE_STOP_SEC_VAR_INIT_8
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   949  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   950  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   951  #define FEE_START_SEC_VAR_INIT_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   952  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   953  extern VAR(MemIf_StatusType, FEE_VAR)               Fee_GlobModuleState_st;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   954  extern VAR(Fee_Rb_WorkingStateType_ten, AUTOMATIC)  Fee_Rb_WorkingStateBackUp_en;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   955  #define FEE_STOP_SEC_VAR_INIT_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   956  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   957  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   958  #define FEE_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   959  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   960  extern VAR(uint8, AUTOMATIC)                        Fee_idxLLSectorOrder_au8[FEE_NUM_FLASH_BANKS_AVAILABLE];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   961  extern VAR(uint8, FEE_VAR)                          Fee_idxActQueue_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   962  extern VAR(uint8, FEE_CONST)                        Fee_CacheUpdCompForSect_au8[FEE_NUM_FLASH_BANKS_AVAILABLE];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   963  extern VAR(uint8, AUTOMATIC)                        Fee_RdWrRetries_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   964  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   965  #if (FEE_RB_ACT_ERASE_SUSPENSION != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   966  extern VAR(boolean, AUTOMATIC) Fee_Prv_stSuspendActiv_b;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   967  extern VAR(boolean, AUTOMATIC) Fee_Prv_stHardReOrgErase_b;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   968  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   969  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   970  #if (FEE_RB_ADDONS_CCAS == TRUE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   971  extern VAR(boolean, AUTOMATIC) Fee_Rb_stRequestStopMode_b;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   972  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   973  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   974  #define FEE_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   975  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   976  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   977  #define FEE_START_SEC_VAR_CLEARED_32
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   978  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   979  extern VAR(uint32, AUTOMATIC)                       Fee_llMarkerPageBuf_au32[FEE_SEC_HEADER_SIZE / 4u];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   980  extern VAR(uint32, FEE_CONST)                       Fee_Cache_au32[FEE_NUM_BLOCKS];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   981  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   982  #if(FEE_ROB_FEATURE_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   983  extern VAR(uint32, AUTOMATIC)                       Fee_DataByteStartCrc_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   984  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   985  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   986  #define FEE_STOP_SEC_VAR_CLEARED_32
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   987  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   988  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   989  #define FEE_START_SEC_VAR_CLEARED_SECURED_32
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   990  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   991  extern VAR(uint32, AUTOMATIC)                       Fee_llPageBuf_au32[(FEE_LL_PAGEBUFFSIZE / 4u) + 2u];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   992  extern VAR(uint32, AUTOMATIC)                       Fee_llDataBuf_au32[FEE_LL_DATABUFFSIZE / 4u];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   993  #define FEE_STOP_SEC_VAR_CLEARED_SECURED_32
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   994  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   995  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   996  #ifdef FEE_PRV_USE_ROM_TABLE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   997  #define FEE_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   998  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   999  extern CONST(Fee_BlockPropertiesType_tst, FEE_CONST)  Fee_BlockProperties_st[FEE_NUM_BLOCKS];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1000  #define FEE_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1001  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1002  #else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1003  #define FEE_START_SEC_VAR_INIT_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1004  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1005  extern VAR(Fee_BlockPropertiesType_tst, AUTOMATIC)  Fee_BlockProperties_st[FEE_NUM_BLOCKS];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1006  #define FEE_STOP_SEC_VAR_INIT_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1007  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1008  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1009  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1010  #if (FEE_NO_FALLBACK_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1011  #define FEE_START_SEC_VAR_INIT_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1012  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1013  extern Fee_WriteStateNoFb_ten Fee_WriteStateNoFb_en;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1014  #define FEE_STOP_SEC_VAR_INIT_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1015  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1016  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1017  #define FEE_START_SEC_VAR_CLEARED_32
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1018  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1019  extern VAR(uint32, AUTOMATIC)   Fee_Rb_NoFallback_RemAdr_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1020  #define FEE_STOP_SEC_VAR_CLEARED_32
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1021  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1022  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1023  #define FEE_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1024  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1025  extern VAR(boolean, AUTOMATIC)  Fee_Rb_NoFallback_LastBlockCfg_b;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1026  extern VAR(boolean, AUTOMATIC)  Fee_Rb_InvalidateOldCopy_b;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1027  extern VAR(boolean, AUTOMATIC)  Fee_Rb_MaintainRun_b;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1028  #define FEE_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1029  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1030  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1031  #define FEE_START_SEC_CONST_8
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1032  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1033  extern const uint8 Fee_NoFallbackMarkerPattern[FEE_PAGES_USED_BY_BLK_HEADER * FEE_PAGE_LEN];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1034  #define FEE_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1035  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1036  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1037  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1038  #if((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) && (FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE != 0))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1039  /* Unknown blcok sector reorganiation with cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1040  #define FEE_START_SEC_VAR_CLEARED_32
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1041  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1042  extern VAR(uint32, AUTOMATIC) Fee_UnknownBlkCache_Addr_au32[FEE_RB_ACT_UNKNOWN_BLK_CACHE_ARRAY_SIZE];   /* Address of unknown block. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1043  #define FEE_STOP_SEC_VAR_CLEARED_32
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1044  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1045  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1046  #define FEE_START_SEC_VAR_CLEARED_16
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1047  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1048  extern VAR(uint16, AUTOMATIC) Fee_UnknownBlkCache_FeeIndex_u16[FEE_RB_ACT_UNKNOWN_BLK_CACHE_ARRAY_SIZE]; /* Index of unknown block. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1049  #define FEE_STOP_SEC_VAR_CLEARED_16
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1050  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1051  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1052  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1053  /* Lower Layer functions of the Fee */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1054  #define FEE_START_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1055  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1056  extern FUNC(uint32, FEE_CODE) Fee_CalculateNumOfFreeBytesInCurSector(VAR(uint32, FEE_VAR) DataEndAdr_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1057  extern FUNC(void, FEE_CODE)   Fee_InitVarAndState(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1058  extern FUNC(void, FEE_CODE)   Fee_InitCache(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1059  extern FUNC(void, FEE_CODE)   Fee_InitOrderFifoBuffer(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1060  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1061  /* Active sector detection */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1062  extern FUNC(void ,FEE_CODE)   Fee_LLSearchSectors(P2VAR(Fee_stSecDet_tst, AUTOMATIC, FEE_APPL_DATA) Fee_stSecDet_ps);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1063  extern FUNC(uint8, FEE_CODE)  Fee_LLDetectActiveSector(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1064  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLFindEmptyPage(uint8 PhySectIdxUsedSect_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1065  extern FUNC(uint8, FEE_CODE)  Fee_GetMostCurrentSectorIdx(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1066  extern FUNC(void, FEE_CODE)   Fee_CheckErasedSectorEmpty(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1067  extern FUNC(uint8, FEE_CODE)  Fee_GetPhysSectorByAddress(VAR(uint32, AUTOMATIC) Address_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1068  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1069  /* Marker handling */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1070  extern FUNC(Fee_stRetVal_ten,FEE_CODE)  Fee_LLWriteMarker(VAR(uint8, AUTOMATIC) PhySectIdx_u8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1071                                                            VAR(uint8, AUTOMATIC) MarkerID_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1072  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1073  /* Erase functions */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1074  extern FUNC(Fee_stRetVal_ten,FEE_CODE)  Fee_LLEraseSector(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1075  extern FUNC(void,FEE_CODE)              Fee_LLSetEraseSector(VAR(uint8, AUTOMATIC) EraseLogIdx);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1076  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1077  /* Block header access */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1078  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLSearchNextBlkHeader(P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) Fee_GlobInfoLastRdHeader_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1079                                                                    VAR(uint8, AUTOMATIC) CachedAccess_u8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1080                                                                    VAR(uint8, AUTOMATIC) FastCacheUpdate_u8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1081                                                                    VAR(boolean, AUTOMATIC) xForcePageBufReload_b,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1082                                                                    VAR(uint32, AUTOMATIC) strAddrHdrSearch);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1083  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1084  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLSearchSpecifiedBlkHeader(VAR(uint16, AUTOMATIC) FeeIdx_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1085                                                                         P2VAR(uint32, AUTOMATIC, FEE_APPL_DATA) LastHdrAddr_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1086                                                                         P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) GlobBlkHdr_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1087                                                                         VAR(boolean, AUTOMATIC) SearchRetry_b);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1088  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1089  #if((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) || (FEE_RB_ACT_SURVIVAL_EVAL != FALSE))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1090  /* Unknown blcok sector reorganiation without cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1091  #if(FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE == 0)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1092  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLSearchUnknownBlkHeader(P2VAR(uint32, AUTOMATIC, FEE_APPL_DATA) StartHdrAddr_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1093                                                                       P2VAR(uint32, AUTOMATIC, FEE_APPL_DATA) LastHdrAddr_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1094                                                                       P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) GlobBlkHdr_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1095                                                                       P2VAR(boolean, AUTOMATIC, FEE_APPL_DATA) SearchRetry_ptr);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1096  #else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1097  /* Unknown blcok sector reorganiation with cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1098  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_BuildUpCacheUnknownBlk(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1099  #endif /* (FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE == 0) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1100  #endif /* ((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) || (FEE_RB_ACT_SURVIVAL_EVAL != FALSE)) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1101  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1102  extern FUNC(uint32, FEE_CODE) Fee_LLGetSecStartAddress(VAR(uint8, AUTOMATIC) xPhySectorIdx_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1103  extern FUNC(uint32, FEE_CODE) Fee_LLGetSecEndAddress(VAR(uint8, AUTOMATIC) xPhySectorIdx_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1104  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1105  /* Verification and handling of blocks */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1106  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLCompBlkInFlash(P2CONST(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) HeaderInfo_pcst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1107                                                               P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) Data_pcu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1108  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLCalcBlkCrcInFlash(P2CONST(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) HeaderInfo_pcst);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1109  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLCpyBlkFromFls2Fls(P2CONST(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) Fee_GlobInfoLastRdHeader_pcst, boolean Fee_WriteTwice_b);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1110  #if defined (FEE_PRV_ROBUST_SECT_OVERFLOW)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1111  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LlRobustSectorOverflow(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1112  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1113  extern FUNC(void, FEE_CODE)             Fee_LLPrepMarkerBufWithMarkerData(P2CONST(Fee_MarkerProp_t, AUTOMATIC, FEE_APPL_DATA) Marker_pcst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1114                                                                            P2VAR(uint8, AUTOMATIC, FEE_APPL_DATA) MarkerBuf_pu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1115  extern FUNC(void, FEE_CODE)             Fee_LLCopyPageBuff2Marker(P2VAR(Fee_MarkerProp_t, AUTOMATIC, FEE_APPL_DATA) Marker_pst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1116                                                                    P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) PageBuf_pcu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1117  extern FUNC(void, FEE_CODE)             Fee_LLPrepPageBufWithHdrDataStart(P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) HeaderInfo_pst);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1118  extern FUNC(void, FEE_CODE)             Fee_LLPrepPageBufWithHdrDataEnd(P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) HeaderInfo_pst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1119                                                                                 P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) Data_pcu8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1120                                                                                 VAR(uint32, AUTOMATIC) BlkCrc32_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1121  #define FEE_STOP_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1122  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1123  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1124  LOCAL_INLINE FUNC(void, FEE_CODE)       Fee_LLCopyPageBuff2HeaderStart(P2VAR(Fee_BlkHeader_tst, AUTOMATIC, FEE_APPL_DATA) BlkHdr_pst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1125                                                                         P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) PageBuf_pcu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1126  #if(FEE_FAST_CACHE_INIT_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1127  LOCAL_INLINE FUNC(void, FEE_CODE)       Fee_LLCopyPageBuff2HeaderIdxAndCrc(P2VAR(Fee_BlkHeader_tst, AUTOMATIC, FEE_APPL_DATA) BlkHdr_pst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1128                                                                             P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) PageBuf_pcu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1129  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1130  #define FEE_START_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1131  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1132  #if !( defined(RBA_FLSRH850P1xC_FLASH) || defined(RBA_FLSV850R1x_FLASH) || defined(RBA_FLSRH850xx_FLASH) )
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1133  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_SearchLastBlkHeader(P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) Fee_GlobInfoLastRdHeader_ptr);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1134  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1135  #define FEE_STOP_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1136  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1137  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1138  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1139  #define FEE_START_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1140  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1141  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1142  extern FUNC(uint32, FEE_CODE)           Fee_SearchHighestCacheEntry(VAR(uint32,FEE_VAR) UpperBoundary_u32, VAR(uint8, FEE_VAR) SectIdx_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1143  extern FUNC(void, FEE_CODE)             Fee_InvalidateCacheByAddress(VAR(uint32,FEE_VAR) xAddress_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1144  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1145  extern FUNC(void, FEE_CODE)             Fee_LLCopyPageBuff2HeaderMid(P2VAR(Fee_BlkHeader_tst, AUTOMATIC, FEE_APPL_DATA) BlkHdr_pst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1146                                                                       P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) PageBuf_pcu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1147  extern FUNC(void, FEE_CODE)             Fee_LLCopyPageBuff2HeaderEnd(P2VAR(Fee_BlkHeader_tst, AUTOMATIC, FEE_APPL_DATA) BlkHdr_pst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1148                                                                       P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) PageBuf_pcu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1149  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLCopyData2Buffer(P2CONST(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) Fee_GlobInfoLastRdHeader_pcst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1150                                                                    P2VAR(uint8, AUTOMATIC, FEE_APPL_DATA) DataPtr_pu8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1151                                                                    VAR(uint16, FEE_VAR) DataOffset_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1152                                                                    VAR(uint16, FEE_VAR) DataLength_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1153  extern FUNC(void, FEE_CODE)             Fee_IncAddressInsideSector(P2VAR(uint32, AUTOMATIC, FEE_APPL_DATA) Address_u32,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1154                                                                     VAR(uint16, FEE_VAR) numBytes_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1155                                                                     VAR(boolean, FEE_VAR) EnsurePageAlign_b);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1156  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1157  /* Sector reorganization */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1158  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLCheckReorganizationNeed(VAR(uint32, AUTOMATIC) Threshold_u32,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1159                                                                        VAR(uint16, AUTOMATIC) DataLength_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1160  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLSectorReorganization(P2VAR(boolean, AUTOMATIC, FEE_APPL_DATA) SectReorgInterSt_pb);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1161  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1162  /* Block writes */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1163  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_HLWriteBlock(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1164  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLWriteBlock(P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) Info_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1165                                                           P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) Data_pcu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1166  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1167  /* Block reading */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1168  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_HLReadBlock(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1169  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLReadBlock(P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) Info_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1170                                                          P2VAR(uint8,AUTOMATIC, FEE_APPL_DATA) Data_ptr);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1171   #if(FEE_RB_MAINTAIN != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1172      /* Block maintaining*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1173      extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_HLMaintainBlock(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1174   #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1175  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1176  /* Order handling */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1177  extern FUNC(Std_ReturnType, FEE_CODE)   Fee_HLPlaceOrder(VAR(uint16, AUTOMATIC) Blocknumber_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1178                                                           VAR(uint16, AUTOMATIC) Offset_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1179                                                           P2VAR(uint8, AUTOMATIC, FEE_APPL_DATA) DataBufferPtr_pu8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1180                                                           VAR(uint16, AUTOMATIC) Length_16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1181                                                           VAR(Fee_HlMode_ten, AUTOMATIC) Mode_en);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1182  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1183  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1184  /* Cache handling */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1185  extern FUNC(uint32, FEE_CODE) Fee_LLGetAddressFromCache(VAR(uint16, AUTOMATIC) FeeIdx_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1186  extern FUNC(boolean, FEE_CODE) Fee_LLCheckAddressInCache(VAR(uint32, AUTOMATIC) AdrInSector_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1187  extern FUNC(void, FEE_CODE)   Fee_LLUpdateAddressInCache(VAR(uint16, AUTOMATIC) FeeIdx_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1188                                                           VAR(uint32, AUTOMATIC) Addr_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1189  extern FUNC(void, FEE_CODE)  Fee_LLUpdateCacheStForSect(VAR(uint8, AUTOMATIC) PhySecIdx_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1190  extern FUNC(void, FEE_CODE)  Fee_LLEraseCacheStForSect(VAR(uint8, AUTOMATIC) PhySecIdx_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1191  extern FUNC(uint8, FEE_CODE) Fee_LLGetCacheUpdateStForSect(VAR(uint8, AUTOMATIC) PhySecIdx_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1192  extern FUNC(uint8, FEE_CODE) Fee_LLGetCacheUpdateStForAllSect(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1193  extern FUNC(boolean, FEE_CODE) Fee_SrvBinarySearchInBlockProp(VAR(uint16, AUTOMATIC) FeeIdx_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1194                                                                P2VAR(uint16, AUTOMATIC, FEE_APPL_DATA) CacheIdx_pu16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1195  #define FEE_STOP_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1196  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1197  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1198  #if(FEE_FAST_CACHE_INIT_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1199  LOCAL_INLINE FUNC(boolean, FEE_CODE) Fee_SrvBinarySearchInBlockPropFast(VAR(uint16, AUTOMATIC) FeeIdx_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1200                                                                          P2VAR(uint16, AUTOMATIC, FEE_APPL_DATA) CacheIdx_pu16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1201  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1202  #define FEE_START_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1203  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1204  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_BuildUpCache(VAR(uint32, AUTOMATIC) StartAdr_u32,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1205                                                           VAR(uint32, AUTOMATIC) EndAdr_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1206  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_BuildUpCacheForAllSect(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1207  #define FEE_STOP_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1208  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1209  /* FEE_FAST_CACHE_INIT_ACTIVE != FALSE */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1210  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1211  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1212  #define FEE_START_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1213  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1214  /* Services */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1215  extern FUNC(void, FEE_CODE)  Fee_SrvMemSet8(P2VAR(uint8, AUTOMATIC, FEE_APPL_DATA) xDest_pu8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1216                                              VAR(uint32, FEE_VAR) xPattern_u32,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1217                                              VAR(uint32, FEE_VAR) numBytes_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1218  extern FUNC(void, FEE_CODE)  Fee_SrvMemCopy8(P2VAR(uint8, AUTOMATIC, FEE_APPL_DATA) xDest_pu8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1219                                               P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) xSrc_pcu8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1220                                               VAR(uint32, FEE_VAR) numBytes_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1221  extern FUNC(void, FEE_CODE)  Fee_SrvSetFifoMode(VAR(Fee_HlMode_ten, AUTOMATIC) Mode_en,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1222                                                  VAR(uint16, AUTOMATIC) xJobType_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1223  extern FUNC(Fee_HlMode_ten, FEE_CODE) Fee_SrvGetFifoMode(VAR(uint16, AUTOMATIC) xJobType_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1224  extern FUNC(void, FEE_CODE)           Fee_LoadNextOrder(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1225  extern FUNC(uint8, FEE_CODE)          Fee_SearchNextOrder(boolean isIntOrder_b);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1226  extern FUNC(void, FEE_CODE)           Fee_UpdateStatus(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1227  extern FUNC(void, FEE_CODE)           Fee_TriggerHardSectorReorg(VAR(Fee_Rb_WorkingStateType_ten, FEE_VAR) WorkingState_en);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1228  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1229  extern FUNC(Std_ReturnType, FEE_CODE) Fee_CheckBlockCfg(VAR(uint8, AUTOMATIC)  ApiId_u8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1230                                                             VAR(uint16, AUTOMATIC) BlockNum_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1231  extern FUNC(Std_ReturnType, FEE_CODE) Fee_CheckModuleSt(VAR(uint8, AUTOMATIC)  ApiId_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1232  extern FUNC(Std_ReturnType, FEE_CODE) Fee_CheckAdrPtr(VAR(uint8, AUTOMATIC) ApiId_u8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1233                                                        P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) DataBufferPtr_pcu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1234  extern FUNC(Std_ReturnType, FEE_CODE) Fee_CheckBlkOfs(VAR(uint8, AUTOMATIC) ApiId_u8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1235                                                        VAR(uint16, AUTOMATIC) BlockNum_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1236                                                        VAR(uint16, AUTOMATIC) BlockOfs_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1237  extern FUNC(Std_ReturnType, FEE_CODE) Fee_CheckBlkLen(VAR(uint8, AUTOMATIC) ApiId_u8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1238                                                        VAR(uint16, AUTOMATIC) BlockNum_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1239                                                        VAR(uint16, AUTOMATIC) BlockOfs_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1240                                                        VAR(uint16, AUTOMATIC) BlockLen_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1241  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1242  /* Miscellaneous */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1243  extern FUNC(void, FEE_CODE)   Fee_CheckFlsJobResult(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1244  extern void (* Fee_Prv_ResetUsedSectors_pfn)(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1245  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1246  #if (FEE_PRV_DEBUG_MONITOR != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1247  extern FUNC(void ,FEE_CODE) Fee_DBM_RepError(VAR(uint16,FEE_VAR) FeeBlkIdx, VAR(Fee_DebugMonitoringFct_ten,FEE_VAR) xError, VAR(uint8,FEE_VAR) xErrorInfo);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1248  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1249  #define FEE_STOP_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1250  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1251  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1252  /*
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1253  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1254  * Inline functions (Necessary for fastening up the start up time)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1255  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1256  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1257  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1258   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1259   * Fee_LLCopyPageBuff2HeaderStart(): Extract the start of the block header data
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1260   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1261   * This function extracts the preamble of the block header data out
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1262   * of the page buffer (called every 8th byte of the flash).
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1263   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1264   * Hint: Block header structure:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1265   *       {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1266   *          uint8   Preamble_au8[3];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1267   *          uint8   BlkStatus_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1268   *          uint16  FeeIndex_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1269   *          uint16  BlkLength_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1270   *          uint16  HdrCrc16_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1271   *          uint32  BlkCrc32_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1272   *       }Fee_BlkHeader_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1273   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1274   * \param    BlkHdr_pst:    Pointer to the block header that was
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1275   *                          found in the flash.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1276   * \param    PageBuf_pu8:   Pointer to the page buffer
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1277   * \return
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1278   * \retval   none
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1279   * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1280   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1281   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1282   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1283  LOCAL_INLINE FUNC(void, FEE_CODE) Fee_LLCopyPageBuff2HeaderStart(P2VAR(Fee_BlkHeader_tst, AUTOMATIC, FEE_APPL_DATA) BlkHdr_pst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1284                                                                   P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) PageBuf_pcu8)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1285  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1286      BlkHdr_pst->Preamble_au8[0] = PageBuf_pcu8[0];      /* 0xA53C96 <- [0]: A5, [1]: 3C, [2]: 96 */
	ld.bu	d15,[a5]
.L747:
	st.b	[a15],d15
.L748:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1287      BlkHdr_pst->Preamble_au8[1] = PageBuf_pcu8[1];
	ld.bu	d15,[a5]1
.L749:
	st.b	[a10]1,d15
.L750:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1288      BlkHdr_pst->Preamble_au8[2] = PageBuf_pcu8[2];
	ld.bu	d15,[a5]2
.L751:
	st.b	[a10]2,d15
.L404:
	ld.bu	d0,[a10]2
.L752:
	mov	d15,#150
.L753:
	jne	d15,d0,.L115
.L754:
	ld.bu	d0,[a10]1
.L755:
	mov	d15,#60
.L756:
	jne	d15,d0,.L116
.L757:
	ld.bu	d0,[a10]
.L758:
	mov	d15,#165
.L759:
	jne	d15,d0,.L117
.L760:
	movh.a	a15,#@his(_999006_xLoopReduction_u8)
	lea	a15,[a15]@los(_999006_xLoopReduction_u8)
.L761:
	mov	d15,#8
.L762:
	st.b	[a15],d15
.L763:
	lea	a4,[a10]0
.L764:
	call	Fee_LLCopyPageBuff2HeaderMid
.L765:
	ld.bu	d15,[a10]3
.L766:
	jnz.t	d15:7,.L118
.L767:
	ld.a	a15,[a13]
.L768:
	addsc.a	a4,a15,d12,#3
.L769:
	mov	d4,#8
.L770:
	mov.u	d5,#51966
.L771:
	mov	d6,#0
	call	Crc_CalculateCRC16
.L555:
	ld.hu	d15,[a10]8
.L772:
	jne	d15,d2,.L119
.L773:
	lea	a4,[a10]0
.L774:
	ld.a	a15,[a13]
.L775:
	addsc.a	a5,a15,d12,#3
	call	Fee_LLCopyPageBuff2HeaderEnd
.L556:
	ld.w	d15,[a12]20
.L776:
	sh	d12,#3
.L552:
	add	d15,d12
.L777:
	ld.a	a15,[a10]20
.L557:
	st.w	[a15],d15
.L778:
	ld.hu	d15,[a10]4
.L779:
	st.h	[a15]12,d15
.L780:
	ld.bu	d15,[a10]3
.L781:
	st.b	[a15]14,d15
.L782:
	ld.hu	d15,[a10]6
.L783:
	st.h	[a15]10,d15
.L784:
	ld.hu	d15,[a10]8
.L785:
	st.h	[a15]8,d15
.L786:
	ld.w	d15,[a10]12
.L787:
	st.w	[a15]4,d15
.L558:
	jne	d9,#1,.L120
.L559:
	ld.hu	d4,[a15]12
.L788:
	ld.w	d5,[a15]
	call	Fee_LLUpdateAddressInCache
.L120:
	mov	d11,#1
.L789:
	j	.L121
.L119:
.L118:
	j	.L122
.L117:
.L116:
.L115:
	jne	d8,#1,.L123
.L561:
	j	.L124
.L123:
.L122:
	add	d12,#1
.L560:
	extr.u	d12,d12,#0,#16
.L113:
	jlt.u	d12,d13,.L114
.L124:
.L121:
	jeq	d11,#1,.L125
.L562:
	jne	d8,#0,.L126
.L563:
	ld.w	d15,[a12]20
	addi	d15,d15,#1024
.L790:
	ld.w	d0,[a12]
.L791:
	sub	d15,d0
.L792:
	movh.a	a15,#@his(_999006_xLoopReduction_u8)
	lea	a15,[a15]@los(_999006_xLoopReduction_u8)
	ld.bu	d0,[a15]
.L793:
	sub	d15,d0
.L794:
	extr.u	d4,d15,#0,#16
.L795:
	mov	d5,#1
	mov.aa	a4,a12
	call	Fee_IncAddressInsideSector
.L796:
	mov	d15,#0
.L797:
	st.w	[a12]92,d15
.L798:
	j	.L127
.L126:
	mov	d11,#3
.L127:
.L125:
	j	.L128
.L79:
	mov	d11,#3
.L799:
	mov	d15,#0
.L800:
	st.w	[a15],d15
.L801:
	j	.L129
.L129:
.L128:
.L104:
.L99:
.L98:
.L90:
.L84:
	jne	d11,#0,.L130
.L802:
	movh.a	a15,#@his(Fee_stMain)
	lea	a15,[a15]@los(Fee_stMain)
	ld.w	d15,[a15]
.L803:
	jeq	d15,#0,.L73
.L130:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1862  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1863      /* Check if the search was aborted or the sector is full */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1864      if (xRetVal != FEE_ORDER_PENDING_E)
	jeq	d11,#0,.L131
.L804:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1865      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1866          /* No valid block header found yet, reset the state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1867          Fee_RdWrOrder_st.Fee_LLRdState_en = FEE_LL_INIT_READ_E;
	mov	d15,#0
.L805:
	ld.a	a15,[a10]16
	st.w	[a15],d15
.L806:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1868  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1869          /* Reset the loop reduction counter */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1870          xLoopReduction_u8 = 0u;
	movh.a	a15,#@his(_999006_xLoopReduction_u8)
	lea	a15,[a15]@los(_999006_xLoopReduction_u8)
.L807:
	mov	d15,#0
.L808:
	st.b	[a15],d15
.L809:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1871  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1872          /* Reset retry counter */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1873          xCntRetry_u8 = (uint8)FEE_MAX_RD_WR_COMP_RETRIES;
	movh.a	a15,#@his(_999005_xCntRetry_u8)
	lea	a15,[a15]@los(_999005_xCntRetry_u8)
.L810:
	mov	d15,#3
.L811:
	st.b	[a15],d15
.L131:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1874      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1875  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1876      return(xRetVal);
	mov	d2,d11
.L564:
	j	.L132

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1877  }
.L132:
	ret
.L377:
	
__Fee_LLSearchNextBlkHeader_function_end:
	.size	Fee_LLSearchNextBlkHeader,__Fee_LLSearchNextBlkHeader_function_end-Fee_LLSearchNextBlkHeader
.L300:
	; End of function
	
	.sdecl	'.text.rba_FeeFs1_LlSearchBlk.Fee_LLGetSecStartAddress',code,cluster('Fee_LLGetSecStartAddress')
	.sect	'.text.rba_FeeFs1_LlSearchBlk.Fee_LLGetSecStartAddress'
	.align	2
	
	.global	Fee_LLGetSecStartAddress

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1878  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1879  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1880  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1881   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1882   * Fee_LLGetSecStartAddress(): Return sector start address
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1883   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1884   * This function returns the start address of the requested sector.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1885   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1886   * Hint: It might be necessary to return the address of the first
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1887   *       block header within the requested sector in the future.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1888   *       In this case this address might be read out of a new sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1889   *       header.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1890   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1891   * \param    xPhySectorIdx_u8:  Active sector index
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1892   * \return
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1893   * \retval   0...4294967295:    Start address of the first page
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1894   *                              of the active sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1895   * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1896   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1897   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1898   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1899  FUNC(uint32, FEE_CODE) Fee_LLGetSecStartAddress(VAR(uint8, AUTOMATIC) xPhySectorIdx_u8)
; Function Fee_LLGetSecStartAddress
.L265:
Fee_LLGetSecStartAddress:	.type	func

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1900  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1901      /* Access flash property table */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1902      return(Fee_FlashProp_st[xPhySectorIdx_u8].Fee_LogStartAddress_u32);
	sha	d4,#4
.L565:
	movh.a	a15,#@his(Fee_FlashProp_st)
	lea	a15,[a15]@los(Fee_FlashProp_st)
.L989:
	addsc.a	a15,a15,d4,#0
.L990:
	ld.w	d2,[a15]8
.L991:
	j	.L133

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1903  }
.L133:
	ret
.L419:
	
__Fee_LLGetSecStartAddress_function_end:
	.size	Fee_LLGetSecStartAddress,__Fee_LLGetSecStartAddress_function_end-Fee_LLGetSecStartAddress
.L310:
	; End of function
	
	.sdecl	'.text.rba_FeeFs1_LlSearchBlk.Fee_LLGetSecEndAddress',code,cluster('Fee_LLGetSecEndAddress')
	.sect	'.text.rba_FeeFs1_LlSearchBlk.Fee_LLGetSecEndAddress'
	.align	2
	
	.global	Fee_LLGetSecEndAddress

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1904  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1905  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1906  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1907   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1908   * Fee_LLGetSecEndAddress(): Return sector end address
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1909   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1910   * This function returns the end address of the requested sector.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1911   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1912   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1913   * \param    xPhySectorIdx_u8:  Active sector index
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1914   * \return
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1915   * \retval   0...4294967295:    End address of the sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1916   * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1917   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1918   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1919   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1920  FUNC(uint32, FEE_CODE) Fee_LLGetSecEndAddress(VAR(uint8, AUTOMATIC) xPhySectorIdx_u8)
; Function Fee_LLGetSecEndAddress
.L267:
Fee_LLGetSecEndAddress:	.type	func

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1921  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1922      /* Access flash property table */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1923      return(Fee_FlashProp_st[xPhySectorIdx_u8].Fee_LogEndAddress_u32);
	sha	d4,#4
.L566:
	movh.a	a15,#@his(Fee_FlashProp_st)
	lea	a15,[a15]@los(Fee_FlashProp_st)
.L996:
	addsc.a	a15,a15,d4,#0
.L997:
	ld.w	d2,[a15]12
.L998:
	j	.L134

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1924  }
.L134:
	ret
.L421:
	
__Fee_LLGetSecEndAddress_function_end:
	.size	Fee_LLGetSecEndAddress,__Fee_LLGetSecEndAddress_function_end-Fee_LLGetSecEndAddress
.L315:
	; End of function
	
	.sdecl	'.text.rba_FeeFs1_LlSearchBlk.Fee_LLGetAddressFromCache',code,cluster('Fee_LLGetAddressFromCache')
	.sect	'.text.rba_FeeFs1_LlSearchBlk.Fee_LLGetAddressFromCache'
	.align	2
	
	.global	Fee_LLGetAddressFromCache

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1925  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1926  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1927  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1928   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1929   * Fee_LLGetAddressFromCache(): Find address in flash
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1930   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1931   * This functions returns the address of the corresponding block
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1932   * header.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1933   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1934   * \param    FeeIdx_u16:    Fee index (block persistent ID)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1935   * \return
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1936   * \retval   addr_u32:      Address in flash if persistent ID is
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1937   *                          configured
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1938   * \retval   FEE_CACHE_INIT_VALUE: block is not configured
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1939   * \retval   FEE_CACHE_TMP_INVALID_VALUE: block is configured but
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1940   *                          address within cache is not valid
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1941   * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1942   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1943   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1944   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1945  FUNC(uint32, FEE_CODE) Fee_LLGetAddressFromCache(VAR(uint16, AUTOMATIC) FeeIdx_u16)
; Function Fee_LLGetAddressFromCache
.L269:
Fee_LLGetAddressFromCache:	.type	func
	sub.a	a10,#8
.L567:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1946  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1947      VAR(uint16, AUTOMATIC) xCacheIdx_u16;                   /* Cache index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1948      VAR(uint32, AUTOMATIC) addr_u32 = FEE_CACHE_INIT_VALUE; /* Return value */
	mov.u	d15,#45054
.L569:
	addih	d15,d15,#51966
.L1089:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1949  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1950      /* Check if the index can be found */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1951      if(Fee_SrvBinarySearchInBlockProp(FeeIdx_u16, &xCacheIdx_u16) != FALSE)
	lea	a4,[a10]0
	call	Fee_SrvBinarySearchInBlockProp
.L568:
	jeq	d2,#0,.L135
.L1090:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1952      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1953          /* Set return value */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1954          addr_u32 = Fee_Cache_au32[xCacheIdx_u16];
	ld.hu	d15,[a10]0
.L570:
	movh.a	a15,#@his(Fee_Cache_au32)
	lea	a15,[a15]@los(Fee_Cache_au32)
.L1091:
	addsc.a	a15,a15,d15,#2
	ld.w	d15,[a15]
.L135:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1955      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1956  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1957      /* Check if the cache entry is within any of the configured sectors */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1958      if(Fee_LLCheckAddressInCache(addr_u32) == FALSE)
	mov	d4,d15
.L571:
	call	Fee_LLCheckAddressInCache
.L572:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1959      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1960          /* Return the temp init value */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1961          addr_u32 = FEE_CACHE_TMP_INVALID_VALUE;
	mov.u	d0,#51966
	addih	d0,d0,#45054
	sel	d15,d2,d15,d0
.L136:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1962      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1963  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1964      /* Return the block address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1965      return (addr_u32);
	mov	d2,d15
.L573:
	j	.L137

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1966  }
.L137:
	ret
.L437:
	
__Fee_LLGetAddressFromCache_function_end:
	.size	Fee_LLGetAddressFromCache,__Fee_LLGetAddressFromCache_function_end-Fee_LLGetAddressFromCache
.L335:
	; End of function
	
	.sdecl	'.text.rba_FeeFs1_LlSearchBlk.Fee_LLCheckAddressInCache',code,cluster('Fee_LLCheckAddressInCache')
	.sect	'.text.rba_FeeFs1_LlSearchBlk.Fee_LLCheckAddressInCache'
	.align	2
	
	.global	Fee_LLCheckAddressInCache

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1967  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1968  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1969  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1970   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1971   * Fee_LLCheckHdAddressInCache(): Validate the cache address
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1972   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1973   * This functions checks if a header address is within any of the
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1974   * configured flash sectors.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1975   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1976   * \param    AdrInSector_u32:   Address to check
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1977   * \return
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1978   * \retval   TRUE:              Address is valid
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1979   * \retval   FALSE:             Address is invalid
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1980   * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1981   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1982   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1983   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1984  /* MR12 RULE 1505 VIOLATION: This function is used within the same file and has no external linkage */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1985  FUNC(boolean, FEE_CODE) Fee_LLCheckAddressInCache(VAR(uint32, AUTOMATIC) AdrInSector_u32)
; Function Fee_LLCheckAddressInCache
.L271:
Fee_LLCheckAddressInCache:	.type	func
	mov	d10,d4
.L574:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1986  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1987      VAR(boolean, AUTOMATIC) xRetVal_b = FALSE;      /* Default return value */
	mov	d9,#0
.L575:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1988      VAR(uint8, AUTOMATIC)   xPhySecIdx_u8;          /* Loop counter */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1989      VAR(uint8, AUTOMATIC)   xLogSecIdx_u8;          /* Logical sector index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1990  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1991      /* Check for the cache init value or the temp init value first */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1992      if((AdrInSector_u32 != FEE_CACHE_INIT_VALUE) &&
	mov.u	d15,#45054
	addih	d15,d15,#51966
.L1096:
	jeq	d15,d10,.L138
.L1097:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1993         (AdrInSector_u32 != FEE_CACHE_TMP_INVALID_VALUE))
	mov.u	d15,#51966
	addih	d15,d15,#45054
.L1098:
	jeq	d15,d10,.L139
.L1099:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1994      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1995          /* Loop over all configured flash banks */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1996          for(xPhySecIdx_u8=0; xPhySecIdx_u8<FEE_NUM_FLASH_BANKS; xPhySecIdx_u8++)
	mov	d15,#0
.L576:
	j	.L140
.L141:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1997          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1998              uint32 secStartAddr_u32 , secEndAddr_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  1999              /* Check if the address is within one of the configured sectors.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2000               * Low check:   logical sector start address
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2001               * Upper check: logical sector end address - block header size */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2002  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2003              secStartAddr_u32 = Fee_LLGetSecStartAddress(xPhySecIdx_u8);
	mov	d4,d15
.L578:
	call	Fee_LLGetSecStartAddress
.L579:
	mov	d8,d2
.L581:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2004              secEndAddr_u32   = Fee_LLGetSecEndAddress(xPhySecIdx_u8);
	mov	d4,d15
.L582:
	call	Fee_LLGetSecEndAddress
.L580:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2005  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2006              /* MR12 RULE 13.5 VIOLATION: Both upper and lower boundary checks are required. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2007              if((secStartAddr_u32 <= AdrInSector_u32) &&
	jlt.u	d10,d8,.L142
.L1100:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2008                 (((secEndAddr_u32 + 1uL) - (FEE_PAGES_USED_BY_BLK_HEADER * FEE_PAGE_LEN)) >= AdrInSector_u32))
	add	d0,d2,#-15
.L1101:
	jlt.u	d0,d10,.L143
.L1102:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2009              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2010                      /* Get the respective logical sector index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2011                      xLogSecIdx_u8 = Fee_idxLLSectorOrder_au8[xPhySecIdx_u8];
	movh.a	a15,#@his(Fee_idxLLSectorOrder_au8)
	lea	a15,[a15]@los(Fee_idxLLSectorOrder_au8)
.L1103:
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]
.L577:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2012  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2013                      /* Cross check the sector state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2014                      if((Fee_LLSectorOrder_st[xLogSecIdx_u8].SecState_en == FEE_SECTOR_USED_E) ||
	mul	d15,d15,#12
.L583:
	movh.a	a15,#@his(Fee_LLSectorOrder_st)
	lea	a15,[a15]@los(Fee_LLSectorOrder_st)
.L1104:
	addsc.a	a15,a15,d15,#0
.L1105:
	ld.w	d15,[a15]4
.L1106:
	jeq	d15,#2,.L144
.L1107:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2015                         (Fee_LLSectorOrder_st[xLogSecIdx_u8].SecState_en == FEE_SECTOR_FULL_E))
	jne	d15,#3,.L145
.L144:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2016                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2017                          /* Address successfully verified */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2018                          xRetVal_b = TRUE;
	mov	d9,#1
.L145:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2019                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2020  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2021                      /* Exit loop */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2022                      break;
	j	.L146
.L143:
.L142:
	add	d15,#1
.L584:
	extr.u	d15,d15,#0,#8
.L140:
	movh.a	a15,#@his(Fee_NumFlashBanksUsed_u8)
	lea	a15,[a15]@los(Fee_NumFlashBanksUsed_u8)
	ld.bu	d0,[a15]
.L1108:
	jlt.u	d15,d0,.L141

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2023                 }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2024          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2025      }
.L146:
	j	.L147
.L139:
.L138:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2026      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2027      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2028          /* Defined values are allowed */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2029          xRetVal_b = TRUE;
	mov	d9,#1
.L147:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2030      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2031  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2032      /* Function return */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2033      return (xRetVal_b);
	mov	d2,d9
.L585:
	j	.L148

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2034  }
.L148:
	ret
.L441:
	
__Fee_LLCheckAddressInCache_function_end:
	.size	Fee_LLCheckAddressInCache,__Fee_LLCheckAddressInCache_function_end-Fee_LLCheckAddressInCache
.L340:
	; End of function
	
	.sdecl	'.text.rba_FeeFs1_LlSearchBlk.Fee_LLUpdateCacheStForSect',code,cluster('Fee_LLUpdateCacheStForSect')
	.sect	'.text.rba_FeeFs1_LlSearchBlk.Fee_LLUpdateCacheStForSect'
	.align	2
	
	.global	Fee_LLUpdateCacheStForSect

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2035  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2036  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2037  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2038   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2039   * Fee_LLUpdateCacheStForSect(): Indicate a physical sector as
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2040   *                                checked (cache update complete)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2041   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2042   * This function updates the respective physical sector as completed
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2043   * with respect to the cache entries.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2044   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2045   * \param    PhySecIdx_u8:  Physical sector index
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2046   * \return
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2047   * \retval   none
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2048   * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2049   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2050   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2051   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2052  FUNC(void, FEE_CODE) Fee_LLUpdateCacheStForSect(VAR(uint8, AUTOMATIC) PhySecIdx_u8)
; Function Fee_LLUpdateCacheStForSect
.L273:
Fee_LLUpdateCacheStForSect:	.type	func

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2053  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2054      /* Update the array indicator for a completed cache update for one sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2055      Fee_CacheUpdCompForSect_au8[PhySecIdx_u8] = FEE_CACHE_UPD_COMP_FOR_SECT;
	movh.a	a15,#@his(Fee_CacheUpdCompForSect_au8)
	lea	a15,[a15]@los(Fee_CacheUpdCompForSect_au8)
.L1121:
	addsc.a	a15,a15,d4,#0
.L1122:
	mov	d15,#1
.L1123:
	st.b	[a15],d15
.L1124:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2056  }
	ret
.L452:
	
__Fee_LLUpdateCacheStForSect_function_end:
	.size	Fee_LLUpdateCacheStForSect,__Fee_LLUpdateCacheStForSect_function_end-Fee_LLUpdateCacheStForSect
.L350:
	; End of function
	
	.sdecl	'.text.rba_FeeFs1_LlSearchBlk.Fee_LLEraseCacheStForSect',code,cluster('Fee_LLEraseCacheStForSect')
	.sect	'.text.rba_FeeFs1_LlSearchBlk.Fee_LLEraseCacheStForSect'
	.align	2
	
	.global	Fee_LLEraseCacheStForSect

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2057  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2058  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2059   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2060   * Fee_LLEraseCacheStForSect():  Erase checked indication for the
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2061   *                               cache status
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2062   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2063   * This function erases the checked indication of the respective
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2064   * physical sector.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2065   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2066   * \param    PhySecIdx_u8:  Physical sector index
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2067   * \return
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2068   * \retval   none
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2069   * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2070   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2071   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2072   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2073  FUNC(void, FEE_CODE) Fee_LLEraseCacheStForSect(VAR(uint8, AUTOMATIC) PhySecIdx_u8)
; Function Fee_LLEraseCacheStForSect
.L275:
Fee_LLEraseCacheStForSect:	.type	func

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2074  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2075      /* Update the array indicator for a completed cache update for one sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2076      Fee_CacheUpdCompForSect_au8[PhySecIdx_u8] = FEE_CACHE_UPD_NOT_COMP_FOR_SECT;
	movh.a	a15,#@his(Fee_CacheUpdCompForSect_au8)
	lea	a15,[a15]@los(Fee_CacheUpdCompForSect_au8)
.L1129:
	addsc.a	a15,a15,d4,#0
.L1130:
	mov	d15,#0
.L1131:
	st.b	[a15],d15
.L1132:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2077  }
	ret
.L454:
	
__Fee_LLEraseCacheStForSect_function_end:
	.size	Fee_LLEraseCacheStForSect,__Fee_LLEraseCacheStForSect_function_end-Fee_LLEraseCacheStForSect
.L355:
	; End of function
	
	.sdecl	'.text.rba_FeeFs1_LlSearchBlk.Fee_LLGetCacheUpdateStForAllSect',code,cluster('Fee_LLGetCacheUpdateStForAllSect')
	.sect	'.text.rba_FeeFs1_LlSearchBlk.Fee_LLGetCacheUpdateStForAllSect'
	.align	2
	
	.global	Fee_LLGetCacheUpdateStForAllSect

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2078  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2079  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2080  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2081   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2082   * Fee_LLGetCacheUpdateStForAllSect(): Get the status summary of the
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2083   *                                     cache updates of all sectors
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2084   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2085   * This function returns whether a all relevant sectors have been
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2086   * used for updating the cache or not. Currently relevant are only
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2087   * USED or FULL sectors.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2088   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2089   * \param    none
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2090   * \return   Cache update status
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2091   * \retval   FEE_CACHE_UPD_COMP_FOR_ALL_SECT: All sectors have been
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2092   *                                            checked
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2093   * \retval   FEE_CACHE_UPD_NOT_COMP_FOR_SECT: At least one sector was
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2094   *                                            not checked
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2095   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2096   * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2097   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2098   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2099   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2100  FUNC(uint8, FEE_CODE) Fee_LLGetCacheUpdateStForAllSect(void)
; Function Fee_LLGetCacheUpdateStForAllSect
.L277:
Fee_LLGetCacheUpdateStForAllSect:	.type	func

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2101  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2102      VAR(uint8, AUTOMATIC)  xFuncRet_u8 = FEE_CACHE_UPD_COMP_FOR_ALL_SECT;
	mov	d8,#2
.L586:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2103      VAR(uint8, AUTOMATIC)  xLogSecIdx_u8;               /* Logical sector index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2104      VAR(uint8, AUTOMATIC)  xPhySecIdx_u8;               /* Physical sector index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2105  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2106      /* Loop over all sectors */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2107      for(xPhySecIdx_u8=0; xPhySecIdx_u8<FEE_NUM_FLASH_BANKS; xPhySecIdx_u8++)
	mov	d9,#0
.L587:
	j	.L149
.L150:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2108      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2109          /* Get the corresponding logical sector index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2110          xLogSecIdx_u8 = Fee_idxLLSectorOrder_au8[xPhySecIdx_u8];
	movh.a	a15,#@his(Fee_idxLLSectorOrder_au8)
	lea	a15,[a15]@los(Fee_idxLLSectorOrder_au8)
.L1143:
	addsc.a	a15,a15,d9,#0
	ld.bu	d15,[a15]
.L589:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2111  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2112          /* Check if all relevant sectors have been checked so far */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2113          /* MR12 RULE 13.5 VIOLATION: Checking state of cache for the sector required only for sectors that are in USED or FULL state. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2114          if(((Fee_LLSectorOrder_st[xLogSecIdx_u8].SecState_en == FEE_SECTOR_USED_E) ||
	mul	d15,d15,#12
.L590:
	movh.a	a15,#@his(Fee_LLSectorOrder_st)
	lea	a15,[a15]@los(Fee_LLSectorOrder_st)
.L1144:
	addsc.a	a15,a15,d15,#0
.L1145:
	ld.w	d15,[a15]4
.L1146:
	jeq	d15,#2,.L151
.L1147:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2115              (Fee_LLSectorOrder_st[xLogSecIdx_u8].SecState_en == FEE_SECTOR_FULL_E)) &&
	jne	d15,#3,.L152
.L151:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2116             (Fee_LLGetCacheUpdateStForSect(xPhySecIdx_u8) != FEE_CACHE_UPD_COMP_FOR_SECT))
	mov	d4,d9
.L591:
	call	Fee_LLGetCacheUpdateStForSect
.L592:
	eq	d15,d2,#1
.L1148:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2117          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2118              xFuncRet_u8 = FEE_CACHE_UPD_NOT_COMP_FOR_SECT;
	cmovn	d8,d15,#0
.L153:
.L152:
	add	d9,#1
.L588:
	extr.u	d9,d9,#0,#8
.L149:
	movh.a	a15,#@his(Fee_NumFlashBanksUsed_u8)
	lea	a15,[a15]@los(Fee_NumFlashBanksUsed_u8)
	ld.bu	d15,[a15]
.L1149:
	jlt.u	d9,d15,.L150
.L1150:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2119          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2120      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2121  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2122      return xFuncRet_u8;
	mov	d2,d8
.L593:
	j	.L154

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2123  }
.L154:
	ret
.L458:
	
__Fee_LLGetCacheUpdateStForAllSect_function_end:
	.size	Fee_LLGetCacheUpdateStForAllSect,__Fee_LLGetCacheUpdateStForAllSect_function_end-Fee_LLGetCacheUpdateStForAllSect
.L365:
	; End of function
	
	.sdecl	'.text.rba_FeeFs1_LlSearchBlk.Fee_LLUpdateAddressInCache',code,cluster('Fee_LLUpdateAddressInCache')
	.sect	'.text.rba_FeeFs1_LlSearchBlk.Fee_LLUpdateAddressInCache'
	.align	2
	
	.global	Fee_LLUpdateAddressInCache

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2124  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2125  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2126  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2127   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2128   * Fee_LLUpdateAddressInCache(): Update the address within the cache
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2129   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2130   * This functions updates the address of the corresponding block
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2131   * in the cache.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2132   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2133   * \param    FeeIdx_u16:    Fee index (block persistent ID)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2134   * \param    Addr_u32:      Address in flash
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2135   * \return
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2136   * \retval   none
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2137   * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2138   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2139   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2140   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2141  FUNC(void, FEE_CODE) Fee_LLUpdateAddressInCache(VAR(uint16, AUTOMATIC) FeeIdx_u16,
; Function Fee_LLUpdateAddressInCache
.L279:
Fee_LLUpdateAddressInCache:	.type	func
	sub.a	a10,#8
.L594:
	mov	d8,d5
.L596:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2142                                                  VAR(uint32, AUTOMATIC) Addr_u32)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2143  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2144      VAR(uint16, AUTOMATIC) xCacheIdx_u16;   /* Cache index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2145  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2146      /* Check if the index can be found */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2147      if(Fee_SrvBinarySearchInBlockProp(FeeIdx_u16, &xCacheIdx_u16) != FALSE)
	lea	a4,[a10]0
	call	Fee_SrvBinarySearchInBlockProp
.L595:
	jeq	d2,#0,.L155
.L1113:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2148      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2149          /* Update the address within the cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2150          Fee_Cache_au32[xCacheIdx_u16] = Addr_u32;
	ld.hu	d15,[a10]0
.L1114:
	movh.a	a15,#@his(Fee_Cache_au32)
	lea	a15,[a15]@los(Fee_Cache_au32)
.L1115:
	addsc.a	a15,a15,d15,#2
.L1116:
	st.w	[a15],d8
.L155:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2151      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2152  }
	ret
.L448:
	
__Fee_LLUpdateAddressInCache_function_end:
	.size	Fee_LLUpdateAddressInCache,__Fee_LLUpdateAddressInCache_function_end-Fee_LLUpdateAddressInCache
.L345:
	; End of function
	
	.sdecl	'.text.rba_FeeFs1_LlSearchBlk.Fee_LLGetCacheUpdateStForSect',code,cluster('Fee_LLGetCacheUpdateStForSect')
	.sect	'.text.rba_FeeFs1_LlSearchBlk.Fee_LLGetCacheUpdateStForSect'
	.align	2
	
	.global	Fee_LLGetCacheUpdateStForSect

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2153  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2154  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2155  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2156   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2157   * Fee_LLGetCacheUpdateStForSect(): Get the status of the cache update
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2158   *                                  of the respective sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2159   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2160   * This function returns whether a complete search through the
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2161   * respective sector in combination with a cache update has already
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2162   * been performed or not.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2163   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2164   * \param    PhySecIdx_u8:  Physical sector index
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2165   * \return   Cache update status for the physical sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2166   * \retval   FEE_CACHE_UPD_COMP_FOR_SECT:     The respective sector was
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2167   *                                            checked completely
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2168   * \retval   FEE_CACHE_UPD_NOT_COMP_FOR_SECT: The respective sector was
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2169   *                                            not completely checked
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2170   * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2171   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2172   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2173   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2174  /* MR12 RULE 1505 VIOLATION: This function is used within the same file and has no external linkage */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2175  FUNC(uint8, FEE_CODE) Fee_LLGetCacheUpdateStForSect(VAR(uint8, AUTOMATIC) PhySecIdx_u8)
; Function Fee_LLGetCacheUpdateStForSect
.L281:
Fee_LLGetCacheUpdateStForSect:	.type	func

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2176  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2177      /* Return the status of the physical sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2178      return Fee_CacheUpdCompForSect_au8[PhySecIdx_u8];
	movh.a	a15,#@his(Fee_CacheUpdCompForSect_au8)
	lea	a15,[a15]@los(Fee_CacheUpdCompForSect_au8)
.L1137:
	addsc.a	a15,a15,d4,#0
	ld.bu	d2,[a15]
.L1138:
	j	.L156

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2179  }
.L156:
	ret
.L456:
	
__Fee_LLGetCacheUpdateStForSect_function_end:
	.size	Fee_LLGetCacheUpdateStForSect,__Fee_LLGetCacheUpdateStForSect_function_end-Fee_LLGetCacheUpdateStForSect
.L360:
	; End of function
	
	.sdecl	'.text.rba_FeeFs1_LlSearchBlk.Fee_BuildUpCache',code,cluster('Fee_BuildUpCache')
	.sect	'.text.rba_FeeFs1_LlSearchBlk.Fee_BuildUpCache'
	.align	2
	
	.global	Fee_BuildUpCache

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2180  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2181  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2182  /* Macro implementation for an invalidation of the cache can be found in Fee_Prv.h:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2183   * #define Fee_LLInvalidateAddressInCache(FEEIDX)   Fee_LLUpdateAddressInCache(FEEIDX, FEE_CACHE_INIT_VALUE) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2184  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2185  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2186  #if(FEE_FAST_CACHE_INIT_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2187  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2188   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2189   * Fee_BuildUpCache(): Build up the cache for the passed address area
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2190   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2191   * This function builds up the cache for the address area passed
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2192   * by the user. The block checksum can be regarded if necessary.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2193   * The function can execute one sector without returning in case
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2194   * this is necessary (e.g. during the ECU init).
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2195   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2196   * \param    StartAdr_u32:      Start address for the search
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2197   * \param    EndAdr_u32:        End address for the search
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2198   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2199   * \return
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2200   * \retval   FEE_ORDER_PENDING_E:   Order is pending
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2201   * \retval   FEE_ABORTED_E:         Order was aborted
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2202   * \retval   FEE_SECTORFULL_E:      The end address of the sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2203   *                                  was reached
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2204   * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2205   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2206   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2207   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2208  /* MR12 RULE 1505 VIOLATION: This function is used within the same file and has no external linkage */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2209  FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_BuildUpCache(VAR(uint32, AUTOMATIC) StartAdr_u32,
; Function Fee_BuildUpCache
.L283:
Fee_BuildUpCache:	.type	func
	sub.a	a10,#56
.L597:
	st.w	[a10]48,d4
.L598:
	mov	d11,d5
.L599:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2210                                                    VAR(uint32, AUTOMATIC) EndAdr_u32)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2211  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2212      uint8 xLogSecIdx_u8;                        /* Index of logical sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2213      uint8 xPhySecIdx_u8;                        /* Index of physical sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2214      uint16 xCalcCrc_u16;                        /* Header checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2215      Fee_BlkHeader_tst xCurrBlkHeader_st;        /* Block header structure */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2216      uint32 xRdAdr_u32;                          /* Address for reading */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2217      uint32 xRdAdrEnd_u32;                       /* End address for reading */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2218      uint16 xBlockPropIdx_u16;                   /* Block index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2219      uint16 xCacheIdx_u16 = 0;                       /* Cache index */
	mov	d15,#0
.L1155:
	st.h	[a10]24,d15
.L1156:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2220      uint32 xAdrBlkHeaderTmp_u32;                /* Temporary block header address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2221      uint32 xDataBuf_au32[(FEE_PAGES_USED_BY_BLK_HEADER*FEE_PAGE_LEN)/4u];    /* Data buffer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2222      Fee_stRetVal_ten xRetVal = FEE_ORDER_PENDING_E;  /* Function return */
	mov	d8,#0
.L600:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2223      #if !( defined(RBA_FLSRH850P1xC_FLASH) || defined(RBA_FLSV850R1x_FLASH) || defined(RBA_FLSRH850xx_FLASH)) /* Local varaibles are used to save computation time. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2224      uint8 xActivateLastPgmSearch_u8 = 0;            /* Flag to indicate if searching of last programmed page must be done for the sector or not. */
	mov	d9,#0
.L601:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2225      uint32 xLastProgrammedAddress_u32 = FEE_NULL;     /* Local variable to store the address of the last programmeed page. */
	mov	d10,#0
.L602:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2226      uint32 xLastValidHeader_u32 = FEE_NULL;         /* Local variable to store the address of the last valid header. */
	mov	d12,#0
.L603:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2227      #else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2228      uint32 const xHdrCutOff_cu32 = (FEE_PAGE_LEN * (FEE_PAGES_USED_BY_BLK_HEADER - 1u)); /* Possible cutoff before write address where no valid header can be located */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2229      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2230  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2231      static uint32 xRdAdrContinue_u32;           /* Address to continue the reading */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2232      static uint32 xRdAdrEndContinue_u32;        /* End address for the search */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2233  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2234      /* Loop if polling mode is active and function state is pending */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2235      do
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2236      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2237          /* Switch over state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2238          switch (Fee_RdWrOrder_st.Fee_LLBuildUpCache_en)
	movh.a	a12,#@his(Fee_RdWrOrder_st)
	lea	a12,[a12]@los(Fee_RdWrOrder_st)
.L1157:
	lea	a13,[a12]108

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2239          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2240              /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2241              case FEE_LL_BLD_UP_CACHE_INIT_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2242              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2243                  /* Get the corresponding sector indexes */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2244                  xPhySecIdx_u8 = Fee_GetPhysSectorByAddress(StartAdr_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2245                  xLogSecIdx_u8 = Fee_idxLLSectorOrder_au8[xPhySecIdx_u8];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2246  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2247                  /* Loop over all configured blocks */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2248                  for(xBlockPropIdx_u16=0; xBlockPropIdx_u16<FEE_NUM_BLOCKS; xBlockPropIdx_u16++)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2249                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2250                      /* Check the address range */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2251                      if((Fee_Cache_au32[xBlockPropIdx_u16] >= Fee_FlashProp_st[xPhySecIdx_u8].Fee_LogStartAddress_u32) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2252                         (Fee_Cache_au32[xBlockPropIdx_u16] <= Fee_FlashProp_st[xPhySecIdx_u8].Fee_LogEndAddress_u32))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2253                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2254                          /* Clean all cache entries referring to this sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2255                          Fee_LLInvalidateAddressInCache(xBlockPropIdx_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2256                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2257                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2258  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2259                  /* Check if building up the cache is necessary */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2260                  if((Fee_LLSectorOrder_st[xLogSecIdx_u8].SecState_en == FEE_SECTOR_USED_E) ||
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2261                     (Fee_LLSectorOrder_st[xLogSecIdx_u8].SecState_en == FEE_SECTOR_FULL_E))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2262                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2263                      /* Read out the data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2264                      Fee_RdWrOrder_st.Fee_LLBuildUpCache_en = FEE_LL_BLD_UP_CACHE_READ_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2265  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2266                      /* Copy the user's start and end addresses */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2267                      xRdAdrContinue_u32      = StartAdr_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2268                      xRdAdrEnd_u32           = xRdAdrContinue_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2269                      xRdAdrEndContinue_u32   = xRdAdrEnd_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2270  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2271                      /* Update the cache status for the current sector  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2272                      Fee_LLUpdateCacheStForSect(xPhySecIdx_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2273  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2274                      #if (FEE_PRV_DEBUGGING != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2275                      Fee_Prv_stModuleTest_st.Fee_CacheCntSect_u8++;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2276                      Fee_Prv_stModuleTest_st.BuildUpCacheStart_u32 = Mcu_Rb_GetSysTimePart(TIM0);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2277                      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2278  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2279                      #if !( defined(RBA_FLSRH850P1xC_FLASH) || defined(RBA_FLSV850R1x_FLASH) || defined(RBA_FLSRH850xx_FLASH))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2280                      /* Initialise the flag and address variables. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2281                      xActivateLastPgmSearch_u8 = 0;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2282                      xLastProgrammedAddress_u32 = FEE_NULL;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2283                      xLastValidHeader_u32 = FEE_NULL;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2284  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2285                      /* Check for last programmed page only for most active sector i.e., sector state = FEE_SECTOR_USED_E. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2286                      if (Fee_LLSectorOrder_st[xLogSecIdx_u8].SecState_en == FEE_SECTOR_USED_E)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2287                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2288                          /* Set the flag to activate the check of last programmed page. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2289                          xActivateLastPgmSearch_u8 = 1;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2290                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2291                      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2292                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2293                          /* Identification of last programmed header and page is required only for the lastest valid sector i.e., sector with USED state.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2294                           * Do nothing for all other sectors. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2295                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2296                      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2297                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2298                  else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2299                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2300                      /* Set return value */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2301                      xRetVal = FEE_ABORTED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2302  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2303                      break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2304                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2305              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2306              /* No break to save time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2307  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2308              /* Read out data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2309              /* MR12 RULE 16.3 VIOLATION: Time critical position */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2310              case FEE_LL_BLD_UP_CACHE_READ_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2311              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2312                  /* Get the addresses for reading the data
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2313                   * (use locals for faster access) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2314                  xRdAdr_u32      = xRdAdrContinue_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2315                  xRdAdrEnd_u32   = xRdAdrEndContinue_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2316  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2317                  /* Check if the end address for the search is already reached
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2318                   * because of jumps after the checksum verification */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2319                  if(xRdAdr_u32 >= Fee_LLGetSecEndAddress(Fee_GetPhysSectorByAddress(xRdAdr_u32)))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2320                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2321                      /* Finish the order */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2322                      xRetVal = FEE_SECTORFULL_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2323  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2324                      break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2325                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2326  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2327                  /* Set the end address for the search depending on the mode
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2328                   * --> Use the fast mode during the init phase */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2329                  if(Fee_Prv_stInit_u8 != FEE_PRV_ST_INIT_DONE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2330                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2331                      #if (defined(RBA_FLSRH850P1xC_FLASH) || defined(RBA_FLSV850R1x_FLASH) || defined(RBA_FLSRH850xx_FLASH))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2332                      uint8 endAddrSector_u8 , wrAddrSector_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2333  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2334                      endAddrSector_u8 = Fee_GetPhysSectorByAddress(EndAdr_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2335                      wrAddrSector_u8  = Fee_GetPhysSectorByAddress(Fee_RdWrOrder_st.xWrAddress);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2336  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2337                      /* Check if the users end address exceeds the current write address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2338                      if((EndAdr_u32 >= Fee_RdWrOrder_st.xWrAddress) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2339                         (endAddrSector_u8 == wrAddrSector_u8))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2340                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2341                          if(Fee_RdWrOrder_st.xWrAddress <= (Fee_LLGetSecStartAddress(Fee_GetPhysSectorByAddress(Fee_RdWrOrder_st.xWrAddress)) + xHdrCutOff_cu32))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2342                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2343                              /*
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2344                               * Two cases are possible:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2345                               * 1. Only the USED marker is available but no data!
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2346                               * 2. Only a partial programmed header page is available
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2347                               * In both the cases it cannot be a valid block which shall be put into the cache.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2348                               */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2349                              xRetVal = FEE_SECTORFULL_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2350                              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2351                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2352                          else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2353                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2354                              /*
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2355                               * Write address before or equal to sector end - limit scan to write address
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2356                               * Even if the last page before the write address contains a valid preamble it cannot be a valid header.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2357                               * At the very last part before the write address (xHdrCutOff) there can be no valid header anymore.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2358                               * Do not check this in order to avoid reading of erased area (see below do while abort condition).
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2359                               */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2360                              xRdAdrEnd_u32 = (Fee_RdWrOrder_st.xWrAddress - xHdrCutOff_cu32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2361                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2362                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2363                      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2364                      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2365                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2366                          /* Take over the users end address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2367                          xRdAdrEnd_u32 = EndAdr_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2368                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2369                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2370                  else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2371                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2372                      /* Do the read out DataBuf size wise */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2373  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2374                      /* Check if an increase of the end address is necessary again */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2375                      if(xRdAdr_u32 == xRdAdrEnd_u32)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2376                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2377                          /* Reset the current loop end */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2378                          Fee_IncAddressInsideSector(&xRdAdrEnd_u32, FEE_LL_DATABUFFSIZE, TRUE);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2379  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2380                          /* Check if the user's end address is exceeded */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2381                          if(xRdAdrEnd_u32 > EndAdr_u32)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2382                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2383                              /* Restrict the end address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2384                              xRdAdrEnd_u32 = EndAdr_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2385                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2386                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2387                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2388  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2389                  /* Loop until the end address is reached */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2390                  do
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2391                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2392                      /* Read out the preamble and the block status directly */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2393                      /* MISRA RULE 11.3 VIOLATION: Cast is necessary and not critical */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2394                      (void)Fee_Fls_SyncRead(xRdAdr_u32, (uint8*)&xDataBuf_au32[0], (Fls_LengthType)4U);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2395  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2396  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2397                      /*
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2398                       * Header overview:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2399                       *  +----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2400                       *  |            Preamble            |Blk Status|       FeeIndex      |     Block length    |     Header CRC16    |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2401                       *  +----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2402                       *  Preamble   : 0xA53C96 fix pattern
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2403                       *  Blk Status : Contains information like security level, etc.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2404                       *  FeeIndex   : Block index
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2405                       *  Block length: Block length without the header length
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2406                       *  Header CRC16: CRC16 checksum over Preamble, Blk Status, Fee Index and Block length.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2407                       *                The start value is FEE_MARKER_PATTERN (0xCAFE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2408                       *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2409                       *  Hint: A block header will always start at the beginning of a page.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2410                       */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2411  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2412                      /* Compare the preamble of the block header byte - wise */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2413                      /* MR12 RULE 11.3 VIOLATION: Cast is necessary and not critical */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2414                      if ((((Fee_BlkHeader_tst*)(&xDataBuf_au32[0]))->Preamble_au8[2] == (uint8)FEE_BLK_HEADER_PREAMBEL_BYTE_2) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2415                          /* MR12 RULE 11.3 VIOLATION: Cast is necessary and not critical */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2416                          (((Fee_BlkHeader_tst*)(&xDataBuf_au32[0]))->Preamble_au8[1] == (uint8)FEE_BLK_HEADER_PREAMBEL_BYTE_1) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2417                          /* MR12 RULE 11.3 VIOLATION: Cast is necessary and not critical */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2418                          (((Fee_BlkHeader_tst*)(&xDataBuf_au32[0]))->Preamble_au8[0] == (uint8)FEE_BLK_HEADER_PREAMBEL_BYTE_0) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2419                          /* Fix for Defect 133411 Possible trap when data matches to preamble value */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2420                          (xRdAdr_u32 <= ((EndAdr_u32 + 1u) - (FEE_PAGES_USED_BY_BLK_HEADER * FEE_PAGE_LEN))))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2421                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2422  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2423                          /* Load the last programmed page for controllers other then R1x, P1x and RH850xx. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2424                          #if !( defined(RBA_FLSRH850P1xC_FLASH) || defined(RBA_FLSV850R1x_FLASH) || defined(RBA_FLSRH850xx_FLASH) )
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2425                          if (xActivateLastPgmSearch_u8 == 1)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2426                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2427                              xLastProgrammedAddress_u32 = xRdAdr_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2428                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2429                          else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2430                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2431                              /* Identification of last programmed header and page is required only for the lastest valid sector i.e., sector with USED state.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2432                               * Do nothing for all other sectors. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2433                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2434                          #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2435  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2436                          /* Save the start address for updating the cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2437                          xAdrBlkHeaderTmp_u32 = xRdAdr_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2438  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2439                          /* Read out the block index and the block length */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2440                          Fee_IncAddressInsideSector(&xRdAdr_u32 , 4u , FALSE);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2441  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2442                          /* MISRA RULE 11.3 VIOLATION: Cast is necessary and not critical */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2443                          (void)Fee_Fls_SyncRead(xRdAdr_u32, (uint8*)&xDataBuf_au32[1], (Fls_LengthType)4U);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2444  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2445  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2446                          /* Read out the header CRC and parts of the block CRC */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2447                          Fee_IncAddressInsideSector(&xRdAdr_u32 , 4u , FALSE);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2448  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2449                          /* MISRA RULE 11.3 VIOLATION: Cast is necessary and not critical */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2450                          (void)Fee_Fls_SyncRead(xRdAdr_u32, (uint8*)&xDataBuf_au32[2], (Fls_LengthType)4U);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2451  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2452                          /* Read BIT7 and check if the block shall be considered or not.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2453                          * If this bit is set the block was written in plant and must be ignored from application. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2454  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2455                          /* MR12 RULE 11.3 VIOLATION: Cast is necessary and not critical */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2456                          if((((Fee_BlkHeader_tst*)(&xDataBuf_au32[0]))->BlkStatus_u8 & FEE_MASK_BIT7) == 0u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2457                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2458                              /* Check the block header CRC */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2459                              /* MR12 RULE 11.3 VIOLATION: Cast is necessary and not critical */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2460                              xCalcCrc_u16 = Crc_CalculateCRC16((uint8*)&xDataBuf_au32[0],
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2461                                                                (uint32)(FEE_BLK_HEADER_SIZE - 6u),
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2462                                                                (uint16)FEE_MARKER_PATTERN,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2463                                                                FALSE);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2464  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2465                              /* Extract the header checksum out of the page buffer and copy it to the block structure */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2466                              /* MR12 RULE 11.3 VIOLATION: Cast is necessary and not critical */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2467                              Fee_LLCopyPageBuff2HeaderIdxAndCrc(&xCurrBlkHeader_st, (const uint8*) &xDataBuf_au32[0]);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2468  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2469                              /* Check the header consistency */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2470                              if (xCalcCrc_u16 == xCurrBlkHeader_st.HdrCrc16_u16)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2471                              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2472                                  /* Load the last valid header address (known or unknown block). */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2473                                  #if !( defined(RBA_FLSRH850P1xC_FLASH) || defined(RBA_FLSV850R1x_FLASH) || defined(RBA_FLSRH850xx_FLASH))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2474                                  if (xActivateLastPgmSearch_u8 == 1)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2475                                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2476                                      xLastValidHeader_u32 = xAdrBlkHeaderTmp_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2477                                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2478                                  else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2479                                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2480                                      /* Identification of last programmed header and page is required only for the lastest valid sector i.e., sector with USED state.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2481                                       * Do nothing for all sectors. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2482                                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2483                                  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2484  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2485                                  /* Check if the index can be found */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2486                                  if (Fee_SrvBinarySearchInBlockPropFast(xCurrBlkHeader_st.FeeIndex_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2487                                          &xCacheIdx_u16) != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2488                                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2489                                      /* Update the address within the cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2490                                      Fee_Cache_au32[xCacheIdx_u16] = xAdrBlkHeaderTmp_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2491                                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2492                              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2493                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2494                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2495                      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2496                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2497                          /* Load the last programmed page for controllers other then R1x, P1x and RH850xx. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2498                          #if !( defined(RBA_FLSRH850P1xC_FLASH) || defined(RBA_FLSV850R1x_FLASH) || defined(RBA_FLSRH850xx_FLASH) )
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2499                          if (xActivateLastPgmSearch_u8 == 1)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2500                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2501                              /* Direct read from memory is time consuming. Hence, reuse the first 4 bytes information that was already read earlier. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2502                              if (xDataBuf_au32[0] != FEE_ERASE_PATTERN_U32)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2503                              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2504                                  /* Copy the address to a local variable for faster execution. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2505                                  xLastProgrammedAddress_u32 = xRdAdr_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2506                              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2507                              else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2508                              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2509                                  /* Extract the next 4 bytes of the page. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2510  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2511                                  /* MISRA RULE 11.3 VIOLATION: Cast is necessary and not critical */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2512                                  (void)Fee_Fls_SyncRead(xRdAdr_u32 + 4, (uint8*)&xDataBuf_au32[1], (Fls_LengthType)4U);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2513  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2514                                  if (xDataBuf_au32[1] != FEE_ERASE_PATTERN_U32)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2515                                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2516                                      /* Copy the address to a local variable for faster execution. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2517                                      xLastProgrammedAddress_u32 = xRdAdr_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2518                                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2519                                  else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2520                                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2521                                      /* The page is blank. do nothing. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2522                                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2523                              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2524                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2525                          else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2526                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2527                              /* Identification of last programmed header and page is required only for the lastest valid sector i.e., sector with USED state.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2528                               * Do nothing for all sectors. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2529                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2530                          #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2531  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2532                          /* Just go on until the end address is reached,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2533                           * the next header can only start at the next page */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2534                          Fee_IncAddressInsideSector(&xRdAdr_u32 , FEE_PAGE_LEN , FALSE);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2535  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2536                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2537                  } while (xRdAdr_u32 < xRdAdrEnd_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2538  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2539  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2540  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2541                  #if !( defined(RBA_FLSRH850P1xC_FLASH) || defined(RBA_FLSV850R1x_FLASH) || defined(RBA_FLSRH850xx_FLASH) )
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2542                  if (xActivateLastPgmSearch_u8 == 1)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2543                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2544                      Fee_RdWrOrder_st.LastProgrammedAddress_u32 = xLastProgrammedAddress_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2545                      Fee_RdWrOrder_st.LastValidHdrAddress_u32 = xLastValidHeader_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2546                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2547                  else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2548                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2549                      /* Identification of last programmed header and page is required only for the lastest valid sector i.e., sector with USED state.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2550                       * Do nothing for all sectors. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2551                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2552                  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2553  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2554                  /* Save addresses for next call */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2555                  xRdAdrContinue_u32      = xRdAdr_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2556                  xRdAdrEndContinue_u32   = xRdAdrEnd_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2557  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2558                  /* Check if the end address for the search is already reached */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2559                  #if (defined(RBA_FLSRH850P1xC_FLASH) || defined(RBA_FLSV850R1x_FLASH) || defined(RBA_FLSRH850xx_FLASH))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2560                  if(xRdAdr_u32 >= xRdAdrEnd_u32)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2561                  #else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2562                  if(xRdAdrEnd_u32 >= EndAdr_u32)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2563                  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2564                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2565                      /* Finish the order */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2566                      xRetVal = FEE_SECTORFULL_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2567                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2568              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2569              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2570  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2571              /* These states should never be reached */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2572              default:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2573              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2574                  /* Set error state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2575                  xRetVal = FEE_ERROR_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2576              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2577              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2578          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2579      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2580      while((Fee_stMain == FEE_POLLING_MODE_E) && (xRetVal == FEE_ORDER_PENDING_E) && (xRdAdrContinue_u32 < xRdAdrEndContinue_u32));
.L157:
	ld.w	d0,[a13]
.L1158:
	mov	d15,#0
	jeq	d15,d0,.L158
.L1159:
	mov	d1,#1
	jeq	d1,d0,.L159
	j	.L160
.L158:
	ld.w	d4,[a10]48
.L604:
	call	Fee_GetPhysSectorByAddress
.L605:
	st.w	[a10]44,d2
.L606:
	movh.a	a2,#@his(Fee_idxLLSectorOrder_au8)
	lea	a2,[a2]@los(Fee_idxLLSectorOrder_au8)
.L1160:
	addsc.a	a2,a2,d2,#0
	ld.bu	d13,[a2]
.L607:
	mov	d14,#0
.L608:
	j	.L161
.L162:
	ld.w	d15,[a10]44
.L609:
	sha	d15,#4
.L610:
	movh.a	a15,#@his(Fee_FlashProp_st)
	lea	a15,[a15]@los(Fee_FlashProp_st)
.L1161:
	addsc.a	a15,a15,d15,#0
.L1162:
	movh.a	a2,#@his(Fee_Cache_au32)
	lea	a2,[a2]@los(Fee_Cache_au32)
.L1163:
	addsc.a	a2,a2,d14,#2
	ld.w	d0,[a2]
.L1164:
	ld.w	d15,[a15]8
.L1165:
	jlt.u	d0,d15,.L163
.L1166:
	ld.w	d15,[a15]12
.L1167:
	jlt.u	d15,d0,.L164
.L1168:
	mov.u	d5,#45054
	addih	d5,d5,#51966
	mov	d4,d14
.L611:
	call	Fee_LLUpdateAddressInCache
.L164:
.L163:
	add	d14,#1
.L161:
	jlt.u	d14,#12,.L162
.L1169:
	mul	d15,d13,#12
.L1170:
	movh.a	a15,#@his(Fee_LLSectorOrder_st)
	lea	a15,[a15]@los(Fee_LLSectorOrder_st)
.L1171:
	addsc.a	a14,a15,d15,#0
.L1172:
	add.a	a14,#4
	ld.w	d15,[a14]
.L1173:
	jeq	d15,#2,.L165
.L1174:
	jne	d15,#3,.L166
.L165:
	mov	d15,#1
.L1175:
	st.w	[a13],d15
.L1176:
	movh.a	a15,#@his(_999007_xRdAdrContinue_u32)
	lea	a15,[a15]@los(_999007_xRdAdrContinue_u32)
.L1177:
	ld.w	d15,[a10]48
.L612:
	st.w	[a15],d15
.L1178:
	st.w	[a10]20,d15
.L1179:
	movh.a	a15,#@his(_999008_xRdAdrEndContinue_u32)
	lea	a15,[a15]@los(_999008_xRdAdrEndContinue_u32)
.L1180:
	ld.w	d15,[a10]20
.L613:
	st.w	[a15],d15
.L1181:
	ld.w	d4,[a10]44
.L614:
	call	Fee_LLUpdateCacheStForSect
.L615:
	mov	d9,#0
.L1182:
	mov	d10,#0
.L1183:
	mov	d12,#0
.L1184:
	ld.w	d15,[a14]
.L1185:
	jne	d15,#2,.L167
.L1186:
	mov	d9,#1
.L1187:
	j	.L168
.L167:
.L168:
	j	.L169
.L166:
	mov	d8,#6
.L1188:
	j	.L170
.L169:
.L159:
	movh.a	a15,#@his(_999007_xRdAdrContinue_u32)
	lea	a15,[a15]@los(_999007_xRdAdrContinue_u32)
.L1189:
	movh.a	a14,#@his(_999008_xRdAdrEndContinue_u32)
	lea	a14,[a14]@los(_999008_xRdAdrEndContinue_u32)
.L1190:
	ld.w	d15,[a15]
.L1191:
	st.w	[a10]16,d15
.L1192:
	ld.w	d15,[a14]
.L1193:
	st.w	[a10]20,d15
.L1194:
	ld.w	d4,[a10]16
	call	Fee_GetPhysSectorByAddress
.L1195:
	ld.w	d15,[a10]16
.L1196:
	mov	d4,d2
	call	Fee_LLGetSecEndAddress
.L1197:
	jlt.u	d15,d2,.L171
.L1198:
	mov	d8,#5
.L1199:
	j	.L172
.L171:
	movh.a	a2,#@his(Fee_Prv_stInit_u8)
	lea	a2,[a2]@los(Fee_Prv_stInit_u8)
	ld.bu	d15,[a2]
.L1200:
	jeq	d15,#1,.L173
.L1201:
	st.w	[a10]20,d11
.L1202:
	j	.L174
.L173:
	ld.w	d0,[a10]16
.L1203:
	ld.w	d15,[a10]20
.L1204:
	jne	d15,d0,.L175
.L1205:
	lea	a4,[a10]20
.L1206:
	mov	d4,#256
.L1207:
	mov	d5,#1
	call	Fee_IncAddressInsideSector
.L1208:
	ld.w	d15,[a10]20
.L1209:
	jge.u	d11,d15,.L176
.L1210:
	st.w	[a10]20,d11
.L176:
.L175:
.L174:
.L177:
	ld.w	d4,[a10]16
.L1211:
	lea	a4,[a10]28
.L1212:
	mov	d5,#4
	call	Fee_Fls_SyncRead
.L1213:
	ld.bu	d0,[a10]30
.L1214:
	mov	d15,#150
.L1215:
	jne	d15,d0,.L178
.L1216:
	ld.bu	d0,[a10]29
.L1217:
	mov	d15,#60
.L1218:
	jne	d15,d0,.L179
.L1219:
	ld.bu	d0,[a10]28
.L1220:
	mov	d15,#165
.L1221:
	jne	d15,d0,.L180
.L1222:
	ld.w	d15,[a10]16
.L1223:
	add	d0,d11,#-15
.L1224:
	jlt.u	d0,d15,.L181
.L1225:
	jne	d9,#1,.L182
.L1226:
	ld.w	d10,[a10]16
.L1227:
	j	.L183
.L182:
.L183:
	ld.w	d13,[a10]16
.L616:
	lea	a4,[a10]16
.L1228:
	mov	d4,#4
.L1229:
	mov	d5,#0
	call	Fee_IncAddressInsideSector
.L1230:
	ld.w	d4,[a10]16
.L1231:
	lea	a4,[a10]32
.L1232:
	mov	d5,#4
	call	Fee_Fls_SyncRead
.L1233:
	lea	a4,[a10]16
.L1234:
	mov	d4,#4
.L1235:
	mov	d5,#0
	call	Fee_IncAddressInsideSector
.L1236:
	ld.w	d4,[a10]16
.L1237:
	lea	a4,[a10]36
.L1238:
	mov	d5,#4
	call	Fee_Fls_SyncRead
.L1239:
	ld.bu	d0,[a10]31
.L1240:
	jnz.t	d0:7,.L184
.L1241:
	lea	a4,[a10]28
.L1242:
	mov	d4,#8
.L1243:
	mov.u	d5,#51966
.L1244:
	mov	d6,#0
	call	Crc_CalculateCRC16
.L481:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     1  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     2  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     3  #ifndef RBA_FEEFS1_PRV_H
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     4  #define RBA_FEEFS1_PRV_H
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     5  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     6  #if(defined(FEE_PRV_CFG_SELECTED_FS) && (1 == FEE_PRV_CFG_SELECTED_FS))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     7  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     8  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     9   **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    10   * \moduledescription
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    11   *           AUTOSAR FEE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    12   *           According to Document Version 3.0.0, Part of Release 4.0, Revision 2
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    13   * \scope    INTERN
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    14   **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    15   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    16  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    17  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    18  /*
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    19  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    20  * Defines/Macros
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    21  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    22  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    23  /* General defines */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    24  #define FEE_MAXUINT32               (0xFFFFFFFFuL)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    25  #define FEE_MAXUINT16               (0xFFFFu)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    26  #define FEE_NULL                    (0u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    27  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    28  #define FEE_MARKER_PATTERN          0xCAFEu                 /* Pattern to identify a marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    29  #define FEE_NUM_MARKER_IN_HEADER    (FEE_NUM_MARKER_E - 1)  /* A sector has at least 4 states:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    30                                                                 ERASED -> USED -> FULL -> ERASE_REQ
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    31                                                                 Value is also in used in Fee_Process.pm */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    32  #define FEE_NO_SEC_IDX_FOUND        0xFFu                   /* No active sector / matching flash bank found */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    33  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    34  #define FEE_MARKER_SIZE             8u                      /* Each marker has a size of 8 Bytes (fix value is used in Fee_Process.pm) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    35  #define FEE_MARKER_CS_SIZE          2u                      /* Size of CRC16 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    36  #define FEE_LL_DATABUFFSIZE         256u                    /* Size of the internal data buffer used for writing */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    37                                                              /* (The page buffer size is auto generated) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    38  #define FEE_LL_CRC_CALC_RESTRICTION FEE_LL_DATABUFFSIZE     /* Restriction for the Crc calculation */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    39  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    40  #define FEE_FREE_PAGES_FOR_ERASED_ST    1u                  /* Number of pages containing the erased value */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    41  #define FEE_SIZE_OF_BLOCK_CS            4                   /* Size of block checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    42  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    43  /* Special values for sector change counter within the RAM array */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    44  #define FEE_SEC_CHANGE_CNT_RESET_REQ  0xFFFFFFFFuL
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    45  #define FEE_SEC_CHANGE_CNT_UNDEF      FEE_SEC_CHANGE_CNT_RESET_REQ
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    46  #define FEE_SEC_CHANGE_CNT_ERASED     (FEE_SEC_CHANGE_CNT_RESET_REQ - 1u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    47  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    48  /* Mask for accessing block flags in the configuration and in the block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    49  #define FEE_FLAG_SEC_LEVEL_MSK      0x0001u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    50  #define FEE_FLAG_SEC_LEVEL_BP       0u       /* Security level setting is bit 0 within the block flags */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    51  #define FEE_BLK_INT_DOUBLE_STORAGE  1u       /* Internal double block storage definition */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    52  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    53  #define FEE_FLAG_DATAFILTERTYPE_ATTR_MSK      0x0006u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    54  #define FEE_FLAG_DATAFILTERTYPE_ATTR_BP       1u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    55  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    56  #define FEE_FLAG_INVALID_MSK        0x08u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    57  #define FEE_FLAG_INVALID_BP         3u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    58  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    59  #define FEE_FLAG_SURV_ATTR_MSK      0x0010u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    60  #define FEE_FLAG_SURV_ATTR_BP       4u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    61  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    62  #define FEE_FLAG_ROBUST_ATTR_MSK    0x0020
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    63  #define FEE_FLAG_ROBUST_ATTR_BP     5
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    64  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    65  #define FEE_FLAG_NOFALLBACK_MSK     0x0040u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    66  #define FEE_FLAG_NOFALLBACK_BP      6u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    67  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    68  #define FEE_MASK_BIT7               (uint8)0x80
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    69  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    70  /* Mask for accessing block flags (upper byte only) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    71  #define FEE_FLAG_JOBTYPE_MSK        0x0300u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    72  #define FEE_FLAG_JOBTYPE_BP         8u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    73  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    74  #define FEE_FLAG_JOBPRIO_MSK        0x0400u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    75  #define FEE_FLAG_JOBPRIO_BP         10u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    76  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    77  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    78  /* Macros for the conversion of the Sec Level settings:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    79   * Internal storage level:      Sec Level 1  --> 0 / Sec Level 2 --> 1
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    80   * User Config storage level:   Sec Level 1  --> 1 / Sec Level 2 --> 2 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    81  #define FEE_INT_TO_USER_STORAGE_TYPE(SEC_LEVEL) ((SEC_LEVEL) + 1u)   /* Convert the Sec Level setting from
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    82                                                                         header/properties == internal to user config format */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    83  #define FEE_CNT_FIRST_COPY          0u       /* Internal counter value for first copy */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    84  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    85  /* Erase actions */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    86  #define FEE_NO_SECTOR_TO_ERASE      0xFFu    /* No sector has to be erased */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    87  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    88  /* Block header validation */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    89  #define FEE_BLK_HEADER_PREAMBEL             0xA53C96uL                                  /* Pattern of preambel */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    90  #define FEE_BLK_HEADER_PREAMBEL_BYTE_2      (FEE_BLK_HEADER_PREAMBEL & 0xFFu)           /* 0x96 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    91  #define FEE_BLK_HEADER_PREAMBEL_BYTE_1      ((FEE_BLK_HEADER_PREAMBEL >> 8u) & 0xFFu)   /* 0x3C */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    92  #define FEE_BLK_HEADER_PREAMBEL_BYTE_0      ((FEE_BLK_HEADER_PREAMBEL >> 16u) & 0xFFu)  /* 0xA5 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    93  #define FEE_BLK_HEADER_SIZE                 14u                                         /* Size of block header in bytes */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    94  #define FEE_BKL_HEADER_REDUCTION            FEE_VIRTUAL_PAGE_SIZE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    95  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    96  /* Calculation of free byte in current sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    97  #define FEE_LL_SECTOR_USED_FOR_WRITING      Fee_RdWrOrder_st.xWrAddress
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    98  #define FEE_LL_SECTOR_USED_FOR_READING      Fee_RdWrOrder_st.xRdAddress
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    99  #define FEE_LL_SECTOR_USED_FOR_COMPARING    Fee_RdWrOrder_st.xCmpAddress
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   100  #define FEE_LL_SECTOR_USED_FOR_CRC_CALC     Fee_RdWrOrder_st.xCrcAddress
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   101  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   102  /* Cache usage*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   103  #define FEE_INVLD_BLOCK_PROP_IDX        0xFFFFFFFFuL    /* Invalid Fee Idx that can be passed to the block header search function
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   104                                                             in order to ignore the cache during the init phase */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   105  #define FEE_USE_CACHED_ACCESS               0x01u       /* Use the cache method for finding the next block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   106  #define FEE_USE_MANUAL_ACCESS               0x00u       /* Search manually for headers */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   107  #define FEE_UPDATE_CACHE_IN_INIT            0x01u       /* Update the cache for fast access in init */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   108  #define FEE_NO_CACHE_UPDATE                 0x00u       /* Do not use the fast access method (only evaluated blocks are added to the cache) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   109  #define FEE_CACHE_UPD_NOT_COMP_FOR_SECT     0x00u       /* The respective sector was not completely checked */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   110  #define FEE_CACHE_UPD_COMP_FOR_SECT         0x01u       /* The respective sector was checked completely */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   111  #define FEE_CACHE_UPD_COMP_FOR_ALL_SECT     0x02u       /* All sectors have been checked completely */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   112  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   113  #define Fee_LLInvalidateAddressInCache(FEEIDX) Fee_LLUpdateAddressInCache(FEEIDX, FEE_CACHE_INIT_VALUE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   114  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   115  /* Fee init defines */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   116  #define FEE_PRV_ST_INIT_RUNNING             0x00u       /* Module is still uninitialized */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   117  #define FEE_PRV_ST_INIT_DONE                0x01u       /* Module has been initialized */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   118  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   119  /* Fee reorganization defines */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   120  #define FEE_PRV_ST_REORG_IDLE               0x00u       /* No reorganization is running */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   121  #define FEE_PRV_ST_REORG_STANDARD_RUNNING   0x01u       /* Standard reorganization is running */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   122  #define FEE_PRV_ST_REORG_AFTERB_RUNNING     0x02u       /* "Afterburner" of the reorganization is runnning */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   123  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   124  /* Amount of sectors used by the emulation  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   125  #define FEE_NUM_FLASH_BANKS         Fee_NumFlashBanksUsed_u8  /* Number of sectors which can be used by the Fee */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   126  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   127  #if (FEE_RB_ADDONS_CCAS == TRUE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   128  #define FEE_RB_REQUEST_STOP_MODE            TRUE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   129  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   130  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   131  #if(FEE_ROBUST_PROG_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   132  #define FEE_ROBMARKER_BUFF_SIZE             96u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   133  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   134  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   135  #if (FEE_PAGES_USED_BY_BLK_HEADER == 2u)     /* Robust block programming states (Hdpg1 -> Data -> Hdpg2 write) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   136  #define FEE_FIRSTDATAPAGE_NOTPROGRAMMED 0x00u            /* First data pages in Fee_LlFls2FlsCopy is not yet programmed. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   137  #define FEE_FIRSTDATAPAGE_PROGRAMMED     0x01u            /* First data pages in Fee_LlFls2FlsCopy is programmed. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   138  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   139  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   140  /*
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   141  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   142  * Type definitions
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   143  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   144  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   145  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   146  /* Order priority */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   147  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   148  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   149      FEE_NORMAL_PRIO_E = 0,      /* e.g. if FeeImmediateData is configured to no */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   150      FEE_HIGH_PRIO_E   = 1       /* e.g. if FeeImmediateData is configured to yes */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   151  }Fee_HlPriority_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   152  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   153  /* This enumerator list contains the index inside the order queue.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   154   * Attention: The order in the enumerator is from Low (FEE_ADAPTER_JOB) to High (FEE_INTERNAL_JOB).
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   155   *            Do not change this order!
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   156   * */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   157  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   158  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   159      FEE_INTERNAL_JOB,           /* Internal job (reorganization or sector erase) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   160      FEE_NVM_JOB,                /* Nvm job */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   161      FEE_ADAPTER_JOB,            /* Adapter job (e.g. Mx17 Eep) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   162      FEE_QUEUE_SIZE              /* Size of the Fee internal queue (each job type has 1 entry) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   163  }Fee_HlJobType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   164  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   165  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   166  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   167      uint8*  DataBufferPtr_pu8;  /* Pointer to the read- or write-buffer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   168      uint16  FeeIdx_u16;         /* FeeRbBlockPersistentId */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   169      uint16  BlockPropIdx_u16;   /* Respective block properties table index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   170      uint16  Offset_u16;         /* Offset inside block (could be != 0 only for read-orders --> R4.0 Rev1) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   171      uint16  Length_u16;         /* Block length, only required for element-read-jobs */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   172      Fee_HlMode_ten Mode_en;     /* Type of this order: Read, Write, Invalidate */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   173      Fee_HlPriority_ten Prio_en; /* Priority out of the configuration */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   174      uint8   SecLevel_u8;        /* Security level out of the configuration */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   175  }Fee_OrderFifo_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   176  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   177  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   178  /* Hint:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   179   * For calculation of the sector order (old -> new -> erased -> undef) the sector change counter is a valid criteria.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   180   * The lowest valid value points to the eldest data, the most current value to the most current data.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   181   * These following defines are used for an implicit sorting:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   182   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   183   *  +------+------+------+------+------+------+------+------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   184   *  |MarkerPattern|Ident | marker content     |marker CRC16 |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   185   *  +------+------+------+------+------+------+------+------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   186   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   187   *  Sector headers: 12 times available as default
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   188   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   189   *      +------+------+------+------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   190   *    0 |Erased| Used | Full |Erase |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   191   *      +------+------+------+------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   192   *    4 |      |      |      |      |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   193   *      +------+------+------+------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   194   *    8 |      |      |      |      |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   195   *      +------+------+------+------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   196   *      |<---->|
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   197   *        Page
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   198   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   199   * Erased:  Sector was erased successfully. This marker also contains the sector erase counter
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   200   * Used:    Sector contains user data. This marker will be written first before data is written into a sector.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   201   *          This marker also contains the sector change counter.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   202   * Full:    Sector is completely full and must not be considered for searching for the first empty page.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   203   *          This marker also contains the sector change counter.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   204   * Erase:   Sector contains no valid data anymore and can be erased in the background task.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   205   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   206   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   207  enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   208  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   209      FEE_ERASED_MARKER_ID_E = 0x01u, /* Sector was erased successfully */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   210      FEE_USED_MARKER_ID_E,           /* Sector was used to store data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   211      FEE_FULL_MARKER_ID_E,           /* Sector is full */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   212      FEE_ERASE_REQUEST_ID_E,         /* Sector should be erased */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   213      FEE_START_MARKER_ID_E,            /* Double storage of USED marker, contains address of first blockheader */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   214      FEE_CLONE_START_MARKER_ID_E,    /* Marker to indicate that cloning of a defect sector has startet in this sector --> Ifx robust programming */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   215      FEE_RESERVED_MARKER_ID1_E,      /* Reserved range marker space in the sector header, currently not used! */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   216      FEE_RESERVED_MARKER_ID2_E,      /*    "       "     "      "   "    "      "         "      "    "   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   217      FEE_RESERVED_MARKER_ID3_E,      /*    "       "     "      "   "    "      "         "      "    "   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   218      FEE_RESERVED_MARKER_ID4_E,      /*    "       "     "      "   "    "      "         "      "    "   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   219      FEE_RESERVED_MARKER_ID5_E,      /*    "       "     "      "   "    "      "         "      "    "   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   220      FEE_RESERVED_MARKER_ID6_E,      /*    "       "     "      "   "    "      "         "      "    "   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   221      FEE_NUM_MARKER_E                /* Amount of required markers in the sector header + 1 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   222  };
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   223  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   224  /* Sector marker structure */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   225  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   226  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   227      uint16  xPattern;               /* Static marker pattern: 0xCAFE */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   228      uint8   xIdent;                 /* Ident to identify the marker: 0x01 Erased-Marker, 0x02 Used-Marker, 0x03 Full-Marker, 0x04 Erase-Request */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   229      uint8   xContent[3];            /* Sector change counter */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   230      uint16  xChecksum;              /* Crc16 checksum, calculation over Patter, Ident and content */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   231  }Fee_MarkerProp_t;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   232  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   233  /* Sector detection type */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   234  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   235  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   236      uint32  SecChngCnt_u32;         /* Sector change counter */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   237      uint8   ctErasedMarker_u8;      /* Number of found ERASED markers */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   238      uint8   ctUsedMarker_u8;        /* Number of found USED markers */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   239      uint8   ctFullMarker_u8;        /* Number of found FULL markers */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   240      uint8   ctEraseReq_u8;          /* Number of found ERASE requests */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   241      uint32  xStartAddr_u32;         /* Address of first blockheader in the sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   242      uint8   ctCloneMarker_u8;       /* Cloning of data has started (only Ifx robust programming algorithm */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   243  }Fee_stSecDet_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   244  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   245  /* Sector states */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   246  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   247  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   248      FEE_SECTOR_STATE_UNDEF_E        = 0,                      /* undefined sector-state --> no marker found */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   249      FEE_SECTOR_ERASED_E             = FEE_ERASED_MARKER_ID_E, /* sector was erased */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   250      FEE_SECTOR_USED_E               = FEE_USED_MARKER_ID_E,   /* sector was used to write data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   251      FEE_SECTOR_FULL_E               = FEE_FULL_MARKER_ID_E,   /* sector is full */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   252      FEE_SECTOR_REQUEST2ERASE_E      = FEE_ERASE_REQUEST_ID_E, /* sector could be erased */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   253      FEE_SECTOR_CONSIDERED_E         = FEE_NUM_MARKER_E        /* sector was considered in function Fee_LLDetectActiveSector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   254  }Fee_SectorState_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   255  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   256  /* Sector order after sort sequence */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   257  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   258  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   259      uint32 SecChngCnt_u32;                  /* Sector change counter */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   260      Fee_SectorState_ten SecState_en;        /* Sector state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   261      uint8 xPhySecIdx_u8;                    /* Sector index (physical sector) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   262  }Fee_LLSectorOrder_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   263  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   264  /* Fee internal return types */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   265  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   266  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   267      FEE_ORDER_PENDING_E,            /* The order is still pending*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   268      FEE_ORDER_FINISHED_E,           /* The order was finished without error */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   269      FEE_BLOCK_INVALIDATED_E,        /* The block was invalidated in the block status */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   270      FEE_ERROR_E,                    /* An error occured, maybe data in flash was not valid */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   271      FEE_SECTORCHANGE_E,             /* A sector change has to be done */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   272      FEE_SECTORFULL_E,               /* The sector is full */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   273      FEE_ABORTED_E,                  /* An order was aborted*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   274      FEE_ERASE_SECTOR_E,             /* The sector must be erased */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   275      FEE_SEARCH_ABORTED_E,           /* Searching was aborted */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   276      FEE_NUM_RET_VAL_E               /* Number of return values */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   277  }Fee_stRetVal_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   278  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   279  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   280  /* Flash properties */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   281  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   282  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   283      uint32  Fee_PhysStartAddress_u32;       /* Physical sector: start address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   284      uint32  Fee_PhysEndAddress_u32;         /* physical sector: end address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   285      uint32  Fee_LogStartAddress_u32;        /* logical sector: start address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   286      uint32  Fee_LogEndAddress_u32;          /* logical sector: end address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   287  }Fee_FlashProp_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   288  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   289  /* Block properties for all Fee blocks
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   290   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   291   * Status Flags:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   292   * Block flags will help to specify a more detailed block configuration. The low Byte of these block flags is also stored
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   293   * in the flash (status byte inside the block header). This information (in Flash) can be used to read/write the layout
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   294   * without configuration (PAV, CB).
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   295   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   296   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   297   *                                                 |<----- Block Status Byte in Block Header ----->|
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   298   * |<---------------------------------------- Block Flags ---------------------------------------->|
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   299   *    F     E     D     C     B     A     9     8  |  7     6     5     4     3     2     1     0  |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   300   * +-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   301   * |     |     |     |     |     |Prio-| Job type  |     |     | Rob |Surv.|(Inv)| DataFilter| Sec-|
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   302   * |     |     |     |     |     |rity |           |     |     |Attr.|Attr.|     |    Type   | lvl |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   303   * +-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   304   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   305   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   306   *  0  ... SecurityLevel      => 0...SingleStorage, 1...DoubleStorage
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   307   * 1+2 ... Data Filter Type   => 0...Dynamic:         Anybody can erase this block (e.g. during migration)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   308   *                               1...Static:          Only certain users (e.g. repair shops) can erase this block
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   309   *                               2...Permanent:       Only very certain users (e.g. OEM) can erase this block
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   310   *                               3...Super Permanent: Block can never be erased
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   311   *  3 .... Invalid            => 0...Block OK, 1...Block is invalid  --> can be changed by function Fee_InvalidateBlock
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   312   *  4 .... Survival Attribute => 0...No survival, 1... Survival (even without being part of the layout)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   313   *  5 .... Robustness Attribute (Robustness against data modification during write execution)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   314   *                            => 0...Deactivated:     No additional checksum is used
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   315   *                            => 1...Activated:       Additional checksum is used
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   316   * 8+9 ... TypeOfBlock        => 0...InternalJob, 1...NvmJob, 2...AdapterJob (e.g. Mx17 Eep adapter)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   317   *  A .... Priority           => Job priority:        0...FEE_NORMAL_PRIO_E --> FeeImmediateData = No
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   318   *                                                    1...FEE_HIGH_PRIO_E   --> FeeImmediateData = Yes
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   319   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   320  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   321  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   322      uint16 BlockPersistentId_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   323      uint16 Flags_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   324      uint16 Length_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   325      void (* const JobEndNotification_pfn) (void);      /* callback function, will be called if a job was successfully finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   326      void (* const JobErrorNotification_pfn) (void);    /* callback function, will be called if a job was finished with an error */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   327  }Fee_BlockPropertiesType_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   328  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   329  /* Job types corresponding to the queue index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   330  enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   331  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   332      FEE_JOB_TYPE_INTERNAL_E = 0,            /* Internal job index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   333      FEE_JOB_TYPE_NVM_E      = 1,            /* NvM job index  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   334      FEE_JOB_TYPE_ADAPTER_E  = 2             /* Adapter job index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   335  };
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   336  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   337  /* State machine types for the function Fee_LLWriteMarker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   338  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   339  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   340      FEE_LL_MARKER_INIT_E,                   /* Init state                                    */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   341      FEE_LL_MARKER_BLK_CHK_E,                /* Perform a blank check over one page           */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   342      FEE_LL_MARKER_BLK_CHK_WAIT_E,           /* Wait for the blank check order to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   343      FEE_LL_MARKER_BLK_CHK_ERROR_E,          /* Differences detected                          */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   344      FEE_LL_MARKER_BLK_CHK_FINISHED_E,       /* Start write order of the marker               */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   345      FEE_LL_MARKER_WRITE_WAIT_E,             /* Wait for the write order to be finished       */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   346      FEE_LL_MARKER_WRITE_ERROR_E,            /* Read or write error                           */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   347      FEE_LL_MARKER_VERIFY_E,                 /* Verify written marker                         */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   348      FEE_LL_MARKER_VERIFY_WAIT_E,            /* Wait for verify marker                        */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   349      FEE_LL_MARKER_VERIFY_FINISHED_E         /* Verify marker finished                        */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   350  }Fee_LLWrMarkerType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   351  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   352  /* State machine types for the function Fee_HLWriteBlock and Fee_HLReadBlock */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   353  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   354  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   355      FEE_HL_RDWR_BLK_INIT_E,                 /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   356      FEE_HL_SEARCH_BLK_HDR_E,                /* Search block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   357      FEE_HL_READ_BLK_HDR_WAIT_E,                  /* Read block header for redundant blocks */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   358      FEE_HL_CHECK_BLK_HDR_E,                 /* Check block header for redundant blocks */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   359      FEE_HL_CALC_BLK_CS_E,                   /* Calculate the user checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   360      FEE_HL_CHECK_BLK_CS_E,                  /* Verify the block checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   361      FEE_HL_RD_DATA_FROM_BLK_E,              /* Read the block data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   362      FEE_HL_COMP_BLK_E,                      /* Compare the complete block data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   363  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   364      /* Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   365      #if (defined(RBA_FLSIFX_FLASH) || defined(RBA_FLSJDP_FLASH))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   366      FEE_HL_RD_WAIT_FOR_FLS_E,               /* Wait for the Fls to overstamp an invalid header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   367      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   368      /* END Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   369  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   370      FEE_HL_WR_BLK_E                         /* Write the block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   371  }Fee_HLRdWrBlockType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   372  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   373  /* State machine types for the function Fee_LLWriteBlock */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   374  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   375  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   376      FEE_LL_WR_BLK_INIT_E,                   /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   377      FEE_LL_WR_WRITEHEADER_E,                /* Write the header (and first data bytes) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   378      FEE_LL_WR_SIZECHECK_HSR_E,              /* check for space until HSR */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   379      #if (FEE_NO_FALLBACK_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   380      FEE_LL_WR_BLANKCHECK_NOFB_WR_E,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   381      FEE_LL_WR_BLANKCHECK_NOFB_WR_WAIT_E,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   382      FEE_LL_WR_WRITE_NOFB_MARKER_E,          /* Write the NoFallback marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   383      FEE_LL_WR_WRITE_NOFB_MARKER_WAIT_E,     /* Wait until the programming of the NoFallback marker is finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   384      FEE_LL_WR_FILL_SECTOR_END_E,            /* Changes the active sector and fills the empty pages if necessary */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   385      FEE_LL_WR_FILL_SECTOR_END_WAIT_E,       /* Wait until the write order to fill the empty pages is finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   386      FEE_LL_WR_FILL_SECTOR_END_ERROR_E,      /* Errors during write occured */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   387      FEE_LL_WR_WRITE_NOFB_MARKER_ERROR_E,    /* Errors during write occured */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   388      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   389      FEE_LL_WR_WRITEHEADER_WAIT_E,           /* Wait until the write order is finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   390      FEE_LL_WR_VERIFYHEADER_E,               /* Verify the header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   391      FEE_LL_WR_VERIFYHEADER_WAIT_E,          /* Wait for the verification to end */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   392      FEE_LL_WR_VERIFYHEADER_ERROR_E,         /* Verify error */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   393      FEE_LL_WR_WRITEDATA_SEC_A_E,            /* Write the data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   394      FEE_LL_WR_WAIT_WRITEDATA_SEC_A_E,       /* Wait until the write order is finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   395      FEE_LL_WR_WRITE_ERROR_E,                /* Error during write (header or data page writes) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   396  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   397      FEE_LL_WR_WRITE_FULL_MARKER_E,          /* Write the FULL marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   398      FEE_LL_WR_ERASE_SECTOR_E,               /* Erase a sector and write the ERASED marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   399      FEE_LL_WR_WRITE_USED_MARKER_E,          /* Write the USED marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   400      FEE_LL_WR_WRITE_START_MARKER_E,         /* Write the START marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   401  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   402      /* Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   403      #if (defined(RBA_FLSIFX_FLASH) || defined(RBA_FLSJDP_FLASH))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   404      FEE_LL_WR_WAIT_FOR_FLS_OVERPROGRAMMING_E,   /* Wait for the Fls to overstamp an invalid header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   405      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   406      /* END Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   407  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   408      #if(FEE_ROBUST_PROG_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   409      FEE_LL_WR_WRITEDATA_IFX_HANDLING_E,     /* robust Ifx handling in case of wordline fails */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   410      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   411      FEE_LL_WR_VERIFY_BLK_E                  /* Verify the complete data including the block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   412  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   413      /* Robust block programming states (Hdpg1 -> Data -> Hdpg2 write) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   414      #if (FEE_PAGES_USED_BY_BLK_HEADER == 2u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   415      ,FEE_LL_WR_WRITEHDRPG2_E,                /* Write the 2nd header page. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   416      FEE_LL_WR_WAIT_WRITEHDRPG2_E            /* Wait until 2nd header page write is completed. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   417      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   418  }Fee_LLWrBlockType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   419  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   420  /* State machine types for the function Fee_LLCompBlkInFlash */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   421  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   422  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   423      FEE_LL_CMP_BLK_INIT_E,                  /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   424      FEE_LL_CMP_HEADER_E,                    /* Compare the complete block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   425      FEE_LL_CMP_WAIT_HEADER_E,               /* Wait for the compare to finish */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   426      FEE_LL_CMP_CHECK_OVERLAP_E,             /* Check for an overlap */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   427      FEE_LL_CMP_DATA_SEC_A_E,                /* Check the header compare result and compare the data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   428      FEE_LL_CMP_WAIT_DATA_SEC_A_E,           /* Wait for the compare to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   429      FEE_LL_CMP_FINISHED_E                   /* Verify the data compare result and reset the state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   430  }Fee_LLCmpBlkType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   431  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   432  /* State machine types for the function Fee_LLCopyData2Buffer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   433  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   434  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   435      FEE_LL_CPY_BLK_INIT_E,                  /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   436      FEE_LL_CPY_BLOCK_START_E,               /* Read out the data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   437      FEE_LL_CPY_BLOCK_WAIT_E,                /* Wait for the read order to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   438      FEE_LL_CPY_BLOCK_ERROR_E,               /* Error in the read function */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   439      FEE_LL_CPY_BLOCK_FINISHED_E             /* Finish the function or the data transfer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   440  }Fee_LLCpyBlkType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   441  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   442  /* State machine types for the function Fee_LLCalcBlkCrcInFlash */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   443  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   444  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   445      FEE_LL_CRC_BLK_INIT_E,                  /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   446      FEE_LL_CRC_RD_HD_PAGE_E,                /* Read the header page */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   447      FEE_LL_CRC_RD_PAGE_E,                   /* Calculate the block checksums */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   448      FEE_LL_CRC_CHECK_OVERLAP_E,             /* Check for an overlap */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   449      #if(FEE_ROB_FEATURE_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   450      FEE_LL_CRC_RD_ROB_PAGE_E,               /* Retry with the robustness checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   451      FEE_LL_CRC_CHECK_OVERLAP_ROB_E,         /* Check for an overlap */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   452      FEE_LL_CRC_RD_ROB_PAGE_WAIT_E,          /* Wait until the read access is finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   453      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   454      FEE_LL_CRC_RD_PAGE_WAIT_E,              /* Wait until the read access is finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   455      FEE_LL_CRC_RD_ERROR_E                   /* Read error case */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   456  }Fee_LLCalcCrcBlkType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   457  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   458  /* State machine types for reading */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   459  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   460  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   461      FEE_LL_INIT_READ_E                      /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   462      ,FEE_LL_BLANK_CHECK_E                    /* Perform a blank check */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   463      ,FEE_LL_BLANK_CHECK_WAIT_E                /* Wait for the blank check to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   464      ,FEE_LL_READ_PAGE_E                     /* Read pages */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   465      ,FEE_LL_WAIT_READ_PAGE_E                /* Wait for the read order to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   466      ,FEE_LL_READ_ERROR_E                    /* Error reaction for read error */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   467      ,FEE_LL_READ_FINISHED_E                 /* Finish state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   468      #if (FEE_HEADER_RECHECK_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   469      #if (FEE_NO_FALLBACK_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   470      ,FEE_LL_NOFALLBACK_MARKER_CHECK_E
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   471      ,FEE_LL_NOFALLBACK_MARKER_CHECK_WAIT_E
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   472      ,FEE_LL_NOFALLBACK_MARKER_CHECK_FAILED_E
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   473      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   474      ,FEE_LL_RECHECK_HEADER_E
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   475      ,FEE_LL_RECHECK_HEADER_WAIT_E
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   476      ,FEE_LL_RECHECK_HEADER_FAILED_E
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   477      ,FEE_LL_RECHECK_HEADER_FINISHED_E
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   478      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   479  } Fee_LLRdStateType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   480  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   481  /* States for function Fee_LLCheckErasePattern */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   482  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   483  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   484      FEE_LL_INIT_BLANK_CHECK_E,              /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   485      FEE_LL_PERFORM_BLANK_CHECK_E,           /* Perform a blank check */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   486      FEE_LL_WAIT_PERFORM_BLANK_CHECK_E,      /* Wait for the blank check order to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   487      FEE_LL_BLANK_CHECK_ERROR_E,             /* Differences detected */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   488      FEE_LL_BLANK_CHECK_FINISHED_E           /* Finish state machine with success */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   489  } Fee_LLBlankCheckType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   490  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   491  /* State of function Fee_Prv_LLFindEmptyPage */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   492  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   493  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   494      #if ( defined(RBA_FLSRH850P1xC_FLASH) || defined(RBA_FLSV850R1x_FLASH) || defined(RBA_FLSRH850xx_FLASH) )
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   495      FEE_LL_FINDEMPTYPGE_INIT_E,             /* Initalize find empty page state machine  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   496      FEE_LL_FINDEMPTYPGE_CHECK_E,            /* Begin a blank check                      */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   497      FEE_LL_FINDEMPTYPGE_WAIT_E,             /* Wait until the blank check finished      */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   498      FEE_LL_FINDEMPTYPGE_RESULT_BLANK_E,     /* Checked chunk was completely blank       */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   499      FEE_LL_FINDEMPTYPGE_RESULT_NOT_BLANK_E  /* Checked chunk was not completely blank   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   500      #else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   501      FEE_LL_FIND_CURRENT_SECTOR_E,           /* Evaluate the sector with most current values */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   502      FEE_LL_FIND_LAST_HEADER_E,              /* Search the last block header in the active sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   503      FEE_LL_FINISHED_E                       /* Function finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   504      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   505  }Fee_LLFndEmptyPgeType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   506  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   507  /* State of the function Fee_LLSearchSpecifiedBlkHeader */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   508  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   509  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   510      FEE_LL_SEARCHBLK_INIT_E,                /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   511      FEE_LL_SEARCHBLK_BLK_HEADER_E           /* Search for the next block header*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   512  }Fee_LLSearchBlkHdrType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   513  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   514  #if(FEE_FAST_CACHE_INIT_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   515  /* State of the function Fee_BuildUpCache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   516  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   517  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   518      FEE_LL_BLD_UP_CACHE_INIT_E,             /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   519      FEE_LL_BLD_UP_CACHE_READ_E              /* Read out data directly if possible */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   520  }Fee_LLBuildUpCache_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   521  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   522  /* State of the function Fee_BuildUpCacheForAllSect */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   523  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   524  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   525      FEE_LL_BLD_UP_CACHE_ALL_SECT_INIT_E,/* Init case */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   526      FEE_LL_BLD_UP_CACHE_ALL_SECT_DO_E   /* Build up the cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   527  }Fee_LLBuildUpCacheAllSect_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   528  /* FEE_FAST_CACHE_INIT_ACTIVE != FALSE */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   529  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   530  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   531  #if((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) || (FEE_RB_ACT_SURVIVAL_EVAL != FALSE))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   532  #if (FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE == 0)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   533  /* Unknown blcok sector reorganiation without cache: State of the function Fee_LLSearchUnknBlkHeader */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   534  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   535  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   536      FEE_LL_SEARCHUNKNBLK_INIT_E,            /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   537      FEE_LL_SEARCHUNKNBLK_UNKN_BLK_HEADER_E, /* Search the next unknown block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   538      FEE_LL_SEARCHUNKNBLK_SPEC_BLK_HEADER_E  /* Search the next specific block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   539  }Fee_LLSearchUnknBlkHdrType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   540  #else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   541  /* Unknown block sector reorganiation with cache: states of cache build up function Fee_BuildUpCacheUnknownBlk */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   542  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   543  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   544      FEE_LL_BLD_UP_CACHE_UNKOWN_BLK_INIT_E,             /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   545      FEE_LL_BLD_UP_CACHE_UNKOWN_BLK_READ_E,             /* Read out data directly if possible */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   546      FEE_LL_BLD_UP_CACHE_UNKOWN_BLK_VALIDATEDATA_E      /* Validate the data CRC of the uknown block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   547  }Fee_LLBuildUpUnknownBlkCache_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   548  #endif /* End of (FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE == 0) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   549  #endif /* End of ((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) || (FEE_RB_ACT_SURVIVAL_EVAL != FALSE)) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   550  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   551  /* States for the function Fee_LLSectorReorganization */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   552  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   553  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   554      FEE_LL_REORG_INIT_E,                    /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   555      FEE_LL_REORG_PREP_SEARCH_BLK_E,         /* Prepare the next block search */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   556      FEE_LL_REORG_SEARCH_BLK_E,              /* Search for a specific block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   557      FEE_LL_REORG_CHECK_BLOCK_CS_E,          /* Evaluate the block checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   558      FEE_LL_REORG_REDUNDANT_BLK_CHK_E,       /* Check if redundant copy is not lost during sector reorg. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   559      FEE_LL_REORG_WRITE_BLOCK_E,             /* Write a block into the latest sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   560  #if((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) || (FEE_RB_ACT_SURVIVAL_EVAL != FALSE))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   561      FEE_LL_REORG_SEARCH_UNK_BLK_E,          /* Search for an unknown block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   562   #if(FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE != 0) /* Unknown blcok sector reorganiation with cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   563      FEE_LL_REORG_CACHEBUILDUP_UNK_BLK_E,    /* Building of cache for unknown block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   564      FEE_LL_REORG_SEARCH_UNK_HDRBLK_WAIT_E,            /* Wait till reading of unknown block header is finished. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   565      FEE_LL_REORG_SEARCH_UNK_HDRBLK_READ_ERROR_E,    /* Failure during read of unknown block header. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   566      FEE_LL_REORG_SEARCH_UNK_HDRBLK_READ_FINISHED_E,    /* Unknown block header read successful. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   567   #endif /* End of (FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE != 0) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   568  #endif /* End of ((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) || (FEE_RB_ACT_SURVIVAL_EVAL != FALSE)) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   569  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   570      /* Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   571      #if (defined(RBA_FLSIFX_FLASH) || defined(RBA_FLSJDP_FLASH))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   572      FEE_LL_REORG_WAIT_FOR_FLS_E,            /* Wait for the Fls to overstamp an invalid header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   573      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   574      /* END Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   575  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   576      FEE_LL_REORG_FINISHED_E                 /* Function finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   577  }Fee_LLSecReorgType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   578  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   579  /* States for the function Fee_LLRedundantCpyChk */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   580  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   581  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   582      FEE_LL_REDUNDANT_CPY_CHK_INIT_E,            /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   583      FEE_LL_REDUNDANT_CPY_CHK_SEARCH_HDR_E,      /* Search header of redundant copy */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   584      FEE_LL_REDUNDANT_CPY_CHK_BLK_CS_E           /* Validate data CRC of redundant copy */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   585  }Fee_LLRedundantCpyChk_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   586  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   587  /* States for the function Fee_LLCpyBlkFromFls2Fls */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   588  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   589  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   590      FEE_LL_CPY_FLS2FLS_INIT_E,                      /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   591  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   592      #if (FEE_NO_FALLBACK_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   593      FEE_LL_CPY_FLS2FLS_WRITE_NOFB_MARKER_E,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   594      FEE_LL_CPY_FLS2FLS_WAIT_WRITE_NOFB_MARKER_E,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   595      FEE_LL_CPY_FLS2FLS_WRITE_NOFB_MARKER_ERROR_E,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   596      FEE_LL_CPY_FLS2FLS_WAIT_FILL_SECTOR_END_E,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   597      FEE_LL_CPY_FLS2FLS_FILL_SECTOR_END_ERROR_E,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   598      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   599  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   600      FEE_LL_CPY_FLS2FLS_READ_E,                      /* Read out the complete block (header and data) and finish the function if possible */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   601      FEE_LL_CPY_FLS2FLS_WAIT_READ_E,                 /* Wait for the read order to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   602      FEE_LL_CPY_FLS2FLS_READ_ERROR_E,                /* Read error state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   603  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   604      /* Robust block programming states (Hdpg1 -> Data -> Hdpg2 write) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   605      #if (FEE_PAGES_USED_BY_BLK_HEADER == 2u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   606      FEE_LL_CPY_FLS2FLS_HDRPG1_WRITE_E,              /* Write the header page 1 into the new sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   607      FEE_LL_CPY_FLS2FLS_WAIT_HDRPG1_WRITE_E,         /* Wait for the header page 1 write order to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   608      FEE_LL_CPY_FLS2FLS_HDRPG1_WRITE_ERROR_E,        /* Write error state for header page 1 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   609      FEE_LL_CPY_FLS2FLS_HDRPG1_VERIFY_E,             /* Compare the header page 1 write */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   610      FEE_LL_CPY_FLS2FLS_WAIT_HDRPG1_VERIFY_E,        /* Wait for the header page 1 verification to finish */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   611      FEE_LL_CPY_FLS2FLS_HDRPG1_VERIFY_ERROR_E,       /* Verification error for header page 1 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   612      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   613  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   614      FEE_LL_CPY_FLS2FLS_WRITE_E,                     /* Write the data into the new sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   615      FEE_LL_CPY_FLS2FLS_WAIT_WRITE_E,                /* Wait for the write order to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   616      FEE_LL_CPY_FLS2FLS_WRITE_ERROR_E,               /* Write error state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   617      FEE_LL_CPY_FLS2FLS_VERIFY_E,                    /* Compare the programmed data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   618      FEE_LL_CPY_FLS2FLS_WAIT_VERIFY_E,               /* Wait for the verification to finish */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   619      FEE_LL_CPY_FLS2FLS_VERIFY_ERROR_E,              /* Verification error */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   620  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   621      /* Robust block programming states (Hdpg1 -> Data -> Hdpg2 write) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   622      #if (FEE_PAGES_USED_BY_BLK_HEADER == 2u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   623      FEE_LL_CPY_FLS2FLS_HDRPG2_WRITE_E,              /* Write the header page 2 into the new sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   624      FEE_LL_CPY_FLS2FLS_WAIT_HDRPG2_WRITE_E,         /* Wait for the header page 2 write order to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   625      FEE_LL_CPY_FLS2FLS_HDRPG2_WRITE_ERROR_E,        /* Write error state for header page 2 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   626      FEE_LL_CPY_FLS2FLS_HDRPG2_VERIFY_E,             /* Compare the header page 2 write */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   627      FEE_LL_CPY_FLS2FLS_WAIT_HDRPG2_VERIFY_E,        /* Wait for the header page 2 verification to finish */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   628      FEE_LL_CPY_FLS2FLS_HDRPG2_VERIFY_ERROR_E,       /* Verification error for header page 2 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   629      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   630  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   631      FEE_LL_CPY_FLS2FLS_CHECK_ADR_OVERFLOW_E,        /* Data transfer is finished, check a possible address overflow */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   632      FEE_LL_CPY_FLS2FLS_WRITE_FULL_MARKER_E,         /* Write the FULL marker to the "old" sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   633      FEE_LL_CPY_FLS2FLS_ERASE_SECTOR_E,              /* Erase the sector that will be used as a new USED sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   634      FEE_LL_CPY_FLS2FLS_WRITE_USED_MARKER_E,         /* Write the USED marker to new sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   635  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   636      #if(FEE_ROBUST_PROG_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   637      FEE_LL_CPY_FLS2FLS_ROBUST_IFX_HANDLING_E,       /* robust Ifx handling in case of wordline fails */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   638      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   639  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   640      #if defined (FEE_PRV_ROBUST_SECT_OVERFLOW)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   641      FEE_LL_CPY_FLS2FLS_ROBUST_SECT_OVERFLOW_E,      /* Robust sector reorganisation when sector overflow occurs during sector reorg. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   642      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   643  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   644      FEE_LL_CPY_FLS2FLS_WRITE_START_MARKER_E         /* Write the START marker to the new sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   645  }Fee_LLCpyBlkFls2Fls_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   646  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   647  /* States for the function Fee_LlRobustSectorOverflow */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   648  #if defined (FEE_PRV_ROBUST_SECT_OVERFLOW)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   649  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   650  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   651      FEE_LL_ROBUST_SECTOR_OVERFLOW_INIT_E,           /* Init state. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   652      FEE_LL_ROBUST_SECTOR_OVERFLOW_WR_CM_E,          /* Write Clone marker in the latest sector. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   653      FEE_LL_ROBUST_SECTOR_OVERFLOW_PREPARE_E,        /* Compute the address and number of bytes for the operation. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   654  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   655      #if ( defined(RBA_FLSRH850P1xC_FLASH) || defined(RBA_FLSV850R1x_FLASH) || defined(RBA_FLSRH850xx_FLASH) )
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   656      FEE_LL_ROBUST_SECTOR_OVERFLOW_BLANK_CHK_E,      /* Check if the page is blank, transfer only programmed pages. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   657      FEE_LL_ROBUST_SECTOR_OVERFLOW_BLANK_CHK_WAIT_E, /* Wait for Blank check operation to complete. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   658      #endif /* #if ( defined(RBA_FLSRH850P1xC_FLASH) || defined(RBA_FLSV850R1x_FLASH) || defined(RBA_FLSRH850xx_FLASH) ) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   659  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   660      FEE_LL_ROBUST_SECTOR_OVERFLOW_READ_PAGE_E,      /* Read out the programmed page in an internal buffer. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   661      FEE_LL_ROBUST_SECTOR_OVERFLOW_READ_PAGE_WAIT_E, /* Wait for Read operation to complete. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   662      FEE_LL_ROBUST_SECTOR_OVERFLOW_COPY_DATA_E,      /* Copy data to new sector. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   663      FEE_LL_ROBUST_SECTOR_OVERFLOW_COPY_DATA_WAIT_E, /* Wait for Write operation to complete. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   664      FEE_LL_ROBUST_SECTOR_OVERFLOW_VERIFY_DATA_E,    /* Verify the copied data. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   665      FEE_LL_ROBUST_SECTOR_OVERFLOW_VERIFY_DATA_WAIT_E,/* Wait for Verify operation to complete. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   666      FEE_LL_ROBUST_SECTOR_OVERFLOW_VERIFY_SUCCESS_E, /* Check if more bytes are left to be programmed. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   667      FEE_LL_ROBUST_SECTOR_OVERFLOW_WR_UM_E,          /* Write Used marker in the latest sector. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   668      FEE_LL_ROBUST_SECTOR_OVERFLOW_SORT_SECT_E,      /* Sort sectors */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   669      FEE_LL_ROBUST_SECTOR_OVERFLOW_ERROR_E,          /* Error state for all kinds of error in this state machine. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   670      FEE_LL_ROBUST_SECTOR_OVERFLOW_ERASE_E           /* Re-erase the older sector, this state is reached for error handling. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   671  }Fee_LLRobustSectOverflow_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   672  #endif /* #if defined (FEE_PRV_ROBUST_SECT_OVERFLOW) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   673  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   674  /* Read / write order type */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   675  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   676  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   677      uint32                              xRdAddress;                     /* Address for reading (Fee_LLReadBlock) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   678      uint32                              xWrAddress;                     /* Address for writing (Fee_LLWriteBlock) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   679      uint32                              xCmpAddress;                    /* Address for comparing (Fee_LLCompBlkInFlash) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   680      uint32                              xCrcAddress;                    /* Address for the CRC (Fee_LLCompBlkInFlash) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   681      uint32                              xCpyAddress;                    /* Address for copying (Fee_LLCompBlkInFlash) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   682      uint32                              AdrHdSearchStart_u32;           /* Start address for the header search after reloads */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   683      uint32                              xStartAddrNextSector_u32;        /* Payload of START-Marker, contains the expected address of the 1. blockheader */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   684  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   685  /* Robust block programming states (Hdpg1 -> Data -> Hdpg2 write) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   686  #if (FEE_PAGES_USED_BY_BLK_HEADER == 2u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   687      uint32                              xHdPg2Address;                   /* Address for writing the header 2nd page. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   688  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   689  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   690  #if !( defined(RBA_FLSRH850P1xC_FLASH) || defined(RBA_FLSV850R1x_FLASH) || defined(RBA_FLSRH850xx_FLASH) )
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   691      uint32                              LastProgrammedAddress_u32;        /* Last programmed page during cache build up. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   692      uint32                              LastValidHdrAddress_u32;          /* Last valid header found during cache build up. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   693  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   694  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   695      Fee_LLSecReorgType_ten              Fee_LLSecReorg_en;                /* State machine for the sector reorganization */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   696      Fee_LLRedundantCpyChk_ten           Fee_LLRedundantCpyChk_en;         /* State machine for checking redundant copy */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   697      Fee_LLCpyBlkFls2Fls_ten             Fee_LLCpyBlkFls2Fls_en;           /* State machine for copying one block from one sector to another one */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   698  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   699  #if defined (FEE_PRV_ROBUST_SECT_OVERFLOW)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   700      Fee_LLRobustSectOverflow_ten        Fee_LLRobustSectOverflow_en;      /* LL state machine for Robust sector overflow */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   701  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   702  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   703      Fee_HLRdWrBlockType_ten             Fee_HLWrBlock_en;                  /* HL state machine for writing a block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   704  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   705  #if(FEE_RB_MAINTAIN != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   706      Fee_HLRdWrBlockType_ten             Fee_HLMtBlock_en;                  /* HL state machine for maintaining a block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   707   #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   708  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   709      Fee_LLWrBlockType_ten               Fee_LLWrBlock_en;                  /* LL State machine for writing a block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   710      Fee_HLRdWrBlockType_ten             Fee_HLRdBlock;                     /* state machine for reading a block High Level */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   711      Fee_LLWrBlockType_ten               Fee_LLNextUsedWrBlock_en;          /* LL state for saving the next write state if a USED marker is necessary in between */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   712      Fee_LLWrBlockType_ten               Fee_LLNextEraseWrBlock_en;         /* LL state for saving the next write state if an erase operation is necessary in between */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   713      Fee_LLCmpBlkType_ten                Fee_LLCompBlk;                     /* LL state machine for comparing data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   714      Fee_LLCpyBlkType_ten                Fee_LLCopyBlk_en;                  /* LL state machine for copying data from the flash to the user buffer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   715      Fee_LLCalcCrcBlkType_ten            Fee_LLCalcCrcBlk_en;               /* LL state machine for calculating the checksum of a block inside the flash */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   716      Fee_LLWrMarkerType_ten              Fee_LLWrMarker_en;                 /* LL state machine for writing a sector marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   717      Fee_LLRdStateType_ten               Fee_LLRdState_en;                  /* LL state machine to read a specified address in the sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   718      Fee_LLBlankCheckType_ten            Fee_LLBlankCheckState_en;          /* LL State machine to perform a blank check */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   719      Fee_LLFndEmptyPgeType_ten           Fee_LLFindEmptyPageState_en;       /* LL state machine to find an empty page within one sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   720      Fee_LLSearchBlkHdrType_ten          Fee_LLSearchBlkHdr_en;             /* LL state machine to find a specified block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   721  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   722  #if((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) || (FEE_RB_ACT_SURVIVAL_EVAL != FALSE))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   723   #if(FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE == 0) /* Unknown block sector reorganiation without cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   724      Fee_LLSearchUnknBlkHdrType_ten      Fee_LLSearchUnknBlkHdr_en;          /* LL state machine to find an unknown block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   725   #else /* Unknown blcok sector reorganiation with cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   726      uint32                              Fee_UnknownBlkCacheAdd_u32;         /* Address till where the cache for unknown block is scanned */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   727      uint16                              Fee_UnknownBlkCacheIdx_u16;         /* Index till which the cache for unknown block is built */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   728      Fee_LLBuildUpUnknownBlkCache_ten    Fee_LLBuildUpCacheUnknownBlk_en;    /* LL state machine to build up the cache for unknown blocks */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   729   #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   730  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   731  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   732  #if(FEE_FAST_CACHE_INIT_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   733      Fee_LLBuildUpCache_ten              Fee_LLBuildUpCache_en;              /* LL state machine to build up the cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   734      Fee_LLBuildUpCacheAllSect_ten       Fee_LLBuildUpCacheAllSect_en;       /* LL state machine to build up the cache for all sectors */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   735  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   736  } Fee_RdWrOrder_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   737  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   738  /* Block header info type */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   739  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   740  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   741      uint32 AdrBlkHeader_u32;    /* Read address for for the function Fee_LLReadBlock and Fee_LLCpyBlkFromFls2Fls */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   742      uint32 BlkCrc32_u32;        /* Block data checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   743      uint16 HdrCrc16_u16;        /* Block header checksum (start value for block data checksum) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   744      uint16 BlkLength_u16;       /* Extracted block length from the block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   745      uint16 FeeIndex_u16;        /* Fee Index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   746      uint8  BlkStatus_u8;        /* Block status */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   747  }Fee_GlobInfoLastRdHeader_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   748  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   749  /* Block write type */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   750  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   751  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   752      uint16  BytesAlrdyConsid_u16;   /* Write offset in user data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   753      uint16  BytesAlrdyCompared_u16;    /* Number of bytes already compared */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   754      uint16  Bytes2Read_u16;          /* Number of bytes to read */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   755      uint8   CompareResult_u8;       /* Result of last Fls_Compare */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   756      uint8   cntWriteRetry_u8;       /* Count number of write retries */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   757      uint8   cntCopies_u8;           /* Count number of written copies */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   758  }Fee_GlobInfoWrBlock_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   759  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   760  /* Sector reorganization type */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   761  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   762  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   763      uint32 xRdAddress_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   764      uint16 xNumBytesAlrdyCopied_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   765      uint16 xNumBytesLeftToRdWr_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   766      uint8  xCntCopies_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   767  #if (FEE_PAGES_USED_BY_BLK_HEADER == 2u)    /* Robust block programming states (Hdpg1 -> Data -> Hdpg2 write) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   768      uint8  xFirstDataPgPgm_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   769  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   770  }Fee_LLSecReorgStruct_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   771  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   772  /* Erase sector types */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   773  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   774  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   775      FEE_ERASESEC_IDLE_E = 0,        /* Idle state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   776      FEE_ERASESEC_CHECK_CACHE_E,     /* Check of cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   777      FEE_ERASESEC_START_E,           /* Erase sequence started */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   778      FEE_ERASESEC_DO_E,              /* Wait until erasing was finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   779      FEE_ERASESEC_WRITE_MARKER_E,    /* Write the sector ERASED marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   780      FEE_ERASESEC_ERROR_E            /* Error state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   781  }Fee_LLEraseStateType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   782  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   783  /* Erase Order type */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   784  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   785  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   786      Fee_LLEraseStateType_ten EraseState_en; /* State machine state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   787      uint8   xPhySectorIdx_u8;               /* Idx of sector that should get erased  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   788  }Fee_LLEraseOrderType_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   789  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   790  /* Block header structure */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   791  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   792  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   793      uint8   Preamble_au8[3];    /* Preambel (0xA53C96) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   794      uint8   BlkStatus_u8;       /* Block status, contains information like security level, etc. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   795      uint16  FeeIndex_u16;       /* FeeIndex */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   796      uint16  BlkLength_u16;      /* Block length without header and block checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   797      uint16  HdrCrc16_u16;       /* Header checksum, start value is 0xCAFE */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   798      uint32  BlkCrc32_u32;       /* Block data checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   799  }Fee_BlkHeader_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   800  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   801  /* Linked function structure */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   802  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   803  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   804      void(* Fee_ResetUsedSectors_pfn)(void);     /* Function for resetting the amount of used sectors */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   805  }Fee_LinkedFunctions_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   806  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   807  #if (FEE_PRV_DEBUG_MONITOR != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   808  #define FEE_DBM_ERROR_ENTRIES   15
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   809  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   810  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   811  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   812      FEE_DBM_ERROR_ERASE_FCT_E,        /* Used in function Fee_LLEraseSector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   813      FEE_DBM_ERROR_LLMARKER_FCT_E,     /* USed in function Fee_LLWriteMarker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   814      FEE_DBM_ERROR_XX_E                /* not used yet....                   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   815  } Fee_DebugMonitoringFct_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   816  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   817  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   818  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   819      uint32                       xSecChngCntVal;             /* value of sector change counter while error occurs */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   820      uint16                       FeeBlkIdx;                  /* if the error couldn't be assigned to a NvmBlock, this is 0xFFFF */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   821      Fee_DebugMonitoringFct_ten   xError;                     /* error number */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   822      uint8                        xErrorInfo;                 /* error info, if necessary */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   823  } FeeDBMErrInfo_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   824  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   825  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   826  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   827      FeeDBMErrInfo_tst  xErrorEntry[FEE_DBM_ERROR_ENTRIES];  /* array of a structure with detail info to the errors */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   828      uint8   idxNewEntry;                /* index points on the next free entry in the xErrorEntry buffer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   829      uint8   ctBuffOverflow;             /* counter countrs how often the FEE_DBM_ERROR_ENTRIES error overflow. Startvalue is 1, used for ProtRAM validation! */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   830  } Fee_DebugMonitoring_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   831  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   832  #define FEE_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   833  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   834  extern Fee_DebugMonitoring_tst Fee_DebugMonitoring;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   835  #define FEE_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   836  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   837  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   838  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   839  #if(FEE_ROBUST_PROG_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   840  /* Ifx robust programming */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   841  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   842  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   843      FEE_ROB_IFX_INIT,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   844      FEE_ROB_IFX_MARK_SECTOR,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   845      FEE_ROB_IFX_STORE_BUFFER,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   846      FEE_ROB_IFX_STORE_BUFFER_WAIT,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   847      FEE_ROB_IFX_COPY_DATA,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   848      FEE_ROB_IFX_STORE_COPY_WAIT,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   849      FEE_ROB_IFX_ERASE_SECTOR,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   850      FEE_ROB_IFX_WRITE_USED_MARK_SECTOR,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   851      FEE_ROB_SORT_SECTOR,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   852      FEE_ROB_IFX_FINISHED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   853  }Fee_RobIfxHdl_e;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   854  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   855  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   856  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   857      Fls_AddressType xStartAddress;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   858      uint8* DataBuffer;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   859      Fls_LengthType numBytes;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   860      uint16 offInBuf_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   861  }Fee_IfxRobustProgramming_t;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   862  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   863  #define FEE_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   864  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   865  extern Fee_IfxRobustProgramming_t Fee_IfxRobustProgramming_s;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   866  extern Fee_RobIfxHdl_e Fee_RobIfxHdl;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   867  #define FEE_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   868  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   869  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   870  #define FEE_START_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   871  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   872  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_RobIfxHandling(uint8 xActLogWrSect_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   873  #define FEE_STOP_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   874  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   875  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   876  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   877  #if ((FEE_RB_MAINTAIN != FALSE) && (FEE_NO_FALLBACK_ACTIVE != FALSE))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   878  /* Additional MainFunction write states in case NoFallback is activated */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   879  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   880  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   881      FEE_WRITE_NOFB_IDLE_E = 0,      /* Idle state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   882      FEE_WRITE_NOFB_MAINTAIN_E,      /* Maintain a NoFallback block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   883      FEE_WRITE_NOFB_BLOCK_E          /* Write a NoFallback block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   884  }Fee_WriteStateNoFb_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   885  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   886  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   887  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   888  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   889      uint32 Fee_Totalfree_bytes;    /* Total number of free bytes  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   890      uint32 Fee_hardThreshold;      /* Hard Threshold configures */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   891      uint32 Fee_softThershold;      /* Soft therosold configured*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   892  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   893  }Fee_FreeByte_thrshold_t;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   894  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   895  /*
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   896  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   897  * Extern declarations
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   898  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   899  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   900  /* Structures and variables */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   901  #define FEE_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   902  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   903  extern CONST(Fee_FlashProp_tst, FEE_CONST)          Fee_FlashProp_st[FEE_NUM_FLASH_BANKS_AVAILABLE];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   904  extern CONST (MemIf_JobResultType, AUTOMATIC)       Fee_JobTypeMapping[FEE_NUM_RET_VAL_E];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   905  extern CONST (Fee_LinkedFunctions_tst, FEE_CONST)   Fee_LinkedFunctions_cst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   906  #define FEE_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   907  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   908  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   909  #define FEE_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   910  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   911  extern P2VAR(uint8, AUTOMATIC, FEE_APPL_DATA)       Fee_PageBytePtr_cpu8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   912  extern VAR(Fee_RdWrOrder_tst, AUTOMATIC)            Fee_RdWrOrder_st;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   913  extern VAR(Fee_LLSectorOrder_tst, AUTOMATIC)        Fee_LLSectorOrder_st[FEE_NUM_FLASH_BANKS_AVAILABLE];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   914  extern VAR(Fee_LLEraseOrderType_tst, AUTOMATIC)     Fee_LLEraseOrder_st;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   915  extern VAR(Fee_OrderFifo_tst, AUTOMATIC)            Fee_OrderFifo_st[FEE_QUEUE_SIZE];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   916  extern VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC) Fee_GlobInfoLastRdHeader_st;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   917  extern VAR(Fee_GlobInfoWrBlock_tst, FEE_VAR)        Fee_GlobInfoWrBlock_st;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   918  extern VAR(Fee_LLSecReorgStruct_tst, FEE_VAR)       Fee_LLSecReorgStruct_st;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   919  extern VAR(MemIf_JobResultType, AUTOMATIC)          Fee_JobResult[FEE_QUEUE_SIZE];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   920  #define FEE_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   921  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   922  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   923  #define FEE_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   924  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   925  extern CONSTP2VAR(uint8, AUTOMATIC, FEE_APPL_DATA)  Fee_MarkerBufBytePtr_cpu8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   926  extern CONSTP2VAR(uint8, AUTOMATIC, FEE_APPL_DATA)  Fee_DataBytePtr_cpu8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   927  #define FEE_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   928  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   929  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   930  #define FEE_START_SEC_VAR_INIT_8
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   931  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   932  extern VAR(uint8, FEE_VAR)                          Fee_Prv_stInit_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   933  extern VAR(uint8, FEE_VAR)                          Fee_Prv_stReorg_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   934  extern VAR(uint8, FEE_VAR)                          Fee_NumFlashBanksUsed_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   935  extern VAR(uint8, AUTOMATIC)                        Fee_idxActQueueBackUp;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   936  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   937  /* Buffer to hold 2nd header page contents. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   938  #if (FEE_PAGES_USED_BY_BLK_HEADER == 2u)    /* Robust block programming states (Hdpg1 -> Data -> Hdpg2 write) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   939  extern VAR(uint8, AUTOMATIC) Fee_hdr2Buffer_au8[FEE_PAGE_LEN];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   940  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   941  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   942  /* Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   943  #if (defined(RBA_FLSIFX_FLASH) || defined(RBA_FLSJDP_FLASH))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   944  extern VAR(uint8, AUTOMATIC)                        Fee_hdrBuffer_au8[FEE_PAGE_LEN];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   945  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   946  /* END Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   947  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   948  #define FEE_STOP_SEC_VAR_INIT_8
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   949  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   950  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   951  #define FEE_START_SEC_VAR_INIT_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   952  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   953  extern VAR(MemIf_StatusType, FEE_VAR)               Fee_GlobModuleState_st;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   954  extern VAR(Fee_Rb_WorkingStateType_ten, AUTOMATIC)  Fee_Rb_WorkingStateBackUp_en;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   955  #define FEE_STOP_SEC_VAR_INIT_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   956  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   957  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   958  #define FEE_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   959  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   960  extern VAR(uint8, AUTOMATIC)                        Fee_idxLLSectorOrder_au8[FEE_NUM_FLASH_BANKS_AVAILABLE];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   961  extern VAR(uint8, FEE_VAR)                          Fee_idxActQueue_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   962  extern VAR(uint8, FEE_CONST)                        Fee_CacheUpdCompForSect_au8[FEE_NUM_FLASH_BANKS_AVAILABLE];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   963  extern VAR(uint8, AUTOMATIC)                        Fee_RdWrRetries_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   964  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   965  #if (FEE_RB_ACT_ERASE_SUSPENSION != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   966  extern VAR(boolean, AUTOMATIC) Fee_Prv_stSuspendActiv_b;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   967  extern VAR(boolean, AUTOMATIC) Fee_Prv_stHardReOrgErase_b;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   968  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   969  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   970  #if (FEE_RB_ADDONS_CCAS == TRUE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   971  extern VAR(boolean, AUTOMATIC) Fee_Rb_stRequestStopMode_b;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   972  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   973  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   974  #define FEE_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   975  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   976  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   977  #define FEE_START_SEC_VAR_CLEARED_32
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   978  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   979  extern VAR(uint32, AUTOMATIC)                       Fee_llMarkerPageBuf_au32[FEE_SEC_HEADER_SIZE / 4u];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   980  extern VAR(uint32, FEE_CONST)                       Fee_Cache_au32[FEE_NUM_BLOCKS];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   981  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   982  #if(FEE_ROB_FEATURE_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   983  extern VAR(uint32, AUTOMATIC)                       Fee_DataByteStartCrc_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   984  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   985  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   986  #define FEE_STOP_SEC_VAR_CLEARED_32
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   987  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   988  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   989  #define FEE_START_SEC_VAR_CLEARED_SECURED_32
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   990  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   991  extern VAR(uint32, AUTOMATIC)                       Fee_llPageBuf_au32[(FEE_LL_PAGEBUFFSIZE / 4u) + 2u];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   992  extern VAR(uint32, AUTOMATIC)                       Fee_llDataBuf_au32[FEE_LL_DATABUFFSIZE / 4u];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   993  #define FEE_STOP_SEC_VAR_CLEARED_SECURED_32
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   994  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   995  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   996  #ifdef FEE_PRV_USE_ROM_TABLE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   997  #define FEE_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   998  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   999  extern CONST(Fee_BlockPropertiesType_tst, FEE_CONST)  Fee_BlockProperties_st[FEE_NUM_BLOCKS];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1000  #define FEE_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1001  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1002  #else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1003  #define FEE_START_SEC_VAR_INIT_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1004  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1005  extern VAR(Fee_BlockPropertiesType_tst, AUTOMATIC)  Fee_BlockProperties_st[FEE_NUM_BLOCKS];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1006  #define FEE_STOP_SEC_VAR_INIT_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1007  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1008  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1009  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1010  #if (FEE_NO_FALLBACK_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1011  #define FEE_START_SEC_VAR_INIT_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1012  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1013  extern Fee_WriteStateNoFb_ten Fee_WriteStateNoFb_en;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1014  #define FEE_STOP_SEC_VAR_INIT_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1015  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1016  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1017  #define FEE_START_SEC_VAR_CLEARED_32
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1018  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1019  extern VAR(uint32, AUTOMATIC)   Fee_Rb_NoFallback_RemAdr_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1020  #define FEE_STOP_SEC_VAR_CLEARED_32
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1021  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1022  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1023  #define FEE_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1024  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1025  extern VAR(boolean, AUTOMATIC)  Fee_Rb_NoFallback_LastBlockCfg_b;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1026  extern VAR(boolean, AUTOMATIC)  Fee_Rb_InvalidateOldCopy_b;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1027  extern VAR(boolean, AUTOMATIC)  Fee_Rb_MaintainRun_b;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1028  #define FEE_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1029  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1030  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1031  #define FEE_START_SEC_CONST_8
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1032  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1033  extern const uint8 Fee_NoFallbackMarkerPattern[FEE_PAGES_USED_BY_BLK_HEADER * FEE_PAGE_LEN];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1034  #define FEE_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1035  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1036  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1037  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1038  #if((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) && (FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE != 0))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1039  /* Unknown blcok sector reorganiation with cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1040  #define FEE_START_SEC_VAR_CLEARED_32
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1041  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1042  extern VAR(uint32, AUTOMATIC) Fee_UnknownBlkCache_Addr_au32[FEE_RB_ACT_UNKNOWN_BLK_CACHE_ARRAY_SIZE];   /* Address of unknown block. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1043  #define FEE_STOP_SEC_VAR_CLEARED_32
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1044  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1045  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1046  #define FEE_START_SEC_VAR_CLEARED_16
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1047  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1048  extern VAR(uint16, AUTOMATIC) Fee_UnknownBlkCache_FeeIndex_u16[FEE_RB_ACT_UNKNOWN_BLK_CACHE_ARRAY_SIZE]; /* Index of unknown block. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1049  #define FEE_STOP_SEC_VAR_CLEARED_16
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1050  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1051  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1052  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1053  /* Lower Layer functions of the Fee */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1054  #define FEE_START_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1055  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1056  extern FUNC(uint32, FEE_CODE) Fee_CalculateNumOfFreeBytesInCurSector(VAR(uint32, FEE_VAR) DataEndAdr_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1057  extern FUNC(void, FEE_CODE)   Fee_InitVarAndState(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1058  extern FUNC(void, FEE_CODE)   Fee_InitCache(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1059  extern FUNC(void, FEE_CODE)   Fee_InitOrderFifoBuffer(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1060  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1061  /* Active sector detection */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1062  extern FUNC(void ,FEE_CODE)   Fee_LLSearchSectors(P2VAR(Fee_stSecDet_tst, AUTOMATIC, FEE_APPL_DATA) Fee_stSecDet_ps);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1063  extern FUNC(uint8, FEE_CODE)  Fee_LLDetectActiveSector(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1064  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLFindEmptyPage(uint8 PhySectIdxUsedSect_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1065  extern FUNC(uint8, FEE_CODE)  Fee_GetMostCurrentSectorIdx(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1066  extern FUNC(void, FEE_CODE)   Fee_CheckErasedSectorEmpty(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1067  extern FUNC(uint8, FEE_CODE)  Fee_GetPhysSectorByAddress(VAR(uint32, AUTOMATIC) Address_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1068  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1069  /* Marker handling */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1070  extern FUNC(Fee_stRetVal_ten,FEE_CODE)  Fee_LLWriteMarker(VAR(uint8, AUTOMATIC) PhySectIdx_u8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1071                                                            VAR(uint8, AUTOMATIC) MarkerID_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1072  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1073  /* Erase functions */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1074  extern FUNC(Fee_stRetVal_ten,FEE_CODE)  Fee_LLEraseSector(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1075  extern FUNC(void,FEE_CODE)              Fee_LLSetEraseSector(VAR(uint8, AUTOMATIC) EraseLogIdx);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1076  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1077  /* Block header access */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1078  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLSearchNextBlkHeader(P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) Fee_GlobInfoLastRdHeader_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1079                                                                    VAR(uint8, AUTOMATIC) CachedAccess_u8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1080                                                                    VAR(uint8, AUTOMATIC) FastCacheUpdate_u8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1081                                                                    VAR(boolean, AUTOMATIC) xForcePageBufReload_b,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1082                                                                    VAR(uint32, AUTOMATIC) strAddrHdrSearch);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1083  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1084  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLSearchSpecifiedBlkHeader(VAR(uint16, AUTOMATIC) FeeIdx_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1085                                                                         P2VAR(uint32, AUTOMATIC, FEE_APPL_DATA) LastHdrAddr_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1086                                                                         P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) GlobBlkHdr_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1087                                                                         VAR(boolean, AUTOMATIC) SearchRetry_b);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1088  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1089  #if((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) || (FEE_RB_ACT_SURVIVAL_EVAL != FALSE))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1090  /* Unknown blcok sector reorganiation without cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1091  #if(FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE == 0)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1092  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLSearchUnknownBlkHeader(P2VAR(uint32, AUTOMATIC, FEE_APPL_DATA) StartHdrAddr_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1093                                                                       P2VAR(uint32, AUTOMATIC, FEE_APPL_DATA) LastHdrAddr_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1094                                                                       P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) GlobBlkHdr_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1095                                                                       P2VAR(boolean, AUTOMATIC, FEE_APPL_DATA) SearchRetry_ptr);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1096  #else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1097  /* Unknown blcok sector reorganiation with cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1098  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_BuildUpCacheUnknownBlk(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1099  #endif /* (FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE == 0) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1100  #endif /* ((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) || (FEE_RB_ACT_SURVIVAL_EVAL != FALSE)) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1101  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1102  extern FUNC(uint32, FEE_CODE) Fee_LLGetSecStartAddress(VAR(uint8, AUTOMATIC) xPhySectorIdx_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1103  extern FUNC(uint32, FEE_CODE) Fee_LLGetSecEndAddress(VAR(uint8, AUTOMATIC) xPhySectorIdx_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1104  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1105  /* Verification and handling of blocks */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1106  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLCompBlkInFlash(P2CONST(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) HeaderInfo_pcst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1107                                                               P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) Data_pcu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1108  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLCalcBlkCrcInFlash(P2CONST(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) HeaderInfo_pcst);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1109  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLCpyBlkFromFls2Fls(P2CONST(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) Fee_GlobInfoLastRdHeader_pcst, boolean Fee_WriteTwice_b);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1110  #if defined (FEE_PRV_ROBUST_SECT_OVERFLOW)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1111  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LlRobustSectorOverflow(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1112  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1113  extern FUNC(void, FEE_CODE)             Fee_LLPrepMarkerBufWithMarkerData(P2CONST(Fee_MarkerProp_t, AUTOMATIC, FEE_APPL_DATA) Marker_pcst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1114                                                                            P2VAR(uint8, AUTOMATIC, FEE_APPL_DATA) MarkerBuf_pu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1115  extern FUNC(void, FEE_CODE)             Fee_LLCopyPageBuff2Marker(P2VAR(Fee_MarkerProp_t, AUTOMATIC, FEE_APPL_DATA) Marker_pst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1116                                                                    P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) PageBuf_pcu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1117  extern FUNC(void, FEE_CODE)             Fee_LLPrepPageBufWithHdrDataStart(P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) HeaderInfo_pst);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1118  extern FUNC(void, FEE_CODE)             Fee_LLPrepPageBufWithHdrDataEnd(P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) HeaderInfo_pst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1119                                                                                 P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) Data_pcu8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1120                                                                                 VAR(uint32, AUTOMATIC) BlkCrc32_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1121  #define FEE_STOP_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1122  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1123  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1124  LOCAL_INLINE FUNC(void, FEE_CODE)       Fee_LLCopyPageBuff2HeaderStart(P2VAR(Fee_BlkHeader_tst, AUTOMATIC, FEE_APPL_DATA) BlkHdr_pst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1125                                                                         P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) PageBuf_pcu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1126  #if(FEE_FAST_CACHE_INIT_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1127  LOCAL_INLINE FUNC(void, FEE_CODE)       Fee_LLCopyPageBuff2HeaderIdxAndCrc(P2VAR(Fee_BlkHeader_tst, AUTOMATIC, FEE_APPL_DATA) BlkHdr_pst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1128                                                                             P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) PageBuf_pcu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1129  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1130  #define FEE_START_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1131  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1132  #if !( defined(RBA_FLSRH850P1xC_FLASH) || defined(RBA_FLSV850R1x_FLASH) || defined(RBA_FLSRH850xx_FLASH) )
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1133  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_SearchLastBlkHeader(P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) Fee_GlobInfoLastRdHeader_ptr);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1134  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1135  #define FEE_STOP_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1136  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1137  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1138  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1139  #define FEE_START_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1140  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1141  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1142  extern FUNC(uint32, FEE_CODE)           Fee_SearchHighestCacheEntry(VAR(uint32,FEE_VAR) UpperBoundary_u32, VAR(uint8, FEE_VAR) SectIdx_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1143  extern FUNC(void, FEE_CODE)             Fee_InvalidateCacheByAddress(VAR(uint32,FEE_VAR) xAddress_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1144  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1145  extern FUNC(void, FEE_CODE)             Fee_LLCopyPageBuff2HeaderMid(P2VAR(Fee_BlkHeader_tst, AUTOMATIC, FEE_APPL_DATA) BlkHdr_pst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1146                                                                       P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) PageBuf_pcu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1147  extern FUNC(void, FEE_CODE)             Fee_LLCopyPageBuff2HeaderEnd(P2VAR(Fee_BlkHeader_tst, AUTOMATIC, FEE_APPL_DATA) BlkHdr_pst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1148                                                                       P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) PageBuf_pcu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1149  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLCopyData2Buffer(P2CONST(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) Fee_GlobInfoLastRdHeader_pcst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1150                                                                    P2VAR(uint8, AUTOMATIC, FEE_APPL_DATA) DataPtr_pu8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1151                                                                    VAR(uint16, FEE_VAR) DataOffset_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1152                                                                    VAR(uint16, FEE_VAR) DataLength_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1153  extern FUNC(void, FEE_CODE)             Fee_IncAddressInsideSector(P2VAR(uint32, AUTOMATIC, FEE_APPL_DATA) Address_u32,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1154                                                                     VAR(uint16, FEE_VAR) numBytes_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1155                                                                     VAR(boolean, FEE_VAR) EnsurePageAlign_b);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1156  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1157  /* Sector reorganization */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1158  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLCheckReorganizationNeed(VAR(uint32, AUTOMATIC) Threshold_u32,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1159                                                                        VAR(uint16, AUTOMATIC) DataLength_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1160  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLSectorReorganization(P2VAR(boolean, AUTOMATIC, FEE_APPL_DATA) SectReorgInterSt_pb);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1161  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1162  /* Block writes */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1163  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_HLWriteBlock(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1164  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLWriteBlock(P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) Info_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1165                                                           P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) Data_pcu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1166  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1167  /* Block reading */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1168  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_HLReadBlock(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1169  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLReadBlock(P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) Info_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1170                                                          P2VAR(uint8,AUTOMATIC, FEE_APPL_DATA) Data_ptr);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1171   #if(FEE_RB_MAINTAIN != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1172      /* Block maintaining*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1173      extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_HLMaintainBlock(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1174   #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1175  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1176  /* Order handling */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1177  extern FUNC(Std_ReturnType, FEE_CODE)   Fee_HLPlaceOrder(VAR(uint16, AUTOMATIC) Blocknumber_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1178                                                           VAR(uint16, AUTOMATIC) Offset_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1179                                                           P2VAR(uint8, AUTOMATIC, FEE_APPL_DATA) DataBufferPtr_pu8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1180                                                           VAR(uint16, AUTOMATIC) Length_16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1181                                                           VAR(Fee_HlMode_ten, AUTOMATIC) Mode_en);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1182  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1183  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1184  /* Cache handling */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1185  extern FUNC(uint32, FEE_CODE) Fee_LLGetAddressFromCache(VAR(uint16, AUTOMATIC) FeeIdx_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1186  extern FUNC(boolean, FEE_CODE) Fee_LLCheckAddressInCache(VAR(uint32, AUTOMATIC) AdrInSector_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1187  extern FUNC(void, FEE_CODE)   Fee_LLUpdateAddressInCache(VAR(uint16, AUTOMATIC) FeeIdx_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1188                                                           VAR(uint32, AUTOMATIC) Addr_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1189  extern FUNC(void, FEE_CODE)  Fee_LLUpdateCacheStForSect(VAR(uint8, AUTOMATIC) PhySecIdx_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1190  extern FUNC(void, FEE_CODE)  Fee_LLEraseCacheStForSect(VAR(uint8, AUTOMATIC) PhySecIdx_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1191  extern FUNC(uint8, FEE_CODE) Fee_LLGetCacheUpdateStForSect(VAR(uint8, AUTOMATIC) PhySecIdx_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1192  extern FUNC(uint8, FEE_CODE) Fee_LLGetCacheUpdateStForAllSect(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1193  extern FUNC(boolean, FEE_CODE) Fee_SrvBinarySearchInBlockProp(VAR(uint16, AUTOMATIC) FeeIdx_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1194                                                                P2VAR(uint16, AUTOMATIC, FEE_APPL_DATA) CacheIdx_pu16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1195  #define FEE_STOP_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1196  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1197  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1198  #if(FEE_FAST_CACHE_INIT_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1199  LOCAL_INLINE FUNC(boolean, FEE_CODE) Fee_SrvBinarySearchInBlockPropFast(VAR(uint16, AUTOMATIC) FeeIdx_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1200                                                                          P2VAR(uint16, AUTOMATIC, FEE_APPL_DATA) CacheIdx_pu16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1201  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1202  #define FEE_START_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1203  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1204  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_BuildUpCache(VAR(uint32, AUTOMATIC) StartAdr_u32,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1205                                                           VAR(uint32, AUTOMATIC) EndAdr_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1206  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_BuildUpCacheForAllSect(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1207  #define FEE_STOP_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1208  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1209  /* FEE_FAST_CACHE_INIT_ACTIVE != FALSE */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1210  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1211  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1212  #define FEE_START_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1213  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1214  /* Services */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1215  extern FUNC(void, FEE_CODE)  Fee_SrvMemSet8(P2VAR(uint8, AUTOMATIC, FEE_APPL_DATA) xDest_pu8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1216                                              VAR(uint32, FEE_VAR) xPattern_u32,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1217                                              VAR(uint32, FEE_VAR) numBytes_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1218  extern FUNC(void, FEE_CODE)  Fee_SrvMemCopy8(P2VAR(uint8, AUTOMATIC, FEE_APPL_DATA) xDest_pu8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1219                                               P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) xSrc_pcu8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1220                                               VAR(uint32, FEE_VAR) numBytes_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1221  extern FUNC(void, FEE_CODE)  Fee_SrvSetFifoMode(VAR(Fee_HlMode_ten, AUTOMATIC) Mode_en,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1222                                                  VAR(uint16, AUTOMATIC) xJobType_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1223  extern FUNC(Fee_HlMode_ten, FEE_CODE) Fee_SrvGetFifoMode(VAR(uint16, AUTOMATIC) xJobType_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1224  extern FUNC(void, FEE_CODE)           Fee_LoadNextOrder(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1225  extern FUNC(uint8, FEE_CODE)          Fee_SearchNextOrder(boolean isIntOrder_b);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1226  extern FUNC(void, FEE_CODE)           Fee_UpdateStatus(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1227  extern FUNC(void, FEE_CODE)           Fee_TriggerHardSectorReorg(VAR(Fee_Rb_WorkingStateType_ten, FEE_VAR) WorkingState_en);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1228  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1229  extern FUNC(Std_ReturnType, FEE_CODE) Fee_CheckBlockCfg(VAR(uint8, AUTOMATIC)  ApiId_u8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1230                                                             VAR(uint16, AUTOMATIC) BlockNum_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1231  extern FUNC(Std_ReturnType, FEE_CODE) Fee_CheckModuleSt(VAR(uint8, AUTOMATIC)  ApiId_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1232  extern FUNC(Std_ReturnType, FEE_CODE) Fee_CheckAdrPtr(VAR(uint8, AUTOMATIC) ApiId_u8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1233                                                        P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) DataBufferPtr_pcu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1234  extern FUNC(Std_ReturnType, FEE_CODE) Fee_CheckBlkOfs(VAR(uint8, AUTOMATIC) ApiId_u8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1235                                                        VAR(uint16, AUTOMATIC) BlockNum_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1236                                                        VAR(uint16, AUTOMATIC) BlockOfs_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1237  extern FUNC(Std_ReturnType, FEE_CODE) Fee_CheckBlkLen(VAR(uint8, AUTOMATIC) ApiId_u8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1238                                                        VAR(uint16, AUTOMATIC) BlockNum_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1239                                                        VAR(uint16, AUTOMATIC) BlockOfs_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1240                                                        VAR(uint16, AUTOMATIC) BlockLen_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1241  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1242  /* Miscellaneous */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1243  extern FUNC(void, FEE_CODE)   Fee_CheckFlsJobResult(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1244  extern void (* Fee_Prv_ResetUsedSectors_pfn)(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1245  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1246  #if (FEE_PRV_DEBUG_MONITOR != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1247  extern FUNC(void ,FEE_CODE) Fee_DBM_RepError(VAR(uint16,FEE_VAR) FeeBlkIdx, VAR(Fee_DebugMonitoringFct_ten,FEE_VAR) xError, VAR(uint8,FEE_VAR) xErrorInfo);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1248  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1249  #define FEE_STOP_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1250  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1251  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1252  /*
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1253  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1254  * Inline functions (Necessary for fastening up the start up time)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1255  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1256  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1257  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1258   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1259   * Fee_LLCopyPageBuff2HeaderStart(): Extract the start of the block header data
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1260   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1261   * This function extracts the preamble of the block header data out
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1262   * of the page buffer (called every 8th byte of the flash).
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1263   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1264   * Hint: Block header structure:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1265   *       {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1266   *          uint8   Preamble_au8[3];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1267   *          uint8   BlkStatus_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1268   *          uint16  FeeIndex_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1269   *          uint16  BlkLength_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1270   *          uint16  HdrCrc16_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1271   *          uint32  BlkCrc32_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1272   *       }Fee_BlkHeader_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1273   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1274   * \param    BlkHdr_pst:    Pointer to the block header that was
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1275   *                          found in the flash.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1276   * \param    PageBuf_pu8:   Pointer to the page buffer
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1277   * \return
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1278   * \retval   none
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1279   * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1280   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1281   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1282   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1283  LOCAL_INLINE FUNC(void, FEE_CODE) Fee_LLCopyPageBuff2HeaderStart(P2VAR(Fee_BlkHeader_tst, AUTOMATIC, FEE_APPL_DATA) BlkHdr_pst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1284                                                                   P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) PageBuf_pcu8)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1285  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1286      BlkHdr_pst->Preamble_au8[0] = PageBuf_pcu8[0];      /* 0xA53C96 <- [0]: A5, [1]: 3C, [2]: 96 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1287      BlkHdr_pst->Preamble_au8[1] = PageBuf_pcu8[1];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1288      BlkHdr_pst->Preamble_au8[2] = PageBuf_pcu8[2];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1289  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1290  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1291  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1292  #if(FEE_FAST_CACHE_INIT_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1293  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1294   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1295   * Fee_LLCopyPageBuff2HeaderIdxAndCrc(): Extract the header checksum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1296   *  and the block index out of the block header data
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1297   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1298   * This function extracts the block header data out of the page buffer.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1299   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1300   * Hint: Block header structure:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1301   *       {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1302   *          uint8   Preamble_au8[3];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1303   *          uint8   BlkStatus_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1304   *          uint16  FeeIndex_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1305   *          uint16  BlkLength_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1306   *          uint16  HdrCrc16_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1307   *          uint32  BlkCrc32_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1308   *       }Fee_BlkHeader_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1309   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1310   * \param    BlkHdr_pst:    Pointer to the block header that was
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1311   *                          found in the flash.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1312   * \param    PageBuf_pcu8:  Pointer to the page buffer
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1313   * \return
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1314   * \retval   none
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1315   * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1316   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1317   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1318   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1319  LOCAL_INLINE FUNC(void, FEE_CODE) Fee_LLCopyPageBuff2HeaderIdxAndCrc(P2VAR(Fee_BlkHeader_tst, AUTOMATIC, FEE_APPL_DATA) BlkHdr_pst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1320                                                                       P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) PageBuf_pcu8)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1321  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1322      /* 0xD2E9 <- [4]: D2, [5]: E9 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1323      BlkHdr_pst->FeeIndex_u16    = (uint16)((uint16)(((uint16)(PageBuf_pcu8[4])) << 8u)  | (uint16)(PageBuf_pcu8[5]));
	ld.bu	d0,[a10]32
.L1245:
	sha	d15,d0,#8
.L1246:
	ld.bu	d0,[a10]33
.L1247:
	or	d15,d0
.L1248:
	st.h	[a10]4,d15
.L1249:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1324  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1325      /* 0xABCD <- [8]: AB, [9]: CD */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1326      BlkHdr_pst->HdrCrc16_u16    = (uint16)((uint16)(((uint16)(PageBuf_pcu8[8])) << 8u)  | (uint16)(PageBuf_pcu8[9]));
	ld.bu	d15,[a10]36
.L1250:
	sha	d15,d15,#8
.L1251:
	ld.bu	d0,[a10]37
.L1252:
	or	d15,d0
.L1253:
	st.h	[a10]8,d15
.L482:
	ld.hu	d15,[a10]8
.L1254:
	jne	d15,d2,.L185
.L1255:
	jne	d9,#1,.L186
.L1256:
	mov	d12,d13
.L1257:
	j	.L187
.L186:
.L187:
	ld.hu	d2,[a10]4
.L617:
	lea	a2,[a10]24
.L489:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     1  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     2  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     3  #ifndef RBA_FEEFS1_PRV_H
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     4  #define RBA_FEEFS1_PRV_H
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     5  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     6  #if(defined(FEE_PRV_CFG_SELECTED_FS) && (1 == FEE_PRV_CFG_SELECTED_FS))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     7  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     8  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	     9   **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    10   * \moduledescription
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    11   *           AUTOSAR FEE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    12   *           According to Document Version 3.0.0, Part of Release 4.0, Revision 2
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    13   * \scope    INTERN
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    14   **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    15   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    16  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    17  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    18  /*
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    19  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    20  * Defines/Macros
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    21  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    22  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    23  /* General defines */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    24  #define FEE_MAXUINT32               (0xFFFFFFFFuL)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    25  #define FEE_MAXUINT16               (0xFFFFu)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    26  #define FEE_NULL                    (0u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    27  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    28  #define FEE_MARKER_PATTERN          0xCAFEu                 /* Pattern to identify a marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    29  #define FEE_NUM_MARKER_IN_HEADER    (FEE_NUM_MARKER_E - 1)  /* A sector has at least 4 states:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    30                                                                 ERASED -> USED -> FULL -> ERASE_REQ
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    31                                                                 Value is also in used in Fee_Process.pm */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    32  #define FEE_NO_SEC_IDX_FOUND        0xFFu                   /* No active sector / matching flash bank found */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    33  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    34  #define FEE_MARKER_SIZE             8u                      /* Each marker has a size of 8 Bytes (fix value is used in Fee_Process.pm) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    35  #define FEE_MARKER_CS_SIZE          2u                      /* Size of CRC16 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    36  #define FEE_LL_DATABUFFSIZE         256u                    /* Size of the internal data buffer used for writing */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    37                                                              /* (The page buffer size is auto generated) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    38  #define FEE_LL_CRC_CALC_RESTRICTION FEE_LL_DATABUFFSIZE     /* Restriction for the Crc calculation */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    39  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    40  #define FEE_FREE_PAGES_FOR_ERASED_ST    1u                  /* Number of pages containing the erased value */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    41  #define FEE_SIZE_OF_BLOCK_CS            4                   /* Size of block checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    42  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    43  /* Special values for sector change counter within the RAM array */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    44  #define FEE_SEC_CHANGE_CNT_RESET_REQ  0xFFFFFFFFuL
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    45  #define FEE_SEC_CHANGE_CNT_UNDEF      FEE_SEC_CHANGE_CNT_RESET_REQ
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    46  #define FEE_SEC_CHANGE_CNT_ERASED     (FEE_SEC_CHANGE_CNT_RESET_REQ - 1u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    47  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    48  /* Mask for accessing block flags in the configuration and in the block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    49  #define FEE_FLAG_SEC_LEVEL_MSK      0x0001u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    50  #define FEE_FLAG_SEC_LEVEL_BP       0u       /* Security level setting is bit 0 within the block flags */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    51  #define FEE_BLK_INT_DOUBLE_STORAGE  1u       /* Internal double block storage definition */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    52  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    53  #define FEE_FLAG_DATAFILTERTYPE_ATTR_MSK      0x0006u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    54  #define FEE_FLAG_DATAFILTERTYPE_ATTR_BP       1u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    55  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    56  #define FEE_FLAG_INVALID_MSK        0x08u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    57  #define FEE_FLAG_INVALID_BP         3u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    58  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    59  #define FEE_FLAG_SURV_ATTR_MSK      0x0010u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    60  #define FEE_FLAG_SURV_ATTR_BP       4u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    61  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    62  #define FEE_FLAG_ROBUST_ATTR_MSK    0x0020
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    63  #define FEE_FLAG_ROBUST_ATTR_BP     5
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    64  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    65  #define FEE_FLAG_NOFALLBACK_MSK     0x0040u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    66  #define FEE_FLAG_NOFALLBACK_BP      6u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    67  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    68  #define FEE_MASK_BIT7               (uint8)0x80
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    69  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    70  /* Mask for accessing block flags (upper byte only) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    71  #define FEE_FLAG_JOBTYPE_MSK        0x0300u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    72  #define FEE_FLAG_JOBTYPE_BP         8u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    73  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    74  #define FEE_FLAG_JOBPRIO_MSK        0x0400u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    75  #define FEE_FLAG_JOBPRIO_BP         10u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    76  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    77  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    78  /* Macros for the conversion of the Sec Level settings:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    79   * Internal storage level:      Sec Level 1  --> 0 / Sec Level 2 --> 1
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    80   * User Config storage level:   Sec Level 1  --> 1 / Sec Level 2 --> 2 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    81  #define FEE_INT_TO_USER_STORAGE_TYPE(SEC_LEVEL) ((SEC_LEVEL) + 1u)   /* Convert the Sec Level setting from
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    82                                                                         header/properties == internal to user config format */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    83  #define FEE_CNT_FIRST_COPY          0u       /* Internal counter value for first copy */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    84  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    85  /* Erase actions */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    86  #define FEE_NO_SECTOR_TO_ERASE      0xFFu    /* No sector has to be erased */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    87  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    88  /* Block header validation */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    89  #define FEE_BLK_HEADER_PREAMBEL             0xA53C96uL                                  /* Pattern of preambel */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    90  #define FEE_BLK_HEADER_PREAMBEL_BYTE_2      (FEE_BLK_HEADER_PREAMBEL & 0xFFu)           /* 0x96 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    91  #define FEE_BLK_HEADER_PREAMBEL_BYTE_1      ((FEE_BLK_HEADER_PREAMBEL >> 8u) & 0xFFu)   /* 0x3C */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    92  #define FEE_BLK_HEADER_PREAMBEL_BYTE_0      ((FEE_BLK_HEADER_PREAMBEL >> 16u) & 0xFFu)  /* 0xA5 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    93  #define FEE_BLK_HEADER_SIZE                 14u                                         /* Size of block header in bytes */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    94  #define FEE_BKL_HEADER_REDUCTION            FEE_VIRTUAL_PAGE_SIZE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    95  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    96  /* Calculation of free byte in current sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    97  #define FEE_LL_SECTOR_USED_FOR_WRITING      Fee_RdWrOrder_st.xWrAddress
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    98  #define FEE_LL_SECTOR_USED_FOR_READING      Fee_RdWrOrder_st.xRdAddress
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	    99  #define FEE_LL_SECTOR_USED_FOR_COMPARING    Fee_RdWrOrder_st.xCmpAddress
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   100  #define FEE_LL_SECTOR_USED_FOR_CRC_CALC     Fee_RdWrOrder_st.xCrcAddress
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   101  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   102  /* Cache usage*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   103  #define FEE_INVLD_BLOCK_PROP_IDX        0xFFFFFFFFuL    /* Invalid Fee Idx that can be passed to the block header search function
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   104                                                             in order to ignore the cache during the init phase */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   105  #define FEE_USE_CACHED_ACCESS               0x01u       /* Use the cache method for finding the next block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   106  #define FEE_USE_MANUAL_ACCESS               0x00u       /* Search manually for headers */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   107  #define FEE_UPDATE_CACHE_IN_INIT            0x01u       /* Update the cache for fast access in init */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   108  #define FEE_NO_CACHE_UPDATE                 0x00u       /* Do not use the fast access method (only evaluated blocks are added to the cache) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   109  #define FEE_CACHE_UPD_NOT_COMP_FOR_SECT     0x00u       /* The respective sector was not completely checked */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   110  #define FEE_CACHE_UPD_COMP_FOR_SECT         0x01u       /* The respective sector was checked completely */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   111  #define FEE_CACHE_UPD_COMP_FOR_ALL_SECT     0x02u       /* All sectors have been checked completely */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   112  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   113  #define Fee_LLInvalidateAddressInCache(FEEIDX) Fee_LLUpdateAddressInCache(FEEIDX, FEE_CACHE_INIT_VALUE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   114  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   115  /* Fee init defines */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   116  #define FEE_PRV_ST_INIT_RUNNING             0x00u       /* Module is still uninitialized */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   117  #define FEE_PRV_ST_INIT_DONE                0x01u       /* Module has been initialized */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   118  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   119  /* Fee reorganization defines */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   120  #define FEE_PRV_ST_REORG_IDLE               0x00u       /* No reorganization is running */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   121  #define FEE_PRV_ST_REORG_STANDARD_RUNNING   0x01u       /* Standard reorganization is running */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   122  #define FEE_PRV_ST_REORG_AFTERB_RUNNING     0x02u       /* "Afterburner" of the reorganization is runnning */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   123  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   124  /* Amount of sectors used by the emulation  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   125  #define FEE_NUM_FLASH_BANKS         Fee_NumFlashBanksUsed_u8  /* Number of sectors which can be used by the Fee */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   126  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   127  #if (FEE_RB_ADDONS_CCAS == TRUE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   128  #define FEE_RB_REQUEST_STOP_MODE            TRUE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   129  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   130  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   131  #if(FEE_ROBUST_PROG_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   132  #define FEE_ROBMARKER_BUFF_SIZE             96u
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   133  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   134  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   135  #if (FEE_PAGES_USED_BY_BLK_HEADER == 2u)     /* Robust block programming states (Hdpg1 -> Data -> Hdpg2 write) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   136  #define FEE_FIRSTDATAPAGE_NOTPROGRAMMED 0x00u            /* First data pages in Fee_LlFls2FlsCopy is not yet programmed. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   137  #define FEE_FIRSTDATAPAGE_PROGRAMMED     0x01u            /* First data pages in Fee_LlFls2FlsCopy is programmed. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   138  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   139  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   140  /*
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   141  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   142  * Type definitions
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   143  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   144  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   145  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   146  /* Order priority */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   147  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   148  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   149      FEE_NORMAL_PRIO_E = 0,      /* e.g. if FeeImmediateData is configured to no */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   150      FEE_HIGH_PRIO_E   = 1       /* e.g. if FeeImmediateData is configured to yes */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   151  }Fee_HlPriority_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   152  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   153  /* This enumerator list contains the index inside the order queue.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   154   * Attention: The order in the enumerator is from Low (FEE_ADAPTER_JOB) to High (FEE_INTERNAL_JOB).
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   155   *            Do not change this order!
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   156   * */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   157  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   158  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   159      FEE_INTERNAL_JOB,           /* Internal job (reorganization or sector erase) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   160      FEE_NVM_JOB,                /* Nvm job */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   161      FEE_ADAPTER_JOB,            /* Adapter job (e.g. Mx17 Eep) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   162      FEE_QUEUE_SIZE              /* Size of the Fee internal queue (each job type has 1 entry) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   163  }Fee_HlJobType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   164  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   165  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   166  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   167      uint8*  DataBufferPtr_pu8;  /* Pointer to the read- or write-buffer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   168      uint16  FeeIdx_u16;         /* FeeRbBlockPersistentId */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   169      uint16  BlockPropIdx_u16;   /* Respective block properties table index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   170      uint16  Offset_u16;         /* Offset inside block (could be != 0 only for read-orders --> R4.0 Rev1) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   171      uint16  Length_u16;         /* Block length, only required for element-read-jobs */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   172      Fee_HlMode_ten Mode_en;     /* Type of this order: Read, Write, Invalidate */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   173      Fee_HlPriority_ten Prio_en; /* Priority out of the configuration */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   174      uint8   SecLevel_u8;        /* Security level out of the configuration */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   175  }Fee_OrderFifo_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   176  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   177  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   178  /* Hint:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   179   * For calculation of the sector order (old -> new -> erased -> undef) the sector change counter is a valid criteria.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   180   * The lowest valid value points to the eldest data, the most current value to the most current data.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   181   * These following defines are used for an implicit sorting:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   182   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   183   *  +------+------+------+------+------+------+------+------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   184   *  |MarkerPattern|Ident | marker content     |marker CRC16 |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   185   *  +------+------+------+------+------+------+------+------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   186   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   187   *  Sector headers: 12 times available as default
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   188   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   189   *      +------+------+------+------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   190   *    0 |Erased| Used | Full |Erase |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   191   *      +------+------+------+------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   192   *    4 |      |      |      |      |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   193   *      +------+------+------+------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   194   *    8 |      |      |      |      |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   195   *      +------+------+------+------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   196   *      |<---->|
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   197   *        Page
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   198   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   199   * Erased:  Sector was erased successfully. This marker also contains the sector erase counter
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   200   * Used:    Sector contains user data. This marker will be written first before data is written into a sector.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   201   *          This marker also contains the sector change counter.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   202   * Full:    Sector is completely full and must not be considered for searching for the first empty page.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   203   *          This marker also contains the sector change counter.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   204   * Erase:   Sector contains no valid data anymore and can be erased in the background task.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   205   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   206   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   207  enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   208  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   209      FEE_ERASED_MARKER_ID_E = 0x01u, /* Sector was erased successfully */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   210      FEE_USED_MARKER_ID_E,           /* Sector was used to store data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   211      FEE_FULL_MARKER_ID_E,           /* Sector is full */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   212      FEE_ERASE_REQUEST_ID_E,         /* Sector should be erased */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   213      FEE_START_MARKER_ID_E,            /* Double storage of USED marker, contains address of first blockheader */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   214      FEE_CLONE_START_MARKER_ID_E,    /* Marker to indicate that cloning of a defect sector has startet in this sector --> Ifx robust programming */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   215      FEE_RESERVED_MARKER_ID1_E,      /* Reserved range marker space in the sector header, currently not used! */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   216      FEE_RESERVED_MARKER_ID2_E,      /*    "       "     "      "   "    "      "         "      "    "   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   217      FEE_RESERVED_MARKER_ID3_E,      /*    "       "     "      "   "    "      "         "      "    "   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   218      FEE_RESERVED_MARKER_ID4_E,      /*    "       "     "      "   "    "      "         "      "    "   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   219      FEE_RESERVED_MARKER_ID5_E,      /*    "       "     "      "   "    "      "         "      "    "   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   220      FEE_RESERVED_MARKER_ID6_E,      /*    "       "     "      "   "    "      "         "      "    "   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   221      FEE_NUM_MARKER_E                /* Amount of required markers in the sector header + 1 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   222  };
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   223  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   224  /* Sector marker structure */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   225  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   226  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   227      uint16  xPattern;               /* Static marker pattern: 0xCAFE */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   228      uint8   xIdent;                 /* Ident to identify the marker: 0x01 Erased-Marker, 0x02 Used-Marker, 0x03 Full-Marker, 0x04 Erase-Request */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   229      uint8   xContent[3];            /* Sector change counter */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   230      uint16  xChecksum;              /* Crc16 checksum, calculation over Patter, Ident and content */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   231  }Fee_MarkerProp_t;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   232  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   233  /* Sector detection type */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   234  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   235  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   236      uint32  SecChngCnt_u32;         /* Sector change counter */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   237      uint8   ctErasedMarker_u8;      /* Number of found ERASED markers */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   238      uint8   ctUsedMarker_u8;        /* Number of found USED markers */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   239      uint8   ctFullMarker_u8;        /* Number of found FULL markers */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   240      uint8   ctEraseReq_u8;          /* Number of found ERASE requests */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   241      uint32  xStartAddr_u32;         /* Address of first blockheader in the sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   242      uint8   ctCloneMarker_u8;       /* Cloning of data has started (only Ifx robust programming algorithm */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   243  }Fee_stSecDet_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   244  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   245  /* Sector states */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   246  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   247  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   248      FEE_SECTOR_STATE_UNDEF_E        = 0,                      /* undefined sector-state --> no marker found */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   249      FEE_SECTOR_ERASED_E             = FEE_ERASED_MARKER_ID_E, /* sector was erased */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   250      FEE_SECTOR_USED_E               = FEE_USED_MARKER_ID_E,   /* sector was used to write data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   251      FEE_SECTOR_FULL_E               = FEE_FULL_MARKER_ID_E,   /* sector is full */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   252      FEE_SECTOR_REQUEST2ERASE_E      = FEE_ERASE_REQUEST_ID_E, /* sector could be erased */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   253      FEE_SECTOR_CONSIDERED_E         = FEE_NUM_MARKER_E        /* sector was considered in function Fee_LLDetectActiveSector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   254  }Fee_SectorState_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   255  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   256  /* Sector order after sort sequence */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   257  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   258  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   259      uint32 SecChngCnt_u32;                  /* Sector change counter */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   260      Fee_SectorState_ten SecState_en;        /* Sector state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   261      uint8 xPhySecIdx_u8;                    /* Sector index (physical sector) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   262  }Fee_LLSectorOrder_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   263  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   264  /* Fee internal return types */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   265  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   266  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   267      FEE_ORDER_PENDING_E,            /* The order is still pending*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   268      FEE_ORDER_FINISHED_E,           /* The order was finished without error */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   269      FEE_BLOCK_INVALIDATED_E,        /* The block was invalidated in the block status */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   270      FEE_ERROR_E,                    /* An error occured, maybe data in flash was not valid */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   271      FEE_SECTORCHANGE_E,             /* A sector change has to be done */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   272      FEE_SECTORFULL_E,               /* The sector is full */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   273      FEE_ABORTED_E,                  /* An order was aborted*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   274      FEE_ERASE_SECTOR_E,             /* The sector must be erased */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   275      FEE_SEARCH_ABORTED_E,           /* Searching was aborted */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   276      FEE_NUM_RET_VAL_E               /* Number of return values */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   277  }Fee_stRetVal_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   278  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   279  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   280  /* Flash properties */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   281  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   282  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   283      uint32  Fee_PhysStartAddress_u32;       /* Physical sector: start address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   284      uint32  Fee_PhysEndAddress_u32;         /* physical sector: end address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   285      uint32  Fee_LogStartAddress_u32;        /* logical sector: start address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   286      uint32  Fee_LogEndAddress_u32;          /* logical sector: end address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   287  }Fee_FlashProp_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   288  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   289  /* Block properties for all Fee blocks
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   290   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   291   * Status Flags:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   292   * Block flags will help to specify a more detailed block configuration. The low Byte of these block flags is also stored
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   293   * in the flash (status byte inside the block header). This information (in Flash) can be used to read/write the layout
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   294   * without configuration (PAV, CB).
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   295   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   296   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   297   *                                                 |<----- Block Status Byte in Block Header ----->|
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   298   * |<---------------------------------------- Block Flags ---------------------------------------->|
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   299   *    F     E     D     C     B     A     9     8  |  7     6     5     4     3     2     1     0  |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   300   * +-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   301   * |     |     |     |     |     |Prio-| Job type  |     |     | Rob |Surv.|(Inv)| DataFilter| Sec-|
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   302   * |     |     |     |     |     |rity |           |     |     |Attr.|Attr.|     |    Type   | lvl |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   303   * +-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   304   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   305   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   306   *  0  ... SecurityLevel      => 0...SingleStorage, 1...DoubleStorage
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   307   * 1+2 ... Data Filter Type   => 0...Dynamic:         Anybody can erase this block (e.g. during migration)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   308   *                               1...Static:          Only certain users (e.g. repair shops) can erase this block
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   309   *                               2...Permanent:       Only very certain users (e.g. OEM) can erase this block
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   310   *                               3...Super Permanent: Block can never be erased
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   311   *  3 .... Invalid            => 0...Block OK, 1...Block is invalid  --> can be changed by function Fee_InvalidateBlock
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   312   *  4 .... Survival Attribute => 0...No survival, 1... Survival (even without being part of the layout)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   313   *  5 .... Robustness Attribute (Robustness against data modification during write execution)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   314   *                            => 0...Deactivated:     No additional checksum is used
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   315   *                            => 1...Activated:       Additional checksum is used
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   316   * 8+9 ... TypeOfBlock        => 0...InternalJob, 1...NvmJob, 2...AdapterJob (e.g. Mx17 Eep adapter)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   317   *  A .... Priority           => Job priority:        0...FEE_NORMAL_PRIO_E --> FeeImmediateData = No
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   318   *                                                    1...FEE_HIGH_PRIO_E   --> FeeImmediateData = Yes
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   319   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   320  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   321  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   322      uint16 BlockPersistentId_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   323      uint16 Flags_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   324      uint16 Length_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   325      void (* const JobEndNotification_pfn) (void);      /* callback function, will be called if a job was successfully finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   326      void (* const JobErrorNotification_pfn) (void);    /* callback function, will be called if a job was finished with an error */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   327  }Fee_BlockPropertiesType_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   328  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   329  /* Job types corresponding to the queue index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   330  enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   331  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   332      FEE_JOB_TYPE_INTERNAL_E = 0,            /* Internal job index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   333      FEE_JOB_TYPE_NVM_E      = 1,            /* NvM job index  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   334      FEE_JOB_TYPE_ADAPTER_E  = 2             /* Adapter job index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   335  };
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   336  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   337  /* State machine types for the function Fee_LLWriteMarker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   338  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   339  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   340      FEE_LL_MARKER_INIT_E,                   /* Init state                                    */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   341      FEE_LL_MARKER_BLK_CHK_E,                /* Perform a blank check over one page           */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   342      FEE_LL_MARKER_BLK_CHK_WAIT_E,           /* Wait for the blank check order to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   343      FEE_LL_MARKER_BLK_CHK_ERROR_E,          /* Differences detected                          */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   344      FEE_LL_MARKER_BLK_CHK_FINISHED_E,       /* Start write order of the marker               */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   345      FEE_LL_MARKER_WRITE_WAIT_E,             /* Wait for the write order to be finished       */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   346      FEE_LL_MARKER_WRITE_ERROR_E,            /* Read or write error                           */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   347      FEE_LL_MARKER_VERIFY_E,                 /* Verify written marker                         */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   348      FEE_LL_MARKER_VERIFY_WAIT_E,            /* Wait for verify marker                        */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   349      FEE_LL_MARKER_VERIFY_FINISHED_E         /* Verify marker finished                        */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   350  }Fee_LLWrMarkerType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   351  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   352  /* State machine types for the function Fee_HLWriteBlock and Fee_HLReadBlock */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   353  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   354  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   355      FEE_HL_RDWR_BLK_INIT_E,                 /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   356      FEE_HL_SEARCH_BLK_HDR_E,                /* Search block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   357      FEE_HL_READ_BLK_HDR_WAIT_E,                  /* Read block header for redundant blocks */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   358      FEE_HL_CHECK_BLK_HDR_E,                 /* Check block header for redundant blocks */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   359      FEE_HL_CALC_BLK_CS_E,                   /* Calculate the user checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   360      FEE_HL_CHECK_BLK_CS_E,                  /* Verify the block checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   361      FEE_HL_RD_DATA_FROM_BLK_E,              /* Read the block data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   362      FEE_HL_COMP_BLK_E,                      /* Compare the complete block data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   363  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   364      /* Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   365      #if (defined(RBA_FLSIFX_FLASH) || defined(RBA_FLSJDP_FLASH))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   366      FEE_HL_RD_WAIT_FOR_FLS_E,               /* Wait for the Fls to overstamp an invalid header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   367      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   368      /* END Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   369  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   370      FEE_HL_WR_BLK_E                         /* Write the block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   371  }Fee_HLRdWrBlockType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   372  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   373  /* State machine types for the function Fee_LLWriteBlock */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   374  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   375  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   376      FEE_LL_WR_BLK_INIT_E,                   /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   377      FEE_LL_WR_WRITEHEADER_E,                /* Write the header (and first data bytes) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   378      FEE_LL_WR_SIZECHECK_HSR_E,              /* check for space until HSR */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   379      #if (FEE_NO_FALLBACK_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   380      FEE_LL_WR_BLANKCHECK_NOFB_WR_E,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   381      FEE_LL_WR_BLANKCHECK_NOFB_WR_WAIT_E,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   382      FEE_LL_WR_WRITE_NOFB_MARKER_E,          /* Write the NoFallback marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   383      FEE_LL_WR_WRITE_NOFB_MARKER_WAIT_E,     /* Wait until the programming of the NoFallback marker is finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   384      FEE_LL_WR_FILL_SECTOR_END_E,            /* Changes the active sector and fills the empty pages if necessary */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   385      FEE_LL_WR_FILL_SECTOR_END_WAIT_E,       /* Wait until the write order to fill the empty pages is finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   386      FEE_LL_WR_FILL_SECTOR_END_ERROR_E,      /* Errors during write occured */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   387      FEE_LL_WR_WRITE_NOFB_MARKER_ERROR_E,    /* Errors during write occured */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   388      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   389      FEE_LL_WR_WRITEHEADER_WAIT_E,           /* Wait until the write order is finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   390      FEE_LL_WR_VERIFYHEADER_E,               /* Verify the header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   391      FEE_LL_WR_VERIFYHEADER_WAIT_E,          /* Wait for the verification to end */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   392      FEE_LL_WR_VERIFYHEADER_ERROR_E,         /* Verify error */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   393      FEE_LL_WR_WRITEDATA_SEC_A_E,            /* Write the data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   394      FEE_LL_WR_WAIT_WRITEDATA_SEC_A_E,       /* Wait until the write order is finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   395      FEE_LL_WR_WRITE_ERROR_E,                /* Error during write (header or data page writes) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   396  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   397      FEE_LL_WR_WRITE_FULL_MARKER_E,          /* Write the FULL marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   398      FEE_LL_WR_ERASE_SECTOR_E,               /* Erase a sector and write the ERASED marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   399      FEE_LL_WR_WRITE_USED_MARKER_E,          /* Write the USED marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   400      FEE_LL_WR_WRITE_START_MARKER_E,         /* Write the START marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   401  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   402      /* Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   403      #if (defined(RBA_FLSIFX_FLASH) || defined(RBA_FLSJDP_FLASH))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   404      FEE_LL_WR_WAIT_FOR_FLS_OVERPROGRAMMING_E,   /* Wait for the Fls to overstamp an invalid header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   405      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   406      /* END Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   407  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   408      #if(FEE_ROBUST_PROG_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   409      FEE_LL_WR_WRITEDATA_IFX_HANDLING_E,     /* robust Ifx handling in case of wordline fails */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   410      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   411      FEE_LL_WR_VERIFY_BLK_E                  /* Verify the complete data including the block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   412  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   413      /* Robust block programming states (Hdpg1 -> Data -> Hdpg2 write) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   414      #if (FEE_PAGES_USED_BY_BLK_HEADER == 2u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   415      ,FEE_LL_WR_WRITEHDRPG2_E,                /* Write the 2nd header page. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   416      FEE_LL_WR_WAIT_WRITEHDRPG2_E            /* Wait until 2nd header page write is completed. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   417      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   418  }Fee_LLWrBlockType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   419  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   420  /* State machine types for the function Fee_LLCompBlkInFlash */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   421  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   422  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   423      FEE_LL_CMP_BLK_INIT_E,                  /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   424      FEE_LL_CMP_HEADER_E,                    /* Compare the complete block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   425      FEE_LL_CMP_WAIT_HEADER_E,               /* Wait for the compare to finish */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   426      FEE_LL_CMP_CHECK_OVERLAP_E,             /* Check for an overlap */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   427      FEE_LL_CMP_DATA_SEC_A_E,                /* Check the header compare result and compare the data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   428      FEE_LL_CMP_WAIT_DATA_SEC_A_E,           /* Wait for the compare to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   429      FEE_LL_CMP_FINISHED_E                   /* Verify the data compare result and reset the state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   430  }Fee_LLCmpBlkType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   431  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   432  /* State machine types for the function Fee_LLCopyData2Buffer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   433  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   434  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   435      FEE_LL_CPY_BLK_INIT_E,                  /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   436      FEE_LL_CPY_BLOCK_START_E,               /* Read out the data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   437      FEE_LL_CPY_BLOCK_WAIT_E,                /* Wait for the read order to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   438      FEE_LL_CPY_BLOCK_ERROR_E,               /* Error in the read function */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   439      FEE_LL_CPY_BLOCK_FINISHED_E             /* Finish the function or the data transfer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   440  }Fee_LLCpyBlkType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   441  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   442  /* State machine types for the function Fee_LLCalcBlkCrcInFlash */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   443  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   444  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   445      FEE_LL_CRC_BLK_INIT_E,                  /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   446      FEE_LL_CRC_RD_HD_PAGE_E,                /* Read the header page */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   447      FEE_LL_CRC_RD_PAGE_E,                   /* Calculate the block checksums */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   448      FEE_LL_CRC_CHECK_OVERLAP_E,             /* Check for an overlap */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   449      #if(FEE_ROB_FEATURE_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   450      FEE_LL_CRC_RD_ROB_PAGE_E,               /* Retry with the robustness checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   451      FEE_LL_CRC_CHECK_OVERLAP_ROB_E,         /* Check for an overlap */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   452      FEE_LL_CRC_RD_ROB_PAGE_WAIT_E,          /* Wait until the read access is finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   453      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   454      FEE_LL_CRC_RD_PAGE_WAIT_E,              /* Wait until the read access is finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   455      FEE_LL_CRC_RD_ERROR_E                   /* Read error case */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   456  }Fee_LLCalcCrcBlkType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   457  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   458  /* State machine types for reading */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   459  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   460  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   461      FEE_LL_INIT_READ_E                      /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   462      ,FEE_LL_BLANK_CHECK_E                    /* Perform a blank check */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   463      ,FEE_LL_BLANK_CHECK_WAIT_E                /* Wait for the blank check to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   464      ,FEE_LL_READ_PAGE_E                     /* Read pages */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   465      ,FEE_LL_WAIT_READ_PAGE_E                /* Wait for the read order to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   466      ,FEE_LL_READ_ERROR_E                    /* Error reaction for read error */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   467      ,FEE_LL_READ_FINISHED_E                 /* Finish state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   468      #if (FEE_HEADER_RECHECK_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   469      #if (FEE_NO_FALLBACK_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   470      ,FEE_LL_NOFALLBACK_MARKER_CHECK_E
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   471      ,FEE_LL_NOFALLBACK_MARKER_CHECK_WAIT_E
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   472      ,FEE_LL_NOFALLBACK_MARKER_CHECK_FAILED_E
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   473      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   474      ,FEE_LL_RECHECK_HEADER_E
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   475      ,FEE_LL_RECHECK_HEADER_WAIT_E
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   476      ,FEE_LL_RECHECK_HEADER_FAILED_E
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   477      ,FEE_LL_RECHECK_HEADER_FINISHED_E
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   478      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   479  } Fee_LLRdStateType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   480  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   481  /* States for function Fee_LLCheckErasePattern */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   482  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   483  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   484      FEE_LL_INIT_BLANK_CHECK_E,              /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   485      FEE_LL_PERFORM_BLANK_CHECK_E,           /* Perform a blank check */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   486      FEE_LL_WAIT_PERFORM_BLANK_CHECK_E,      /* Wait for the blank check order to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   487      FEE_LL_BLANK_CHECK_ERROR_E,             /* Differences detected */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   488      FEE_LL_BLANK_CHECK_FINISHED_E           /* Finish state machine with success */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   489  } Fee_LLBlankCheckType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   490  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   491  /* State of function Fee_Prv_LLFindEmptyPage */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   492  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   493  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   494      #if ( defined(RBA_FLSRH850P1xC_FLASH) || defined(RBA_FLSV850R1x_FLASH) || defined(RBA_FLSRH850xx_FLASH) )
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   495      FEE_LL_FINDEMPTYPGE_INIT_E,             /* Initalize find empty page state machine  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   496      FEE_LL_FINDEMPTYPGE_CHECK_E,            /* Begin a blank check                      */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   497      FEE_LL_FINDEMPTYPGE_WAIT_E,             /* Wait until the blank check finished      */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   498      FEE_LL_FINDEMPTYPGE_RESULT_BLANK_E,     /* Checked chunk was completely blank       */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   499      FEE_LL_FINDEMPTYPGE_RESULT_NOT_BLANK_E  /* Checked chunk was not completely blank   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   500      #else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   501      FEE_LL_FIND_CURRENT_SECTOR_E,           /* Evaluate the sector with most current values */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   502      FEE_LL_FIND_LAST_HEADER_E,              /* Search the last block header in the active sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   503      FEE_LL_FINISHED_E                       /* Function finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   504      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   505  }Fee_LLFndEmptyPgeType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   506  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   507  /* State of the function Fee_LLSearchSpecifiedBlkHeader */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   508  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   509  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   510      FEE_LL_SEARCHBLK_INIT_E,                /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   511      FEE_LL_SEARCHBLK_BLK_HEADER_E           /* Search for the next block header*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   512  }Fee_LLSearchBlkHdrType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   513  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   514  #if(FEE_FAST_CACHE_INIT_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   515  /* State of the function Fee_BuildUpCache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   516  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   517  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   518      FEE_LL_BLD_UP_CACHE_INIT_E,             /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   519      FEE_LL_BLD_UP_CACHE_READ_E              /* Read out data directly if possible */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   520  }Fee_LLBuildUpCache_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   521  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   522  /* State of the function Fee_BuildUpCacheForAllSect */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   523  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   524  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   525      FEE_LL_BLD_UP_CACHE_ALL_SECT_INIT_E,/* Init case */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   526      FEE_LL_BLD_UP_CACHE_ALL_SECT_DO_E   /* Build up the cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   527  }Fee_LLBuildUpCacheAllSect_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   528  /* FEE_FAST_CACHE_INIT_ACTIVE != FALSE */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   529  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   530  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   531  #if((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) || (FEE_RB_ACT_SURVIVAL_EVAL != FALSE))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   532  #if (FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE == 0)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   533  /* Unknown blcok sector reorganiation without cache: State of the function Fee_LLSearchUnknBlkHeader */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   534  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   535  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   536      FEE_LL_SEARCHUNKNBLK_INIT_E,            /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   537      FEE_LL_SEARCHUNKNBLK_UNKN_BLK_HEADER_E, /* Search the next unknown block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   538      FEE_LL_SEARCHUNKNBLK_SPEC_BLK_HEADER_E  /* Search the next specific block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   539  }Fee_LLSearchUnknBlkHdrType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   540  #else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   541  /* Unknown block sector reorganiation with cache: states of cache build up function Fee_BuildUpCacheUnknownBlk */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   542  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   543  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   544      FEE_LL_BLD_UP_CACHE_UNKOWN_BLK_INIT_E,             /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   545      FEE_LL_BLD_UP_CACHE_UNKOWN_BLK_READ_E,             /* Read out data directly if possible */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   546      FEE_LL_BLD_UP_CACHE_UNKOWN_BLK_VALIDATEDATA_E      /* Validate the data CRC of the uknown block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   547  }Fee_LLBuildUpUnknownBlkCache_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   548  #endif /* End of (FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE == 0) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   549  #endif /* End of ((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) || (FEE_RB_ACT_SURVIVAL_EVAL != FALSE)) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   550  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   551  /* States for the function Fee_LLSectorReorganization */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   552  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   553  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   554      FEE_LL_REORG_INIT_E,                    /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   555      FEE_LL_REORG_PREP_SEARCH_BLK_E,         /* Prepare the next block search */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   556      FEE_LL_REORG_SEARCH_BLK_E,              /* Search for a specific block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   557      FEE_LL_REORG_CHECK_BLOCK_CS_E,          /* Evaluate the block checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   558      FEE_LL_REORG_REDUNDANT_BLK_CHK_E,       /* Check if redundant copy is not lost during sector reorg. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   559      FEE_LL_REORG_WRITE_BLOCK_E,             /* Write a block into the latest sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   560  #if((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) || (FEE_RB_ACT_SURVIVAL_EVAL != FALSE))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   561      FEE_LL_REORG_SEARCH_UNK_BLK_E,          /* Search for an unknown block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   562   #if(FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE != 0) /* Unknown blcok sector reorganiation with cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   563      FEE_LL_REORG_CACHEBUILDUP_UNK_BLK_E,    /* Building of cache for unknown block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   564      FEE_LL_REORG_SEARCH_UNK_HDRBLK_WAIT_E,            /* Wait till reading of unknown block header is finished. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   565      FEE_LL_REORG_SEARCH_UNK_HDRBLK_READ_ERROR_E,    /* Failure during read of unknown block header. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   566      FEE_LL_REORG_SEARCH_UNK_HDRBLK_READ_FINISHED_E,    /* Unknown block header read successful. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   567   #endif /* End of (FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE != 0) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   568  #endif /* End of ((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) || (FEE_RB_ACT_SURVIVAL_EVAL != FALSE)) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   569  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   570      /* Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   571      #if (defined(RBA_FLSIFX_FLASH) || defined(RBA_FLSJDP_FLASH))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   572      FEE_LL_REORG_WAIT_FOR_FLS_E,            /* Wait for the Fls to overstamp an invalid header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   573      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   574      /* END Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   575  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   576      FEE_LL_REORG_FINISHED_E                 /* Function finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   577  }Fee_LLSecReorgType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   578  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   579  /* States for the function Fee_LLRedundantCpyChk */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   580  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   581  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   582      FEE_LL_REDUNDANT_CPY_CHK_INIT_E,            /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   583      FEE_LL_REDUNDANT_CPY_CHK_SEARCH_HDR_E,      /* Search header of redundant copy */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   584      FEE_LL_REDUNDANT_CPY_CHK_BLK_CS_E           /* Validate data CRC of redundant copy */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   585  }Fee_LLRedundantCpyChk_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   586  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   587  /* States for the function Fee_LLCpyBlkFromFls2Fls */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   588  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   589  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   590      FEE_LL_CPY_FLS2FLS_INIT_E,                      /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   591  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   592      #if (FEE_NO_FALLBACK_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   593      FEE_LL_CPY_FLS2FLS_WRITE_NOFB_MARKER_E,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   594      FEE_LL_CPY_FLS2FLS_WAIT_WRITE_NOFB_MARKER_E,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   595      FEE_LL_CPY_FLS2FLS_WRITE_NOFB_MARKER_ERROR_E,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   596      FEE_LL_CPY_FLS2FLS_WAIT_FILL_SECTOR_END_E,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   597      FEE_LL_CPY_FLS2FLS_FILL_SECTOR_END_ERROR_E,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   598      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   599  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   600      FEE_LL_CPY_FLS2FLS_READ_E,                      /* Read out the complete block (header and data) and finish the function if possible */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   601      FEE_LL_CPY_FLS2FLS_WAIT_READ_E,                 /* Wait for the read order to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   602      FEE_LL_CPY_FLS2FLS_READ_ERROR_E,                /* Read error state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   603  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   604      /* Robust block programming states (Hdpg1 -> Data -> Hdpg2 write) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   605      #if (FEE_PAGES_USED_BY_BLK_HEADER == 2u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   606      FEE_LL_CPY_FLS2FLS_HDRPG1_WRITE_E,              /* Write the header page 1 into the new sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   607      FEE_LL_CPY_FLS2FLS_WAIT_HDRPG1_WRITE_E,         /* Wait for the header page 1 write order to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   608      FEE_LL_CPY_FLS2FLS_HDRPG1_WRITE_ERROR_E,        /* Write error state for header page 1 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   609      FEE_LL_CPY_FLS2FLS_HDRPG1_VERIFY_E,             /* Compare the header page 1 write */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   610      FEE_LL_CPY_FLS2FLS_WAIT_HDRPG1_VERIFY_E,        /* Wait for the header page 1 verification to finish */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   611      FEE_LL_CPY_FLS2FLS_HDRPG1_VERIFY_ERROR_E,       /* Verification error for header page 1 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   612      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   613  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   614      FEE_LL_CPY_FLS2FLS_WRITE_E,                     /* Write the data into the new sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   615      FEE_LL_CPY_FLS2FLS_WAIT_WRITE_E,                /* Wait for the write order to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   616      FEE_LL_CPY_FLS2FLS_WRITE_ERROR_E,               /* Write error state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   617      FEE_LL_CPY_FLS2FLS_VERIFY_E,                    /* Compare the programmed data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   618      FEE_LL_CPY_FLS2FLS_WAIT_VERIFY_E,               /* Wait for the verification to finish */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   619      FEE_LL_CPY_FLS2FLS_VERIFY_ERROR_E,              /* Verification error */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   620  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   621      /* Robust block programming states (Hdpg1 -> Data -> Hdpg2 write) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   622      #if (FEE_PAGES_USED_BY_BLK_HEADER == 2u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   623      FEE_LL_CPY_FLS2FLS_HDRPG2_WRITE_E,              /* Write the header page 2 into the new sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   624      FEE_LL_CPY_FLS2FLS_WAIT_HDRPG2_WRITE_E,         /* Wait for the header page 2 write order to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   625      FEE_LL_CPY_FLS2FLS_HDRPG2_WRITE_ERROR_E,        /* Write error state for header page 2 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   626      FEE_LL_CPY_FLS2FLS_HDRPG2_VERIFY_E,             /* Compare the header page 2 write */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   627      FEE_LL_CPY_FLS2FLS_WAIT_HDRPG2_VERIFY_E,        /* Wait for the header page 2 verification to finish */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   628      FEE_LL_CPY_FLS2FLS_HDRPG2_VERIFY_ERROR_E,       /* Verification error for header page 2 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   629      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   630  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   631      FEE_LL_CPY_FLS2FLS_CHECK_ADR_OVERFLOW_E,        /* Data transfer is finished, check a possible address overflow */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   632      FEE_LL_CPY_FLS2FLS_WRITE_FULL_MARKER_E,         /* Write the FULL marker to the "old" sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   633      FEE_LL_CPY_FLS2FLS_ERASE_SECTOR_E,              /* Erase the sector that will be used as a new USED sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   634      FEE_LL_CPY_FLS2FLS_WRITE_USED_MARKER_E,         /* Write the USED marker to new sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   635  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   636      #if(FEE_ROBUST_PROG_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   637      FEE_LL_CPY_FLS2FLS_ROBUST_IFX_HANDLING_E,       /* robust Ifx handling in case of wordline fails */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   638      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   639  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   640      #if defined (FEE_PRV_ROBUST_SECT_OVERFLOW)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   641      FEE_LL_CPY_FLS2FLS_ROBUST_SECT_OVERFLOW_E,      /* Robust sector reorganisation when sector overflow occurs during sector reorg. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   642      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   643  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   644      FEE_LL_CPY_FLS2FLS_WRITE_START_MARKER_E         /* Write the START marker to the new sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   645  }Fee_LLCpyBlkFls2Fls_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   646  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   647  /* States for the function Fee_LlRobustSectorOverflow */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   648  #if defined (FEE_PRV_ROBUST_SECT_OVERFLOW)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   649  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   650  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   651      FEE_LL_ROBUST_SECTOR_OVERFLOW_INIT_E,           /* Init state. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   652      FEE_LL_ROBUST_SECTOR_OVERFLOW_WR_CM_E,          /* Write Clone marker in the latest sector. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   653      FEE_LL_ROBUST_SECTOR_OVERFLOW_PREPARE_E,        /* Compute the address and number of bytes for the operation. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   654  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   655      #if ( defined(RBA_FLSRH850P1xC_FLASH) || defined(RBA_FLSV850R1x_FLASH) || defined(RBA_FLSRH850xx_FLASH) )
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   656      FEE_LL_ROBUST_SECTOR_OVERFLOW_BLANK_CHK_E,      /* Check if the page is blank, transfer only programmed pages. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   657      FEE_LL_ROBUST_SECTOR_OVERFLOW_BLANK_CHK_WAIT_E, /* Wait for Blank check operation to complete. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   658      #endif /* #if ( defined(RBA_FLSRH850P1xC_FLASH) || defined(RBA_FLSV850R1x_FLASH) || defined(RBA_FLSRH850xx_FLASH) ) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   659  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   660      FEE_LL_ROBUST_SECTOR_OVERFLOW_READ_PAGE_E,      /* Read out the programmed page in an internal buffer. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   661      FEE_LL_ROBUST_SECTOR_OVERFLOW_READ_PAGE_WAIT_E, /* Wait for Read operation to complete. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   662      FEE_LL_ROBUST_SECTOR_OVERFLOW_COPY_DATA_E,      /* Copy data to new sector. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   663      FEE_LL_ROBUST_SECTOR_OVERFLOW_COPY_DATA_WAIT_E, /* Wait for Write operation to complete. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   664      FEE_LL_ROBUST_SECTOR_OVERFLOW_VERIFY_DATA_E,    /* Verify the copied data. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   665      FEE_LL_ROBUST_SECTOR_OVERFLOW_VERIFY_DATA_WAIT_E,/* Wait for Verify operation to complete. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   666      FEE_LL_ROBUST_SECTOR_OVERFLOW_VERIFY_SUCCESS_E, /* Check if more bytes are left to be programmed. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   667      FEE_LL_ROBUST_SECTOR_OVERFLOW_WR_UM_E,          /* Write Used marker in the latest sector. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   668      FEE_LL_ROBUST_SECTOR_OVERFLOW_SORT_SECT_E,      /* Sort sectors */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   669      FEE_LL_ROBUST_SECTOR_OVERFLOW_ERROR_E,          /* Error state for all kinds of error in this state machine. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   670      FEE_LL_ROBUST_SECTOR_OVERFLOW_ERASE_E           /* Re-erase the older sector, this state is reached for error handling. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   671  }Fee_LLRobustSectOverflow_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   672  #endif /* #if defined (FEE_PRV_ROBUST_SECT_OVERFLOW) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   673  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   674  /* Read / write order type */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   675  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   676  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   677      uint32                              xRdAddress;                     /* Address for reading (Fee_LLReadBlock) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   678      uint32                              xWrAddress;                     /* Address for writing (Fee_LLWriteBlock) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   679      uint32                              xCmpAddress;                    /* Address for comparing (Fee_LLCompBlkInFlash) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   680      uint32                              xCrcAddress;                    /* Address for the CRC (Fee_LLCompBlkInFlash) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   681      uint32                              xCpyAddress;                    /* Address for copying (Fee_LLCompBlkInFlash) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   682      uint32                              AdrHdSearchStart_u32;           /* Start address for the header search after reloads */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   683      uint32                              xStartAddrNextSector_u32;        /* Payload of START-Marker, contains the expected address of the 1. blockheader */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   684  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   685  /* Robust block programming states (Hdpg1 -> Data -> Hdpg2 write) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   686  #if (FEE_PAGES_USED_BY_BLK_HEADER == 2u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   687      uint32                              xHdPg2Address;                   /* Address for writing the header 2nd page. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   688  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   689  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   690  #if !( defined(RBA_FLSRH850P1xC_FLASH) || defined(RBA_FLSV850R1x_FLASH) || defined(RBA_FLSRH850xx_FLASH) )
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   691      uint32                              LastProgrammedAddress_u32;        /* Last programmed page during cache build up. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   692      uint32                              LastValidHdrAddress_u32;          /* Last valid header found during cache build up. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   693  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   694  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   695      Fee_LLSecReorgType_ten              Fee_LLSecReorg_en;                /* State machine for the sector reorganization */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   696      Fee_LLRedundantCpyChk_ten           Fee_LLRedundantCpyChk_en;         /* State machine for checking redundant copy */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   697      Fee_LLCpyBlkFls2Fls_ten             Fee_LLCpyBlkFls2Fls_en;           /* State machine for copying one block from one sector to another one */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   698  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   699  #if defined (FEE_PRV_ROBUST_SECT_OVERFLOW)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   700      Fee_LLRobustSectOverflow_ten        Fee_LLRobustSectOverflow_en;      /* LL state machine for Robust sector overflow */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   701  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   702  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   703      Fee_HLRdWrBlockType_ten             Fee_HLWrBlock_en;                  /* HL state machine for writing a block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   704  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   705  #if(FEE_RB_MAINTAIN != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   706      Fee_HLRdWrBlockType_ten             Fee_HLMtBlock_en;                  /* HL state machine for maintaining a block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   707   #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   708  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   709      Fee_LLWrBlockType_ten               Fee_LLWrBlock_en;                  /* LL State machine for writing a block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   710      Fee_HLRdWrBlockType_ten             Fee_HLRdBlock;                     /* state machine for reading a block High Level */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   711      Fee_LLWrBlockType_ten               Fee_LLNextUsedWrBlock_en;          /* LL state for saving the next write state if a USED marker is necessary in between */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   712      Fee_LLWrBlockType_ten               Fee_LLNextEraseWrBlock_en;         /* LL state for saving the next write state if an erase operation is necessary in between */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   713      Fee_LLCmpBlkType_ten                Fee_LLCompBlk;                     /* LL state machine for comparing data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   714      Fee_LLCpyBlkType_ten                Fee_LLCopyBlk_en;                  /* LL state machine for copying data from the flash to the user buffer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   715      Fee_LLCalcCrcBlkType_ten            Fee_LLCalcCrcBlk_en;               /* LL state machine for calculating the checksum of a block inside the flash */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   716      Fee_LLWrMarkerType_ten              Fee_LLWrMarker_en;                 /* LL state machine for writing a sector marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   717      Fee_LLRdStateType_ten               Fee_LLRdState_en;                  /* LL state machine to read a specified address in the sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   718      Fee_LLBlankCheckType_ten            Fee_LLBlankCheckState_en;          /* LL State machine to perform a blank check */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   719      Fee_LLFndEmptyPgeType_ten           Fee_LLFindEmptyPageState_en;       /* LL state machine to find an empty page within one sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   720      Fee_LLSearchBlkHdrType_ten          Fee_LLSearchBlkHdr_en;             /* LL state machine to find a specified block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   721  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   722  #if((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) || (FEE_RB_ACT_SURVIVAL_EVAL != FALSE))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   723   #if(FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE == 0) /* Unknown block sector reorganiation without cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   724      Fee_LLSearchUnknBlkHdrType_ten      Fee_LLSearchUnknBlkHdr_en;          /* LL state machine to find an unknown block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   725   #else /* Unknown blcok sector reorganiation with cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   726      uint32                              Fee_UnknownBlkCacheAdd_u32;         /* Address till where the cache for unknown block is scanned */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   727      uint16                              Fee_UnknownBlkCacheIdx_u16;         /* Index till which the cache for unknown block is built */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   728      Fee_LLBuildUpUnknownBlkCache_ten    Fee_LLBuildUpCacheUnknownBlk_en;    /* LL state machine to build up the cache for unknown blocks */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   729   #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   730  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   731  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   732  #if(FEE_FAST_CACHE_INIT_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   733      Fee_LLBuildUpCache_ten              Fee_LLBuildUpCache_en;              /* LL state machine to build up the cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   734      Fee_LLBuildUpCacheAllSect_ten       Fee_LLBuildUpCacheAllSect_en;       /* LL state machine to build up the cache for all sectors */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   735  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   736  } Fee_RdWrOrder_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   737  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   738  /* Block header info type */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   739  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   740  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   741      uint32 AdrBlkHeader_u32;    /* Read address for for the function Fee_LLReadBlock and Fee_LLCpyBlkFromFls2Fls */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   742      uint32 BlkCrc32_u32;        /* Block data checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   743      uint16 HdrCrc16_u16;        /* Block header checksum (start value for block data checksum) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   744      uint16 BlkLength_u16;       /* Extracted block length from the block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   745      uint16 FeeIndex_u16;        /* Fee Index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   746      uint8  BlkStatus_u8;        /* Block status */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   747  }Fee_GlobInfoLastRdHeader_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   748  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   749  /* Block write type */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   750  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   751  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   752      uint16  BytesAlrdyConsid_u16;   /* Write offset in user data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   753      uint16  BytesAlrdyCompared_u16;    /* Number of bytes already compared */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   754      uint16  Bytes2Read_u16;          /* Number of bytes to read */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   755      uint8   CompareResult_u8;       /* Result of last Fls_Compare */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   756      uint8   cntWriteRetry_u8;       /* Count number of write retries */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   757      uint8   cntCopies_u8;           /* Count number of written copies */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   758  }Fee_GlobInfoWrBlock_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   759  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   760  /* Sector reorganization type */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   761  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   762  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   763      uint32 xRdAddress_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   764      uint16 xNumBytesAlrdyCopied_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   765      uint16 xNumBytesLeftToRdWr_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   766      uint8  xCntCopies_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   767  #if (FEE_PAGES_USED_BY_BLK_HEADER == 2u)    /* Robust block programming states (Hdpg1 -> Data -> Hdpg2 write) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   768      uint8  xFirstDataPgPgm_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   769  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   770  }Fee_LLSecReorgStruct_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   771  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   772  /* Erase sector types */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   773  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   774  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   775      FEE_ERASESEC_IDLE_E = 0,        /* Idle state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   776      FEE_ERASESEC_CHECK_CACHE_E,     /* Check of cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   777      FEE_ERASESEC_START_E,           /* Erase sequence started */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   778      FEE_ERASESEC_DO_E,              /* Wait until erasing was finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   779      FEE_ERASESEC_WRITE_MARKER_E,    /* Write the sector ERASED marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   780      FEE_ERASESEC_ERROR_E            /* Error state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   781  }Fee_LLEraseStateType_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   782  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   783  /* Erase Order type */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   784  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   785  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   786      Fee_LLEraseStateType_ten EraseState_en; /* State machine state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   787      uint8   xPhySectorIdx_u8;               /* Idx of sector that should get erased  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   788  }Fee_LLEraseOrderType_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   789  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   790  /* Block header structure */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   791  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   792  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   793      uint8   Preamble_au8[3];    /* Preambel (0xA53C96) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   794      uint8   BlkStatus_u8;       /* Block status, contains information like security level, etc. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   795      uint16  FeeIndex_u16;       /* FeeIndex */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   796      uint16  BlkLength_u16;      /* Block length without header and block checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   797      uint16  HdrCrc16_u16;       /* Header checksum, start value is 0xCAFE */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   798      uint32  BlkCrc32_u32;       /* Block data checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   799  }Fee_BlkHeader_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   800  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   801  /* Linked function structure */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   802  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   803  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   804      void(* Fee_ResetUsedSectors_pfn)(void);     /* Function for resetting the amount of used sectors */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   805  }Fee_LinkedFunctions_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   806  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   807  #if (FEE_PRV_DEBUG_MONITOR != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   808  #define FEE_DBM_ERROR_ENTRIES   15
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   809  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   810  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   811  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   812      FEE_DBM_ERROR_ERASE_FCT_E,        /* Used in function Fee_LLEraseSector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   813      FEE_DBM_ERROR_LLMARKER_FCT_E,     /* USed in function Fee_LLWriteMarker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   814      FEE_DBM_ERROR_XX_E                /* not used yet....                   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   815  } Fee_DebugMonitoringFct_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   816  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   817  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   818  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   819      uint32                       xSecChngCntVal;             /* value of sector change counter while error occurs */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   820      uint16                       FeeBlkIdx;                  /* if the error couldn't be assigned to a NvmBlock, this is 0xFFFF */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   821      Fee_DebugMonitoringFct_ten   xError;                     /* error number */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   822      uint8                        xErrorInfo;                 /* error info, if necessary */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   823  } FeeDBMErrInfo_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   824  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   825  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   826  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   827      FeeDBMErrInfo_tst  xErrorEntry[FEE_DBM_ERROR_ENTRIES];  /* array of a structure with detail info to the errors */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   828      uint8   idxNewEntry;                /* index points on the next free entry in the xErrorEntry buffer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   829      uint8   ctBuffOverflow;             /* counter countrs how often the FEE_DBM_ERROR_ENTRIES error overflow. Startvalue is 1, used for ProtRAM validation! */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   830  } Fee_DebugMonitoring_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   831  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   832  #define FEE_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   833  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   834  extern Fee_DebugMonitoring_tst Fee_DebugMonitoring;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   835  #define FEE_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   836  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   837  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   838  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   839  #if(FEE_ROBUST_PROG_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   840  /* Ifx robust programming */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   841  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   842  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   843      FEE_ROB_IFX_INIT,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   844      FEE_ROB_IFX_MARK_SECTOR,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   845      FEE_ROB_IFX_STORE_BUFFER,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   846      FEE_ROB_IFX_STORE_BUFFER_WAIT,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   847      FEE_ROB_IFX_COPY_DATA,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   848      FEE_ROB_IFX_STORE_COPY_WAIT,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   849      FEE_ROB_IFX_ERASE_SECTOR,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   850      FEE_ROB_IFX_WRITE_USED_MARK_SECTOR,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   851      FEE_ROB_SORT_SECTOR,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   852      FEE_ROB_IFX_FINISHED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   853  }Fee_RobIfxHdl_e;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   854  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   855  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   856  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   857      Fls_AddressType xStartAddress;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   858      uint8* DataBuffer;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   859      Fls_LengthType numBytes;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   860      uint16 offInBuf_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   861  }Fee_IfxRobustProgramming_t;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   862  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   863  #define FEE_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   864  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   865  extern Fee_IfxRobustProgramming_t Fee_IfxRobustProgramming_s;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   866  extern Fee_RobIfxHdl_e Fee_RobIfxHdl;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   867  #define FEE_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   868  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   869  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   870  #define FEE_START_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   871  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   872  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_RobIfxHandling(uint8 xActLogWrSect_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   873  #define FEE_STOP_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   874  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   875  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   876  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   877  #if ((FEE_RB_MAINTAIN != FALSE) && (FEE_NO_FALLBACK_ACTIVE != FALSE))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   878  /* Additional MainFunction write states in case NoFallback is activated */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   879  typedef enum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   880  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   881      FEE_WRITE_NOFB_IDLE_E = 0,      /* Idle state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   882      FEE_WRITE_NOFB_MAINTAIN_E,      /* Maintain a NoFallback block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   883      FEE_WRITE_NOFB_BLOCK_E          /* Write a NoFallback block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   884  }Fee_WriteStateNoFb_ten;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   885  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   886  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   887  typedef struct
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   888  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   889      uint32 Fee_Totalfree_bytes;    /* Total number of free bytes  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   890      uint32 Fee_hardThreshold;      /* Hard Threshold configures */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   891      uint32 Fee_softThershold;      /* Soft therosold configured*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   892  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   893  }Fee_FreeByte_thrshold_t;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   894  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   895  /*
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   896  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   897  * Extern declarations
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   898  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   899  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   900  /* Structures and variables */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   901  #define FEE_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   902  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   903  extern CONST(Fee_FlashProp_tst, FEE_CONST)          Fee_FlashProp_st[FEE_NUM_FLASH_BANKS_AVAILABLE];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   904  extern CONST (MemIf_JobResultType, AUTOMATIC)       Fee_JobTypeMapping[FEE_NUM_RET_VAL_E];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   905  extern CONST (Fee_LinkedFunctions_tst, FEE_CONST)   Fee_LinkedFunctions_cst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   906  #define FEE_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   907  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   908  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   909  #define FEE_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   910  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   911  extern P2VAR(uint8, AUTOMATIC, FEE_APPL_DATA)       Fee_PageBytePtr_cpu8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   912  extern VAR(Fee_RdWrOrder_tst, AUTOMATIC)            Fee_RdWrOrder_st;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   913  extern VAR(Fee_LLSectorOrder_tst, AUTOMATIC)        Fee_LLSectorOrder_st[FEE_NUM_FLASH_BANKS_AVAILABLE];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   914  extern VAR(Fee_LLEraseOrderType_tst, AUTOMATIC)     Fee_LLEraseOrder_st;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   915  extern VAR(Fee_OrderFifo_tst, AUTOMATIC)            Fee_OrderFifo_st[FEE_QUEUE_SIZE];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   916  extern VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC) Fee_GlobInfoLastRdHeader_st;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   917  extern VAR(Fee_GlobInfoWrBlock_tst, FEE_VAR)        Fee_GlobInfoWrBlock_st;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   918  extern VAR(Fee_LLSecReorgStruct_tst, FEE_VAR)       Fee_LLSecReorgStruct_st;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   919  extern VAR(MemIf_JobResultType, AUTOMATIC)          Fee_JobResult[FEE_QUEUE_SIZE];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   920  #define FEE_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   921  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   922  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   923  #define FEE_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   924  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   925  extern CONSTP2VAR(uint8, AUTOMATIC, FEE_APPL_DATA)  Fee_MarkerBufBytePtr_cpu8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   926  extern CONSTP2VAR(uint8, AUTOMATIC, FEE_APPL_DATA)  Fee_DataBytePtr_cpu8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   927  #define FEE_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   928  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   929  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   930  #define FEE_START_SEC_VAR_INIT_8
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   931  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   932  extern VAR(uint8, FEE_VAR)                          Fee_Prv_stInit_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   933  extern VAR(uint8, FEE_VAR)                          Fee_Prv_stReorg_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   934  extern VAR(uint8, FEE_VAR)                          Fee_NumFlashBanksUsed_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   935  extern VAR(uint8, AUTOMATIC)                        Fee_idxActQueueBackUp;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   936  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   937  /* Buffer to hold 2nd header page contents. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   938  #if (FEE_PAGES_USED_BY_BLK_HEADER == 2u)    /* Robust block programming states (Hdpg1 -> Data -> Hdpg2 write) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   939  extern VAR(uint8, AUTOMATIC) Fee_hdr2Buffer_au8[FEE_PAGE_LEN];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   940  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   941  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   942  /* Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   943  #if (defined(RBA_FLSIFX_FLASH) || defined(RBA_FLSJDP_FLASH))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   944  extern VAR(uint8, AUTOMATIC)                        Fee_hdrBuffer_au8[FEE_PAGE_LEN];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   945  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   946  /* END Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   947  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   948  #define FEE_STOP_SEC_VAR_INIT_8
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   949  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   950  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   951  #define FEE_START_SEC_VAR_INIT_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   952  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   953  extern VAR(MemIf_StatusType, FEE_VAR)               Fee_GlobModuleState_st;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   954  extern VAR(Fee_Rb_WorkingStateType_ten, AUTOMATIC)  Fee_Rb_WorkingStateBackUp_en;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   955  #define FEE_STOP_SEC_VAR_INIT_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   956  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   957  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   958  #define FEE_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   959  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   960  extern VAR(uint8, AUTOMATIC)                        Fee_idxLLSectorOrder_au8[FEE_NUM_FLASH_BANKS_AVAILABLE];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   961  extern VAR(uint8, FEE_VAR)                          Fee_idxActQueue_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   962  extern VAR(uint8, FEE_CONST)                        Fee_CacheUpdCompForSect_au8[FEE_NUM_FLASH_BANKS_AVAILABLE];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   963  extern VAR(uint8, AUTOMATIC)                        Fee_RdWrRetries_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   964  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   965  #if (FEE_RB_ACT_ERASE_SUSPENSION != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   966  extern VAR(boolean, AUTOMATIC) Fee_Prv_stSuspendActiv_b;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   967  extern VAR(boolean, AUTOMATIC) Fee_Prv_stHardReOrgErase_b;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   968  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   969  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   970  #if (FEE_RB_ADDONS_CCAS == TRUE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   971  extern VAR(boolean, AUTOMATIC) Fee_Rb_stRequestStopMode_b;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   972  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   973  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   974  #define FEE_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   975  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   976  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   977  #define FEE_START_SEC_VAR_CLEARED_32
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   978  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   979  extern VAR(uint32, AUTOMATIC)                       Fee_llMarkerPageBuf_au32[FEE_SEC_HEADER_SIZE / 4u];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   980  extern VAR(uint32, FEE_CONST)                       Fee_Cache_au32[FEE_NUM_BLOCKS];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   981  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   982  #if(FEE_ROB_FEATURE_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   983  extern VAR(uint32, AUTOMATIC)                       Fee_DataByteStartCrc_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   984  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   985  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   986  #define FEE_STOP_SEC_VAR_CLEARED_32
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   987  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   988  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   989  #define FEE_START_SEC_VAR_CLEARED_SECURED_32
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   990  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   991  extern VAR(uint32, AUTOMATIC)                       Fee_llPageBuf_au32[(FEE_LL_PAGEBUFFSIZE / 4u) + 2u];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   992  extern VAR(uint32, AUTOMATIC)                       Fee_llDataBuf_au32[FEE_LL_DATABUFFSIZE / 4u];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   993  #define FEE_STOP_SEC_VAR_CLEARED_SECURED_32
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   994  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   995  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   996  #ifdef FEE_PRV_USE_ROM_TABLE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   997  #define FEE_START_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   998  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	   999  extern CONST(Fee_BlockPropertiesType_tst, FEE_CONST)  Fee_BlockProperties_st[FEE_NUM_BLOCKS];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1000  #define FEE_STOP_SEC_CONST_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1001  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1002  #else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1003  #define FEE_START_SEC_VAR_INIT_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1004  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1005  extern VAR(Fee_BlockPropertiesType_tst, AUTOMATIC)  Fee_BlockProperties_st[FEE_NUM_BLOCKS];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1006  #define FEE_STOP_SEC_VAR_INIT_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1007  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1008  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1009  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1010  #if (FEE_NO_FALLBACK_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1011  #define FEE_START_SEC_VAR_INIT_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1012  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1013  extern Fee_WriteStateNoFb_ten Fee_WriteStateNoFb_en;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1014  #define FEE_STOP_SEC_VAR_INIT_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1015  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1016  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1017  #define FEE_START_SEC_VAR_CLEARED_32
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1018  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1019  extern VAR(uint32, AUTOMATIC)   Fee_Rb_NoFallback_RemAdr_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1020  #define FEE_STOP_SEC_VAR_CLEARED_32
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1021  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1022  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1023  #define FEE_START_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1024  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1025  extern VAR(boolean, AUTOMATIC)  Fee_Rb_NoFallback_LastBlockCfg_b;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1026  extern VAR(boolean, AUTOMATIC)  Fee_Rb_InvalidateOldCopy_b;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1027  extern VAR(boolean, AUTOMATIC)  Fee_Rb_MaintainRun_b;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1028  #define FEE_STOP_SEC_VAR_CLEARED_8
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1029  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1030  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1031  #define FEE_START_SEC_CONST_8
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1032  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1033  extern const uint8 Fee_NoFallbackMarkerPattern[FEE_PAGES_USED_BY_BLK_HEADER * FEE_PAGE_LEN];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1034  #define FEE_STOP_SEC_CONST_8
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1035  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1036  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1037  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1038  #if((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) && (FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE != 0))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1039  /* Unknown blcok sector reorganiation with cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1040  #define FEE_START_SEC_VAR_CLEARED_32
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1041  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1042  extern VAR(uint32, AUTOMATIC) Fee_UnknownBlkCache_Addr_au32[FEE_RB_ACT_UNKNOWN_BLK_CACHE_ARRAY_SIZE];   /* Address of unknown block. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1043  #define FEE_STOP_SEC_VAR_CLEARED_32
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1044  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1045  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1046  #define FEE_START_SEC_VAR_CLEARED_16
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1047  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1048  extern VAR(uint16, AUTOMATIC) Fee_UnknownBlkCache_FeeIndex_u16[FEE_RB_ACT_UNKNOWN_BLK_CACHE_ARRAY_SIZE]; /* Index of unknown block. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1049  #define FEE_STOP_SEC_VAR_CLEARED_16
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1050  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1051  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1052  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1053  /* Lower Layer functions of the Fee */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1054  #define FEE_START_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1055  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1056  extern FUNC(uint32, FEE_CODE) Fee_CalculateNumOfFreeBytesInCurSector(VAR(uint32, FEE_VAR) DataEndAdr_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1057  extern FUNC(void, FEE_CODE)   Fee_InitVarAndState(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1058  extern FUNC(void, FEE_CODE)   Fee_InitCache(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1059  extern FUNC(void, FEE_CODE)   Fee_InitOrderFifoBuffer(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1060  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1061  /* Active sector detection */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1062  extern FUNC(void ,FEE_CODE)   Fee_LLSearchSectors(P2VAR(Fee_stSecDet_tst, AUTOMATIC, FEE_APPL_DATA) Fee_stSecDet_ps);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1063  extern FUNC(uint8, FEE_CODE)  Fee_LLDetectActiveSector(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1064  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLFindEmptyPage(uint8 PhySectIdxUsedSect_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1065  extern FUNC(uint8, FEE_CODE)  Fee_GetMostCurrentSectorIdx(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1066  extern FUNC(void, FEE_CODE)   Fee_CheckErasedSectorEmpty(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1067  extern FUNC(uint8, FEE_CODE)  Fee_GetPhysSectorByAddress(VAR(uint32, AUTOMATIC) Address_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1068  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1069  /* Marker handling */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1070  extern FUNC(Fee_stRetVal_ten,FEE_CODE)  Fee_LLWriteMarker(VAR(uint8, AUTOMATIC) PhySectIdx_u8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1071                                                            VAR(uint8, AUTOMATIC) MarkerID_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1072  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1073  /* Erase functions */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1074  extern FUNC(Fee_stRetVal_ten,FEE_CODE)  Fee_LLEraseSector(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1075  extern FUNC(void,FEE_CODE)              Fee_LLSetEraseSector(VAR(uint8, AUTOMATIC) EraseLogIdx);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1076  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1077  /* Block header access */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1078  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLSearchNextBlkHeader(P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) Fee_GlobInfoLastRdHeader_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1079                                                                    VAR(uint8, AUTOMATIC) CachedAccess_u8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1080                                                                    VAR(uint8, AUTOMATIC) FastCacheUpdate_u8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1081                                                                    VAR(boolean, AUTOMATIC) xForcePageBufReload_b,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1082                                                                    VAR(uint32, AUTOMATIC) strAddrHdrSearch);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1083  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1084  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLSearchSpecifiedBlkHeader(VAR(uint16, AUTOMATIC) FeeIdx_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1085                                                                         P2VAR(uint32, AUTOMATIC, FEE_APPL_DATA) LastHdrAddr_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1086                                                                         P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) GlobBlkHdr_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1087                                                                         VAR(boolean, AUTOMATIC) SearchRetry_b);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1088  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1089  #if((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) || (FEE_RB_ACT_SURVIVAL_EVAL != FALSE))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1090  /* Unknown blcok sector reorganiation without cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1091  #if(FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE == 0)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1092  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLSearchUnknownBlkHeader(P2VAR(uint32, AUTOMATIC, FEE_APPL_DATA) StartHdrAddr_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1093                                                                       P2VAR(uint32, AUTOMATIC, FEE_APPL_DATA) LastHdrAddr_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1094                                                                       P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) GlobBlkHdr_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1095                                                                       P2VAR(boolean, AUTOMATIC, FEE_APPL_DATA) SearchRetry_ptr);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1096  #else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1097  /* Unknown blcok sector reorganiation with cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1098  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_BuildUpCacheUnknownBlk(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1099  #endif /* (FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE == 0) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1100  #endif /* ((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) || (FEE_RB_ACT_SURVIVAL_EVAL != FALSE)) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1101  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1102  extern FUNC(uint32, FEE_CODE) Fee_LLGetSecStartAddress(VAR(uint8, AUTOMATIC) xPhySectorIdx_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1103  extern FUNC(uint32, FEE_CODE) Fee_LLGetSecEndAddress(VAR(uint8, AUTOMATIC) xPhySectorIdx_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1104  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1105  /* Verification and handling of blocks */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1106  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLCompBlkInFlash(P2CONST(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) HeaderInfo_pcst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1107                                                               P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) Data_pcu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1108  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLCalcBlkCrcInFlash(P2CONST(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) HeaderInfo_pcst);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1109  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLCpyBlkFromFls2Fls(P2CONST(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) Fee_GlobInfoLastRdHeader_pcst, boolean Fee_WriteTwice_b);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1110  #if defined (FEE_PRV_ROBUST_SECT_OVERFLOW)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1111  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LlRobustSectorOverflow(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1112  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1113  extern FUNC(void, FEE_CODE)             Fee_LLPrepMarkerBufWithMarkerData(P2CONST(Fee_MarkerProp_t, AUTOMATIC, FEE_APPL_DATA) Marker_pcst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1114                                                                            P2VAR(uint8, AUTOMATIC, FEE_APPL_DATA) MarkerBuf_pu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1115  extern FUNC(void, FEE_CODE)             Fee_LLCopyPageBuff2Marker(P2VAR(Fee_MarkerProp_t, AUTOMATIC, FEE_APPL_DATA) Marker_pst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1116                                                                    P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) PageBuf_pcu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1117  extern FUNC(void, FEE_CODE)             Fee_LLPrepPageBufWithHdrDataStart(P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) HeaderInfo_pst);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1118  extern FUNC(void, FEE_CODE)             Fee_LLPrepPageBufWithHdrDataEnd(P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) HeaderInfo_pst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1119                                                                                 P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) Data_pcu8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1120                                                                                 VAR(uint32, AUTOMATIC) BlkCrc32_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1121  #define FEE_STOP_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1122  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1123  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1124  LOCAL_INLINE FUNC(void, FEE_CODE)       Fee_LLCopyPageBuff2HeaderStart(P2VAR(Fee_BlkHeader_tst, AUTOMATIC, FEE_APPL_DATA) BlkHdr_pst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1125                                                                         P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) PageBuf_pcu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1126  #if(FEE_FAST_CACHE_INIT_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1127  LOCAL_INLINE FUNC(void, FEE_CODE)       Fee_LLCopyPageBuff2HeaderIdxAndCrc(P2VAR(Fee_BlkHeader_tst, AUTOMATIC, FEE_APPL_DATA) BlkHdr_pst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1128                                                                             P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) PageBuf_pcu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1129  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1130  #define FEE_START_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1131  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1132  #if !( defined(RBA_FLSRH850P1xC_FLASH) || defined(RBA_FLSV850R1x_FLASH) || defined(RBA_FLSRH850xx_FLASH) )
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1133  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_SearchLastBlkHeader(P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) Fee_GlobInfoLastRdHeader_ptr);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1134  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1135  #define FEE_STOP_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1136  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1137  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1138  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1139  #define FEE_START_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1140  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1141  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1142  extern FUNC(uint32, FEE_CODE)           Fee_SearchHighestCacheEntry(VAR(uint32,FEE_VAR) UpperBoundary_u32, VAR(uint8, FEE_VAR) SectIdx_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1143  extern FUNC(void, FEE_CODE)             Fee_InvalidateCacheByAddress(VAR(uint32,FEE_VAR) xAddress_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1144  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1145  extern FUNC(void, FEE_CODE)             Fee_LLCopyPageBuff2HeaderMid(P2VAR(Fee_BlkHeader_tst, AUTOMATIC, FEE_APPL_DATA) BlkHdr_pst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1146                                                                       P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) PageBuf_pcu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1147  extern FUNC(void, FEE_CODE)             Fee_LLCopyPageBuff2HeaderEnd(P2VAR(Fee_BlkHeader_tst, AUTOMATIC, FEE_APPL_DATA) BlkHdr_pst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1148                                                                       P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) PageBuf_pcu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1149  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLCopyData2Buffer(P2CONST(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) Fee_GlobInfoLastRdHeader_pcst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1150                                                                    P2VAR(uint8, AUTOMATIC, FEE_APPL_DATA) DataPtr_pu8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1151                                                                    VAR(uint16, FEE_VAR) DataOffset_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1152                                                                    VAR(uint16, FEE_VAR) DataLength_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1153  extern FUNC(void, FEE_CODE)             Fee_IncAddressInsideSector(P2VAR(uint32, AUTOMATIC, FEE_APPL_DATA) Address_u32,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1154                                                                     VAR(uint16, FEE_VAR) numBytes_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1155                                                                     VAR(boolean, FEE_VAR) EnsurePageAlign_b);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1156  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1157  /* Sector reorganization */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1158  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLCheckReorganizationNeed(VAR(uint32, AUTOMATIC) Threshold_u32,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1159                                                                        VAR(uint16, AUTOMATIC) DataLength_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1160  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLSectorReorganization(P2VAR(boolean, AUTOMATIC, FEE_APPL_DATA) SectReorgInterSt_pb);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1161  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1162  /* Block writes */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1163  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_HLWriteBlock(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1164  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLWriteBlock(P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) Info_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1165                                                           P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) Data_pcu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1166  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1167  /* Block reading */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1168  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_HLReadBlock(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1169  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLReadBlock(P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) Info_ptr,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1170                                                          P2VAR(uint8,AUTOMATIC, FEE_APPL_DATA) Data_ptr);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1171   #if(FEE_RB_MAINTAIN != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1172      /* Block maintaining*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1173      extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_HLMaintainBlock(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1174   #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1175  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1176  /* Order handling */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1177  extern FUNC(Std_ReturnType, FEE_CODE)   Fee_HLPlaceOrder(VAR(uint16, AUTOMATIC) Blocknumber_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1178                                                           VAR(uint16, AUTOMATIC) Offset_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1179                                                           P2VAR(uint8, AUTOMATIC, FEE_APPL_DATA) DataBufferPtr_pu8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1180                                                           VAR(uint16, AUTOMATIC) Length_16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1181                                                           VAR(Fee_HlMode_ten, AUTOMATIC) Mode_en);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1182  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1183  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1184  /* Cache handling */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1185  extern FUNC(uint32, FEE_CODE) Fee_LLGetAddressFromCache(VAR(uint16, AUTOMATIC) FeeIdx_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1186  extern FUNC(boolean, FEE_CODE) Fee_LLCheckAddressInCache(VAR(uint32, AUTOMATIC) AdrInSector_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1187  extern FUNC(void, FEE_CODE)   Fee_LLUpdateAddressInCache(VAR(uint16, AUTOMATIC) FeeIdx_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1188                                                           VAR(uint32, AUTOMATIC) Addr_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1189  extern FUNC(void, FEE_CODE)  Fee_LLUpdateCacheStForSect(VAR(uint8, AUTOMATIC) PhySecIdx_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1190  extern FUNC(void, FEE_CODE)  Fee_LLEraseCacheStForSect(VAR(uint8, AUTOMATIC) PhySecIdx_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1191  extern FUNC(uint8, FEE_CODE) Fee_LLGetCacheUpdateStForSect(VAR(uint8, AUTOMATIC) PhySecIdx_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1192  extern FUNC(uint8, FEE_CODE) Fee_LLGetCacheUpdateStForAllSect(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1193  extern FUNC(boolean, FEE_CODE) Fee_SrvBinarySearchInBlockProp(VAR(uint16, AUTOMATIC) FeeIdx_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1194                                                                P2VAR(uint16, AUTOMATIC, FEE_APPL_DATA) CacheIdx_pu16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1195  #define FEE_STOP_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1196  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1197  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1198  #if(FEE_FAST_CACHE_INIT_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1199  LOCAL_INLINE FUNC(boolean, FEE_CODE) Fee_SrvBinarySearchInBlockPropFast(VAR(uint16, AUTOMATIC) FeeIdx_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1200                                                                          P2VAR(uint16, AUTOMATIC, FEE_APPL_DATA) CacheIdx_pu16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1201  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1202  #define FEE_START_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1203  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1204  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_BuildUpCache(VAR(uint32, AUTOMATIC) StartAdr_u32,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1205                                                           VAR(uint32, AUTOMATIC) EndAdr_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1206  extern FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_BuildUpCacheForAllSect(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1207  #define FEE_STOP_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1208  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1209  /* FEE_FAST_CACHE_INIT_ACTIVE != FALSE */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1210  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1211  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1212  #define FEE_START_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1213  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1214  /* Services */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1215  extern FUNC(void, FEE_CODE)  Fee_SrvMemSet8(P2VAR(uint8, AUTOMATIC, FEE_APPL_DATA) xDest_pu8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1216                                              VAR(uint32, FEE_VAR) xPattern_u32,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1217                                              VAR(uint32, FEE_VAR) numBytes_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1218  extern FUNC(void, FEE_CODE)  Fee_SrvMemCopy8(P2VAR(uint8, AUTOMATIC, FEE_APPL_DATA) xDest_pu8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1219                                               P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) xSrc_pcu8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1220                                               VAR(uint32, FEE_VAR) numBytes_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1221  extern FUNC(void, FEE_CODE)  Fee_SrvSetFifoMode(VAR(Fee_HlMode_ten, AUTOMATIC) Mode_en,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1222                                                  VAR(uint16, AUTOMATIC) xJobType_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1223  extern FUNC(Fee_HlMode_ten, FEE_CODE) Fee_SrvGetFifoMode(VAR(uint16, AUTOMATIC) xJobType_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1224  extern FUNC(void, FEE_CODE)           Fee_LoadNextOrder(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1225  extern FUNC(uint8, FEE_CODE)          Fee_SearchNextOrder(boolean isIntOrder_b);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1226  extern FUNC(void, FEE_CODE)           Fee_UpdateStatus(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1227  extern FUNC(void, FEE_CODE)           Fee_TriggerHardSectorReorg(VAR(Fee_Rb_WorkingStateType_ten, FEE_VAR) WorkingState_en);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1228  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1229  extern FUNC(Std_ReturnType, FEE_CODE) Fee_CheckBlockCfg(VAR(uint8, AUTOMATIC)  ApiId_u8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1230                                                             VAR(uint16, AUTOMATIC) BlockNum_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1231  extern FUNC(Std_ReturnType, FEE_CODE) Fee_CheckModuleSt(VAR(uint8, AUTOMATIC)  ApiId_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1232  extern FUNC(Std_ReturnType, FEE_CODE) Fee_CheckAdrPtr(VAR(uint8, AUTOMATIC) ApiId_u8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1233                                                        P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) DataBufferPtr_pcu8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1234  extern FUNC(Std_ReturnType, FEE_CODE) Fee_CheckBlkOfs(VAR(uint8, AUTOMATIC) ApiId_u8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1235                                                        VAR(uint16, AUTOMATIC) BlockNum_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1236                                                        VAR(uint16, AUTOMATIC) BlockOfs_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1237  extern FUNC(Std_ReturnType, FEE_CODE) Fee_CheckBlkLen(VAR(uint8, AUTOMATIC) ApiId_u8,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1238                                                        VAR(uint16, AUTOMATIC) BlockNum_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1239                                                        VAR(uint16, AUTOMATIC) BlockOfs_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1240                                                        VAR(uint16, AUTOMATIC) BlockLen_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1241  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1242  /* Miscellaneous */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1243  extern FUNC(void, FEE_CODE)   Fee_CheckFlsJobResult(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1244  extern void (* Fee_Prv_ResetUsedSectors_pfn)(void);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1245  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1246  #if (FEE_PRV_DEBUG_MONITOR != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1247  extern FUNC(void ,FEE_CODE) Fee_DBM_RepError(VAR(uint16,FEE_VAR) FeeBlkIdx, VAR(Fee_DebugMonitoringFct_ten,FEE_VAR) xError, VAR(uint8,FEE_VAR) xErrorInfo);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1248  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1249  #define FEE_STOP_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1250  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1251  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1252  /*
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1253  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1254  * Inline functions (Necessary for fastening up the start up time)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1255  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1256  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1257  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1258   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1259   * Fee_LLCopyPageBuff2HeaderStart(): Extract the start of the block header data
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1260   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1261   * This function extracts the preamble of the block header data out
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1262   * of the page buffer (called every 8th byte of the flash).
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1263   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1264   * Hint: Block header structure:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1265   *       {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1266   *          uint8   Preamble_au8[3];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1267   *          uint8   BlkStatus_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1268   *          uint16  FeeIndex_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1269   *          uint16  BlkLength_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1270   *          uint16  HdrCrc16_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1271   *          uint32  BlkCrc32_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1272   *       }Fee_BlkHeader_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1273   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1274   * \param    BlkHdr_pst:    Pointer to the block header that was
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1275   *                          found in the flash.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1276   * \param    PageBuf_pu8:   Pointer to the page buffer
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1277   * \return
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1278   * \retval   none
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1279   * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1280   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1281   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1282   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1283  LOCAL_INLINE FUNC(void, FEE_CODE) Fee_LLCopyPageBuff2HeaderStart(P2VAR(Fee_BlkHeader_tst, AUTOMATIC, FEE_APPL_DATA) BlkHdr_pst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1284                                                                   P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) PageBuf_pcu8)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1285  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1286      BlkHdr_pst->Preamble_au8[0] = PageBuf_pcu8[0];      /* 0xA53C96 <- [0]: A5, [1]: 3C, [2]: 96 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1287      BlkHdr_pst->Preamble_au8[1] = PageBuf_pcu8[1];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1288      BlkHdr_pst->Preamble_au8[2] = PageBuf_pcu8[2];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1289  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1290  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1291  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1292  #if(FEE_FAST_CACHE_INIT_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1293  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1294   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1295   * Fee_LLCopyPageBuff2HeaderIdxAndCrc(): Extract the header checksum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1296   *  and the block index out of the block header data
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1297   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1298   * This function extracts the block header data out of the page buffer.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1299   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1300   * Hint: Block header structure:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1301   *       {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1302   *          uint8   Preamble_au8[3];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1303   *          uint8   BlkStatus_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1304   *          uint16  FeeIndex_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1305   *          uint16  BlkLength_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1306   *          uint16  HdrCrc16_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1307   *          uint32  BlkCrc32_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1308   *       }Fee_BlkHeader_tst;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1309   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1310   * \param    BlkHdr_pst:    Pointer to the block header that was
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1311   *                          found in the flash.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1312   * \param    PageBuf_pcu8:  Pointer to the page buffer
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1313   * \return
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1314   * \retval   none
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1315   * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1316   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1317   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1318   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1319  LOCAL_INLINE FUNC(void, FEE_CODE) Fee_LLCopyPageBuff2HeaderIdxAndCrc(P2VAR(Fee_BlkHeader_tst, AUTOMATIC, FEE_APPL_DATA) BlkHdr_pst,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1320                                                                       P2CONST(uint8, AUTOMATIC, FEE_APPL_DATA) PageBuf_pcu8)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1321  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1322      /* 0xD2E9 <- [4]: D2, [5]: E9 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1323      BlkHdr_pst->FeeIndex_u16    = (uint16)((uint16)(((uint16)(PageBuf_pcu8[4])) << 8u)  | (uint16)(PageBuf_pcu8[5]));
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1324  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1325      /* 0xABCD <- [8]: AB, [9]: CD */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1326      BlkHdr_pst->HdrCrc16_u16    = (uint16)((uint16)(((uint16)(PageBuf_pcu8[8])) << 8u)  | (uint16)(PageBuf_pcu8[9]));
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1327  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1328  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1329  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1330  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1331   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1332   * Fee_SrvBinarySearchInBlockProp(): Get the respective index out of
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1333   *                                   the block properties table
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1334   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1335   * This function searches for the respective block properties table
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1336   * index. In case unknown blocks are searched, the function will
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1337   * return with a negative response.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1338   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1339   * \param    FeeIdx_u16:    Fee index (persistent ID)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1340   * \param    CacheIdx_pu16: Pointer for the result
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1341   * \return   Success of the function
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1342   * \retval   FALSE: Corresponding index was not found
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1343   * \retval   TRUE:  Corresponding index was found
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1344   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1345   * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1346   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1347   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1348   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1349  LOCAL_INLINE FUNC(boolean, FEE_CODE) Fee_SrvBinarySearchInBlockPropFast(VAR(uint16, AUTOMATIC) FeeIdx_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1350                                                                          P2VAR(uint16, AUTOMATIC, FEE_APPL_DATA) CacheIdx_pu16)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1351  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1352      VAR(boolean, AUTOMATIC)  xFuncRet_b = FALSE;    /* Function return value */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1353      VAR(uint16, AUTOMATIC)  xMid_u16;               /* Mid index for the search */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1354      VAR(uint16, AUTOMATIC)  xLeft_u16 = 0;          /* Left index for the search */
	mov	d3,#0
.L618:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1355      VAR(uint16, AUTOMATIC)  xRight_u16 = FEE_NUM_BLOCKS - 1u; /* Right index for the search */
	mov	d4,#11

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1398      while(xRight_u16 >= xLeft_u16);      (inlined)
.L188:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1356  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1357      /* Loop until the value is found */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1358      do
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1359      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1360          /* Divide search area by two */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1361          xMid_u16 = (uint16)(xLeft_u16 + ((xRight_u16 - xLeft_u16) / 2));
	sub	d0,d4,d3
.L1258:
	mov	d1,#2
.L1259:
	div	e0,d0,d1
.L1260:
	add	d0,d3
.L1261:
	extr.u	d15,d0,#0,#16
.L619:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1362  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1363          /* Check the cache content */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1364          if(Fee_BlockProperties_st[xMid_u16].BlockPersistentId_u16 == FeeIdx_u16)
	sha	d0,d15,#4
.L1262:
	movh.a	a4,#@his(Fee_BlockProperties_st)
	lea	a4,[a4]@los(Fee_BlockProperties_st)
.L1263:
	addsc.a	a4,a4,d0,#0
.L1264:
	ld.hu	d0,[a4]0
.L1265:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1364          if(Fee_BlockProperties_st[xMid_u16].BlockPersistentId_u16 == FeeIdx_u16)      (inlined)
	jne	d0,d2,.L189
.L1266:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1365          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1366              /* Index was found, set return value */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1367              *CacheIdx_pu16 = xMid_u16;
	st.h	[a2],d15
.L1267:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1368  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1369              /* Return positive response */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1370              xFuncRet_b = TRUE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1371  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1372              /* Leave the loop */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1373              return xFuncRet_b;
	mov	d15,#1
.L620:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1373              return xFuncRet_b;      (inlined)
	j	.L190

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1364          if(Fee_BlockProperties_st[xMid_u16].BlockPersistentId_u16 == FeeIdx_u16)      (inlined)
.L189:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1377          if(Fee_BlockProperties_st[xMid_u16].BlockPersistentId_u16 > FeeIdx_u16)      (inlined)
	jge.u	d2,d0,.L191
.L1268:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1380              if(xMid_u16 != 0)      (inlined)
	jeq	d15,#0,.L192
.L1269:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1374          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1375  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1376          /* Check the current array index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1377          if(Fee_BlockProperties_st[xMid_u16].BlockPersistentId_u16 > FeeIdx_u16)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1378          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1379              /* Check if the lowest array position is reached */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1380              if(xMid_u16 != 0)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1381              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1382                  /* Reduce the right limit to the left */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1383                  xRight_u16 = (uint16)(xMid_u16 - 1u);
	add	d4,d15,#-1
.L1270:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1383                  xRight_u16 = (uint16)(xMid_u16 - 1u);      (inlined)
	j	.L193

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1380              if(xMid_u16 != 0)      (inlined)
.L192:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1384              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1385              else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1386              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1387                  /* Leave the loop with a negative response */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1388                  return xFuncRet_b;
	mov	d15,#0
.L621:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1388                  return xFuncRet_b;      (inlined)
	j	.L194

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1385              else      (inlined)
.L193:
	j	.L195

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1377          if(Fee_BlockProperties_st[xMid_u16].BlockPersistentId_u16 > FeeIdx_u16)      (inlined)
.L191:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1389              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1390          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1391          else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1392          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1393              /* Reduce the left limit to the right (upper limit is
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1394               * safe because of the loop condition) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1395              xLeft_u16 = (uint16)(xMid_u16 + 1u);
	add	d15,#1
.L622:
	extr.u	d3,d15,#0,#16

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1391          else      (inlined)
.L195:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1398      while(xRight_u16 >= xLeft_u16);      (inlined)
	jge.u	d4,d3,.L188
.L1271:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1396          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1397      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1398      while(xRight_u16 >= xLeft_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1399  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1400      return xFuncRet_b;
	mov	d15,#0

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1400      return xFuncRet_b;      (inlined)
	j	.L196

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_Prv.h	  1401  }      (inlined)
.L196:
.L194:
.L190:
	jeq	d15,#0,.L197
.L1272:
	ld.hu	d15,[a10]24
.L1273:
	movh.a	a2,#@his(Fee_Cache_au32)
	lea	a2,[a2]@los(Fee_Cache_au32)
.L1274:
	addsc.a	a2,a2,d15,#2
.L1275:
	st.w	[a2],d13
.L197:
.L185:
.L184:
	j	.L198
.L181:
.L180:
.L179:
.L178:
	jne	d9,#1,.L199
.L1276:
	ld.w	d15,[a10]28
.L1277:
	jeq	d15,#0,.L200
.L1278:
	ld.w	d10,[a10]16
.L1279:
	j	.L201
.L200:
	ld.w	d15,[a10]16
.L1280:
	add	d4,d15,#4
.L1281:
	lea	a4,[a10]32
.L1282:
	mov	d5,#4
	call	Fee_Fls_SyncRead
.L1283:
	ld.w	d15,[a10]32
.L1284:
	jeq	d15,#0,.L202
.L1285:
	ld.w	d10,[a10]16
.L1286:
	j	.L203
.L202:
.L203:
.L201:
	j	.L204
.L199:
.L204:
	lea	a4,[a10]16
.L1287:
	mov	d4,#8
.L1288:
	mov	d5,#0
	call	Fee_IncAddressInsideSector
.L198:
	ld.w	d0,[a10]16
.L1289:
	ld.w	d15,[a10]20
.L1290:
	jlt.u	d0,d15,.L177
.L1291:
	jne	d9,#1,.L205
.L1292:
	st.w	[a12]32,d10
.L1293:
	st.w	[a12]36,d12
.L1294:
	j	.L206
.L205:
.L206:
	ld.w	d15,[a10]16
.L1295:
	st.w	[a15],d15
.L1296:
	ld.w	d15,[a10]20
.L1297:
	st.w	[a14],d15
.L1298:
	ld.w	d15,[a10]20
.L1299:
	lt.u	d15,d15,d11
.L1300:
	cmovn	d8,d15,#5
.L207:
	j	.L208
.L160:
	mov	d8,#3
.L1301:
	j	.L209
.L209:
.L208:
.L172:
.L170:
	movh.a	a15,#@his(Fee_stMain)
	lea	a15,[a15]@los(Fee_stMain)
	ld.w	d15,[a15]
.L1302:
	jne	d15,#0,.L210
.L1303:
	jne	d8,#0,.L211
.L1304:
	movh.a	a15,#@his(_999008_xRdAdrEndContinue_u32)
	lea	a15,[a15]@los(_999008_xRdAdrEndContinue_u32)
.L1305:
	movh.a	a2,#@his(_999007_xRdAdrContinue_u32)
	lea	a2,[a2]@los(_999007_xRdAdrContinue_u32)
	ld.w	d15,[a2]
.L1306:
	ld.w	d0,[a15]
.L1307:
	jlt.u	d15,d0,.L157
.L211:
.L210:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2581  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2582      #if (FEE_PRV_DEBUGGING != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2583      Fee_Prv_stModuleTest_st.BuildUpCacheDiffRemainInside_u32 =
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2584                          MCU_RB_TIM0TICKS_TO_US(Mcu_Rb_GetSysTimePart(TIM0) -
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2585                                                 Fee_Prv_stModuleTest_st.BuildUpCacheStart_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2586  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2587      /* Check for the maximum outside of the ECU init phase */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2588      if((Fee_Prv_stModuleTest_st.BuildUpCacheDiffRemainInside_u32 > Fee_Prv_stModuleTest_st.BuildUpCacheRemainInsideMax_u32) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2589         (Fee_stMain != FEE_POLLING_MODE_E))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2590      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2591          Fee_Prv_stModuleTest_st.BuildUpCacheRemainInsideMax_u32 = Fee_Prv_stModuleTest_st.BuildUpCacheDiffRemainInside_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2592      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2593      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2594  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2595      /* Check for necessary resets */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2596      if(xRetVal != FEE_ORDER_PENDING_E)
	jeq	d8,#0,.L212
.L1308:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2597      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2598          /* Reset state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2599          Fee_RdWrOrder_st.Fee_LLBuildUpCache_en = FEE_LL_BLD_UP_CACHE_INIT_E;
	mov	d15,#0
.L1309:
	st.w	[a13],d15
.L212:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2600  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2601          #if (FEE_PRV_DEBUGGING != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2602          Fee_Prv_stModuleTest_st.BuildUpCacheDiff_u32 =
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2603                              MCU_RB_TIM0TICKS_TO_US(Mcu_Rb_GetSysTimePart(TIM0) -
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2604                                                     Fee_Prv_stModuleTest_st.BuildUpCacheStart_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2605  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2606          /* Check for the maximum outside of the ECU init phase */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2607          if((Fee_Prv_stModuleTest_st.BuildUpCacheDiff_u32 > Fee_Prv_stModuleTest_st.BuildUpCacheMax_u32) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2608             (Fee_stMain != FEE_POLLING_MODE_E))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2609          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2610              Fee_Prv_stModuleTest_st.BuildUpCacheMax_u32 = Fee_Prv_stModuleTest_st.BuildUpCacheDiff_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2611          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2612          #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2613      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2614  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2615      return xRetVal;
	mov	d2,d8
.L623:
	j	.L213

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2616  }
.L213:
	ret
.L462:
	
__Fee_BuildUpCache_function_end:
	.size	Fee_BuildUpCache,__Fee_BuildUpCache_function_end-Fee_BuildUpCache
.L370:
	; End of function
	
	.sdecl	'.text.rba_FeeFs1_LlSearchBlk.Fee_BuildUpCacheForAllSect',code,cluster('Fee_BuildUpCacheForAllSect')
	.sect	'.text.rba_FeeFs1_LlSearchBlk.Fee_BuildUpCacheForAllSect'
	.align	2
	
	.global	Fee_BuildUpCacheForAllSect

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2617  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2618  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2619  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2620   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2621   * Fee_BuildUpCacheForAllSect(): Build up the cache for all
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2622   *                               available sectors
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2623   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2624   * This function builds up the cache for all sectors that are
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2625   * configured.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2626   * The function can execute one sector without returning in case
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2627   * this is necessary (e.g. during the ECU init) or verify
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2628   * the block checksum.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2629   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2630   * \param    none
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2631   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2632   * \return
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2633   * \retval   FEE_ORDER_PENDING_E:   Order is pending
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2634   * \retval   FEE_ORDER_FINISHED_E:  Order is finished
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2635   * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2636   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2637   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2638   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2639  FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_BuildUpCacheForAllSect(void)
; Function Fee_BuildUpCacheForAllSect
.L285:
Fee_BuildUpCacheForAllSect:	.type	func

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2640  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2641      Fee_stRetVal_ten xtmpRetVal;                        /* Function return */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2642      Fee_stRetVal_ten xRetVal = FEE_ORDER_PENDING_E;     /* Function return */
	mov	d8,#0
.L624:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2643      static uint8 xLogSecIdxForCache_u8;                 /* Index of logical sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2644  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2645      /* Loop if polling mode is active and function state is pending */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2646      do
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2647      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2648          /* Switch over state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2649          switch (Fee_RdWrOrder_st.Fee_LLBuildUpCacheAllSect_en)
	movh.a	a15,#@his(Fee_RdWrOrder_st)
	lea	a15,[a15]@los(Fee_RdWrOrder_st)
.L1314:
	lea	a12,[a15]112

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2650          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2651              /* Init case */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2652              case FEE_LL_BLD_UP_CACHE_ALL_SECT_INIT_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2653              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2654                  /* Init the sector index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2655                  xLogSecIdxForCache_u8 = 0;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2656  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2657                  /* Set next state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2658                  Fee_RdWrOrder_st.Fee_LLBuildUpCacheAllSect_en = FEE_LL_BLD_UP_CACHE_ALL_SECT_DO_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2659              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2660              /* No break to save time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2661  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2662              /* Build up the cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2663              /* MR12 RULE 16.3 VIOLATION: Time critical position */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2664              case FEE_LL_BLD_UP_CACHE_ALL_SECT_DO_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2665              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2666                  /* Build up the cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2667                  xtmpRetVal = Fee_BuildUpCache(Fee_FlashProp_st[Fee_LLSectorOrder_st[xLogSecIdxForCache_u8].xPhySecIdx_u8].Fee_LogStartAddress_u32,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2668                                                Fee_FlashProp_st[Fee_LLSectorOrder_st[xLogSecIdxForCache_u8].xPhySecIdx_u8].Fee_LogEndAddress_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2669  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2670                     /* Check the function return */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2671                  if(xtmpRetVal != FEE_ORDER_PENDING_E)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2672                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2673                      /* Check if all relevant sectors have been checked so far */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2674                      xLogSecIdxForCache_u8++;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2675                      if(xLogSecIdxForCache_u8 >= (Fee_NumFlashBanksUsed_u8))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2676                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2677                          /* Finish the function */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2678                          xRetVal = FEE_ORDER_FINISHED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2679                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2680                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2681              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2682              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2683  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2684              /* This case should never be reached */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2685              default:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2686                  /* Finish the function, the return type is currently not
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2687                   * evaluated (only called in Ini) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2688                  xRetVal = FEE_ORDER_FINISHED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2689              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2690          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2691      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2692      while((Fee_stMain == FEE_POLLING_MODE_E) && (xRetVal == FEE_ORDER_PENDING_E));
.L214:
	ld.w	d0,[a12]
.L1315:
	mov	d15,#0
	jeq	d15,d0,.L215
.L1316:
	mov	d15,#1
	jeq	d15,d0,.L216
	j	.L217
.L215:
	movh.a	a15,#@his(_999009_xLogSecIdxForCache_u8)
	lea	a15,[a15]@los(_999009_xLogSecIdxForCache_u8)
.L1317:
	mov	d0,#0
.L1318:
	st.b	[a15],d0
.L1319:
	mov	d0,#1
.L1320:
	st.w	[a12],d0
.L216:
	movh.a	a13,#@his(_999009_xLogSecIdxForCache_u8)
	lea	a13,[a13]@los(_999009_xLogSecIdxForCache_u8)
.L1321:
	ld.bu	d0,[a13]
.L1322:
	mul	d15,d0,#12
.L1323:
	movh.a	a15,#@his(Fee_LLSectorOrder_st)
	lea	a15,[a15]@los(Fee_LLSectorOrder_st)
.L1324:
	addsc.a	a15,a15,d15,#0
.L1325:
	ld.bu	d15,[a15]8
	sha	d15,#4
.L1326:
	movh.a	a15,#@his(Fee_FlashProp_st)
	lea	a15,[a15]@los(Fee_FlashProp_st)
.L1327:
	addsc.a	a15,a15,d15,#0
.L1328:
	ld.w	d4,[a15]8
.L1329:
	ld.w	d5,[a15]12
	call	Fee_BuildUpCache
.L625:
	jeq	d2,#0,.L218
.L1330:
	ld.bu	d15,[a13]
.L1331:
	add	d15,#1
	st.b	[a13],d15
.L1332:
	ld.bu	d15,[a13]
.L1333:
	movh.a	a15,#@his(Fee_NumFlashBanksUsed_u8)
	lea	a15,[a15]@los(Fee_NumFlashBanksUsed_u8)
	ld.bu	d0,[a15]
.L1334:
	lt.u	d15,d15,d0
.L1335:
	cmovn	d8,d15,#1
.L219:
.L218:
	j	.L220
.L217:
	mov	d8,#1
.L1336:
	j	.L221
.L221:
.L220:
	movh.a	a15,#@his(Fee_stMain)
	lea	a15,[a15]@los(Fee_stMain)
	ld.w	d15,[a15]
.L1337:
	jne	d15,#0,.L222
.L1338:
	jeq	d8,#0,.L214
.L222:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2693  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2694      /* Check the function state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2695      if(xRetVal != FEE_ORDER_PENDING_E)
	jeq	d8,#0,.L223
.L1339:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2696      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2697          /* Reset the state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2698          Fee_RdWrOrder_st.Fee_LLBuildUpCacheAllSect_en = FEE_LL_BLD_UP_CACHE_ALL_SECT_INIT_E;
	mov	d15,#0
.L1340:
	st.w	[a12],d15
.L223:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2699      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2700  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2701      return xRetVal;
	mov	d2,d8
.L626:
	j	.L224

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2702  }
.L224:
	ret
.L499:
	
__Fee_BuildUpCacheForAllSect_function_end:
	.size	Fee_BuildUpCacheForAllSect,__Fee_BuildUpCacheForAllSect_function_end-Fee_BuildUpCacheForAllSect
.L375:
	; End of function
	
	.sdecl	'.text.rba_FeeFs1_LlSearchBlk.Fee_SearchLastBlkHeader',code,cluster('Fee_SearchLastBlkHeader')
	.sect	'.text.rba_FeeFs1_LlSearchBlk.Fee_SearchLastBlkHeader'
	.align	2
	
	.global	Fee_SearchLastBlkHeader

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2703  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2704  #if !( defined(RBA_FLSRH850P1xC_FLASH) || defined(RBA_FLSV850R1x_FLASH) || defined(RBA_FLSRH850xx_FLASH) )
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2705  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2706   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2707   * Fee_SearchLastBlkHeader(): Return the latest valid block
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2708   *                            header address within one sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2709   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2710   * This function returns the latest valid block header address out of
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2711   * the Fee_RdWrOrder_st.xRdAddress sector which can be found in the cache.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2712   * This read address can point somewhere into a sector.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2713   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2714   * \param    none
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2715   * \return
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2716   * \retval   FEE_ORDER_PENDING_E:   Function is still pending
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2717   * \retval   FEE_ERROR_E:           An error occurred
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2718   * \retval   FEE_ABORTED_E:         Order was aborted
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2719   * \retval   FEE_ORDER_FINISHED_E:  Function is finished
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2720    * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2721   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2722   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2723   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2724  FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_SearchLastBlkHeader(P2VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC, FEE_APPL_DATA) Fee_GlobInfoLastRdHeader_ptr)
; Function Fee_SearchLastBlkHeader
.L287:
Fee_SearchLastBlkHeader:	.type	func
	sub.a	a10,#16
.L627:
	mov.aa	a15,a4
.L628:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2725  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2726      Fee_BlkHeader_tst xCurrBlkHeader_st;                            /* Block header structure */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2727      Fee_stRetVal_ten xRetVal_en  = FEE_ORDER_PENDING_E;             /* Function return */
	mov	d8,#0
.L629:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2728  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2729      /* Loop if polling mode is active and function state is pending */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2730      do
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2731      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2732          /* Switch over the state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2733          switch (Fee_RdWrOrder_st.Fee_LLRdState_en)
	movh.a	a12,#@his(Fee_RdWrOrder_st)
	lea	a12,[a12]@los(Fee_RdWrOrder_st)
.L1003:
	lea	a13,[a12]92

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2734          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2735              /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2736              case FEE_LL_INIT_READ_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2737              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2738                  /* Init the user parameter */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2739                  Fee_GlobInfoLastRdHeader_ptr->FeeIndex_u16      = FEE_MAXUINT16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2740                  Fee_GlobInfoLastRdHeader_ptr->BlkCrc32_u32      = 0;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2741                  Fee_GlobInfoLastRdHeader_ptr->HdrCrc16_u16      = 0;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2742                  Fee_GlobInfoLastRdHeader_ptr->BlkStatus_u8      = 0;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2743                  Fee_GlobInfoLastRdHeader_ptr->BlkLength_u16     = 0;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2744  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2745                  /* Retries for read */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2746                  Fee_RdWrRetries_u8 = FEE_MAX_RD_WR_COMP_RETRIES;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2747  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2748                  /* Pick the last address information from the variable which was updated during Cache init. this is required to handle unknown blocks.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2749                   * There is no details of unknown blocks in cache. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2750                  Fee_GlobInfoLastRdHeader_ptr->AdrBlkHeader_u32 = Fee_RdWrOrder_st.LastValidHdrAddress_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2751  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2752                  /* Check if a block header was found */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2753                  if(Fee_GlobInfoLastRdHeader_ptr->AdrBlkHeader_u32 != FEE_NULL)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2754                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2755                      /* Copy the header address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2756                      Fee_RdWrOrder_st.xRdAddress = Fee_GlobInfoLastRdHeader_ptr->AdrBlkHeader_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2757  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2758                      /* Read out the length of the corresponding block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2759                      Fee_RdWrOrder_st.Fee_LLRdState_en = FEE_LL_READ_PAGE_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2760                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2761                  else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2762                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2763                      /* No block header was found, return finished immediately */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2764                      xRetVal_en = FEE_ORDER_FINISHED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2765                      break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2766                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2767              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2768              /* No break to save time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2769              /* Read out the header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2770              /* MR12 RULE 16.3 VIOLATION: Time critical position */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2771              case FEE_LL_READ_PAGE_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2772              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2773                  /* Read out the header only */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2774                  if(Fls_Read(Fee_RdWrOrder_st.xRdAddress, (uint8*)&Fee_PageBytePtr_cpu8[0], FEE_BLK_HEADER_SIZE) != E_NOT_OK)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2775                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2776                      /* Set the next states:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2777                       * The block checksum has to be checked since the cache might have been build up during without a checksum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2778                       * verification (e.g. during the init) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2779                      Fee_RdWrOrder_st.Fee_LLRdState_en = FEE_LL_WAIT_READ_PAGE_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2780                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2781                  else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2782                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2783                      /* Fls did not accept the order due to wrong parameters or an internal busy state.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2784                       * Reset the state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2785                      xRetVal_en = FEE_ABORTED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2786                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2787              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2788              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2789  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2790              /* Wait for the read order to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2791              case FEE_LL_WAIT_READ_PAGE_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2792              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2793                  /* The next state will be set by the Fee_JobEndNotification () or
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2794                   * Fee_JobErrorNotification() function automatically */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2795  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2796                  /* Call the Fls main function manually */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2797                  Fls_MainFunction();
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2798  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2799                  #if (STD_ON == FEE_POLLING_MODE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2800                  /* Use the FLS polling mechanism in order to reach the next state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2801                  Fee_CheckFlsJobResult();
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2802                  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2803              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2804              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2805  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2806              /* Error reaction for read error */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2807              case FEE_LL_READ_ERROR_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2808              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2809                  /* Reset the complete read buffer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2810                  Fee_SrvMemSet8((uint8*)&Fee_PageBytePtr_cpu8[0], (uint8)FEE_ERASE_PATTERN, FEE_LL_PAGEBUFFSIZE);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2811  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2812                  /* Verify retry possibility */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2813                  if(Fee_RdWrRetries_u8 > 0)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2814                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2815                      /* Decrement retry possibilities */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2816                      Fee_RdWrRetries_u8--;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2817  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2818                      /* Try again to call the Fls and perform the read procedure */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2819                      Fee_RdWrOrder_st.Fee_LLRdState_en = FEE_LL_READ_PAGE_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2820                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2821                  else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2822                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2823                      /* Return error */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2824                      xRetVal_en = FEE_ERROR_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2825                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2826              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2827              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2828  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2829              /* Evaluate the block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2830              case FEE_LL_READ_FINISHED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2831              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2832                  /* Extract the block length and the block index out of the flash
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2833                   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2834                   * Hint: This function is used in the init phase of the Fee and therefore
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2835                   *       the block checksum is not relevant. Only valid headers are
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2836                   *       added to the cache and therefore it can be regarded as valid */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2837                  Fee_LLCopyPageBuff2HeaderMid(&xCurrBlkHeader_st, &Fee_PageBytePtr_cpu8[0]);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2838  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2839                  /* Copy the relevant info to the global structure */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2840                  Fee_GlobInfoLastRdHeader_ptr->FeeIndex_u16  = xCurrBlkHeader_st.FeeIndex_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2841                  Fee_GlobInfoLastRdHeader_ptr->BlkLength_u16 = xCurrBlkHeader_st.BlkLength_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2842  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2843                  /* Set return value */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2844                  xRetVal_en = FEE_ORDER_FINISHED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2845              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2846              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2847  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2848              /* Default state should never be reached */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2849              default:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2850              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2851                  /* Set error state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2852                  xRetVal_en = FEE_ERROR_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2853  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2854                  /* Reset the state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2855                  Fee_RdWrOrder_st.Fee_LLRdState_en = FEE_LL_INIT_READ_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2856              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2857              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2858          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2859      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2860      while((Fee_stMain == FEE_POLLING_MODE_E) && (xRetVal_en == FEE_ORDER_PENDING_E));
.L225:
	ld.w	d0,[a13]
.L1004:
	mov	d15,#0
	jeq	d15,d0,.L226
.L1005:
	mov	d1,#3
	jeq	d1,d0,.L227
.L1006:
	mov	d1,#4
	jeq	d1,d0,.L228
.L1007:
	mov	d1,#5
	jeq	d1,d0,.L229
.L1008:
	mov	d15,#6
	jeq	d15,d0,.L230
	j	.L231
.L226:
	mov.u	d15,#65535
.L1009:
	st.h	[a15]12,d15
.L1010:
	mov	d15,#0
.L1011:
	st.w	[a15]4,d15
.L1012:
	mov	d15,#0
.L1013:
	st.h	[a15]8,d15
.L1014:
	mov	d15,#0
.L1015:
	st.b	[a15]14,d15
.L1016:
	mov	d15,#0
.L1017:
	st.h	[a15]10,d15
.L1018:
	movh.a	a2,#@his(Fee_RdWrRetries_u8)
	lea	a2,[a2]@los(Fee_RdWrRetries_u8)
.L1019:
	mov	d15,#3
.L1020:
	st.b	[a2],d15
.L1021:
	ld.w	d15,[a12]36
.L1022:
	st.w	[a15],d15
.L1023:
	ld.w	d15,[a15]
.L1024:
	jeq	d15,#0,.L232
.L1025:
	st.w	[a12],d15
.L1026:
	mov	d15,#3
.L1027:
	st.w	[a13],d15
.L1028:
	j	.L233
.L232:
	mov	d8,#1
.L1029:
	j	.L234
.L233:
.L227:
	ld.w	d4,[a12]
	movh.a	a2,#@his(Fee_PageBytePtr_cpu8)
	lea	a2,[a2]@los(Fee_PageBytePtr_cpu8)
	ld.a	a4,[a2]
	mov	d5,#14
	call	Fls_17_Pmu_Read
.L1030:
	jeq	d2,#1,.L235
.L1031:
	mov	d15,#4
.L1032:
	st.w	[a13],d15
.L1033:
	j	.L236
.L235:
	mov	d8,#6
.L236:
	j	.L237
.L228:
	call	Fls_17_Pmu_MainFunction
.L1034:
	call	Fee_CheckFlsJobResult
.L1035:
	j	.L238
.L229:
	movh.a	a2,#@his(Fee_PageBytePtr_cpu8)
	lea	a2,[a2]@los(Fee_PageBytePtr_cpu8)
	ld.a	a4,[a2]
.L1036:
	mov	d4,#0
.L1037:
	mov	d5,#1024
	call	Fee_SrvMemSet8
.L1038:
	movh.a	a2,#@his(Fee_RdWrRetries_u8)
	lea	a2,[a2]@los(Fee_RdWrRetries_u8)
	ld.bu	d15,[a2]
.L1039:
	jeq	d15,#0,.L239
.L1040:
	add	d15,#-1
	st.b	[a2],d15
.L1041:
	mov	d15,#3
.L1042:
	st.w	[a13],d15
.L1043:
	j	.L240
.L239:
	mov	d8,#3
.L240:
	j	.L241
.L230:
	lea	a4,[a10]0
.L1044:
	movh.a	a2,#@his(Fee_PageBytePtr_cpu8)
	lea	a2,[a2]@los(Fee_PageBytePtr_cpu8)
	ld.a	a5,[a2]
.L1045:
	call	Fee_LLCopyPageBuff2HeaderMid
.L1046:
	ld.hu	d15,[a10]4
.L1047:
	st.h	[a15]12,d15
.L1048:
	ld.hu	d15,[a10]6
.L1049:
	st.h	[a15]10,d15
.L1050:
	mov	d8,#1
.L1051:
	j	.L242
.L231:
	mov	d8,#3
.L1052:
	mov	d15,#0
.L1053:
	st.w	[a13],d15
.L1054:
	j	.L243
.L243:
.L242:
.L241:
.L238:
.L237:
.L234:
	movh.a	a2,#@his(Fee_stMain)
	lea	a2,[a2]@los(Fee_stMain)
	ld.w	d15,[a2]
.L1055:
	jne	d15,#0,.L244
.L1056:
	jeq	d8,#0,.L225
.L244:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2861  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2862      /* Check if the search was aborted or the sector is full */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2863      if (xRetVal_en != FEE_ORDER_PENDING_E)
	jeq	d8,#0,.L245
.L1057:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2864      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2865          /* Init the state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2866          Fee_RdWrOrder_st.Fee_LLRdState_en = FEE_LL_INIT_READ_E;
	mov	d15,#0
.L1058:
	st.w	[a13],d15
.L245:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2867      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2868  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2869      /* Return function state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2870      return xRetVal_en;
	mov	d2,d8
.L630:
	j	.L246

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2871  }
.L246:
	ret
.L423:
	
__Fee_SearchLastBlkHeader_function_end:
	.size	Fee_SearchLastBlkHeader,__Fee_SearchLastBlkHeader_function_end-Fee_SearchLastBlkHeader
.L320:
	; End of function
	
	.sdecl	'.text.rba_FeeFs1_LlSearchBlk.Fee_SearchHighestCacheEntry',code,cluster('Fee_SearchHighestCacheEntry')
	.sect	'.text.rba_FeeFs1_LlSearchBlk.Fee_SearchHighestCacheEntry'
	.align	2
	
	.global	Fee_SearchHighestCacheEntry

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2872  /* if !( defined(RBA_FLSRH850P1xC_FLASH) || defined(RBA_FLSV850R1x_FLASH) || defined(RBA_FLSRH850xx_FLASH) )*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2873  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2874  /* FEE_FAST_CACHE_INIT_ACTIVE != FALSE */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2875  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2876  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2877  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2878  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2879   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2880   * Fee_SearchHighestCacheEntry(): Return the highest cache address
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2881   *                                for the corresponding sector within
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2882   *                                a certain boundary.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2883   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2884   * This function returns the highest cache address for a certain
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2885   * sector within given boundaries.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2886   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2887   * \param    UpperBoundary_u32:        Upper boundary
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2888   * \param     SectIdx_u8:            Corresponding sector index
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2889   * \return
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2890   * \retval   xAddress_u32:            Corresponding address
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2891   * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2892   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2893   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2894   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2895  FUNC(uint32, FEE_CODE) Fee_SearchHighestCacheEntry(VAR(uint32,FEE_VAR) UpperBoundary_u32, VAR(uint8, FEE_VAR) SectIdx_u8)
; Function Fee_SearchHighestCacheEntry
.L289:
Fee_SearchHighestCacheEntry:	.type	func

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2896  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2897      uint32 xAddress_u32         = FEE_NULL;                /* Function return */
	mov	d2,#0
.L632:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2898      uint32 i_u32 = 0;                                    /* Loop counter */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2899      uint32 xSectStartAdr_u32     = Fee_FlashProp_st[SectIdx_u8].Fee_LogStartAddress_u32;
	sha	d5,#4
.L631:
	movh.a	a15,#@his(Fee_FlashProp_st)
	lea	a15,[a15]@los(Fee_FlashProp_st)
.L1063:
	addsc.a	a15,a15,d5,#0
.L1064:
	ld.w	d0,[a15]8
.L633:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2900      uint32 xSectEndAdr_u32         = Fee_FlashProp_st[SectIdx_u8].Fee_LogEndAddress_u32;
	ld.w	d1,[a15]12
.L634:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2901  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2902      /* Get the highest value out of the cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2903      for(i_u32=0; i_u32<FEE_NUM_BLOCKS;i_u32++)
	mov	d3,#0
.L635:
	j	.L247
.L248:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2904      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2905          /* Check if the current cache entry to be regarded for the search*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2906          if((Fee_Cache_au32[i_u32] >= xSectStartAdr_u32) &&
	movh.a	a15,#@his(Fee_Cache_au32)
	lea	a15,[a15]@los(Fee_Cache_au32)
.L1065:
	addsc.a	a15,a15,d3,#2
	ld.w	d15,[a15]
.L1066:
	jlt.u	d15,d0,.L249
.L1067:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2907             (Fee_Cache_au32[i_u32]  < xSectEndAdr_u32) &&
	jge.u	d15,d1,.L250
.L1068:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2908             (Fee_Cache_au32[i_u32] != FEE_CACHE_INIT_VALUE) &&
	mov.u	d5,#45054
	addih	d5,d5,#51966
.L1069:
	jeq	d15,d5,.L251
.L1070:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2909             (Fee_Cache_au32[i_u32] != FEE_CACHE_TMP_INVALID_VALUE) &&
	mov.u	d5,#51966
	addih	d5,d5,#45054
.L1071:
	jeq	d15,d5,.L252
.L1072:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2910             (Fee_Cache_au32[i_u32] > xAddress_u32) &&
	jge.u	d2,d15,.L253
.L1073:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2911             (Fee_Cache_au32[i_u32] < UpperBoundary_u32))
	ge.u	d5,d15,d4
.L1074:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2912          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2913              /* Save the current address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2914              xAddress_u32 = Fee_Cache_au32[i_u32];
	sel	d2,d5,d2,d15
.L254:
.L253:
.L252:
.L251:
.L250:
.L249:
	add	d3,#1
.L247:
	jlt.u	d3,#12,.L248
.L1075:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2915          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2916      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2917  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2918      /* Check for the init value */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2919      if(xAddress_u32 == FEE_NULL)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2920      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2921          /* Reset the return to the upper boundary */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2922          xAddress_u32 = UpperBoundary_u32;
	sel	d2,d2,d2,d4
.L255:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2923      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2924  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2925      return xAddress_u32;
	j	.L256

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2926  }
.L256:
	ret
.L427:
	
__Fee_SearchHighestCacheEntry_function_end:
	.size	Fee_SearchHighestCacheEntry,__Fee_SearchHighestCacheEntry_function_end-Fee_SearchHighestCacheEntry
.L325:
	; End of function
	
	.sdecl	'.text.rba_FeeFs1_LlSearchBlk.Fee_InvalidateCacheByAddress',code,cluster('Fee_InvalidateCacheByAddress')
	.sect	'.text.rba_FeeFs1_LlSearchBlk.Fee_InvalidateCacheByAddress'
	.align	2
	
	.global	Fee_InvalidateCacheByAddress

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2927  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2928  FUNC(void, FEE_CODE) Fee_InvalidateCacheByAddress(VAR(uint32,FEE_VAR) xAddress_u32)
; Function Fee_InvalidateCacheByAddress
.L291:
Fee_InvalidateCacheByAddress:	.type	func

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2929  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2930      uint32 i_u32 = 0;                                    /* Loop counter */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2931  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2932      /* Get the highest value out of the cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2933      for(i_u32=0; i_u32<FEE_NUM_BLOCKS;i_u32++)
	mov	d0,#0
.L636:
	j	.L257
.L258:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2934      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2935          /* Check if the current cache entry to be regarded for the search*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2936          if(Fee_Cache_au32[i_u32] == xAddress_u32)
	movh.a	a15,#@his(Fee_Cache_au32)
	lea	a15,[a15]@los(Fee_Cache_au32)
.L1080:
	addsc.a	a15,a15,d0,#2
	ld.w	d15,[a15]
.L1081:
	jne	d15,d4,.L259
.L1082:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2937          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2938              Fee_Cache_au32[i_u32] = FEE_CACHE_TMP_INVALID_VALUE;
	mov.u	d15,#51966
	addih	d15,d15,#45054
.L1083:
	st.w	[a15],d15
.L259:
	add	d0,#1
.L257:
	jlt.u	d0,#12,.L258
.L1084:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2939          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2940      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2941  }
	ret
.L434:
	
__Fee_InvalidateCacheByAddress_function_end:
	.size	Fee_InvalidateCacheByAddress,__Fee_InvalidateCacheByAddress_function_end-Fee_InvalidateCacheByAddress
.L330:
	; End of function
	
	.sdecl	'.data.rba_FeeFs1_LlSearchBlk._999001_xPhySecIdx_u8',data,cluster('_999001_xPhySecIdx_u8')
	.sect	'.data.rba_FeeFs1_LlSearchBlk._999001_xPhySecIdx_u8'
_999001_xPhySecIdx_u8:	.type	object
	.size	_999001_xPhySecIdx_u8,1
	.byte	255
	.sdecl	'.data.rba_FeeFs1_LlSearchBlk._999002_xSearchType_u8',data,cluster('_999002_xSearchType_u8')
	.sect	'.data.rba_FeeFs1_LlSearchBlk._999002_xSearchType_u8'
_999002_xSearchType_u8:	.type	object
	.size	_999002_xSearchType_u8,1
	.space	1
	.sdecl	'.data.rba_FeeFs1_LlSearchBlk._999003_xNumBytes2Read_u16',data,cluster('_999003_xNumBytes2Read_u16')
	.sect	'.data.rba_FeeFs1_LlSearchBlk._999003_xNumBytes2Read_u16'
	.align	2
_999003_xNumBytes2Read_u16:	.type	object
	.size	_999003_xNumBytes2Read_u16,2
	.space	2
	.sdecl	'.data.rba_FeeFs1_LlSearchBlk._999004_xPageBufReloaded_b',data,cluster('_999004_xPageBufReloaded_b')
	.sect	'.data.rba_FeeFs1_LlSearchBlk._999004_xPageBufReloaded_b'
_999004_xPageBufReloaded_b:	.type	object
	.size	_999004_xPageBufReloaded_b,1
	.byte	1
	.sdecl	'.data.rba_FeeFs1_LlSearchBlk._999005_xCntRetry_u8',data,cluster('_999005_xCntRetry_u8')
	.sect	'.data.rba_FeeFs1_LlSearchBlk._999005_xCntRetry_u8'
_999005_xCntRetry_u8:	.type	object
	.size	_999005_xCntRetry_u8,1
	.byte	3
	.sdecl	'.data.rba_FeeFs1_LlSearchBlk._999006_xLoopReduction_u8',data,cluster('_999006_xLoopReduction_u8')
	.sect	'.data.rba_FeeFs1_LlSearchBlk._999006_xLoopReduction_u8'
_999006_xLoopReduction_u8:	.type	object
	.size	_999006_xLoopReduction_u8,1
	.space	1
	.sdecl	'.bss.rba_FeeFs1_LlSearchBlk._999007_xRdAdrContinue_u32',data,cluster('_999007_xRdAdrContinue_u32')
	.sect	'.bss.rba_FeeFs1_LlSearchBlk._999007_xRdAdrContinue_u32'
	.align	4
_999007_xRdAdrContinue_u32:	.type	object
	.size	_999007_xRdAdrContinue_u32,4
	.space	4
	.sdecl	'.bss.rba_FeeFs1_LlSearchBlk._999008_xRdAdrEndContinue_u32',data,cluster('_999008_xRdAdrEndContinue_u32')
	.sect	'.bss.rba_FeeFs1_LlSearchBlk._999008_xRdAdrEndContinue_u32'
	.align	4
_999008_xRdAdrEndContinue_u32:	.type	object
	.size	_999008_xRdAdrEndContinue_u32,4
	.space	4
	.sdecl	'.bss.rba_FeeFs1_LlSearchBlk._999009_xLogSecIdxForCache_u8',data,cluster('_999009_xLogSecIdxForCache_u8')
	.sect	'.bss.rba_FeeFs1_LlSearchBlk._999009_xLogSecIdxForCache_u8'
_999009_xLogSecIdxForCache_u8:	.type	object
	.size	_999009_xLogSecIdxForCache_u8,1
	.space	1
	.calls	'Fee_LLSearchSpecifiedBlkHeader','Fee_GetMostCurrentSectorIdx'
	.calls	'Fee_LLSearchSpecifiedBlkHeader','Fee_GetPhysSectorByAddress'
	.calls	'Fee_LLSearchSpecifiedBlkHeader','Fee_LLGetAddressFromCache'
	.calls	'Fee_LLSearchSpecifiedBlkHeader','Fee_LLGetSecStartAddress'
	.calls	'Fee_LLSearchSpecifiedBlkHeader','Fee_LLGetCacheUpdateStForSect'
	.calls	'Fee_LLSearchSpecifiedBlkHeader','Fee_LLSearchNextBlkHeader'
	.calls	'Fee_LLSearchSpecifiedBlkHeader','Fee_IncAddressInsideSector'
	.calls	'Fee_LLSearchSpecifiedBlkHeader','Fee_LLUpdateAddressInCache'
	.calls	'Fee_LLSearchSpecifiedBlkHeader','Fee_LLUpdateCacheStForSect'
	.calls	'Fee_LLSearchNextBlkHeader','Fee_GetPhysSectorByAddress'
	.calls	'Fee_LLSearchNextBlkHeader','Fls_17_Pmu_Read'
	.calls	'Fee_LLSearchNextBlkHeader','Fls_17_Pmu_MainFunction'
	.calls	'Fee_LLSearchNextBlkHeader','Fee_CheckFlsJobResult'
	.calls	'Fee_LLSearchNextBlkHeader','Fee_SrvMemSet8'
	.calls	'Fee_LLSearchNextBlkHeader','Fee_IncAddressInsideSector'
	.calls	'Fee_LLSearchNextBlkHeader','Fee_LLCopyPageBuff2HeaderMid'
	.calls	'Fee_LLSearchNextBlkHeader','Crc_CalculateCRC16'
	.calls	'Fee_LLSearchNextBlkHeader','Fee_LLCopyPageBuff2HeaderEnd'
	.calls	'Fee_LLSearchNextBlkHeader','Fee_LLUpdateAddressInCache'
	.calls	'Fee_LLGetAddressFromCache','Fee_SrvBinarySearchInBlockProp'
	.calls	'Fee_LLGetAddressFromCache','Fee_LLCheckAddressInCache'
	.calls	'Fee_LLCheckAddressInCache','Fee_LLGetSecStartAddress'
	.calls	'Fee_LLCheckAddressInCache','Fee_LLGetSecEndAddress'
	.calls	'Fee_LLGetCacheUpdateStForAllSect','Fee_LLGetCacheUpdateStForSect'
	.calls	'Fee_LLUpdateAddressInCache','Fee_SrvBinarySearchInBlockProp'
	.calls	'Fee_BuildUpCache','Fee_GetPhysSectorByAddress'
	.calls	'Fee_BuildUpCache','Fee_LLUpdateAddressInCache'
	.calls	'Fee_BuildUpCache','Fee_LLUpdateCacheStForSect'
	.calls	'Fee_BuildUpCache','Fee_LLGetSecEndAddress'
	.calls	'Fee_BuildUpCache','Fee_IncAddressInsideSector'
	.calls	'Fee_BuildUpCache','Fee_Fls_SyncRead'
	.calls	'Fee_BuildUpCache','Crc_CalculateCRC16'
	.calls	'Fee_BuildUpCacheForAllSect','Fee_BuildUpCache'
	.calls	'Fee_SearchLastBlkHeader','Fls_17_Pmu_Read'
	.calls	'Fee_SearchLastBlkHeader','Fls_17_Pmu_MainFunction'
	.calls	'Fee_SearchLastBlkHeader','Fee_CheckFlsJobResult'
	.calls	'Fee_SearchLastBlkHeader','Fee_SrvMemSet8'
	.calls	'Fee_SearchLastBlkHeader','Fee_LLCopyPageBuff2HeaderMid'
	.calls	'Fee_LLSearchSpecifiedBlkHeader','',32
	.calls	'Fee_LLSearchNextBlkHeader','',24
	.calls	'Fee_LLGetSecStartAddress','',0
	.calls	'Fee_LLGetSecEndAddress','',0
	.calls	'Fee_LLGetAddressFromCache','',8
	.calls	'Fee_LLCheckAddressInCache','',0
	.calls	'Fee_LLUpdateCacheStForSect','',0
	.calls	'Fee_LLEraseCacheStForSect','',0
	.calls	'Fee_LLGetCacheUpdateStForAllSect','',0
	.calls	'Fee_LLUpdateAddressInCache','',8
	.calls	'Fee_LLGetCacheUpdateStForSect','',0
	.calls	'Fee_BuildUpCache','',56
	.calls	'Fee_BuildUpCacheForAllSect','',0
	.calls	'Fee_SearchLastBlkHeader','',16
	.calls	'Fee_SearchHighestCacheEntry','',0
	.extern	Fls_17_Pmu_MainFunction
	.extern	Fls_17_Pmu_Read
	.extern	Fee_stMain
	.extern	Fee_FlashProp_st
	.extern	Fee_PageBytePtr_cpu8
	.extern	Fee_RdWrOrder_st
	.extern	Fee_LLSectorOrder_st
	.extern	Fee_OrderFifo_st
	.extern	Fee_Prv_stInit_u8
	.extern	Fee_Prv_stReorg_u8
	.extern	Fee_NumFlashBanksUsed_u8
	.extern	Fee_idxLLSectorOrder_au8
	.extern	Fee_idxActQueue_u8
	.extern	Fee_CacheUpdCompForSect_au8
	.extern	Fee_RdWrRetries_u8
	.extern	Fee_Cache_au32
	.extern	Fee_BlockProperties_st
	.extern	Fee_GetMostCurrentSectorIdx
	.extern	Fee_GetPhysSectorByAddress
	.extern	Fee_LLCopyPageBuff2HeaderMid
	.extern	Fee_LLCopyPageBuff2HeaderEnd
	.extern	Fee_IncAddressInsideSector
	.extern	Fee_SrvBinarySearchInBlockProp
	.extern	Fee_SrvMemSet8
	.extern	Fee_CheckFlsJobResult
	.extern	Fee_Fls_SyncRead
	.extern	Crc_CalculateCRC16
	.calls	'Fee_InvalidateCacheByAddress','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L293:
	.word	17942
	.half	3
	.word	.L294
	.byte	4
.L292:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L295
.L380:
	.byte	2
	.byte	'unsigned char',0,1,8,3,3
	.word	155
	.byte	4,2,0
.L391:
	.byte	2
	.byte	'unsigned short int',0,2,7
.L384:
	.byte	2
	.byte	'unsigned int',0,4,7
.L387:
	.byte	5,1,151,6,9,16,6
	.byte	'Preamble_au8',0
	.word	172
	.byte	3,2,35,0,6
	.byte	'BlkStatus_u8',0
	.word	155
	.byte	1,2,35,3,6
	.byte	'FeeIndex_u16',0
	.word	181
	.byte	2,2,35,4,6
	.byte	'BlkLength_u16',0
	.word	181
	.byte	2,2,35,6,6
	.byte	'HdrCrc16_u16',0
	.word	181
	.byte	2,2,35,8,6
	.byte	'BlkCrc32_u32',0
	.word	203
	.byte	4,2,35,12,0,7
	.word	219
	.byte	8
	.word	155
	.byte	7
	.word	364
.L395:
	.byte	9
	.byte	'Fee_LLCopyPageBuff2HeaderStart',0,3,1,131,10,35,1,1
.L398:
	.byte	10
	.byte	'BlkHdr_pst',0,1,131,10,117
	.word	359
.L400:
	.byte	10
	.byte	'PageBuf_pcu8',0,1,132,10,107
	.word	369
.L402:
	.byte	11,0
.L480:
	.byte	9
	.byte	'Fee_LLCopyPageBuff2HeaderIdxAndCrc',0,3,1,167,10,35,1,1
.L483:
	.byte	10
	.byte	'BlkHdr_pst',0,1,167,10,121
	.word	359
.L485:
	.byte	10
	.byte	'PageBuf_pcu8',0,1,168,10,111
	.word	369
.L487:
	.byte	11,0,7
	.word	181
.L488:
	.byte	12
	.byte	'Fee_SrvBinarySearchInBlockPropFast',0,3,1,197,10,38
	.word	155
	.byte	1,1
.L490:
	.byte	10
	.byte	'FeeIdx_u16',0,1,197,10,96
	.word	181
.L492:
	.byte	10
	.byte	'CacheIdx_pu16',0,1,198,10,113
	.word	544
.L494:
	.byte	11,0,12
	.byte	'Fee_SrvRoundUp',0,3,1,140,11,21
	.word	203
	.byte	1,1,10
	.byte	'value_u32',0,1,140,11,43
	.word	203
	.byte	10
	.byte	'stepsize_u32',0,1,140,11,62
	.word	203
	.byte	11,0,13
	.byte	'Fls_17_Pmu_MainFunction',0,2,134,8,13,1,1,1,1,7
	.word	155
	.byte	14
	.byte	'Fls_17_Pmu_Read',0,2,192,8,23
	.word	155
	.byte	1,1,1,1,10
	.byte	'SourceAddress',0,2,192,8,56
	.word	203
	.byte	10
	.byte	'TargetAddressPtr',0,2,193,8,40
	.word	744
	.byte	10
	.byte	'Length',0,2,194,8,48
	.word	203
	.byte	0,15
	.byte	'Fee_GetMostCurrentSectorIdx',0,1,169,8,31
	.word	155
	.byte	1,1,1,1,14
	.byte	'Fee_GetPhysSectorByAddress',0,1,171,8,31
	.word	155
	.byte	1,1,1,1,10
	.byte	'Address_u32',0,1,171,8,81
	.word	203
	.byte	0
.L376:
	.byte	16,1,137,2,9,4,17
	.byte	'FEE_ORDER_PENDING_E',0,0,17
	.byte	'FEE_ORDER_FINISHED_E',0,1,17
	.byte	'FEE_BLOCK_INVALIDATED_E',0,2,17
	.byte	'FEE_ERROR_E',0,3,17
	.byte	'FEE_SECTORCHANGE_E',0,4,17
	.byte	'FEE_SECTORFULL_E',0,5,17
	.byte	'FEE_ABORTED_E',0,6,17
	.byte	'FEE_ERASE_SECTOR_E',0,7,17
	.byte	'FEE_SEARCH_ABORTED_E',0,8,17
	.byte	'FEE_NUM_RET_VAL_E',0,9,0
.L413:
	.byte	5,1,227,5,9,16,6
	.byte	'AdrBlkHeader_u32',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'BlkCrc32_u32',0
	.word	203
	.byte	4,2,35,4,6
	.byte	'HdrCrc16_u16',0
	.word	181
	.byte	2,2,35,8,6
	.byte	'BlkLength_u16',0
	.word	181
	.byte	2,2,35,10,6
	.byte	'FeeIndex_u16',0
	.word	181
	.byte	2,2,35,12,6
	.byte	'BlkStatus_u8',0
	.word	155
	.byte	1,2,35,14,0
.L378:
	.byte	7
	.word	1159
.L407:
	.byte	7
	.word	203
	.byte	18
	.word	374
	.byte	19
	.word	413
	.byte	19
	.word	433
	.byte	11,0,18
	.word	457
	.byte	19
	.word	500
	.byte	19
	.word	520
	.byte	11,0,20
	.byte	'Fee_LLCopyPageBuff2HeaderMid',0,1,249,8,41,1,1,1,1,10
	.byte	'BlkHdr_pst',0,1,249,8,121
	.word	359
	.byte	10
	.byte	'PageBuf_pcu8',0,1,250,8,111
	.word	369
	.byte	0,20
	.byte	'Fee_LLCopyPageBuff2HeaderEnd',0,1,251,8,41,1,1,1,1,10
	.byte	'BlkHdr_pst',0,1,251,8,121
	.word	359
	.byte	10
	.byte	'PageBuf_pcu8',0,1,252,8,111
	.word	369
	.byte	0,20
	.byte	'Fee_IncAddressInsideSector',0,1,129,9,41,1,1,1,1,10
	.byte	'Address_u32',0,1,129,9,108
	.word	1308
	.byte	10
	.byte	'numBytes_u16',0,1,130,9,89
	.word	181
	.byte	10
	.byte	'EnsurePageAlign_b',0,1,131,9,90
	.word	155
	.byte	0,14
	.byte	'Fee_SrvBinarySearchInBlockProp',0,1,169,9,32
	.word	155
	.byte	1,1,1,1,10
	.byte	'FeeIdx_u16',0,1,169,9,86
	.word	181
	.byte	10
	.byte	'CacheIdx_pu16',0,1,170,9,103
	.word	544
	.byte	0,18
	.word	549
	.byte	19
	.word	596
	.byte	19
	.word	616
	.byte	11,0
.L474:
	.byte	3,16
	.word	203
	.byte	4,3,0,20
	.byte	'Fee_SrvMemSet8',0,1,191,9,30,1,1,1,1,10
	.byte	'xDest_pu8',0,1,191,9,84
	.word	744
	.byte	10
	.byte	'xPattern_u32',0,1,192,9,66
	.word	203
	.byte	10
	.byte	'numBytes_u32',0,1,193,9,66
	.word	203
	.byte	0,13
	.byte	'Fee_CheckFlsJobResult',0,1,219,9,31,1,1,1,1,18
	.word	641
	.byte	19
	.word	668
	.byte	19
	.word	687
	.byte	11,0,14
	.byte	'Fee_Fls_SyncRead',0,3,17,23
	.word	155
	.byte	1,1,1,1,10
	.byte	'SourceAddress',0,3,17,57
	.word	203
	.byte	10
	.byte	'TargetAddressPtr',0,3,18,40
	.word	744
	.byte	10
	.byte	'Length',0,3,19,48
	.word	203
	.byte	0,14
	.byte	'Crc_CalculateCRC16',0,4,80,15
	.word	181
	.byte	1,1,1,1,10
	.byte	'Crc_DataPtr',0,4,80,47
	.word	369
	.byte	10
	.byte	'Crc_Length',0,4,80,67
	.word	203
	.byte	10
	.byte	'Crc_StartValue16',0,4,80,86
	.word	181
	.byte	10
	.byte	'Crc_IsFirstCall',0,4,81,42
	.word	155
	.byte	0,21,1,7
	.word	2078
	.byte	22
	.byte	'__codeptr',0,5,1,1
	.word	2080
	.byte	2
	.byte	'char',0,1,6,22
	.byte	'sint8',0,6,76,25
	.word	2103
	.byte	22
	.byte	'uint8',0,6,81,25
	.word	155
	.byte	22
	.byte	'uint16',0,6,91,25
	.word	181
	.byte	22
	.byte	'uint32',0,6,106,24
	.word	203
	.byte	2
	.byte	'unsigned long long int',0,8,7,22
	.byte	'uint64',0,6,111,30
	.word	2169
	.byte	22
	.byte	'boolean',0,6,127,25
	.word	155
	.byte	22
	.byte	'StatusType',0,7,191,1,27
	.word	155
	.byte	22
	.byte	'Std_ReturnType',0,7,199,1,15
	.word	155
	.byte	5,7,206,1,9,8,6
	.byte	'vendorID',0
	.word	181
	.byte	2,2,35,0,6
	.byte	'moduleID',0
	.word	181
	.byte	2,2,35,2,6
	.byte	'sw_major_version',0
	.word	155
	.byte	1,2,35,4,6
	.byte	'sw_minor_version',0
	.word	155
	.byte	1,2,35,5,6
	.byte	'sw_patch_version',0
	.word	155
	.byte	1,2,35,6,0,22
	.byte	'Std_VersionInfoType',0,7,213,1,3
	.word	2270
	.byte	5,8,93,9,8,6
	.byte	'Class',0
	.word	155
	.byte	1,2,35,0,6
	.byte	'TIN',0
	.word	155
	.byte	1,2,35,1,6
	.byte	'ReturnAddress',0
	.word	203
	.byte	4,2,35,4,0,22
	.byte	'OsTrapInfoType',0,8,97,3
	.word	2420
	.byte	3,68
	.word	203
	.byte	4,16,0,5,8,154,1,9,68,6
	.byte	'store',0
	.word	2500
	.byte	68,2,35,0,0,3,68
	.word	2509
	.byte	4,0,0,22
	.byte	'Os_JumpBufType',0,8,156,1,3
	.word	2531
	.byte	22
	.byte	'Os_StackTraceType',0,8,174,1,18
	.word	203
	.byte	5,8,175,1,9,8,6
	.byte	'sp',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'ctx',0
	.word	203
	.byte	4,2,35,4,0,22
	.byte	'Os_StackValueType',0,8,175,1,63
	.word	2591
	.byte	22
	.byte	'Os_StackSizeType',0,8,176,1,27
	.word	2591
	.byte	23,1,1,7
	.word	2676
	.byte	22
	.byte	'Os_VoidVoidFunctionType',0,8,179,1,16
	.word	2679
	.byte	22
	.byte	'ApplicationType',0,8,193,1,23
	.word	155
	.byte	24
	.byte	'Os_ApplicationConfigurationType_s',0,8,198,1,16,2,6
	.byte	'app_id',0
	.word	155
	.byte	1,2,35,0,6
	.byte	'access',0
	.word	155
	.byte	1,2,35,1,0,22
	.byte	'Os_ApplicationConfigurationType',0,8,201,1,3
	.word	2742
	.byte	22
	.byte	'Os_CoreStateType',0,8,203,1,16
	.word	203
	.byte	22
	.byte	'AreaIdType',0,8,204,1,16
	.word	181
	.byte	22
	.byte	'Os_PeripheralAddressType',0,8,212,1,22
	.word	203
	.byte	22
	.byte	'TickType',0,8,221,1,22
	.word	203
	.byte	22
	.byte	'Os_StopwatchTickType',0,8,225,1,22
	.word	203
	.byte	22
	.byte	'Os_Lockable',0,8,234,1,18
	.word	1308
	.byte	22
	.byte	'CoreIdType',0,8,236,1,16
	.word	181
	.byte	22
	.byte	'SpinlockIdType',0,8,237,1,16
	.word	181
	.byte	16,8,239,1,9,4,17
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,17
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,22
	.byte	'TryToGetSpinlockType',0,8,239,1,74
	.word	3049
	.byte	16,8,174,2,9,4,17
	.byte	'APPLICATION_ACCESSIBLE',0,0,17
	.byte	'APPLICATION_RESTARTING',0,1,17
	.byte	'APPLICATION_TERMINATED',0,2,0,22
	.byte	'ApplicationStateType',0,8,174,2,92
	.word	3142
	.byte	25
	.byte	'void',0,7
	.word	3254
	.byte	26,1,1,27
	.word	155
	.byte	27
	.word	3260
	.byte	0,7
	.word	3265
	.byte	22
	.byte	'Os_FunctionEntryType',0,8,183,2,16
	.word	3279
	.byte	24
	.byte	'Os_MeterInfoType_s',0,8,193,2,16,48,6
	.byte	'elapsed',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'previous',0
	.word	203
	.byte	4,2,35,4,6
	.byte	'max',0
	.word	203
	.byte	4,2,35,8,6
	.byte	'cumulative',0
	.word	203
	.byte	4,2,35,12,6
	.byte	'stackbase',0
	.word	2591
	.byte	8,2,35,16,6
	.byte	'stackusage',0
	.word	2591
	.byte	8,2,35,24,6
	.byte	'stackmax',0
	.word	2591
	.byte	8,2,35,32,6
	.byte	'stackbudget',0
	.word	2591
	.byte	8,2,35,40,0,22
	.byte	'Os_MeterInfoType',0,8,202,2,3
	.word	3314
	.byte	7
	.word	3314
	.byte	22
	.byte	'Os_MeterInfoRefType',0,8,203,2,50
	.word	3512
	.byte	22
	.byte	'EventMaskType',0,8,206,2,15
	.word	155
	.byte	22
	.byte	'Os_imaskType',0,8,211,2,16
	.word	203
	.byte	24
	.byte	'Os_ISRDynType_s',0,8,213,2,16,48,6
	.byte	'meter',0
	.word	3314
	.byte	48,2,35,0,0,22
	.byte	'Os_ISRDynType',0,8,215,2,3
	.word	3591
	.byte	7
	.word	3591
	.byte	8
	.word	3652
	.byte	24
	.byte	'Os_ISRType_s',0,8,216,2,16,24,6
	.byte	'entry_function',0
	.word	2684
	.byte	4,2,35,0,6
	.byte	'dynamic',0
	.word	3657
	.byte	4,2,35,4,6
	.byte	'imask',0
	.word	203
	.byte	4,2,35,8,6
	.byte	'stackbudget',0
	.word	2591
	.byte	8,2,35,12,6
	.byte	'access',0
	.word	155
	.byte	1,2,35,20,6
	.byte	'application',0
	.word	155
	.byte	1,2,35,21,0,22
	.byte	'Os_ISRType',0,8,223,2,3
	.word	3662
	.byte	7
	.word	2676
	.byte	8
	.word	3662
	.byte	7
	.word	3821
	.byte	22
	.byte	'ISRType',0,8,224,2,46
	.word	3826
	.byte	22
	.byte	'Os_bitmask',0,8,239,2,22
	.word	203
	.byte	22
	.byte	'Os_pset0Type',0,8,240,2,20
	.word	203
	.byte	22
	.byte	'Os_pset1Type',0,8,241,2,20
	.word	203
	.byte	22
	.byte	'Os_pset2Type',0,8,242,2,20
	.word	203
	.byte	28,8,243,2,9,4,6
	.byte	'p0',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'p1',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'p2',0
	.word	203
	.byte	4,2,35,0,0,22
	.byte	'Os_psetType',0,8,247,2,3
	.word	3934
	.byte	28,8,249,2,9,4,6
	.byte	't0',0
	.word	203
	.byte	4,2,35,0,6
	.byte	't1',0
	.word	203
	.byte	4,2,35,0,6
	.byte	't2',0
	.word	203
	.byte	4,2,35,0,0,22
	.byte	'Os_tpmaskType',0,8,253,2,3
	.word	3998
	.byte	22
	.byte	'Os_ActivationCountType',0,8,254,2,23
	.word	155
	.byte	24
	.byte	'Os_TaskDynType_s',0,8,128,3,16,120,6
	.byte	'terminate_jump_buf',0
	.word	2540
	.byte	68,2,35,0,6
	.byte	'meter',0
	.word	3314
	.byte	48,2,35,68,6
	.byte	'activation_count',0
	.word	155
	.byte	1,2,35,116,0,22
	.byte	'Os_TaskDynType',0,8,132,3,3
	.word	4096
	.byte	3,68
	.word	2509
	.byte	4,0,0,7
	.word	4096
	.byte	8
	.word	4222
	.byte	24
	.byte	'Os_TaskType_s',0,8,134,3,16,40,6
	.byte	'dynamic',0
	.word	4227
	.byte	4,2,35,0,6
	.byte	'entry_function',0
	.word	2684
	.byte	4,2,35,4,6
	.byte	'pset',0
	.word	3934
	.byte	4,2,35,8,6
	.byte	'base_tpmask',0
	.word	3998
	.byte	4,2,35,12,6
	.byte	'tpmask',0
	.word	3998
	.byte	4,2,35,16,6
	.byte	'core_id',0
	.word	181
	.byte	2,2,35,20,6
	.byte	'index',0
	.word	203
	.byte	4,2,35,24,6
	.byte	'stackbudget',0
	.word	2591
	.byte	8,2,35,28,6
	.byte	'activation_count',0
	.word	155
	.byte	1,2,35,36,6
	.byte	'access',0
	.word	155
	.byte	1,2,35,37,6
	.byte	'application',0
	.word	155
	.byte	1,2,35,38,0,22
	.byte	'Os_TaskType',0,8,146,3,3
	.word	4232
	.byte	8
	.word	4232
	.byte	7
	.word	4482
	.byte	22
	.byte	'TaskType',0,8,147,3,47
	.word	4487
	.byte	29
	.byte	'Os_TaskStateType',0,8,155,3,6,4,17
	.byte	'SUSPENDED',0,0,17
	.byte	'READY',0,1,17
	.byte	'WAITING',0,2,17
	.byte	'RUNNING',0,3,0,22
	.byte	'TaskStateType',0,8,156,3,31
	.word	4510
	.byte	28,8,167,3,3,4,6
	.byte	'tpmask',0
	.word	3998
	.byte	4,2,35,0,0,24
	.byte	'Os_ResourceDynType_s',0,8,166,3,16,4,6
	.byte	'saved_priority',0
	.word	4597
	.byte	4,2,35,0,0,22
	.byte	'Os_ResourceDynType',0,8,170,3,3
	.word	4620
	.byte	7
	.word	4620
	.byte	8
	.word	4700
	.byte	24
	.byte	'Os_ResourceType_s',0,8,171,3,16,12,6
	.byte	'dynamic',0
	.word	4705
	.byte	4,2,35,0,6
	.byte	'tpmask',0
	.word	3998
	.byte	4,2,35,4,6
	.byte	'access',0
	.word	155
	.byte	1,2,35,8,0,22
	.byte	'Os_ResourceType',0,8,175,3,3
	.word	4710
	.byte	5,8,181,3,9,12,6
	.byte	'maxallowedvalue',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'ticksperbase',0
	.word	203
	.byte	4,2,35,4,6
	.byte	'mincycle',0
	.word	203
	.byte	4,2,35,8,0,22
	.byte	'AlarmBaseType',0,8,185,3,3
	.word	4809
	.byte	5,8,206,3,9,8,6
	.byte	'Running',0
	.word	155
	.byte	1,2,35,0,6
	.byte	'Pending',0
	.word	155
	.byte	1,2,35,1,6
	.byte	'Delay',0
	.word	203
	.byte	4,2,35,4,0,22
	.byte	'Os_CounterStatusType',0,8,210,3,3
	.word	4904
	.byte	30
	.word	155
	.byte	1,1,7
	.word	4990
	.byte	22
	.byte	'Os_CounterIncrAdvType',0,8,217,3,22
	.word	4997
	.byte	24
	.byte	's_swd',0,8,222,3,12,4,6
	.byte	'count',0
	.word	203
	.byte	4,2,35,0,0,28,8,221,3,3,4,6
	.byte	'sw',0
	.word	5033
	.byte	4,2,35,0,0,24
	.byte	'Os_CounterDynType_s',0,8,220,3,16,4,6
	.byte	'type_dependent',0
	.word	5061
	.byte	4,2,35,0,0,22
	.byte	'Os_CounterDynType',0,8,226,3,3
	.word	5080
	.byte	7
	.word	5080
	.byte	8
	.word	5158
	.byte	24
	.byte	'Os_CounterType_s',0,8,227,3,16,28,6
	.byte	'dynamic',0
	.word	5163
	.byte	4,2,35,0,6
	.byte	'advincr',0
	.word	5002
	.byte	4,2,35,4,6
	.byte	'base',0
	.word	4809
	.byte	12,2,35,8,6
	.byte	'core',0
	.word	3260
	.byte	4,2,35,20,6
	.byte	'access',0
	.word	155
	.byte	1,2,35,24,6
	.byte	'application',0
	.word	155
	.byte	1,2,35,25,0,22
	.byte	'Os_CounterType',0,8,234,3,3
	.word	5168
	.byte	7
	.word	4990
	.byte	8
	.word	5168
	.byte	7
	.word	5320
	.byte	22
	.byte	'CounterType',0,8,235,3,52
	.word	5325
	.byte	29
	.byte	'Os_ScheduleTableStatusType',0,8,240,3,6,4,17
	.byte	'SCHEDULETABLE_STOPPED',0,0,17
	.byte	'SCHEDULETABLE_NEXT',0,1,17
	.byte	'SCHEDULETABLE_WAITING',0,2,17
	.byte	'SCHEDULETABLE_RUNNING',0,3,17
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,22
	.byte	'ScheduleTableStatusType',0,8,241,3,41
	.word	5351
	.byte	8
	.word	.L637-.L293
	.byte	7
	.word	5551
	.byte	22
	.byte	'ScheduleTableType',0,8,128,4,58
	.word	5556
	.byte	24
	.byte	'Os_ScheduleTableDynType_s',0,8,130,4,16,16,6
	.byte	'match',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'next',0
	.word	5561
	.byte	4,2,35,4,6
	.byte	'state',0
	.word	5351
	.byte	4,2,35,8,6
	.byte	'config',0
	.word	181
	.byte	2,2,35,12,0,7
	.word	5588
	.byte	8
	.word	5681
.L637:
	.byte	24
	.byte	'Os_ScheduleTableType_s',0,8,247,3,16,16,6
	.byte	'dynamic',0
	.word	5686
	.byte	4,2,35,0,6
	.byte	'counter',0
	.word	5330
	.byte	4,2,35,4,6
	.byte	'repeat',0
	.word	155
	.byte	1,2,35,8,6
	.byte	'config',0
	.word	181
	.byte	2,2,35,10,6
	.byte	'initial',0
	.word	155
	.byte	1,2,35,12,6
	.byte	'access',0
	.word	155
	.byte	1,2,35,13,6
	.byte	'application',0
	.word	155
	.byte	1,2,35,14,0,22
	.byte	'Os_ScheduleTableType',0,8,255,3,3
	.word	5691
	.byte	8
	.word	5691
	.byte	7
	.word	5871
	.byte	8
	.word	5168
	.byte	7
	.word	5881
	.byte	31
	.word	2984
	.byte	31
	.word	3934
	.byte	31
	.word	3831
	.byte	31
	.word	4492
	.byte	31
	.word	3998
	.byte	31
	.word	155
	.byte	31
	.word	4492
	.byte	24
	.byte	'Os_ControlledCoreType_s',0,8,251,6,16,112,6
	.byte	'TrapInfo',0
	.word	2420
	.byte	8,2,35,0,6
	.byte	'lock_taskaccess',0
	.word	5891
	.byte	4,2,35,8,6
	.byte	'ReadyTasks',0
	.word	5896
	.byte	4,2,35,12,6
	.byte	'RunningISR',0
	.word	5901
	.byte	4,2,35,16,6
	.byte	'RunningTask',0
	.word	5906
	.byte	4,2,35,20,6
	.byte	'RunningTPMask',0
	.word	5911
	.byte	4,2,35,24,6
	.byte	'CurrentMeteredObject',0
	.word	3517
	.byte	4,2,35,28,6
	.byte	'IdleMeter',0
	.word	3314
	.byte	48,2,35,32,6
	.byte	'AppAccess',0
	.word	155
	.byte	1,2,35,80,6
	.byte	'AppOverride',0
	.word	5916
	.byte	1,2,35,81,6
	.byte	'GetStackValueAdjust',0
	.word	2591
	.byte	8,2,35,84,6
	.byte	'InErrorHook',0
	.word	155
	.byte	1,2,35,92,6
	.byte	'ChainTaskRef',0
	.word	5921
	.byte	4,2,35,96,6
	.byte	'GetStackUsageAdjust',0
	.word	2591
	.byte	8,2,35,100,6
	.byte	'InProtectionHook',0
	.word	155
	.byte	1,2,35,108,6
	.byte	'CoreIsActive',0
	.word	155
	.byte	1,2,35,109,6
	.byte	'InShutdownHook',0
	.word	155
	.byte	1,2,35,110,0,22
	.byte	'Os_ControlledCoreType',0,8,141,7,3
	.word	5926
	.byte	7
	.word	203
	.byte	8
	.word	3662
	.byte	7
	.word	6382
	.byte	8
	.word	4232
	.byte	7
	.word	6392
	.byte	7
	.word	3314
	.byte	24
	.byte	'Os_AnyCoreType_s',0,8,151,7,16,96,6
	.byte	'DisableAllImask',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'SuspendAllImask',0
	.word	203
	.byte	4,2,35,4,6
	.byte	'SuspendOSImask',0
	.word	203
	.byte	4,2,35,8,6
	.byte	'DisableAllCount',0
	.word	203
	.byte	4,2,35,12,6
	.byte	'SuspendAllCount',0
	.word	203
	.byte	4,2,35,16,6
	.byte	'SuspendOSCount',0
	.word	203
	.byte	4,2,35,20,6
	.byte	'RestartJumpBuf',0
	.word	2540
	.byte	68,2,35,24,6
	.byte	'Restartable',0
	.word	155
	.byte	1,2,35,92,0,22
	.byte	'Os_AnyCoreType',0,8,160,7,3
	.word	6407
	.byte	22
	.byte	'unsigned_int',0,9,116,22
	.word	203
	.byte	16,10,31,9,4,17
	.byte	'MEMIF_JOB_OK',0,0,17
	.byte	'MEMIF_JOB_FAILED',0,1,17
	.byte	'MEMIF_JOB_PENDING',0,2,17
	.byte	'MEMIF_JOB_CANCELED',0,3,17
	.byte	'MEMIF_BLOCK_INCONSISTENT',0,4,17
	.byte	'MEMIF_BLOCK_INVALID',0,5,0,22
	.byte	'MemIf_JobResultType',0,10,39,2
	.word	6669
	.byte	16,10,41,9,4,17
	.byte	'MEMIF_MODE_SLOW',0,0,17
	.byte	'MEMIF_MODE_FAST',0,1,0,22
	.byte	'MemIf_ModeType',0,10,45,2
	.word	6827
	.byte	22
	.byte	'PduIdType',0,11,22,19
	.word	181
	.byte	22
	.byte	'PduLengthType',0,11,26,19
	.word	181
	.byte	16,12,113,9,4,17
	.byte	'TP_DATACONF',0,0,17
	.byte	'TP_DATARETRY',0,1,17
	.byte	'TP_CONFPENDING',0,2,0,22
	.byte	'TpDataStateType',0,12,118,3
	.word	6932
	.byte	22
	.byte	'Can_IdType',0,13,32,16
	.word	203
	.byte	22
	.byte	'Can_HwHandleType',0,13,43,16
	.word	181
	.byte	22
	.byte	'Can_TxObjPriorityClassType',0,14,219,3,16
	.word	203
	.byte	24
	.byte	'Can_TxHwObjectConfigType',0,14,231,3,16,8,6
	.byte	'MsgObjId',0
	.word	155
	.byte	1,2,35,0,6
	.byte	'HwControllerId',0
	.word	155
	.byte	1,2,35,1,6
	.byte	'TxObjPriorityClass',0
	.word	203
	.byte	4,2,35,4,0,22
	.byte	'Can_TxHwObjectConfigType',0,14,252,3,3
	.word	7088
	.byte	24
	.byte	'Can_RxHwObjectConfigType',0,14,129,4,16,12,6
	.byte	'MaskRef',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'MsgId',0
	.word	203
	.byte	4,2,35,4,6
	.byte	'MsgObjId',0
	.word	155
	.byte	1,2,35,8,6
	.byte	'HwControllerId',0
	.word	155
	.byte	1,2,35,9,0,22
	.byte	'Can_RxHwObjectConfigType',0,14,147,4,3
	.word	7224
	.byte	3,4
	.word	155
	.byte	4,3,0,24
	.byte	'Can_ControllerMOMapConfigType',0,14,181,4,16,4,6
	.byte	'ControllerMOMap',0
	.word	7364
	.byte	4,2,35,0,0,22
	.byte	'Can_ControllerMOMapConfigType',0,14,184,4,3
	.word	7373
	.byte	24
	.byte	'Can_NPCRValueType',0,14,188,4,16,2,6
	.byte	'Can_NPCRValue',0
	.word	181
	.byte	2,2,35,0,0,22
	.byte	'Can_NPCRValueType',0,14,191,4,3
	.word	7474
	.byte	24
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,14,194,4,16,8,6
	.byte	'CanControllerBaudrate',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'CanControllerBaudrateCfg',0
	.word	181
	.byte	2,2,35,4,0,22
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,14,198,4,3
	.word	7549
	.byte	8
	.word	7549
	.byte	7
	.word	7714
	.byte	24
	.byte	'Can_BaudrateConfigPtrType',0,14,201,4,16,4,6
	.byte	'Can_kBaudrateConfigPtr',0
	.word	7719
	.byte	4,2,35,0,0,22
	.byte	'Can_BaudrateConfigPtrType',0,14,204,4,3
	.word	7724
	.byte	24
	.byte	'Can_EventHandlingType',0,14,226,4,16,4,6
	.byte	'CanEventType',0
	.word	7364
	.byte	4,2,35,0,0,22
	.byte	'Can_EventHandlingType',0,14,229,4,3
	.word	7824
	.byte	22
	.byte	'Rte_TransformerErrorCode',0,15,130,1,15
	.word	155
	.byte	22
	.byte	'Rte_TransformerClass',0,15,131,1,15
	.word	155
	.byte	5,15,168,1,9,12,6
	.byte	'in',0
	.word	3260
	.byte	4,2,35,0,6
	.byte	'out',0
	.word	3260
	.byte	4,2,35,4,6
	.byte	'used',0
	.word	181
	.byte	2,2,35,8,6
	.byte	'lost_data',0
	.word	155
	.byte	1,2,35,10,0,22
	.byte	'Rte_QDynType',0,15,173,1,3
	.word	7970
	.byte	16,15,175,1,9,4,17
	.byte	'RTE_DRA',0,0,17
	.byte	'RTE_WOWP',0,1,17
	.byte	'RTE_TASK',0,2,17
	.byte	'RTE_ARE',0,3,17
	.byte	'RTE_EV',0,4,17
	.byte	'RTE_MSI',0,5,0,22
	.byte	'Rte_NotificationType',0,15,182,1,3
	.word	8057
	.byte	3,128,8
	.word	155
	.byte	4,255,7,0,22
	.byte	'Impl_NVM_DstPtrType_1024',0,16,50,15
	.word	8155
	.byte	22
	.byte	'CanIf_u32_impl',0,16,69,16
	.word	203
	.byte	22
	.byte	'CanIf_u16_impl',0,16,71,16
	.word	181
	.byte	22
	.byte	'CanIf_u8_impl',0,16,73,15
	.word	155
	.byte	22
	.byte	'CanIf_ControllerModeType_Enum_impl',0,16,88,15
	.word	155
	.byte	22
	.byte	'CanIf_PduModeType_Enum_impl',0,16,90,15
	.word	155
	.byte	5,16,92,9,2,6
	.byte	'DeviceMode',0
	.word	155
	.byte	1,2,35,0,6
	.byte	'ChannelMode',0
	.word	155
	.byte	1,2,35,1,0,22
	.byte	'CanIf_ControllerStateType_struct_impl',0,16,95,3
	.word	8346
	.byte	22
	.byte	'CanIf_NotifStatusType_Enum_impl',0,16,100,15
	.word	155
	.byte	22
	.byte	'CanSM_boolean_Impl',0,16,120,15
	.word	155
	.byte	22
	.byte	'CanSM_u8_Impl',0,16,123,15
	.word	155
	.byte	22
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,16,128,1,15
	.word	155
	.byte	22
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,16,132,1,15
	.word	155
	.byte	22
	.byte	'CanSM_u16_Impl',0,16,136,1,16
	.word	181
	.byte	22
	.byte	'CanSM_TimerStateType_Enum_impl',0,16,138,1,15
	.word	155
	.byte	5,16,140,1,9,4,6
	.byte	'cntTick_u16',0
	.word	181
	.byte	2,2,35,0,6
	.byte	'stTimer',0
	.word	155
	.byte	1,2,35,2,0,22
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,16,143,1,3
	.word	8687
	.byte	22
	.byte	'Com_impl_u16',0,16,154,1,16
	.word	181
	.byte	22
	.byte	'Com_impl_u8',0,16,157,1,15
	.word	155
	.byte	22
	.byte	'ComM_uint32_Impl',0,16,173,1,16
	.word	203
	.byte	22
	.byte	'ComM_uint16_Impl',0,16,175,1,16
	.word	181
	.byte	22
	.byte	'ComM_uint8_Impl',0,16,177,1,15
	.word	155
	.byte	22
	.byte	'ComM_bool_Impl',0,16,179,1,15
	.word	155
	.byte	5,16,181,1,9,24,6
	.byte	'ChannelState_e',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'LightTimeoutCtr_u32',0
	.word	203
	.byte	4,2,35,4,6
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	181
	.byte	2,2,35,8,6
	.byte	'ChannelMode_u8',0
	.word	155
	.byte	1,2,35,10,6
	.byte	'BusSmMode_u8',0
	.word	155
	.byte	1,2,35,11,6
	.byte	'UserRequestCtr_u8',0
	.word	155
	.byte	1,2,35,12,6
	.byte	'PassiveRequestState_u8',0
	.word	155
	.byte	1,2,35,13,6
	.byte	'PncRequestCtr_u8',0
	.word	155
	.byte	1,2,35,14,6
	.byte	'InhibitionReqStatus_u8',0
	.word	155
	.byte	1,2,35,15,6
	.byte	'NmNetworkRequestStatus_b',0
	.word	155
	.byte	1,2,35,16,6
	.byte	'DiagnosticRequestState_b',0
	.word	155
	.byte	1,2,35,17,6
	.byte	'CommunicationAllowed_b',0
	.word	155
	.byte	1,2,35,18,6
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	155
	.byte	1,2,35,19,6
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	155
	.byte	1,2,35,20,6
	.byte	'NmNetworkModeStatus_b',0
	.word	155
	.byte	1,2,35,21,0,22
	.byte	'ComM_ChannelStruct_Impl',0,16,197,1,3
	.word	8919
	.byte	5,16,206,1,9,10,6
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	181
	.byte	2,2,35,0,6
	.byte	'LimitToNoComCtr_u16',0
	.word	181
	.byte	2,2,35,2,6
	.byte	'RequestedUserMode_t',0
	.word	155
	.byte	1,2,35,4,6
	.byte	'IndicatedUserMode_t',0
	.word	155
	.byte	1,2,35,5,6
	.byte	'numChannelsInFullCom_u8',0
	.word	155
	.byte	1,2,35,6,6
	.byte	'numChannelsInSilentCom_u8',0
	.word	155
	.byte	1,2,35,7,6
	.byte	'numChannelsInNoCom_u8',0
	.word	155
	.byte	1,2,35,8,0,22
	.byte	'ComM_UserStruct_Impl',0,16,214,1,3
	.word	9423
	.byte	22
	.byte	'Dcm_IOOperationResponseType',0,16,252,1,15
	.word	155
	.byte	22
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	16,138,2,15
	.word	155
	.byte	22
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,16,146,2,15
	.word	155
	.byte	22
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,16,150,2,15
	.word	155
	.byte	22
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,16,154,2,15
	.word	155
	.byte	22
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,16,243,3,34
	.word	8166
	.byte	3,128,8
	.word	155
	.byte	4,255,7,0,22
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,16,246,3,34
	.word	8166
	.byte	22
	.byte	'Fls_AddressType',0,2,171,3,16
	.word	203
	.byte	22
	.byte	'Fls_LengthType',0,2,173,3,16
	.word	203
	.byte	24
	.byte	'Fls_JobStartType',0,2,175,3,16,1,32
	.byte	'Reserved1',0,1
	.word	155
	.byte	1,7,2,35,0,32
	.byte	'Write',0,1
	.word	155
	.byte	1,6,2,35,0,32
	.byte	'Erase',0,1
	.word	155
	.byte	1,5,2,35,0,32
	.byte	'Read',0,1
	.word	155
	.byte	1,4,2,35,0,32
	.byte	'Compare',0,1
	.word	155
	.byte	1,3,2,35,0,32
	.byte	'Reserved2',0,1
	.word	155
	.byte	3,0,2,35,0,0,22
	.byte	'Fls_JobStartType',0,2,183,3,3
	.word	10290
	.byte	22
	.byte	'Fls_17_Pmu_Job_Type',0,2,187,3,15
	.word	155
	.byte	3,2
	.word	155
	.byte	4,1,0,24
	.byte	'Fls_17_Pmu_StateType',0,2,198,3,16,48,6
	.byte	'FlsReadAddress',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'FlsWriteAddress',0
	.word	203
	.byte	4,2,35,4,6
	.byte	'FlsEraseTimeoutCycleCount',0
	.word	203
	.byte	4,2,35,8,6
	.byte	'FlsWriteTimeoutCycleCount',0
	.word	203
	.byte	4,2,35,12,6
	.byte	'FlsReadLength',0
	.word	203
	.byte	4,2,35,16,6
	.byte	'FlsWriteLength',0
	.word	203
	.byte	4,2,35,20,6
	.byte	'FlsReadBufferPtr',0
	.word	744
	.byte	4,2,35,24,6
	.byte	'FlsWriteBufferPtr',0
	.word	369
	.byte	4,2,35,28,6
	.byte	'FlsJobResult',0
	.word	6669
	.byte	4,2,35,32,6
	.byte	'FlsMode',0
	.word	6827
	.byte	4,2,35,36,6
	.byte	'NotifCaller',0
	.word	155
	.byte	1,2,35,40,6
	.byte	'JobStarted',0
	.word	10290
	.byte	1,2,35,41,6
	.byte	'FlsJobType',0
	.word	10480
	.byte	2,2,35,42,6
	.byte	'FlsOper',0
	.word	155
	.byte	1,2,35,44,6
	.byte	'FlsTimeoutErr',0
	.word	155
	.byte	1,2,35,45,6
	.byte	'FlsTimeoutControl',0
	.word	155
	.byte	1,2,35,46,0,22
	.byte	'Fls_17_Pmu_StateType',0,2,130,4,3
	.word	10489
	.byte	22
	.byte	'Fls_NotifFunctionPtrType',0,2,137,4,16
	.word	2679
	.byte	8
	.word	203
	.byte	7
	.word	10967
	.byte	26,1,1,27
	.word	203
	.byte	27
	.word	203
	.byte	27
	.word	10972
	.byte	27
	.word	155
	.byte	0,7
	.word	10977
	.byte	22
	.byte	'Fls_WriteCmdPtrType',0,2,139,4,16
	.word	11001
	.byte	26,1,1,27
	.word	203
	.byte	0,7
	.word	11035
	.byte	22
	.byte	'Fls_EraseCmdPtrType',0,2,144,4,16
	.word	11044
	.byte	16,17,115,9,4,17
	.byte	'FEE_POLLING_MODE_E',0,0,17
	.byte	'FEE_NORMAL_MODE_E',0,1,0,22
	.byte	'Fee_stMainType',0,17,119,2
	.word	11078
	.byte	16,17,122,9,4,17
	.byte	'FEE_NO_ORDER',0,0,17
	.byte	'FEE_READ_ORDER',0,1,17
	.byte	'FEE_WRITE_ORDER',0,2,17
	.byte	'FEE_INVALIDATE_ORDER',0,3,17
	.byte	'FEE_MAINTAIN_ORDER',0,4,17
	.byte	'FEE_FORCED_READ_ORDER',0,5,0,22
	.byte	'Fee_HlMode_ten',0,17,132,1,2
	.word	11148
	.byte	33
	.byte	'Fee_stMain',0,17,203,1,39
	.word	11078
	.byte	1,1,16,1,147,1,9,4,17
	.byte	'FEE_NORMAL_PRIO_E',0,0,17
	.byte	'FEE_HIGH_PRIO_E',0,1,0,22
	.byte	'Fee_HlPriority_ten',0,1,151,1,2
	.word	11318
	.byte	5,1,165,1,9,24,6
	.byte	'DataBufferPtr_pu8',0
	.word	744
	.byte	4,2,35,0,6
	.byte	'FeeIdx_u16',0
	.word	181
	.byte	2,2,35,4,6
	.byte	'BlockPropIdx_u16',0
	.word	181
	.byte	2,2,35,6,6
	.byte	'Offset_u16',0
	.word	181
	.byte	2,2,35,8,6
	.byte	'Length_u16',0
	.word	181
	.byte	2,2,35,10,6
	.byte	'Mode_en',0
	.word	11148
	.byte	4,2,35,12,6
	.byte	'Prio_en',0
	.word	11318
	.byte	4,2,35,16,6
	.byte	'SecLevel_u8',0
	.word	155
	.byte	1,2,35,20,0,22
	.byte	'Fee_OrderFifo_tst',0,1,175,1,2
	.word	11391
	.byte	16,1,246,1,9,4,17
	.byte	'FEE_SECTOR_STATE_UNDEF_E',0,0,17
	.byte	'FEE_SECTOR_ERASED_E',0,1,17
	.byte	'FEE_SECTOR_USED_E',0,2,17
	.byte	'FEE_SECTOR_FULL_E',0,3,17
	.byte	'FEE_SECTOR_REQUEST2ERASE_E',0,4,17
	.byte	'FEE_SECTOR_CONSIDERED_E',0,13,0,22
	.byte	'Fee_SectorState_ten',0,1,254,1,2
	.word	11593
	.byte	5,1,129,2,9,12,6
	.byte	'SecChngCnt_u32',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'SecState_en',0
	.word	11593
	.byte	4,2,35,4,6
	.byte	'xPhySecIdx_u8',0
	.word	155
	.byte	1,2,35,8,0,22
	.byte	'Fee_LLSectorOrder_tst',0,1,134,2,2
	.word	11773
	.byte	22
	.byte	'Fee_stRetVal_ten',0,1,149,2,2
	.word	947
	.byte	5,1,153,2,9,16,6
	.byte	'Fee_PhysStartAddress_u32',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'Fee_PhysEndAddress_u32',0
	.word	203
	.byte	4,2,35,4,6
	.byte	'Fee_LogStartAddress_u32',0
	.word	203
	.byte	4,2,35,8,6
	.byte	'Fee_LogEndAddress_u32',0
	.word	203
	.byte	4,2,35,12,0,22
	.byte	'Fee_FlashProp_tst',0,1,159,2,2
	.word	11905
	.byte	8
	.word	2679
	.byte	8
	.word	2679
	.byte	5,1,192,2,9,16,6
	.byte	'BlockPersistentId_u16',0
	.word	181
	.byte	2,2,35,0,6
	.byte	'Flags_u16',0
	.word	181
	.byte	2,2,35,2,6
	.byte	'Length_u16',0
	.word	181
	.byte	2,2,35,4,6
	.byte	'JobEndNotification_pfn',0
	.word	12069
	.byte	4,2,35,8,6
	.byte	'JobErrorNotification_pfn',0
	.word	12074
	.byte	4,2,35,12,0,22
	.byte	'Fee_BlockPropertiesType_tst',0,1,199,2,2
	.word	12079
	.byte	16,1,210,2,9,4,17
	.byte	'FEE_LL_MARKER_INIT_E',0,0,17
	.byte	'FEE_LL_MARKER_BLK_CHK_E',0,1,17
	.byte	'FEE_LL_MARKER_BLK_CHK_WAIT_E',0,2,17
	.byte	'FEE_LL_MARKER_BLK_CHK_ERROR_E',0,3,17
	.byte	'FEE_LL_MARKER_BLK_CHK_FINISHED_E',0,4,17
	.byte	'FEE_LL_MARKER_WRITE_WAIT_E',0,5,17
	.byte	'FEE_LL_MARKER_WRITE_ERROR_E',0,6,17
	.byte	'FEE_LL_MARKER_VERIFY_E',0,7,17
	.byte	'FEE_LL_MARKER_VERIFY_WAIT_E',0,8,17
	.byte	'FEE_LL_MARKER_VERIFY_FINISHED_E',0,9,0,22
	.byte	'Fee_LLWrMarkerType_ten',0,1,222,2,2
	.word	12259
	.byte	16,1,225,2,9,4,17
	.byte	'FEE_HL_RDWR_BLK_INIT_E',0,0,17
	.byte	'FEE_HL_SEARCH_BLK_HDR_E',0,1,17
	.byte	'FEE_HL_READ_BLK_HDR_WAIT_E',0,2,17
	.byte	'FEE_HL_CHECK_BLK_HDR_E',0,3,17
	.byte	'FEE_HL_CALC_BLK_CS_E',0,4,17
	.byte	'FEE_HL_CHECK_BLK_CS_E',0,5,17
	.byte	'FEE_HL_RD_DATA_FROM_BLK_E',0,6,17
	.byte	'FEE_HL_COMP_BLK_E',0,7,17
	.byte	'FEE_HL_WR_BLK_E',0,8,0,22
	.byte	'Fee_HLRdWrBlockType_ten',0,1,243,2,2
	.word	12593
	.byte	16,1,246,2,9,4,17
	.byte	'FEE_LL_WR_BLK_INIT_E',0,0,17
	.byte	'FEE_LL_WR_WRITEHEADER_E',0,1,17
	.byte	'FEE_LL_WR_SIZECHECK_HSR_E',0,2,17
	.byte	'FEE_LL_WR_WRITEHEADER_WAIT_E',0,3,17
	.byte	'FEE_LL_WR_VERIFYHEADER_E',0,4,17
	.byte	'FEE_LL_WR_VERIFYHEADER_WAIT_E',0,5,17
	.byte	'FEE_LL_WR_VERIFYHEADER_ERROR_E',0,6,17
	.byte	'FEE_LL_WR_WRITEDATA_SEC_A_E',0,7,17
	.byte	'FEE_LL_WR_WAIT_WRITEDATA_SEC_A_E',0,8,17
	.byte	'FEE_LL_WR_WRITE_ERROR_E',0,9,17
	.byte	'FEE_LL_WR_WRITE_FULL_MARKER_E',0,10,17
	.byte	'FEE_LL_WR_ERASE_SECTOR_E',0,11,17
	.byte	'FEE_LL_WR_WRITE_USED_MARKER_E',0,12,17
	.byte	'FEE_LL_WR_WRITE_START_MARKER_E',0,13,17
	.byte	'FEE_LL_WR_VERIFY_BLK_E',0,14,17
	.byte	'FEE_LL_WR_WRITEHDRPG2_E',0,15,17
	.byte	'FEE_LL_WR_WAIT_WRITEHDRPG2_E',0,16,0,22
	.byte	'Fee_LLWrBlockType_ten',0,1,162,3,2
	.word	12851
	.byte	16,1,165,3,9,4,17
	.byte	'FEE_LL_CMP_BLK_INIT_E',0,0,17
	.byte	'FEE_LL_CMP_HEADER_E',0,1,17
	.byte	'FEE_LL_CMP_WAIT_HEADER_E',0,2,17
	.byte	'FEE_LL_CMP_CHECK_OVERLAP_E',0,3,17
	.byte	'FEE_LL_CMP_DATA_SEC_A_E',0,4,17
	.byte	'FEE_LL_CMP_WAIT_DATA_SEC_A_E',0,5,17
	.byte	'FEE_LL_CMP_FINISHED_E',0,6,0,22
	.byte	'Fee_LLCmpBlkType_ten',0,1,174,3,2
	.word	13386
	.byte	16,1,177,3,9,4,17
	.byte	'FEE_LL_CPY_BLK_INIT_E',0,0,17
	.byte	'FEE_LL_CPY_BLOCK_START_E',0,1,17
	.byte	'FEE_LL_CPY_BLOCK_WAIT_E',0,2,17
	.byte	'FEE_LL_CPY_BLOCK_ERROR_E',0,3,17
	.byte	'FEE_LL_CPY_BLOCK_FINISHED_E',0,4,0,22
	.byte	'Fee_LLCpyBlkType_ten',0,1,184,3,2
	.word	13606
	.byte	16,1,187,3,9,4,17
	.byte	'FEE_LL_CRC_BLK_INIT_E',0,0,17
	.byte	'FEE_LL_CRC_RD_HD_PAGE_E',0,1,17
	.byte	'FEE_LL_CRC_RD_PAGE_E',0,2,17
	.byte	'FEE_LL_CRC_CHECK_OVERLAP_E',0,3,17
	.byte	'FEE_LL_CRC_RD_ROB_PAGE_E',0,4,17
	.byte	'FEE_LL_CRC_CHECK_OVERLAP_ROB_E',0,5,17
	.byte	'FEE_LL_CRC_RD_ROB_PAGE_WAIT_E',0,6,17
	.byte	'FEE_LL_CRC_RD_PAGE_WAIT_E',0,7,17
	.byte	'FEE_LL_CRC_RD_ERROR_E',0,8,0,22
	.byte	'Fee_LLCalcCrcBlkType_ten',0,1,200,3,2
	.word	13777
	.byte	16,1,203,3,9,4,17
	.byte	'FEE_LL_INIT_READ_E',0,0,17
	.byte	'FEE_LL_BLANK_CHECK_E',0,1,17
	.byte	'FEE_LL_BLANK_CHECK_WAIT_E',0,2,17
	.byte	'FEE_LL_READ_PAGE_E',0,3,17
	.byte	'FEE_LL_WAIT_READ_PAGE_E',0,4,17
	.byte	'FEE_LL_READ_ERROR_E',0,5,17
	.byte	'FEE_LL_READ_FINISHED_E',0,6,0,22
	.byte	'Fee_LLRdStateType_ten',0,1,223,3,3
	.word	14064
	.byte	16,1,226,3,9,4,17
	.byte	'FEE_LL_INIT_BLANK_CHECK_E',0,0,17
	.byte	'FEE_LL_PERFORM_BLANK_CHECK_E',0,1,17
	.byte	'FEE_LL_WAIT_PERFORM_BLANK_CHECK_E',0,2,17
	.byte	'FEE_LL_BLANK_CHECK_ERROR_E',0,3,17
	.byte	'FEE_LL_BLANK_CHECK_FINISHED_E',0,4,0,22
	.byte	'Fee_LLBlankCheckType_ten',0,1,233,3,3
	.word	14268
	.byte	16,1,236,3,9,4,17
	.byte	'FEE_LL_FIND_CURRENT_SECTOR_E',0,0,17
	.byte	'FEE_LL_FIND_LAST_HEADER_E',0,1,17
	.byte	'FEE_LL_FINISHED_E',0,2,0,22
	.byte	'Fee_LLFndEmptyPgeType_ten',0,1,249,3,2
	.word	14465
	.byte	16,1,252,3,9,4,17
	.byte	'FEE_LL_SEARCHBLK_INIT_E',0,0,17
	.byte	'FEE_LL_SEARCHBLK_BLK_HEADER_E',0,1,0,22
	.byte	'Fee_LLSearchBlkHdrType_ten',0,1,128,4,2
	.word	14586
	.byte	16,1,132,4,9,4,17
	.byte	'FEE_LL_BLD_UP_CACHE_INIT_E',0,0,17
	.byte	'FEE_LL_BLD_UP_CACHE_READ_E',0,1,0,22
	.byte	'Fee_LLBuildUpCache_ten',0,1,136,4,2
	.word	14687
	.byte	16,1,139,4,9,4,17
	.byte	'FEE_LL_BLD_UP_CACHE_ALL_SECT_INIT_E',0,0,17
	.byte	'FEE_LL_BLD_UP_CACHE_ALL_SECT_DO_E',0,1,0,22
	.byte	'Fee_LLBuildUpCacheAllSect_ten',0,1,143,4,2
	.word	14784
	.byte	16,1,168,4,9,4,17
	.byte	'FEE_LL_REORG_INIT_E',0,0,17
	.byte	'FEE_LL_REORG_PREP_SEARCH_BLK_E',0,1,17
	.byte	'FEE_LL_REORG_SEARCH_BLK_E',0,2,17
	.byte	'FEE_LL_REORG_CHECK_BLOCK_CS_E',0,3,17
	.byte	'FEE_LL_REORG_REDUNDANT_BLK_CHK_E',0,4,17
	.byte	'FEE_LL_REORG_WRITE_BLOCK_E',0,5,17
	.byte	'FEE_LL_REORG_FINISHED_E',0,6,0,22
	.byte	'Fee_LLSecReorgType_ten',0,1,193,4,2
	.word	14904
	.byte	16,1,196,4,9,4,17
	.byte	'FEE_LL_REDUNDANT_CPY_CHK_INIT_E',0,0,17
	.byte	'FEE_LL_REDUNDANT_CPY_CHK_SEARCH_HDR_E',0,1,17
	.byte	'FEE_LL_REDUNDANT_CPY_CHK_BLK_CS_E',0,2,0,22
	.byte	'Fee_LLRedundantCpyChk_ten',0,1,201,4,2
	.word	15148
	.byte	16,1,204,4,9,4,17
	.byte	'FEE_LL_CPY_FLS2FLS_INIT_E',0,0,17
	.byte	'FEE_LL_CPY_FLS2FLS_READ_E',0,1,17
	.byte	'FEE_LL_CPY_FLS2FLS_WAIT_READ_E',0,2,17
	.byte	'FEE_LL_CPY_FLS2FLS_READ_ERROR_E',0,3,17
	.byte	'FEE_LL_CPY_FLS2FLS_HDRPG1_WRITE_E',0,4,17
	.byte	'FEE_LL_CPY_FLS2FLS_WAIT_HDRPG1_WRITE_E',0,5,17
	.byte	'FEE_LL_CPY_FLS2FLS_HDRPG1_WRITE_ERROR_E',0,6,17
	.byte	'FEE_LL_CPY_FLS2FLS_HDRPG1_VERIFY_E',0,7,17
	.byte	'FEE_LL_CPY_FLS2FLS_WAIT_HDRPG1_VERIFY_E',0,8,17
	.byte	'FEE_LL_CPY_FLS2FLS_HDRPG1_VERIFY_ERROR_E',0,9,17
	.byte	'FEE_LL_CPY_FLS2FLS_WRITE_E',0,10,17
	.byte	'FEE_LL_CPY_FLS2FLS_WAIT_WRITE_E',0,11,17
	.byte	'FEE_LL_CPY_FLS2FLS_WRITE_ERROR_E',0,12,17
	.byte	'FEE_LL_CPY_FLS2FLS_VERIFY_E',0,13,17
	.byte	'FEE_LL_CPY_FLS2FLS_WAIT_VERIFY_E',0,14,17
	.byte	'FEE_LL_CPY_FLS2FLS_VERIFY_ERROR_E',0,15,17
	.byte	'FEE_LL_CPY_FLS2FLS_HDRPG2_WRITE_E',0,16,17
	.byte	'FEE_LL_CPY_FLS2FLS_WAIT_HDRPG2_WRITE_E',0,17,17
	.byte	'FEE_LL_CPY_FLS2FLS_HDRPG2_WRITE_ERROR_E',0,18,17
	.byte	'FEE_LL_CPY_FLS2FLS_HDRPG2_VERIFY_E',0,19,17
	.byte	'FEE_LL_CPY_FLS2FLS_WAIT_HDRPG2_VERIFY_E',0,20,17
	.byte	'FEE_LL_CPY_FLS2FLS_HDRPG2_VERIFY_ERROR_E',0,21,17
	.byte	'FEE_LL_CPY_FLS2FLS_CHECK_ADR_OVERFLOW_E',0,22,17
	.byte	'FEE_LL_CPY_FLS2FLS_WRITE_FULL_MARKER_E',0,23,17
	.byte	'FEE_LL_CPY_FLS2FLS_ERASE_SECTOR_E',0,24,17
	.byte	'FEE_LL_CPY_FLS2FLS_WRITE_USED_MARKER_E',0,25,17
	.byte	'FEE_LL_CPY_FLS2FLS_WRITE_START_MARKER_E',0,26,0,22
	.byte	'Fee_LLCpyBlkFls2Fls_ten',0,1,133,5,2
	.word	15300
	.byte	5,1,163,5,9,116,6
	.byte	'xRdAddress',0
	.word	203
	.byte	4,2,35,0,6
	.byte	'xWrAddress',0
	.word	203
	.byte	4,2,35,4,6
	.byte	'xCmpAddress',0
	.word	203
	.byte	4,2,35,8,6
	.byte	'xCrcAddress',0
	.word	203
	.byte	4,2,35,12,6
	.byte	'xCpyAddress',0
	.word	203
	.byte	4,2,35,16,6
	.byte	'AdrHdSearchStart_u32',0
	.word	203
	.byte	4,2,35,20,6
	.byte	'xStartAddrNextSector_u32',0
	.word	203
	.byte	4,2,35,24,6
	.byte	'xHdPg2Address',0
	.word	203
	.byte	4,2,35,28,6
	.byte	'LastProgrammedAddress_u32',0
	.word	203
	.byte	4,2,35,32,6
	.byte	'LastValidHdrAddress_u32',0
	.word	203
	.byte	4,2,35,36,6
	.byte	'Fee_LLSecReorg_en',0
	.word	14904
	.byte	4,2,35,40,6
	.byte	'Fee_LLRedundantCpyChk_en',0
	.word	15148
	.byte	4,2,35,44,6
	.byte	'Fee_LLCpyBlkFls2Fls_en',0
	.word	15300
	.byte	4,2,35,48,6
	.byte	'Fee_HLWrBlock_en',0
	.word	12593
	.byte	4,2,35,52,6
	.byte	'Fee_HLMtBlock_en',0
	.word	12593
	.byte	4,2,35,56,6
	.byte	'Fee_LLWrBlock_en',0
	.word	12851
	.byte	4,2,35,60,6
	.byte	'Fee_HLRdBlock',0
	.word	12593
	.byte	4,2,35,64,6
	.byte	'Fee_LLNextUsedWrBlock_en',0
	.word	12851
	.byte	4,2,35,68,6
	.byte	'Fee_LLNextEraseWrBlock_en',0
	.word	12851
	.byte	4,2,35,72,6
	.byte	'Fee_LLCompBlk',0
	.word	13386
	.byte	4,2,35,76,6
	.byte	'Fee_LLCopyBlk_en',0
	.word	13606
	.byte	4,2,35,80,6
	.byte	'Fee_LLCalcCrcBlk_en',0
	.word	13777
	.byte	4,2,35,84,6
	.byte	'Fee_LLWrMarker_en',0
	.word	12259
	.byte	4,2,35,88,6
	.byte	'Fee_LLRdState_en',0
	.word	14064
	.byte	4,2,35,92,6
	.byte	'Fee_LLBlankCheckState_en',0
	.word	14268
	.byte	4,2,35,96,6
	.byte	'Fee_LLFindEmptyPageState_en',0
	.word	14465
	.byte	4,2,35,100,6
	.byte	'Fee_LLSearchBlkHdr_en',0
	.word	14586
	.byte	4,2,35,104,6
	.byte	'Fee_LLBuildUpCache_en',0
	.word	14687
	.byte	4,2,35,108,6
	.byte	'Fee_LLBuildUpCacheAllSect_en',0
	.word	14784
	.byte	4,2,35,112,0,22
	.byte	'Fee_RdWrOrder_tst',0,1,224,5,3
	.word	16346
	.byte	22
	.byte	'Fee_GlobInfoLastRdHeader_tst',0,1,235,5,2
	.word	1159
	.byte	16,1,133,6,9,4,17
	.byte	'FEE_ERASESEC_IDLE_E',0,0,17
	.byte	'FEE_ERASESEC_CHECK_CACHE_E',0,1,17
	.byte	'FEE_ERASESEC_START_E',0,2,17
	.byte	'FEE_ERASESEC_DO_E',0,3,17
	.byte	'FEE_ERASESEC_WRITE_MARKER_E',0,4,17
	.byte	'FEE_ERASESEC_ERROR_E',0,5,0,22
	.byte	'Fee_LLEraseStateType_ten',0,1,141,6,2
	.word	17241
	.byte	22
	.byte	'Fee_BlkHeader_tst',0,1,159,6,2
	.word	219
	.byte	3,32
	.word	11905
	.byte	4,1,0,8
	.word	17456
	.byte	33
	.byte	'Fee_FlashProp_st',0,1,135,7,53
	.word	17465
	.byte	1,1,33
	.byte	'Fee_PageBytePtr_cpu8',0,1,143,7,53
	.word	744
	.byte	1,1,33
	.byte	'Fee_RdWrOrder_st',0,1,144,7,53
	.word	16346
	.byte	1,1,3,24
	.word	11773
	.byte	4,1,0,33
	.byte	'Fee_LLSectorOrder_st',0,1,145,7,53
	.word	17558
	.byte	1,1,3,72
	.word	11391
	.byte	4,2,0,33
	.byte	'Fee_OrderFifo_st',0,1,147,7,53
	.word	17599
	.byte	1,1,33
	.byte	'Fee_Prv_stInit_u8',0,1,164,7,53
	.word	155
	.byte	1,1,33
	.byte	'Fee_Prv_stReorg_u8',0,1,165,7,53
	.word	155
	.byte	1,1,33
	.byte	'Fee_NumFlashBanksUsed_u8',0,1,166,7,53
	.word	155
	.byte	1,1,33
	.byte	'Fee_idxLLSectorOrder_au8',0,1,192,7,53
	.word	10480
	.byte	1,1,33
	.byte	'Fee_idxActQueue_u8',0,1,193,7,53
	.word	155
	.byte	1,1,33
	.byte	'Fee_CacheUpdCompForSect_au8',0,1,194,7,53
	.word	10480
	.byte	1,1,33
	.byte	'Fee_RdWrRetries_u8',0,1,195,7,53
	.word	155
	.byte	1,1,3,48
	.word	203
	.byte	4,11,0,33
	.byte	'Fee_Cache_au32',0,1,212,7,53
	.word	17866
	.byte	1,1,3,192,1
	.word	12079
	.byte	4,11,0,33
	.byte	'Fee_BlockProperties_st',0,1,237,7,53
	.word	17901
	.byte	1,1,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L294:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,1,1,11,15,73,19,0,0,4,33,0
	.byte	47,15,0,0,5,19,1,58,15,59,15,57,15,11,15,0,0,6,13,0,3,8,73,19,11,15,56,9,0,0,7,15,0,73,19,0,0,8,38,0,73
	.byte	19,0,0,9,46,1,3,8,32,13,58,15,59,15,57,15,54,15,39,12,0,0,10,5,0,3,8,58,15,59,15,57,15,73,19,0,0,11,11
	.byte	0,0,0,12,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,13,46,0,3,8,58,15,59,15,57,15,54,15,39
	.byte	12,63,12,60,12,0,0,14,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,15,46,0,3,8,58,15,59
	.byte	15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,16,4,1,58,15,59,15,57,15,11,15,0,0,17,40,0,3,8,28,13,0,0,18
	.byte	46,1,49,19,0,0,19,5,0,49,19,0,0,20,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,21,21,0,54,15
	.byte	0,0,22,22,0,3,8,58,15,59,15,57,15,73,19,0,0,23,21,0,54,15,39,12,0,0,24,19,1,3,8,58,15,59,15,57,15,11,15
	.byte	0,0,25,59,0,3,8,0,0,26,21,1,54,15,39,12,0,0,27,5,0,73,19,0,0,28,23,1,58,15,59,15,57,15,11,15,0,0,29,4
	.byte	1,3,8,58,15,59,15,57,15,11,15,0,0,30,21,0,73,19,54,15,39,12,0,0,31,53,0,73,19,0,0,32,13,0,3,8,11,15,73
	.byte	19,13,15,12,15,56,9,0,0,33,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L295:
	.word	.L639-.L638
.L638:
	.half	3
	.word	.L641-.L640
.L640:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_Prv.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\inc\\Fls_17_Pmu.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\rba_FeeFs1_SyncRead.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Crc\\Crc_16.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Integration\\TargetIntegration\\TC275\\Include\\Mcal_TcLib.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\MemIf\\api\\MemIf_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Fee\\api\\Fee.h',0,0,0,0,0
.L641:
.L639:
	.sdecl	'.debug_info',debug,cluster('Fee_LLSearchNextBlkHeader')
	.sect	'.debug_info'
.L296:
	.word	797
	.half	3
	.word	.L297
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L299,.L298
	.byte	2
	.word	.L292
	.byte	3
	.byte	'Fee_LLSearchNextBlkHeader',0,1,232,9,34
	.word	.L376
	.byte	1,1,1
	.word	.L263,.L377,.L262
	.byte	4
	.byte	'Fee_GlobInfoLastRdHeader_ptr',0,1,232,9,122
	.word	.L378,.L379
	.byte	4
	.byte	'CachedAccess_u8',0,1,233,9,82
	.word	.L380,.L381
	.byte	4
	.byte	'FastCacheUpdate_u8',0,1,234,9,82
	.word	.L380,.L382
	.byte	4
	.byte	'xForcePageBufReload_b',0,1,235,9,84
	.word	.L380,.L383
	.byte	4
	.byte	'strAddrHdrSearch',0,1,236,9,83
	.word	.L384,.L385
	.byte	5
	.word	.L263,.L377
	.byte	6
	.byte	'xRetVal',0,1,238,9,38
	.word	.L376,.L386
	.byte	6
	.byte	'xCurrBlkHeader_st',0,1,245,9,39
	.word	.L387,.L388
	.byte	6
	.byte	'xPhySecIdx_u8',0,1,248,9,37
	.word	.L380,.L389
	.byte	6
	.byte	'xPhyWrSecIdx_u8',0,1,249,9,37
	.word	.L380,.L390
	.byte	6
	.byte	'i_u16',0,1,250,9,37
	.word	.L391,.L392
	.byte	6
	.byte	'xCalcCrc_u16',0,1,251,9,37
	.word	.L391,.L393
	.byte	6
	.byte	'xLoopInRamCounter_u32',0,1,252,9,37
	.word	.L384,.L394
	.byte	7
	.byte	'xNumBytes2Read_u16',0,1,253,9,37
	.word	.L391
	.byte	5,3
	.word	_999003_xNumBytes2Read_u16
	.byte	7
	.byte	'xPageBufReloaded_b',0,1,254,9,20
	.word	.L380
	.byte	5,3
	.word	_999004_xPageBufReloaded_b
	.byte	7
	.byte	'xCntRetry_u8',0,1,255,9,18
	.word	.L380
	.byte	5,3
	.word	_999005_xCntRetry_u8
	.byte	7
	.byte	'xLoopReduction_u8',0,1,128,10,18
	.word	.L380
	.byte	5,3
	.word	_999006_xLoopReduction_u8
	.byte	8
	.word	.L395,.L396,.L397
	.byte	9
	.word	.L398,.L399
	.byte	9
	.word	.L400,.L401
	.byte	10
	.word	.L402,.L396,.L397
	.byte	0,8
	.word	.L395,.L403,.L404
	.byte	9
	.word	.L398,.L399
	.byte	9
	.word	.L400,.L401
	.byte	10
	.word	.L402,.L403,.L404
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fee_LLSearchNextBlkHeader')
	.sect	'.debug_abbrev'
.L297:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,8,29,1,49,16,17,1
	.byte	18,1,0,0,9,5,0,49,16,2,6,0,0,10,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fee_LLSearchNextBlkHeader')
	.sect	'.debug_line'
.L298:
	.word	.L643-.L642
.L642:
	.half	3
	.word	.L645-.L644
.L644:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_Prv.h',0,0,0,0,0
.L645:
	.byte	5,34,7,0,5,2
	.word	.L263
	.byte	3,231,9,1,5,46,9
	.half	.L541-.L263
	.byte	3,6,1,5,5,9
	.half	.L542-.L541
	.byte	3,33,1,5,9,7,9
	.half	.L646-.L542
	.byte	3,2,1,5,37,9
	.half	.L647-.L646
	.byte	1,5,9,9
	.half	.L72-.L647
	.byte	1,5,32,9
	.half	.L648-.L72
	.byte	3,6,1,5,18,9
	.half	.L649-.L648
	.byte	3,3,1,9
	.half	.L650-.L649
	.byte	3,219,0,1,9
	.half	.L651-.L650
	.byte	3,19,1,9
	.half	.L652-.L651
	.byte	3,16,1,9
	.half	.L653-.L652
	.byte	3,40,1,5,78,9
	.half	.L74-.L653
	.byte	3,221,126,1,5,33,9
	.half	.L543-.L74
	.byte	1,5,78,9
	.half	.L545-.L543
	.byte	3,3,1,5,33,9
	.half	.L544-.L545
	.byte	1,5,69,9
	.half	.L547-.L544
	.byte	3,5,1,5,52,9
	.half	.L654-.L547
	.byte	1,5,68,9
	.half	.L655-.L654
	.byte	1,5,83,9
	.half	.L656-.L655
	.byte	1,5,37,9
	.half	.L657-.L656
	.byte	1,5,20,9
	.half	.L658-.L657
	.byte	1,5,69,7,9
	.half	.L659-.L658
	.byte	3,1,1,5,21,9
	.half	.L660-.L659
	.byte	1,5,36,7,9
	.half	.L661-.L660
	.byte	3,1,1,5,21,7,9
	.half	.L80-.L661
	.byte	3,3,1,5,53,7,9
	.half	.L662-.L80
	.byte	3,3,1,5,29,9
	.half	.L83-.L662
	.byte	3,4,1,5,21,9
	.half	.L663-.L83
	.byte	3,3,1,9
	.half	.L81-.L663
	.byte	3,12,1,5,20,9
	.half	.L664-.L81
	.byte	3,121,1,5,37,7,9
	.half	.L665-.L664
	.byte	3,1,1,5,59,9
	.half	.L666-.L665
	.byte	1,5,69,7,9
	.half	.L667-.L666
	.byte	3,1,1,5,132,1,9
	.half	.L668-.L667
	.byte	1,5,69,9
	.half	.L669-.L668
	.byte	1,5,49,9
	.half	.L670-.L669
	.byte	1,7,9
	.half	.L671-.L670
	.byte	3,1,1,5,81,7,9
	.half	.L672-.L671
	.byte	3,1,1,5,35,9
	.half	.L546-.L672
	.byte	1,5,42,7,9
	.half	.L673-.L546
	.byte	3,3,1,5,40,9
	.half	.L674-.L673
	.byte	1,5,57,9
	.half	.L675-.L674
	.byte	3,3,1,5,55,9
	.half	.L676-.L675
	.byte	1,5,21,9
	.half	.L677-.L676
	.byte	3,3,1,5,37,9
	.half	.L89-.L677
	.byte	3,95,1,5,42,9
	.half	.L85-.L89
	.byte	3,38,1,5,40,9
	.half	.L678-.L85
	.byte	1,5,59,9
	.half	.L679-.L678
	.byte	3,3,1,5,25,9
	.half	.L680-.L679
	.byte	3,7,1,5,21,9
	.half	.L548-.L680
	.byte	3,125,1,5,46,7,9
	.half	.L549-.L548
	.byte	3,3,1,5,44,9
	.half	.L681-.L549
	.byte	1,5,65,9
	.half	.L682-.L681
	.byte	1,5,46,9
	.half	.L91-.L682
	.byte	3,5,1,5,44,9
	.half	.L683-.L91
	.byte	1,5,121,9
	.half	.L684-.L683
	.byte	3,3,1,5,45,9
	.half	.L685-.L684
	.byte	1,5,57,9
	.half	.L686-.L685
	.byte	1,5,25,9
	.half	.L687-.L686
	.byte	1,5,90,7,9
	.half	.L688-.L687
	.byte	3,3,1,5,47,9
	.half	.L689-.L688
	.byte	1,5,108,9
	.half	.L93-.L689
	.byte	3,5,1,5,28,9
	.half	.L690-.L93
	.byte	1,5,43,7,9
	.half	.L691-.L690
	.byte	3,1,1,5,104,7,9
	.half	.L692-.L691
	.byte	3,3,1,5,86,9
	.half	.L693-.L692
	.byte	1,5,47,9
	.half	.L694-.L693
	.byte	1,5,57,9
	.half	.L92-.L694
	.byte	3,5,1,5,55,9
	.half	.L695-.L92
	.byte	1,5,25,9
	.half	.L75-.L695
	.byte	3,103,1,5,20,9
	.half	.L696-.L75
	.byte	3,36,1,5,17,9
	.half	.L697-.L696
	.byte	1,5,57,7,9
	.half	.L698-.L697
	.byte	3,3,1,5,55,9
	.half	.L699-.L698
	.byte	1,5,80,9
	.half	.L700-.L699
	.byte	1,5,29,9
	.half	.L96-.L700
	.byte	3,6,1,5,13,9
	.half	.L97-.L96
	.byte	3,3,1,5,17,9
	.half	.L76-.L97
	.byte	3,9,1,5,38,9
	.half	.L701-.L76
	.byte	3,4,1,5,13,9
	.half	.L702-.L701
	.byte	3,3,1,5,100,9
	.half	.L77-.L702
	.byte	3,5,1,5,41,9
	.half	.L703-.L77
	.byte	1,5,66,9
	.half	.L704-.L703
	.byte	1,5,100,9
	.half	.L705-.L704
	.byte	1,5,20,9
	.half	.L706-.L705
	.byte	3,3,1,5,17,9
	.half	.L707-.L706
	.byte	1,5,33,7,9
	.half	.L708-.L707
	.byte	3,3,1,5,57,9
	.half	.L709-.L708
	.byte	3,3,1,5,55,9
	.half	.L710-.L709
	.byte	1,5,35,9
	.half	.L711-.L710
	.byte	3,125,1,5,21,9
	.half	.L100-.L711
	.byte	3,10,1,5,33,7,9
	.half	.L550-.L100
	.byte	3,6,1,5,46,9
	.half	.L712-.L550
	.byte	1,5,82,9
	.half	.L102-.L712
	.byte	3,7,1,5,102,9
	.half	.L713-.L102
	.byte	1,5,61,9
	.half	.L714-.L713
	.byte	3,3,1,5,59,9
	.half	.L715-.L714
	.byte	1,5,13,9
	.half	.L101-.L715
	.byte	3,3,1,5,20,9
	.half	.L78-.L101
	.byte	3,21,1,5,17,9
	.half	.L716-.L78
	.byte	1,5,85,7,9
	.half	.L717-.L716
	.byte	3,3,1,5,55,9
	.half	.L718-.L717
	.byte	1,5,67,9
	.half	.L719-.L718
	.byte	1,5,29,9
	.half	.L720-.L719
	.byte	1,5,131,1,9
	.half	.L551-.L720
	.byte	1,5,27,9
	.half	.L105-.L551
	.byte	3,5,1,5,41,9
	.half	.L106-.L105
	.byte	3,8,1,5,75,9
	.half	.L553-.L106
	.byte	3,3,1,5,42,9
	.half	.L108-.L553
	.byte	3,3,1,5,24,9
	.half	.L107-.L108
	.byte	3,125,1,5,75,9
	.half	.L721-.L107
	.byte	1,5,53,7,9
	.half	.L722-.L721
	.byte	3,7,1,5,17,9
	.half	.L723-.L722
	.byte	1,5,53,7,9
	.half	.L724-.L723
	.byte	3,3,1,5,73,9
	.half	.L725-.L724
	.byte	1,5,93,9
	.half	.L726-.L725
	.byte	1,4,2,5,47,9
	.half	.L396-.L726
	.byte	3,151,126,1,5,33,9
	.half	.L727-.L396
	.byte	1,5,47,9
	.half	.L728-.L727
	.byte	3,1,1,5,33,9
	.half	.L729-.L728
	.byte	1,5,47,9
	.half	.L730-.L729
	.byte	3,1,1,5,33,9
	.half	.L731-.L730
	.byte	1,4,1,5,56,9
	.half	.L397-.L731
	.byte	3,234,1,1,5,63,9
	.half	.L732-.L397
	.byte	1,5,25,9
	.half	.L733-.L732
	.byte	1,5,56,7,9
	.half	.L734-.L733
	.byte	3,1,1,5,63,9
	.half	.L735-.L734
	.byte	1,5,60,9
	.half	.L736-.L735
	.byte	1,5,56,7,9
	.half	.L737-.L736
	.byte	3,1,1,5,63,9
	.half	.L738-.L737
	.byte	1,5,60,9
	.half	.L739-.L738
	.byte	1,5,25,7,9
	.half	.L740-.L739
	.byte	3,4,1,5,45,9
	.half	.L741-.L740
	.byte	1,5,43,9
	.half	.L742-.L741
	.byte	1,5,42,9
	.half	.L109-.L742
	.byte	3,5,1,5,39,9
	.half	.L743-.L109
	.byte	1,5,17,9
	.half	.L744-.L743
	.byte	3,1,1,5,52,9
	.half	.L554-.L744
	.byte	3,13,1,5,53,9
	.half	.L114-.L554
	.byte	3,3,1,5,73,9
	.half	.L745-.L114
	.byte	1,5,93,9
	.half	.L746-.L745
	.byte	1,4,2,5,47,9
	.half	.L403-.L746
	.byte	3,248,125,1,5,33,9
	.half	.L747-.L403
	.byte	1,5,47,9
	.half	.L748-.L747
	.byte	3,1,1,5,33,9
	.half	.L749-.L748
	.byte	1,5,47,9
	.half	.L750-.L749
	.byte	3,1,1,5,33,9
	.half	.L751-.L750
	.byte	1,4,1,5,56,9
	.half	.L404-.L751
	.byte	3,137,2,1,5,63,9
	.half	.L752-.L404
	.byte	1,5,25,9
	.half	.L753-.L752
	.byte	1,5,56,7,9
	.half	.L754-.L753
	.byte	3,1,1,5,63,9
	.half	.L755-.L754
	.byte	1,5,60,9
	.half	.L756-.L755
	.byte	1,5,56,7,9
	.half	.L757-.L756
	.byte	3,1,1,5,63,9
	.half	.L758-.L757
	.byte	1,5,60,9
	.half	.L759-.L758
	.byte	1,5,25,7,9
	.half	.L760-.L759
	.byte	3,18,1,5,45,9
	.half	.L761-.L760
	.byte	1,5,43,9
	.half	.L762-.L761
	.byte	1,5,55,9
	.half	.L763-.L762
	.byte	3,3,1,5,95,9
	.half	.L764-.L763
	.byte	1,5,46,9
	.half	.L765-.L764
	.byte	3,4,1,5,25,9
	.half	.L766-.L765
	.byte	1,5,72,7,9
	.half	.L767-.L766
	.byte	3,3,1,5,92,9
	.half	.L768-.L767
	.byte	1,9
	.half	.L769-.L768
	.byte	3,1,1,5,63,9
	.half	.L770-.L769
	.byte	3,1,1,9
	.half	.L771-.L770
	.byte	3,1,1,5,65,9
	.half	.L555-.L771
	.byte	3,3,1,5,29,9
	.half	.L772-.L555
	.byte	1,5,63,7,9
	.half	.L773-.L772
	.byte	3,6,1,5,83,9
	.half	.L774-.L773
	.byte	1,5,103,9
	.half	.L775-.L774
	.byte	1,5,107,9
	.half	.L556-.L775
	.byte	3,3,1,5,100,9
	.half	.L776-.L556
	.byte	3,1,1,5,129,1,9
	.half	.L552-.L776
	.byte	3,127,1,5,80,9
	.half	.L777-.L552
	.byte	1,5,99,9
	.half	.L778-.L777
	.byte	3,2,1,5,80,9
	.half	.L779-.L778
	.byte	1,5,99,9
	.half	.L780-.L779
	.byte	3,1,1,5,80,9
	.half	.L781-.L780
	.byte	1,5,99,9
	.half	.L782-.L781
	.byte	3,1,1,5,80,9
	.half	.L783-.L782
	.byte	1,5,99,9
	.half	.L784-.L783
	.byte	3,1,1,5,80,9
	.half	.L785-.L784
	.byte	1,5,99,9
	.half	.L786-.L785
	.byte	3,1,1,5,80,9
	.half	.L787-.L786
	.byte	1,5,33,9
	.half	.L558-.L787
	.byte	3,4,1,5,92,7,9
	.half	.L559-.L558
	.byte	3,3,1,9
	.half	.L788-.L559
	.byte	3,1,1,5,41,9
	.half	.L120-.L788
	.byte	3,4,1,5,33,9
	.half	.L789-.L120
	.byte	3,3,1,5,25,9
	.half	.L118-.L789
	.byte	3,89,1,9
	.half	.L115-.L118
	.byte	3,201,0,1,5,29,7,9
	.half	.L561-.L115
	.byte	3,3,1,5,59,9
	.half	.L122-.L561
	.byte	3,147,127,1,5,52,9
	.half	.L113-.L122
	.byte	1,5,17,7,9
	.half	.L121-.L113
	.byte	3,250,0,1,5,21,7,9
	.half	.L562-.L121
	.byte	3,9,1,5,79,7,9
	.half	.L563-.L562
	.byte	3,15,1,5,78,9
	.half	.L790-.L563
	.byte	3,2,1,5,79,9
	.half	.L791-.L790
	.byte	3,126,1,5,69,9
	.half	.L792-.L791
	.byte	3,3,1,5,79,9
	.half	.L793-.L792
	.byte	3,125,1,5,52,9
	.half	.L794-.L793
	.byte	1,9
	.half	.L795-.L794
	.byte	3,4,1,5,61,9
	.half	.L796-.L795
	.byte	3,3,1,5,59,9
	.half	.L797-.L796
	.byte	1,5,57,9
	.half	.L798-.L797
	.byte	3,125,1,5,33,9
	.half	.L126-.L798
	.byte	3,8,1,5,13,9
	.half	.L125-.L126
	.byte	3,34,1,5,25,9
	.half	.L79-.L125
	.byte	3,242,0,1,5,53,9
	.half	.L799-.L79
	.byte	3,3,1,5,51,9
	.half	.L800-.L799
	.byte	1,5,13,9
	.half	.L801-.L800
	.byte	3,2,1,5,11,9
	.half	.L84-.L801
	.byte	3,3,1,5,48,7,9
	.half	.L802-.L84
	.byte	1,5,59,9
	.half	.L803-.L802
	.byte	1,5,5,7,9
	.half	.L130-.L803
	.byte	3,3,1,5,45,7,9
	.half	.L804-.L130
	.byte	3,3,1,5,43,9
	.half	.L805-.L804
	.byte	1,5,9,9
	.half	.L806-.L805
	.byte	3,3,1,5,29,9
	.half	.L807-.L806
	.byte	1,5,27,9
	.half	.L808-.L807
	.byte	1,5,9,9
	.half	.L809-.L808
	.byte	3,3,1,5,24,9
	.half	.L810-.L809
	.byte	1,5,22,9
	.half	.L811-.L810
	.byte	1,5,5,9
	.half	.L131-.L811
	.byte	3,3,1,5,1,9
	.half	.L132-.L131
	.byte	3,1,1,7,9
	.half	.L300-.L132
	.byte	0,1,1
.L643:
	.sdecl	'.debug_ranges',debug,cluster('Fee_LLSearchNextBlkHeader')
	.sect	'.debug_ranges'
.L299:
	.word	-1,.L263,0,.L300-.L263,0,0
	.sdecl	'.debug_info',debug,cluster('Fee_LLSearchSpecifiedBlkHeader')
	.sect	'.debug_info'
.L301:
	.word	571
	.half	3
	.word	.L302
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L304,.L303
	.byte	2
	.word	.L292
	.byte	3
	.byte	'Fee_LLSearchSpecifiedBlkHeader',0,1,76,34
	.word	.L376
	.byte	1,1,1
	.word	.L261,.L405,.L260
	.byte	4
	.byte	'FeeIdx_u16',0,1,76,88
	.word	.L391,.L406
	.byte	4
	.byte	'LastHdrAddr_ptr',0,1,77,105
	.word	.L407,.L408
	.byte	4
	.byte	'GlobBlkHdr_ptr',0,1,78,127
	.word	.L378,.L409
	.byte	4
	.byte	'SearchRetry_b',0,1,79,89
	.word	.L380,.L410
	.byte	5
	.word	.L261,.L405
	.byte	6
	.byte	'xRetVal',0,1,81,38
	.word	.L376,.L411
	.byte	6
	.byte	'xtmpRetVal',0,1,82,38
	.word	.L376,.L412
	.byte	6
	.byte	'xTmpBlkHdr_st',0,1,84,50
	.word	.L413,.L414
	.byte	6
	.byte	'xLogSecIdx_u8',0,1,85,29
	.word	.L380,.L415
	.byte	6
	.byte	'xContinueSearch_b',0,1,86,29
	.word	.L380,.L416
	.byte	6
	.byte	'xTmpAddr_u32',0,1,87,29
	.word	.L384,.L417
	.byte	6
	.byte	'xForcePageBufReload_b',0,1,88,29
	.word	.L380,.L418
	.byte	7
	.byte	'xPhySecIdx_u8',0,1,90,18
	.word	.L380
	.byte	5,3
	.word	_999001_xPhySecIdx_u8
	.byte	7
	.byte	'xSearchType_u8',0,1,91,18
	.word	.L380
	.byte	5,3
	.word	_999002_xSearchType_u8
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fee_LLSearchSpecifiedBlkHeader')
	.sect	'.debug_abbrev'
.L302:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fee_LLSearchSpecifiedBlkHeader')
	.sect	'.debug_line'
.L303:
	.word	.L813-.L812
.L812:
	.half	3
	.word	.L815-.L814
.L814:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c',0,0,0,0,0
.L815:
	.byte	5,34,7,0,5,2
	.word	.L261
	.byte	3,203,0,1,5,49,9
	.half	.L507-.L261
	.byte	3,5,1,5,44,9
	.half	.L508-.L507
	.byte	3,6,1,5,42,9
	.half	.L816-.L508
	.byte	1,5,51,9
	.half	.L509-.L816
	.byte	3,1,1,5,13,9
	.half	.L511-.L509
	.byte	3,14,1,5,29,9
	.half	.L817-.L511
	.byte	1,5,14,9
	.half	.L818-.L817
	.byte	3,3,1,9
	.half	.L819-.L818
	.byte	3,59,1,5,17,9
	.half	.L2-.L819
	.byte	3,77,1,5,16,9
	.half	.L820-.L2
	.byte	3,123,1,5,17,7,9
	.half	.L821-.L820
	.byte	3,1,1,5,34,9
	.half	.L822-.L821
	.byte	1,5,60,7,9
	.half	.L5-.L822
	.byte	3,4,1,5,31,9
	.half	.L503-.L5
	.byte	1,5,62,9
	.half	.L823-.L503
	.byte	1,5,76,9
	.half	.L6-.L823
	.byte	3,6,1,5,31,9
	.half	.L514-.L6
	.byte	1,5,17,9
	.half	.L7-.L514
	.byte	3,5,1,5,16,9
	.half	.L824-.L7
	.byte	1,5,31,7,9
	.half	.L825-.L824
	.byte	3,1,1,5,58,7,9
	.half	.L826-.L825
	.byte	3,3,1,5,30,9
	.half	.L510-.L826
	.byte	1,5,17,9
	.half	.L8-.L510
	.byte	3,8,1,5,16,9
	.half	.L827-.L8
	.byte	3,124,1,5,33,7,9
	.half	.L828-.L827
	.byte	3,1,1,5,30,9
	.half	.L829-.L828
	.byte	1,5,34,7,9
	.half	.L830-.L829
	.byte	3,3,1,5,32,9
	.half	.L831-.L830
	.byte	1,5,45,9
	.half	.L832-.L831
	.byte	3,3,1,5,55,9
	.half	.L833-.L832
	.byte	3,125,1,5,72,9
	.half	.L10-.L833
	.byte	3,8,1,5,45,9
	.half	.L834-.L10
	.byte	1,5,34,9
	.half	.L835-.L834
	.byte	3,3,1,5,32,9
	.half	.L836-.L835
	.byte	1,5,44,9
	.half	.L12-.L836
	.byte	3,4,1,5,42,9
	.half	.L837-.L12
	.byte	1,5,35,9
	.half	.L838-.L837
	.byte	3,4,1,5,54,9
	.half	.L839-.L838
	.byte	3,3,1,5,52,9
	.half	.L840-.L839
	.byte	1,5,17,9
	.half	.L3-.L840
	.byte	3,83,1,9
	.half	.L841-.L3
	.byte	3,23,1,5,47,9
	.half	.L842-.L841
	.byte	3,52,1,5,16,9
	.half	.L843-.L842
	.byte	1,5,17,7,9
	.half	.L844-.L843
	.byte	3,1,1,5,32,9
	.half	.L845-.L844
	.byte	1,5,31,7,9
	.half	.L846-.L845
	.byte	3,1,1,5,43,7,9
	.half	.L847-.L846
	.byte	3,1,1,5,58,9
	.half	.L518-.L847
	.byte	1,5,55,9
	.half	.L848-.L518
	.byte	1,5,17,7,9
	.half	.L849-.L848
	.byte	3,1,1,5,36,9
	.half	.L850-.L849
	.byte	1,5,28,7,9
	.half	.L851-.L850
	.byte	3,4,1,5,50,9
	.half	.L519-.L851
	.byte	1,5,57,9
	.half	.L13-.L519
	.byte	3,5,1,5,72,9
	.half	.L852-.L13
	.byte	1,5,88,9
	.half	.L853-.L852
	.byte	1,5,132,1,9
	.half	.L854-.L853
	.byte	1,5,22,9
	.half	.L18-.L854
	.byte	3,7,1,9
	.half	.L855-.L18
	.byte	3,8,1,9
	.half	.L856-.L855
	.byte	3,157,2,1,9
	.half	.L857-.L856
	.byte	3,173,127,1,9
	.half	.L858-.L857
	.byte	3,222,0,1,9
	.half	.L859-.L858
	.byte	3,163,127,1,5,17,9
	.half	.L19-.L859
	.byte	3,178,126,1,5,38,9
	.half	.L20-.L19
	.byte	3,8,1,5,24,9
	.half	.L860-.L20
	.byte	1,5,42,7,9
	.half	.L861-.L860
	.byte	3,1,1,5,25,9
	.half	.L862-.L861
	.byte	1,5,132,1,7,9
	.half	.L863-.L862
	.byte	3,6,1,5,67,9
	.half	.L864-.L863
	.byte	1,5,66,9
	.half	.L865-.L864
	.byte	1,5,50,9
	.half	.L866-.L865
	.byte	1,5,66,9
	.half	.L867-.L866
	.byte	1,5,86,9
	.half	.L868-.L867
	.byte	1,5,27,9
	.half	.L869-.L868
	.byte	1,5,49,9
	.half	.L870-.L869
	.byte	1,5,104,9
	.half	.L871-.L870
	.byte	1,5,116,9
	.half	.L872-.L871
	.byte	1,5,62,7,9
	.half	.L873-.L872
	.byte	3,1,1,5,74,9
	.half	.L874-.L873
	.byte	1,5,112,7,9
	.half	.L875-.L874
	.byte	1,5,147,1,7,9
	.half	.L876-.L875
	.byte	3,1,1,5,115,9
	.half	.L877-.L876
	.byte	1,5,60,7,9
	.half	.L28-.L877
	.byte	3,6,1,5,28,9
	.half	.L878-.L28
	.byte	1,5,25,9
	.half	.L879-.L878
	.byte	1,5,62,7,9
	.half	.L880-.L879
	.byte	3,7,1,5,77,9
	.half	.L881-.L880
	.byte	3,2,1,5,62,9
	.half	.L882-.L881
	.byte	1,5,77,9
	.half	.L883-.L882
	.byte	3,2,1,5,62,9
	.half	.L884-.L883
	.byte	1,5,77,9
	.half	.L885-.L884
	.byte	3,2,1,5,62,9
	.half	.L886-.L885
	.byte	1,5,77,9
	.half	.L887-.L886
	.byte	3,2,1,5,62,9
	.half	.L888-.L887
	.byte	1,5,77,9
	.half	.L889-.L888
	.byte	3,2,1,5,62,9
	.half	.L890-.L889
	.byte	1,5,32,9
	.half	.L891-.L890
	.byte	3,3,1,5,29,9
	.half	.L892-.L891
	.byte	1,5,41,7,9
	.half	.L893-.L892
	.byte	3,3,1,5,63,9
	.half	.L894-.L893
	.byte	1,5,76,9
	.half	.L34-.L894
	.byte	3,5,1,5,61,9
	.half	.L895-.L34
	.byte	1,5,90,9
	.half	.L896-.L895
	.byte	3,5,1,5,104,9
	.half	.L897-.L896
	.byte	1,5,29,9
	.half	.L35-.L897
	.byte	3,120,1,5,46,9
	.half	.L33-.L35
	.byte	3,16,1,5,64,9
	.half	.L898-.L33
	.byte	1,5,29,9
	.half	.L899-.L898
	.byte	1,5,41,7,9
	.half	.L900-.L899
	.byte	3,3,1,5,63,9
	.half	.L901-.L900
	.byte	1,5,92,9
	.half	.L37-.L901
	.byte	3,10,1,5,47,9
	.half	.L521-.L37
	.byte	1,5,74,9
	.half	.L902-.L521
	.byte	3,3,1,5,49,9
	.half	.L903-.L902
	.byte	1,5,73,9
	.half	.L904-.L903
	.byte	1,5,51,9
	.half	.L522-.L904
	.byte	3,3,1,5,33,9
	.half	.L524-.L522
	.byte	3,4,1,5,54,7,9
	.half	.L40-.L524
	.byte	3,5,1,5,65,9
	.half	.L905-.L40
	.byte	3,3,1,5,45,9
	.half	.L906-.L905
	.byte	1,5,65,9
	.half	.L907-.L906
	.byte	1,5,80,9
	.half	.L908-.L907
	.byte	1,5,44,9
	.half	.L909-.L908
	.byte	1,5,93,7,9
	.half	.L910-.L909
	.byte	3,1,1,5,63,7,9
	.half	.L41-.L910
	.byte	3,3,1,5,96,9
	.half	.L911-.L41
	.byte	3,3,1,5,59,9
	.half	.L912-.L911
	.byte	1,5,92,9
	.half	.L913-.L912
	.byte	3,3,1,5,75,9
	.half	.L914-.L913
	.byte	1,5,91,9
	.half	.L915-.L914
	.byte	1,5,106,9
	.half	.L916-.L915
	.byte	1,5,73,9
	.half	.L917-.L916
	.byte	1,5,64,9
	.half	.L918-.L917
	.byte	3,3,1,5,62,9
	.half	.L919-.L918
	.byte	1,9
	.half	.L920-.L919
	.byte	3,3,1,5,60,9
	.half	.L921-.L920
	.byte	1,5,43,9
	.half	.L42-.L921
	.byte	3,6,1,5,85,7,9
	.half	.L922-.L42
	.byte	1,5,33,7,9
	.half	.L39-.L922
	.byte	3,4,1,5,37,7,9
	.half	.L923-.L39
	.byte	3,4,1,5,45,9
	.half	.L523-.L923
	.byte	3,3,1,5,25,9
	.half	.L36-.L523
	.byte	3,187,127,1,5,28,9
	.half	.L27-.L36
	.byte	3,208,0,1,5,25,9
	.half	.L924-.L27
	.byte	1,5,56,7,9
	.half	.L925-.L924
	.byte	3,9,1,5,37,9
	.half	.L525-.L925
	.byte	3,3,1,5,84,9
	.half	.L926-.L525
	.byte	3,125,1,5,83,9
	.half	.L46-.L926
	.byte	3,8,1,5,42,9
	.half	.L516-.L46
	.byte	1,5,33,9
	.half	.L512-.L516
	.byte	3,6,1,5,50,7,9
	.half	.L927-.L512
	.byte	3,1,1,5,47,9
	.half	.L928-.L927
	.byte	1,5,34,7,9
	.half	.L48-.L928
	.byte	3,1,1,5,51,9
	.half	.L929-.L48
	.byte	1,5,73,7,9
	.half	.L930-.L929
	.byte	3,3,1,9
	.half	.L931-.L930
	.byte	3,2,1,5,91,9
	.half	.L526-.L931
	.byte	1,5,92,9
	.half	.L49-.L526
	.byte	3,7,1,5,47,9
	.half	.L527-.L49
	.byte	1,5,70,9
	.half	.L932-.L527
	.byte	3,7,1,5,53,9
	.half	.L933-.L932
	.byte	1,5,69,9
	.half	.L934-.L933
	.byte	1,5,84,9
	.half	.L935-.L934
	.byte	1,5,36,9
	.half	.L936-.L935
	.byte	1,5,84,7,9
	.half	.L937-.L936
	.byte	3,1,1,5,50,9
	.half	.L938-.L937
	.byte	1,5,37,7,9
	.half	.L939-.L938
	.byte	3,1,1,5,54,9
	.half	.L940-.L939
	.byte	1,5,77,7,9
	.half	.L941-.L940
	.byte	3,3,1,9
	.half	.L942-.L941
	.byte	3,1,1,5,72,9
	.half	.L51-.L942
	.byte	3,5,1,5,57,9
	.half	.L943-.L51
	.byte	1,5,86,9
	.half	.L944-.L943
	.byte	3,4,1,5,100,9
	.half	.L945-.L944
	.byte	1,5,17,9
	.half	.L45-.L945
	.byte	3,4,1,5,80,9
	.half	.L24-.L45
	.byte	3,9,1,5,35,9
	.half	.L528-.L24
	.byte	1,5,24,9
	.half	.L946-.L528
	.byte	3,6,1,5,21,9
	.half	.L947-.L946
	.byte	1,5,52,7,9
	.half	.L948-.L947
	.byte	3,3,1,5,38,9
	.half	.L56-.L948
	.byte	3,4,1,5,56,9
	.half	.L949-.L56
	.byte	1,5,21,9
	.half	.L950-.L949
	.byte	1,5,33,7,9
	.half	.L951-.L950
	.byte	3,3,1,5,55,9
	.half	.L952-.L951
	.byte	1,5,66,9
	.half	.L57-.L952
	.byte	3,7,1,5,41,9
	.half	.L953-.L57
	.byte	1,5,65,9
	.half	.L954-.L953
	.byte	1,5,43,9
	.half	.L529-.L954
	.byte	3,2,1,5,25,9
	.half	.L531-.L529
	.byte	3,4,1,5,46,7,9
	.half	.L60-.L531
	.byte	3,5,1,5,57,9
	.half	.L955-.L60
	.byte	3,3,1,5,37,9
	.half	.L956-.L955
	.byte	1,5,57,9
	.half	.L957-.L956
	.byte	1,5,72,9
	.half	.L958-.L957
	.byte	1,5,36,9
	.half	.L959-.L958
	.byte	1,5,85,7,9
	.half	.L960-.L959
	.byte	3,1,1,5,55,7,9
	.half	.L61-.L960
	.byte	3,3,1,5,88,9
	.half	.L961-.L61
	.byte	3,3,1,5,51,9
	.half	.L962-.L961
	.byte	1,5,84,9
	.half	.L963-.L962
	.byte	3,3,1,5,67,9
	.half	.L964-.L963
	.byte	1,5,83,9
	.half	.L965-.L964
	.byte	1,5,98,9
	.half	.L966-.L965
	.byte	1,5,65,9
	.half	.L967-.L966
	.byte	1,5,56,9
	.half	.L968-.L967
	.byte	3,3,1,5,54,9
	.half	.L969-.L968
	.byte	1,9
	.half	.L970-.L969
	.byte	3,3,1,5,52,9
	.half	.L971-.L970
	.byte	1,5,35,9
	.half	.L62-.L971
	.byte	3,6,1,5,77,7,9
	.half	.L972-.L62
	.byte	1,5,25,7,9
	.half	.L59-.L972
	.byte	3,4,1,5,29,7,9
	.half	.L973-.L59
	.byte	3,4,1,5,37,9
	.half	.L530-.L973
	.byte	3,3,1,5,17,9
	.half	.L58-.L530
	.byte	3,4,1,5,48,9
	.half	.L21-.L58
	.byte	3,7,1,5,29,9
	.half	.L532-.L21
	.byte	3,3,1,5,17,9
	.half	.L974-.L532
	.byte	3,1,1,5,51,9
	.half	.L25-.L974
	.byte	3,9,1,5,29,9
	.half	.L534-.L25
	.byte	3,3,1,5,17,9
	.half	.L975-.L534
	.byte	3,2,1,5,9,9
	.half	.L26-.L975
	.byte	3,3,1,5,40,9
	.half	.L4-.L26
	.byte	3,8,1,5,21,9
	.half	.L536-.L4
	.byte	3,3,1,5,9,9
	.half	.L976-.L536
	.byte	3,2,1,5,5,9
	.half	.L68-.L976
	.byte	3,5,1,5,50,7,9
	.half	.L977-.L68
	.byte	3,3,1,5,48,9
	.half	.L978-.L977
	.byte	1,5,9,9
	.half	.L979-.L978
	.byte	3,3,1,5,25,9
	.half	.L980-.L979
	.byte	1,5,23,9
	.half	.L981-.L980
	.byte	1,5,9,9
	.half	.L982-.L981
	.byte	3,3,1,5,26,9
	.half	.L983-.L982
	.byte	1,5,24,9
	.half	.L984-.L983
	.byte	1,5,5,9
	.half	.L70-.L984
	.byte	3,3,1,5,1,9
	.half	.L71-.L70
	.byte	3,1,1,7,9
	.half	.L305-.L71
	.byte	0,1,1
.L813:
	.sdecl	'.debug_ranges',debug,cluster('Fee_LLSearchSpecifiedBlkHeader')
	.sect	'.debug_ranges'
.L304:
	.word	-1,.L261,0,.L305-.L261,0,0
	.sdecl	'.debug_info',debug,cluster('Fee_LLGetSecStartAddress')
	.sect	'.debug_info'
.L306:
	.word	250
	.half	3
	.word	.L307
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L309,.L308
	.byte	2
	.word	.L292
	.byte	3
	.byte	'Fee_LLGetSecStartAddress',0,1,235,14,24
	.word	.L384
	.byte	1,1,1
	.word	.L265,.L419,.L264
	.byte	4
	.byte	'xPhySectorIdx_u8',0,1,235,14,71
	.word	.L380,.L420
	.byte	5
	.word	.L265,.L419
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fee_LLGetSecStartAddress')
	.sect	'.debug_abbrev'
.L307:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fee_LLGetSecStartAddress')
	.sect	'.debug_line'
.L308:
	.word	.L986-.L985
.L985:
	.half	3
	.word	.L988-.L987
.L987:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c',0,0,0,0,0
.L988:
	.byte	5,29,7,0,5,2
	.word	.L265
	.byte	3,237,14,1,5,12,9
	.half	.L565-.L265
	.byte	1,5,28,9
	.half	.L989-.L565
	.byte	1,5,46,9
	.half	.L990-.L989
	.byte	1,5,5,9
	.half	.L991-.L990
	.byte	1,5,1,9
	.half	.L133-.L991
	.byte	3,1,1,7,9
	.half	.L310-.L133
	.byte	0,1,1
.L986:
	.sdecl	'.debug_ranges',debug,cluster('Fee_LLGetSecStartAddress')
	.sect	'.debug_ranges'
.L309:
	.word	-1,.L265,0,.L310-.L265,0,0
	.sdecl	'.debug_info',debug,cluster('Fee_LLGetSecEndAddress')
	.sect	'.debug_info'
.L311:
	.word	248
	.half	3
	.word	.L312
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L314,.L313
	.byte	2
	.word	.L292
	.byte	3
	.byte	'Fee_LLGetSecEndAddress',0,1,128,15,24
	.word	.L384
	.byte	1,1,1
	.word	.L267,.L421,.L266
	.byte	4
	.byte	'xPhySectorIdx_u8',0,1,128,15,69
	.word	.L380,.L422
	.byte	5
	.word	.L267,.L421
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fee_LLGetSecEndAddress')
	.sect	'.debug_abbrev'
.L312:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fee_LLGetSecEndAddress')
	.sect	'.debug_line'
.L313:
	.word	.L993-.L992
.L992:
	.half	3
	.word	.L995-.L994
.L994:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c',0,0,0,0,0
.L995:
	.byte	5,29,7,0,5,2
	.word	.L267
	.byte	3,130,15,1,5,12,9
	.half	.L566-.L267
	.byte	1,5,28,9
	.half	.L996-.L566
	.byte	1,5,46,9
	.half	.L997-.L996
	.byte	1,5,5,9
	.half	.L998-.L997
	.byte	1,5,1,9
	.half	.L134-.L998
	.byte	3,1,1,7,9
	.half	.L315-.L134
	.byte	0,1,1
.L993:
	.sdecl	'.debug_ranges',debug,cluster('Fee_LLGetSecEndAddress')
	.sect	'.debug_ranges'
.L314:
	.word	-1,.L267,0,.L315-.L267,0,0
	.sdecl	'.debug_info',debug,cluster('Fee_SearchLastBlkHeader')
	.sect	'.debug_info'
.L316:
	.word	317
	.half	3
	.word	.L317
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L319,.L318
	.byte	2
	.word	.L292
	.byte	3
	.byte	'Fee_SearchLastBlkHeader',0,1,164,21,34
	.word	.L376
	.byte	1,1,1
	.word	.L287,.L423,.L286
	.byte	4
	.byte	'Fee_GlobInfoLastRdHeader_ptr',0,1,164,21,120
	.word	.L378,.L424
	.byte	5
	.word	.L287,.L423
	.byte	6
	.byte	'xCurrBlkHeader_st',0,1,166,21,23
	.word	.L387,.L425
	.byte	6
	.byte	'xRetVal_en',0,1,167,21,22
	.word	.L376,.L426
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fee_SearchLastBlkHeader')
	.sect	'.debug_abbrev'
.L317:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fee_SearchLastBlkHeader')
	.sect	'.debug_line'
.L318:
	.word	.L1000-.L999
.L999:
	.half	3
	.word	.L1002-.L1001
.L1001:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c',0,0,0,0,0
.L1002:
	.byte	5,34,7,0,5,2
	.word	.L287
	.byte	3,163,21,1,9
	.half	.L628-.L287
	.byte	3,3,1,5,17,9
	.half	.L629-.L628
	.byte	3,6,1,5,33,9
	.half	.L1003-.L629
	.byte	1,5,18,9
	.half	.L1004-.L1003
	.byte	3,3,1,9
	.half	.L1005-.L1004
	.byte	3,35,1,9
	.half	.L1006-.L1005
	.byte	3,20,1,9
	.half	.L1007-.L1006
	.byte	3,16,1,9
	.half	.L1008-.L1007
	.byte	3,23,1,5,67,9
	.half	.L226-.L1008
	.byte	3,165,127,1,5,65,9
	.half	.L1009-.L226
	.byte	1,5,67,9
	.half	.L1010-.L1009
	.byte	3,1,1,5,65,9
	.half	.L1011-.L1010
	.byte	1,5,67,9
	.half	.L1012-.L1011
	.byte	3,1,1,5,65,9
	.half	.L1013-.L1012
	.byte	1,5,67,9
	.half	.L1014-.L1013
	.byte	3,1,1,5,65,9
	.half	.L1015-.L1014
	.byte	1,5,67,9
	.half	.L1016-.L1015
	.byte	3,1,1,5,65,9
	.half	.L1017-.L1016
	.byte	1,5,17,9
	.half	.L1018-.L1017
	.byte	3,3,1,5,38,9
	.half	.L1019-.L1018
	.byte	1,5,36,9
	.half	.L1020-.L1019
	.byte	1,5,82,9
	.half	.L1021-.L1020
	.byte	3,4,1,5,64,9
	.half	.L1022-.L1021
	.byte	1,5,48,9
	.half	.L1023-.L1022
	.byte	3,3,1,5,17,9
	.half	.L1024-.L1023
	.byte	1,5,49,7,9
	.half	.L1025-.L1024
	.byte	3,3,1,5,57,9
	.half	.L1026-.L1025
	.byte	3,3,1,5,55,9
	.half	.L1027-.L1026
	.byte	1,5,97,9
	.half	.L1028-.L1027
	.byte	3,125,1,5,32,9
	.half	.L232-.L1028
	.byte	3,8,1,5,21,9
	.half	.L1029-.L232
	.byte	3,1,1,5,20,9
	.half	.L227-.L1029
	.byte	3,9,1,5,17,9
	.half	.L1030-.L227
	.byte	1,5,57,7,9
	.half	.L1031-.L1030
	.byte	3,5,1,5,55,9
	.half	.L1032-.L1031
	.byte	1,5,80,9
	.half	.L1033-.L1032
	.byte	1,5,32,9
	.half	.L235-.L1033
	.byte	3,6,1,5,13,9
	.half	.L236-.L235
	.byte	3,3,1,5,17,9
	.half	.L228-.L236
	.byte	3,9,1,5,38,9
	.half	.L1034-.L228
	.byte	3,4,1,5,13,9
	.half	.L1035-.L1034
	.byte	3,3,1,5,41,9
	.half	.L229-.L1035
	.byte	3,6,1,5,66,9
	.half	.L1036-.L229
	.byte	1,5,92,9
	.half	.L1037-.L1036
	.byte	1,5,20,9
	.half	.L1038-.L1037
	.byte	3,3,1,5,17,9
	.half	.L1039-.L1038
	.byte	1,5,39,7,9
	.half	.L1040-.L1039
	.byte	3,3,1,5,57,9
	.half	.L1041-.L1040
	.byte	3,3,1,5,55,9
	.half	.L1042-.L1041
	.byte	1,5,41,9
	.half	.L1043-.L1042
	.byte	3,125,1,5,32,9
	.half	.L239-.L1043
	.byte	3,8,1,5,13,9
	.half	.L240-.L239
	.byte	3,3,1,5,47,9
	.half	.L230-.L240
	.byte	3,10,1,5,67,9
	.half	.L1044-.L230
	.byte	1,5,87,9
	.half	.L1045-.L1044
	.byte	1,5,80,9
	.half	.L1046-.L1045
	.byte	3,3,1,5,61,9
	.half	.L1047-.L1046
	.byte	1,5,80,9
	.half	.L1048-.L1047
	.byte	3,1,1,5,61,9
	.half	.L1049-.L1048
	.byte	1,5,28,9
	.half	.L1050-.L1049
	.byte	3,3,1,5,13,9
	.half	.L1051-.L1050
	.byte	3,2,1,5,28,9
	.half	.L231-.L1051
	.byte	3,6,1,5,53,9
	.half	.L1052-.L231
	.byte	3,3,1,5,51,9
	.half	.L1053-.L1052
	.byte	1,5,13,9
	.half	.L1054-.L1053
	.byte	3,2,1,5,12,9
	.half	.L234-.L1054
	.byte	3,3,1,5,11,9
	.half	.L1055-.L234
	.byte	1,5,61,7,9
	.half	.L1056-.L1055
	.byte	1,5,5,7,9
	.half	.L244-.L1056
	.byte	3,3,1,5,45,7,9
	.half	.L1057-.L244
	.byte	3,3,1,5,43,9
	.half	.L1058-.L1057
	.byte	1,5,5,9
	.half	.L245-.L1058
	.byte	3,4,1,5,1,9
	.half	.L246-.L245
	.byte	3,1,1,7,9
	.half	.L320-.L246
	.byte	0,1,1
.L1000:
	.sdecl	'.debug_ranges',debug,cluster('Fee_SearchLastBlkHeader')
	.sect	'.debug_ranges'
.L319:
	.word	-1,.L287,0,.L320-.L287,0,0
	.sdecl	'.debug_info',debug,cluster('Fee_SearchHighestCacheEntry')
	.sect	'.debug_info'
.L321:
	.word	384
	.half	3
	.word	.L322
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L324,.L323
	.byte	2
	.word	.L292
	.byte	3
	.byte	'Fee_SearchHighestCacheEntry',0,1,207,22,24
	.word	.L384
	.byte	1,1,1
	.word	.L289,.L427,.L288
	.byte	4
	.byte	'UpperBoundary_u32',0,1,207,22,72
	.word	.L384,.L428
	.byte	4
	.byte	'SectIdx_u8',0,1,207,22,111
	.word	.L380,.L429
	.byte	5
	.word	.L289,.L427
	.byte	6
	.byte	'xAddress_u32',0,1,209,22,12
	.word	.L384,.L430
	.byte	6
	.byte	'i_u32',0,1,210,22,12
	.word	.L384,.L431
	.byte	6
	.byte	'xSectStartAdr_u32',0,1,211,22,12
	.word	.L384,.L432
	.byte	6
	.byte	'xSectEndAdr_u32',0,1,212,22,12
	.word	.L384,.L433
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fee_SearchHighestCacheEntry')
	.sect	'.debug_abbrev'
.L322:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fee_SearchHighestCacheEntry')
	.sect	'.debug_line'
.L323:
	.word	.L1060-.L1059
.L1059:
	.half	3
	.word	.L1062-.L1061
.L1061:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c',0,0,0,0,0
.L1062:
	.byte	5,33,7,0,5,2
	.word	.L289
	.byte	3,208,22,1,5,53,9
	.half	.L632-.L289
	.byte	3,2,1,5,36,9
	.half	.L631-.L632
	.byte	1,5,52,9
	.half	.L1063-.L631
	.byte	1,5,64,9
	.half	.L1064-.L1063
	.byte	1,5,66,9
	.half	.L633-.L1064
	.byte	3,1,1,5,14,9
	.half	.L634-.L633
	.byte	3,3,1,5,38,9
	.half	.L635-.L634
	.byte	1,5,13,9
	.half	.L248-.L635
	.byte	3,3,1,5,27,9
	.half	.L1065-.L248
	.byte	1,5,12,9
	.half	.L1066-.L1065
	.byte	1,5,36,7,9
	.half	.L1067-.L1066
	.byte	3,1,1,5,38,7,9
	.half	.L1068-.L1067
	.byte	3,1,1,5,35,9
	.half	.L1069-.L1068
	.byte	1,5,38,7,9
	.half	.L1070-.L1069
	.byte	3,1,1,5,35,9
	.half	.L1071-.L1070
	.byte	1,7,9
	.half	.L1072-.L1071
	.byte	3,1,1,7,9
	.half	.L1073-.L1072
	.byte	3,1,1,5,26,9
	.half	.L1074-.L1073
	.byte	3,3,1,5,44,9
	.half	.L249-.L1074
	.byte	3,117,1,5,38,9
	.half	.L247-.L249
	.byte	1,5,22,7,9
	.half	.L1075-.L247
	.byte	3,19,1,5,5,9
	.half	.L255-.L1075
	.byte	3,3,1,5,1,9
	.half	.L256-.L255
	.byte	3,1,1,7,9
	.half	.L325-.L256
	.byte	0,1,1
.L1060:
	.sdecl	'.debug_ranges',debug,cluster('Fee_SearchHighestCacheEntry')
	.sect	'.debug_ranges'
.L324:
	.word	-1,.L289,0,.L325-.L289,0,0
	.sdecl	'.debug_info',debug,cluster('Fee_InvalidateCacheByAddress')
	.sect	'.debug_info'
.L326:
	.word	266
	.half	3
	.word	.L327
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L329,.L328
	.byte	2
	.word	.L292
	.byte	3
	.byte	'Fee_InvalidateCacheByAddress',0,1,240,22,22,1,1,1
	.word	.L291,.L434,.L290
	.byte	4
	.byte	'xAddress_u32',0,1,240,22,71
	.word	.L384,.L435
	.byte	5
	.word	.L291,.L434
	.byte	6
	.byte	'i_u32',0,1,242,22,12
	.word	.L384,.L436
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fee_InvalidateCacheByAddress')
	.sect	'.debug_abbrev'
.L327:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fee_InvalidateCacheByAddress')
	.sect	'.debug_line'
.L328:
	.word	.L1077-.L1076
.L1076:
	.half	3
	.word	.L1079-.L1078
.L1078:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c',0,0,0,0,0
.L1079:
	.byte	5,14,7,0,5,2
	.word	.L291
	.byte	3,244,22,1,5,38,9
	.half	.L636-.L291
	.byte	1,5,12,9
	.half	.L258-.L636
	.byte	3,3,1,5,26,9
	.half	.L1080-.L258
	.byte	1,5,9,9
	.half	.L1081-.L1080
	.byte	1,5,37,7,9
	.half	.L1082-.L1081
	.byte	3,2,1,5,35,9
	.half	.L1083-.L1082
	.byte	1,5,44,9
	.half	.L259-.L1083
	.byte	3,123,1,5,38,9
	.half	.L257-.L259
	.byte	1,5,1,7,9
	.half	.L1084-.L257
	.byte	3,8,1,7,9
	.half	.L330-.L1084
	.byte	0,1,1
.L1077:
	.sdecl	'.debug_ranges',debug,cluster('Fee_InvalidateCacheByAddress')
	.sect	'.debug_ranges'
.L329:
	.word	-1,.L291,0,.L330-.L291,0,0
	.sdecl	'.debug_info',debug,cluster('Fee_LLGetAddressFromCache')
	.sect	'.debug_info'
.L331:
	.word	295
	.half	3
	.word	.L332
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L334,.L333
	.byte	2
	.word	.L292
	.byte	3
	.byte	'Fee_LLGetAddressFromCache',0,1,153,15,24
	.word	.L384
	.byte	1,1,1
	.word	.L269,.L437,.L268
	.byte	4
	.byte	'FeeIdx_u16',0,1,153,15,73
	.word	.L391,.L438
	.byte	5
	.word	.L269,.L437
	.byte	6
	.byte	'xCacheIdx_u16',0,1,155,15,28
	.word	.L391,.L439
	.byte	6
	.byte	'addr_u32',0,1,156,15,28
	.word	.L384,.L440
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fee_LLGetAddressFromCache')
	.sect	'.debug_abbrev'
.L332:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fee_LLGetAddressFromCache')
	.sect	'.debug_line'
.L333:
	.word	.L1086-.L1085
.L1085:
	.half	3
	.word	.L1088-.L1087
.L1087:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c',0,0,0,0,0
.L1088:
	.byte	5,24,7,0,5,2
	.word	.L269
	.byte	3,152,15,1,5,39,9
	.half	.L567-.L269
	.byte	3,3,1,5,52,9
	.half	.L1089-.L567
	.byte	3,3,1,5,5,9
	.half	.L568-.L1089
	.byte	1,5,35,7,9
	.half	.L1090-.L568
	.byte	3,3,1,5,20,9
	.half	.L570-.L1090
	.byte	1,5,34,9
	.half	.L1091-.L570
	.byte	1,9
	.half	.L135-.L1091
	.byte	3,4,1,5,20,9
	.half	.L572-.L135
	.byte	3,3,1,5,5,9
	.half	.L136-.L572
	.byte	3,4,1,5,1,9
	.half	.L137-.L136
	.byte	3,1,1,7,9
	.half	.L335-.L137
	.byte	0,1,1
.L1086:
	.sdecl	'.debug_ranges',debug,cluster('Fee_LLGetAddressFromCache')
	.sect	'.debug_ranges'
.L334:
	.word	-1,.L269,0,.L335-.L269,0,0
	.sdecl	'.debug_info',debug,cluster('Fee_LLCheckAddressInCache')
	.sect	'.debug_info'
.L336:
	.word	396
	.half	3
	.word	.L337
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L339,.L338
	.byte	2
	.word	.L292
	.byte	3
	.byte	'Fee_LLCheckAddressInCache',0,1,193,15,25
	.word	.L380
	.byte	1,1,1
	.word	.L271,.L441,.L270
	.byte	4
	.byte	'AdrInSector_u32',0,1,193,15,74
	.word	.L384,.L442
	.byte	5
	.word	.L271,.L441
	.byte	6
	.byte	'xRetVal_b',0,1,195,15,29
	.word	.L380,.L443
	.byte	6
	.byte	'xPhySecIdx_u8',0,1,196,15,29
	.word	.L380,.L444
	.byte	6
	.byte	'xLogSecIdx_u8',0,1,197,15,29
	.word	.L380,.L445
	.byte	5
	.word	.L141,.L142
	.byte	6
	.byte	'secStartAddr_u32',0,1,206,15,20
	.word	.L384,.L446
	.byte	6
	.byte	'secEndAddr_u32',0,1,206,15,39
	.word	.L384,.L447
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fee_LLCheckAddressInCache')
	.sect	'.debug_abbrev'
.L337:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fee_LLCheckAddressInCache')
	.sect	'.debug_line'
.L338:
	.word	.L1093-.L1092
.L1092:
	.half	3
	.word	.L1095-.L1094
.L1094:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c',0,0,0,0,0
.L1095:
	.byte	5,25,7,0,5,2
	.word	.L271
	.byte	3,192,15,1,5,39,9
	.half	.L574-.L271
	.byte	3,2,1,5,28,9
	.half	.L575-.L574
	.byte	3,5,1,5,8,9
	.half	.L1096-.L575
	.byte	1,5,28,7,9
	.half	.L1097-.L1096
	.byte	3,1,1,5,25,9
	.half	.L1098-.L1097
	.byte	1,5,26,7,9
	.half	.L1099-.L1098
	.byte	3,3,1,5,63,9
	.half	.L576-.L1099
	.byte	1,5,57,9
	.half	.L141-.L576
	.byte	3,7,1,5,30,9
	.half	.L579-.L141
	.byte	1,5,55,9
	.half	.L581-.L579
	.byte	3,1,1,5,16,9
	.half	.L580-.L581
	.byte	3,3,1,5,34,7,9
	.half	.L1100-.L580
	.byte	3,1,1,5,90,9
	.half	.L1101-.L1100
	.byte	1,5,37,7,9
	.half	.L1102-.L1101
	.byte	3,3,1,5,61,9
	.half	.L1103-.L1102
	.byte	1,5,45,9
	.half	.L577-.L1103
	.byte	3,3,1,5,25,9
	.half	.L583-.L577
	.byte	1,5,45,9
	.half	.L1104-.L583
	.byte	1,5,60,9
	.half	.L1105-.L1104
	.byte	1,5,24,9
	.half	.L1106-.L1105
	.byte	1,5,73,7,9
	.half	.L1107-.L1106
	.byte	3,1,1,5,35,7,9
	.half	.L144-.L1107
	.byte	3,3,1,5,21,9
	.half	.L145-.L144
	.byte	3,4,1,5,78,9
	.half	.L142-.L145
	.byte	3,102,1,5,44,9
	.half	.L140-.L142
	.byte	1,5,63,9
	.half	.L1108-.L140
	.byte	1,5,5,7,9
	.half	.L146-.L1108
	.byte	3,29,1,5,19,9
	.half	.L138-.L146
	.byte	3,4,1,5,5,9
	.half	.L147-.L138
	.byte	3,4,1,5,1,9
	.half	.L148-.L147
	.byte	3,1,1,7,9
	.half	.L340-.L148
	.byte	0,1,1
.L1093:
	.sdecl	'.debug_ranges',debug,cluster('Fee_LLCheckAddressInCache')
	.sect	'.debug_ranges'
.L339:
	.word	-1,.L271,0,.L340-.L271,0,0
	.sdecl	'.debug_info',debug,cluster('Fee_LLUpdateAddressInCache')
	.sect	'.debug_info'
.L341:
	.word	292
	.half	3
	.word	.L342
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L344,.L343
	.byte	2
	.word	.L292
	.byte	3
	.byte	'Fee_LLUpdateAddressInCache',0,1,221,16,22,1,1,1
	.word	.L279,.L448,.L278
	.byte	4
	.byte	'FeeIdx_u16',0,1,221,16,72
	.word	.L391,.L449
	.byte	4
	.byte	'Addr_u32',0,1,222,16,72
	.word	.L384,.L450
	.byte	5
	.word	.L279,.L448
	.byte	6
	.byte	'xCacheIdx_u16',0,1,224,16,28
	.word	.L391,.L451
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fee_LLUpdateAddressInCache')
	.sect	'.debug_abbrev'
.L342:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fee_LLUpdateAddressInCache')
	.sect	'.debug_line'
.L343:
	.word	.L1110-.L1109
.L1109:
	.half	3
	.word	.L1112-.L1111
.L1111:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c',0,0,0,0,0
.L1112:
	.byte	5,22,7,0,5,2
	.word	.L279
	.byte	3,220,16,1,5,52,9
	.half	.L596-.L279
	.byte	3,6,1,5,5,9
	.half	.L595-.L596
	.byte	1,5,24,7,9
	.half	.L1113-.L595
	.byte	3,3,1,5,9,9
	.half	.L1114-.L1113
	.byte	1,5,23,9
	.half	.L1115-.L1114
	.byte	1,5,39,9
	.half	.L1116-.L1115
	.byte	1,5,1,9
	.half	.L155-.L1116
	.byte	3,2,1,7,9
	.half	.L345-.L155
	.byte	0,1,1
.L1110:
	.sdecl	'.debug_ranges',debug,cluster('Fee_LLUpdateAddressInCache')
	.sect	'.debug_ranges'
.L344:
	.word	-1,.L279,0,.L345-.L279,0,0
	.sdecl	'.debug_info',debug,cluster('Fee_LLUpdateCacheStForSect')
	.sect	'.debug_info'
.L346:
	.word	244
	.half	3
	.word	.L347
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L349,.L348
	.byte	2
	.word	.L292
	.byte	3
	.byte	'Fee_LLUpdateCacheStForSect',0,1,132,16,22,1,1,1
	.word	.L273,.L452,.L272
	.byte	4
	.byte	'PhySecIdx_u8',0,1,132,16,71
	.word	.L380,.L453
	.byte	5
	.word	.L273,.L452
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fee_LLUpdateCacheStForSect')
	.sect	'.debug_abbrev'
.L347:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fee_LLUpdateCacheStForSect')
	.sect	'.debug_line'
.L348:
	.word	.L1118-.L1117
.L1117:
	.half	3
	.word	.L1120-.L1119
.L1119:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c',0,0,0,0,0
.L1120:
	.byte	5,5,7,0,5,2
	.word	.L273
	.byte	3,134,16,1,5,32,9
	.half	.L1121-.L273
	.byte	1,5,49,9
	.half	.L1122-.L1121
	.byte	1,5,47,9
	.half	.L1123-.L1122
	.byte	1,5,1,9
	.half	.L1124-.L1123
	.byte	3,1,1,7,9
	.half	.L350-.L1124
	.byte	0,1,1
.L1118:
	.sdecl	'.debug_ranges',debug,cluster('Fee_LLUpdateCacheStForSect')
	.sect	'.debug_ranges'
.L349:
	.word	-1,.L273,0,.L350-.L273,0,0
	.sdecl	'.debug_info',debug,cluster('Fee_LLEraseCacheStForSect')
	.sect	'.debug_info'
.L351:
	.word	243
	.half	3
	.word	.L352
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L354,.L353
	.byte	2
	.word	.L292
	.byte	3
	.byte	'Fee_LLEraseCacheStForSect',0,1,153,16,22,1,1,1
	.word	.L275,.L454,.L274
	.byte	4
	.byte	'PhySecIdx_u8',0,1,153,16,70
	.word	.L380,.L455
	.byte	5
	.word	.L275,.L454
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fee_LLEraseCacheStForSect')
	.sect	'.debug_abbrev'
.L352:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fee_LLEraseCacheStForSect')
	.sect	'.debug_line'
.L353:
	.word	.L1126-.L1125
.L1125:
	.half	3
	.word	.L1128-.L1127
.L1127:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c',0,0,0,0,0
.L1128:
	.byte	5,5,7,0,5,2
	.word	.L275
	.byte	3,155,16,1,5,32,9
	.half	.L1129-.L275
	.byte	1,5,49,9
	.half	.L1130-.L1129
	.byte	1,5,47,9
	.half	.L1131-.L1130
	.byte	1,5,1,9
	.half	.L1132-.L1131
	.byte	3,1,1,7,9
	.half	.L355-.L1132
	.byte	0,1,1
.L1126:
	.sdecl	'.debug_ranges',debug,cluster('Fee_LLEraseCacheStForSect')
	.sect	'.debug_ranges'
.L354:
	.word	-1,.L275,0,.L355-.L275,0,0
	.sdecl	'.debug_info',debug,cluster('Fee_LLGetCacheUpdateStForSect')
	.sect	'.debug_info'
.L356:
	.word	251
	.half	3
	.word	.L357
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L359,.L358
	.byte	2
	.word	.L292
	.byte	3
	.byte	'Fee_LLGetCacheUpdateStForSect',0,1,255,16,23
	.word	.L380
	.byte	1,1,1
	.word	.L281,.L456,.L280
	.byte	4
	.byte	'PhySecIdx_u8',0,1,255,16,75
	.word	.L380,.L457
	.byte	5
	.word	.L281,.L456
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fee_LLGetCacheUpdateStForSect')
	.sect	'.debug_abbrev'
.L357:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fee_LLGetCacheUpdateStForSect')
	.sect	'.debug_line'
.L358:
	.word	.L1134-.L1133
.L1133:
	.half	3
	.word	.L1136-.L1135
.L1135:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c',0,0,0,0,0
.L1136:
	.byte	5,12,7,0,5,2
	.word	.L281
	.byte	3,129,17,1,5,39,9
	.half	.L1137-.L281
	.byte	1,5,5,9
	.half	.L1138-.L1137
	.byte	1,5,1,9
	.half	.L156-.L1138
	.byte	3,1,1,7,9
	.half	.L360-.L156
	.byte	0,1,1
.L1134:
	.sdecl	'.debug_ranges',debug,cluster('Fee_LLGetCacheUpdateStForSect')
	.sect	'.debug_ranges'
.L359:
	.word	-1,.L281,0,.L360-.L281,0,0
	.sdecl	'.debug_info',debug,cluster('Fee_LLGetCacheUpdateStForAllSect')
	.sect	'.debug_info'
.L361:
	.word	308
	.half	3
	.word	.L362
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L364,.L363
	.byte	2
	.word	.L292
	.byte	3
	.byte	'Fee_LLGetCacheUpdateStForAllSect',0,1,180,16,23
	.word	.L380
	.byte	1,1,1
	.word	.L277,.L458,.L276
	.byte	4
	.word	.L277,.L458
	.byte	5
	.byte	'xFuncRet_u8',0,1,182,16,28
	.word	.L380,.L459
	.byte	5
	.byte	'xLogSecIdx_u8',0,1,183,16,28
	.word	.L380,.L460
	.byte	5
	.byte	'xPhySecIdx_u8',0,1,184,16,28
	.word	.L380,.L461
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fee_LLGetCacheUpdateStForAllSect')
	.sect	'.debug_abbrev'
.L362:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fee_LLGetCacheUpdateStForAllSect')
	.sect	'.debug_line'
.L363:
	.word	.L1140-.L1139
.L1139:
	.half	3
	.word	.L1142-.L1141
.L1141:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c',0,0,0,0,0
.L1142:
	.byte	5,40,7,0,5,2
	.word	.L277
	.byte	3,181,16,1,5,22,9
	.half	.L586-.L277
	.byte	3,5,1,5,59,9
	.half	.L587-.L586
	.byte	1,5,25,9
	.half	.L150-.L587
	.byte	3,3,1,5,49,9
	.half	.L1143-.L150
	.byte	1,5,34,9
	.half	.L589-.L1143
	.byte	3,4,1,5,14,9
	.half	.L590-.L589
	.byte	1,5,34,9
	.half	.L1144-.L590
	.byte	1,5,49,9
	.half	.L1145-.L1144
	.byte	1,5,13,9
	.half	.L1146-.L1145
	.byte	1,5,62,7,9
	.half	.L1147-.L1146
	.byte	3,1,1,5,43,7,9
	.half	.L151-.L1147
	.byte	3,1,1,5,58,9
	.half	.L592-.L151
	.byte	1,5,25,9
	.half	.L1148-.L592
	.byte	3,2,1,5,74,9
	.half	.L152-.L1148
	.byte	3,117,1,5,40,9
	.half	.L149-.L152
	.byte	1,5,59,9
	.half	.L1149-.L149
	.byte	1,5,5,7,9
	.half	.L1150-.L1149
	.byte	3,15,1,5,1,9
	.half	.L154-.L1150
	.byte	3,1,1,7,9
	.half	.L365-.L154
	.byte	0,1,1
.L1140:
	.sdecl	'.debug_ranges',debug,cluster('Fee_LLGetCacheUpdateStForAllSect')
	.sect	'.debug_ranges'
.L364:
	.word	-1,.L277,0,.L365-.L277,0,0
	.sdecl	'.debug_info',debug,cluster('Fee_BuildUpCache')
	.sect	'.debug_info'
.L366:
	.word	933
	.half	3
	.word	.L367
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L369,.L368
	.byte	2
	.word	.L292
	.byte	3
	.byte	'Fee_BuildUpCache',0,1,161,17,34
	.word	.L376
	.byte	1,1,1
	.word	.L283,.L462,.L282
	.byte	4
	.byte	'StartAdr_u32',0,1,161,17,74
	.word	.L384,.L463
	.byte	4
	.byte	'EndAdr_u32',0,1,162,17,74
	.word	.L384,.L464
	.byte	5
	.word	.L283,.L462
	.byte	6
	.byte	'xLogSecIdx_u8',0,1,164,17,11
	.word	.L380,.L465
	.byte	6
	.byte	'xPhySecIdx_u8',0,1,165,17,11
	.word	.L380,.L466
	.byte	6
	.byte	'xCalcCrc_u16',0,1,166,17,12
	.word	.L391,.L467
	.byte	6
	.byte	'xCurrBlkHeader_st',0,1,167,17,23
	.word	.L387,.L468
	.byte	6
	.byte	'xRdAdr_u32',0,1,168,17,12
	.word	.L384,.L469
	.byte	6
	.byte	'xRdAdrEnd_u32',0,1,169,17,12
	.word	.L384,.L470
	.byte	6
	.byte	'xBlockPropIdx_u16',0,1,170,17,12
	.word	.L391,.L471
	.byte	6
	.byte	'xCacheIdx_u16',0,1,171,17,12
	.word	.L391,.L472
	.byte	6
	.byte	'xAdrBlkHeaderTmp_u32',0,1,172,17,12
	.word	.L384,.L473
	.byte	6
	.byte	'xDataBuf_au32',0,1,173,17,12
	.word	.L474,.L475
	.byte	6
	.byte	'xRetVal',0,1,174,17,22
	.word	.L376,.L476
	.byte	6
	.byte	'xActivateLastPgmSearch_u8',0,1,176,17,11
	.word	.L380,.L477
	.byte	6
	.byte	'xLastProgrammedAddress_u32',0,1,177,17,12
	.word	.L384,.L478
	.byte	6
	.byte	'xLastValidHeader_u32',0,1,178,17,12
	.word	.L384,.L479
	.byte	7
	.byte	'xRdAdrContinue_u32',0,1,183,17,19
	.word	.L384
	.byte	5,3
	.word	_999007_xRdAdrContinue_u32
	.byte	7
	.byte	'xRdAdrEndContinue_u32',0,1,184,17,19
	.word	.L384
	.byte	5,3
	.word	_999008_xRdAdrEndContinue_u32
	.byte	8
	.word	.L480,.L481,.L482
	.byte	9
	.word	.L483,.L484
	.byte	9
	.word	.L485,.L486
	.byte	10
	.word	.L487,.L481,.L482
	.byte	0,8
	.word	.L488,.L489,.L190
	.byte	9
	.word	.L490,.L491
	.byte	9
	.word	.L492,.L493
	.byte	11
	.word	.L494,.L489,.L190
	.byte	6
	.byte	'xFuncRet_b',0,2,200,10,30
	.word	.L380,.L495
	.byte	6
	.byte	'xMid_u16',0,2,201,10,29
	.word	.L391,.L496
	.byte	6
	.byte	'xLeft_u16',0,2,202,10,29
	.word	.L391,.L497
	.byte	6
	.byte	'xRight_u16',0,2,203,10,29
	.word	.L391,.L498
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fee_BuildUpCache')
	.sect	'.debug_abbrev'
.L367:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,8,29,1,49,16,17,1
	.byte	18,1,0,0,9,5,0,49,16,2,6,0,0,10,11,0,49,16,17,1,18,1,0,0,11,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fee_BuildUpCache')
	.sect	'.debug_line'
.L368:
	.word	.L1152-.L1151
.L1151:
	.half	3
	.word	.L1154-.L1153
.L1153:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_Prv.h',0,0,0,0,0
.L1154:
	.byte	5,34,7,0,5,2
	.word	.L283
	.byte	3,160,17,1,5,28,9
	.half	.L599-.L283
	.byte	3,10,1,5,26,9
	.half	.L1155-.L599
	.byte	1,5,30,9
	.half	.L1156-.L1155
	.byte	3,3,1,5,37,9
	.half	.L600-.L1156
	.byte	3,2,1,5,39,9
	.half	.L601-.L600
	.byte	3,1,1,5,33,9
	.half	.L602-.L601
	.byte	3,1,1,5,17,9
	.half	.L603-.L602
	.byte	3,12,1,5,33,9
	.half	.L1157-.L603
	.byte	1,5,18,9
	.half	.L1158-.L1157
	.byte	3,3,1,9
	.half	.L1159-.L1158
	.byte	3,197,0,1,5,60,9
	.half	.L158-.L1159
	.byte	3,190,127,1,5,31,9
	.half	.L605-.L158
	.byte	1,5,33,9
	.half	.L606-.L605
	.byte	3,1,1,5,57,9
	.half	.L1160-.L606
	.byte	1,5,38,9
	.half	.L607-.L1160
	.byte	3,3,1,5,74,9
	.half	.L608-.L607
	.byte	1,5,79,9
	.half	.L162-.L608
	.byte	3,3,1,5,62,9
	.half	.L610-.L162
	.byte	1,5,78,9
	.half	.L1161-.L610
	.byte	1,5,25,9
	.half	.L1162-.L1161
	.byte	1,5,39,9
	.half	.L1163-.L1162
	.byte	1,5,93,9
	.half	.L1164-.L1163
	.byte	1,5,24,9
	.half	.L1165-.L1164
	.byte	1,5,93,7,9
	.half	.L1166-.L1165
	.byte	3,1,1,5,59,9
	.half	.L1167-.L1166
	.byte	1,5,25,7,9
	.half	.L1168-.L1167
	.byte	3,3,1,5,93,9
	.half	.L163-.L1168
	.byte	3,121,1,5,74,9
	.half	.L161-.L163
	.byte	1,5,41,7,9
	.half	.L1169-.L161
	.byte	3,12,1,5,21,9
	.half	.L1170-.L1169
	.byte	1,5,41,9
	.half	.L1171-.L1170
	.byte	1,5,56,9
	.half	.L1172-.L1171
	.byte	1,5,20,9
	.half	.L1173-.L1172
	.byte	1,5,69,7,9
	.half	.L1174-.L1173
	.byte	3,1,1,5,62,7,9
	.half	.L165-.L1174
	.byte	3,3,1,5,60,9
	.half	.L1175-.L165
	.byte	1,5,21,9
	.half	.L1176-.L1175
	.byte	3,3,1,5,45,9
	.half	.L1177-.L1176
	.byte	1,9
	.half	.L1178-.L1177
	.byte	3,1,1,5,21,9
	.half	.L1179-.L1178
	.byte	3,1,1,5,47,9
	.half	.L1180-.L1179
	.byte	1,5,45,9
	.half	.L613-.L1180
	.byte	1,5,48,9
	.half	.L1181-.L613
	.byte	3,3,1,5,47,9
	.half	.L615-.L1181
	.byte	3,9,1,5,48,9
	.half	.L1182-.L615
	.byte	3,1,1,5,42,9
	.half	.L1183-.L1182
	.byte	3,1,1,5,60,9
	.half	.L1184-.L1183
	.byte	3,3,1,5,21,9
	.half	.L1185-.L1184
	.byte	1,5,51,7,9
	.half	.L1186-.L1185
	.byte	3,3,1,5,54,9
	.half	.L1187-.L1186
	.byte	1,5,21,9
	.half	.L168-.L1187
	.byte	3,2,1,5,29,9
	.half	.L166-.L168
	.byte	3,10,1,5,21,9
	.half	.L1188-.L166
	.byte	3,2,1,9
	.half	.L159-.L1188
	.byte	3,92,1,9
	.half	.L1189-.L159
	.byte	3,2,1,5,35,9
	.half	.L1190-.L1189
	.byte	3,45,1,5,33,9
	.half	.L1191-.L1190
	.byte	1,5,35,9
	.half	.L1192-.L1191
	.byte	3,1,1,5,33,9
	.half	.L1193-.L1192
	.byte	1,5,84,9
	.half	.L1194-.L1193
	.byte	3,4,1,5,20,9
	.half	.L1195-.L1194
	.byte	1,5,83,9
	.half	.L1196-.L1195
	.byte	1,5,17,9
	.half	.L1197-.L1196
	.byte	1,5,29,7,9
	.half	.L1198-.L1197
	.byte	3,3,1,5,21,9
	.half	.L1199-.L1198
	.byte	3,2,1,5,20,9
	.half	.L171-.L1199
	.byte	3,5,1,5,17,9
	.half	.L1200-.L171
	.byte	1,5,39,7,9
	.half	.L1201-.L1200
	.byte	3,38,1,5,51,9
	.half	.L1202-.L1201
	.byte	1,5,24,9
	.half	.L173-.L1202
	.byte	3,8,1,5,38,9
	.half	.L1203-.L173
	.byte	1,5,21,9
	.half	.L1204-.L1203
	.byte	1,5,53,7,9
	.half	.L1205-.L1204
	.byte	3,3,1,5,68,9
	.half	.L1206-.L1205
	.byte	1,5,89,9
	.half	.L1207-.L1206
	.byte	1,5,28,9
	.half	.L1208-.L1207
	.byte	3,3,1,5,25,9
	.half	.L1209-.L1208
	.byte	1,5,43,7,9
	.half	.L1210-.L1209
	.byte	3,3,1,5,44,9
	.half	.L177-.L1210
	.byte	3,10,1,5,65,9
	.half	.L1211-.L177
	.byte	1,5,99,9
	.half	.L1212-.L1211
	.byte	1,5,81,9
	.half	.L1213-.L1212
	.byte	3,20,1,5,88,9
	.half	.L1214-.L1213
	.byte	1,5,25,9
	.half	.L1215-.L1214
	.byte	1,5,81,7,9
	.half	.L1216-.L1215
	.byte	3,2,1,5,88,9
	.half	.L1217-.L1216
	.byte	1,5,85,9
	.half	.L1218-.L1217
	.byte	1,5,81,7,9
	.half	.L1219-.L1218
	.byte	3,2,1,5,88,9
	.half	.L1220-.L1219
	.byte	1,5,85,9
	.half	.L1221-.L1220
	.byte	1,5,26,7,9
	.half	.L1222-.L1221
	.byte	3,2,1,5,53,9
	.half	.L1223-.L1222
	.byte	1,5,37,9
	.half	.L1224-.L1223
	.byte	1,5,25,7,9
	.half	.L1225-.L1224
	.byte	3,5,1,5,58,7,9
	.half	.L1226-.L1225
	.byte	3,2,1,5,68,9
	.half	.L1227-.L1226
	.byte	1,5,48,9
	.half	.L183-.L1227
	.byte	3,10,1,5,53,9
	.half	.L616-.L183
	.byte	3,3,1,5,66,9
	.half	.L1228-.L616
	.byte	1,5,71,9
	.half	.L1229-.L1228
	.byte	1,5,48,9
	.half	.L1230-.L1229
	.byte	3,3,1,5,82,9
	.half	.L1231-.L1230
	.byte	1,5,103,9
	.half	.L1232-.L1231
	.byte	1,5,53,9
	.half	.L1233-.L1232
	.byte	3,4,1,5,66,9
	.half	.L1234-.L1233
	.byte	1,5,71,9
	.half	.L1235-.L1234
	.byte	1,5,48,9
	.half	.L1236-.L1235
	.byte	3,3,1,5,82,9
	.half	.L1237-.L1236
	.byte	1,5,103,9
	.half	.L1238-.L1237
	.byte	1,5,70,9
	.half	.L1239-.L1238
	.byte	3,6,1,5,25,9
	.half	.L1240-.L1239
	.byte	1,5,72,7,9
	.half	.L1241-.L1240
	.byte	3,4,1,5,92,9
	.half	.L1242-.L1241
	.byte	3,1,1,5,63,9
	.half	.L1243-.L1242
	.byte	3,1,1,9
	.half	.L1244-.L1243
	.byte	3,1,1,4,2,5,75,9
	.half	.L481-.L1244
	.byte	3,140,119,1,5,81,9
	.half	.L1245-.L481
	.byte	1,5,112,9
	.half	.L1246-.L1245
	.byte	1,5,89,9
	.half	.L1247-.L1246
	.byte	1,5,33,9
	.half	.L1248-.L1247
	.byte	1,5,75,9
	.half	.L1249-.L1248
	.byte	3,3,1,5,81,9
	.half	.L1250-.L1249
	.byte	1,5,112,9
	.half	.L1251-.L1250
	.byte	1,5,89,9
	.half	.L1252-.L1251
	.byte	1,5,33,9
	.half	.L1253-.L1252
	.byte	1,4,1,5,66,9
	.half	.L482-.L1253
	.byte	3,248,8,1,5,29,9
	.half	.L1254-.L482
	.byte	1,5,33,7,9
	.half	.L1255-.L1254
	.byte	3,4,1,5,58,7,9
	.half	.L1256-.L1255
	.byte	3,2,1,5,80,9
	.half	.L1257-.L1256
	.byte	1,5,89,9
	.half	.L187-.L1257
	.byte	3,10,1,5,42,9
	.half	.L617-.L187
	.byte	3,1,1,4,2,5,39,9
	.half	.L489-.L617
	.byte	3,147,119,1,5,40,9
	.half	.L618-.L489
	.byte	3,1,1,5,54,9
	.half	.L188-.L618
	.byte	3,6,1,5,69,9
	.half	.L1258-.L188
	.byte	1,5,67,9
	.half	.L1259-.L1258
	.byte	1,5,39,9
	.half	.L1260-.L1259
	.byte	1,5,20,9
	.half	.L1261-.L1260
	.byte	1,5,35,9
	.half	.L619-.L1261
	.byte	3,3,1,5,12,9
	.half	.L1262-.L619
	.byte	1,5,34,9
	.half	.L1263-.L1262
	.byte	1,5,44,9
	.half	.L1264-.L1263
	.byte	1,5,9,9
	.half	.L1265-.L1264
	.byte	1,5,28,7,9
	.half	.L1266-.L1265
	.byte	3,3,1,5,13,9
	.half	.L1267-.L1266
	.byte	3,6,1,5,9,9
	.half	.L189-.L1267
	.byte	3,4,1,5,13,7,9
	.half	.L1268-.L189
	.byte	3,3,1,5,48,7,9
	.half	.L1269-.L1268
	.byte	3,3,1,5,53,9
	.half	.L1270-.L1269
	.byte	1,5,17,9
	.half	.L192-.L1270
	.byte	3,5,1,5,13,9
	.half	.L193-.L192
	.byte	3,125,1,5,43,9
	.half	.L191-.L193
	.byte	3,10,1,5,25,9
	.half	.L622-.L191
	.byte	1,5,35,9
	.half	.L195-.L622
	.byte	3,3,1,5,5,7,9
	.half	.L1271-.L195
	.byte	3,2,1,4,1,5,33,9
	.half	.L190-.L1271
	.byte	3,190,8,1,5,52,7,9
	.half	.L1272-.L190
	.byte	3,4,1,5,37,9
	.half	.L1273-.L1272
	.byte	1,5,51,9
	.half	.L1274-.L1273
	.byte	1,5,67,9
	.half	.L1275-.L1274
	.byte	1,5,25,9
	.half	.L184-.L1275
	.byte	3,94,1,9
	.half	.L178-.L184
	.byte	3,43,1,5,46,7,9
	.half	.L1276-.L178
	.byte	3,3,1,5,29,9
	.half	.L1277-.L1276
	.byte	1,5,62,7,9
	.half	.L1278-.L1277
	.byte	3,3,1,5,72,9
	.half	.L1279-.L1278
	.byte	1,5,56,9
	.half	.L200-.L1279
	.byte	3,7,1,5,67,9
	.half	.L1280-.L200
	.byte	1,5,94,9
	.half	.L1281-.L1280
	.byte	1,5,115,9
	.half	.L1282-.L1281
	.byte	1,5,50,9
	.half	.L1283-.L1282
	.byte	3,2,1,5,33,9
	.half	.L1284-.L1283
	.byte	1,5,66,7,9
	.half	.L1285-.L1284
	.byte	3,3,1,5,76,9
	.half	.L1286-.L1285
	.byte	1,5,29,9
	.half	.L201-.L1286
	.byte	3,118,1,5,53,9
	.half	.L204-.L201
	.byte	3,27,1,5,66,9
	.half	.L1287-.L204
	.byte	1,5,81,9
	.half	.L1288-.L1287
	.byte	1,5,26,9
	.half	.L198-.L1288
	.byte	3,3,1,5,39,9
	.half	.L1289-.L198
	.byte	1,5,53,9
	.half	.L1290-.L1289
	.byte	1,5,17,7,9
	.half	.L1291-.L1290
	.byte	3,5,1,5,64,7,9
	.half	.L1292-.L1291
	.byte	3,2,1,5,62,9
	.half	.L1293-.L1292
	.byte	3,1,1,5,92,9
	.half	.L1294-.L1293
	.byte	3,127,1,5,43,9
	.half	.L206-.L1294
	.byte	3,11,1,5,41,9
	.half	.L1295-.L206
	.byte	1,5,43,9
	.half	.L1296-.L1295
	.byte	3,1,1,5,41,9
	.half	.L1297-.L1296
	.byte	1,5,20,9
	.half	.L1298-.L1297
	.byte	3,6,1,5,17,9
	.half	.L1299-.L1298
	.byte	1,5,29,9
	.half	.L1300-.L1299
	.byte	3,4,1,5,13,9
	.half	.L207-.L1300
	.byte	3,3,1,5,25,9
	.half	.L160-.L207
	.byte	3,6,1,5,13,9
	.half	.L1301-.L160
	.byte	3,2,1,5,12,9
	.half	.L170-.L1301
	.byte	3,3,1,5,11,9
	.half	.L1302-.L170
	.byte	1,5,58,7,9
	.half	.L1303-.L1302
	.byte	1,5,107,7,9
	.half	.L1304-.L1303
	.byte	1,5,86,9
	.half	.L1305-.L1304
	.byte	1,5,107,9
	.half	.L1306-.L1305
	.byte	1,5,105,9
	.half	.L1307-.L1306
	.byte	1,5,5,7,9
	.half	.L210-.L1307
	.byte	3,16,1,5,50,7,9
	.half	.L1308-.L210
	.byte	3,3,1,5,48,9
	.half	.L1309-.L1308
	.byte	1,5,5,9
	.half	.L212-.L1309
	.byte	3,16,1,5,1,9
	.half	.L213-.L212
	.byte	3,1,1,7,9
	.half	.L370-.L213
	.byte	0,1,1
.L1152:
	.sdecl	'.debug_ranges',debug,cluster('Fee_BuildUpCache')
	.sect	'.debug_ranges'
.L369:
	.word	-1,.L283,0,.L370-.L283,0,0
	.sdecl	'.debug_info',debug,cluster('Fee_BuildUpCacheForAllSect')
	.sect	'.debug_info'
.L371:
	.word	305
	.half	3
	.word	.L372
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L374,.L373
	.byte	2
	.word	.L292
	.byte	3
	.byte	'Fee_BuildUpCacheForAllSect',0,1,207,20,34
	.word	.L376
	.byte	1,1,1
	.word	.L285,.L499,.L284
	.byte	4
	.word	.L285,.L499
	.byte	5
	.byte	'xtmpRetVal',0,1,209,20,22
	.word	.L376,.L500
	.byte	5
	.byte	'xRetVal',0,1,210,20,22
	.word	.L376,.L501
	.byte	6
	.byte	'xLogSecIdxForCache_u8',0,1,211,20,18
	.word	.L380
	.byte	5,3
	.word	_999009_xLogSecIdxForCache_u8
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fee_BuildUpCacheForAllSect')
	.sect	'.debug_abbrev'
.L372:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fee_BuildUpCacheForAllSect')
	.sect	'.debug_line'
.L373:
	.word	.L1311-.L1310
.L1310:
	.half	3
	.word	.L1313-.L1312
.L1312:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSearchBlk.c',0,0,0,0,0
.L1313:
	.byte	5,30,7,0,5,2
	.word	.L285
	.byte	3,209,20,1,5,17,9
	.half	.L624-.L285
	.byte	3,7,1,5,33,9
	.half	.L1314-.L624
	.byte	1,5,18,9
	.half	.L1315-.L1314
	.byte	3,3,1,9
	.half	.L1316-.L1315
	.byte	3,12,1,5,17,9
	.half	.L215-.L1316
	.byte	3,119,1,5,41,9
	.half	.L1317-.L215
	.byte	1,5,39,9
	.half	.L1318-.L1317
	.byte	1,5,65,9
	.half	.L1319-.L1318
	.byte	3,3,1,5,63,9
	.half	.L1320-.L1319
	.byte	1,5,17,9
	.half	.L216-.L1320
	.byte	3,125,1,5,85,9
	.half	.L1321-.L216
	.byte	3,13,1,5,84,9
	.half	.L1322-.L1321
	.byte	1,5,64,9
	.half	.L1323-.L1322
	.byte	1,5,84,9
	.half	.L1324-.L1323
	.byte	1,5,107,9
	.half	.L1325-.L1324
	.byte	1,5,47,9
	.half	.L1326-.L1325
	.byte	1,5,63,9
	.half	.L1327-.L1326
	.byte	1,5,122,9
	.half	.L1328-.L1327
	.byte	3,127,1,9
	.half	.L1329-.L1328
	.byte	3,1,1,5,17,9
	.half	.L625-.L1329
	.byte	3,3,1,5,21,7,9
	.half	.L1330-.L625
	.byte	3,3,1,5,42,9
	.half	.L1331-.L1330
	.byte	1,5,24,9
	.half	.L1332-.L1331
	.byte	3,1,1,5,50,9
	.half	.L1333-.L1332
	.byte	1,5,21,9
	.half	.L1334-.L1333
	.byte	1,5,33,9
	.half	.L1335-.L1334
	.byte	3,3,1,5,13,9
	.half	.L218-.L1335
	.byte	3,4,1,5,25,9
	.half	.L217-.L218
	.byte	3,6,1,5,13,9
	.half	.L1336-.L217
	.byte	3,1,1,5,12,9
	.half	.L220-.L1336
	.byte	3,3,1,5,11,9
	.half	.L1337-.L220
	.byte	1,5,58,7,9
	.half	.L1338-.L1337
	.byte	1,5,5,7,9
	.half	.L222-.L1338
	.byte	3,3,1,5,57,7,9
	.half	.L1339-.L222
	.byte	3,3,1,5,55,9
	.half	.L1340-.L1339
	.byte	1,5,5,9
	.half	.L223-.L1340
	.byte	3,3,1,5,1,9
	.half	.L224-.L223
	.byte	3,1,1,7,9
	.half	.L375-.L224
	.byte	0,1,1
.L1311:
	.sdecl	'.debug_ranges',debug,cluster('Fee_BuildUpCacheForAllSect')
	.sect	'.debug_ranges'
.L374:
	.word	-1,.L285,0,.L375-.L285,0,0
	.sdecl	'.debug_loc',debug,cluster('Fee_BuildUpCache')
	.sect	'.debug_loc'
.L484:
	.word	0,0
.L493:
	.word	0,0
.L464:
	.word	-1,.L283,0,.L157-.L283
	.half	1
	.byte	85
	.word	.L599-.L283,.L462-.L283
	.half	1
	.byte	91
	.word	0,0
.L491:
	.word	0,0
.L282:
	.word	-1,.L283,0,.L597-.L283
	.half	2
	.byte	138,0
	.word	.L597-.L283,.L462-.L283
	.half	2
	.byte	138,56
	.word	.L462-.L283,.L462-.L283
	.half	2
	.byte	138,0
	.word	0,0
.L486:
	.word	0,0
.L463:
	.word	-1,.L283,0,.L157-.L283
	.half	1
	.byte	84
	.word	.L598-.L283,.L462-.L283
	.half	2
	.byte	145,120
	.word	.L604-.L283,.L605-.L283
	.half	1
	.byte	84
	.word	.L612-.L283,.L613-.L283
	.half	1
	.byte	95
	.word	0,0
.L477:
	.word	-1,.L283,.L601-.L283,.L462-.L283
	.half	1
	.byte	89
	.word	0,0
.L473:
	.word	-1,.L283,.L616-.L283,.L178-.L283
	.half	1
	.byte	93
	.word	0,0
.L471:
	.word	-1,.L283,.L608-.L283,.L159-.L283
	.half	1
	.byte	94
	.word	.L611-.L283,.L163-.L283
	.half	1
	.byte	84
	.word	0,0
.L472:
	.word	-1,.L283,0,.L462-.L283
	.half	2
	.byte	145,96
	.word	0,0
.L467:
	.word	-1,.L283,.L481-.L283,.L617-.L283
	.half	1
	.byte	82
	.word	0,0
.L468:
	.word	-1,.L283,0,.L462-.L283
	.half	2
	.byte	145,72
	.word	0,0
.L475:
	.word	-1,.L283,0,.L462-.L283
	.half	2
	.byte	145,100
	.word	0,0
.L495:
	.word	0,0
.L478:
	.word	-1,.L283,.L602-.L283,.L462-.L283
	.half	1
	.byte	90
	.word	0,0
.L479:
	.word	-1,.L283,.L603-.L283,.L462-.L283
	.half	1
	.byte	92
	.word	0,0
.L497:
	.word	-1,.L283,.L618-.L283,.L184-.L283
	.half	1
	.byte	83
	.word	0,0
.L465:
	.word	-1,.L283,.L607-.L283,.L159-.L283
	.half	1
	.byte	93
	.word	0,0
.L496:
	.word	-1,.L283,.L619-.L283,.L620-.L283
	.half	1
	.byte	95
	.word	.L189-.L283,.L621-.L283
	.half	1
	.byte	95
	.word	.L193-.L283,.L622-.L283
	.half	1
	.byte	95
	.word	0,0
.L466:
	.word	-1,.L283,.L605-.L283,.L162-.L283
	.half	1
	.byte	82
	.word	.L606-.L283,.L159-.L283
	.half	2
	.byte	145,116
	.word	.L609-.L283,.L610-.L283
	.half	1
	.byte	95
	.word	.L614-.L283,.L615-.L283
	.half	1
	.byte	84
	.word	0,0
.L470:
	.word	-1,.L283,0,.L462-.L283
	.half	2
	.byte	145,92
	.word	0,0
.L469:
	.word	-1,.L283,0,.L462-.L283
	.half	2
	.byte	145,88
	.word	0,0
.L476:
	.word	-1,.L283,.L600-.L283,.L462-.L283
	.half	1
	.byte	88
	.word	.L623-.L283,.L462-.L283
	.half	1
	.byte	82
	.word	0,0
.L498:
	.word	-1,.L283,.L188-.L283,.L184-.L283
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fee_BuildUpCacheForAllSect')
	.sect	'.debug_loc'
.L284:
	.word	-1,.L285,0,.L499-.L285
	.half	2
	.byte	138,0
	.word	0,0
.L501:
	.word	-1,.L285,.L624-.L285,.L499-.L285
	.half	1
	.byte	88
	.word	.L626-.L285,.L499-.L285
	.half	1
	.byte	82
	.word	0,0
.L500:
	.word	-1,.L285,.L625-.L285,.L217-.L285
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fee_InvalidateCacheByAddress')
	.sect	'.debug_loc'
.L290:
	.word	-1,.L291,0,.L434-.L291
	.half	2
	.byte	138,0
	.word	0,0
.L436:
	.word	-1,.L291,.L636-.L291,.L434-.L291
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L435:
	.word	-1,.L291,0,.L434-.L291
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fee_LLCheckAddressInCache')
	.sect	'.debug_loc'
.L442:
	.word	-1,.L271,0,.L141-.L271
	.half	1
	.byte	84
	.word	.L574-.L271,.L441-.L271
	.half	1
	.byte	90
	.word	.L138-.L271,.L147-.L271
	.half	1
	.byte	84
	.word	0,0
.L270:
	.word	-1,.L271,0,.L441-.L271
	.half	2
	.byte	138,0
	.word	0,0
.L447:
	.word	-1,.L271,.L580-.L271,.L140-.L271
	.half	1
	.byte	82
	.word	0,0
.L446:
	.word	-1,.L271,.L579-.L271,.L580-.L271
	.half	1
	.byte	82
	.word	.L581-.L271,.L140-.L271
	.half	1
	.byte	88
	.word	0,0
.L445:
	.word	-1,.L271,.L577-.L271,.L583-.L271
	.half	1
	.byte	95
	.word	0,0
.L444:
	.word	-1,.L271,.L576-.L271,.L577-.L271
	.half	1
	.byte	95
	.word	.L578-.L271,.L579-.L271
	.half	1
	.byte	84
	.word	.L582-.L271,.L580-.L271
	.half	1
	.byte	84
	.word	.L142-.L271,.L584-.L271
	.half	1
	.byte	95
	.word	.L140-.L271,.L146-.L271
	.half	1
	.byte	95
	.word	0,0
.L443:
	.word	-1,.L271,.L575-.L271,.L441-.L271
	.half	1
	.byte	89
	.word	.L585-.L271,.L441-.L271
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fee_LLEraseCacheStForSect')
	.sect	'.debug_loc'
.L274:
	.word	-1,.L275,0,.L454-.L275
	.half	2
	.byte	138,0
	.word	0,0
.L455:
	.word	-1,.L275,0,.L454-.L275
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fee_LLGetAddressFromCache')
	.sect	'.debug_loc'
.L438:
	.word	-1,.L269,0,.L568-.L269
	.half	1
	.byte	84
	.word	0,0
.L268:
	.word	-1,.L269,0,.L567-.L269
	.half	2
	.byte	138,0
	.word	.L567-.L269,.L437-.L269
	.half	2
	.byte	138,8
	.word	.L437-.L269,.L437-.L269
	.half	2
	.byte	138,0
	.word	0,0
.L440:
	.word	-1,.L269,.L569-.L269,.L570-.L269
	.half	1
	.byte	95
	.word	.L135-.L269,.L437-.L269
	.half	1
	.byte	95
	.word	.L571-.L269,.L572-.L269
	.half	1
	.byte	84
	.word	.L573-.L269,.L437-.L269
	.half	1
	.byte	82
	.word	0,0
.L439:
	.word	-1,.L269,0,.L437-.L269
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fee_LLGetCacheUpdateStForAllSect')
	.sect	'.debug_loc'
.L276:
	.word	-1,.L277,0,.L458-.L277
	.half	2
	.byte	138,0
	.word	0,0
.L459:
	.word	-1,.L277,.L586-.L277,.L458-.L277
	.half	1
	.byte	88
	.word	.L593-.L277,.L458-.L277
	.half	1
	.byte	82
	.word	0,0
.L460:
	.word	-1,.L277,.L589-.L277,.L590-.L277
	.half	1
	.byte	95
	.word	0,0
.L461:
	.word	-1,.L277,.L587-.L277,.L588-.L277
	.half	1
	.byte	89
	.word	.L591-.L277,.L592-.L277
	.half	1
	.byte	84
	.word	.L149-.L277,.L458-.L277
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fee_LLGetCacheUpdateStForSect')
	.sect	'.debug_loc'
.L280:
	.word	-1,.L281,0,.L456-.L281
	.half	2
	.byte	138,0
	.word	0,0
.L457:
	.word	-1,.L281,0,.L456-.L281
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fee_LLGetSecEndAddress')
	.sect	'.debug_loc'
.L266:
	.word	-1,.L267,0,.L421-.L267
	.half	2
	.byte	138,0
	.word	0,0
.L422:
	.word	-1,.L267,0,.L566-.L267
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fee_LLGetSecStartAddress')
	.sect	'.debug_loc'
.L264:
	.word	-1,.L265,0,.L419-.L265
	.half	2
	.byte	138,0
	.word	0,0
.L420:
	.word	-1,.L265,0,.L565-.L265
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fee_LLSearchNextBlkHeader')
	.sect	'.debug_loc'
.L399:
	.word	0,0
.L381:
	.word	-1,.L263,0,.L73-.L263
	.half	1
	.byte	84
	.word	.L548-.L263,.L549-.L263
	.half	1
	.byte	88
	.word	.L100-.L263,.L550-.L263
	.half	1
	.byte	88
	.word	.L115-.L263,.L561-.L263
	.half	1
	.byte	88
	.word	.L562-.L263,.L563-.L263
	.half	1
	.byte	88
	.word	0,0
.L382:
	.word	-1,.L263,0,.L73-.L263
	.half	1
	.byte	85
	.word	.L558-.L263,.L559-.L263
	.half	1
	.byte	89
	.word	0,0
.L379:
	.word	-1,.L263,0,.L73-.L263
	.half	1
	.byte	100
	.word	.L540-.L263,.L377-.L263
	.half	2
	.byte	145,124
	.word	.L557-.L263,.L118-.L263
	.half	1
	.byte	111
	.word	0,0
.L262:
	.word	-1,.L263,0,.L539-.L263
	.half	2
	.byte	138,0
	.word	.L539-.L263,.L377-.L263
	.half	2
	.byte	138,24
	.word	.L377-.L263,.L377-.L263
	.half	2
	.byte	138,0
	.word	0,0
.L401:
	.word	0,0
.L392:
	.word	-1,.L263,.L551-.L263,.L105-.L263
	.half	1
	.byte	92
	.word	.L106-.L263,.L552-.L263
	.half	1
	.byte	92
	.word	.L118-.L263,.L560-.L263
	.half	1
	.byte	92
	.word	.L113-.L263,.L121-.L263
	.half	1
	.byte	92
	.word	0,0
.L385:
	.word	-1,.L263,0,.L73-.L263
	.half	1
	.byte	87
	.word	0,0
.L393:
	.word	-1,.L263,.L555-.L263,.L556-.L263
	.half	1
	.byte	82
	.word	0,0
.L388:
	.word	-1,.L263,0,.L377-.L263
	.half	2
	.byte	145,104
	.word	0,0
.L383:
	.word	-1,.L263,0,.L73-.L263
	.half	1
	.byte	86
	.word	.L541-.L263,.L377-.L263
	.half	1
	.byte	90
	.word	0,0
.L394:
	.word	-1,.L263,.L553-.L263,.L554-.L263
	.half	1
	.byte	81
	.word	.L554-.L263,.L79-.L263
	.half	1
	.byte	93
	.word	0,0
.L389:
	.word	-1,.L263,.L543-.L263,.L544-.L263
	.half	1
	.byte	82
	.word	.L545-.L263,.L75-.L263
	.half	1
	.byte	92
	.word	0,0
.L390:
	.word	-1,.L263,.L544-.L263,.L546-.L263
	.half	1
	.byte	82
	.word	.L547-.L263,.L75-.L263
	.half	1
	.byte	93
	.word	0,0
.L386:
	.word	-1,.L263,.L542-.L263,.L377-.L263
	.half	1
	.byte	91
	.word	.L564-.L263,.L377-.L263
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fee_LLSearchSpecifiedBlkHeader')
	.sect	'.debug_loc'
.L406:
	.word	-1,.L261,0,.L503-.L261
	.half	1
	.byte	84
	.word	.L504-.L261,.L405-.L261
	.half	1
	.byte	89
	.word	.L6-.L261,.L513-.L261
	.half	1
	.byte	84
	.word	.L515-.L261,.L510-.L261
	.half	1
	.byte	84
	.word	.L517-.L261,.L518-.L261
	.half	1
	.byte	84
	.word	.L533-.L261,.L532-.L261
	.half	1
	.byte	84
	.word	.L535-.L261,.L534-.L261
	.half	1
	.byte	84
	.word	.L4-.L261,.L536-.L261
	.half	1
	.byte	84
	.word	0,0
.L260:
	.word	-1,.L261,0,.L502-.L261
	.half	2
	.byte	138,0
	.word	.L502-.L261,.L405-.L261
	.half	2
	.byte	138,32
	.word	.L405-.L261,.L405-.L261
	.half	2
	.byte	138,0
	.word	0,0
.L409:
	.word	-1,.L261,0,.L503-.L261
	.half	1
	.byte	101
	.word	.L506-.L261,.L405-.L261
	.half	1
	.byte	109
	.word	.L6-.L261,.L514-.L261
	.half	1
	.byte	101
	.word	.L4-.L261,.L536-.L261
	.half	1
	.byte	101
	.word	0,0
.L408:
	.word	-1,.L261,0,.L503-.L261
	.half	1
	.byte	100
	.word	.L505-.L261,.L405-.L261
	.half	1
	.byte	108
	.word	.L6-.L261,.L514-.L261
	.half	1
	.byte	100
	.word	.L4-.L261,.L536-.L261
	.half	1
	.byte	100
	.word	0,0
.L410:
	.word	-1,.L261,0,.L503-.L261
	.half	1
	.byte	85
	.word	.L507-.L261,.L405-.L261
	.half	1
	.byte	90
	.word	.L6-.L261,.L514-.L261
	.half	1
	.byte	85
	.word	.L4-.L261,.L537-.L261
	.half	1
	.byte	85
	.word	0,0
.L416:
	.word	-1,.L261,.L524-.L261,.L523-.L261
	.half	1
	.byte	81
	.word	.L531-.L261,.L530-.L261
	.half	1
	.byte	81
	.word	0,0
.L418:
	.word	-1,.L261,.L511-.L261,.L512-.L261
	.half	1
	.byte	88
	.word	.L520-.L261,.L18-.L261
	.half	1
	.byte	86
	.word	.L24-.L261,.L26-.L261
	.half	1
	.byte	88
	.word	.L4-.L261,.L68-.L261
	.half	1
	.byte	88
	.word	0,0
.L415:
	.word	-1,.L261,.L522-.L261,.L523-.L261
	.half	5
	.byte	144,32,157,32,0
	.word	.L529-.L261,.L530-.L261
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L411:
	.word	-1,.L261,.L508-.L261,.L405-.L261
	.half	1
	.byte	91
	.word	.L538-.L261,.L405-.L261
	.half	1
	.byte	82
	.word	0,0
.L417:
	.word	-1,.L261,.L509-.L261,.L510-.L261
	.half	1
	.byte	93
	.word	.L510-.L261,.L8-.L261
	.half	1
	.byte	82
	.word	.L8-.L261,.L516-.L261
	.half	1
	.byte	93
	.word	.L516-.L261,.L526-.L261
	.half	1
	.byte	82
	.word	.L512-.L261,.L45-.L261
	.half	1
	.byte	88
	.word	.L49-.L261,.L527-.L261
	.half	1
	.byte	82
	.word	.L24-.L261,.L26-.L261
	.half	1
	.byte	93
	.word	.L4-.L261,.L68-.L261
	.half	1
	.byte	93
	.word	0,0
.L414:
	.word	-1,.L261,0,.L405-.L261
	.half	2
	.byte	145,96
	.word	0,0
.L412:
	.word	-1,.L261,.L519-.L261,.L13-.L261
	.half	1
	.byte	82
	.word	.L18-.L261,.L35-.L261
	.half	1
	.byte	82
	.word	.L33-.L261,.L521-.L261
	.half	1
	.byte	82
	.word	.L27-.L261,.L525-.L261
	.half	1
	.byte	82
	.word	.L46-.L261,.L516-.L261
	.half	1
	.byte	82
	.word	.L24-.L261,.L528-.L261
	.half	1
	.byte	82
	.word	.L21-.L261,.L532-.L261
	.half	1
	.byte	82
	.word	.L25-.L261,.L534-.L261
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fee_LLUpdateAddressInCache')
	.sect	'.debug_loc'
.L450:
	.word	-1,.L279,0,.L595-.L279
	.half	1
	.byte	85
	.word	.L596-.L279,.L448-.L279
	.half	1
	.byte	88
	.word	0,0
.L449:
	.word	-1,.L279,0,.L595-.L279
	.half	1
	.byte	84
	.word	0,0
.L278:
	.word	-1,.L279,0,.L594-.L279
	.half	2
	.byte	138,0
	.word	.L594-.L279,.L448-.L279
	.half	2
	.byte	138,8
	.word	.L448-.L279,.L448-.L279
	.half	2
	.byte	138,0
	.word	0,0
.L451:
	.word	-1,.L279,0,.L448-.L279
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fee_LLUpdateCacheStForSect')
	.sect	'.debug_loc'
.L272:
	.word	-1,.L273,0,.L452-.L273
	.half	2
	.byte	138,0
	.word	0,0
.L453:
	.word	-1,.L273,0,.L452-.L273
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fee_SearchHighestCacheEntry')
	.sect	'.debug_loc'
.L288:
	.word	-1,.L289,0,.L427-.L289
	.half	2
	.byte	138,0
	.word	0,0
.L429:
	.word	-1,.L289,0,.L631-.L289
	.half	1
	.byte	85
	.word	0,0
.L428:
	.word	-1,.L289,0,.L427-.L289
	.half	1
	.byte	84
	.word	0,0
.L431:
	.word	-1,.L289,.L635-.L289,.L427-.L289
	.half	1
	.byte	83
	.word	0,0
.L430:
	.word	-1,.L289,.L632-.L289,.L427-.L289
	.half	1
	.byte	82
	.word	0,0
.L433:
	.word	-1,.L289,.L634-.L289,.L427-.L289
	.half	1
	.byte	81
	.word	0,0
.L432:
	.word	-1,.L289,.L633-.L289,.L427-.L289
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fee_SearchLastBlkHeader')
	.sect	'.debug_loc'
.L424:
	.word	-1,.L287,0,.L225-.L287
	.half	1
	.byte	100
	.word	.L628-.L287,.L423-.L287
	.half	1
	.byte	111
	.word	0,0
.L286:
	.word	-1,.L287,0,.L627-.L287
	.half	2
	.byte	138,0
	.word	.L627-.L287,.L423-.L287
	.half	2
	.byte	138,16
	.word	.L423-.L287,.L423-.L287
	.half	2
	.byte	138,0
	.word	0,0
.L425:
	.word	-1,.L287,0,.L423-.L287
	.half	2
	.byte	145,112
	.word	0,0
.L426:
	.word	-1,.L287,.L629-.L287,.L423-.L287
	.half	1
	.byte	88
	.word	.L630-.L287,.L423-.L287
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L1341:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Fee_LLSearchSpecifiedBlkHeader')
	.sect	'.debug_frame'
	.word	36
	.word	.L1341,.L261,.L405-.L261
	.byte	4
	.word	(.L502-.L261)/2
	.byte	19,32,22,26,3,19,138,32,4
	.word	(.L405-.L502)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Fee_LLSearchNextBlkHeader')
	.sect	'.debug_frame'
	.word	36
	.word	.L1341,.L263,.L377-.L263
	.byte	4
	.word	(.L539-.L263)/2
	.byte	19,24,22,26,3,19,138,24,4
	.word	(.L377-.L539)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Fee_LLGetSecStartAddress')
	.sect	'.debug_frame'
	.word	24
	.word	.L1341,.L265,.L419-.L265
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Fee_LLGetSecEndAddress')
	.sect	'.debug_frame'
	.word	24
	.word	.L1341,.L267,.L421-.L267
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Fee_LLGetAddressFromCache')
	.sect	'.debug_frame'
	.word	36
	.word	.L1341,.L269,.L437-.L269
	.byte	4
	.word	(.L567-.L269)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L437-.L567)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Fee_LLCheckAddressInCache')
	.sect	'.debug_frame'
	.word	12
	.word	.L1341,.L271,.L441-.L271
	.sdecl	'.debug_frame',debug,cluster('Fee_LLUpdateCacheStForSect')
	.sect	'.debug_frame'
	.word	24
	.word	.L1341,.L273,.L452-.L273
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Fee_LLEraseCacheStForSect')
	.sect	'.debug_frame'
	.word	24
	.word	.L1341,.L275,.L454-.L275
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Fee_LLGetCacheUpdateStForAllSect')
	.sect	'.debug_frame'
	.word	12
	.word	.L1341,.L277,.L458-.L277
	.sdecl	'.debug_frame',debug,cluster('Fee_LLUpdateAddressInCache')
	.sect	'.debug_frame'
	.word	36
	.word	.L1341,.L279,.L448-.L279
	.byte	4
	.word	(.L594-.L279)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L448-.L594)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Fee_LLGetCacheUpdateStForSect')
	.sect	'.debug_frame'
	.word	24
	.word	.L1341,.L281,.L456-.L281
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Fee_BuildUpCache')
	.sect	'.debug_frame'
	.word	36
	.word	.L1341,.L283,.L462-.L283
	.byte	4
	.word	(.L597-.L283)/2
	.byte	19,56,22,26,3,19,138,56,4
	.word	(.L462-.L597)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Fee_BuildUpCacheForAllSect')
	.sect	'.debug_frame'
	.word	12
	.word	.L1341,.L285,.L499-.L285
	.sdecl	'.debug_frame',debug,cluster('Fee_SearchLastBlkHeader')
	.sect	'.debug_frame'
	.word	36
	.word	.L1341,.L287,.L423-.L287
	.byte	4
	.word	(.L627-.L287)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L423-.L627)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Fee_SearchHighestCacheEntry')
	.sect	'.debug_frame'
	.word	24
	.word	.L1341,.L289,.L427-.L289
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Fee_InvalidateCacheByAddress')
	.sect	'.debug_frame'
	.word	24
	.word	.L1341,.L291,.L434-.L291
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2942  #define FEE_STOP_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2943  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2944  /* FEE_PRESENT == 1 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2945  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2946  /* 1 == FEE_PRV_CFG_SELECTED_FS */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2947  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2948  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2949  /*<BASDKey>
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2950  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2951  * $History__:$
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2952  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2953  </BASDKey>*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSearchBlk.c	  2954  

	; Module end
