	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc15316a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\rba_FeeFs1_LlSectorHandling.src BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSectorHandling.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSectorHandling.c'

	
$TC16X
	
	.sdecl	'.text.rba_FeeFs1_LlSectorHandling.Fee_LLCheckReorganizationNeed',code,cluster('Fee_LLCheckReorganizationNeed')
	.sect	'.text.rba_FeeFs1_LlSectorHandling.Fee_LLCheckReorganizationNeed'
	.align	2
	
	.global	Fee_LLCheckReorganizationNeed

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	     1  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	     2  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	     3  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	     4  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	     5   **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	     6   * \moduledescription
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	     7   *           AUTOSAR FEE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	     8   *           According to Document Version 3.0.0, Part of Release 4.0, Revision 2
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	     9   * \scope    INTERN
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    10   **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    11   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    12  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    13  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    14  /*
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    15   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    16   * Includes
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    17   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    18   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    19  #include "Fee.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    20  #include "rba_FeeFs1_Prv.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    21  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    22  #if (FEE_PRV_DEBUGGING != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    23  #include "Mcu.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    24  /* FEE_PRV_DEBUGGING */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    25  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    26  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    27  #if(defined(FEE_PRV_CFG_SELECTED_FS) && (1 == FEE_PRV_CFG_SELECTED_FS))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    28  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    29  #if (FEE_PRESENT == 1)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    30  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    31  #if (FEE_PRV_FREEBYTES_INDFLASH ==TRUE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    32  /* Added volatile to avoid compiler optimisation*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    33  #define FEE_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    34  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    35  static volatile Fee_FreeByte_thrshold_t Fee_FreeByte_thr_st;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    36  #define FEE_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    37  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    38  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    39  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    40  #define FEE_START_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    41  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    42  /* Information regarding the 2nd copy of the Redundant block header that was read */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    43  static Fee_GlobInfoLastRdHeader_tst Fee_GlobInfoRedundantRdHeader_st;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    44  #define FEE_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    45  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    46  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    47  #define FEE_START_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    48  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    49  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    50  static Fee_stRetVal_ten Fee_LLRedundantCpyChk(Fee_GlobInfoLastRdHeader_tst * xFee_GlobInfoRedundantRdHeader_pst);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    51  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    52  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    53   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    54   * Fee_LLCheckReorganizationNeed(): Check the necessity of a sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    55   *                                  reorganization
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    56   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    57   * This function checks if there is still enough space left in all
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    58   * sectors. Also "empty" sectors are checked because they can also be
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    59   * used. If a sector reorganization is necessary, SECTORFULL will
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    60   * be returned.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    61   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    62   * \param    Threshold_u32:         Amount of bytes must be available
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    63   * \return   Function result
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    64   * \retval   FEE_SECTORFULL_E:      A reorganization is necessary
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    65   * \retval   FEE_ORDER_FINISHED_E:  A reorganization is not necessary
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    66   * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    67   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    68   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    69   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    70  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    71   FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLCheckReorganizationNeed(VAR(uint32, AUTOMATIC) Threshold_u32,
; Function Fee_LLCheckReorganizationNeed
.L152:
Fee_LLCheckReorganizationNeed:	.type	func
	mov	e8,d5,d4
.L266:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    72                                                                 VAR(uint16, AUTOMATIC) DataLength_u16)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    73  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    74      VAR(Fee_stRetVal_ten, AUTOMATIC) xRetVal_en = FEE_SECTORFULL_E;     /* Function return */
	mov	d10,#5
.L207:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    75      VAR(uint8, AUTOMATIC) xLogSecIdx_u8;                                /* Logical sector index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    76      VAR(uint8, AUTOMATIC) xPhySecIdx_u8;                                /* Physical sector index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    77      VAR(uint32,AUTOMATIC) xNumFreeBytes_u32;                            /* Amount of free bytes in the current sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    78  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    79      /* Calculate the number of free bytes in currently used sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    80      xNumFreeBytes_u32 = Fee_CalculateNumOfFreeBytesInCurSector(FEE_LL_SECTOR_USED_FOR_WRITING);
	movh.a	a15,#@his(Fee_RdWrOrder_st)
	lea	a15,[a15]@los(Fee_RdWrOrder_st)
	add.a	a15,#4
	ld.w	d4,[a15]
.L206:
	call	Fee_CalculateNumOfFreeBytesInCurSector
.L205:
	mov	d11,d2
.L209:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    81  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    82      /* Check if a reorganization is necessary (only the currently active sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    83       * was regarded) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    84      if((xNumFreeBytes_u32 > DataLength_u16) &&
	jge.u	d9,d11,.L2
.L267:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    85        ((xNumFreeBytes_u32 - DataLength_u16) >= Threshold_u32))
	sub	d0,d11,d9
.L210:
	jlt.u	d0,d8,.L3
.L212:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    86      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    87          /* The current sector contains more free space than required
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    88           * --> No sector reorganization necessary */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    89          xRetVal_en = FEE_ORDER_FINISHED_E;
	mov	d10,#1
.L268:
	j	.L4
.L3:
.L2:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    90      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    91      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    92      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    93          /* The active sector does not contain enough free space
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    94           * --> check the other sectors */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    95  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    96          /* Get the current logical sector index (sector for current write accesses) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    97          xLogSecIdx_u8 = Fee_idxLLSectorOrder_au8[Fee_GetPhysSectorByAddress(Fee_RdWrOrder_st.xWrAddress)];
	ld.w	d4,[a15]
	call	Fee_GetPhysSectorByAddress
.L208:
	movh.a	a15,#@his(Fee_idxLLSectorOrder_au8)
	lea	a15,[a15]@los(Fee_idxLLSectorOrder_au8)
.L269:
	addsc.a	a15,a15,d2,#0
	ld.bu	d0,[a15]
.L213:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    98  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	    99          /* Increment the index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   100          xLogSecIdx_u8++;
	add	d0,#1
.L214:
	extr.u	d0,d0,#0,#8
.L215:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   101  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   102          /* Check for a bank overflow */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   103          if(xLogSecIdx_u8<FEE_NUM_FLASH_BANKS)
	movh.a	a15,#@his(Fee_NumFlashBanksUsed_u8)
	lea	a15,[a15]@los(Fee_NumFlashBanksUsed_u8)
	ld.bu	d1,[a15]
.L270:
	jge.u	d0,d1,.L5
.L271:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   104          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   105              /* Hint: The logical sector with index 0 is the sector with the eldest data. The logical sector with
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   106               * the index xLogSecIdx_u8 is the write sector and therefor the latest one with the most current
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   107               * data. All logical sectors with an index in between can be used for new data and can be considered
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   108               * as empty. Even if they might be not be erased.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   109               */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   110  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   111              /* Loop over all configured banks */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   112              for(;xLogSecIdx_u8<(FEE_NUM_FLASH_BANKS); xLogSecIdx_u8++)
	j	.L6
.L7:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   113              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   114                  if((Fee_LLSectorOrder_st[xLogSecIdx_u8].SecState_en == FEE_SECTOR_USED_E) ||
	mul	d15,d0,#12
.L272:
	movh.a	a15,#@his(Fee_LLSectorOrder_st)
	lea	a15,[a15]@los(Fee_LLSectorOrder_st)
.L273:
	addsc.a	a15,a15,d15,#0
.L274:
	ld.w	d15,[a15]4
.L275:
	jeq	d15,#2,.L8
.L276:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   115                     (Fee_LLSectorOrder_st[xLogSecIdx_u8].SecState_en == FEE_SECTOR_FULL_E))
	jne	d15,#3,.L9
.L8:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   116                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   117                      /* The first FULL or USED sector behind the current active sector contains the eldest valid data.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   118                       * --> skip this sector because only empty sectors are relevant */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   119                      break;
	j	.L10
.L9:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   120                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   121                  else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   122                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   123                      /* The sector state of the current sector is ERASED, ERASEREQUEST or UNDEF
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   124                       * --> get the amount of free bytes in order to find out how many bytes are still available */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   125  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   126                      /* Get the new corresponding physical sector index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   127                      xPhySecIdx_u8 = Fee_LLSectorOrder_st[xLogSecIdx_u8].xPhySecIdx_u8;
	ld.bu	d15,[a15]8
.L217:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   128  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   129                      /* Add the new sector size to the amount of free bytes */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   130                      xNumFreeBytes_u32 += (Fee_FlashProp_st[xPhySecIdx_u8].Fee_LogEndAddress_u32 + 1uL) -
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   131                                            Fee_FlashProp_st[xPhySecIdx_u8].Fee_LogStartAddress_u32;
	sha	d15,#4
.L218:
	movh.a	a15,#@his(Fee_FlashProp_st)
	lea	a15,[a15]@los(Fee_FlashProp_st)
.L277:
	addsc.a	a15,a15,d15,#0
.L278:
	ld.w	d15,[a15]12
.L279:
	ld.w	d2,[a15]8
.L280:
	sub	d15,d2
	add	d15,#1
.L281:
	add	d11,d15
.L282:
	add	d0,#1
.L216:
	extr.u	d0,d0,#0,#8
.L6:
	jlt.u	d0,d1,.L7

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   132                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   133              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   134  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   135              /* Now all free sectors were also considered */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   136              if ((xNumFreeBytes_u32 > DataLength_u16) &&
.L10:
	jge.u	d9,d11,.L11
.L283:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   137                 ((xNumFreeBytes_u32 - DataLength_u16) >= Threshold_u32))
	sub	d11,d9
.L211:
	lt.u	d15,d11,d8
.L219:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   138              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   139                  /* The current sector contains more free space than required
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   140                   * --> No sector reorganization necessary */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   141                  xRetVal_en = FEE_ORDER_FINISHED_E;
	cmovn	d10,d15,#1
.L12:
.L11:
.L5:
.L4:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   142              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   143          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   144      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   145  #if (FEE_PRV_FREEBYTES_INDFLASH ==TRUE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   146      /* The below part of the code is to calculate the free bytes available in the flash*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   147      /* Calculate the number of free bytes in currently used sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   148      xNumFreeBytes_u32 = Fee_CalculateNumOfFreeBytesInCurSector(FEE_LL_SECTOR_USED_FOR_WRITING);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   149  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   150      /* For calculating the number of bytes the remaing sectors i.e is in Erased stated should be considered */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   151  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   152      xLogSecIdx_u8 = Fee_idxLLSectorOrder_au8[Fee_GetPhysSectorByAddress(Fee_RdWrOrder_st.xWrAddress)];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   153      /*incriment the sector index for next logical sector*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   154      xLogSecIdx_u8++;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   155      /* Get the current logical sector index (sector for current write accesses) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   156      for(;xLogSecIdx_u8<(FEE_NUM_FLASH_BANKS); xLogSecIdx_u8++)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   157      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   158           /* concider the sector which is only in erased state for the free byte calculation*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   159          if((Fee_LLSectorOrder_st[xLogSecIdx_u8].SecState_en == FEE_SECTOR_ERASED_E))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   160          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   161                /* Get the new corresponding physical sector index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   162              xPhySecIdx_u8 = Fee_LLSectorOrder_st[xLogSecIdx_u8].xPhySecIdx_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   163              /* Add the new sector size to the amount of free bytes */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   164              xNumFreeBytes_u32 += (Fee_FlashProp_st[xPhySecIdx_u8].Fee_LogEndAddress_u32 + 1) -
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   165                                            Fee_FlashProp_st[xPhySecIdx_u8].Fee_LogStartAddress_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   166          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   167      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   168      /*load the values in the global varible*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   169      Fee_FreeByte_thr_st.Fee_Totalfree_bytes=xNumFreeBytes_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   170      Fee_FreeByte_thr_st.Fee_hardThreshold=FEE_REQUIRED_FREE_SPACE_BEFORE_HARD_SR;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   171      Fee_FreeByte_thr_st.Fee_softThershold=FEE_REQUIRED_FREE_SPACE_BEFORE_SOFT_SR;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   172  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   173  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   174      return (xRetVal_en);
	mov	d2,d10
.L220:
	j	.L13

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   175  }
.L13:
	ret
.L179:
	
__Fee_LLCheckReorganizationNeed_function_end:
	.size	Fee_LLCheckReorganizationNeed,__Fee_LLCheckReorganizationNeed_function_end-Fee_LLCheckReorganizationNeed
.L165:
	; End of function
	
	.sdecl	'.text.rba_FeeFs1_LlSectorHandling.Fee_LLSectorReorganization',code,cluster('Fee_LLSectorReorganization')
	.sect	'.text.rba_FeeFs1_LlSectorHandling.Fee_LLSectorReorganization'
	.align	2
	
	.global	Fee_LLSectorReorganization

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   176  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   177  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   178  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   179   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   180   * Fee_LLSectorReorganization(): Reorganization function
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   181   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   182   * This function performs a sector reorganization. Therefore the eldest
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   183   * sector is checked and blocks which are only located there are
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   184   * written again into the latest sector.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   185   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   186   * Attention: the cache has to be built up completely before
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   187   *            entering the reorganization!
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   188   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   189   * \param    SectReorgInterSt_pb:   Will be set to TRUE by the function
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   190   *                                  if the transfer of the next block is
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   191   *                                  currently being prepared (interruptable)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   192   *                                  Will be set to FALSE by the function
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   193   *                                  in any other cases
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   194   * \return   Function result
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   195   * \retval   FEE_ORDER_PENDING_E:   Order is still pending
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   196   * \retval   FEE_ERROR_E:           An internal error occured
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   197   * \retval   FEE_ORDER_FINISHED_E:  Reorganization finished successfully
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   198   * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   199   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   200   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   201   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   202  FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLSectorReorganization(P2VAR(boolean, AUTOMATIC, FEE_APPL_DATA) SectReorgInterSt_pb)
; Function Fee_LLSectorReorganization
.L154:
Fee_LLSectorReorganization:	.type	func
	sub.a	a10,#16
.L221:
	st.a	[a10]8,a4
.L223:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   203  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   204      VAR(Fee_stRetVal_ten, AUTOMATIC) xRetVal_en     = FEE_ORDER_PENDING_E;  /* Function return */
	mov	d8,#0
.L224:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   205      VAR(Fee_stRetVal_ten, AUTOMATIC) xTmpRetVal_en  = FEE_ORDER_PENDING_E;  /* Temp return */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   206      VAR(uint8, AUTOMATIC) xLogSecIdx_u8;                                    /* Logical sector index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   207      VAR(uint8, AUTOMATIC) xPhySecIdx_u8;                                    /* Physical sector index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   208      VAR(uint32, AUTOMATIC)xTmpAddr_u32 = FEE_CACHE_INIT_VALUE;              /* Temporary block address */
	mov.u	d10,#45054
	addih	d10,d10,#51966
.L288:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   209      VAR(uint8, AUTOMATIC) xStCache_u8   = 0;                                /* Cache status */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   210      VAR(boolean, AUTOMATIC) xSectReorgInterSt_b = FALSE;                    /* Interruptability of the reorg */
	mov	d9,#0
.L225:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   211  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   212      static uint32 xAdrBlkHeader_u32;                                        /* Block header address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   213      static boolean xSearchRetry_b;                                          /* First try indicator for finding a block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   214      static uint16 xBlkIdx_u16;                                              /* Block index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   215      static boolean xFee_WriteTwice_b;                                        /* Variable to indicate if block must be written once or twice during Fls2Fls copy operaiton. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   216  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   217  #if((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) || (FEE_RB_ACT_SURVIVAL_EVAL != FALSE))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   218      static uint32 xAdrBlkHdAfterbStart_u32;                                 /* "Afterburner" start address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   219  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   220      /* Search for an unknown block with cache. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   221   #if(FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE != 0)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   222      static uint16 xUnknownBlkCacheIdx_u16 = FEE_MAXUINT16;                  /* Index for accessing unknown block cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   223      VAR(Fee_BlkHeader_tst, AUTOMATIC) xCurrBlkHeader_st;                    /* Block header structure to extract the header details of unknown block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   224   #endif /* (FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE != 0) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   225  #endif /* ((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) || (FEE_RB_ACT_SURVIVAL_EVAL != FALSE)) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   226  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   227  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   228      /* Sector reorganization cannot be interrupted by default */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   229      *SectReorgInterSt_pb = FALSE;
	mov	d0,#0
.L289:
	st.b	[a4],d0
.L290:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   230  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   231      /* Hints:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   232       *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   233       * The driver knows several logical sectors. The eldest one has index 0, the latest one has index X and
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   234       * all sectors between FEE_NUM_FLASH_BANKS and X are currently not used. During the reorganization it
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   235       * is only necessary to check the data within the eldest sector because only this sector will be erased
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   236       * afterwards.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   237       *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   238       * Sector order:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   239       *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   240       *  +---------------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   241       *  |     FULL      |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   242       *  |      #0 (0)   | <==== Eldest data
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   243       *  |               |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   244       *  +---------------+   The sector (standard) reorganization is done in the following steps:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   245       *  |     FULL      |   - Read 1 byte in a block
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   246       *  |      #1       |   - Check if the block header is located in the eldest sector (logical sector 0)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   247       *  |               |   - If yes, write the block again
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   248       *  +---------------+   - Otherwise search for the next block
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   249       *  |     USED      |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   250       *  |      #2 (X)   |   The "afterburner" is done in the following steps:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   251       *  |               |   - Check the eldest sector for blocks which are only located there
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   252       *  +---------------+   - Copy these blocks to the USED sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   253       *  |    ERASED     |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   254       *  |      #3       |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   255       *  +---------------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   256       *  |undef./ReqErase|
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   257       *  |      #4       |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   258       *  +---------------+ */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   259  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   260  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   261      /* Switch over the state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   262      switch(Fee_RdWrOrder_st.Fee_LLSecReorg_en)
	movh.a	a2,#@his(Fee_RdWrOrder_st)
	lea	a2,[a2]@los(Fee_RdWrOrder_st)
.L291:
	lea	a15,[a2]40
	st.a	[a10]4,a15
	ld.w	d0,[a15]
.L292:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   263      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   264          /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   265          case FEE_LL_REORG_INIT_E:
	mov	d15,#0
	jeq	d15,d0,.L14
.L293:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   266          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   267              /* Set the internal sector reorganization state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   268              Fee_Prv_stReorg_u8 = FEE_PRV_ST_REORG_STANDARD_RUNNING;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   269  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   270              /* Reset block index and retry indicator */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   271              xBlkIdx_u16 = FEE_MAXUINT16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   272              xSearchRetry_b = FALSE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   273  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   274              #if((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) || (FEE_RB_ACT_SURVIVAL_EVAL != FALSE))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   275              /* Get the start address for the "afterburner" */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   276              xAdrBlkHdAfterbStart_u32 = Fee_FlashProp_st[Fee_LLSectorOrder_st[0].xPhySecIdx_u8].Fee_LogStartAddress_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   277  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   278              /* Search for an unknown block with cache: Initialise the variables. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   279              #if(FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE != 0)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   280              xUnknownBlkCacheIdx_u16 = FEE_MAXUINT16;    /* set to -1 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   281              Fee_RdWrOrder_st.Fee_UnknownBlkCacheAdd_u32 = Fee_FlashProp_st[Fee_LLSectorOrder_st[0].xPhySecIdx_u8].Fee_LogStartAddress_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   282              #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   283              #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   284  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   285              /* Set the next state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   286              Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_PREP_SEARCH_BLK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   287  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   288              #if (FEE_PRV_DEBUGGING != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   289              Fee_Prv_stModuleTest_st.Fee_ReorgTimeStart_u32 = Mcu_Rb_GetSysTimePart(TIM2);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   290              Fee_Prv_stModuleTest_st.Fee_ReorgCntStart_u32 = 0;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   291              #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   292  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   293              if ((Fee_RdWrOrder_st.xWrAddress>=Fee_FlashProp_st[Fee_LLSectorOrder_st[0].xPhySecIdx_u8].Fee_LogStartAddress_u32) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   294                  (Fee_RdWrOrder_st.xWrAddress<=Fee_FlashProp_st[Fee_LLSectorOrder_st[0].xPhySecIdx_u8].Fee_LogEndAddress_u32)){
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   295                  /* - If the Hard-Reorg-Treshold is in the oldest sector, the Wr-Address could be in the oldest sector, too.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   296                   * - It is not allowed to start writing/copying of blocks in the oldest sector, because the oldest sector will
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   297                   *   be erased after the sector-reorganisation.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   298                   * - For this special case, it is necessary to set the write address in the next logical sector.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   299                   * - Because the if condition is only true if the write address is in the logical[0] sector, the write address has
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   300                   *   to be set at the end of logical[0] sector.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   301                   **/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   302                  Fee_RdWrOrder_st.xWrAddress = Fee_FlashProp_st[Fee_LLSectorOrder_st[0].xPhySecIdx_u8].Fee_LogEndAddress_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   303              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   304          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   305          /* No break to save time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   306  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   307          /* Prepare the next block search */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   308          /* MR12 RULE 16.3 VIOLATION: Time critical position */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   309          case FEE_LL_REORG_PREP_SEARCH_BLK_E:
	mov	d1,#1
	jeq	d1,d0,.L15
.L294:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   310          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   311              /* This state is only passed after the first function call or for the
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   312               * first try of finding any of the configured blocks (not if the checksum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   313               * of a found block is invalid) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   314  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   315              /* Increment the block counter in order to find the next block for the transfer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   316              xBlkIdx_u16++;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   317  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   318              /* Initialize block header for redundant block of last read order */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   319              Fee_GlobInfoRedundantRdHeader_st.AdrBlkHeader_u32 = FEE_NULL;            /* Block header address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   320              Fee_GlobInfoRedundantRdHeader_st.BlkLength_u16    = 0;                   /* Block length */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   321              Fee_GlobInfoRedundantRdHeader_st.BlkStatus_u8     = 0;                   /* Block status */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   322              Fee_GlobInfoRedundantRdHeader_st.FeeIndex_u16     = 0;                   /* Fee index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   323              Fee_GlobInfoRedundantRdHeader_st.HdrCrc16_u16     = 0,                   /* Crc16 checksum (block header) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   324              Fee_GlobInfoRedundantRdHeader_st.BlkCrc32_u32     = 0;                   /* Crc32 checksum (block data) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   325  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   326              /* Default both the copies must be transfered for double security block. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   327              xFee_WriteTwice_b = TRUE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   328  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   329              /* Loop over all configured blocks */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   330              if (xBlkIdx_u16 >= FEE_NUM_BLOCKS)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   331              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   332                  /* All blocks from the layout have been checked now
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   333                   * --> start and execute the "afterburner" for unknown blocks
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   334                   * --> the sector reorganization was finished from block copy point of view
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   335                   * --> the sector arrays and the sector markers have to be updated
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   336                   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   337  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   338                  #if((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) || (FEE_RB_ACT_SURVIVAL_EVAL != FALSE))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   339                  /* Check if the oldest FULL sector has been checked completely or not */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   340                  if(xAdrBlkHdAfterbStart_u32 <
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   341                     Fee_FlashProp_st[Fee_LLSectorOrder_st[0].xPhySecIdx_u8].Fee_LogEndAddress_u32)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   342                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   343                      /* Search for an unknown block with cache: increment to the next index of the cache. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   344                      #if(FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE != 0)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   345                      xUnknownBlkCacheIdx_u16++;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   346                      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   347  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   348                      /* Set the internal sector reorganization state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   349                      Fee_Prv_stReorg_u8 = FEE_PRV_ST_REORG_AFTERB_RUNNING;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   350  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   351                      /* Reset the address of the last found block header address for the current block index
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   352                       * (indicate first try for every single block) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   353                      xAdrBlkHeader_u32 = FEE_MAXUINT32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   354  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   355                      /* Indicate a first try for this block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   356                      xSearchRetry_b = FALSE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   357  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   358                      /* Start or continue with the search of an unknown block in the oldest FULL sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   359                      Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_SEARCH_UNK_BLK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   360  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   361                      /* Leave this state to reach the finish state in the next call */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   362                      break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   363                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   364                  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   365  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   366                  /* Finish the sector reorganization (standard reorganization and the afterburner are finished) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   367                  Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_FINISHED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   368  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   369                  /* Leave this state to reach the finish state in the next call */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   370                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   371              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   372  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   373              /* Check if this block has a valid cache entry */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   374              xTmpAddr_u32 = Fee_LLGetAddressFromCache(Fee_BlockProperties_st[xBlkIdx_u16].BlockPersistentId_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   375  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   376              /* Repeat the check */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   377              xStCache_u8 = Fee_LLGetCacheUpdateStForAllSect();
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   378  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   379              /* Evaluate the cache content and check if all sectors have been checked at least
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   380               * once until now. Otherwise the cache might not be complete (e.g. sector change in shutdown).
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   381               * --> Skip the block only in case:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   382               *     - all sectors have been checked completely (xStCache_u8 == Complete) and
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   383               *     - the address out of the cache == FEE_CACHE_INIT_VALUE */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   384              if((xTmpAddr_u32 != FEE_CACHE_INIT_VALUE) ||
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   385                 (xStCache_u8 == FEE_CACHE_UPD_NOT_COMP_FOR_SECT))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   386              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   387                  /* Block is currently (potentially) in the flash, it has to be read out in order to check
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   388                   * its validity and copy it, if necessary (cache entry is re-checked) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   389  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   390                  /* Reset the address of the last found block header address for the current block index
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   391                   * (indicate first try) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   392                  xAdrBlkHeader_u32 = FEE_MAXUINT32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   393  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   394                  /* Indicate a first try for this block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   395                  xSearchRetry_b = FALSE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   396  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   397                  /* Set the next state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   398                  Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_SEARCH_BLK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   399              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   400              else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   401              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   402                  /* Block is currently not in the flash, go on with the next one out of
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   403                   * the configuration */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   404  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   405                  /* Do not enter the next state but come here again */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   406                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   407              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   408          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   409          /* No break to save time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   410  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   411          /* Search for a specific block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   412          /* MR12 RULE 16.3 VIOLATION: Time critical position */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   413          case FEE_LL_REORG_SEARCH_BLK_E:
	mov	d1,#2
	jeq	d1,d0,.L16
.L295:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   414          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   415              /* Find the latest version of the current block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   416              xTmpRetVal_en = Fee_LLSearchSpecifiedBlkHeader(Fee_BlockProperties_st[xBlkIdx_u16].BlockPersistentId_u16,  /* FeeIdx */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   417                                                             &xAdrBlkHeader_u32,                         /* End address for the search */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   418                                                             &Fee_GlobInfoLastRdHeader_st,                  /* Result structure */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   419                                                             xSearchRetry_b);                            /* Indicate first try / retry after a
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   420                                                                                                            corrupted checksum of the latest
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   421                                                                                                            block version */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   422              /* Switch over the function return */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   423              switch (xTmpRetVal_en)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   424              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   425                  /* Order not finished yet */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   426                  case FEE_ORDER_PENDING_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   427                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   428                      /* Just wait */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   429                      ;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   430                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   431                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   432  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   433                  /* A valid block header was found */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   434                  case FEE_ORDER_FINISHED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   435                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   436                      /* The latest copy with a correct block header of this block was found.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   437                       * --> Verify the block checksum in order to make sure this is also the latest valid block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   438  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   439                      /* Save the current block header address. If the checksum is incorrect, the function
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   440                       * Fee_LLSearchSpecifiedBlkHeader will try to find older versions only until this
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   441                       * address is reached
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   442                       */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   443                      xAdrBlkHeader_u32 = Fee_GlobInfoLastRdHeader_st.AdrBlkHeader_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   444  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   445                      /* Update the cache (in case of retries due to a former invalid block header search,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   446                       * the cache should be up to date). Cannot be done inside the function itself, because
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   447                       * this would make the special manual search marker in the cache obsolete which
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   448                       * prevents from invalid cache entries due to write interruptions. Moreover the cache will
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   449                       * be updated for read and write orders only when the block CS is valid. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   450                      if(xSearchRetry_b != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   451                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   452                          Fee_LLUpdateAddressInCache(Fee_BlockProperties_st[xBlkIdx_u16].BlockPersistentId_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   453                                                     Fee_GlobInfoLastRdHeader_st.AdrBlkHeader_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   454                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   455  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   456                      /* Set corresponding state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   457                      Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_CHECK_BLOCK_CS_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   458                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   459                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   460  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   461                  /* No valid header page was found within the complete flash (all sectors have been checked) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   462                  case FEE_ERROR_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   463                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   464                      /* The cache was already invalidated inside the function Fee_LLSearchSpecifiedBlkHeader */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   465  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   466                      /* The block is not in the flash and can therefor be skipped, search the next block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   467                      Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_PREP_SEARCH_BLK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   468                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   469                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   470  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   471                  /* The cache is corrupt */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   472                  case FEE_ABORTED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   473                      /* The wrong index was found using the cache. The respective entry was already
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   474                       * marked for a manual search during the sector reorganization.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   475                       * --> "Manual search" will start automatically in order to find other copies */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   476  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   477                      /* Indicate retry */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   478                      xSearchRetry_b = TRUE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   479                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   480  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   481                  /* These cases should never be reached (cannot be returned by Fee_LLSearchSpecifiedBlkHeader) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   482                  case FEE_ERASE_SECTOR_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   483                  case FEE_SECTORCHANGE_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   484                  case FEE_SECTORFULL_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   485                  case FEE_BLOCK_INVALIDATED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   486                  case FEE_NUM_RET_VAL_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   487                  default:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   488                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   489                      /* Mark the block as temporary not available */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   490                      Fee_LLUpdateAddressInCache(Fee_BlockProperties_st[xBlkIdx_u16].BlockPersistentId_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   491                                                 FEE_CACHE_TMP_INVALID_VALUE);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   492  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   493                      /* Something went wrong, restart from the beginning */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   494                      Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_INIT_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   495                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   496                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   497              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   498          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   499          break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   500  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   501          /* Evaluate the block checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   502          case FEE_LL_REORG_CHECK_BLOCK_CS_E:
	mov	d1,#3
	jeq	d1,d0,.L17
.L296:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   503          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   504              /* Read out the complete block and calculate the checksum */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   505              xTmpRetVal_en = Fee_LLCalcBlkCrcInFlash(&Fee_GlobInfoLastRdHeader_st);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   506  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   507              /* Evaluate the result */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   508              switch (xTmpRetVal_en)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   509              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   510                  /* Order is still pending */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   511                  case FEE_ORDER_PENDING_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   512                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   513                      /* Just wait */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   514                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   515                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   516  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   517                  /* Order is finished with success (block CRC is correct) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   518                  case FEE_ORDER_FINISHED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   519                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   520                      /* Get the corresponding physical sector of the eldest logical sector (sector state FULL) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   521                      xPhySecIdx_u8 = Fee_LLSectorOrder_st[0].xPhySecIdx_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   522  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   523                      /* Check if this header was found within the address range of the logical sector 0 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   524                      if((Fee_GlobInfoLastRdHeader_st.AdrBlkHeader_u32 >= Fee_FlashProp_st[xPhySecIdx_u8].Fee_LogStartAddress_u32) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   525                         (Fee_GlobInfoLastRdHeader_st.AdrBlkHeader_u32  < (Fee_FlashProp_st[xPhySecIdx_u8].Fee_LogEndAddress_u32)))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   526                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   527                          /* The latest valid copy of this block is located in the eldest logical sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   528                           * --> block might be considered for the reorganization */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   529  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   530                          /* Check if this block has to be transfered. This is the case if:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   531                           * 1. Block is in the layout (standard reorg is active) OR
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   532                           * 2. Block is not in the layout (afterburner is running) AND
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   533                           *      - Survival flag is TRUE (config setting must be taken out of the DFlash) OR
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   534                           *      - FEE_RB_ACT_UNKNOWN_BLOCK_REORG == TRUE (valid for all blocks) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   535                          if((Fee_Prv_stReorg_u8 == FEE_PRV_ST_REORG_STANDARD_RUNNING) ||
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   536                             ((Fee_Prv_stReorg_u8 == FEE_PRV_ST_REORG_AFTERB_RUNNING) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   537                             (((Fee_GlobInfoLastRdHeader_st.BlkStatus_u8 & (uint8)FEE_FLAG_SURV_ATTR_MSK) > 0u) ||
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   538                               (FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE))))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   539                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   540                              /* WRITE this block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   541                              Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_WRITE_BLOCK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   542                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   543                          else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   544                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   545                              /* Indicate a possible interruption of the sector reorganization */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   546                              xSectReorgInterSt_b = TRUE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   547  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   548                              /* Search for the next block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   549                              Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_PREP_SEARCH_BLK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   550                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   551                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   552                      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   553                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   554                          /* The latest valid copy of this block is not located within the eldest logical sector. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   555  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   556                          /* Perform an additional check for redundant block, to ensure that the 2nd copy is also available outside oldest sector. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   557                          if((Fee_GlobInfoLastRdHeader_st.BlkStatus_u8 & (uint8)FEE_FLAG_SEC_LEVEL_MSK) != FEE_BLK_INT_DOUBLE_STORAGE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   558                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   559                              /* This is a single security block, no more handling required. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   560                              /* Indicate a possible interruption of the sector reorganization */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   561                              xSectReorgInterSt_b = TRUE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   562  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   563                              /* Search for the next block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   564                              Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_PREP_SEARCH_BLK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   565                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   566                          else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   567                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   568                              /* Search the Redundant copy. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   569                              /* Set values in global structure for search. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   570                              Fee_GlobInfoRedundantRdHeader_st = Fee_GlobInfoLastRdHeader_st;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   571  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   572                              /* Go to the state to check availability of 2nd copy. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   573                              Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_REDUNDANT_BLK_CHK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   574                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   575                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   576                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   577                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   578  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   579                  /* The block checksum is incorrect */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   580                  case FEE_ERROR_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   581                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   582                      /* Search for an unknown block without cache. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   583                      #if(((FEE_RB_ACT_SURVIVAL_EVAL != FALSE) && (FEE_RB_ACT_UNKNOWN_BLOCK_REORG == FALSE)) || ((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) && (FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE == 0)))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   584                      /* Check if the "afterburner" is currently active */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   585                      if(Fee_Prv_stReorg_u8 == FEE_PRV_ST_REORG_AFTERB_RUNNING)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   586                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   587                          uint8 startSectorAfterburner_u8 , currScannedSector_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   588                          /* Save the current header address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   589                          xAdrBlkHeader_u32 = Fee_GlobInfoLastRdHeader_st.AdrBlkHeader_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   590  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   591                          /* Search for later copies of this block (search must be done from
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   592                           * the top to the bottom of the sector for unknown blocks) only
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   593                           * in case the block is still behind the current start address
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   594                           * for unknown blocks */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   595                          startSectorAfterburner_u8  = Fee_GetPhysSectorByAddress(xAdrBlkHdAfterbStart_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   596                          currScannedSector_u8       = Fee_GetPhysSectorByAddress(xAdrBlkHeader_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   597  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   598                          /* MR12 RULE 13.5 VIOLATION: Both checks of absolute address and address belonging to same physical sectors is required. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   599                          if((xAdrBlkHdAfterbStart_u32 >= xAdrBlkHeader_u32) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   600                             (startSectorAfterburner_u8 == currScannedSector_u8))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   601                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   602                              /* Go on with the search, because no valid block copy for this persistent ID was found */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   603                              Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_SEARCH_BLK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   604                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   605                          else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   606                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   607                              /* Retry */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   608                              Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_SEARCH_UNK_BLK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   609                              xSearchRetry_b = TRUE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   610                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   611                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   612                      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   613                      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   614                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   615                          /* Search for older copies of this block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   616                          Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_SEARCH_BLK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   617  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   618                          /* Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   619                          #if (defined(RBA_FLSIFX_FLASH) || defined(RBA_FLSJDP_FLASH))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   620                          if(E_NOT_OK != Fls_Write(Fee_GlobInfoLastRdHeader_st.AdrBlkHeader_u32, Fee_hdrBuffer_au8, FEE_PAGE_LEN))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   621                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   622                              Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_WAIT_FOR_FLS_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   623                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   624                          else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   625                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   626                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   627                          #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   628                          /* END Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   629  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   630                          /* A reset of the cache in order to be safe against
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   631                           * any kind of interruptions for the following search
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   632                           * (e.g. Fee_Cancel) was done inside the function already */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   633  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   634                          /* Indicate a retry */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   635                          xSearchRetry_b = TRUE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   636                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   637                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   638                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   639  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   640                  /* These states should never be reached (cannot be returned by Fee_LLCalcBlkCrcInFlash) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   641                  case FEE_ERASE_SECTOR_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   642                  case FEE_SECTORCHANGE_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   643                  case FEE_SECTORFULL_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   644                  case FEE_ABORTED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   645                  case FEE_BLOCK_INVALIDATED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   646                  case FEE_NUM_RET_VAL_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   647                  default:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   648                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   649                      /* The cache was already invalidated inside the function in case of
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   650                       * a standard sector reorganization (no "afterburner"). */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   651  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   652                      /* Something went wrong, restart from the beginning */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   653                      Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_INIT_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   654                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   655                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   656              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   657          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   658          break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   659  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   660          /* Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   661          #if (defined(RBA_FLSIFX_FLASH) || defined(RBA_FLSJDP_FLASH))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   662  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   663          /* Wait for the flash to finish the overwrite of an invalid header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   664          case FEE_LL_REORG_WAIT_FOR_FLS_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   665          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   666              if(Fls_GetJobResult() != MEMIF_JOB_PENDING)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   667              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   668                  Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_SEARCH_BLK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   669              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   670          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   671          break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   672  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   673          #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   674          /* END Workaround Overstamp invalid header to reduce init time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   675  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   676          /* Check if 2nd copy of Redundant block is present in oldest sector or not. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   677          case FEE_LL_REORG_REDUNDANT_BLK_CHK_E:
	mov	d15,#4
	jeq	d15,d0,.L18
.L297:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   678          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   679              xTmpRetVal_en = Fee_LLRedundantCpyChk(&Fee_GlobInfoRedundantRdHeader_st);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   680  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   681              /* Evaluate the function return */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   682              switch(xTmpRetVal_en)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   683              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   684                  /* Order not finished yet */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   685                  case FEE_ORDER_PENDING_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   686                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   687                      /* Just wait */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   688                      ;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   689                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   690                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   691  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   692                  /* All copies of the respective block were copied and verified */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   693                  case FEE_ORDER_FINISHED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   694                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   695                      /* Check if 2nd copy is present in the oldest sector. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   696                      /* Get the corresponding physical sector of the eldest logical sector (sector state FULL) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   697                      xPhySecIdx_u8 = Fee_LLSectorOrder_st[0].xPhySecIdx_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   698  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   699                      /* Check if this header was found within the address range of the logical sector 0 */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   700                      if((Fee_GlobInfoRedundantRdHeader_st.AdrBlkHeader_u32 >= Fee_FlashProp_st[xPhySecIdx_u8].Fee_LogStartAddress_u32) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   701                         (Fee_GlobInfoRedundantRdHeader_st.AdrBlkHeader_u32  < Fee_FlashProp_st[xPhySecIdx_u8].Fee_LogEndAddress_u32))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   702                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   703                          /* Redundant copy exists in the oldest sector. Write the block once. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   704                          xFee_WriteTwice_b = FALSE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   705  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   706                          Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_WRITE_BLOCK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   707                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   708                      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   709                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   710                          /* Redundant copy is present outside the oldest sector, so no more writes required.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   711                           * Continue with reorg with next block. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   712                            /* Indicate a possible interruption of the sector reorganization */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   713                          xSectReorgInterSt_b = TRUE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   714  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   715                          Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_PREP_SEARCH_BLK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   716                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   717                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   718                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   719  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   720                  /* An error occured during the search -> there is no second copy. Transfer the copy once. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   721                  case FEE_ERROR_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   722                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   723                      xFee_WriteTwice_b = FALSE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   724  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   725                      Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_WRITE_BLOCK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   726                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   727                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   728  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   729                  case FEE_ABORTED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   730                  case FEE_ERASE_SECTOR_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   731                  case FEE_SECTORCHANGE_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   732                  case FEE_SECTORFULL_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   733                  case FEE_BLOCK_INVALIDATED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   734                  case FEE_NUM_RET_VAL_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   735                  default:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   736                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   737                      /* Something went wrong, restart from the beginning */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   738                      Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_INIT_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   739                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   740                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   741              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   742          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   743          break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   744  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   745          /* Write a block into the latest sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   746          case FEE_LL_REORG_WRITE_BLOCK_E:
	mov	d15,#5
	jeq	d15,d0,.L19
.L298:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   747          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   748              /* Copy the block from the old sector (Fee_GlobInfoLastRdHeader_st->AdrBlkHeader_u32) to the
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   749               * new sector (Fee_RdWrOrder_st.xWrAddress). If the security level is greater than 1, the
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   750               * same block (latest valid copy) is copied twice when xFee_WriteTwice_b is set to TRUE. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   751              xTmpRetVal_en = Fee_LLCpyBlkFromFls2Fls(&Fee_GlobInfoLastRdHeader_st, xFee_WriteTwice_b);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   752  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   753              /* Evaluate the function return */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   754              switch(xTmpRetVal_en)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   755              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   756                  /* Order not finished yet */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   757                  case FEE_ORDER_PENDING_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   758                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   759                      /* Just wait */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   760                      ;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   761                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   762                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   763  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   764                  /* All copies of the respective block were copied and verified */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   765                  case FEE_ORDER_FINISHED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   766                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   767                      /* Indicate a possible interruption of the sector reorganization */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   768                      xSectReorgInterSt_b = TRUE;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   769  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   770                      /* Go on with the next block (cache was already updated inside the
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   771                       * function Fee_LLCpyBlkFromFls2Fls, because only the low level
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   772                       * part of the driver has the possibility of a respective reaction
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   773                       * in case of multiple block storages) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   774                      Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_PREP_SEARCH_BLK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   775                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   776                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   777  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   778                  /* An error occured during the read, write or verify sequence */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   779                  case FEE_ERROR_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   780                      /* (3 retries for read, write or verify failed in case the orders
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   781                       *  have been accepted by the Fls before)*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   782                  /* The reorganization was aborted and the USED sector was erased */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   783                  case FEE_ABORTED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   784                      /* Restart the sector reorganization from the beginning using an
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   785                       * erased sector (the cache was already invalidated for all blocks
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   786                       * within the erased sector as well as the the cache status)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   787                       * Hint: This dead lock preventive action is only effective if
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   788                       *       the size of all blocks that need to be transfered into
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   789                       *       this sector is smaller than the respective sector size */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   790                  /* These states should never be reached (cannot be returned by Fee_LLCpyBlkFromFls2Fls) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   791                  case FEE_ERASE_SECTOR_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   792                  case FEE_SECTORCHANGE_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   793                  case FEE_SECTORFULL_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   794                  case FEE_BLOCK_INVALIDATED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   795                  case FEE_NUM_RET_VAL_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   796                  default:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   797                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   798                      /* Something went wrong, restart from the beginning */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   799                      Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_INIT_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   800                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   801                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   802              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   803          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   804          break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   805  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   806  #if((FEE_RB_ACT_UNKNOWN_BLOCK_REORG != FALSE) || (FEE_RB_ACT_SURVIVAL_EVAL != FALSE))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   807          /* Search for an unknown block without cache. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   808   #if (FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE == 0)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   809          case FEE_LL_REORG_SEARCH_UNK_BLK_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   810          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   811              /* Search the latest valid copy of the next unknown block header index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   812              xTmpRetVal_en = Fee_LLSearchUnknownBlkHeader(&xAdrBlkHdAfterbStart_u32, /* Start address for the search */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   813                                                           &xAdrBlkHeader_u32,        /* End address for the search */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   814                                                           &Fee_GlobInfoLastRdHeader_st, /* Result structure */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   815                                                           &xSearchRetry_b);          /* Indicate first try / retry after a
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   816                                                                                         corrupted checksum of the latest
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   817                                                                                         block version */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   818  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   819              /* Switch over the function return */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   820              switch (xTmpRetVal_en)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   821              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   822                  /* Order not finished yet */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   823                  case FEE_ORDER_PENDING_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   824                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   825                      /* Just wait */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   826                      ;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   827                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   828                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   829  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   830                  /* A valid block header was found */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   831                  case FEE_ORDER_FINISHED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   832                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   833                      /* The latest copy with a correct block header of this block was found.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   834                       * --> Verify the block checksum in order to make sure this is also the latest valid block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   835  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   836                      /* Save the current block header address. If the checksum is incorrect, the function
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   837                       * Fee_LLSearchNextUnknownBlkHeader will try to find older versions only until this
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   838                       * address is reached (end address for the search)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   839                       */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   840                      xAdrBlkHeader_u32 = Fee_GlobInfoLastRdHeader_st.AdrBlkHeader_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   841  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   842                      /* Set corresponding state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   843                      Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_CHECK_BLOCK_CS_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   844                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   845                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   846  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   847                  /* No valid unknown header page was found within the eldest FULL sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   848                  case FEE_ERROR_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   849                  /* The sector end is reached without finding another relevant index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   850                  case FEE_SECTORFULL_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   851                      /* Set the end address for the search */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   852                      xAdrBlkHdAfterbStart_u32 = Fee_FlashProp_st[Fee_LLSectorOrder_st[0].xPhySecIdx_u8].Fee_LogEndAddress_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   853  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   854                      /* Finish the "afterburner" in the next step (the end address of the sector is
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   855                       * set inside the function Fee_LLSearchUnknownBlkHeader) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   856                      Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_PREP_SEARCH_BLK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   857                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   858  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   859                  /* These cases should never be reached (cannot be returned by Fee_LLSearchSpecifiedBlkHeader) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   860                  case FEE_ERASE_SECTOR_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   861                  case FEE_SECTORCHANGE_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   862                  case FEE_BLOCK_INVALIDATED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   863                  case FEE_ABORTED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   864                  case FEE_NUM_RET_VAL_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   865                  default:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   866                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   867                      /* Increment the address to go on with the search of the next block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   868                      Fee_IncAddressInsideSector(&xAdrBlkHdAfterbStart_u32, FEE_PAGE_LEN, TRUE);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   869  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   870                      /* Something went wrong, restart from the beginning */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   871                      Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_INIT_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   872                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   873                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   874              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   875          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   876          break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   877   #else /* Search for an unknown block with cache. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   878          case FEE_LL_REORG_SEARCH_UNK_BLK_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   879          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   880              /* Check if there are entries in cache. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   881              if(xUnknownBlkCacheIdx_u16 < Fee_RdWrOrder_st.Fee_UnknownBlkCacheIdx_u16)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   882             {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   883                  /* The unknown block details is present in the cache.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   884                   * Also, the cache address points to a valid header and valid data.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   885                   * Scan the cache and transfer all the blocks that have address within the oldest sector. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   886                 /* Read the unknown block header to extract the block properties details. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   887                     /* Extract header details for read */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   888                     Fee_RdWrOrder_st.xRdAddress = Fee_UnknownBlkCache_Addr_au32[xUnknownBlkCacheIdx_u16];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   889  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   890                     if (Fls_Read(Fee_RdWrOrder_st.xRdAddress, (uint8*)&Fee_PageBytePtr_cpu8[0], (FEE_PAGES_USED_BY_BLK_HEADER * FEE_PAGE_LEN)) != E_NOT_OK)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   891                     {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   892                         /* Read request is accepted, go to wait state to check the order status */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   893                         Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_SEARCH_UNK_HDRBLK_WAIT_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   894                     }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   895                     else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   896                     {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   897                         /* This error can come only for wrong parameter, development errors */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   898                         xRetVal_en = FEE_ERROR_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   899                     }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   900             }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   901             else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   902             {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   903                 /* All unknown blocks present in the cache has been transfered. Check if there is more area to be scanned in the oldest sector.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   904                  * if yes, build the cache over the remaining area.*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   905                 if(Fee_RdWrOrder_st.Fee_UnknownBlkCacheAdd_u32 < Fee_FlashProp_st[Fee_LLSectorOrder_st[0].xPhySecIdx_u8].Fee_LogEndAddress_u32)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   906                 {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   907                     /* Cache has to be built for remaining area of the sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   908                     Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_CACHEBUILDUP_UNK_BLK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   909  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   910                     /* Clear the index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   911                     xUnknownBlkCacheIdx_u16 = 0;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   912                 }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   913                 else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   914                 {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   915                     /* The oldest sector has been scanned and all unknown blocks are transfered. End the sector change operation */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   916                     /* Set the end address for the search */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   917                     xAdrBlkHdAfterbStart_u32 = Fee_FlashProp_st[Fee_LLSectorOrder_st[0].xPhySecIdx_u8].Fee_LogEndAddress_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   918  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   919                     /* Finish the "afterburner" in the next step (the end address of the sector is set inside the function Fee_LLSearchUnknownBlkHeader) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   920                     Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_PREP_SEARCH_BLK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   921                 }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   922             }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   923          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   924          break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   925  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   926          /* Build cache for unkown block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   927          case FEE_LL_REORG_CACHEBUILDUP_UNK_BLK_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   928          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   929              if(Fee_BuildUpCacheUnknownBlk() != FEE_ORDER_PENDING_E)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   930              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   931                  /* Cache build up is complete. Switch to FEE_LL_REORG_SEARCH_UNK_BLK_E state and transfer the blocks.*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   932                  Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_SEARCH_UNK_BLK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   933              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   934              else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   935              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   936                  /* Cache building is ongoing. Do nothing, wait till complete cache is built */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   937              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   938          }break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   939  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   940          /* Wait state for the header read order of unknown block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   941          case FEE_LL_REORG_SEARCH_UNK_HDRBLK_WAIT_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   942          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   943              /* The next state will be set by the Fee_JobEndNotification () or
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   944               * Fee_JobErrorNotification() function automatically */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   945  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   946              /* Call the Fls main function manually */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   947              Fls_MainFunction();
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   948  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   949              #if (STD_ON == FEE_POLLING_MODE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   950              /* Use the FLS polling mechanism in order to reach the next state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   951              Fee_CheckFlsJobResult();
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   952              #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   953          }break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   954  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   955          /* Error while reading the header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   956          case FEE_LL_REORG_SEARCH_UNK_HDRBLK_READ_ERROR_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   957          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   958              /* Ideally, this state cant be reached, since the header was validated during cache build up.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   959               * It may come here due to hardware error or CACHE corruption. Retry again starting from FEE_LL_REORG_SEARCH_UNK_BLK_E. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   960              Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_SEARCH_UNK_BLK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   961          }break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   962  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   963          /* Header read successful */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   964          case FEE_LL_REORG_SEARCH_UNK_HDRBLK_READ_FINISHED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   965          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   966              /* Prepare header details for transfer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   967              /* Read address and Fee index can be taken from the cache */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   968              Fee_GlobInfoLastRdHeader_st.AdrBlkHeader_u32 = Fee_UnknownBlkCache_Addr_au32[xUnknownBlkCacheIdx_u16];            /* Block header address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   969              Fee_GlobInfoLastRdHeader_st.FeeIndex_u16     = Fee_UnknownBlkCache_FeeIndex_u16[xUnknownBlkCacheIdx_u16];  /* Fee index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   970  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   971              /* Extract the other information of the header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   972              Fee_LLCopyPageBuff2HeaderMid(&xCurrBlkHeader_st, &Fee_PageBytePtr_cpu8[0]);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   973              Fee_LLCopyPageBuff2HeaderEnd(&xCurrBlkHeader_st, &Fee_PageBytePtr_cpu8[0]);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   974  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   975              Fee_GlobInfoLastRdHeader_st.BlkLength_u16    = xCurrBlkHeader_st.BlkLength_u16; /* Block length */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   976              Fee_GlobInfoLastRdHeader_st.BlkStatus_u8     = xCurrBlkHeader_st.BlkStatus_u8;  /* Block status */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   977              Fee_GlobInfoLastRdHeader_st.HdrCrc16_u16     = xCurrBlkHeader_st.HdrCrc16_u16,  /* Crc16 checksum (block header) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   978              Fee_GlobInfoLastRdHeader_st.BlkCrc32_u32     = xCurrBlkHeader_st.BlkCrc32_u32;  /* Crc32 checksum (block data) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   979  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   980              /* Check if the latest copy of the unkown block is in the oldest sector (logical sector 0). */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   981              if((Fee_UnknownBlkCache_Addr_au32[xUnknownBlkCacheIdx_u16] >= Fee_FlashProp_st[Fee_LLSectorOrder_st[0].xPhySecIdx_u8].Fee_LogStartAddress_u32) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   982                 (Fee_UnknownBlkCache_Addr_au32[xUnknownBlkCacheIdx_u16]  < Fee_FlashProp_st[Fee_LLSectorOrder_st[0].xPhySecIdx_u8].Fee_LogEndAddress_u32))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   983              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   984                  /* Latest copy is present in the oldest sector, transfer the block (redundant blocks will be transfered twice as xFee_WriteTwice_b is set to TRUE in init state). */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   985                  Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_WRITE_BLOCK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   986              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   987              else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   988              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   989                  /* The latest copy of the unknown block is present outside the oldest sector. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   990                  /* Perform an additional check for redundant block, to ensure that the 2nd copy is also available outside oldest sector. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   991                  if((Fee_GlobInfoLastRdHeader_st.BlkStatus_u8 & (uint8)FEE_FLAG_SEC_LEVEL_MSK) != FEE_BLK_INT_DOUBLE_STORAGE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   992                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   993                      /* This is a single security block, no more handling required. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   994                      xUnknownBlkCacheIdx_u16++;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   995  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   996                      /* Return to state FEE_LL_REORG_SEARCH_UNK_BLK_E to check if futher entries in cache are available. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   997                      Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_SEARCH_UNK_BLK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   998                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	   999                  else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1000                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1001                      /* Set values in global structure for search. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1002                      Fee_GlobInfoRedundantRdHeader_st = Fee_GlobInfoLastRdHeader_st;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1003  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1004                      /* Go to the state to check availability of 2nd copy. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1005                      Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_REDUNDANT_BLK_CHK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1006                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1007              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1008          }break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1009  #endif /* End of (FEE_RB_ACT_UNKNOWN_BLOCK_CACHE_SIZE == 0) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1010  #endif /* End of ((FEE_RB_ACT_SURVIVAL_EVAL != FALSE) || (FEE_RB_ACT_UNKNOWN_BLOCK_REORG == FALSE)) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1011          /* Function finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1012          case FEE_LL_REORG_FINISHED_E:
	mov	d15,#6
	jeq	d15,d0,.L20
	j	.L21
.L14:
	movh.a	a15,#@his(Fee_Prv_stReorg_u8)
	lea	a15,[a15]@los(Fee_Prv_stReorg_u8)
.L299:
	mov	d0,#1
.L300:
	st.b	[a15],d0
.L301:
	movh.a	a15,#@his(_999003_xBlkIdx_u16)
	lea	a15,[a15]@los(_999003_xBlkIdx_u16)
.L302:
	mov.u	d15,#65535
.L303:
	st.h	[a15],d15
.L304:
	movh.a	a15,#@his(_999002_xSearchRetry_b)
	lea	a15,[a15]@los(_999002_xSearchRetry_b)
.L305:
	mov	d15,#0
.L306:
	st.b	[a15],d15
.L307:
	mov	d15,#1
.L308:
	ld.a	a15,[a10]4
	st.w	[a15],d15
.L309:
	add.a	a2,#4
	ld.w	d0,[a2]
.L310:
	movh.a	a15,#@his(Fee_LLSectorOrder_st)
	lea	a15,[a15]@los(Fee_LLSectorOrder_st)
.L311:
	ld.bu	d15,[a15]8
	sha	d15,#4
.L312:
	movh.a	a15,#@his(Fee_FlashProp_st)
	lea	a15,[a15]@los(Fee_FlashProp_st)
.L313:
	addsc.a	a15,a15,d15,#0
.L314:
	ld.w	d15,[a15]8
.L315:
	jlt.u	d0,d15,.L22
.L316:
	ld.w	d15,[a15]12
.L317:
	jlt.u	d15,d0,.L23
.L318:
	st.w	[a2],d15
.L23:
.L22:
.L15:
	movh.a	a2,#@his(_999003_xBlkIdx_u16)
	lea	a2,[a2]@los(_999003_xBlkIdx_u16)
.L319:
	ld.hu	d15,[a2]0
.L320:
	add	d15,#1
	st.h	[a2],d15
.L321:
	movh.a	a15,#@his(Fee_GlobInfoRedundantRdHeader_st)
	lea	a15,[a15]@los(Fee_GlobInfoRedundantRdHeader_st)
.L322:
	mov	d15,#0
.L323:
	st.w	[a15],d15
.L324:
	mov	d15,#0
.L325:
	st.h	[a15]10,d15
.L326:
	mov	d15,#0
.L327:
	st.b	[a15]14,d15
.L328:
	mov	d15,#0
.L329:
	st.h	[a15]12,d15
.L330:
	mov	d15,#0
.L331:
	st.h	[a15]8,d15
.L332:
	mov	d15,#0
.L333:
	st.w	[a15]4,d15
.L334:
	movh.a	a15,#@his(_999004_xFee_WriteTwice_b)
	lea	a15,[a15]@los(_999004_xFee_WriteTwice_b)
.L335:
	mov	d15,#1
.L336:
	st.b	[a15],d15
.L337:
	ld.hu	d15,[a2]0
.L338:
	jlt.u	d15,#12,.L24
.L339:
	mov	d15,#6
.L340:
	ld.a	a15,[a10]4
	st.w	[a15],d15
.L341:
	j	.L25
.L24:
	movh.a	a15,#@his(Fee_BlockProperties_st)
	lea	a15,[a15]@los(Fee_BlockProperties_st)
.L342:
	sha	d15,#4
.L343:
	addsc.a	a15,a15,d15,#0
.L344:
	ld.hu	d4,[a15]0
	call	Fee_LLGetAddressFromCache
.L222:
	mov	d15,d2
.L227:
	call	Fee_LLGetCacheUpdateStForAllSect
.L226:
	jne	d15,d10,.L26
.L345:
	jne	d2,#0,.L27
.L26:
	movh.a	a15,#@his(_999001_xAdrBlkHeader_u32)
	lea	a15,[a15]@los(_999001_xAdrBlkHeader_u32)
.L346:
	mov	d15,#-1
.L228:
	st.w	[a15],d15
.L347:
	movh.a	a15,#@his(_999002_xSearchRetry_b)
	lea	a15,[a15]@los(_999002_xSearchRetry_b)
.L348:
	mov	d15,#0
.L349:
	st.b	[a15],d15
.L350:
	mov	d15,#2
.L351:
	ld.a	a15,[a10]4
	st.w	[a15],d15
.L352:
	j	.L28
.L27:
	j	.L29
.L28:
.L16:
	movh.a	a2,#@his(_999003_xBlkIdx_u16)
	lea	a2,[a2]@los(_999003_xBlkIdx_u16)
	st.a	[a10],a2
.L353:
	movh.a	a14,#@his(_999002_xSearchRetry_b)
	lea	a14,[a14]@los(_999002_xSearchRetry_b)
.L354:
	movh.a	a13,#@his(Fee_BlockProperties_st)
	lea	a13,[a13]@los(Fee_BlockProperties_st)
.L355:
	movh.a	a12,#@his(_999001_xAdrBlkHeader_u32)
	lea	a12,[a12]@los(_999001_xAdrBlkHeader_u32)
.L356:
	movh.a	a15,#@his(Fee_GlobInfoLastRdHeader_st)
	lea	a15,[a15]@los(Fee_GlobInfoLastRdHeader_st)
.L357:
	ld.hu	d15,[a2]0
	sha	d15,#4
.L358:
	addsc.a	a2,a13,d15,#0
.L359:
	ld.hu	d4,[a2]0
.L360:
	ld.bu	d5,[a14]
	mov.aa	a4,a12
	mov.aa	a5,a15
	call	Fee_LLSearchSpecifiedBlkHeader
.L229:
	mov	d15,#0
	jeq	d15,d2,.L30
.L361:
	mov	d15,#1
	jeq	d15,d2,.L31
.L362:
	mov	d15,#2
	jeq	d15,d2,.L32
.L363:
	mov	d15,#3
	jeq	d15,d2,.L33
.L364:
	mov	d15,#4
	jeq	d15,d2,.L34
.L365:
	mov	d15,#5
	jeq	d15,d2,.L35
.L366:
	mov	d15,#6
	jeq	d15,d2,.L36
.L367:
	mov	d15,#7
	jeq	d15,d2,.L37
.L368:
	mov	d15,#9
	jeq	d15,d2,.L38
	j	.L39
.L30:
	j	.L40
.L31:
	ld.w	d5,[a15]
.L369:
	st.w	[a12],d5
.L370:
	ld.bu	d15,[a14]
.L371:
	jeq	d15,#0,.L41
.L372:
	ld.a	a15,[a10]
	ld.hu	d15,[a15]0
	sha	d15,#4
.L373:
	addsc.a	a15,a13,d15,#0
.L374:
	ld.hu	d4,[a15]0
.L375:
	call	Fee_LLUpdateAddressInCache
.L41:
	mov	d15,#3
.L376:
	ld.a	a15,[a10]4
	st.w	[a15],d15
.L377:
	j	.L42
.L33:
	mov	d15,#1
.L378:
	ld.a	a15,[a10]4
	st.w	[a15],d15
.L379:
	j	.L43
.L36:
	mov	d15,#1
.L380:
	st.b	[a14],d15
.L381:
	j	.L44
.L37:
.L34:
.L35:
.L32:
.L38:
.L39:
	ld.a	a15,[a10]
	ld.hu	d15,[a15]0
	sha	d15,#4
.L382:
	addsc.a	a15,a13,d15,#0
.L383:
	ld.hu	d4,[a15]0
.L384:
	mov.u	d5,#51966
	addih	d5,d5,#45054
	call	Fee_LLUpdateAddressInCache
.L230:
	mov	d15,#0
.L385:
	ld.a	a15,[a10]4
	st.w	[a15],d15
.L386:
	j	.L45
.L45:
.L44:
.L43:
.L42:
.L40:
	j	.L46
.L17:
	movh.a	a12,#@his(Fee_GlobInfoLastRdHeader_st)
	lea	a12,[a12]@los(Fee_GlobInfoLastRdHeader_st)
	mov.aa	a4,a12
.L231:
	call	Fee_LLCalcBlkCrcInFlash
.L232:
	mov	d15,#0
	jeq	d15,d2,.L47
.L387:
	mov	d15,#1
	jeq	d15,d2,.L48
.L388:
	mov	d15,#2
	jeq	d15,d2,.L49
.L389:
	mov	d15,#3
	jeq	d15,d2,.L50
.L390:
	mov	d15,#4
	jeq	d15,d2,.L51
.L391:
	mov	d15,#5
	jeq	d15,d2,.L52
.L392:
	mov	d15,#6
	jeq	d15,d2,.L53
.L393:
	mov	d15,#7
	jeq	d15,d2,.L54
.L394:
	mov	d15,#9
	jeq	d15,d2,.L55
	j	.L56
.L47:
	j	.L57
.L48:
	movh.a	a15,#@his(Fee_LLSectorOrder_st)
	lea	a15,[a15]@los(Fee_LLSectorOrder_st)
.L395:
	ld.bu	d15,[a15]8
.L233:
	sha	d15,#4
.L234:
	movh.a	a2,#@his(Fee_FlashProp_st)
	lea	a2,[a2]@los(Fee_FlashProp_st)
.L396:
	addsc.a	a15,a2,d15,#0
.L397:
	ld.w	d0,[a12]
.L398:
	ld.w	d15,[a15]8
.L399:
	jlt.u	d0,d15,.L58
.L400:
	ld.w	d15,[a15]12
.L401:
	jge.u	d0,d15,.L59
.L402:
	movh.a	a15,#@his(Fee_Prv_stReorg_u8)
	lea	a15,[a15]@los(Fee_Prv_stReorg_u8)
	ld.bu	d15,[a15]
.L403:
	jeq	d15,#1,.L60
.L404:
	jne	d15,#2,.L61
.L405:
	ld.bu	d15,[a12]14
.L406:
	jnz.t	d15:4,.L62
.L407:
	mov	d15,#0
	jeq	d15,#0,.L63
.L62:
.L60:
	mov	d15,#5
.L408:
	ld.a	a15,[a10]4
	st.w	[a15],d15
.L409:
	j	.L64
.L63:
.L61:
	mov	d9,#1
.L410:
	mov	d15,#1
.L411:
	ld.a	a15,[a10]4
	st.w	[a15],d15
.L64:
	j	.L65
.L59:
.L58:
	ld.bu	d15,[a12]14
.L412:
	jnz.t	d15:0,.L66
.L413:
	mov	d9,#1
.L414:
	mov	d15,#1
.L415:
	ld.a	a15,[a10]4
	st.w	[a15],d15
.L416:
	j	.L67
.L66:
	movh.a	a15,#@his(Fee_GlobInfoRedundantRdHeader_st)
	lea	a15,[a15]@los(Fee_GlobInfoRedundantRdHeader_st)
.L417:
	lea	a2,[a12]0
.L418:
	lea	a15,[a15]0
	mov.a	a4,#3
.L68:
	ld.w	d15,[a2+]
	st.w	[a15+],d15
	loop	a4,.L68
.L419:
	mov	d15,#4
.L420:
	ld.a	a15,[a10]4
	st.w	[a15],d15
.L67:
.L65:
	j	.L69
.L50:
	mov	d15,#2
.L421:
	st.w	[a15],d15
.L422:
	movh.a	a15,#@his(_999002_xSearchRetry_b)
	lea	a15,[a15]@los(_999002_xSearchRetry_b)
.L423:
	mov	d15,#1
.L424:
	st.b	[a15],d15
.L425:
	j	.L70
.L54:
.L51:
.L52:
.L53:
.L49:
.L55:
.L56:
	mov	d15,#0
.L426:
	st.w	[a15],d15
.L427:
	j	.L71
.L71:
.L70:
.L69:
.L57:
	j	.L72
.L18:
	movh.a	a12,#@his(Fee_GlobInfoRedundantRdHeader_st)
	lea	a12,[a12]@los(Fee_GlobInfoRedundantRdHeader_st)
	mov.aa	a4,a12
.L235:
	call	Fee_LLRedundantCpyChk
.L236:
	mov	d15,#0
	jeq	d15,d2,.L73
.L428:
	mov	d15,#1
	jeq	d15,d2,.L74
.L429:
	mov	d15,#2
	jeq	d15,d2,.L75
.L430:
	mov	d15,#3
	jeq	d15,d2,.L76
.L431:
	mov	d15,#4
	jeq	d15,d2,.L77
.L432:
	mov	d15,#5
	jeq	d15,d2,.L78
.L433:
	mov	d15,#6
	jeq	d15,d2,.L79
.L434:
	mov	d15,#7
	jeq	d15,d2,.L80
.L435:
	mov	d15,#9
	jeq	d15,d2,.L81
	j	.L82
.L73:
	j	.L83
.L74:
	movh.a	a15,#@his(Fee_LLSectorOrder_st)
	lea	a15,[a15]@los(Fee_LLSectorOrder_st)
.L436:
	ld.bu	d15,[a15]8
.L237:
	sha	d15,#4
.L238:
	movh.a	a15,#@his(Fee_FlashProp_st)
	lea	a15,[a15]@los(Fee_FlashProp_st)
.L437:
	addsc.a	a15,a15,d15,#0
.L438:
	ld.w	d0,[a12]
.L439:
	ld.w	d15,[a15]8
.L440:
	jlt.u	d0,d15,.L84
.L441:
	ld.w	d15,[a15]12
.L442:
	jge.u	d0,d15,.L85
.L443:
	movh.a	a15,#@his(_999004_xFee_WriteTwice_b)
	lea	a15,[a15]@los(_999004_xFee_WriteTwice_b)
.L444:
	mov	d15,#0
.L445:
	st.b	[a15],d15
.L446:
	mov	d15,#5
.L447:
	ld.a	a15,[a10]4
	st.w	[a15],d15
.L448:
	j	.L86
.L85:
.L84:
	mov	d9,#1
.L449:
	mov	d15,#1
.L450:
	ld.a	a15,[a10]4
	st.w	[a15],d15
.L86:
	j	.L87
.L76:
	movh.a	a15,#@his(_999004_xFee_WriteTwice_b)
	lea	a15,[a15]@los(_999004_xFee_WriteTwice_b)
.L451:
	mov	d15,#0
.L452:
	st.b	[a15],d15
.L453:
	mov	d15,#5
.L454:
	ld.a	a15,[a10]4
	st.w	[a15],d15
.L455:
	j	.L88
.L79:
.L80:
.L77:
.L78:
.L75:
.L81:
.L82:
	mov	d15,#0
.L456:
	st.w	[a15],d15
.L457:
	j	.L89
.L89:
.L88:
.L87:
.L83:
	j	.L90
.L19:
	movh.a	a4,#@his(Fee_GlobInfoLastRdHeader_st)
.L239:
	lea	a4,[a4]@los(Fee_GlobInfoLastRdHeader_st)
.L458:
	movh.a	a15,#@his(_999004_xFee_WriteTwice_b)
	lea	a15,[a15]@los(_999004_xFee_WriteTwice_b)
	ld.bu	d4,[a15]
	call	Fee_LLCpyBlkFromFls2Fls
.L240:
	mov	d15,#0
	jeq	d15,d2,.L91
.L459:
	mov	d15,#1
	jeq	d15,d2,.L92
.L460:
	mov	d15,#2
	jeq	d15,d2,.L93
.L461:
	mov	d15,#3
	jeq	d15,d2,.L94
.L462:
	mov	d15,#4
	jeq	d15,d2,.L95
.L463:
	mov	d15,#5
	jeq	d15,d2,.L96
.L464:
	mov	d15,#6
	jeq	d15,d2,.L97
.L465:
	mov	d15,#7
	jeq	d15,d2,.L98
.L466:
	mov	d15,#9
	jeq	d15,d2,.L99
	j	.L100
.L91:
	j	.L101
.L92:
	mov	d9,#1
.L467:
	mov	d15,#1
.L468:
	ld.a	a15,[a10]4
	st.w	[a15],d15
.L469:
	j	.L102
.L94:
.L97:
.L98:
.L95:
.L96:
.L93:
.L99:
.L100:
	mov	d15,#0
.L470:
	ld.a	a15,[a10]4
	st.w	[a15],d15
.L471:
	j	.L103
.L103:
.L102:
.L101:
	j	.L104
.L20:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1013          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1014              /* The sector reorganization is almost finished. The following steps have to be done:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1015               * - Write the "ERASE REQUEST" marker into the sector that needs to get erased
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1016               * - Reorganize the sector order structure
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1017               */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1018  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1019              /* Get the physical sector index of the eldest logical sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1020              xPhySecIdx_u8 = Fee_LLSectorOrder_st[0].xPhySecIdx_u8;
	movh.a	a12,#@his(Fee_LLSectorOrder_st)
	lea	a12,[a12]@los(Fee_LLSectorOrder_st)
.L472:
	ld.bu	d10,[a12]8
.L242:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1021  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1022              /* Write the erase request marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1023              if(Fee_LLWriteMarker(xPhySecIdx_u8, FEE_ERASE_REQUEST_ID_E) != FEE_ORDER_PENDING_E)
	mov	d5,#4
	mov	d4,d10
.L243:
	call	Fee_LLWriteMarker
.L241:
	jeq	d2,#0,.L105
.L473:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1024              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1025                  /* Error reaction not necessary (no free space available in the marker section
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1026                   * or read or write error in the marker section)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1027                   * --> RAM structure will be set and used for the detection of a necessary erase
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1028                   *     procedure as long as the Fee_Init is not passed again.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1029                   * --> If init is passed, the sector detection will recognize this sector as
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1030                   *     the oldest one and execute an erase because the threshold for the sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1031                   *     reorganization is passed automatically. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1032  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1033                  /* Loop over all sectors and reorganize the sector order:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1034                   * - The previous 1st sector is now the eldest one (the logical index 0)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1035                   * - The previous 2nd sector is now the 1st sector, ...
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1036                   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1037                  for(xLogSecIdx_u8=0; xLogSecIdx_u8<(FEE_NUM_FLASH_BANKS-1); xLogSecIdx_u8++)
	mov	d0,#0
.L244:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1038                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1039                      /* Reorganize the sector order */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1040                      Fee_LLSectorOrder_st[xLogSecIdx_u8] = Fee_LLSectorOrder_st[xLogSecIdx_u8+1];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1041  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1042                      /* Reorganize the array Ram table */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1043                      Fee_idxLLSectorOrder_au8[Fee_LLSectorOrder_st[xLogSecIdx_u8].xPhySecIdx_u8] = xLogSecIdx_u8;
	movh.a	a2,#@his(Fee_idxLLSectorOrder_au8)
	lea	a2,[a2]@los(Fee_idxLLSectorOrder_au8)
.L474:
	movh.a	a4,#@his(Fee_NumFlashBanksUsed_u8)
	lea	a4,[a4]@los(Fee_NumFlashBanksUsed_u8)
	ld.bu	d1,[a4]
.L475:
	add	d1,#-1
.L476:
	j	.L106
.L107:
	mul	d15,d0,#12
.L477:
	addsc.a	a15,a12,d15,#0
.L478:
	lea	a5,[a15]12
.L479:
	lea	a6,[a15]0
	mov.a	a7,#2
.L108:
	ld.w	d2,[a5+]
	st.w	[a6+],d2
	loop	a7,.L108
.L480:
	ld.bu	d15,[a15]8
.L481:
	addsc.a	a15,a2,d15,#0
.L482:
	st.b	[a15],d0
.L483:
	add	d0,#1
.L245:
	extr.u	d0,d0,#0,#8
.L106:
	jlt	d0,d1,.L107
.L484:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1044                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1045  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1046                  /* Update the state information of the last sector in the ring */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1047                  Fee_LLSectorOrder_st[FEE_NUM_FLASH_BANKS-1].SecState_en     = FEE_SECTOR_REQUEST2ERASE_E;
	ld.bu	d15,[a4]
.L485:
	mul	d15,d15,#12
	addsc.a	a15,a12,d15,#0
	lea	a15,[a15]-12
.L486:
	mov	d15,#4
.L487:
	st.w	[a15]4,d15
.L488:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1048                  Fee_LLSectorOrder_st[FEE_NUM_FLASH_BANKS-1].xPhySecIdx_u8   = xPhySecIdx_u8;
	st.b	[a15]8,d10
.L489:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1049                  Fee_LLSectorOrder_st[FEE_NUM_FLASH_BANKS-1].SecChngCnt_u32  = FEE_SEC_CHANGE_CNT_UNDEF;
	mov	d15,#-1
.L490:
	st.w	[a15],d15
.L491:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1050  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1051                  Fee_idxLLSectorOrder_au8[xPhySecIdx_u8] = FEE_NUM_FLASH_BANKS-1;
	addsc.a	a15,a2,d10,#0
.L492:
	st.b	[a15],d1
.L493:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1052  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1053                  /* Sector reorganization is completely finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1054                  xRetVal_en = FEE_ORDER_FINISHED_E;
	mov	d8,#1
.L105:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1055              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1056  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1057              /* Hint: forcing an erase sequence immediately in case the erase request marker cannot be
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1058               *       written might lead to an erase sequence in the shutdown phase
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1059               *       --> restarting the sector reorganization in the next driving cycle is better
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1060               *           (which will be done automatically in case the eldest sector is not erased) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1061  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1062          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1063          break;
	j	.L109

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1064  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1065          /* This state should never be reached */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1066          default:
.L21:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1067          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1068              /* Set the error return */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1069              xRetVal_en = FEE_ERROR_E;
	mov	d8,#3
.L494:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1070          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1071          break;
	j	.L110

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1072      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1073  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1074  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1075      /* Take over the local value for the interruptability of the sector reorganization */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1076      *SectReorgInterSt_pb = xSectReorgInterSt_b;
.L110:
.L109:
.L104:
.L90:
.L72:
.L46:
.L29:
.L25:
	ld.a	a15,[a10]8
.L246:
	st.b	[a15],d9
.L495:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1077  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1078      /* Evaluate the result of the function returns */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1079      if(xRetVal_en != FEE_ORDER_PENDING_E)
	jeq	d8,#0,.L111
.L496:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1080      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1081          /* Set the internal sector reorganization state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1082          Fee_Prv_stReorg_u8 = FEE_PRV_ST_REORG_IDLE;
	movh.a	a15,#@his(Fee_Prv_stReorg_u8)
.L247:
	lea	a15,[a15]@los(Fee_Prv_stReorg_u8)
.L497:
	mov	d15,#0
.L498:
	st.b	[a15],d15
.L499:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1083  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1084          /* Reset the state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1085          Fee_RdWrOrder_st.Fee_LLSecReorg_en = FEE_LL_REORG_INIT_E;
	mov	d15,#0
.L500:
	ld.a	a15,[a10]4
	st.w	[a15],d15
.L501:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1086  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1087          /* Reset start search indicator */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1088          xSearchRetry_b = FALSE;
	movh.a	a15,#@his(_999002_xSearchRetry_b)
	lea	a15,[a15]@los(_999002_xSearchRetry_b)
.L502:
	mov	d15,#0
.L503:
	st.b	[a15],d15
.L111:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1089  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1090          #if (FEE_PRV_DEBUGGING != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1091          Fee_Prv_stModuleTest_st.Fee_ReorgTimeEnd_u32 = Mcu_Rb_GetSysTimePart(TIM2);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1092  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1093          /* MISRA RULE 10.8 VIOLATION: Below type cast is ok as this is only for testing purpose to measure the time. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1094          Fee_Prv_stModuleTest_st.Fee_ReorgTimeDiff_u32 = (uint32)MCU_RB_TIM2TICKS_TO_MS(
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1095                  Fee_Prv_stModuleTest_st.Fee_ReorgTimeEnd_u32 -
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1096                  Fee_Prv_stModuleTest_st.Fee_ReorgTimeStart_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1097  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1098          if(Fee_Prv_stModuleTest_st.Fee_ReorgTimeDiff_u32 >
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1099             Fee_Prv_stModuleTest_st.Fee_ReorgTimeDiffMax_u32)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1100          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1101              Fee_Prv_stModuleTest_st.Fee_ReorgTimeDiffMax_u32 =
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1102                      Fee_Prv_stModuleTest_st.Fee_ReorgTimeDiff_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1103          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1104  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1105          /* Update max time for sector reorg */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1106          if (Fee_Prv_stModuleTest_st.Fee_ReorgCntStart_u32 > Fee_Prv_stModuleTest_st.Fee_ReorgCntDiffMax_u32)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1107          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1108              Fee_Prv_stModuleTest_st.Fee_ReorgCntDiffMax_u32 = Fee_Prv_stModuleTest_st.Fee_ReorgCntStart_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1109          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1110          #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1111      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1112      #if (FEE_PRV_DEBUGGING != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1113      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1114      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1115          /* Increment the count call counter */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1116          Fee_Prv_stModuleTest_st.Fee_ReorgCntStart_u32++;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1117      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1118      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1119  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1120      return (xRetVal_en);
	mov	d2,d8
.L248:
	j	.L112

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1121  }
.L112:
	ret
.L189:
	
__Fee_LLSectorReorganization_function_end:
	.size	Fee_LLSectorReorganization,__Fee_LLSectorReorganization_function_end-Fee_LLSectorReorganization
.L170:
	; End of function
	
	.sdecl	'.text.rba_FeeFs1_LlSectorHandling.Fee_LLRedundantCpyChk',code,cluster('Fee_LLRedundantCpyChk')
	.sect	'.text.rba_FeeFs1_LlSectorHandling.Fee_LLRedundantCpyChk'
	.align	2
	

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1122  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1123  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1124   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1125   * Fee_LLRedundantCpyChk():
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1126   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1127   * This function searches the 2nd copy of redundnat block (both unknown and known blocks).
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1128   * It checks for both header and data validity.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1129   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1130   * Attention: the search is without cache!
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1131   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1132   * \param    xFee_GlobInfoRedundantRdHeader_pst: Details of the block that must searched.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1133   *                                  The address of the valid block is returned in xFee_GlobInfoRedundantRdHeader_pst.AdrBlkHeader_u32
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1134   * \return   Function result
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1135   * \retval   FEE_ORDER_PENDING_E:   Order is still pending
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1136   * \retval   FEE_ERROR_E:           An internal error occured
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1137   * \retval   FEE_ORDER_FINISHED_E:  Block search finished successfully
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1138   * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1139   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1140   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1141   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1142  static Fee_stRetVal_ten Fee_LLRedundantCpyChk(Fee_GlobInfoLastRdHeader_tst * xFee_GlobInfoRedundantRdHeader_pst)
; Function Fee_LLRedundantCpyChk
.L156:
Fee_LLRedundantCpyChk:	.type	func
	mov.aa	a15,a4
.L250:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1143  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1144      Fee_stRetVal_ten    xRetVal_en              = FEE_ORDER_PENDING_E;  /* Function return */
	mov	d8,#0
.L252:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1145      Fee_stRetVal_ten    xTmpRetVal_en           = FEE_ORDER_PENDING_E;  /* Return value from called functions */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1146      static uint16       xFeeIndex_u16;                                  /* Fee index which is required to be searched. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1147      static uint32       xAdrLastBlkHeader_u32;                          /* Address for limit the search */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1148      static uint32       xAdrFirstBlkHeader_u32;                         /* Address of the first copy, required to restore cache contents at the end. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1149  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1150      switch (Fee_RdWrOrder_st.Fee_LLRedundantCpyChk_en)
	movh.a	a2,#@his(Fee_RdWrOrder_st)
	lea	a2,[a2]@los(Fee_RdWrOrder_st)
.L508:
	lea	a12,[a2]44
	ld.w	d0,[a12]
.L509:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1151      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1152          /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1153          case FEE_LL_REDUNDANT_CPY_CHK_INIT_E:
	mov	d15,#0
	jeq	d15,d0,.L113
.L510:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1154          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1155              /* Copy the Fee index into local static variable that must be searched again. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1156              xFeeIndex_u16 = xFee_GlobInfoRedundantRdHeader_pst->FeeIndex_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1157  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1158              /* Copy the address of the first copy to restore the cache contents later. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1159              xAdrFirstBlkHeader_u32 = xFee_GlobInfoRedundantRdHeader_pst->AdrBlkHeader_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1160  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1161              /* Limit the address for search. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1162              xAdrLastBlkHeader_u32 = xFee_GlobInfoRedundantRdHeader_pst->AdrBlkHeader_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1163  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1164              /* Go to next state to search the header. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1165              Fee_RdWrOrder_st.Fee_LLRedundantCpyChk_en = FEE_LL_REDUNDANT_CPY_CHK_SEARCH_HDR_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1166          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1167          break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1168  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1169          /* Search header of redundant copy */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1170          case FEE_LL_REDUNDANT_CPY_CHK_SEARCH_HDR_E:
	mov	d15,#1
	jeq	d15,d0,.L114
.L511:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1171          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1172              /* Search for the redundant block header with the given FeeIdx.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1173               * The end address for the search is set with the variable xAdrLastBlkHeader_u32. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1174              xTmpRetVal_en = Fee_LLSearchSpecifiedBlkHeader(xFeeIndex_u16,                               /* FeeIdx */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1175                                                             &xAdrLastBlkHeader_u32,                      /* End address for the search */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1176                                                             xFee_GlobInfoRedundantRdHeader_pst,           /* Result structure */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1177                                                             TRUE);                                       /* Indicate always a retry */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1178  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1179              /* Evaluate the search result */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1180              switch (xTmpRetVal_en)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1181              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1182                  /* Order not finished yet */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1183                  case FEE_ORDER_PENDING_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1184                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1185                      /* Just wait */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1186                      ;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1187                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1188                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1189  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1190                  /* A valid block header was found */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1191                  case FEE_ORDER_FINISHED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1192                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1193                      /* Calculate block checksum in flash to check if the block is valid */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1194                      Fee_RdWrOrder_st.Fee_LLRedundantCpyChk_en = FEE_LL_REDUNDANT_CPY_CHK_BLK_CS_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1195                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1196                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1197  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1198                  case FEE_ERROR_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1199                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1200                      /* No valid header was found within the complete flash (all sectors have been checked)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1201                       * Return ERROR and this will trigger write of the block. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1202                      /* The fee index was updated to 0xFFFF as no copy was found, restore it to the correct value. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1203                      xFee_GlobInfoRedundantRdHeader_pst->FeeIndex_u16 = xFeeIndex_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1204  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1205                      xRetVal_en = FEE_ERROR_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1206                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1207                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1208  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1209                  /* These cases should never be reached here (cannot be returned by Fee_LLSearchSpecifiedBlkHeader) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1210                  case FEE_ABORTED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1211                  case FEE_BLOCK_INVALIDATED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1212                  case FEE_NUM_RET_VAL_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1213                  case FEE_ERASE_SECTOR_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1214                  case FEE_SECTORCHANGE_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1215                  case FEE_SECTORFULL_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1216                  default:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1217                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1218                      /* The fee index was updated to 0xFFFF as no copy was found, restore it to the correct value. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1219                      xFee_GlobInfoRedundantRdHeader_pst->FeeIndex_u16 = xFeeIndex_u16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1220  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1221                      /* Return an error */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1222                      xRetVal_en = FEE_ABORTED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1223                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1224                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1225              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1226          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1227          break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1228  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1229          /* Validate data CRC of redundant copy */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1230          case FEE_LL_REDUNDANT_CPY_CHK_BLK_CS_E:
	mov	d1,#2
	jeq	d1,d0,.L115
	j	.L116
.L113:
	movh.a	a2,#@his(_999005_xFeeIndex_u16)
	lea	a2,[a2]@los(_999005_xFeeIndex_u16)
.L512:
	ld.hu	d0,[a15]12
.L513:
	st.h	[a2],d0
.L514:
	ld.w	d0,[a15]
.L515:
	movh.a	a15,#@his(_999007_xAdrFirstBlkHeader_u32)
.L251:
	lea	a15,[a15]@los(_999007_xAdrFirstBlkHeader_u32)
.L516:
	st.w	[a15],d0
.L517:
	movh.a	a15,#@his(_999006_xAdrLastBlkHeader_u32)
	lea	a15,[a15]@los(_999006_xAdrLastBlkHeader_u32)
.L518:
	st.w	[a15],d0
.L519:
	mov	d0,#1
.L520:
	st.w	[a12],d0
.L521:
	j	.L117
.L114:
	movh.a	a13,#@his(_999005_xFeeIndex_u16)
	lea	a13,[a13]@los(_999005_xFeeIndex_u16)
	ld.hu	d4,[a13]0
.L522:
	movh.a	a4,#@his(_999006_xAdrLastBlkHeader_u32)
.L249:
	lea	a4,[a4]@los(_999006_xAdrLastBlkHeader_u32)
.L523:
	mov	d5,#1
	mov.aa	a5,a15
.L253:
	call	Fee_LLSearchSpecifiedBlkHeader
.L254:
	mov	d15,#0
	jeq	d15,d2,.L118
.L524:
	mov	d15,#1
	jeq	d15,d2,.L119
.L525:
	mov	d15,#2
	jeq	d15,d2,.L120
.L526:
	mov	d15,#3
	jeq	d15,d2,.L121
.L527:
	mov	d15,#4
	jeq	d15,d2,.L122
.L528:
	mov	d15,#5
	jeq	d15,d2,.L123
.L529:
	mov	d15,#6
	jeq	d15,d2,.L124
.L530:
	mov	d15,#7
	jeq	d15,d2,.L125
.L531:
	mov	d15,#9
	jeq	d15,d2,.L126
	j	.L127
.L118:
	j	.L128
.L119:
	mov	d15,#2
.L532:
	st.w	[a12],d15
.L533:
	j	.L129
.L121:
	ld.hu	d15,[a13]0
.L534:
	st.h	[a15]12,d15
.L535:
	mov	d8,#3
.L536:
	j	.L130
.L124:
.L120:
.L126:
.L125:
.L122:
.L123:
.L127:
	ld.hu	d15,[a13]0
.L537:
	st.h	[a15]12,d15
.L538:
	mov	d8,#6
.L539:
	j	.L131
.L131:
.L130:
.L129:
.L128:
	j	.L132
.L115:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1231          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1232              /* Calculate the block CRC */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1233              xTmpRetVal_en = Fee_LLCalcBlkCrcInFlash(xFee_GlobInfoRedundantRdHeader_pst);
	mov.aa	a4,a15
	call	Fee_LLCalcBlkCrcInFlash
.L255:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1234  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1235              /* Evaluate the result */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1236              switch (xTmpRetVal_en)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1237              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1238                  /* Order is still pending */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1239                  case FEE_ORDER_PENDING_E:
	mov	d15,#0
	jeq	d15,d2,.L133
.L540:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1240                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1241                      /* Just wait */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1242                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1243                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1244  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1245                  /* Order is finished with success (block CRC is correct) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1246                  case FEE_ORDER_FINISHED_E:
	mov	d15,#1
	jeq	d15,d2,.L134
.L541:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1247                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1248                      /* Redundant copy was found, return success to upper layer. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1249                      xRetVal_en = FEE_ORDER_FINISHED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1250                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1251                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1252  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1253                  /* The checksum is invalid (block CRC is incorrect) or a read error occurred */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1254                  case FEE_ERROR_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1255                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1256                      /* Error during CRC detected -> search further */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1257                      /* Limit the address to search to avoid revalidating the same block again. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1258                      xAdrLastBlkHeader_u32 = xFee_GlobInfoRedundantRdHeader_pst->AdrBlkHeader_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1259  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1260                      /* Search for an older copy */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1261                      Fee_RdWrOrder_st.Fee_LLRedundantCpyChk_en = FEE_LL_REDUNDANT_CPY_CHK_SEARCH_HDR_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1262                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1263                  break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1264  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1265                  /* These states should never be reached (cannot be returned by Fee_LLCalcBlkCrcInFlash) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1266                  case FEE_BLOCK_INVALIDATED_E:
	mov	d15,#2
	jeq	d15,d2,.L135
.L542:
	mov	d15,#3
	jeq	d15,d2,.L136
.L543:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1267                  case FEE_NUM_RET_VAL_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1268                  case FEE_ERASE_SECTOR_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1269                  case FEE_SECTORCHANGE_E:
	mov	d15,#4
	jeq	d15,d2,.L137
.L544:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1270                  case FEE_SECTORFULL_E:
	mov	d15,#5
	jeq	d15,d2,.L138
.L545:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1271                  case FEE_ABORTED_E:
	mov	d15,#6
	jeq	d15,d2,.L139
.L546:
	mov	d15,#7
	jeq	d15,d2,.L140
.L547:
	mov	d15,#9
	jeq	d15,d2,.L141
	j	.L142
.L133:
	j	.L143
.L134:
	mov	d8,#1
.L548:
	j	.L144
.L136:
	movh.a	a2,#@his(_999006_xAdrLastBlkHeader_u32)
	lea	a2,[a2]@los(_999006_xAdrLastBlkHeader_u32)
.L549:
	ld.w	d15,[a15]
.L550:
	st.w	[a2],d15
.L551:
	mov	d15,#1
.L552:
	st.w	[a12],d15
.L553:
	j	.L145
.L135:
.L141:
.L140:
.L137:
.L138:
.L139:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1272                  default:
.L142:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1273                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1274                      /* Return an error */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1275                      xRetVal_en = FEE_ABORTED_E;
	mov	d8,#6
.L554:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1276                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1277                  break;
	j	.L146

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1278              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1279          }
.L146:
.L145:
.L144:
.L143:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1280          break;
	j	.L147

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1281  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1282          default:
.L116:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1283          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1284              /* Return an error */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1285              xRetVal_en = FEE_ABORTED_E;
	mov	d8,#6
.L555:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1286          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1287          break;
	j	.L148

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1288      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1289  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1290      /* Reset state machine if necessary */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1291      if (xRetVal_en != FEE_ORDER_PENDING_E)
.L148:
.L147:
.L132:
.L117:
	jeq	d8,#0,.L149
.L556:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1292      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1293          /* Reset state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1294          Fee_RdWrOrder_st.Fee_LLRedundantCpyChk_en = FEE_LL_REDUNDANT_CPY_CHK_INIT_E;
	mov	d15,#0
.L557:
	st.w	[a12],d15
.L558:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1295  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1296          /* The cache could have been updated with the address of the second valid version or invalidated if block was not found.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1297           * As safety, restore the cache with the address of the latest copy */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1298          Fee_LLUpdateAddressInCache(xFeeIndex_u16, xAdrFirstBlkHeader_u32);
	movh.a	a15,#@his(_999005_xFeeIndex_u16)
	lea	a15,[a15]@los(_999005_xFeeIndex_u16)
	ld.hu	d4,[a15]0
.L559:
	movh.a	a15,#@his(_999007_xAdrFirstBlkHeader_u32)
	lea	a15,[a15]@los(_999007_xAdrFirstBlkHeader_u32)
	ld.w	d5,[a15]
	call	Fee_LLUpdateAddressInCache
.L149:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1299      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1300  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1301      return (xRetVal_en);
	mov	d2,d8
.L256:
	j	.L150

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1302  }
.L150:
	ret
.L199:
	
__Fee_LLRedundantCpyChk_function_end:
	.size	Fee_LLRedundantCpyChk,__Fee_LLRedundantCpyChk_function_end-Fee_LLRedundantCpyChk
.L175:
	; End of function
	
	.sdecl	'.bss.rba_FeeFs1_LlSectorHandling.Fee_GlobInfoRedundantRdHeader_st',data,cluster('Fee_GlobInfoRedundantRdHeader_st')
	.sect	'.bss.rba_FeeFs1_LlSectorHandling.Fee_GlobInfoRedundantRdHeader_st'
	.align	4
Fee_GlobInfoRedundantRdHeader_st:	.type	object
	.size	Fee_GlobInfoRedundantRdHeader_st,16
	.space	16
	.sdecl	'.bss.rba_FeeFs1_LlSectorHandling._999001_xAdrBlkHeader_u32',data,cluster('_999001_xAdrBlkHeader_u32')
	.sect	'.bss.rba_FeeFs1_LlSectorHandling._999001_xAdrBlkHeader_u32'
	.align	4
_999001_xAdrBlkHeader_u32:	.type	object
	.size	_999001_xAdrBlkHeader_u32,4
	.space	4
	.sdecl	'.bss.rba_FeeFs1_LlSectorHandling._999002_xSearchRetry_b',data,cluster('_999002_xSearchRetry_b')
	.sect	'.bss.rba_FeeFs1_LlSectorHandling._999002_xSearchRetry_b'
_999002_xSearchRetry_b:	.type	object
	.size	_999002_xSearchRetry_b,1
	.space	1
	.sdecl	'.bss.rba_FeeFs1_LlSectorHandling._999003_xBlkIdx_u16',data,cluster('_999003_xBlkIdx_u16')
	.sect	'.bss.rba_FeeFs1_LlSectorHandling._999003_xBlkIdx_u16'
	.align	2
_999003_xBlkIdx_u16:	.type	object
	.size	_999003_xBlkIdx_u16,2
	.space	2
	.sdecl	'.bss.rba_FeeFs1_LlSectorHandling._999004_xFee_WriteTwice_b',data,cluster('_999004_xFee_WriteTwice_b')
	.sect	'.bss.rba_FeeFs1_LlSectorHandling._999004_xFee_WriteTwice_b'
_999004_xFee_WriteTwice_b:	.type	object
	.size	_999004_xFee_WriteTwice_b,1
	.space	1
	.sdecl	'.bss.rba_FeeFs1_LlSectorHandling._999005_xFeeIndex_u16',data,cluster('_999005_xFeeIndex_u16')
	.sect	'.bss.rba_FeeFs1_LlSectorHandling._999005_xFeeIndex_u16'
	.align	2
_999005_xFeeIndex_u16:	.type	object
	.size	_999005_xFeeIndex_u16,2
	.space	2
	.sdecl	'.bss.rba_FeeFs1_LlSectorHandling._999006_xAdrLastBlkHeader_u32',data,cluster('_999006_xAdrLastBlkHeader_u32')
	.sect	'.bss.rba_FeeFs1_LlSectorHandling._999006_xAdrLastBlkHeader_u32'
	.align	4
_999006_xAdrLastBlkHeader_u32:	.type	object
	.size	_999006_xAdrLastBlkHeader_u32,4
	.space	4
	.sdecl	'.bss.rba_FeeFs1_LlSectorHandling._999007_xAdrFirstBlkHeader_u32',data,cluster('_999007_xAdrFirstBlkHeader_u32')
	.sect	'.bss.rba_FeeFs1_LlSectorHandling._999007_xAdrFirstBlkHeader_u32'
	.align	4
_999007_xAdrFirstBlkHeader_u32:	.type	object
	.size	_999007_xAdrFirstBlkHeader_u32,4
	.space	4
	.calls	'Fee_LLCheckReorganizationNeed','Fee_CalculateNumOfFreeBytesInCurSector'
	.calls	'Fee_LLCheckReorganizationNeed','Fee_GetPhysSectorByAddress'
	.calls	'Fee_LLSectorReorganization','Fee_LLGetAddressFromCache'
	.calls	'Fee_LLSectorReorganization','Fee_LLGetCacheUpdateStForAllSect'
	.calls	'Fee_LLSectorReorganization','Fee_LLSearchSpecifiedBlkHeader'
	.calls	'Fee_LLSectorReorganization','Fee_LLUpdateAddressInCache'
	.calls	'Fee_LLSectorReorganization','Fee_LLCalcBlkCrcInFlash'
	.calls	'Fee_LLSectorReorganization','Fee_LLRedundantCpyChk'
	.calls	'Fee_LLSectorReorganization','Fee_LLCpyBlkFromFls2Fls'
	.calls	'Fee_LLSectorReorganization','Fee_LLWriteMarker'
	.calls	'Fee_LLRedundantCpyChk','Fee_LLSearchSpecifiedBlkHeader'
	.calls	'Fee_LLRedundantCpyChk','Fee_LLCalcBlkCrcInFlash'
	.calls	'Fee_LLRedundantCpyChk','Fee_LLUpdateAddressInCache'
	.calls	'Fee_LLCheckReorganizationNeed','',0
	.calls	'Fee_LLSectorReorganization','',16
	.extern	Fee_FlashProp_st
	.extern	Fee_RdWrOrder_st
	.extern	Fee_LLSectorOrder_st
	.extern	Fee_GlobInfoLastRdHeader_st
	.extern	Fee_Prv_stReorg_u8
	.extern	Fee_NumFlashBanksUsed_u8
	.extern	Fee_idxLLSectorOrder_au8
	.extern	Fee_BlockProperties_st
	.extern	Fee_CalculateNumOfFreeBytesInCurSector
	.extern	Fee_GetPhysSectorByAddress
	.extern	Fee_LLWriteMarker
	.extern	Fee_LLSearchSpecifiedBlkHeader
	.extern	Fee_LLCalcBlkCrcInFlash
	.extern	Fee_LLCpyBlkFromFls2Fls
	.extern	Fee_LLGetAddressFromCache
	.extern	Fee_LLUpdateAddressInCache
	.extern	Fee_LLGetCacheUpdateStForAllSect
	.calls	'Fee_LLRedundantCpyChk','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L158:
	.word	16902
	.half	3
	.word	.L159
	.byte	4
.L157:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSectorHandling.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L160
.L180:
	.byte	2
	.byte	'unsigned int',0,4,7,3
	.byte	'Fee_SrvRoundUp',0,3,1,140,11,21
	.word	160
	.byte	1,1,4
	.byte	'value_u32',0,1,140,11,43
	.word	160
	.byte	4
	.byte	'stepsize_u32',0,1,140,11,62
	.word	160
	.byte	5,0,6
	.byte	'Fee_CalculateNumOfFreeBytesInCurSector',0,1,160,8,31
	.word	160
	.byte	1,1,1,1,4
	.byte	'DataEndAdr_u32',0,1,160,8,91
	.word	160
	.byte	0
.L185:
	.byte	2
	.byte	'unsigned char',0,1,8,6
	.byte	'Fee_GetPhysSectorByAddress',0,1,171,8,31
	.word	323
	.byte	1,1,1,1,4
	.byte	'Address_u32',0,1,171,8,81
	.word	160
	.byte	0
.L178:
	.byte	7,1,137,2,9,4,8
	.byte	'FEE_ORDER_PENDING_E',0,0,8
	.byte	'FEE_ORDER_FINISHED_E',0,1,8
	.byte	'FEE_BLOCK_INVALIDATED_E',0,2,8
	.byte	'FEE_ERROR_E',0,3,8
	.byte	'FEE_SECTORCHANGE_E',0,4,8
	.byte	'FEE_SECTORFULL_E',0,5,8
	.byte	'FEE_ABORTED_E',0,6,8
	.byte	'FEE_ERASE_SECTOR_E',0,7,8
	.byte	'FEE_SEARCH_ABORTED_E',0,8,8
	.byte	'FEE_NUM_RET_VAL_E',0,9,0,6
	.byte	'Fee_LLWriteMarker',0,1,174,8,41
	.word	402
	.byte	1,1,1,1,4
	.byte	'PhySectIdx_u8',0,1,174,8,81
	.word	323
	.byte	4
	.byte	'MarkerID_u8',0,1,175,8,81
	.word	323
	.byte	0
.L182:
	.byte	2
	.byte	'unsigned short int',0,2,7,9
	.word	160
.L204:
	.byte	10,1,227,5,9,16,11
	.byte	'AdrBlkHeader_u32',0
	.word	160
	.byte	4,2,35,0,11
	.byte	'BlkCrc32_u32',0
	.word	160
	.byte	4,2,35,4,11
	.byte	'HdrCrc16_u16',0
	.word	690
	.byte	2,2,35,8,11
	.byte	'BlkLength_u16',0
	.word	690
	.byte	2,2,35,10,11
	.byte	'FeeIndex_u16',0
	.word	690
	.byte	2,2,35,12,11
	.byte	'BlkStatus_u8',0
	.word	323
	.byte	1,2,35,14,0
.L200:
	.byte	9
	.word	717
	.byte	6
	.byte	'Fee_LLSearchSpecifiedBlkHeader',0,1,188,8,41
	.word	402
	.byte	1,1,1,1,4
	.byte	'FeeIdx_u16',0,1,188,8,95
	.word	690
	.byte	4
	.byte	'LastHdrAddr_ptr',0,1,189,8,112
	.word	712
	.byte	4
	.byte	'GlobBlkHdr_ptr',0,1,190,8,134,1
	.word	861
	.byte	4
	.byte	'SearchRetry_b',0,1,191,8,96
	.word	323
	.byte	0,12
	.word	717
	.byte	9
	.word	1004
	.byte	6
	.byte	'Fee_LLCalcBlkCrcInFlash',0,1,212,8,41
	.word	402
	.byte	1,1,1,1,4
	.byte	'HeaderInfo_pcst',0,1,212,8,129,1
	.word	1009
	.byte	0,6
	.byte	'Fee_LLCpyBlkFromFls2Fls',0,1,213,8,41
	.word	402
	.byte	1,1,1,1,4
	.byte	'Fee_GlobInfoLastRdHeader_pcst',0,1,213,8,129,1
	.word	1009
	.byte	4
	.byte	'Fee_WriteTwice_b',0,1,213,8,168,1
	.word	323
	.byte	0
.L190:
	.byte	9
	.word	323
	.byte	6
	.byte	'Fee_LLGetAddressFromCache',0,1,161,9,31
	.word	160
	.byte	1,1,1,1,4
	.byte	'FeeIdx_u16',0,1,161,9,80
	.word	690
	.byte	0,13
	.byte	'Fee_LLUpdateAddressInCache',0,1,163,9,31,1,1,1,1,4
	.byte	'FeeIdx_u16',0,1,163,9,81
	.word	690
	.byte	4
	.byte	'Addr_u32',0,1,164,9,81
	.word	160
	.byte	0,14
	.byte	'Fee_LLGetCacheUpdateStForAllSect',0,1,168,9,30
	.word	323
	.byte	1,1,1,1,15
	.word	176
	.byte	16
	.word	203
	.byte	16
	.word	222
	.byte	5,0,17,1,9
	.word	1386
	.byte	18
	.byte	'__codeptr',0,2,1,1
	.word	1388
	.byte	2
	.byte	'char',0,1,6,18
	.byte	'sint8',0,3,76,25
	.word	1411
	.byte	18
	.byte	'uint8',0,3,81,25
	.word	323
	.byte	18
	.byte	'uint16',0,3,91,25
	.word	690
	.byte	18
	.byte	'uint32',0,3,106,24
	.word	160
	.byte	2
	.byte	'unsigned long long int',0,8,7,18
	.byte	'uint64',0,3,111,30
	.word	1477
	.byte	18
	.byte	'boolean',0,3,127,25
	.word	323
	.byte	18
	.byte	'StatusType',0,4,191,1,27
	.word	323
	.byte	18
	.byte	'Std_ReturnType',0,4,199,1,15
	.word	323
	.byte	10,4,206,1,9,8,11
	.byte	'vendorID',0
	.word	690
	.byte	2,2,35,0,11
	.byte	'moduleID',0
	.word	690
	.byte	2,2,35,2,11
	.byte	'sw_major_version',0
	.word	323
	.byte	1,2,35,4,11
	.byte	'sw_minor_version',0
	.word	323
	.byte	1,2,35,5,11
	.byte	'sw_patch_version',0
	.word	323
	.byte	1,2,35,6,0,18
	.byte	'Std_VersionInfoType',0,4,213,1,3
	.word	1578
	.byte	10,5,93,9,8,11
	.byte	'Class',0
	.word	323
	.byte	1,2,35,0,11
	.byte	'TIN',0
	.word	323
	.byte	1,2,35,1,11
	.byte	'ReturnAddress',0
	.word	160
	.byte	4,2,35,4,0,18
	.byte	'OsTrapInfoType',0,5,97,3
	.word	1728
	.byte	19,68
	.word	160
	.byte	20,16,0,10,5,154,1,9,68,11
	.byte	'store',0
	.word	1808
	.byte	68,2,35,0,0,19,68
	.word	1817
	.byte	20,0,0,18
	.byte	'Os_JumpBufType',0,5,156,1,3
	.word	1839
	.byte	18
	.byte	'Os_StackTraceType',0,5,174,1,18
	.word	160
	.byte	10,5,175,1,9,8,11
	.byte	'sp',0
	.word	160
	.byte	4,2,35,0,11
	.byte	'ctx',0
	.word	160
	.byte	4,2,35,4,0,18
	.byte	'Os_StackValueType',0,5,175,1,63
	.word	1899
	.byte	18
	.byte	'Os_StackSizeType',0,5,176,1,27
	.word	1899
	.byte	21,1,1,9
	.word	1984
	.byte	18
	.byte	'Os_VoidVoidFunctionType',0,5,179,1,16
	.word	1987
	.byte	18
	.byte	'ApplicationType',0,5,193,1,23
	.word	323
	.byte	22
	.byte	'Os_ApplicationConfigurationType_s',0,5,198,1,16,2,11
	.byte	'app_id',0
	.word	323
	.byte	1,2,35,0,11
	.byte	'access',0
	.word	323
	.byte	1,2,35,1,0,18
	.byte	'Os_ApplicationConfigurationType',0,5,201,1,3
	.word	2050
	.byte	18
	.byte	'Os_CoreStateType',0,5,203,1,16
	.word	160
	.byte	18
	.byte	'AreaIdType',0,5,204,1,16
	.word	690
	.byte	18
	.byte	'Os_PeripheralAddressType',0,5,212,1,22
	.word	160
	.byte	18
	.byte	'TickType',0,5,221,1,22
	.word	160
	.byte	18
	.byte	'Os_StopwatchTickType',0,5,225,1,22
	.word	160
	.byte	18
	.byte	'Os_Lockable',0,5,234,1,18
	.word	712
	.byte	18
	.byte	'CoreIdType',0,5,236,1,16
	.word	690
	.byte	18
	.byte	'SpinlockIdType',0,5,237,1,16
	.word	690
	.byte	7,5,239,1,9,4,8
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,8
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,18
	.byte	'TryToGetSpinlockType',0,5,239,1,74
	.word	2357
	.byte	7,5,174,2,9,4,8
	.byte	'APPLICATION_ACCESSIBLE',0,0,8
	.byte	'APPLICATION_RESTARTING',0,1,8
	.byte	'APPLICATION_TERMINATED',0,2,0,18
	.byte	'ApplicationStateType',0,5,174,2,92
	.word	2450
	.byte	23
	.byte	'void',0,9
	.word	2562
	.byte	24,1,1,25
	.word	323
	.byte	25
	.word	2568
	.byte	0,9
	.word	2573
	.byte	18
	.byte	'Os_FunctionEntryType',0,5,183,2,16
	.word	2587
	.byte	22
	.byte	'Os_MeterInfoType_s',0,5,193,2,16,48,11
	.byte	'elapsed',0
	.word	160
	.byte	4,2,35,0,11
	.byte	'previous',0
	.word	160
	.byte	4,2,35,4,11
	.byte	'max',0
	.word	160
	.byte	4,2,35,8,11
	.byte	'cumulative',0
	.word	160
	.byte	4,2,35,12,11
	.byte	'stackbase',0
	.word	1899
	.byte	8,2,35,16,11
	.byte	'stackusage',0
	.word	1899
	.byte	8,2,35,24,11
	.byte	'stackmax',0
	.word	1899
	.byte	8,2,35,32,11
	.byte	'stackbudget',0
	.word	1899
	.byte	8,2,35,40,0,18
	.byte	'Os_MeterInfoType',0,5,202,2,3
	.word	2622
	.byte	9
	.word	2622
	.byte	18
	.byte	'Os_MeterInfoRefType',0,5,203,2,50
	.word	2820
	.byte	18
	.byte	'EventMaskType',0,5,206,2,15
	.word	323
	.byte	18
	.byte	'Os_imaskType',0,5,211,2,16
	.word	160
	.byte	22
	.byte	'Os_ISRDynType_s',0,5,213,2,16,48,11
	.byte	'meter',0
	.word	2622
	.byte	48,2,35,0,0,18
	.byte	'Os_ISRDynType',0,5,215,2,3
	.word	2899
	.byte	9
	.word	2899
	.byte	12
	.word	2960
	.byte	22
	.byte	'Os_ISRType_s',0,5,216,2,16,24,11
	.byte	'entry_function',0
	.word	1992
	.byte	4,2,35,0,11
	.byte	'dynamic',0
	.word	2965
	.byte	4,2,35,4,11
	.byte	'imask',0
	.word	160
	.byte	4,2,35,8,11
	.byte	'stackbudget',0
	.word	1899
	.byte	8,2,35,12,11
	.byte	'access',0
	.word	323
	.byte	1,2,35,20,11
	.byte	'application',0
	.word	323
	.byte	1,2,35,21,0,18
	.byte	'Os_ISRType',0,5,223,2,3
	.word	2970
	.byte	9
	.word	1984
	.byte	12
	.word	2970
	.byte	9
	.word	3129
	.byte	18
	.byte	'ISRType',0,5,224,2,46
	.word	3134
	.byte	18
	.byte	'Os_bitmask',0,5,239,2,22
	.word	160
	.byte	18
	.byte	'Os_pset0Type',0,5,240,2,20
	.word	160
	.byte	18
	.byte	'Os_pset1Type',0,5,241,2,20
	.word	160
	.byte	18
	.byte	'Os_pset2Type',0,5,242,2,20
	.word	160
	.byte	26,5,243,2,9,4,11
	.byte	'p0',0
	.word	160
	.byte	4,2,35,0,11
	.byte	'p1',0
	.word	160
	.byte	4,2,35,0,11
	.byte	'p2',0
	.word	160
	.byte	4,2,35,0,0,18
	.byte	'Os_psetType',0,5,247,2,3
	.word	3242
	.byte	26,5,249,2,9,4,11
	.byte	't0',0
	.word	160
	.byte	4,2,35,0,11
	.byte	't1',0
	.word	160
	.byte	4,2,35,0,11
	.byte	't2',0
	.word	160
	.byte	4,2,35,0,0,18
	.byte	'Os_tpmaskType',0,5,253,2,3
	.word	3306
	.byte	18
	.byte	'Os_ActivationCountType',0,5,254,2,23
	.word	323
	.byte	22
	.byte	'Os_TaskDynType_s',0,5,128,3,16,120,11
	.byte	'terminate_jump_buf',0
	.word	1848
	.byte	68,2,35,0,11
	.byte	'meter',0
	.word	2622
	.byte	48,2,35,68,11
	.byte	'activation_count',0
	.word	323
	.byte	1,2,35,116,0,18
	.byte	'Os_TaskDynType',0,5,132,3,3
	.word	3404
	.byte	19,68
	.word	1817
	.byte	20,0,0,9
	.word	3404
	.byte	12
	.word	3530
	.byte	22
	.byte	'Os_TaskType_s',0,5,134,3,16,40,11
	.byte	'dynamic',0
	.word	3535
	.byte	4,2,35,0,11
	.byte	'entry_function',0
	.word	1992
	.byte	4,2,35,4,11
	.byte	'pset',0
	.word	3242
	.byte	4,2,35,8,11
	.byte	'base_tpmask',0
	.word	3306
	.byte	4,2,35,12,11
	.byte	'tpmask',0
	.word	3306
	.byte	4,2,35,16,11
	.byte	'core_id',0
	.word	690
	.byte	2,2,35,20,11
	.byte	'index',0
	.word	160
	.byte	4,2,35,24,11
	.byte	'stackbudget',0
	.word	1899
	.byte	8,2,35,28,11
	.byte	'activation_count',0
	.word	323
	.byte	1,2,35,36,11
	.byte	'access',0
	.word	323
	.byte	1,2,35,37,11
	.byte	'application',0
	.word	323
	.byte	1,2,35,38,0,18
	.byte	'Os_TaskType',0,5,146,3,3
	.word	3540
	.byte	12
	.word	3540
	.byte	9
	.word	3790
	.byte	18
	.byte	'TaskType',0,5,147,3,47
	.word	3795
	.byte	27
	.byte	'Os_TaskStateType',0,5,155,3,6,4,8
	.byte	'SUSPENDED',0,0,8
	.byte	'READY',0,1,8
	.byte	'WAITING',0,2,8
	.byte	'RUNNING',0,3,0,18
	.byte	'TaskStateType',0,5,156,3,31
	.word	3818
	.byte	26,5,167,3,3,4,11
	.byte	'tpmask',0
	.word	3306
	.byte	4,2,35,0,0,22
	.byte	'Os_ResourceDynType_s',0,5,166,3,16,4,11
	.byte	'saved_priority',0
	.word	3905
	.byte	4,2,35,0,0,18
	.byte	'Os_ResourceDynType',0,5,170,3,3
	.word	3928
	.byte	9
	.word	3928
	.byte	12
	.word	4008
	.byte	22
	.byte	'Os_ResourceType_s',0,5,171,3,16,12,11
	.byte	'dynamic',0
	.word	4013
	.byte	4,2,35,0,11
	.byte	'tpmask',0
	.word	3306
	.byte	4,2,35,4,11
	.byte	'access',0
	.word	323
	.byte	1,2,35,8,0,18
	.byte	'Os_ResourceType',0,5,175,3,3
	.word	4018
	.byte	10,5,181,3,9,12,11
	.byte	'maxallowedvalue',0
	.word	160
	.byte	4,2,35,0,11
	.byte	'ticksperbase',0
	.word	160
	.byte	4,2,35,4,11
	.byte	'mincycle',0
	.word	160
	.byte	4,2,35,8,0,18
	.byte	'AlarmBaseType',0,5,185,3,3
	.word	4117
	.byte	10,5,206,3,9,8,11
	.byte	'Running',0
	.word	323
	.byte	1,2,35,0,11
	.byte	'Pending',0
	.word	323
	.byte	1,2,35,1,11
	.byte	'Delay',0
	.word	160
	.byte	4,2,35,4,0,18
	.byte	'Os_CounterStatusType',0,5,210,3,3
	.word	4212
	.byte	28
	.word	323
	.byte	1,1,9
	.word	4298
	.byte	18
	.byte	'Os_CounterIncrAdvType',0,5,217,3,22
	.word	4305
	.byte	22
	.byte	's_swd',0,5,222,3,12,4,11
	.byte	'count',0
	.word	160
	.byte	4,2,35,0,0,26,5,221,3,3,4,11
	.byte	'sw',0
	.word	4341
	.byte	4,2,35,0,0,22
	.byte	'Os_CounterDynType_s',0,5,220,3,16,4,11
	.byte	'type_dependent',0
	.word	4369
	.byte	4,2,35,0,0,18
	.byte	'Os_CounterDynType',0,5,226,3,3
	.word	4388
	.byte	9
	.word	4388
	.byte	12
	.word	4466
	.byte	22
	.byte	'Os_CounterType_s',0,5,227,3,16,28,11
	.byte	'dynamic',0
	.word	4471
	.byte	4,2,35,0,11
	.byte	'advincr',0
	.word	4310
	.byte	4,2,35,4,11
	.byte	'base',0
	.word	4117
	.byte	12,2,35,8,11
	.byte	'core',0
	.word	2568
	.byte	4,2,35,20,11
	.byte	'access',0
	.word	323
	.byte	1,2,35,24,11
	.byte	'application',0
	.word	323
	.byte	1,2,35,25,0,18
	.byte	'Os_CounterType',0,5,234,3,3
	.word	4476
	.byte	9
	.word	4298
	.byte	12
	.word	4476
	.byte	9
	.word	4628
	.byte	18
	.byte	'CounterType',0,5,235,3,52
	.word	4633
	.byte	27
	.byte	'Os_ScheduleTableStatusType',0,5,240,3,6,4,8
	.byte	'SCHEDULETABLE_STOPPED',0,0,8
	.byte	'SCHEDULETABLE_NEXT',0,1,8
	.byte	'SCHEDULETABLE_WAITING',0,2,8
	.byte	'SCHEDULETABLE_RUNNING',0,3,8
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,18
	.byte	'ScheduleTableStatusType',0,5,241,3,41
	.word	4659
	.byte	12
	.word	.L257-.L158
	.byte	9
	.word	4859
	.byte	18
	.byte	'ScheduleTableType',0,5,128,4,58
	.word	4864
	.byte	22
	.byte	'Os_ScheduleTableDynType_s',0,5,130,4,16,16,11
	.byte	'match',0
	.word	160
	.byte	4,2,35,0,11
	.byte	'next',0
	.word	4869
	.byte	4,2,35,4,11
	.byte	'state',0
	.word	4659
	.byte	4,2,35,8,11
	.byte	'config',0
	.word	690
	.byte	2,2,35,12,0,9
	.word	4896
	.byte	12
	.word	4989
.L257:
	.byte	22
	.byte	'Os_ScheduleTableType_s',0,5,247,3,16,16,11
	.byte	'dynamic',0
	.word	4994
	.byte	4,2,35,0,11
	.byte	'counter',0
	.word	4638
	.byte	4,2,35,4,11
	.byte	'repeat',0
	.word	323
	.byte	1,2,35,8,11
	.byte	'config',0
	.word	690
	.byte	2,2,35,10,11
	.byte	'initial',0
	.word	323
	.byte	1,2,35,12,11
	.byte	'access',0
	.word	323
	.byte	1,2,35,13,11
	.byte	'application',0
	.word	323
	.byte	1,2,35,14,0,18
	.byte	'Os_ScheduleTableType',0,5,255,3,3
	.word	4999
	.byte	12
	.word	4999
	.byte	9
	.word	5179
	.byte	12
	.word	4476
	.byte	9
	.word	5189
	.byte	29
	.word	2292
	.byte	29
	.word	3242
	.byte	29
	.word	3139
	.byte	29
	.word	3800
	.byte	29
	.word	3306
	.byte	29
	.word	323
	.byte	29
	.word	3800
	.byte	22
	.byte	'Os_ControlledCoreType_s',0,5,251,6,16,112,11
	.byte	'TrapInfo',0
	.word	1728
	.byte	8,2,35,0,11
	.byte	'lock_taskaccess',0
	.word	5199
	.byte	4,2,35,8,11
	.byte	'ReadyTasks',0
	.word	5204
	.byte	4,2,35,12,11
	.byte	'RunningISR',0
	.word	5209
	.byte	4,2,35,16,11
	.byte	'RunningTask',0
	.word	5214
	.byte	4,2,35,20,11
	.byte	'RunningTPMask',0
	.word	5219
	.byte	4,2,35,24,11
	.byte	'CurrentMeteredObject',0
	.word	2825
	.byte	4,2,35,28,11
	.byte	'IdleMeter',0
	.word	2622
	.byte	48,2,35,32,11
	.byte	'AppAccess',0
	.word	323
	.byte	1,2,35,80,11
	.byte	'AppOverride',0
	.word	5224
	.byte	1,2,35,81,11
	.byte	'GetStackValueAdjust',0
	.word	1899
	.byte	8,2,35,84,11
	.byte	'InErrorHook',0
	.word	323
	.byte	1,2,35,92,11
	.byte	'ChainTaskRef',0
	.word	5229
	.byte	4,2,35,96,11
	.byte	'GetStackUsageAdjust',0
	.word	1899
	.byte	8,2,35,100,11
	.byte	'InProtectionHook',0
	.word	323
	.byte	1,2,35,108,11
	.byte	'CoreIsActive',0
	.word	323
	.byte	1,2,35,109,11
	.byte	'InShutdownHook',0
	.word	323
	.byte	1,2,35,110,0,18
	.byte	'Os_ControlledCoreType',0,5,141,7,3
	.word	5234
	.byte	9
	.word	160
	.byte	12
	.word	2970
	.byte	9
	.word	5690
	.byte	12
	.word	3540
	.byte	9
	.word	5700
	.byte	9
	.word	2622
	.byte	22
	.byte	'Os_AnyCoreType_s',0,5,151,7,16,96,11
	.byte	'DisableAllImask',0
	.word	160
	.byte	4,2,35,0,11
	.byte	'SuspendAllImask',0
	.word	160
	.byte	4,2,35,4,11
	.byte	'SuspendOSImask',0
	.word	160
	.byte	4,2,35,8,11
	.byte	'DisableAllCount',0
	.word	160
	.byte	4,2,35,12,11
	.byte	'SuspendAllCount',0
	.word	160
	.byte	4,2,35,16,11
	.byte	'SuspendOSCount',0
	.word	160
	.byte	4,2,35,20,11
	.byte	'RestartJumpBuf',0
	.word	1848
	.byte	68,2,35,24,11
	.byte	'Restartable',0
	.word	323
	.byte	1,2,35,92,0,18
	.byte	'Os_AnyCoreType',0,5,160,7,3
	.word	5715
	.byte	18
	.byte	'unsigned_int',0,6,116,22
	.word	160
	.byte	7,7,31,9,4,8
	.byte	'MEMIF_JOB_OK',0,0,8
	.byte	'MEMIF_JOB_FAILED',0,1,8
	.byte	'MEMIF_JOB_PENDING',0,2,8
	.byte	'MEMIF_JOB_CANCELED',0,3,8
	.byte	'MEMIF_BLOCK_INCONSISTENT',0,4,8
	.byte	'MEMIF_BLOCK_INVALID',0,5,0,18
	.byte	'MemIf_JobResultType',0,7,39,2
	.word	5977
	.byte	7,7,41,9,4,8
	.byte	'MEMIF_MODE_SLOW',0,0,8
	.byte	'MEMIF_MODE_FAST',0,1,0,18
	.byte	'MemIf_ModeType',0,7,45,2
	.word	6135
	.byte	18
	.byte	'PduIdType',0,8,22,19
	.word	690
	.byte	18
	.byte	'PduLengthType',0,8,26,19
	.word	690
	.byte	7,9,113,9,4,8
	.byte	'TP_DATACONF',0,0,8
	.byte	'TP_DATARETRY',0,1,8
	.byte	'TP_CONFPENDING',0,2,0,18
	.byte	'TpDataStateType',0,9,118,3
	.word	6240
	.byte	18
	.byte	'Can_IdType',0,10,32,16
	.word	160
	.byte	18
	.byte	'Can_HwHandleType',0,10,43,16
	.word	690
	.byte	18
	.byte	'Can_TxObjPriorityClassType',0,11,219,3,16
	.word	160
	.byte	22
	.byte	'Can_TxHwObjectConfigType',0,11,231,3,16,8,11
	.byte	'MsgObjId',0
	.word	323
	.byte	1,2,35,0,11
	.byte	'HwControllerId',0
	.word	323
	.byte	1,2,35,1,11
	.byte	'TxObjPriorityClass',0
	.word	160
	.byte	4,2,35,4,0,18
	.byte	'Can_TxHwObjectConfigType',0,11,252,3,3
	.word	6396
	.byte	22
	.byte	'Can_RxHwObjectConfigType',0,11,129,4,16,12,11
	.byte	'MaskRef',0
	.word	160
	.byte	4,2,35,0,11
	.byte	'MsgId',0
	.word	160
	.byte	4,2,35,4,11
	.byte	'MsgObjId',0
	.word	323
	.byte	1,2,35,8,11
	.byte	'HwControllerId',0
	.word	323
	.byte	1,2,35,9,0,18
	.byte	'Can_RxHwObjectConfigType',0,11,147,4,3
	.word	6532
	.byte	19,4
	.word	323
	.byte	20,3,0,22
	.byte	'Can_ControllerMOMapConfigType',0,11,181,4,16,4,11
	.byte	'ControllerMOMap',0
	.word	6672
	.byte	4,2,35,0,0,18
	.byte	'Can_ControllerMOMapConfigType',0,11,184,4,3
	.word	6681
	.byte	22
	.byte	'Can_NPCRValueType',0,11,188,4,16,2,11
	.byte	'Can_NPCRValue',0
	.word	690
	.byte	2,2,35,0,0,18
	.byte	'Can_NPCRValueType',0,11,191,4,3
	.word	6782
	.byte	22
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,11,194,4,16,8,11
	.byte	'CanControllerBaudrate',0
	.word	160
	.byte	4,2,35,0,11
	.byte	'CanControllerBaudrateCfg',0
	.word	690
	.byte	2,2,35,4,0,18
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,11,198,4,3
	.word	6857
	.byte	12
	.word	6857
	.byte	9
	.word	7022
	.byte	22
	.byte	'Can_BaudrateConfigPtrType',0,11,201,4,16,4,11
	.byte	'Can_kBaudrateConfigPtr',0
	.word	7027
	.byte	4,2,35,0,0,18
	.byte	'Can_BaudrateConfigPtrType',0,11,204,4,3
	.word	7032
	.byte	22
	.byte	'Can_EventHandlingType',0,11,226,4,16,4,11
	.byte	'CanEventType',0
	.word	6672
	.byte	4,2,35,0,0,18
	.byte	'Can_EventHandlingType',0,11,229,4,3
	.word	7132
	.byte	18
	.byte	'Rte_TransformerErrorCode',0,12,130,1,15
	.word	323
	.byte	18
	.byte	'Rte_TransformerClass',0,12,131,1,15
	.word	323
	.byte	10,12,168,1,9,12,11
	.byte	'in',0
	.word	2568
	.byte	4,2,35,0,11
	.byte	'out',0
	.word	2568
	.byte	4,2,35,4,11
	.byte	'used',0
	.word	690
	.byte	2,2,35,8,11
	.byte	'lost_data',0
	.word	323
	.byte	1,2,35,10,0,18
	.byte	'Rte_QDynType',0,12,173,1,3
	.word	7278
	.byte	7,12,175,1,9,4,8
	.byte	'RTE_DRA',0,0,8
	.byte	'RTE_WOWP',0,1,8
	.byte	'RTE_TASK',0,2,8
	.byte	'RTE_ARE',0,3,8
	.byte	'RTE_EV',0,4,8
	.byte	'RTE_MSI',0,5,0,18
	.byte	'Rte_NotificationType',0,12,182,1,3
	.word	7365
	.byte	19,128,8
	.word	323
	.byte	20,255,7,0,18
	.byte	'Impl_NVM_DstPtrType_1024',0,13,50,15
	.word	7463
	.byte	18
	.byte	'CanIf_u32_impl',0,13,69,16
	.word	160
	.byte	18
	.byte	'CanIf_u16_impl',0,13,71,16
	.word	690
	.byte	18
	.byte	'CanIf_u8_impl',0,13,73,15
	.word	323
	.byte	18
	.byte	'CanIf_ControllerModeType_Enum_impl',0,13,88,15
	.word	323
	.byte	18
	.byte	'CanIf_PduModeType_Enum_impl',0,13,90,15
	.word	323
	.byte	10,13,92,9,2,11
	.byte	'DeviceMode',0
	.word	323
	.byte	1,2,35,0,11
	.byte	'ChannelMode',0
	.word	323
	.byte	1,2,35,1,0,18
	.byte	'CanIf_ControllerStateType_struct_impl',0,13,95,3
	.word	7654
	.byte	18
	.byte	'CanIf_NotifStatusType_Enum_impl',0,13,100,15
	.word	323
	.byte	18
	.byte	'CanSM_boolean_Impl',0,13,120,15
	.word	323
	.byte	18
	.byte	'CanSM_u8_Impl',0,13,123,15
	.word	323
	.byte	18
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,13,128,1,15
	.word	323
	.byte	18
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,13,132,1,15
	.word	323
	.byte	18
	.byte	'CanSM_u16_Impl',0,13,136,1,16
	.word	690
	.byte	18
	.byte	'CanSM_TimerStateType_Enum_impl',0,13,138,1,15
	.word	323
	.byte	10,13,140,1,9,4,11
	.byte	'cntTick_u16',0
	.word	690
	.byte	2,2,35,0,11
	.byte	'stTimer',0
	.word	323
	.byte	1,2,35,2,0,18
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,13,143,1,3
	.word	7995
	.byte	18
	.byte	'Com_impl_u16',0,13,154,1,16
	.word	690
	.byte	18
	.byte	'Com_impl_u8',0,13,157,1,15
	.word	323
	.byte	18
	.byte	'ComM_uint32_Impl',0,13,173,1,16
	.word	160
	.byte	18
	.byte	'ComM_uint16_Impl',0,13,175,1,16
	.word	690
	.byte	18
	.byte	'ComM_uint8_Impl',0,13,177,1,15
	.word	323
	.byte	18
	.byte	'ComM_bool_Impl',0,13,179,1,15
	.word	323
	.byte	10,13,181,1,9,24,11
	.byte	'ChannelState_e',0
	.word	160
	.byte	4,2,35,0,11
	.byte	'LightTimeoutCtr_u32',0
	.word	160
	.byte	4,2,35,4,11
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	690
	.byte	2,2,35,8,11
	.byte	'ChannelMode_u8',0
	.word	323
	.byte	1,2,35,10,11
	.byte	'BusSmMode_u8',0
	.word	323
	.byte	1,2,35,11,11
	.byte	'UserRequestCtr_u8',0
	.word	323
	.byte	1,2,35,12,11
	.byte	'PassiveRequestState_u8',0
	.word	323
	.byte	1,2,35,13,11
	.byte	'PncRequestCtr_u8',0
	.word	323
	.byte	1,2,35,14,11
	.byte	'InhibitionReqStatus_u8',0
	.word	323
	.byte	1,2,35,15,11
	.byte	'NmNetworkRequestStatus_b',0
	.word	323
	.byte	1,2,35,16,11
	.byte	'DiagnosticRequestState_b',0
	.word	323
	.byte	1,2,35,17,11
	.byte	'CommunicationAllowed_b',0
	.word	323
	.byte	1,2,35,18,11
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	323
	.byte	1,2,35,19,11
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	323
	.byte	1,2,35,20,11
	.byte	'NmNetworkModeStatus_b',0
	.word	323
	.byte	1,2,35,21,0,18
	.byte	'ComM_ChannelStruct_Impl',0,13,197,1,3
	.word	8227
	.byte	10,13,206,1,9,10,11
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	690
	.byte	2,2,35,0,11
	.byte	'LimitToNoComCtr_u16',0
	.word	690
	.byte	2,2,35,2,11
	.byte	'RequestedUserMode_t',0
	.word	323
	.byte	1,2,35,4,11
	.byte	'IndicatedUserMode_t',0
	.word	323
	.byte	1,2,35,5,11
	.byte	'numChannelsInFullCom_u8',0
	.word	323
	.byte	1,2,35,6,11
	.byte	'numChannelsInSilentCom_u8',0
	.word	323
	.byte	1,2,35,7,11
	.byte	'numChannelsInNoCom_u8',0
	.word	323
	.byte	1,2,35,8,0,18
	.byte	'ComM_UserStruct_Impl',0,13,214,1,3
	.word	8731
	.byte	18
	.byte	'Dcm_IOOperationResponseType',0,13,252,1,15
	.word	323
	.byte	18
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	13,138,2,15
	.word	323
	.byte	18
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,13,146,2,15
	.word	323
	.byte	18
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,13,150,2,15
	.word	323
	.byte	18
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,13,154,2,15
	.word	323
	.byte	18
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,13,243,3,34
	.word	7474
	.byte	19,128,8
	.word	323
	.byte	20,255,7,0,18
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,13,246,3,34
	.word	7474
	.byte	18
	.byte	'Fls_LengthType',0,14,173,3,16
	.word	160
	.byte	22
	.byte	'Fls_JobStartType',0,14,175,3,16,1,30
	.byte	'Reserved1',0,1
	.word	323
	.byte	1,7,2,35,0,30
	.byte	'Write',0,1
	.word	323
	.byte	1,6,2,35,0,30
	.byte	'Erase',0,1
	.word	323
	.byte	1,5,2,35,0,30
	.byte	'Read',0,1
	.word	323
	.byte	1,4,2,35,0,30
	.byte	'Compare',0,1
	.word	323
	.byte	1,3,2,35,0,30
	.byte	'Reserved2',0,1
	.word	323
	.byte	3,0,2,35,0,0,18
	.byte	'Fls_JobStartType',0,14,183,3,3
	.word	9573
	.byte	18
	.byte	'Fls_17_Pmu_Job_Type',0,14,187,3,15
	.word	323
	.byte	9
	.word	323
	.byte	12
	.word	323
	.byte	9
	.word	9768
	.byte	19,2
	.word	323
	.byte	20,1,0,22
	.byte	'Fls_17_Pmu_StateType',0,14,198,3,16,48,11
	.byte	'FlsReadAddress',0
	.word	160
	.byte	4,2,35,0,11
	.byte	'FlsWriteAddress',0
	.word	160
	.byte	4,2,35,4,11
	.byte	'FlsEraseTimeoutCycleCount',0
	.word	160
	.byte	4,2,35,8,11
	.byte	'FlsWriteTimeoutCycleCount',0
	.word	160
	.byte	4,2,35,12,11
	.byte	'FlsReadLength',0
	.word	160
	.byte	4,2,35,16,11
	.byte	'FlsWriteLength',0
	.word	160
	.byte	4,2,35,20,11
	.byte	'FlsReadBufferPtr',0
	.word	9763
	.byte	4,2,35,24,11
	.byte	'FlsWriteBufferPtr',0
	.word	9773
	.byte	4,2,35,28,11
	.byte	'FlsJobResult',0
	.word	5977
	.byte	4,2,35,32,11
	.byte	'FlsMode',0
	.word	6135
	.byte	4,2,35,36,11
	.byte	'NotifCaller',0
	.word	323
	.byte	1,2,35,40,11
	.byte	'JobStarted',0
	.word	9573
	.byte	1,2,35,41,11
	.byte	'FlsJobType',0
	.word	9778
	.byte	2,2,35,42,11
	.byte	'FlsOper',0
	.word	323
	.byte	1,2,35,44,11
	.byte	'FlsTimeoutErr',0
	.word	323
	.byte	1,2,35,45,11
	.byte	'FlsTimeoutControl',0
	.word	323
	.byte	1,2,35,46,0,18
	.byte	'Fls_17_Pmu_StateType',0,14,130,4,3
	.word	9787
	.byte	18
	.byte	'Fls_NotifFunctionPtrType',0,14,137,4,16
	.word	1987
	.byte	12
	.word	160
	.byte	9
	.word	10265
	.byte	24,1,1,25
	.word	160
	.byte	25
	.word	160
	.byte	25
	.word	10270
	.byte	25
	.word	323
	.byte	0,9
	.word	10275
	.byte	18
	.byte	'Fls_WriteCmdPtrType',0,14,139,4,16
	.word	10299
	.byte	24,1,1,25
	.word	160
	.byte	0,9
	.word	10333
	.byte	18
	.byte	'Fls_EraseCmdPtrType',0,14,144,4,16
	.word	10342
	.byte	7,15,122,9,4,8
	.byte	'FEE_NO_ORDER',0,0,8
	.byte	'FEE_READ_ORDER',0,1,8
	.byte	'FEE_WRITE_ORDER',0,2,8
	.byte	'FEE_INVALIDATE_ORDER',0,3,8
	.byte	'FEE_MAINTAIN_ORDER',0,4,8
	.byte	'FEE_FORCED_READ_ORDER',0,5,0,18
	.byte	'Fee_HlMode_ten',0,15,132,1,2
	.word	10376
	.byte	7,1,147,1,9,4,8
	.byte	'FEE_NORMAL_PRIO_E',0,0,8
	.byte	'FEE_HIGH_PRIO_E',0,1,0,18
	.byte	'Fee_HlPriority_ten',0,1,151,1,2
	.word	10524
	.byte	7,1,246,1,9,4,8
	.byte	'FEE_SECTOR_STATE_UNDEF_E',0,0,8
	.byte	'FEE_SECTOR_ERASED_E',0,1,8
	.byte	'FEE_SECTOR_USED_E',0,2,8
	.byte	'FEE_SECTOR_FULL_E',0,3,8
	.byte	'FEE_SECTOR_REQUEST2ERASE_E',0,4,8
	.byte	'FEE_SECTOR_CONSIDERED_E',0,13,0,18
	.byte	'Fee_SectorState_ten',0,1,254,1,2
	.word	10597
	.byte	10,1,129,2,9,12,11
	.byte	'SecChngCnt_u32',0
	.word	160
	.byte	4,2,35,0,11
	.byte	'SecState_en',0
	.word	10597
	.byte	4,2,35,4,11
	.byte	'xPhySecIdx_u8',0
	.word	323
	.byte	1,2,35,8,0,18
	.byte	'Fee_LLSectorOrder_tst',0,1,134,2,2
	.word	10777
	.byte	18
	.byte	'Fee_stRetVal_ten',0,1,149,2,2
	.word	402
	.byte	10,1,153,2,9,16,11
	.byte	'Fee_PhysStartAddress_u32',0
	.word	160
	.byte	4,2,35,0,11
	.byte	'Fee_PhysEndAddress_u32',0
	.word	160
	.byte	4,2,35,4,11
	.byte	'Fee_LogStartAddress_u32',0
	.word	160
	.byte	4,2,35,8,11
	.byte	'Fee_LogEndAddress_u32',0
	.word	160
	.byte	4,2,35,12,0,18
	.byte	'Fee_FlashProp_tst',0,1,159,2,2
	.word	10909
	.byte	12
	.word	1987
	.byte	12
	.word	1987
	.byte	10,1,192,2,9,16,11
	.byte	'BlockPersistentId_u16',0
	.word	690
	.byte	2,2,35,0,11
	.byte	'Flags_u16',0
	.word	690
	.byte	2,2,35,2,11
	.byte	'Length_u16',0
	.word	690
	.byte	2,2,35,4,11
	.byte	'JobEndNotification_pfn',0
	.word	11073
	.byte	4,2,35,8,11
	.byte	'JobErrorNotification_pfn',0
	.word	11078
	.byte	4,2,35,12,0,18
	.byte	'Fee_BlockPropertiesType_tst',0,1,199,2,2
	.word	11083
	.byte	7,1,210,2,9,4,8
	.byte	'FEE_LL_MARKER_INIT_E',0,0,8
	.byte	'FEE_LL_MARKER_BLK_CHK_E',0,1,8
	.byte	'FEE_LL_MARKER_BLK_CHK_WAIT_E',0,2,8
	.byte	'FEE_LL_MARKER_BLK_CHK_ERROR_E',0,3,8
	.byte	'FEE_LL_MARKER_BLK_CHK_FINISHED_E',0,4,8
	.byte	'FEE_LL_MARKER_WRITE_WAIT_E',0,5,8
	.byte	'FEE_LL_MARKER_WRITE_ERROR_E',0,6,8
	.byte	'FEE_LL_MARKER_VERIFY_E',0,7,8
	.byte	'FEE_LL_MARKER_VERIFY_WAIT_E',0,8,8
	.byte	'FEE_LL_MARKER_VERIFY_FINISHED_E',0,9,0,18
	.byte	'Fee_LLWrMarkerType_ten',0,1,222,2,2
	.word	11263
	.byte	7,1,225,2,9,4,8
	.byte	'FEE_HL_RDWR_BLK_INIT_E',0,0,8
	.byte	'FEE_HL_SEARCH_BLK_HDR_E',0,1,8
	.byte	'FEE_HL_READ_BLK_HDR_WAIT_E',0,2,8
	.byte	'FEE_HL_CHECK_BLK_HDR_E',0,3,8
	.byte	'FEE_HL_CALC_BLK_CS_E',0,4,8
	.byte	'FEE_HL_CHECK_BLK_CS_E',0,5,8
	.byte	'FEE_HL_RD_DATA_FROM_BLK_E',0,6,8
	.byte	'FEE_HL_COMP_BLK_E',0,7,8
	.byte	'FEE_HL_WR_BLK_E',0,8,0,18
	.byte	'Fee_HLRdWrBlockType_ten',0,1,243,2,2
	.word	11597
	.byte	7,1,246,2,9,4,8
	.byte	'FEE_LL_WR_BLK_INIT_E',0,0,8
	.byte	'FEE_LL_WR_WRITEHEADER_E',0,1,8
	.byte	'FEE_LL_WR_SIZECHECK_HSR_E',0,2,8
	.byte	'FEE_LL_WR_WRITEHEADER_WAIT_E',0,3,8
	.byte	'FEE_LL_WR_VERIFYHEADER_E',0,4,8
	.byte	'FEE_LL_WR_VERIFYHEADER_WAIT_E',0,5,8
	.byte	'FEE_LL_WR_VERIFYHEADER_ERROR_E',0,6,8
	.byte	'FEE_LL_WR_WRITEDATA_SEC_A_E',0,7,8
	.byte	'FEE_LL_WR_WAIT_WRITEDATA_SEC_A_E',0,8,8
	.byte	'FEE_LL_WR_WRITE_ERROR_E',0,9,8
	.byte	'FEE_LL_WR_WRITE_FULL_MARKER_E',0,10,8
	.byte	'FEE_LL_WR_ERASE_SECTOR_E',0,11,8
	.byte	'FEE_LL_WR_WRITE_USED_MARKER_E',0,12,8
	.byte	'FEE_LL_WR_WRITE_START_MARKER_E',0,13,8
	.byte	'FEE_LL_WR_VERIFY_BLK_E',0,14,8
	.byte	'FEE_LL_WR_WRITEHDRPG2_E',0,15,8
	.byte	'FEE_LL_WR_WAIT_WRITEHDRPG2_E',0,16,0,18
	.byte	'Fee_LLWrBlockType_ten',0,1,162,3,2
	.word	11855
	.byte	7,1,165,3,9,4,8
	.byte	'FEE_LL_CMP_BLK_INIT_E',0,0,8
	.byte	'FEE_LL_CMP_HEADER_E',0,1,8
	.byte	'FEE_LL_CMP_WAIT_HEADER_E',0,2,8
	.byte	'FEE_LL_CMP_CHECK_OVERLAP_E',0,3,8
	.byte	'FEE_LL_CMP_DATA_SEC_A_E',0,4,8
	.byte	'FEE_LL_CMP_WAIT_DATA_SEC_A_E',0,5,8
	.byte	'FEE_LL_CMP_FINISHED_E',0,6,0,18
	.byte	'Fee_LLCmpBlkType_ten',0,1,174,3,2
	.word	12390
	.byte	7,1,177,3,9,4,8
	.byte	'FEE_LL_CPY_BLK_INIT_E',0,0,8
	.byte	'FEE_LL_CPY_BLOCK_START_E',0,1,8
	.byte	'FEE_LL_CPY_BLOCK_WAIT_E',0,2,8
	.byte	'FEE_LL_CPY_BLOCK_ERROR_E',0,3,8
	.byte	'FEE_LL_CPY_BLOCK_FINISHED_E',0,4,0,18
	.byte	'Fee_LLCpyBlkType_ten',0,1,184,3,2
	.word	12610
	.byte	7,1,187,3,9,4,8
	.byte	'FEE_LL_CRC_BLK_INIT_E',0,0,8
	.byte	'FEE_LL_CRC_RD_HD_PAGE_E',0,1,8
	.byte	'FEE_LL_CRC_RD_PAGE_E',0,2,8
	.byte	'FEE_LL_CRC_CHECK_OVERLAP_E',0,3,8
	.byte	'FEE_LL_CRC_RD_ROB_PAGE_E',0,4,8
	.byte	'FEE_LL_CRC_CHECK_OVERLAP_ROB_E',0,5,8
	.byte	'FEE_LL_CRC_RD_ROB_PAGE_WAIT_E',0,6,8
	.byte	'FEE_LL_CRC_RD_PAGE_WAIT_E',0,7,8
	.byte	'FEE_LL_CRC_RD_ERROR_E',0,8,0,18
	.byte	'Fee_LLCalcCrcBlkType_ten',0,1,200,3,2
	.word	12781
	.byte	7,1,203,3,9,4,8
	.byte	'FEE_LL_INIT_READ_E',0,0,8
	.byte	'FEE_LL_BLANK_CHECK_E',0,1,8
	.byte	'FEE_LL_BLANK_CHECK_WAIT_E',0,2,8
	.byte	'FEE_LL_READ_PAGE_E',0,3,8
	.byte	'FEE_LL_WAIT_READ_PAGE_E',0,4,8
	.byte	'FEE_LL_READ_ERROR_E',0,5,8
	.byte	'FEE_LL_READ_FINISHED_E',0,6,0,18
	.byte	'Fee_LLRdStateType_ten',0,1,223,3,3
	.word	13068
	.byte	7,1,226,3,9,4,8
	.byte	'FEE_LL_INIT_BLANK_CHECK_E',0,0,8
	.byte	'FEE_LL_PERFORM_BLANK_CHECK_E',0,1,8
	.byte	'FEE_LL_WAIT_PERFORM_BLANK_CHECK_E',0,2,8
	.byte	'FEE_LL_BLANK_CHECK_ERROR_E',0,3,8
	.byte	'FEE_LL_BLANK_CHECK_FINISHED_E',0,4,0,18
	.byte	'Fee_LLBlankCheckType_ten',0,1,233,3,3
	.word	13272
	.byte	7,1,236,3,9,4,8
	.byte	'FEE_LL_FIND_CURRENT_SECTOR_E',0,0,8
	.byte	'FEE_LL_FIND_LAST_HEADER_E',0,1,8
	.byte	'FEE_LL_FINISHED_E',0,2,0,18
	.byte	'Fee_LLFndEmptyPgeType_ten',0,1,249,3,2
	.word	13469
	.byte	7,1,252,3,9,4,8
	.byte	'FEE_LL_SEARCHBLK_INIT_E',0,0,8
	.byte	'FEE_LL_SEARCHBLK_BLK_HEADER_E',0,1,0,18
	.byte	'Fee_LLSearchBlkHdrType_ten',0,1,128,4,2
	.word	13590
	.byte	7,1,132,4,9,4,8
	.byte	'FEE_LL_BLD_UP_CACHE_INIT_E',0,0,8
	.byte	'FEE_LL_BLD_UP_CACHE_READ_E',0,1,0,18
	.byte	'Fee_LLBuildUpCache_ten',0,1,136,4,2
	.word	13691
	.byte	7,1,139,4,9,4,8
	.byte	'FEE_LL_BLD_UP_CACHE_ALL_SECT_INIT_E',0,0,8
	.byte	'FEE_LL_BLD_UP_CACHE_ALL_SECT_DO_E',0,1,0,18
	.byte	'Fee_LLBuildUpCacheAllSect_ten',0,1,143,4,2
	.word	13788
	.byte	7,1,168,4,9,4,8
	.byte	'FEE_LL_REORG_INIT_E',0,0,8
	.byte	'FEE_LL_REORG_PREP_SEARCH_BLK_E',0,1,8
	.byte	'FEE_LL_REORG_SEARCH_BLK_E',0,2,8
	.byte	'FEE_LL_REORG_CHECK_BLOCK_CS_E',0,3,8
	.byte	'FEE_LL_REORG_REDUNDANT_BLK_CHK_E',0,4,8
	.byte	'FEE_LL_REORG_WRITE_BLOCK_E',0,5,8
	.byte	'FEE_LL_REORG_FINISHED_E',0,6,0,18
	.byte	'Fee_LLSecReorgType_ten',0,1,193,4,2
	.word	13908
	.byte	7,1,196,4,9,4,8
	.byte	'FEE_LL_REDUNDANT_CPY_CHK_INIT_E',0,0,8
	.byte	'FEE_LL_REDUNDANT_CPY_CHK_SEARCH_HDR_E',0,1,8
	.byte	'FEE_LL_REDUNDANT_CPY_CHK_BLK_CS_E',0,2,0,18
	.byte	'Fee_LLRedundantCpyChk_ten',0,1,201,4,2
	.word	14152
	.byte	7,1,204,4,9,4,8
	.byte	'FEE_LL_CPY_FLS2FLS_INIT_E',0,0,8
	.byte	'FEE_LL_CPY_FLS2FLS_READ_E',0,1,8
	.byte	'FEE_LL_CPY_FLS2FLS_WAIT_READ_E',0,2,8
	.byte	'FEE_LL_CPY_FLS2FLS_READ_ERROR_E',0,3,8
	.byte	'FEE_LL_CPY_FLS2FLS_HDRPG1_WRITE_E',0,4,8
	.byte	'FEE_LL_CPY_FLS2FLS_WAIT_HDRPG1_WRITE_E',0,5,8
	.byte	'FEE_LL_CPY_FLS2FLS_HDRPG1_WRITE_ERROR_E',0,6,8
	.byte	'FEE_LL_CPY_FLS2FLS_HDRPG1_VERIFY_E',0,7,8
	.byte	'FEE_LL_CPY_FLS2FLS_WAIT_HDRPG1_VERIFY_E',0,8,8
	.byte	'FEE_LL_CPY_FLS2FLS_HDRPG1_VERIFY_ERROR_E',0,9,8
	.byte	'FEE_LL_CPY_FLS2FLS_WRITE_E',0,10,8
	.byte	'FEE_LL_CPY_FLS2FLS_WAIT_WRITE_E',0,11,8
	.byte	'FEE_LL_CPY_FLS2FLS_WRITE_ERROR_E',0,12,8
	.byte	'FEE_LL_CPY_FLS2FLS_VERIFY_E',0,13,8
	.byte	'FEE_LL_CPY_FLS2FLS_WAIT_VERIFY_E',0,14,8
	.byte	'FEE_LL_CPY_FLS2FLS_VERIFY_ERROR_E',0,15,8
	.byte	'FEE_LL_CPY_FLS2FLS_HDRPG2_WRITE_E',0,16,8
	.byte	'FEE_LL_CPY_FLS2FLS_WAIT_HDRPG2_WRITE_E',0,17,8
	.byte	'FEE_LL_CPY_FLS2FLS_HDRPG2_WRITE_ERROR_E',0,18,8
	.byte	'FEE_LL_CPY_FLS2FLS_HDRPG2_VERIFY_E',0,19,8
	.byte	'FEE_LL_CPY_FLS2FLS_WAIT_HDRPG2_VERIFY_E',0,20,8
	.byte	'FEE_LL_CPY_FLS2FLS_HDRPG2_VERIFY_ERROR_E',0,21,8
	.byte	'FEE_LL_CPY_FLS2FLS_CHECK_ADR_OVERFLOW_E',0,22,8
	.byte	'FEE_LL_CPY_FLS2FLS_WRITE_FULL_MARKER_E',0,23,8
	.byte	'FEE_LL_CPY_FLS2FLS_ERASE_SECTOR_E',0,24,8
	.byte	'FEE_LL_CPY_FLS2FLS_WRITE_USED_MARKER_E',0,25,8
	.byte	'FEE_LL_CPY_FLS2FLS_WRITE_START_MARKER_E',0,26,0,18
	.byte	'Fee_LLCpyBlkFls2Fls_ten',0,1,133,5,2
	.word	14304
	.byte	10,1,163,5,9,116,11
	.byte	'xRdAddress',0
	.word	160
	.byte	4,2,35,0,11
	.byte	'xWrAddress',0
	.word	160
	.byte	4,2,35,4,11
	.byte	'xCmpAddress',0
	.word	160
	.byte	4,2,35,8,11
	.byte	'xCrcAddress',0
	.word	160
	.byte	4,2,35,12,11
	.byte	'xCpyAddress',0
	.word	160
	.byte	4,2,35,16,11
	.byte	'AdrHdSearchStart_u32',0
	.word	160
	.byte	4,2,35,20,11
	.byte	'xStartAddrNextSector_u32',0
	.word	160
	.byte	4,2,35,24,11
	.byte	'xHdPg2Address',0
	.word	160
	.byte	4,2,35,28,11
	.byte	'LastProgrammedAddress_u32',0
	.word	160
	.byte	4,2,35,32,11
	.byte	'LastValidHdrAddress_u32',0
	.word	160
	.byte	4,2,35,36,11
	.byte	'Fee_LLSecReorg_en',0
	.word	13908
	.byte	4,2,35,40,11
	.byte	'Fee_LLRedundantCpyChk_en',0
	.word	14152
	.byte	4,2,35,44,11
	.byte	'Fee_LLCpyBlkFls2Fls_en',0
	.word	14304
	.byte	4,2,35,48,11
	.byte	'Fee_HLWrBlock_en',0
	.word	11597
	.byte	4,2,35,52,11
	.byte	'Fee_HLMtBlock_en',0
	.word	11597
	.byte	4,2,35,56,11
	.byte	'Fee_LLWrBlock_en',0
	.word	11855
	.byte	4,2,35,60,11
	.byte	'Fee_HLRdBlock',0
	.word	11597
	.byte	4,2,35,64,11
	.byte	'Fee_LLNextUsedWrBlock_en',0
	.word	11855
	.byte	4,2,35,68,11
	.byte	'Fee_LLNextEraseWrBlock_en',0
	.word	11855
	.byte	4,2,35,72,11
	.byte	'Fee_LLCompBlk',0
	.word	12390
	.byte	4,2,35,76,11
	.byte	'Fee_LLCopyBlk_en',0
	.word	12610
	.byte	4,2,35,80,11
	.byte	'Fee_LLCalcCrcBlk_en',0
	.word	12781
	.byte	4,2,35,84,11
	.byte	'Fee_LLWrMarker_en',0
	.word	11263
	.byte	4,2,35,88,11
	.byte	'Fee_LLRdState_en',0
	.word	13068
	.byte	4,2,35,92,11
	.byte	'Fee_LLBlankCheckState_en',0
	.word	13272
	.byte	4,2,35,96,11
	.byte	'Fee_LLFindEmptyPageState_en',0
	.word	13469
	.byte	4,2,35,100,11
	.byte	'Fee_LLSearchBlkHdr_en',0
	.word	13590
	.byte	4,2,35,104,11
	.byte	'Fee_LLBuildUpCache_en',0
	.word	13691
	.byte	4,2,35,108,11
	.byte	'Fee_LLBuildUpCacheAllSect_en',0
	.word	13788
	.byte	4,2,35,112,0,18
	.byte	'Fee_RdWrOrder_tst',0,1,224,5,3
	.word	15350
	.byte	18
	.byte	'Fee_GlobInfoLastRdHeader_tst',0,1,235,5,2
	.word	717
	.byte	7,1,133,6,9,4,8
	.byte	'FEE_ERASESEC_IDLE_E',0,0,8
	.byte	'FEE_ERASESEC_CHECK_CACHE_E',0,1,8
	.byte	'FEE_ERASESEC_START_E',0,2,8
	.byte	'FEE_ERASESEC_DO_E',0,3,8
	.byte	'FEE_ERASESEC_WRITE_MARKER_E',0,4,8
	.byte	'FEE_ERASESEC_ERROR_E',0,5,0,18
	.byte	'Fee_LLEraseStateType_ten',0,1,141,6,2
	.word	16245
	.byte	19,3
	.word	323
	.byte	20,2,0,10,1,151,6,9,16,11
	.byte	'Preamble_au8',0
	.word	16433
	.byte	3,2,35,0,11
	.byte	'BlkStatus_u8',0
	.word	323
	.byte	1,2,35,3,11
	.byte	'FeeIndex_u16',0
	.word	690
	.byte	2,2,35,4,11
	.byte	'BlkLength_u16',0
	.word	690
	.byte	2,2,35,6,11
	.byte	'HdrCrc16_u16',0
	.word	690
	.byte	2,2,35,8,11
	.byte	'BlkCrc32_u32',0
	.word	160
	.byte	4,2,35,12,0,18
	.byte	'Fee_BlkHeader_tst',0,1,159,6,2
	.word	16442
	.byte	19,32
	.word	10909
	.byte	20,1,0,12
	.word	16609
	.byte	31
	.byte	'Fee_FlashProp_st',0,1,135,7,53
	.word	16618
	.byte	1,1,31
	.byte	'Fee_RdWrOrder_st',0,1,144,7,53
	.word	15350
	.byte	1,1,19,24
	.word	10777
	.byte	20,1,0,31
	.byte	'Fee_LLSectorOrder_st',0,1,145,7,53
	.word	16679
	.byte	1,1,31
	.byte	'Fee_GlobInfoLastRdHeader_st',0,1,148,7,53
	.word	717
	.byte	1,1,31
	.byte	'Fee_Prv_stReorg_u8',0,1,165,7,53
	.word	323
	.byte	1,1,31
	.byte	'Fee_NumFlashBanksUsed_u8',0,1,166,7,53
	.word	323
	.byte	1,1,31
	.byte	'Fee_idxLLSectorOrder_au8',0,1,192,7,53
	.word	9778
	.byte	1,1,19,192,1
	.word	11083
	.byte	20,11,0,31
	.byte	'Fee_BlockProperties_st',0,1,237,7,53
	.word	16861
	.byte	1,1,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L159:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,46,1,3,8,32,13,58,15,59,15
	.byte	57,15,73,19,54,15,39,12,0,0,4,5,0,3,8,58,15,59,15,57,15,73,19,0,0,5,11,0,0,0,6,46,1,3,8,58,15,59,15,57
	.byte	15,73,19,54,15,39,12,63,12,60,12,0,0,7,4,1,58,15,59,15,57,15,11,15,0,0,8,40,0,3,8,28,13,0,0,9,15,0,73
	.byte	19,0,0,10,19,1,58,15,59,15,57,15,11,15,0,0,11,13,0,3,8,73,19,11,15,56,9,0,0,12,38,0,73,19,0,0,13,46,1
	.byte	3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,14,46,0,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12
	.byte	60,12,0,0,15,46,1,49,19,0,0,16,5,0,49,19,0,0,17,21,0,54,15,0,0,18,22,0,3,8,58,15,59,15,57,15,73,19,0,0
	.byte	19,1,1,11,15,73,19,0,0,20,33,0,47,15,0,0,21,21,0,54,15,39,12,0,0,22,19,1,3,8,58,15,59,15,57,15,11,15,0
	.byte	0,23,59,0,3,8,0,0,24,21,1,54,15,39,12,0,0,25,5,0,73,19,0,0,26,23,1,58,15,59,15,57,15,11,15,0,0,27,4,1
	.byte	3,8,58,15,59,15,57,15,11,15,0,0,28,21,0,73,19,54,15,39,12,0,0,29,53,0,73,19,0,0,30,13,0,3,8,11,15,73,19
	.byte	13,15,12,15,56,9,0,0,31,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L160:
	.word	.L259-.L258
.L258:
	.half	3
	.word	.L261-.L260
.L260:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_Prv.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSectorHandling.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Integration\\TargetIntegration\\TC275\\Include\\Mcal_TcLib.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\MemIf\\api\\MemIf_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\inc\\Fls_17_Pmu.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Fee\\api\\Fee.h',0,0,0,0,0
.L261:
.L259:
	.sdecl	'.debug_info',debug,cluster('Fee_LLCheckReorganizationNeed')
	.sect	'.debug_info'
.L161:
	.word	388
	.half	3
	.word	.L162
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSectorHandling.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L164,.L163
	.byte	2
	.word	.L157
	.byte	3
	.byte	'Fee_LLCheckReorganizationNeed',0,1,71,35
	.word	.L178
	.byte	1,1,1
	.word	.L152,.L179,.L151
	.byte	4
	.byte	'Threshold_u32',0,1,71,88
	.word	.L180,.L181
	.byte	4
	.byte	'DataLength_u16',0,1,72,87
	.word	.L182,.L183
	.byte	5
	.word	.L152,.L179
	.byte	6
	.byte	'xRetVal_en',0,1,74,38
	.word	.L178,.L184
	.byte	6
	.byte	'xLogSecIdx_u8',0,1,75,27
	.word	.L185,.L186
	.byte	6
	.byte	'xPhySecIdx_u8',0,1,76,27
	.word	.L185,.L187
	.byte	6
	.byte	'xNumFreeBytes_u32',0,1,77,27
	.word	.L180,.L188
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fee_LLCheckReorganizationNeed')
	.sect	'.debug_abbrev'
.L162:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fee_LLCheckReorganizationNeed')
	.sect	'.debug_line'
.L163:
	.word	.L263-.L262
.L262:
	.half	3
	.word	.L265-.L264
.L264:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSectorHandling.c',0,0,0,0,0
.L265:
	.byte	5,35,7,0,5,2
	.word	.L152
	.byte	3,198,0,1,5,49,9
	.half	.L266-.L152
	.byte	3,3,1,5,64,9
	.half	.L207-.L266
	.byte	3,6,1,5,23,9
	.half	.L205-.L207
	.byte	1,5,8,9
	.half	.L209-.L205
	.byte	3,4,1,5,27,7,9
	.half	.L267-.L209
	.byte	3,1,1,5,45,9
	.half	.L210-.L267
	.byte	1,5,20,7,9
	.half	.L212-.L210
	.byte	3,4,1,5,42,9
	.half	.L268-.L212
	.byte	1,5,93,9
	.half	.L2-.L268
	.byte	3,8,1,5,25,9
	.half	.L208-.L2
	.byte	1,5,49,9
	.half	.L269-.L208
	.byte	1,5,22,9
	.half	.L213-.L269
	.byte	3,3,1,5,26,9
	.half	.L215-.L213
	.byte	3,3,1,5,9,9
	.half	.L270-.L215
	.byte	1,5,53,7,9
	.half	.L271-.L270
	.byte	3,9,1,5,41,9
	.half	.L7-.L271
	.byte	3,2,1,5,21,9
	.half	.L272-.L7
	.byte	1,5,41,9
	.half	.L273-.L272
	.byte	1,5,56,9
	.half	.L274-.L273
	.byte	1,5,20,9
	.half	.L275-.L274
	.byte	1,5,69,7,9
	.half	.L276-.L275
	.byte	3,1,1,5,21,7,9
	.half	.L8-.L276
	.byte	3,4,1,5,72,9
	.half	.L9-.L8
	.byte	3,8,1,5,60,9
	.half	.L217-.L9
	.byte	3,4,1,5,43,9
	.half	.L218-.L217
	.byte	1,5,59,9
	.half	.L277-.L218
	.byte	1,5,74,9
	.half	.L278-.L277
	.byte	3,127,1,9
	.half	.L279-.L278
	.byte	3,1,1,9
	.half	.L280-.L279
	.byte	3,127,1,5,39,9
	.half	.L281-.L280
	.byte	1,5,68,9
	.half	.L282-.L281
	.byte	3,110,1,5,53,9
	.half	.L6-.L282
	.byte	1,5,17,7,9
	.half	.L10-.L6
	.byte	3,24,1,5,36,7,9
	.half	.L283-.L10
	.byte	3,1,1,5,54,9
	.half	.L211-.L283
	.byte	1,5,28,9
	.half	.L219-.L211
	.byte	3,4,1,5,5,9
	.half	.L4-.L219
	.byte	3,33,1,5,1,9
	.half	.L13-.L4
	.byte	3,1,1,7,9
	.half	.L165-.L13
	.byte	0,1,1
.L263:
	.sdecl	'.debug_ranges',debug,cluster('Fee_LLCheckReorganizationNeed')
	.sect	'.debug_ranges'
.L164:
	.word	-1,.L152,0,.L165-.L152,0,0
	.sdecl	'.debug_info',debug,cluster('Fee_LLSectorReorganization')
	.sect	'.debug_info'
.L166:
	.word	573
	.half	3
	.word	.L167
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSectorHandling.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L169,.L168
	.byte	2
	.word	.L157
	.byte	3
	.byte	'Fee_LLSectorReorganization',0,1,202,1,34
	.word	.L178
	.byte	1,1,1
	.word	.L154,.L189,.L153
	.byte	4
	.byte	'SectReorgInterSt_pb',0,1,202,1,102
	.word	.L190,.L191
	.byte	5
	.word	.L154,.L189
	.byte	6
	.byte	'xRetVal_en',0,1,204,1,38
	.word	.L178,.L192
	.byte	6
	.byte	'xTmpRetVal_en',0,1,205,1,38
	.word	.L178,.L193
	.byte	6
	.byte	'xLogSecIdx_u8',0,1,206,1,27
	.word	.L185,.L194
	.byte	6
	.byte	'xPhySecIdx_u8',0,1,207,1,27
	.word	.L185,.L195
	.byte	6
	.byte	'xTmpAddr_u32',0,1,208,1,27
	.word	.L180,.L196
	.byte	6
	.byte	'xStCache_u8',0,1,209,1,27
	.word	.L185,.L197
	.byte	6
	.byte	'xSectReorgInterSt_b',0,1,210,1,29
	.word	.L185,.L198
	.byte	7
	.byte	'xAdrBlkHeader_u32',0,1,212,1,19
	.word	.L180
	.byte	5,3
	.word	_999001_xAdrBlkHeader_u32
	.byte	7
	.byte	'xSearchRetry_b',0,1,213,1,20
	.word	.L185
	.byte	5,3
	.word	_999002_xSearchRetry_b
	.byte	7
	.byte	'xBlkIdx_u16',0,1,214,1,19
	.word	.L182
	.byte	5,3
	.word	_999003_xBlkIdx_u16
	.byte	7
	.byte	'xFee_WriteTwice_b',0,1,215,1,20
	.word	.L185
	.byte	5,3
	.word	_999004_xFee_WriteTwice_b
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fee_LLSectorReorganization')
	.sect	'.debug_abbrev'
.L167:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fee_LLSectorReorganization')
	.sect	'.debug_line'
.L168:
	.word	.L285-.L284
.L284:
	.half	3
	.word	.L287-.L286
.L286:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSectorHandling.c',0,0,0,0,0
.L287:
	.byte	5,34,7,0,5,2
	.word	.L154
	.byte	3,201,1,1,5,53,9
	.half	.L223-.L154
	.byte	3,2,1,5,42,9
	.half	.L224-.L223
	.byte	3,4,1,5,49,9
	.half	.L288-.L224
	.byte	3,2,1,5,28,9
	.half	.L225-.L288
	.byte	3,19,1,5,26,9
	.half	.L289-.L225
	.byte	1,5,12,9
	.half	.L290-.L289
	.byte	3,33,1,5,28,9
	.half	.L291-.L290
	.byte	1,5,14,9
	.half	.L292-.L291
	.byte	3,3,1,9
	.half	.L293-.L292
	.byte	3,44,1,9
	.half	.L294-.L293
	.byte	3,232,0,1,9
	.half	.L295-.L294
	.byte	3,217,0,1,9
	.half	.L296-.L295
	.byte	3,175,1,1,9
	.half	.L297-.L296
	.byte	3,197,0,1,9
	.half	.L298-.L297
	.byte	3,138,2,1,5,13,9
	.half	.L14-.L298
	.byte	3,152,122,1,5,34,9
	.half	.L299-.L14
	.byte	1,5,32,9
	.half	.L300-.L299
	.byte	1,5,13,9
	.half	.L301-.L300
	.byte	3,3,1,5,27,9
	.half	.L302-.L301
	.byte	1,5,25,9
	.half	.L303-.L302
	.byte	1,5,13,9
	.half	.L304-.L303
	.byte	3,1,1,5,30,9
	.half	.L305-.L304
	.byte	1,5,28,9
	.half	.L306-.L305
	.byte	1,5,50,9
	.half	.L307-.L306
	.byte	3,14,1,5,48,9
	.half	.L308-.L307
	.byte	1,5,34,9
	.half	.L309-.L308
	.byte	3,7,1,5,64,9
	.half	.L310-.L309
	.byte	1,5,87,9
	.half	.L311-.L310
	.byte	1,5,47,9
	.half	.L312-.L311
	.byte	1,5,63,9
	.half	.L313-.L312
	.byte	1,5,102,9
	.half	.L314-.L313
	.byte	1,5,17,9
	.half	.L315-.L314
	.byte	1,5,102,7,9
	.half	.L316-.L315
	.byte	3,1,1,5,45,9
	.half	.L317-.L316
	.byte	1,7,9
	.half	.L318-.L317
	.byte	3,8,1,5,13,9
	.half	.L15-.L318
	.byte	3,97,1,9
	.half	.L319-.L15
	.byte	3,45,1,5,24,9
	.half	.L320-.L319
	.byte	1,5,13,9
	.half	.L321-.L320
	.byte	3,3,1,5,65,9
	.half	.L322-.L321
	.byte	1,5,63,9
	.half	.L323-.L322
	.byte	1,5,65,9
	.half	.L324-.L323
	.byte	3,1,1,5,63,9
	.half	.L325-.L324
	.byte	1,5,65,9
	.half	.L326-.L325
	.byte	3,1,1,5,63,9
	.half	.L327-.L326
	.byte	1,5,65,9
	.half	.L328-.L327
	.byte	3,1,1,5,63,9
	.half	.L329-.L328
	.byte	1,5,65,9
	.half	.L330-.L329
	.byte	3,1,1,5,63,9
	.half	.L331-.L330
	.byte	1,5,65,9
	.half	.L332-.L331
	.byte	3,1,1,5,63,9
	.half	.L333-.L332
	.byte	1,5,13,9
	.half	.L334-.L333
	.byte	3,3,1,5,33,9
	.half	.L335-.L334
	.byte	1,5,31,9
	.half	.L336-.L335
	.byte	1,5,17,9
	.half	.L337-.L336
	.byte	3,3,1,5,13,9
	.half	.L338-.L337
	.byte	1,5,54,7,9
	.half	.L339-.L338
	.byte	3,37,1,5,52,9
	.half	.L340-.L339
	.byte	1,5,17,9
	.half	.L341-.L340
	.byte	3,3,1,5,54,9
	.half	.L24-.L341
	.byte	3,4,1,5,77,9
	.half	.L342-.L24
	.byte	1,5,76,9
	.half	.L343-.L342
	.byte	1,5,89,9
	.half	.L344-.L343
	.byte	1,5,26,9
	.half	.L222-.L344
	.byte	1,5,59,9
	.half	.L227-.L222
	.byte	3,3,1,5,16,9
	.half	.L226-.L227
	.byte	3,7,1,5,29,7,9
	.half	.L345-.L226
	.byte	3,1,1,5,17,7,9
	.half	.L26-.L345
	.byte	3,7,1,5,37,9
	.half	.L346-.L26
	.byte	1,5,35,9
	.half	.L228-.L346
	.byte	1,5,17,9
	.half	.L347-.L228
	.byte	3,3,1,5,34,9
	.half	.L348-.L347
	.byte	1,5,32,9
	.half	.L349-.L348
	.byte	1,5,54,9
	.half	.L350-.L349
	.byte	3,3,1,5,52,9
	.half	.L351-.L350
	.byte	1,5,50,9
	.half	.L352-.L351
	.byte	3,122,1,5,17,9
	.half	.L27-.L352
	.byte	3,14,1,5,13,9
	.half	.L16-.L27
	.byte	3,249,126,1,9
	.half	.L353-.L16
	.byte	3,1,1,5,54,9
	.half	.L354-.L353
	.byte	3,230,0,1,5,17,9
	.half	.L355-.L354
	.byte	3,18,1,5,61,9
	.half	.L356-.L355
	.byte	3,26,1,5,83,9
	.half	.L357-.L356
	.byte	3,126,1,5,82,9
	.half	.L358-.L357
	.byte	1,5,95,9
	.half	.L359-.L358
	.byte	1,5,60,9
	.half	.L360-.L359
	.byte	3,3,1,5,22,9
	.half	.L229-.L360
	.byte	3,7,1,9
	.half	.L361-.L229
	.byte	3,8,1,9
	.half	.L362-.L361
	.byte	3,51,1,9
	.half	.L363-.L362
	.byte	3,105,1,9
	.half	.L364-.L363
	.byte	3,21,1,9
	.half	.L365-.L364
	.byte	3,1,1,9
	.half	.L366-.L365
	.byte	3,116,1,9
	.half	.L367-.L366
	.byte	3,10,1,9
	.half	.L368-.L367
	.byte	3,4,1,5,17,9
	.half	.L30-.L368
	.byte	3,73,1,5,68,9
	.half	.L31-.L30
	.byte	3,12,1,5,39,9
	.half	.L369-.L31
	.byte	1,5,24,9
	.half	.L370-.L369
	.byte	3,7,1,5,21,9
	.half	.L371-.L370
	.byte	1,5,75,7,9
	.half	.L372-.L371
	.byte	3,2,1,5,74,9
	.half	.L373-.L372
	.byte	1,5,87,9
	.half	.L374-.L373
	.byte	1,5,79,9
	.half	.L375-.L374
	.byte	3,1,1,5,58,9
	.half	.L41-.L375
	.byte	3,4,1,5,56,9
	.half	.L376-.L41
	.byte	1,5,17,9
	.half	.L377-.L376
	.byte	3,2,1,5,58,9
	.half	.L33-.L377
	.byte	3,8,1,5,56,9
	.half	.L378-.L33
	.byte	1,5,17,9
	.half	.L379-.L378
	.byte	3,2,1,5,38,9
	.half	.L36-.L379
	.byte	3,9,1,5,36,9
	.half	.L380-.L36
	.byte	1,5,17,9
	.half	.L381-.L380
	.byte	3,1,1,5,71,9
	.half	.L39-.L381
	.byte	3,11,1,5,70,9
	.half	.L382-.L39
	.byte	1,5,83,9
	.half	.L383-.L382
	.byte	1,5,48,9
	.half	.L384-.L383
	.byte	3,1,1,5,58,9
	.half	.L230-.L384
	.byte	3,3,1,5,56,9
	.half	.L385-.L230
	.byte	1,5,17,9
	.half	.L386-.L385
	.byte	3,2,1,5,9,9
	.half	.L40-.L386
	.byte	3,3,1,5,54,9
	.half	.L17-.L40
	.byte	3,6,1,5,22,9
	.half	.L232-.L17
	.byte	3,6,1,9
	.half	.L387-.L232
	.byte	3,7,1,9
	.half	.L388-.L387
	.byte	3,255,0,1,9
	.half	.L389-.L388
	.byte	3,191,127,1,9
	.half	.L390-.L389
	.byte	3,62,1,9
	.half	.L391-.L390
	.byte	3,1,1,9
	.half	.L392-.L391
	.byte	3,1,1,9
	.half	.L393-.L392
	.byte	3,125,1,9
	.half	.L394-.L393
	.byte	3,5,1,5,17,9
	.half	.L47-.L394
	.byte	3,253,126,1,5,37,9
	.half	.L48-.L47
	.byte	3,6,1,5,60,9
	.half	.L395-.L48
	.byte	1,5,90,9
	.half	.L233-.L395
	.byte	3,3,1,5,73,9
	.half	.L234-.L233
	.byte	1,5,89,9
	.half	.L396-.L234
	.byte	1,5,52,9
	.half	.L397-.L396
	.byte	1,5,104,9
	.half	.L398-.L397
	.byte	1,5,24,9
	.half	.L399-.L398
	.byte	1,5,105,7,9
	.half	.L400-.L399
	.byte	3,1,1,5,71,9
	.half	.L401-.L400
	.byte	1,5,29,7,9
	.half	.L402-.L401
	.byte	3,10,1,5,28,9
	.half	.L403-.L402
	.byte	1,5,29,7,9
	.half	.L404-.L403
	.byte	3,1,1,5,58,7,9
	.half	.L405-.L404
	.byte	3,1,1,5,29,9
	.half	.L406-.L405
	.byte	1,5,62,7,9
	.half	.L407-.L406
	.byte	3,1,1,5,66,9
	.half	.L60-.L407
	.byte	3,3,1,5,64,9
	.half	.L408-.L60
	.byte	1,5,92,9
	.half	.L409-.L408
	.byte	1,5,49,9
	.half	.L61-.L409
	.byte	3,5,1,5,66,9
	.half	.L410-.L61
	.byte	3,3,1,5,64,9
	.half	.L411-.L410
	.byte	1,5,25,9
	.half	.L64-.L411
	.byte	3,122,1,5,56,9
	.half	.L58-.L64
	.byte	3,14,1,5,25,9
	.half	.L412-.L58
	.byte	1,5,49,7,9
	.half	.L413-.L412
	.byte	3,4,1,5,66,9
	.half	.L414-.L413
	.byte	3,3,1,5,64,9
	.half	.L415-.L414
	.byte	1,5,55,9
	.half	.L416-.L415
	.byte	3,125,1,5,29,9
	.half	.L66-.L416
	.byte	3,9,1,5,64,9
	.half	.L417-.L66
	.byte	1,5,62,9
	.half	.L418-.L417
	.byte	1,5,66,9
	.half	.L419-.L418
	.byte	3,3,1,5,64,9
	.half	.L420-.L419
	.byte	1,5,17,9
	.half	.L65-.L420
	.byte	3,4,1,5,62,9
	.half	.L50-.L65
	.byte	3,39,1,5,60,9
	.half	.L421-.L50
	.byte	1,5,25,9
	.half	.L422-.L421
	.byte	3,19,1,5,42,9
	.half	.L423-.L422
	.byte	1,5,40,9
	.half	.L424-.L423
	.byte	1,5,17,9
	.half	.L425-.L424
	.byte	3,3,1,5,58,9
	.half	.L56-.L425
	.byte	3,15,1,5,56,9
	.half	.L426-.L56
	.byte	1,5,17,9
	.half	.L427-.L426
	.byte	3,2,1,5,9,9
	.half	.L57-.L427
	.byte	3,3,1,5,52,9
	.half	.L18-.L57
	.byte	3,21,1,5,22,9
	.half	.L236-.L18
	.byte	3,6,1,9
	.half	.L428-.L236
	.byte	3,8,1,9
	.half	.L429-.L428
	.byte	3,40,1,9
	.half	.L430-.L429
	.byte	3,116,1,9
	.half	.L431-.L430
	.byte	3,10,1,9
	.half	.L432-.L431
	.byte	3,1,1,9
	.half	.L433-.L432
	.byte	3,125,1,9
	.half	.L434-.L433
	.byte	3,1,1,9
	.half	.L435-.L434
	.byte	3,4,1,5,17,9
	.half	.L73-.L435
	.byte	3,84,1,5,37,9
	.half	.L74-.L73
	.byte	3,7,1,5,60,9
	.half	.L436-.L74
	.byte	1,5,95,9
	.half	.L237-.L436
	.byte	3,3,1,5,78,9
	.half	.L238-.L237
	.byte	1,5,94,9
	.half	.L437-.L238
	.byte	1,5,57,9
	.half	.L438-.L437
	.byte	1,5,109,9
	.half	.L439-.L438
	.byte	1,5,24,9
	.half	.L440-.L439
	.byte	1,5,109,7,9
	.half	.L441-.L440
	.byte	3,1,1,5,76,9
	.half	.L442-.L441
	.byte	1,5,25,7,9
	.half	.L443-.L442
	.byte	3,3,1,5,45,9
	.half	.L444-.L443
	.byte	1,5,43,9
	.half	.L445-.L444
	.byte	1,5,62,9
	.half	.L446-.L445
	.byte	3,2,1,5,60,9
	.half	.L447-.L446
	.byte	1,5,50,9
	.half	.L448-.L447
	.byte	3,126,1,5,45,9
	.half	.L84-.L448
	.byte	3,9,1,5,62,9
	.half	.L449-.L84
	.byte	3,2,1,5,60,9
	.half	.L450-.L449
	.byte	1,5,17,9
	.half	.L86-.L450
	.byte	3,3,1,5,21,9
	.half	.L76-.L86
	.byte	3,5,1,5,41,9
	.half	.L451-.L76
	.byte	1,5,39,9
	.half	.L452-.L451
	.byte	1,5,58,9
	.half	.L453-.L452
	.byte	3,2,1,5,56,9
	.half	.L454-.L453
	.byte	1,5,17,9
	.half	.L455-.L454
	.byte	3,2,1,5,58,9
	.half	.L82-.L455
	.byte	3,11,1,5,56,9
	.half	.L456-.L82
	.byte	1,5,17,9
	.half	.L457-.L456
	.byte	3,2,1,5,9,9
	.half	.L83-.L457
	.byte	3,3,1,5,54,9
	.half	.L19-.L83
	.byte	3,8,1,5,83,9
	.half	.L458-.L19
	.byte	1,5,22,9
	.half	.L240-.L458
	.byte	3,6,1,9
	.half	.L459-.L240
	.byte	3,8,1,9
	.half	.L460-.L459
	.byte	3,29,1,9
	.half	.L461-.L460
	.byte	3,113,1,9
	.half	.L462-.L461
	.byte	3,13,1,9
	.half	.L463-.L462
	.byte	3,1,1,9
	.half	.L464-.L463
	.byte	3,118,1,9
	.half	.L465-.L464
	.byte	3,8,1,9
	.half	.L466-.L465
	.byte	3,4,1,5,17,9
	.half	.L91-.L466
	.byte	3,95,1,5,41,9
	.half	.L92-.L91
	.byte	3,6,1,5,58,9
	.half	.L467-.L92
	.byte	3,6,1,5,56,9
	.half	.L468-.L467
	.byte	1,5,17,9
	.half	.L469-.L468
	.byte	3,2,1,5,58,9
	.half	.L100-.L469
	.byte	3,23,1,5,56,9
	.half	.L470-.L100
	.byte	1,5,17,9
	.half	.L471-.L470
	.byte	3,2,1,5,9,9
	.half	.L101-.L471
	.byte	3,3,1,5,29,9
	.half	.L20-.L101
	.byte	3,216,1,1,5,52,9
	.half	.L472-.L20
	.byte	1,5,49,9
	.half	.L242-.L472
	.byte	3,3,1,5,13,9
	.half	.L241-.L242
	.byte	1,5,34,7,9
	.half	.L473-.L241
	.byte	3,14,1,5,21,9
	.half	.L244-.L473
	.byte	3,6,1,5,53,9
	.half	.L474-.L244
	.byte	3,122,1,5,72,9
	.half	.L475-.L474
	.byte	1,5,75,9
	.half	.L476-.L475
	.byte	1,5,79,9
	.half	.L107-.L476
	.byte	3,3,1,5,59,9
	.half	.L477-.L107
	.byte	1,5,79,9
	.half	.L478-.L477
	.byte	1,5,57,9
	.half	.L479-.L478
	.byte	1,5,81,9
	.half	.L480-.L479
	.byte	3,3,1,5,45,9
	.half	.L481-.L480
	.byte	1,5,97,9
	.half	.L482-.L481
	.byte	1,5,90,9
	.half	.L483-.L482
	.byte	3,122,1,5,75,9
	.half	.L106-.L483
	.byte	1,5,38,7,9
	.half	.L484-.L106
	.byte	3,10,1,5,37,9
	.half	.L485-.L484
	.byte	1,5,79,9
	.half	.L486-.L485
	.byte	1,5,77,9
	.half	.L487-.L486
	.byte	1,9
	.half	.L488-.L487
	.byte	3,1,1,5,79,9
	.half	.L489-.L488
	.byte	3,1,1,5,77,9
	.half	.L490-.L489
	.byte	1,5,41,9
	.half	.L491-.L490
	.byte	3,2,1,5,57,9
	.half	.L492-.L491
	.byte	1,5,28,9
	.half	.L493-.L492
	.byte	3,3,1,5,9,9
	.half	.L105-.L493
	.byte	3,9,1,5,24,9
	.half	.L21-.L105
	.byte	3,6,1,5,9,9
	.half	.L494-.L21
	.byte	3,2,1,5,26,9
	.half	.L25-.L494
	.byte	3,5,1,5,5,9
	.half	.L495-.L25
	.byte	3,3,1,5,9,7,9
	.half	.L496-.L495
	.byte	3,3,1,5,30,9
	.half	.L497-.L496
	.byte	1,5,28,9
	.half	.L498-.L497
	.byte	1,5,46,9
	.half	.L499-.L498
	.byte	3,3,1,5,44,9
	.half	.L500-.L499
	.byte	1,5,9,9
	.half	.L501-.L500
	.byte	3,3,1,5,26,9
	.half	.L502-.L501
	.byte	1,5,24,9
	.half	.L503-.L502
	.byte	1,5,5,9
	.half	.L111-.L503
	.byte	3,32,1,5,1,9
	.half	.L112-.L111
	.byte	3,1,1,7,9
	.half	.L170-.L112
	.byte	0,1,1
.L285:
	.sdecl	'.debug_ranges',debug,cluster('Fee_LLSectorReorganization')
	.sect	'.debug_ranges'
.L169:
	.word	-1,.L154,0,.L170-.L154,0,0
	.sdecl	'.debug_info',debug,cluster('Fee_LLRedundantCpyChk')
	.sect	'.debug_info'
.L171:
	.word	425
	.half	3
	.word	.L172
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSectorHandling.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L174,.L173
	.byte	2
	.word	.L157
	.byte	3
	.byte	'Fee_LLRedundantCpyChk',0,1,246,8,25
	.word	.L178
	.byte	1,1
	.word	.L156,.L199,.L155
	.byte	4
	.byte	'xFee_GlobInfoRedundantRdHeader_pst',0,1,246,8,78
	.word	.L200,.L201
	.byte	5
	.word	.L156,.L199
	.byte	6
	.byte	'xRetVal_en',0,1,248,8,25
	.word	.L178,.L202
	.byte	6
	.byte	'xTmpRetVal_en',0,1,249,8,25
	.word	.L178,.L203
	.byte	7
	.byte	'xFeeIndex_u16',0,1,250,8,25
	.word	.L182
	.byte	5,3
	.word	_999005_xFeeIndex_u16
	.byte	7
	.byte	'xAdrLastBlkHeader_u32',0,1,251,8,25
	.word	.L180
	.byte	5,3
	.word	_999006_xAdrLastBlkHeader_u32
	.byte	7
	.byte	'xAdrFirstBlkHeader_u32',0,1,252,8,25
	.word	.L180
	.byte	5,3
	.word	_999007_xAdrFirstBlkHeader_u32
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fee_LLRedundantCpyChk')
	.sect	'.debug_abbrev'
.L172:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fee_LLRedundantCpyChk')
	.sect	'.debug_line'
.L173:
	.word	.L505-.L504
.L504:
	.half	3
	.word	.L507-.L506
.L506:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSectorHandling.c',0,0,0,0,0
.L507:
	.byte	5,25,7,0,5,2
	.word	.L156
	.byte	3,245,8,1,5,49,9
	.half	.L250-.L156
	.byte	3,2,1,5,13,9
	.half	.L252-.L250
	.byte	3,6,1,5,29,9
	.half	.L508-.L252
	.byte	1,5,14,9
	.half	.L509-.L508
	.byte	3,3,1,9
	.half	.L510-.L509
	.byte	3,17,1,9
	.half	.L511-.L510
	.byte	3,60,1,5,13,9
	.half	.L113-.L511
	.byte	3,182,127,1,5,63,9
	.half	.L512-.L113
	.byte	1,5,27,9
	.half	.L513-.L512
	.byte	1,5,72,9
	.half	.L514-.L513
	.byte	3,3,1,5,13,9
	.half	.L515-.L514
	.byte	1,5,36,9
	.half	.L516-.L515
	.byte	1,5,13,9
	.half	.L517-.L516
	.byte	3,3,1,5,35,9
	.half	.L518-.L517
	.byte	1,5,57,9
	.half	.L519-.L518
	.byte	3,3,1,5,55,9
	.half	.L520-.L519
	.byte	1,5,9,9
	.half	.L521-.L520
	.byte	3,2,1,5,60,9
	.half	.L114-.L521
	.byte	3,7,1,5,61,9
	.half	.L522-.L114
	.byte	3,1,1,5,60,9
	.half	.L523-.L522
	.byte	3,2,1,5,22,9
	.half	.L254-.L523
	.byte	3,6,1,9
	.half	.L524-.L254
	.byte	3,8,1,9
	.half	.L525-.L524
	.byte	3,20,1,9
	.half	.L526-.L525
	.byte	3,115,1,9
	.half	.L527-.L526
	.byte	3,16,1,9
	.half	.L528-.L527
	.byte	3,1,1,9
	.half	.L529-.L528
	.byte	3,123,1,9
	.half	.L530-.L529
	.byte	3,3,1,9
	.half	.L531-.L530
	.byte	3,127,1,5,17,9
	.half	.L118-.L531
	.byte	3,104,1,5,65,9
	.half	.L119-.L118
	.byte	3,6,1,5,63,9
	.half	.L532-.L119
	.byte	1,5,17,9
	.half	.L533-.L532
	.byte	3,2,1,5,72,9
	.half	.L121-.L533
	.byte	3,7,1,5,70,9
	.half	.L534-.L121
	.byte	1,5,32,9
	.half	.L535-.L534
	.byte	3,2,1,5,17,9
	.half	.L536-.L535
	.byte	3,2,1,5,72,9
	.half	.L127-.L536
	.byte	3,12,1,5,70,9
	.half	.L537-.L127
	.byte	1,5,32,9
	.half	.L538-.L537
	.byte	3,3,1,5,17,9
	.half	.L539-.L538
	.byte	3,2,1,5,9,9
	.half	.L128-.L539
	.byte	3,3,1,5,53,9
	.half	.L115-.L128
	.byte	3,6,1,5,22,9
	.half	.L255-.L115
	.byte	3,6,1,9
	.half	.L540-.L255
	.byte	3,7,1,9
	.half	.L541-.L540
	.byte	3,20,1,9
	.half	.L542-.L541
	.byte	3,116,1,9
	.half	.L543-.L542
	.byte	3,15,1,9
	.half	.L544-.L543
	.byte	3,1,1,9
	.half	.L545-.L544
	.byte	3,1,1,9
	.half	.L546-.L545
	.byte	3,125,1,9
	.half	.L547-.L546
	.byte	3,127,1,5,17,9
	.half	.L133-.L547
	.byte	3,104,1,5,32,9
	.half	.L134-.L133
	.byte	3,6,1,5,17,9
	.half	.L548-.L134
	.byte	3,2,1,5,21,9
	.half	.L136-.L548
	.byte	3,7,1,5,79,9
	.half	.L549-.L136
	.byte	1,5,43,9
	.half	.L550-.L549
	.byte	1,5,65,9
	.half	.L551-.L550
	.byte	3,3,1,5,63,9
	.half	.L552-.L551
	.byte	1,5,17,9
	.half	.L553-.L552
	.byte	3,2,1,5,32,9
	.half	.L142-.L553
	.byte	3,12,1,5,17,9
	.half	.L554-.L142
	.byte	3,2,1,5,9,9
	.half	.L143-.L554
	.byte	3,3,1,5,24,9
	.half	.L116-.L143
	.byte	3,5,1,5,9,9
	.half	.L555-.L116
	.byte	3,2,1,5,5,9
	.half	.L117-.L555
	.byte	3,4,1,5,53,7,9
	.half	.L556-.L117
	.byte	3,3,1,5,51,9
	.half	.L557-.L556
	.byte	1,5,36,9
	.half	.L558-.L557
	.byte	3,4,1,5,51,9
	.half	.L559-.L558
	.byte	1,5,5,9
	.half	.L149-.L559
	.byte	3,3,1,5,1,9
	.half	.L150-.L149
	.byte	3,1,1,7,9
	.half	.L175-.L150
	.byte	0,1,1
.L505:
	.sdecl	'.debug_ranges',debug,cluster('Fee_LLRedundantCpyChk')
	.sect	'.debug_ranges'
.L174:
	.word	-1,.L156,0,.L175-.L156,0,0
	.sdecl	'.debug_info',debug,cluster('Fee_GlobInfoRedundantRdHeader_st')
	.sect	'.debug_info'
.L176:
	.word	205
	.half	3
	.word	.L177
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlSectorHandling.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L157
	.byte	3
	.byte	'Fee_GlobInfoRedundantRdHeader_st',0,2,43,37
	.word	.L204
	.byte	5,3
	.word	Fee_GlobInfoRedundantRdHeader_st
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Fee_GlobInfoRedundantRdHeader_st')
	.sect	'.debug_abbrev'
.L177:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('Fee_LLCheckReorganizationNeed')
	.sect	'.debug_loc'
.L183:
	.word	-1,.L152,0,.L205-.L152
	.half	1
	.byte	85
	.word	.L209-.L152,.L210-.L152
	.half	1
	.byte	89
	.word	.L10-.L152,.L211-.L152
	.half	1
	.byte	89
	.word	0,0
.L151:
	.word	-1,.L152,0,.L179-.L152
	.half	2
	.byte	138,0
	.word	0,0
.L181:
	.word	-1,.L152,0,.L206-.L152
	.half	1
	.byte	84
	.word	.L210-.L152,.L212-.L152
	.half	1
	.byte	88
	.word	.L211-.L152,.L219-.L152
	.half	1
	.byte	88
	.word	0,0
.L186:
	.word	-1,.L152,.L213-.L152,.L214-.L152
	.half	5
	.byte	144,32,157,32,0
	.word	.L215-.L152,.L216-.L152
	.half	5
	.byte	144,32,157,32,0
	.word	.L6-.L152,.L4-.L152
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L188:
	.word	-1,.L152,.L205-.L152,.L208-.L152
	.half	1
	.byte	82
	.word	.L209-.L152,.L211-.L152
	.half	1
	.byte	91
	.word	0,0
.L187:
	.word	-1,.L152,.L217-.L152,.L218-.L152
	.half	1
	.byte	95
	.word	0,0
.L184:
	.word	-1,.L152,.L207-.L152,.L179-.L152
	.half	1
	.byte	90
	.word	.L220-.L152,.L179-.L152
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fee_LLRedundantCpyChk')
	.sect	'.debug_loc'
.L155:
	.word	-1,.L156,0,.L199-.L156
	.half	2
	.byte	138,0
	.word	0,0
.L201:
	.word	-1,.L156,0,.L249-.L156
	.half	1
	.byte	100
	.word	.L250-.L156,.L251-.L156
	.half	1
	.byte	111
	.word	.L114-.L156,.L117-.L156
	.half	1
	.byte	111
	.word	.L253-.L156,.L254-.L156
	.half	1
	.byte	101
	.word	.L115-.L156,.L255-.L156
	.half	1
	.byte	100
	.word	.L116-.L156,.L117-.L156
	.half	1
	.byte	100
	.word	0,0
.L202:
	.word	-1,.L156,.L252-.L156,.L199-.L156
	.half	1
	.byte	88
	.word	.L256-.L156,.L199-.L156
	.half	1
	.byte	82
	.word	0,0
.L203:
	.word	-1,.L156,.L254-.L156,.L115-.L156
	.half	1
	.byte	82
	.word	.L255-.L156,.L116-.L156
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fee_LLSectorReorganization')
	.sect	'.debug_loc'
.L153:
	.word	-1,.L154,0,.L221-.L154
	.half	2
	.byte	138,0
	.word	.L221-.L154,.L189-.L154
	.half	2
	.byte	138,16
	.word	.L189-.L154,.L189-.L154
	.half	2
	.byte	138,0
	.word	0,0
.L191:
	.word	-1,.L154,0,.L222-.L154
	.half	1
	.byte	100
	.word	.L223-.L154,.L189-.L154
	.half	2
	.byte	145,120
	.word	.L17-.L154,.L231-.L154
	.half	1
	.byte	100
	.word	.L18-.L154,.L235-.L154
	.half	1
	.byte	100
	.word	.L19-.L154,.L239-.L154
	.half	1
	.byte	100
	.word	.L20-.L154,.L241-.L154
	.half	1
	.byte	100
	.word	.L21-.L154,.L25-.L154
	.half	1
	.byte	100
	.word	.L246-.L154,.L247-.L154
	.half	1
	.byte	111
	.word	0,0
.L194:
	.word	-1,.L154,.L244-.L154,.L245-.L154
	.half	5
	.byte	144,32,157,32,0
	.word	.L106-.L154,.L105-.L154
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L195:
	.word	-1,.L154,.L233-.L154,.L234-.L154
	.half	1
	.byte	95
	.word	.L237-.L154,.L238-.L154
	.half	1
	.byte	95
	.word	.L242-.L154,.L21-.L154
	.half	1
	.byte	90
	.word	.L243-.L154,.L241-.L154
	.half	1
	.byte	84
	.word	0,0
.L192:
	.word	-1,.L154,.L224-.L154,.L189-.L154
	.half	1
	.byte	88
	.word	.L248-.L154,.L189-.L154
	.half	1
	.byte	82
	.word	0,0
.L198:
	.word	-1,.L154,.L225-.L154,.L189-.L154
	.half	1
	.byte	89
	.word	0,0
.L197:
	.word	-1,.L154,.L226-.L154,.L16-.L154
	.half	1
	.byte	82
	.word	0,0
.L196:
	.word	-1,.L154,.L222-.L154,.L226-.L154
	.half	1
	.byte	82
	.word	.L227-.L154,.L228-.L154
	.half	1
	.byte	95
	.word	.L27-.L154,.L16-.L154
	.half	1
	.byte	95
	.word	0,0
.L193:
	.word	-1,.L154,.L229-.L154,.L41-.L154
	.half	1
	.byte	82
	.word	.L33-.L154,.L230-.L154
	.half	1
	.byte	82
	.word	.L232-.L154,.L18-.L154
	.half	1
	.byte	82
	.word	.L236-.L154,.L19-.L154
	.half	1
	.byte	82
	.word	.L240-.L154,.L20-.L154
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L560:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Fee_LLCheckReorganizationNeed')
	.sect	'.debug_frame'
	.word	12
	.word	.L560,.L152,.L179-.L152
	.sdecl	'.debug_frame',debug,cluster('Fee_LLSectorReorganization')
	.sect	'.debug_frame'
	.word	36
	.word	.L560,.L154,.L189-.L154
	.byte	4
	.word	(.L221-.L154)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L189-.L221)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Fee_LLRedundantCpyChk')
	.sect	'.debug_frame'
	.word	12
	.word	.L560,.L156,.L199-.L156

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1303  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1304  #define FEE_STOP_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1305  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1306  /* FEE_PRESENT */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1307  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1308  /* 1 == FEE_PRV_CFG_SELECTED_FS */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1309  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1310  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1311  /*<BASDKey>
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1312  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1313  * $History__:$
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1314  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlSectorHandling.c	  1315  </BASDKey>*/

	; Module end
