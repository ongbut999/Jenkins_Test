	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc16708a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\rba_FeeFs1_LlDetectSector.src BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlDetectSector.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlDetectSector.c'

	
$TC16X
	
	.sdecl	'.text.rba_FeeFs1_LlDetectSector.Fee_LLDetectActiveSector',code,cluster('Fee_LLDetectActiveSector')
	.sect	'.text.rba_FeeFs1_LlDetectSector.Fee_LLDetectActiveSector'
	.align	2
	
	.global	Fee_LLDetectActiveSector

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	     1  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	     2  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	     3  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	     4  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	     5   **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	     6   * \moduledescription
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	     7   *           AUTOSAR FEE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	     8   *           According to Document Version 3.0.0, Part of Release 4.0, Revision 2
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	     9   * \scope    INTERN
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    10   **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    11   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    12  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    13  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    14  /*
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    15   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    16   * Includes
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    17   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    18   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    19  #include "Fee.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    20  #include "rba_FeeFs1_Prv.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    21  #include "Fls.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    22  #if (!defined(FLS_AR_RELEASE_MAJOR_VERSION) || (FLS_AR_RELEASE_MAJOR_VERSION != FEE_AR_RELEASE_MAJOR_VERSION))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    23      #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    24  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    25  #if (!defined(FLS_AR_RELEASE_MINOR_VERSION) || ((FLS_AR_RELEASE_MINOR_VERSION != 0) && (FLS_AR_RELEASE_MINOR_VERSION != 2)))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    26      #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    27  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    28  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    29  #include "Crc.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    30  #if (!defined(CRC_AR_RELEASE_MAJOR_VERSION) || (CRC_AR_RELEASE_MAJOR_VERSION != FEE_AR_RELEASE_MAJOR_VERSION))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    31      #error "AUTOSAR major version undefined or mismatched"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    32  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    33  #if (!defined(CRC_AR_RELEASE_MINOR_VERSION) || ((CRC_AR_RELEASE_MINOR_VERSION != 0) && (CRC_AR_RELEASE_MINOR_VERSION != 2)))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    34      #error "AUTOSAR minor version undefined or mismatched"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    35  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    36  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    37  #if(defined(FEE_PRV_CFG_SELECTED_FS) && (1 == FEE_PRV_CFG_SELECTED_FS))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    38  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    39  #if (FEE_PRESENT == 1)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    40  #define FEE_START_SEC_VAR_CLEARED_16
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    41  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    42  static uint16 Fee_LastErasedMarker_u16[FEE_NUM_FLASH_BANKS_AVAILABLE];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    43  #define FEE_STOP_SEC_VAR_CLEARED_16
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    44  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    45  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    46  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    47   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    48   * Fee_LLDetectActiveSector(): Detect the active sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    49   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    50   * This function is used to detect the currently active sector.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    51   * If more than 2 sectors are available, the function is responsible
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    52   * for putting the blocks in a logical order with the eldest data
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    53   * sector at position zero.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    54   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    55   * \param    none
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    56   * \return   Physical index of the active sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    57   * \retval   0...254    Physical sector index
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    58   * \retval   255        No sector found
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    59   * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    60   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    61   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    62   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    63  #define FEE_START_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    64  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    65  FUNC(uint8, FEE_CODE) Fee_LLDetectActiveSector(void)
; Function Fee_LLDetectActiveSector
.L178:
Fee_LLDetectActiveSector:	.type	func
	sub.a	a10,#56
.L287:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    66  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    67      /* MR12 RULE 8.5 VIOLATION: This is no function declaration but a variable only with an external linkage*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    68      VAR(Fee_stSecDet_tst, AUTOMATIC) Fee_stSecDet_st[FEE_NUM_FLASH_BANKS_AVAILABLE];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    69      VAR(Fee_LLSectorOrder_tst, AUTOMATIC) TmpSectorOrder_st[FEE_NUM_FLASH_BANKS_AVAILABLE];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    70      VAR(uint8, AUTOMATIC)  xCurrSect_u8 = 0;        /* Sector loop counter */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    71      VAR(uint8, AUTOMATIC)  xCntFlashBank_u8 = 0;    /* Loop counter */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    72      VAR(uint8, AUTOMATIC)  cnt_u8 = 0;              /* Inner loop counter */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    73      VAR(uint32, AUTOMATIC) SectCntMin_u32 = 0;      /* Lowest sector change counter */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    74      VAR(uint8,  AUTOMATIC) xActiveSec_u8 = FEE_NO_SEC_IDX_FOUND;  /* Function return */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    75      VAR(uint8,  AUTOMATIC) xPhySecIdx_u8;              /* Physical sector index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    76      VAR(uint8,  AUTOMATIC) xLogSecIdx_u8;            /* Logical sector index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    77      VAR(uint8, AUTOMATIC)  xRepeatSortLoop_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    78  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    79      /* Collect all sector header information */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    80      Fee_LLSearchSectors(&Fee_stSecDet_st[0]);
	lea	a4,[a10]0
	call	Fee_LLSearchSectors
.L543:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    81  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    82      /* Sectors should be handled in the following order
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    83       *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    84       *   +-----------------+             #   old data
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    85       *   | full, SCcnt=X   |             #
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    86       *   | full, SCcnt=X+1 |             #
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    87       *   | full, SCcnt=X+2 |           #####
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    88       *   +-----------------+            ###
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    89       *   | used, SCcnt=X+3 |             #   new data
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    90       *   +-----------------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    91       *   | erased          |                 erased sector, ready to be used
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    92       *   +-----------------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    93       *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    94       *   +-----------------+             Sector has no marker and is in an undefined state. Before using this sector it
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    95       *   | undefined       |             has to be erased.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    96       *   +-----------------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    97       *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    98       *   -> Result of Step 2
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	    99       */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   100  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   101      /* STEP1: Save the sector states prioritized to the temp structure */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   102      /* *************************************************************** */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   103      /* Loop over all configured sectors and search for the available markers */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   104      for(xCurrSect_u8=0; xCurrSect_u8<FEE_NUM_FLASH_BANKS; xCurrSect_u8++)
	mov	d1,#0
.L288:
	movh.a	a12,#@his(Fee_NumFlashBanksUsed_u8)
	lea	a12,[a12]@los(Fee_NumFlashBanksUsed_u8)
	ld.bu	d2,[a12]
.L544:
	j	.L2
.L3:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   105      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   106          TmpSectorOrder_st[xCurrSect_u8].SecChngCnt_u32 = Fee_stSecDet_st[xCurrSect_u8].SecChngCnt_u32;
	sha	d15,d1,#4
.L545:
	addsc.a	a15,a10,d15,#0
	lea	a15,[a15]0
.L546:
	mul	d15,d1,#12
	addsc.a	a2,a10,d15,#0
	lea	a2,[a2]32
.L547:
	ld.w	d0,[a15]
.L548:
	st.w	[a2],d0
.L549:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   107          TmpSectorOrder_st[xCurrSect_u8].xPhySecIdx_u8  = xCurrSect_u8;
	st.b	[a2]8,d1
.L550:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   108  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   109          /* Check for an erase request first */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   110          if(Fee_stSecDet_st[xCurrSect_u8].ctEraseReq_u8 > 0)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   111          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   112              /* Sector is requested to be erased */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   113              TmpSectorOrder_st[xCurrSect_u8].SecState_en    = FEE_SECTOR_REQUEST2ERASE_E;
	mov.aa	a4,a2
	add.a	a4,#4
.L551:
	ld.bu	d15,[a15]7
.L552:
	jeq	d15,#0,.L4
.L553:
	mov	d0,#4
.L554:
	st.w	[a4],d0
.L555:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   114              TmpSectorOrder_st[xCurrSect_u8].SecChngCnt_u32 = FEE_SEC_CHANGE_CNT_UNDEF;
	mov	d0,#-1
.L556:
	st.w	[a2],d0
.L557:
	j	.L5
.L4:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   115          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   116          else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   117          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   118              /* Check for a full marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   119              if(Fee_stSecDet_st[xCurrSect_u8].ctFullMarker_u8 > 0)
	ld.bu	d15,[a15]6
.L558:
	jeq	d15,#0,.L6
.L559:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   120              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   121                  /* The currently evaluated sector is full */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   122                  TmpSectorOrder_st[xCurrSect_u8].SecState_en = FEE_SECTOR_FULL_E;
	mov	d0,#3
.L560:
	st.w	[a4],d0
.L561:
	j	.L7
.L6:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   123              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   124              else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   125              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   126                  /* Check for a used marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   127                  if(Fee_stSecDet_st[xCurrSect_u8].ctUsedMarker_u8 > 0)
	ld.bu	d15,[a15]5
.L562:
	jeq	d15,#0,.L8
.L563:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   128                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   129                      /* The currently evaluated sector is used */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   130                      TmpSectorOrder_st[xCurrSect_u8].SecState_en = FEE_SECTOR_USED_E;
	mov	d0,#2
.L564:
	st.w	[a4],d0
.L565:
	j	.L9
.L8:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   131                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   132                  else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   133                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   134                      /* Check for an erased marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   135                      if (Fee_stSecDet_st[xCurrSect_u8].ctErasedMarker_u8 > 0)
	ld.bu	d15,[a15]4
.L566:
	jeq	d15,#0,.L10
.L567:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   136                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   137                          /* if only a CLONE Marker without USED or START marker is present in the sector header, a cloning
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   138                           * procedure was interrupted. In this case it could be possible that the new, or the old sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   139                           * is the besster choice. Decision was that we will erase the clone sector again.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   140                           */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   141                          if (Fee_stSecDet_st[xCurrSect_u8].ctCloneMarker_u8 > 0){
	ld.bu	d15,[a15]12
.L568:
	jeq	d15,#0,.L11
.L569:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   142                              /* The currently evaluated sector is still in an erased state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   143                              TmpSectorOrder_st[xCurrSect_u8].SecState_en    = FEE_SECTOR_STATE_UNDEF_E;
	mov	d0,#0
.L570:
	st.w	[a4],d0
.L571:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   144                              TmpSectorOrder_st[xCurrSect_u8].SecChngCnt_u32 = FEE_SEC_CHANGE_CNT_UNDEF;
	mov	d0,#-1
.L572:
	st.w	[a2],d0
.L573:
	j	.L12
.L11:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   145                          }else{
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   146                              /* The currently evaluated sector is still in an erased state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   147                              TmpSectorOrder_st[xCurrSect_u8].SecState_en = FEE_SECTOR_ERASED_E;
	mov	d15,#1
.L574:
	st.w	[a4],d15
.L12:
	j	.L13
.L10:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   148                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   149                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   150                      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   151                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   152                          /* The currently evaluated sector is in an undefined state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   153                          TmpSectorOrder_st[xCurrSect_u8].SecState_en    = FEE_SECTOR_STATE_UNDEF_E;
	mov	d15,#0
.L575:
	st.w	[a4],d15
.L576:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   154                          TmpSectorOrder_st[xCurrSect_u8].SecChngCnt_u32 = FEE_SEC_CHANGE_CNT_UNDEF;
	mov	d15,#-1
.L577:
	st.w	[a2],d15
.L13:
.L9:
.L7:
.L5:
	add	d1,#1
.L289:
	extr.u	d1,d1,#0,#8
.L2:
	jlt.u	d1,d2,.L3
.L578:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   155                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   156                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   157              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   158          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   159      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   160  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   161      /* STEP2: Sort all sectors using the sector change counter as the criteria for
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   162       *        the topicality and save it to the global structure */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   163      /* ********************************************************* */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   164  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   165      /* Set start value (min) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   166      SectCntMin_u32 = FEE_SEC_CHANGE_CNT_UNDEF;
	mov	d5,#-1
.L290:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   167  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   168      /* Loop over all configured flash banks */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   169      for(xCntFlashBank_u8=0; xCntFlashBank_u8<FEE_NUM_FLASH_BANKS; xCntFlashBank_u8++)
	mov	d6,#0
.L291:
	j	.L14
.L15:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   170      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   171          /* Reset sector change counter */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   172          Fee_LLSectorOrder_st[xCntFlashBank_u8].SecChngCnt_u32 = FEE_SEC_CHANGE_CNT_UNDEF;
	movh.a	a15,#@his(Fee_LLSectorOrder_st)
	lea	a15,[a15]@los(Fee_LLSectorOrder_st)
.L579:
	mul	d15,d6,#12
	addsc.a	a6,a15,d15,#0
.L580:
	mov	d0,#-1
.L581:
	st.w	[a6],d0
.L582:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   173          xCurrSect_u8 = 0xFF;
	mov	d0,#255
.L293:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   174          /* Inner loop over all configured flash banks */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   175          for(cnt_u8=0; cnt_u8<FEE_NUM_FLASH_BANKS; cnt_u8++)
	mov	d1,#0
.L294:
	j	.L16
.L17:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   176          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   177              /* Search for the highest sector change counter within the sector headers */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   178              /* MR12 RULE 9.1 VIOLATION: Array is filled in the previous loop */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   179              if((SectCntMin_u32 >= TmpSectorOrder_st[cnt_u8].SecChngCnt_u32) &&
	mul	d15,d1,#12
	addsc.a	a15,a10,d15,#0
	lea	a15,[a15]32
.L583:
	ld.w	d3,[a15]
.L584:
	jlt.u	d5,d3,.L18
.L585:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   180                 (TmpSectorOrder_st[cnt_u8].SecState_en != FEE_SECTOR_CONSIDERED_E) &&
	ld.w	d4,[a15]4
.L586:
	mov	d15,#13
.L587:
	jeq	d15,d4,.L19
.L588:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   181                 (TmpSectorOrder_st[cnt_u8].SecChngCnt_u32 != FEE_SEC_CHANGE_CNT_UNDEF))
	jeq	d3,#-1,.L20
.L589:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   182              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   183                  /* Save the sector index with the lowest sector change counter */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   184                  SectCntMin_u32 = TmpSectorOrder_st[cnt_u8].SecChngCnt_u32;
	mov	d5,d3
.L590:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   185                  xCurrSect_u8 = cnt_u8;
	mov	d0,d1
.L20:
.L19:
.L18:
	add	d1,#1
.L295:
	extr.u	d1,d1,#0,#8
.L16:
	jlt.u	d1,d2,.L17
.L591:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   186              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   187          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   188          if (xCurrSect_u8 == 0xFF){
	mov	d15,#255
.L592:
	jne	d15,d0,.L21
.L593:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   189              /* no block found till now --> loop not necessary */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   190              for(cnt_u8=0; cnt_u8<FEE_NUM_FLASH_BANKS; cnt_u8++)
	mov	d1,#0
.L594:
	j	.L22
.L23:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   191              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   192                  /* Search for ERASED or UNDEF sectors and put them to behind all other sectors */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   193                  if((SectCntMin_u32 == FEE_SEC_CHANGE_CNT_UNDEF) &&
	jne	d5,#-1,.L24
.L595:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   194                     (TmpSectorOrder_st[cnt_u8].SecState_en != FEE_SECTOR_CONSIDERED_E))
	mul	d15,d1,#12
	addsc.a	a15,a10,d15,#0
.L596:
	ld.w	d3,[a15]36
.L597:
	mov	d15,#13
.L598:
	jeq	d15,d3,.L25
.L599:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   195                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   196                      /* Save the sector index with the lowest sector change counter */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   197                      xCurrSect_u8 = cnt_u8;
	mov	d0,d1
.L600:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   198                      break;
	j	.L26
.L25:
.L24:
	add	d1,#1
.L296:
	extr.u	d1,d1,#0,#8
.L22:
	jlt.u	d1,d2,.L23

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   199                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   200              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   201          }
.L26:
.L21:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   202          /* Copy the header data of the sector with the smallest sector change counter value which was not considered yet */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   203          Fee_LLSectorOrder_st[xCntFlashBank_u8].xPhySecIdx_u8   = TmpSectorOrder_st[xCurrSect_u8].xPhySecIdx_u8;
	lea	a2,[a6]8
.L601:
	mul	d15,d0,#12
	addsc.a	a15,a10,d15,#0
	lea	a15,[a15]32
.L602:
	ld.bu	d15,[a15]8
.L603:
	st.b	[a2],d15
.L604:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   204          Fee_LLSectorOrder_st[xCntFlashBank_u8].SecState_en     = TmpSectorOrder_st[xCurrSect_u8].SecState_en;
	mov.aa	a4,a15
	add.a	a4,#4
.L605:
	mov.aa	a5,a6
	add.a	a5,#4
.L606:
	ld.w	d15,[a4]
.L607:
	st.w	[a5],d15
.L608:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   205          Fee_LLSectorOrder_st[xCntFlashBank_u8].SecChngCnt_u32  = TmpSectorOrder_st[xCurrSect_u8].SecChngCnt_u32;
	ld.w	d15,[a15]
.L609:
	st.w	[a6],d15
.L610:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   206  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   207          /* Get sector change counter */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   208          if ((Fee_LLSectorOrder_st[xCntFlashBank_u8].SecState_en != FEE_SECTOR_STATE_UNDEF_E) &&
	ld.w	d15,[a5]
.L611:
	jeq	d15,#0,.L27
.L612:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   209              (Fee_LLSectorOrder_st[xCntFlashBank_u8].SecState_en != FEE_SECTOR_REQUEST2ERASE_E))
	jeq	d15,#4,.L28
.L613:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   210          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   211              /* Save sector change counter for currently active sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   212              Fee_SecChngCnt_u32 = Fee_LLSectorOrder_st[xCntFlashBank_u8].SecChngCnt_u32;
	movh.a	a15,#@his(Fee_SecChngCnt_u32)
	lea	a15,[a15]@los(Fee_SecChngCnt_u32)
.L614:
	ld.w	d15,[a6]
.L615:
	st.w	[a15],d15
.L28:
.L27:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   213          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   214  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   215          /* Save index of the current sector to the array Ram table in order to allow fast access to the
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   216           * sector property configuration table in the flash. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   217          Fee_idxLLSectorOrder_au8[Fee_LLSectorOrder_st[xCntFlashBank_u8].xPhySecIdx_u8] = xCntFlashBank_u8;
	movh.a	a15,#@his(Fee_idxLLSectorOrder_au8)
	lea	a15,[a15]@los(Fee_idxLLSectorOrder_au8)
.L616:
	ld.bu	d15,[a2]
.L617:
	addsc.a	a15,a15,d15,#0
.L618:
	st.b	[a15],d6
.L619:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   218  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   219          /* Mark this sector as already considered and reset the minimum sector change counter for the next loop run */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   220          TmpSectorOrder_st[xCurrSect_u8].SecState_en = FEE_SECTOR_CONSIDERED_E;
	mov	d15,#13
.L620:
	st.w	[a4],d15
.L621:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   221          SectCntMin_u32 = FEE_SEC_CHANGE_CNT_UNDEF;
	mov	d5,#-1
.L622:
	add	d6,#1
.L292:
	extr.u	d6,d6,#0,#8
.L14:
	jlt.u	d6,d2,.L15
.L623:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   222      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   223      /* Workaround or robustness for the Kammerer/Daimler problem in the CB. If there is data programmed in a sector, but there is no USED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   224       * marker in the sector header, data was overprogrammed by the FEE. For this case it is not critical to mark the ERASED sector as USED.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   225       * To be consistent in RAM and FLASH, the marker will be written directly into the DFLASH. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   226      for(xCntFlashBank_u8=1; xCntFlashBank_u8<FEE_NUM_FLASH_BANKS; xCntFlashBank_u8++)
	mov	d8,#1
.L297:
	j	.L29
.L30:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   227      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   228          xPhySecIdx_u8 = Fee_LLSectorOrder_st[xCntFlashBank_u8].xPhySecIdx_u8;
	movh.a	a15,#@his(Fee_LLSectorOrder_st)
	lea	a15,[a15]@los(Fee_LLSectorOrder_st)
.L624:
	mul	d15,d8,#12
	addsc.a	a15,a15,d15,#0
.L625:
	ld.bu	d9,[a15]8
.L299:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   229          if ((Fee_LLSectorOrder_st[xCntFlashBank_u8].SecState_en == FEE_SECTOR_ERASED_E) &&
	ld.w	d15,[a15]4
.L626:
	jne	d15,#1,.L31
.L627:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   230              (Fee_LLSectorOrder_st[xCntFlashBank_u8-1].SecState_en == FEE_SECTOR_FULL_E))
	ld.w	d15,[a15]-8
.L628:
	jne	d15,#3,.L32
.L629:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   231          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   232              while(Fee_LLWriteMarker(xPhySecIdx_u8, FEE_USED_MARKER_ID_E) == FEE_ORDER_PENDING_E){
	j	.L33
.L34:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   233                  Fls_MainFunction();
	call	Fls_17_Pmu_MainFunction
.L33:
	mov	d5,#2
	mov	d4,d9
.L300:
	call	Fee_LLWriteMarker
.L301:
	jeq	d2,#0,.L34
.L32:
.L31:
	add	d8,#1
.L298:
	extr.u	d8,d8,#0,#8
.L29:
	ld.bu	d15,[a12]
.L630:
	jlt.u	d8,d15,.L30
.L631:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   234              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   235          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   236      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   237      /* STEP3:   Check all ERASED sectors, if they are empty.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   238                  if one erased sector found which has still some data on it -->
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   239                  keep this sector as used sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   240      /* **************************************************************************************** */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   241      Fee_CheckErasedSectorEmpty();
	call	Fee_CheckErasedSectorEmpty
.L632:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   242  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   243      /* STEP4: Detect the most current sector index and save it to the return value */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   244      /* *************************************************************************** */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   245      /* Get the index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   246      xActiveSec_u8 = Fee_GetMostCurrentSectorIdx();
	call	Fee_GetMostCurrentSectorIdx
.L302:
	mov	d4,d2
.L303:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   247  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   248      /* update start-address of first blockheader in USED sector. This address will only be used in function Fee_LLFindEmptyPage to find
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   249       * first page which is not programmed. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   250      Fee_RdWrOrder_st.xStartAddrNextSector_u32 = Fee_stSecDet_st[xActiveSec_u8].xStartAddr_u32;
	movh.a	a15,#@his(Fee_RdWrOrder_st)
	lea	a15,[a15]@los(Fee_RdWrOrder_st)
.L633:
	sha	d15,d4,#4
.L634:
	addsc.a	a2,a10,d15,#0
.L635:
	ld.w	d15,[a2]8
.L636:
	st.w	[a15]24,d15
.L637:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   251  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   252      /* STEP5: Check if there are UNDEFINED / ERASED / REQ2ERASED sectors in between USED or FULL sectors */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   253      /* ************************************************************************************************* */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   254      /* Loop over all configured flash banks */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   255      do
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   256      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   257          xRepeatSortLoop_u8 = 0;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   258          for(xCntFlashBank_u8=1; xCntFlashBank_u8<FEE_NUM_FLASH_BANKS; xCntFlashBank_u8++)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   259          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   260              /* Check the consistency of the sector states */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   261              if(((Fee_LLSectorOrder_st[xCntFlashBank_u8].SecState_en == FEE_SECTOR_USED_E) ||
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   262                  (Fee_LLSectorOrder_st[xCntFlashBank_u8].SecState_en == FEE_SECTOR_FULL_E)) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   263                  (Fee_LLSectorOrder_st[xCntFlashBank_u8-1].SecState_en != FEE_SECTOR_USED_E) &&
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   264                  (Fee_LLSectorOrder_st[xCntFlashBank_u8-1].SecState_en != FEE_SECTOR_FULL_E))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   265              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   266                  /* Save the physical sector index temporarily */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   267                  xPhySecIdx_u8 = Fee_LLSectorOrder_st[xCntFlashBank_u8-1].xPhySecIdx_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   268  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   269                  xLogSecIdx_u8=xCntFlashBank_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   270                  do
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   271                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   272                      /* Reorganize the sector order */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   273                      Fee_LLSectorOrder_st[xLogSecIdx_u8-1] = Fee_LLSectorOrder_st[xLogSecIdx_u8];
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   274  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   275                      /* Reorganize the array Ram table */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   276                      Fee_idxLLSectorOrder_au8[Fee_LLSectorOrder_st[xLogSecIdx_u8-1].xPhySecIdx_u8] = xLogSecIdx_u8-1;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   277                      xLogSecIdx_u8++;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   278                  }while(xLogSecIdx_u8<FEE_NUM_FLASH_BANKS);
	ld.bu	d0,[a12]

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   279  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   280                  /* Update the state information of the last sector in the ring */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   281                  Fee_LLSectorOrder_st[FEE_NUM_FLASH_BANKS-1].SecState_en     = FEE_SECTOR_REQUEST2ERASE_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   282                  Fee_LLSectorOrder_st[FEE_NUM_FLASH_BANKS-1].xPhySecIdx_u8   = xPhySecIdx_u8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   283                  Fee_LLSectorOrder_st[FEE_NUM_FLASH_BANKS-1].SecChngCnt_u32  = FEE_SEC_CHANGE_CNT_UNDEF;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   284                  Fee_idxLLSectorOrder_au8[xPhySecIdx_u8] = FEE_NUM_FLASH_BANKS-1;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   285                  xRepeatSortLoop_u8 = 1;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   286              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   287          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   288      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   289      while(xRepeatSortLoop_u8 != 0);
.L35:
	mov	d1,#0
.L304:
	mov	d3,#1
.L306:
	j	.L36
.L37:
	movh.a	a2,#@his(Fee_LLSectorOrder_st)
	lea	a2,[a2]@los(Fee_LLSectorOrder_st)
.L638:
	mul	d15,d3,#12
	addsc.a	a15,a2,d15,#0
.L639:
	ld.w	d15,[a15]4
.L640:
	jeq	d15,#2,.L38
.L641:
	jne	d15,#3,.L39
.L38:
	ld.w	d15,[a15]-8
.L642:
	jeq	d15,#2,.L40
.L643:
	jeq	d15,#3,.L41
.L644:
	ld.bu	d1,[a15]-4
.L305:
	mov	d2,d3
.L308:
	movh.a	a4,#@his(Fee_idxLLSectorOrder_au8)
	lea	a4,[a4]@los(Fee_idxLLSectorOrder_au8)
.L42:
	mul	d15,d2,#12
.L645:
	addsc.a	a15,a2,d15,#0
.L646:
	lea	a5,[a15]0
.L647:
	lea	a6,[a15]-12
	mov.a	a7,#2
.L43:
	ld.w	d15,[a5+]
	st.w	[a6+],d15
	loop	a7,.L43
.L648:
	ld.bu	d15,[a15]-4
.L649:
	addsc.a	a15,a4,d15,#0
.L650:
	add	d15,d2,#-1
.L651:
	st.b	[a15],d15
.L652:
	add	d2,#1
.L309:
	extr.u	d2,d2,#0,#8
.L310:
	ld.bu	d0,[a12]
.L653:
	jlt.u	d2,d0,.L42
.L654:
	mul	d15,d0,#12
.L655:
	addsc.a	a15,a2,d15,#0
	lea	a15,[a15]-12
.L656:
	mov	d15,#4
.L657:
	st.w	[a15]4,d15
.L658:
	st.b	[a15]8,d1
.L659:
	mov	d15,#-1
.L660:
	st.w	[a15],d15
.L661:
	addsc.a	a15,a4,d1,#0
.L662:
	add	d15,d0,#-1
.L663:
	st.b	[a15],d15
.L664:
	mov	d1,#1
.L41:
.L40:
.L39:
	add	d3,#1
.L307:
	extr.u	d3,d3,#0,#8
.L36:
	jlt.u	d3,d0,.L37
.L665:
	jne	d1,#0,.L35
.L666:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   290  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   291      /* Return the index of the most current sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   292      return (xActiveSec_u8);
	mov	d2,d4
.L311:
	j	.L44

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   293  }
.L44:
	ret
.L247:
	
__Fee_LLDetectActiveSector_function_end:
	.size	Fee_LLDetectActiveSector,__Fee_LLDetectActiveSector_function_end-Fee_LLDetectActiveSector
.L204:
	; End of function
	
	.sdecl	'.text.rba_FeeFs1_LlDetectSector.Fee_LLSearchSectors',code,cluster('Fee_LLSearchSectors')
	.sect	'.text.rba_FeeFs1_LlDetectSector.Fee_LLSearchSectors'
	.align	2
	
	.global	Fee_LLSearchSectors

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   294  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   295  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   296  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   297   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   298   * Fee_LLSearchSectors(): Read all sector headers
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   299   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   300   * This function reads the sector headers of all configured sectors
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   301   * and stores its sector change counters which can be found within
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   302   * the marker content. This information is the base for finding
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   303   * the currently active sector by the function
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   304   * Fee_Rb_LLDetecActiveSector.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   305   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   306   * Hint: It is not allowed to call this function if the scheduling
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   307   * is currently running (e.g. outside the intialization or shutdown
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   308   * phase).
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   309   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   310   * \param    Fee_stSecDet_ps:   Pointer to an array of marker
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   311   *                              structures
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   312   * \return
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   313   * \retval   none
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   314   * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   315   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   316   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   317   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   318  /* MR12 RULE 1505 VIOLATION: This function is used within the same file and has no external linkage */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   319  FUNC(void, FEE_CODE) Fee_LLSearchSectors(P2VAR(Fee_stSecDet_tst, AUTOMATIC, FEE_APPL_DATA) Fee_stSecDet_ps)
; Function Fee_LLSearchSectors
.L180:
Fee_LLSearchSectors:	.type	func
	sub.a	a10,#8
.L312:
	mov.aa	a12,a4
.L313:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   320  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   321      VAR(Fee_MarkerProp_t, AUTOMATIC)    xRdMarker;                  /* Marker structure */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   322      VAR(uint32, AUTOMATIC)              xTmpMarkerContent_u32;      /* Marker content */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   323      VAR(uint8, AUTOMATIC)               xCurrSect_u8 = 0;           /* Current sector index */
	mov	d8,#0
.L314:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   324      VAR(uint16, AUTOMATIC)              xCalc_crc_u16;              /* CRC16 variable */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   325      VAR(sint8, AUTOMATIC)                xMarkerIdx_s8 = -1;            /* Marker index */
	mov	d9,#-1
.L316:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   326      VAR(uint32, AUTOMATIC)                xAdrBlnkChk_u32 = FEE_NULL;    /* Blank check address */
	mov	d10,#0
.L318:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   327  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   328      /* Set the number of Retries */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   329      Fee_RdWrRetries_u8 = FEE_MAX_RD_WR_COMP_RETRIES;
	movh.a	a13,#@his(Fee_RdWrRetries_u8)
	lea	a13,[a13]@los(Fee_RdWrRetries_u8)
.L385:
	mov	d0,#3
.L386:
	st.b	[a13],d0
.L387:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   330  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   331      /* Loop over all sectors */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   332      while (xCurrSect_u8<FEE_NUM_FLASH_BANKS)
	j	.L45
.L46:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   333      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   334          /* Read state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   335          switch(Fee_RdWrOrder_st.Fee_LLRdState_en)
	movh.a	a15,#@his(Fee_RdWrOrder_st)
	lea	a15,[a15]@los(Fee_RdWrOrder_st)
.L388:
	lea	a14,[a15]92
	ld.w	d0,[a14]
.L389:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   336          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   337              /* Init state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   338              case FEE_LL_INIT_READ_E:
	mov	d15,#0
	jeq	d15,d0,.L47
.L390:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   339              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   340                  /* Initialize sector info array */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   341                  Fee_stSecDet_ps[xCurrSect_u8].ctErasedMarker_u8    = 0;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   342                  Fee_stSecDet_ps[xCurrSect_u8].ctUsedMarker_u8      = 0;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   343                  Fee_stSecDet_ps[xCurrSect_u8].ctFullMarker_u8      = 0;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   344                  Fee_stSecDet_ps[xCurrSect_u8].ctEraseReq_u8        = 0;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   345                  Fee_stSecDet_ps[xCurrSect_u8].ctCloneMarker_u8     = 0;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   346                  Fee_stSecDet_ps[xCurrSect_u8].SecChngCnt_u32       = FEE_SEC_CHANGE_CNT_UNDEF;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   347                  Fee_stSecDet_ps[xCurrSect_u8].xStartAddr_u32       = FEE_MAXUINT32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   348                  /* Initialize global array for accessing sectors in the correct order */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   349                  Fee_LLSectorOrder_st[xCurrSect_u8].SecChngCnt_u32 = FEE_SEC_CHANGE_CNT_UNDEF;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   350                  Fee_LLSectorOrder_st[xCurrSect_u8].xPhySecIdx_u8  = 0;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   351                  Fee_LLSectorOrder_st[xCurrSect_u8].SecState_en    = FEE_SECTOR_STATE_UNDEF_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   352  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   353                  /* Reset buffer */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   354                  Fee_SrvMemSet8((uint8*)&Fee_MarkerBufBytePtr_cpu8[0], (uint8)FEE_ERASE_PATTERN , FEE_SEC_HEADER_SIZE);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   355  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   356                  /* Set next state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   357                  Fee_RdWrOrder_st.Fee_LLRdState_en = FEE_LL_BLANK_CHECK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   358  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   359                  /* Initialize last erased marker for this sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   360                  Fee_LastErasedMarker_u16[xCurrSect_u8]  = 0;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   361  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   362                  /* Initialize the marker index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   363                  xMarkerIdx_s8 = -1;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   364  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   365                  /* Init the start address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   366                  xAdrBlnkChk_u32 = Fee_FlashProp_st[xCurrSect_u8].Fee_PhysStartAddress_u32 - FEE_PAGE_LEN;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   367              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   368              /* No break to save time */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   369  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   370              /* Perform a blank check */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   371              /* MR12 RULE 16.3 VIOLATION: Time critical position */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   372              case FEE_LL_BLANK_CHECK_E:
	mov	d1,#1
	jeq	d1,d0,.L48
.L391:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   373              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   374                  /* Increment the marker index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   375                  xMarkerIdx_s8++;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   376  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   377                  /* Check if the end of the marker section is already reached */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   378                  if(xMarkerIdx_s8 <= FEE_NUM_MARKER_IN_HEADER)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   379                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   380                      /* Calculate the blank check address for the next marker (markers will start only at a free page) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   381                      xAdrBlnkChk_u32 += FEE_PAGE_LEN;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   382  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   383                      /* Call the blank check function
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   384                       * -> for devices in witch the FEE_PHY_PAGE_LEN is smaller than FEE_MARKER_SIZE the second part of the marker needs to be checked! */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   385  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   386                      /* MR12 RULE 2.2 VIOLATION: Checks the last phys. header page. If phys. size equals logical,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   387                            this leads to checking with Offset 0*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   388                      if(Fls_Rb_BlankCheck(xAdrBlnkChk_u32 + (FEE_PAGE_LEN - FEE_PHY_PAGE_LEN),
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   389                                           NULL_PTR,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   390                                           FEE_PHY_PAGE_LEN) != E_NOT_OK)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   391                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   392                          /* Set the next state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   393                          Fee_RdWrOrder_st.Fee_LLRdState_en = FEE_LL_BLANK_CHECK_WAIT_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   394                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   395                      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   396                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   397                          /* Error handling due to wrong user parameters or a currently active FLS
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   398                           * -> Try again with the next sector*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   399                          Fee_RdWrOrder_st.Fee_LLRdState_en = FEE_LL_INIT_READ_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   400                          xCurrSect_u8++;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   401                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   402                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   403                  else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   404                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   405                      /* Go on with the next sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   406                      Fee_RdWrOrder_st.Fee_LLRdState_en = FEE_LL_INIT_READ_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   407                      xCurrSect_u8++;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   408                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   409              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   410              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   411  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   412              /* Wait for the blank check to be finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   413              case FEE_LL_BLANK_CHECK_WAIT_E:
	mov	d1,#2
	jeq	d1,d0,.L49
.L392:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   414              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   415                  /* The next state will be set by the Fee_JobEndNotification () or
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   416                   * Fee_JobErrorNotification() function automatically */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   417  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   418                  /* Check whether the OS is currently running or not */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   419                  if (Fee_stMain == FEE_POLLING_MODE_E)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   420                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   421                      /* Call the Fls main function manually */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   422                      Fls_MainFunction();
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   423                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   424  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   425                  #if (STD_ON == FEE_POLLING_MODE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   426                  /* Use the FLS polling mechanism in order to reach the next state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   427                  Fee_CheckFlsJobResult();
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   428                  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   429              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   430              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   431  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   432              /* Call read order for the sector header area */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   433              /* MR12 RULE 16.3 VIOLATION: Time critical position */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   434              case FEE_LL_READ_PAGE_E:
	mov	d15,#3
	jeq	d15,d0,.L50
.L393:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   435              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   436                  /* Read the one sector marker only */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   437                  if(Fls_Read(xAdrBlnkChk_u32,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   438                             (uint8*)&Fee_MarkerBufBytePtr_cpu8[0],
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   439                             (FEE_MARKER_SIZE)) != E_NOT_OK)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   440                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   441                      /* Set next state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   442                      Fee_RdWrOrder_st.Fee_LLRdState_en = FEE_LL_WAIT_READ_PAGE_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   443                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   444                  else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   445                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   446                      /* Error handling due to wrong user parameters or a currently active FLS
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   447                       * -> Try again with the next sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   448                      Fee_RdWrOrder_st.Fee_LLRdState_en = FEE_LL_INIT_READ_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   449                      xCurrSect_u8++;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   450  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   451                      /* Set the number of Retries for the next sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   452                      Fee_RdWrRetries_u8 = FEE_MAX_RD_WR_COMP_RETRIES;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   453                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   454              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   455              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   456  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   457              /* Wait until the read order has finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   458              case FEE_LL_WAIT_READ_PAGE_E:
	mov	d15,#4
	jeq	d15,d0,.L51
.L394:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   459              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   460                  /* The next state will be set by the Fee_JobEndNotification () or
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   461                   * Fee_JobErrorNotification() function automatically */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   462  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   463                  /* Check whether the OS is currently running or not */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   464                  if (Fee_stMain == FEE_POLLING_MODE_E)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   465                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   466                      /* Call the Fls main function manually */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   467                      Fls_MainFunction();
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   468                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   469  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   470                  #if (STD_ON == FEE_POLLING_MODE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   471                  /* Use the FLS polling mechanism in order to reach the next state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   472                  Fee_CheckFlsJobResult();
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   473                  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   474              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   475              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   476  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   477              /* Evaluate the content of the markers */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   478              case FEE_LL_READ_FINISHED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   479              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   480                  /* Copy the content of the marker buffer to a read buffer and extract the
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   481                   * organizational data from the raw data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   482                  Fee_LLCopyPageBuff2Marker(&xRdMarker, &Fee_MarkerBufBytePtr_cpu8[0]);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   483  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   484                  /* Evaluate the marker pattern */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   485                  if (xRdMarker.xPattern == FEE_MARKER_PATTERN)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   486                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   487                      /* Calculate checksum over one marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   488                      /* MR12 RULE 11.3 VIOLATION: Variable must be changeable */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   489                      xCalc_crc_u16 = Crc_CalculateCRC16((const uint8*)&xRdMarker,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   490                                                         (uint32)(FEE_MARKER_SIZE-FEE_MARKER_CS_SIZE),
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   491                                                         (uint16)FEE_MARKER_PATTERN,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   492                                                          FALSE);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   493  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   494                      /* Compare the marker checksums */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   495                      if (xCalc_crc_u16 == xRdMarker.xChecksum)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   496                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   497                          /* Extract the marker content byte - wise */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   498                          xTmpMarkerContent_u32  = (uint32)(((uint32)(xRdMarker.xContent[0])) << 16u);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   499                          xTmpMarkerContent_u32 |= (uint32)(((uint32)(xRdMarker.xContent[1])) << 8u);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   500                          xTmpMarkerContent_u32 |= (uint32)(xRdMarker.xContent[2]);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   501  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   502                          /* Request2Erase and Start-Marker do not have the sector change counter as payload. Because payload of Request2Erase Marker
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   503                           * is always 0, no special handling is required. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   504                          switch (xRdMarker.xIdent)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   505                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   506                              case (uint8)FEE_ERASED_MARKER_ID_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   507                              case (uint8)FEE_USED_MARKER_ID_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   508                              case (uint8)FEE_FULL_MARKER_ID_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   509                              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   510                                  if ((Fee_stSecDet_ps[xCurrSect_u8].SecChngCnt_u32 <= xTmpMarkerContent_u32) || (Fee_stSecDet_ps[xCurrSect_u8].SecChngCnt_u32 == FEE_MAXUINT32))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   511                                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   512                                      /* Save the current sector change counter (available within nearly all markers). Normaly all markers should have the same
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   513                                       * sector change counter. If there are different once available, ensure to take the highest one. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   514                                      Fee_stSecDet_ps[xCurrSect_u8].SecChngCnt_u32 = xTmpMarkerContent_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   515                                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   516                              }break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   517  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   518                              case (uint8)FEE_START_MARKER_ID_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   519                              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   520                                  /* Save the current sector change counter. In the START marker, only the 3 low-bytes of the address are stored. The start address
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   521                                   * of the logical sector was used to initialize ...xStartAddr_u32. To get the absolut address, it is necessary to "merge" the
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   522                                   * logical start-address of the sector with the relative address in the sector. In case of sector-size > 2^24 = 16,7MByte, this
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   523                                   * mechanisms will not work anymore. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   524                                  Fee_stSecDet_ps[xCurrSect_u8].xStartAddr_u32  = (Fee_FlashProp_st[xCurrSect_u8].Fee_LogStartAddress_u32 & 0xFF000000uL);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   525                                  Fee_stSecDet_ps[xCurrSect_u8].xStartAddr_u32 |= xTmpMarkerContent_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   526                              }break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   527  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   528                              case (uint8)FEE_ERASE_REQUEST_ID_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   529                              case (uint8)FEE_CLONE_START_MARKER_ID_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   530                              default:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   531                              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   532                                  /* marker has no content, or the content is not used in the moment */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   533                              }break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   534                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   535  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   536                          /* Check for the different marker IDs */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   537                          switch(xRdMarker.xIdent)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   538                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   539                              /* Erase marker ID was found */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   540                              case (uint8)FEE_ERASED_MARKER_ID_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   541                                  /* Increment the amount of its availability */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   542                                  Fee_stSecDet_ps[xCurrSect_u8].ctErasedMarker_u8++;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   543  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   544                                  /* Save the last erased marker position within the sector header in order to check
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   545                                   * the subsequent position for a damaged USED marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   546                                  /* MR12 DIR 4.1 VIOLATION: Only the start value is negative, it cannot be negative here */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   547                                  Fee_LastErasedMarker_u16[xCurrSect_u8]  = (uint16)xMarkerIdx_s8;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   548                              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   549  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   550                              /* Used marker ID was found */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   551                              case (uint8)FEE_START_MARKER_ID_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   552                              case (uint8)FEE_USED_MARKER_ID_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   553                                  /* Increment the amount of its availability */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   554                                  Fee_stSecDet_ps[xCurrSect_u8].ctUsedMarker_u8++;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   555                              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   556  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   557                              /* Full marker ID was found */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   558                              case (uint8)FEE_FULL_MARKER_ID_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   559                                  /* Increment the amount of its availability */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   560                                  Fee_stSecDet_ps[xCurrSect_u8].ctFullMarker_u8++;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   561                              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   562  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   563                              /* Erase request marker ID was found */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   564                              case (uint8)FEE_ERASE_REQUEST_ID_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   565                                  /* Increment the amount of its availability */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   566                                  Fee_stSecDet_ps[xCurrSect_u8].ctEraseReq_u8++;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   567                              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   568  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   569                              /* Clone Marker for IFX-Robust programming algorithm found */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   570                              case (uint8)FEE_CLONE_START_MARKER_ID_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   571                                  /* Increment the amount of its availability */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   572                                  Fee_stSecDet_ps[xCurrSect_u8].ctCloneMarker_u8++;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   573                              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   574  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   575                              /* This state should never be reached */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   576                              default:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   577                                  /* Error handling due to a wrong marker ID with valid checksum
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   578                                   * -> Try again with the next sector (done already at end of case) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   579                                  Fee_RdWrOrder_st.Fee_LLRdState_en = FEE_LL_INIT_READ_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   580                              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   581                             }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   582                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   583                      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   584                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   585                          /* Error handling due to an invalid marker (wrong checksum)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   586                           * -> Search until the end of the marker region */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   587                          ;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   588                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   589                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   590                  else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   591                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   592                      /* No marker was found (wrong or no pattern)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   593                       * -> Search until the end of the marker region */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   594                      ;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   595                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   596  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   597                  /* Prepare state machine to run again for the next marker inside the same sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   598                  Fee_RdWrOrder_st.Fee_LLRdState_en = FEE_LL_BLANK_CHECK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   599              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   600              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   601  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   602              /* Error reaction for read error */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   603              case FEE_LL_READ_ERROR_E:
	mov	d15,#5
	jeq	d15,d0,.L52
.L395:
	mov	d15,#6
	jeq	d15,d0,.L53
	j	.L54
.L47:
	sha	d10,d8,#4
.L319:
	addsc.a	a15,a12,d10,#0
.L396:
	mov.aa	a2,a15
	add.a	a2,#4
.L397:
	mov	d0,#0
.L398:
	st.b	[a2],d0
.L399:
	mov.aa	a2,a15
	add.a	a2,#5
.L400:
	mov	d0,#0
.L401:
	st.b	[a2],d0
.L402:
	mov.aa	a2,a15
	add.a	a2,#6
.L403:
	mov	d0,#0
.L404:
	st.b	[a2],d0
.L405:
	mov.aa	a2,a15
	add.a	a2,#7
.L406:
	mov	d0,#0
.L407:
	st.b	[a2],d0
.L408:
	lea	a2,[a15]12
.L409:
	mov	d0,#0
.L410:
	st.b	[a2],d0
.L411:
	mov	d15,#-1
.L412:
	st.w	[a15],d15
.L413:
	lea	a15,[a15]8
.L414:
	mov	d15,#-1
.L415:
	st.w	[a15],d15
.L416:
	mul	d15,d8,#12
.L417:
	movh.a	a15,#@his(Fee_LLSectorOrder_st)
	lea	a15,[a15]@los(Fee_LLSectorOrder_st)
.L418:
	addsc.a	a15,a15,d15,#0
.L419:
	mov	d15,#-1
.L420:
	st.w	[a15],d15
.L421:
	mov	d15,#0
.L422:
	st.b	[a15]8,d15
.L423:
	mov	d15,#0
.L424:
	st.w	[a15]4,d15
.L425:
	movh.a	a15,#@his(Fee_MarkerBufBytePtr_cpu8)
	lea	a15,[a15]@los(Fee_MarkerBufBytePtr_cpu8)
	ld.a	a4,[a15]
.L426:
	mov	d4,#0
.L427:
	mov	d5,#96
	call	Fee_SrvMemSet8
.L428:
	mov	d15,#1
.L429:
	st.w	[a14],d15
.L430:
	movh.a	a15,#@his(Fee_LastErasedMarker_u16)
	lea	a15,[a15]@los(Fee_LastErasedMarker_u16)
.L431:
	addsc.a	a15,a15,d8,#1
.L432:
	mov	d15,#0
.L433:
	st.h	[a15],d15
.L434:
	mov	d9,#-1
.L435:
	movh.a	a15,#@his(Fee_FlashProp_st)
	lea	a15,[a15]@los(Fee_FlashProp_st)
.L436:
	addsc.a	a15,a15,d10,#0
.L437:
	ld.w	d10,[a15]
.L320:
	add	d10,#-8
.L48:
	add	d9,#1
.L317:
	extr	d9,d9,#0,#8
.L321:
	mov	d15,#12
.L438:
	jlt	d15,d9,.L55
.L439:
	add	d10,d10,#8
.L246:
	mov	d5,#8
	mov	d4,d10
.L322:
	call	Fls_BlankCheck
.L323:
	jeq	d2,#1,.L56
.L440:
	mov	d15,#2
.L441:
	st.w	[a14],d15
.L442:
	j	.L57
.L56:
	mov	d15,#0
.L443:
	st.w	[a14],d15
.L444:
	add	d8,#1
.L315:
	extr.u	d8,d8,#0,#8
.L57:
	j	.L58
.L55:
	mov	d15,#0
.L445:
	st.w	[a14],d15
.L446:
	add	d8,#1
.L324:
	extr.u	d8,d8,#0,#8
.L58:
	j	.L59
.L49:
	movh.a	a15,#@his(Fee_stMain)
	lea	a15,[a15]@los(Fee_stMain)
	ld.w	d15,[a15]
.L447:
	jne	d15,#0,.L60
.L448:
	call	Fls_17_Pmu_MainFunction
.L60:
	call	Fee_CheckFlsJobResult
.L449:
	j	.L61
.L50:
	movh.a	a15,#@his(Fee_MarkerBufBytePtr_cpu8)
	lea	a15,[a15]@los(Fee_MarkerBufBytePtr_cpu8)
	ld.a	a4,[a15]
	mov	d5,#8
	mov	d4,d10
.L326:
	call	Fls_17_Pmu_Read
.L327:
	jeq	d2,#1,.L62
.L450:
	mov	d15,#4
.L451:
	st.w	[a14],d15
.L452:
	j	.L63
.L62:
	mov	d15,#0
.L453:
	st.w	[a14],d15
.L454:
	add	d8,#1
.L325:
	extr.u	d8,d8,#0,#8
.L328:
	mov	d15,#3
.L455:
	st.b	[a13],d15
.L63:
	j	.L64
.L51:
	movh.a	a15,#@his(Fee_stMain)
	lea	a15,[a15]@los(Fee_stMain)
	ld.w	d15,[a15]
.L456:
	jne	d15,#0,.L65
.L457:
	call	Fls_17_Pmu_MainFunction
.L65:
	call	Fee_CheckFlsJobResult
.L458:
	j	.L66
.L53:
	lea	a4,[a10]0
.L459:
	movh.a	a15,#@his(Fee_MarkerBufBytePtr_cpu8)
	lea	a15,[a15]@los(Fee_MarkerBufBytePtr_cpu8)
	ld.a	a5,[a15]
.L460:
	call	Fee_LLCopyPageBuff2Marker
.L461:
	mov.u	d5,#51966
.L462:
	ld.hu	d15,[a10]0
.L463:
	jne	d15,d5,.L67
.L464:
	lea	a4,[a10]0
.L465:
	mov	d4,#6
.L466:
	mov	d6,#0
	call	Crc_CalculateCRC16
.L330:
	ld.hu	d15,[a10]6
.L467:
	jne	d15,d2,.L68
.L468:
	ld.bu	d15,[a10]3
.L469:
	sh	d0,d15,#16
.L332:
	ld.bu	d15,[a10]4
.L470:
	sh	d15,d15,#8
.L471:
	or	d0,d15
.L472:
	ld.bu	d15,[a10]5
.L473:
	or	d0,d15
.L474:
	ld.bu	d2,[a10]2
.L331:
	mov	d15,#1
	jeq	d15,d2,.L69
.L475:
	mov	d15,#2
	jeq	d15,d2,.L70
.L476:
	mov	d15,#3
	jeq	d15,d2,.L71
.L477:
	mov	d1,#4
	jeq	d1,d2,.L72
.L478:
	mov	d15,#5
	jeq	d15,d2,.L73
.L479:
	mov	d0,#6
.L333:
	jeq	d0,d2,.L74
	j	.L75
.L69:
.L70:
.L71:
	sha	d15,d8,#4
.L480:
	addsc.a	a15,a12,d15,#0
.L481:
	ld.w	d15,[a15]
.L482:
	jge.u	d0,d15,.L76
.L483:
	jne	d15,#-1,.L77
.L76:
	st.w	[a15],d0
.L77:
	j	.L78
.L73:
	sha	d15,d8,#4
.L484:
	addsc.a	a15,a12,d15,#0
.L485:
	lea	a2,[a15]8
.L486:
	movh.a	a15,#@his(Fee_FlashProp_st)
	lea	a15,[a15]@los(Fee_FlashProp_st)
.L487:
	addsc.a	a15,a15,d15,#0
.L488:
	ld.w	d15,[a15]8
.L489:
	insert	d1,d15,#0,#0,#24
.L490:
	st.w	[a2],d1
.L491:
	ld.w	d15,[a2]
.L492:
	or	d15,d0
	st.w	[a2],d15
.L493:
	j	.L79
.L72:
.L74:
.L75:
	j	.L80
.L80:
.L79:
.L78:
	mov	d15,#1
	jeq	d15,d2,.L81
.L494:
	mov	d15,#2
	jeq	d15,d2,.L82
.L495:
	mov	d15,#3
	jeq	d15,d2,.L83
.L496:
	mov	d15,#4
	jeq	d15,d2,.L84
.L497:
	mov	d15,#5
	jeq	d15,d2,.L85
.L498:
	mov	d15,#6
	jeq	d15,d2,.L86
	j	.L87
.L81:
	sha	d15,d8,#4
.L499:
	addsc.a	a15,a12,d15,#0
.L500:
	add.a	a15,#4
	ld.bu	d15,[a15]
.L501:
	add	d15,#1
	st.b	[a15],d15
.L502:
	movh.a	a15,#@his(Fee_LastErasedMarker_u16)
	lea	a15,[a15]@los(Fee_LastErasedMarker_u16)
.L503:
	addsc.a	a15,a15,d8,#1
.L504:
	extr.u	d15,d9,#0,#16
.L505:
	st.h	[a15],d15
.L506:
	j	.L88
.L85:
.L82:
	sha	d15,d8,#4
.L507:
	addsc.a	a15,a12,d15,#0
.L508:
	add.a	a15,#5
	ld.bu	d15,[a15]
.L509:
	add	d15,#1
	st.b	[a15],d15
.L510:
	j	.L89
.L83:
	sha	d15,d8,#4
.L511:
	addsc.a	a15,a12,d15,#0
.L512:
	add.a	a15,#6
	ld.bu	d15,[a15]
.L513:
	add	d15,#1
	st.b	[a15],d15
.L514:
	j	.L90
.L84:
	sha	d15,d8,#4
.L515:
	addsc.a	a15,a12,d15,#0
.L516:
	add.a	a15,#7
	ld.bu	d15,[a15]
.L517:
	add	d15,#1
	st.b	[a15],d15
.L518:
	j	.L91
.L86:
	sha	d15,d8,#4
.L519:
	addsc.a	a15,a12,d15,#0
.L520:
	lea	a15,[a15]12
	ld.bu	d15,[a15]
.L521:
	add	d15,#1
	st.b	[a15],d15
.L522:
	j	.L92
.L87:
	mov	d15,#0
.L523:
	st.w	[a14],d15
.L524:
	j	.L93
.L93:
.L92:
.L91:
.L90:
.L89:
.L88:
	j	.L94
.L68:
.L94:
	j	.L95
.L67:
.L95:
	mov	d15,#1
.L525:
	st.w	[a14],d15
.L526:
	j	.L96
.L52:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   604                  /* Reset the respective array and either read out the same sector again or
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   605                   * the next one depending on the retry possiblity */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   606                  Fee_RdWrOrder_st.Fee_LLRdState_en = FEE_LL_INIT_READ_E;
	mov	d15,#0
.L527:
	st.w	[a14],d15
.L528:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   607  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   608                  /* Verify retry possibility */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   609                  if(Fee_RdWrRetries_u8 > 0)
	ld.bu	d15,[a13]
.L529:
	jeq	d15,#0,.L97
.L530:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   610                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   611                      /* Decrement retry possibilities */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   612                      Fee_RdWrRetries_u8--;
	add	d15,#-1
	st.b	[a13],d15
.L531:
	j	.L98
.L97:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   613                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   614                  else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   615                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   616                      /* Skip the current sector and try to read out the next one if possible */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   617                      xCurrSect_u8++;
	add	d8,#1
.L329:
	extr.u	d8,d8,#0,#8
.L334:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   618  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   619                      /* Set the number of Retries for the next sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   620                      Fee_RdWrRetries_u8 = FEE_MAX_RD_WR_COMP_RETRIES;
	mov	d15,#3
.L532:
	st.b	[a13],d15
.L98:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   621                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   622              break;
	j	.L99

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   623  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   624              default:
.L54:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   625              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   626                  /* Prepare state machine to run again for the next sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   627                  Fee_RdWrOrder_st.Fee_LLRdState_en = FEE_LL_INIT_READ_E;
	mov	d15,#0
.L533:
	st.w	[a14],d15
.L534:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   628                  xCurrSect_u8++;
	add	d8,#1
.L335:
	extr.u	d8,d8,#0,#8
.L336:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   629  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   630                  /* Set the number of Retries for the next sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   631                  Fee_RdWrRetries_u8 = FEE_MAX_RD_WR_COMP_RETRIES;
	mov	d15,#3
.L535:
	st.b	[a13],d15
.L536:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   632              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   633              break;
	j	.L100

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   634          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   635      }
.L100:
.L99:
.L96:
.L66:
.L64:
.L61:
.L59:
.L45:
	movh.a	a15,#@his(Fee_NumFlashBanksUsed_u8)
	lea	a15,[a15]@los(Fee_NumFlashBanksUsed_u8)
	ld.bu	d15,[a15]
.L537:
	jlt.u	d8,d15,.L46
.L538:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   636  }
	ret
.L232:
	
__Fee_LLSearchSectors_function_end:
	.size	Fee_LLSearchSectors,__Fee_LLSearchSectors_function_end-Fee_LLSearchSectors
.L199:
	; End of function
	
	.sdecl	'.text.rba_FeeFs1_LlDetectSector.Fee_LLFindEmptyPage',code,cluster('Fee_LLFindEmptyPage')
	.sect	'.text.rba_FeeFs1_LlDetectSector.Fee_LLFindEmptyPage'
	.align	2
	
	.global	Fee_LLFindEmptyPage

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   637  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   638  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   639  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   640   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   641   * Fee_LLFindEmptyPage(): Find first empty page
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   642   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   643   * This function searches the first free page in the sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   644   * with the most current data if its sector state is USED.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   645   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   646   * Hint: this function can only be called inside the initialization
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   647   *       phase of the ECU (scheduling should be disabled).
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   648   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   649   * \param    PhySectIdxUsedSect_u8: Physical sector index to use for the search
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   650   * \return
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   651   * \retval   FEE_ORDER_PENDING_E:   Function has to be called again
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   652   * \retval   FEE_ABORTED_E:         Function was aborted (wrong sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   653   *                                  state or wrong Fls parameters)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   654   * \retval   FEE_ORDER_FINISHED_E:  Function successfully finished
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   655   * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   656   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   657   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   658   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   659  FUNC(Fee_stRetVal_ten, FEE_CODE) Fee_LLFindEmptyPage(uint8 PhySectIdxUsedSect_u8)
; Function Fee_LLFindEmptyPage
.L182:
Fee_LLFindEmptyPage:	.type	func
	sub.a	a10,#16
.L337:
	mov	d8,d4
.L338:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   660  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   661  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   662  #if ( defined(RBA_FLSRH850P1xC_FLASH) || defined(RBA_FLSV850R1x_FLASH) || defined(RBA_FLSRH850xx_FLASH) )
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   663  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   664      /*
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   665       * For FLSRH850 flash the provided blank check mechanism is used.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   666       * First the whole used sector is checked in big chunks to roughly identify the last written space.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   667       * Then the last big block which is not fully blank is checked in small steps to accurately
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   668       * find the new write address.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   669       */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   670  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   671      /*
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   672       * s  = size of a sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   673       * b1 = big step size
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   674       * b2 = small step size
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   675       *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   676       * t1 = basic costs for triggering one blank check
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   677       * t2 = costs for blank check per byte
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   678       *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   679       * Duration of a blank check with big and small steps on the whole sector:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   680       *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   681       * f(s, b1, b2) = (s/b1)*t1 + s*t2 + (b1/b2)*t1 + b1*t2
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   682       *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   683       * This time should be as small as possible, therefore we can leave out s*t2 since we cannot influence it
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   684       *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   685       * f(s, b1, b2) = (s/b1 + b1/b2)*t1 + b1*t2
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   686       *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   687       * Following values were APPROXIMATELY measured:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   688       *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   689       * t1 = 70    us
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   690       * t2 = 0.625 us
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   691       *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   692       * f(s, b1, b2) = (s/b1 + b1/b2)*70 + b1*0.625
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   693       *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   694       * The second summand should be much smaller than the first summand so we can leave it out
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   695       * and also remove the constant factor 70 since it is just a linear change
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   696       *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   697       * f(s, b1, b2) = s/b1 + b1/b2
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   698       *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   699       * s  is fixed to sector size
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   700       * b2 must be a page length
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   701       * so the only factor we can vary is b1
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   702       *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   703       * Since the first summand doubles if b1 doubles and the second summand halves if b1 halves
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   704       * the smallest value is achieved if:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   705       *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   706       * s/b1 = b1/b2 =>
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   707       * b1   = sqrt(s * b2)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   708       *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   709       * of course this is not exact but an approximation
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   710       * for the first try this code is optimized for s = 8192 and b2 = 16
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   711       * b1 = sqrt(8192 * 16) = 362
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   712       * to make sure the big step is always bigger than the small step we express the big step in small steps
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   713       * b1 = 362/b2 = 362/16 = 22.65 => Round to power of 2 => 16
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   714       */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   715  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   716      /* Big and small steps */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   717      CONST(uint32, AUTOMATIC) smallStep_cu32 = FEE_PAGE_LEN;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   718      CONST(uint32, AUTOMATIC) bigStep_cu32   = smallStep_cu32 * 16uL;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   719  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   720      static VAR(uint32,  AUTOMATIC) adrCurr_u32  = 0;    /* Current address which is investigated            */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   721      static VAR(uint32,  AUTOMATIC) adrWrite_u32 = 0;    /* New read/write address                           */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   722      static VAR(uint32,  AUTOMATIC) adrEnd_u32   = 0;    /* End address - either sector end or big block end */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   723      static VAR(uint32,  AUTOMATIC) stepSize_u32 = 0;    /* Small or big step size                           */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   724  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   725      VAR(uint32,             AUTOMATIC) checkChunk_u32   = 0;                    /* Amount of data for the blank check   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   726      VAR(Fee_stRetVal_ten,   AUTOMATIC) xRetVal_en       = FEE_ORDER_PENDING_E;  /* Return value                         */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   727  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   728      /* Run through the whole sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   729      do
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   730      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   731          /* Empty page state machine in case it is not used in polling mode */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   732          switch(Fee_RdWrOrder_st.Fee_LLFindEmptyPageState_en)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   733          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   734              /* Initialize static variables for the check */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   735              case FEE_LL_FINDEMPTYPGE_INIT_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   736              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   737                  adrCurr_u32                                     = Fee_LLGetSecStartAddress(PhySectIdxUsedSect_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   738                  adrWrite_u32                                    = adrCurr_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   739                  adrEnd_u32                                      = Fee_LLGetSecEndAddress(PhySectIdxUsedSect_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   740                  stepSize_u32                                    = bigStep_cu32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   741                  Fee_RdWrOrder_st.Fee_LLFindEmptyPageState_en    = FEE_LL_FINDEMPTYPGE_CHECK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   742              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   743              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   744  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   745              /* Start a blank check for one chunk */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   746              case FEE_LL_FINDEMPTYPGE_CHECK_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   747              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   748                  /* Is the end of the big block / sector reached */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   749                  if(adrCurr_u32 >= adrEnd_u32)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   750                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   751                      /* Small step size, so it is the end of the big block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   752                      if(stepSize_u32 == smallStep_cu32)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   753                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   754                          /* Adjust write address to page borders */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   755                          adrWrite_u32 += (FEE_PAGE_LEN - (adrWrite_u32 % FEE_PAGE_LEN)) % FEE_PAGE_LEN;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   756  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   757                          xRetVal_en = FEE_ORDER_FINISHED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   758                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   759                      /* Big step size, so it is the end of the sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   760                      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   761                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   762                          /* Set the currently investigated address pointer to the begin of the last big blank block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   763                          if(bigStep_cu32 > (adrWrite_u32 - Fee_LLGetSecStartAddress(PhySectIdxUsedSect_u8)))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   764                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   765                              adrCurr_u32 = Fee_LLGetSecStartAddress(PhySectIdxUsedSect_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   766                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   767                          else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   768                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   769                              adrCurr_u32 = adrWrite_u32 - bigStep_cu32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   770                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   771  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   772                          /* Switch to small step size */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   773                          stepSize_u32 = smallStep_cu32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   774                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   775  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   776                      /*
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   777                       * If sector is completely full set the write address to the end of the sector.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   778                       * This way it is ensured that during next startup a sector change is triggered.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   779                       */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   780                      if(adrWrite_u32 > Fee_LLGetSecEndAddress(PhySectIdxUsedSect_u8))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   781                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   782                          adrWrite_u32 = Fee_LLGetSecEndAddress(PhySectIdxUsedSect_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   783                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   784  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   785                      /*
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   786                       * BigStepSize:     Set the end address to the end of the last big blank block
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   787                       *                  Use the limitiation to the sector end of the write address above
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   788                       * SmallStepSize:   No effect since state machine is aborted anyway
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   789                       */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   790                      adrEnd_u32 = adrWrite_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   791                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   792                  else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   793                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   794                      /* Chop chunk which should be checked in case the end of the sector is reached */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   795                      checkChunk_u32 = stepSize_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   796                      if( (adrCurr_u32 + stepSize_u32) > adrEnd_u32 )
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   797                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   798                          checkChunk_u32 = (adrEnd_u32 - adrCurr_u32) + 1uL;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   799                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   800  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   801                      /* Delegate blank check to flash driver */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   802                      if(Fls_Rb_BlankCheck(adrCurr_u32, NULL_PTR, checkChunk_u32) != E_NOT_OK)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   803                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   804                          adrCurr_u32 += checkChunk_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   805                          Fee_RdWrOrder_st.Fee_LLFindEmptyPageState_en = FEE_LL_FINDEMPTYPGE_WAIT_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   806                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   807                      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   808                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   809                          xRetVal_en = FEE_ABORTED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   810                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   811                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   812              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   813              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   814  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   815              /*
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   816               * Wait until blank check finished
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   817               * In case of polling mode poll the status of the flash driver
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   818               * Otherwise the state transission is triggered by a callback
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   819               */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   820              case FEE_LL_FINDEMPTYPGE_WAIT_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   821              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   822                  Fls_MainFunction();
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   823  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   824                  #if (STD_ON == FEE_POLLING_MODE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   825                  Fee_CheckFlsJobResult();
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   826                  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   827              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   828              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   829  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   830              /* Last checked block is blank */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   831              case FEE_LL_FINDEMPTYPGE_RESULT_BLANK_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   832              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   833                  Fee_RdWrOrder_st.Fee_LLFindEmptyPageState_en = FEE_LL_FINDEMPTYPGE_CHECK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   834              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   835              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   836  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   837              /* Last checked block is not blank */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   838              case FEE_LL_FINDEMPTYPGE_RESULT_NOT_BLANK_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   839              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   840                  /* Set the read/write address to the end of the not blank block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   841                  adrWrite_u32                                 = adrCurr_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   842                  Fee_RdWrOrder_st.Fee_LLFindEmptyPageState_en = FEE_LL_FINDEMPTYPGE_CHECK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   843              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   844              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   845  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   846              default:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   847              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   848                  /* Should never occur */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   849                  xRetVal_en = FEE_ABORTED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   850              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   851              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   852          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   853      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   854      while((Fee_stMain == FEE_POLLING_MODE_E) && (xRetVal_en == FEE_ORDER_PENDING_E));
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   855  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   856      /* Finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   857      if(xRetVal_en != FEE_ORDER_PENDING_E)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   858      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   859          /* Set read and write address and reset state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   860          Fee_RdWrOrder_st.xRdAddress                     = adrWrite_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   861          Fee_RdWrOrder_st.xWrAddress                     = adrWrite_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   862          Fee_RdWrOrder_st.Fee_LLFindEmptyPageState_en    = FEE_LL_FINDEMPTYPGE_INIT_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   863      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   864  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   865      return(xRetVal_en);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   866  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   867  #else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   868  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   869      VAR(Fee_stRetVal_ten, AUTOMATIC) xRetVal_en     = FEE_ORDER_PENDING_E;  /* Function return */
	mov	d9,#0
.L339:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   870      VAR(Fee_stRetVal_ten, AUTOMATIC) xTmpRetVal_en  = FEE_ORDER_PENDING_E;  /* Function temp return */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   871      VAR(Fee_GlobInfoLastRdHeader_tst, AUTOMATIC) xBlkHdrTmp_st;             /* Temporary block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   872  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   873      #if(FEE_FAST_CACHE_INIT_ACTIVE == FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   874      static uint32 xRdAddrStrt_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   875      VAR(uint8, AUTOMATIC) xCacheUpdateType_u8       = FEE_UPDATE_CACHE_IN_INIT; /* Init value */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   876      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   877  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   878      /* Loop if polling mode is active and function state is pending */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   879      do
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   880      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   881          /* Switch over state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   882          switch(Fee_RdWrOrder_st.Fee_LLFindEmptyPageState_en)
	movh.a	a15,#@his(Fee_RdWrOrder_st)
	lea	a15,[a15]@los(Fee_RdWrOrder_st)
.L671:
	lea	a12,[a15]100

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   883          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   884              /* Identify the start address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   885              case FEE_LL_FIND_CURRENT_SECTOR_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   886              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   887                  /* Reset temporary block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   888                  xBlkHdrTmp_st.FeeIndex_u16 = FEE_MAXUINT16;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   889  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   890                 /* Set the read address to the begining of the sector for which cache must be built up. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   891                 Fee_RdWrOrder_st.xRdAddress = Fee_LLGetSecStartAddress(PhySectIdxUsedSect_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   892  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   893                 /* Reset the start address for the search */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   894                 #if(FEE_FAST_CACHE_INIT_ACTIVE == FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   895                 xRdAddrStrt_u32 = Fee_RdWrOrder_st.xRdAddress;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   896                 #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   897  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   898                 Fee_RdWrOrder_st.Fee_LLFindEmptyPageState_en = FEE_LL_FIND_LAST_HEADER_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   899              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   900              /* Search for the block header in the active sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   901              /* MR12 RULE 16.3 VIOLATION: Time critical position */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   902              case FEE_LL_FIND_LAST_HEADER_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   903              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   904                  #if(FEE_FAST_CACHE_INIT_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   905                  /* Search for the highest address within the sectors using the cache entries */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   906                  xTmpRetVal_en = Fee_SearchLastBlkHeader(&xBlkHdrTmp_st);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   907                  #else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   908                  /* Search for the next block header without cache usage (FEE_MAXUINT16).
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   909                   * This function will be called until the end of the sector is reached. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   910                  xTmpRetVal_en = Fee_LLSearchNextBlkHeader(&xBlkHdrTmp_st, FEE_USE_MANUAL_ACCESS, xCacheUpdateType_u8, FALSE, xRdAddrStrt_u32);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   911                  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   912  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   913                  /* Evaluate return value */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   914                  switch(xTmpRetVal_en)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   915                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   916                      /* Order is still pending */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   917                      case FEE_ORDER_PENDING_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   918                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   919                          /* Do nothing */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   920                          ;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   921                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   922                      break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   923  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   924                      /* Order is finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   925                      case FEE_ORDER_FINISHED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   926                      #if(FEE_FAST_CACHE_INIT_ACTIVE == FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   927                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   928                          /* A valid block header was found. Set address for next free page or block header.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   929                           * Hint: increment the address via "page mode" (a reload of a complete page buffer
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   930                           *       is only necessary if the new read address has not been loaded before) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   931                          Fee_RdWrOrder_st.xRdAddress = (uint32)(xBlkHdrTmp_st.AdrBlkHeader_u32 + FEE_PAGE_LEN);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   932  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   933                          /* Ensure page alignment */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   934                          /* MR12 RULE 14.2 VIOLATION: The variable is updated and used within the same function itself. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   935                          while((Fee_RdWrOrder_st.xRdAddress % FEE_PAGE_LEN) != 0u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   936                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   937                              /* Increment next read address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   938                              Fee_RdWrOrder_st.xRdAddress++;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   939                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   940                          xRdAddrStrt_u32 = Fee_RdWrOrder_st.xRdAddress;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   941  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   942                          /* Come back to this state because the next empty page has to be found
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   943                           * and not the next block header. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   944                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   945                      break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   946  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   947                      /* The end of the active sector is reached. No valid page header was found within a certain
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   948                       * amount of pages or until the end of the sector. There might be a valid page header available
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   949                       * within the searched sector that was found before. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   950                      case FEE_SECTORFULL_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   951                      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   952                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   953                          /* Check if a valid block header was found */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   954                          if (xBlkHdrTmp_st.FeeIndex_u16 != FEE_MAXUINT16)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   955                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   956                              /* At least one valid block header was found in the active sector. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   957                              /* Set next free page behind the last found block (overlap in USED sectors not possible) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   958                              Fee_RdWrOrder_st.xRdAddress = (uint32)(xBlkHdrTmp_st.AdrBlkHeader_u32 + (uint32)FEE_BLK_HEADER_SIZE + xBlkHdrTmp_st.BlkLength_u16);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   959  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   960                              /* Reading will always start on a page boundary */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   961                              /* MR12 RULE 14.2 VIOLATION: The variable is updated and used within the same function itself. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   962                              while ((Fee_RdWrOrder_st.xRdAddress % FEE_PAGE_LEN) != 0u)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   963                              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   964                                  Fee_RdWrOrder_st.xRdAddress++;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   965                              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   966  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   967                              /* Check for overlapping block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   968                              if (Fee_RdWrOrder_st.xRdAddress > Fee_LLGetSecEndAddress(PhySectIdxUsedSect_u8))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   969                              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   970                                  Fee_RdWrOrder_st.xRdAddress = Fee_LLGetSecEndAddress(PhySectIdxUsedSect_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   971                              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   972                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   973                          else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   974                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   975                              /* No valid block header was found in the active sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   976                               * --> check if other FULL sectors contain a valid header in order to
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   977                               *     be able to locate the next empty page (programmed erase pattern
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   978                               *     might not be detected otherwise) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   979                              if (Fee_RdWrOrder_st.xStartAddrNextSector_u32 != FEE_MAXUINT32)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   980                              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   981                                  /* A START-Marker was found --> use this address as read-address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   982                                   Fee_RdWrOrder_st.xRdAddress = Fee_RdWrOrder_st.xStartAddrNextSector_u32;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   983                              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   984                              else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   985                              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   986                                  /* No START-Marker was found --> Maybe this sector was never programmed except inside the sector header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   987                                  Fee_RdWrOrder_st.xRdAddress = Fee_LLGetSecStartAddress(PhySectIdxUsedSect_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   988                              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   989  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   990                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   991  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   992                          /* Perform a blank check */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   993                          Fee_RdWrOrder_st.Fee_LLFindEmptyPageState_en = FEE_LL_FINISHED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   994                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   995                      break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   996  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   997                      /* Order was aborted due to a wrong Fls access or due to the
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   998                       * sector state (do not search within not USED sectors) */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	   999                      #if(FEE_FAST_CACHE_INIT_ACTIVE != FALSE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1000                      case FEE_SECTORFULL_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1001                      #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1002                      case FEE_ABORTED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1003                      case FEE_ERROR_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1004                      case FEE_SEARCH_ABORTED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1005                      default:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1006                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1007                          /* Leave the loop */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1008                          xRetVal_en = FEE_ABORTED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1009                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1010                      break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1011                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1012              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1013              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1014  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1015              /* Check for the erase pattern  */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1016              case FEE_LL_FINISHED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1017              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1018                  /* Set the sector start address for the next write address because the read
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1019                   * address points to the first empty page or the end of the sector. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1020                  Fee_RdWrOrder_st.xWrAddress = Fee_RdWrOrder_st.xRdAddress;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1021  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1022                  /* Check if this value is more then the last programmed address found during cache build up, if no correct the next free page address. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1023                  if (Fee_RdWrOrder_st.xWrAddress < (Fee_RdWrOrder_st.LastProgrammedAddress_u32+FEE_PAGE_LEN))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1024                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1025                      Fee_RdWrOrder_st.xWrAddress = Fee_RdWrOrder_st.LastProgrammedAddress_u32+FEE_PAGE_LEN;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1026  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1027                      /* Check for overlapping block */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1028                      if (Fee_RdWrOrder_st.xWrAddress > Fee_LLGetSecEndAddress(PhySectIdxUsedSect_u8))
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1029                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1030                          Fee_RdWrOrder_st.xWrAddress = Fee_LLGetSecEndAddress(PhySectIdxUsedSect_u8);
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1031                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1032                      else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1033                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1034                          /* Block is not overlapping to another sector. Nothing required to be done. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1035                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1036  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1037                      Fee_RdWrOrder_st.xRdAddress = Fee_RdWrOrder_st.xWrAddress;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1038                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1039  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1040                  /* Set return value */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1041                  xRetVal_en = FEE_ORDER_FINISHED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1042              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1043              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1044  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1045              /* Default case should never be reached */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1046              default:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1047              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1048                  /* Return with error */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1049                  xRetVal_en = FEE_ABORTED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1050              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1051              break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1052          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1053      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1054      while((Fee_stMain == FEE_POLLING_MODE_E) && (xRetVal_en == FEE_ORDER_PENDING_E));
.L101:
	ld.w	d15,[a12]
.L672:
	mov	d0,#0
	jeq	d15,d0,.L102
.L673:
	mov	d0,#1
	jeq	d15,d0,.L103
.L674:
	mov	d0,#2
	jeq	d15,d0,.L104
	j	.L105
.L102:
	mov.u	d15,#65535
.L675:
	st.h	[a10]12,d15
.L676:
	mov	d4,d8
.L340:
	call	Fee_LLGetSecStartAddress
.L341:
	st.w	[a15],d2
.L677:
	mov	d0,#1
.L678:
	st.w	[a12],d0
.L103:
	lea	a4,[a10]0
	call	Fee_SearchLastBlkHeader
.L342:
	mov	d15,#0
	jeq	d15,d2,.L106
.L679:
	mov	d15,#1
	jeq	d15,d2,.L107
.L680:
	mov	d15,#3
	jeq	d15,d2,.L108
.L681:
	mov	d15,#5
	jeq	d15,d2,.L109
.L682:
	mov	d15,#6
	jeq	d15,d2,.L110
.L683:
	mov	d15,#8
	jeq	d15,d2,.L111
	j	.L112
.L106:
	j	.L113
.L107:
	ld.hu	d15,[a10]12
.L684:
	mov.u	d0,#65535
.L685:
	jeq	d15,d0,.L114
.L686:
	ld.w	d15,[a10]
.L687:
	ld.hu	d0,[a10]10
.L688:
	add	d15,d0
.L689:
	add	d15,d15,#14
.L690:
	st.w	[a15],d15
.L691:
	j	.L115
.L116:
	ld.w	d15,[a15]
.L692:
	add	d15,#1
	st.w	[a15],d15
.L115:
	ld.w	d15,[a15]
	and	d15,#7
.L693:
	jne	d15,#0,.L116
.L694:
	ld.w	d15,[a15]
.L695:
	mov	d4,d8
.L344:
	call	Fee_LLGetSecEndAddress
.L343:
	jge.u	d2,d15,.L117
.L696:
	mov	d4,d8
.L345:
	call	Fee_LLGetSecEndAddress
.L346:
	st.w	[a15],d2
.L117:
	j	.L118
.L114:
	ld.w	d15,[a15]24
.L697:
	jeq	d15,#-1,.L119
.L698:
	st.w	[a15],d15
.L699:
	j	.L120
.L119:
	mov	d4,d8
.L348:
	call	Fee_LLGetSecStartAddress
.L347:
	st.w	[a15],d2
.L120:
.L118:
	mov	d15,#2
.L700:
	st.w	[a12],d15
.L701:
	j	.L121
.L109:
.L110:
.L108:
.L111:
.L112:
	mov	d9,#6
.L702:
	j	.L122
.L122:
.L121:
.L113:
	j	.L123
.L104:
	mov.aa	a13,a15
	add.a	a13,#4
.L703:
	ld.w	d15,[a15]
.L704:
	st.w	[a13],d15
.L705:
	ld.w	d15,[a15]32
.L706:
	add	d15,d15,#8
.L707:
	ld.w	d0,[a13]
.L708:
	jge.u	d0,d15,.L124
.L709:
	st.w	[a13],d15
.L710:
	ld.w	d15,[a13]
.L711:
	mov	d4,d8
.L349:
	call	Fee_LLGetSecEndAddress
.L350:
	jge.u	d2,d15,.L125
.L712:
	mov	d4,d8
.L351:
	call	Fee_LLGetSecEndAddress
.L352:
	st.w	[a13],d2
.L713:
	j	.L126
.L125:
.L126:
	ld.w	d15,[a13]
.L714:
	st.w	[a15],d15
.L124:
	mov	d9,#1
.L715:
	j	.L127
.L105:
	mov	d9,#6
.L716:
	j	.L128
.L128:
.L127:
.L123:
	movh.a	a2,#@his(Fee_stMain)
	lea	a2,[a2]@los(Fee_stMain)
	ld.w	d15,[a2]
.L717:
	jne	d15,#0,.L129
.L718:
	jeq	d9,#0,.L101
.L129:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1055  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1056      /* Check if the internal state machine needs to be reset */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1057      if (xRetVal_en != FEE_ORDER_PENDING_E)
	jeq	d9,#0,.L130
.L719:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1058      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1059          /* Ensure reset of the state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1060          Fee_RdWrOrder_st.Fee_LLFindEmptyPageState_en = FEE_LL_FIND_CURRENT_SECTOR_E;
	mov	d15,#0
.L720:
	st.w	[a12],d15
.L130:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1061      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1062  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1063      return(xRetVal_en);
	mov	d2,d9
.L353:
	j	.L131

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1064  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1065  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1066  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1067  }
.L131:
	ret
.L261:
	
__Fee_LLFindEmptyPage_function_end:
	.size	Fee_LLFindEmptyPage,__Fee_LLFindEmptyPage_function_end-Fee_LLFindEmptyPage
.L209:
	; End of function
	
	.sdecl	'.text.rba_FeeFs1_LlDetectSector.Fee_CheckErasedSectorEmpty',code,cluster('Fee_CheckErasedSectorEmpty')
	.sect	'.text.rba_FeeFs1_LlDetectSector.Fee_CheckErasedSectorEmpty'
	.align	2
	
	.global	Fee_CheckErasedSectorEmpty

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1068  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1069  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1070   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1071   * Fee_CheckErasedSectorEmpty(): Check all erased sectors
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1072   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1073   * This function checks for all erased sectors if they are really erased.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1074   * The subsequent page after an ERASED marker will be checked, if not
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1075   * blank, a USED marker will be written in the first blank page
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1076   * afterwards.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1077   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1078   * \param    none
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1079   * \return   none
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1080   * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1081   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1082   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1083   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1084  /* MR12 RULE 1505 VIOLATION: This function is used within the same file and has no external linkage */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1085  FUNC(void, FEE_CODE) Fee_CheckErasedSectorEmpty(void)
; Function Fee_CheckErasedSectorEmpty
.L184:
Fee_CheckErasedSectorEmpty:	.type	func

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1086  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1087      VAR(uint8, AUTOMATIC)  xCurrSect_u8 = 0;        /* Sector loop counter */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1088      VAR(uint8,  AUTOMATIC) xCurrSectPhys_u8 = 0;    /* Physical current sector number */
	mov	d9,#0
.L354:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1089      VAR(uint32, AUTOMATIC) xPageAfterErased_u32  = 0;      /* Next page address after erased marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1090      VAR(Fee_stRetVal_ten,  AUTOMATIC) xRetVal_en = FEE_ORDER_PENDING_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1091  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1092      /* Inner loop over all configured flash banks */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1093      for(xCurrSect_u8=0; xCurrSect_u8<FEE_NUM_FLASH_BANKS; xCurrSect_u8++)
	mov	d10,#0
.L355:
	j	.L132
.L133:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1094      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1095          /* Check for all erased sectors, if they are really empty. If the flash cell of a USED marker is weakly programmed,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1096           * it might disappear after some some time. In this case, the current used sector has also only an ERASED marker
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1097           * --> extra check to avoid data loss */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1098  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1099          /* If the sector header is full: no need to check this sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1100          if((Fee_LLSectorOrder_st[xCurrSect_u8].SecState_en == FEE_SECTOR_ERASED_E) &&
	mul	d15,d10,#12
.L754:
	movh.a	a15,#@his(Fee_LLSectorOrder_st)
	lea	a15,[a15]@los(Fee_LLSectorOrder_st)
.L755:
	addsc.a	a15,a15,d15,#0
.L756:
	ld.w	d15,[a15]4
.L757:
	jne	d15,#1,.L134
.L758:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1101             (Fee_LastErasedMarker_u16[xCurrSectPhys_u8] < ((uint16)FEE_NUM_MARKER_IN_HEADER-1u)))
	movh.a	a2,#@his(Fee_LastErasedMarker_u16)
	lea	a2,[a2]@los(Fee_LastErasedMarker_u16)
.L759:
	addsc.a	a4,a2,d9,#1
	ld.hu	d0,[a4]0
.L760:
	jge.u	d0,#11,.L135
.L761:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1102          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1103              /* Store physical sector number */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1104              xCurrSectPhys_u8 = Fee_LLSectorOrder_st[xCurrSect_u8].xPhySecIdx_u8;
	ld.bu	d9,[a15]8
.L762:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1105  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1106              /* Load blank check address after the ERASED marker */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1107              xPageAfterErased_u32 = Fee_FlashProp_st[xCurrSectPhys_u8].Fee_PhysStartAddress_u32 +
	sha	d15,d9,#4
.L763:
	movh.a	a15,#@his(Fee_FlashProp_st)
	lea	a15,[a15]@los(Fee_FlashProp_st)
.L764:
	addsc.a	a15,a15,d15,#0
.L765:
	ld.w	d8,[a15]
.L766:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1108                                          ((Fee_LastErasedMarker_u16[xCurrSectPhys_u8] + 1u) *
	addsc.a	a15,a2,d9,#1
	ld.hu	d0,[a15]0
.L767:
	sh	d0,#3
	add	d15,d0,#8
.L357:
	add	d8,d15
.L768:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1109                                                  (FEE_SEC_HEADER_SIZE/(uint16)FEE_NUM_MARKER_IN_HEADER));
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1110  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1111              /* Set next state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1112              Fee_RdWrOrder_st.Fee_LLBlankCheckState_en = FEE_LL_PERFORM_BLANK_CHECK_E;
	movh.a	a15,#@his(Fee_RdWrOrder_st)
	lea	a15,[a15]@los(Fee_RdWrOrder_st)
.L769:
	lea	a15,[a15]96
.L770:
	mov	d15,#1
.L771:
	st.w	[a15],d15
.L772:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1113  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1114              /* Init return value */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1115              xRetVal_en = FEE_ORDER_PENDING_E;
	mov	d11,#0

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1116  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1117              /* Loop if polling mode is active and function state is pending */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1118              do
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1119              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1120                  /* Switch over state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1121                  switch(Fee_RdWrOrder_st.Fee_LLBlankCheckState_en)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1122                  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1123                      /* Read the data */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1124                      case FEE_LL_PERFORM_BLANK_CHECK_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1125                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1126                          /* Call the blank check function
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1127                           * Hint: xNumBytes2Read will always be smaller than the FEE_LL_PAGEUFFSIZE so the buffer can be used. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1128                          if(Fls_Rb_BlankCheck(xPageAfterErased_u32, NULL_PTR, (uint32)(FEE_SEC_HEADER_SIZE/(uint16)FEE_NUM_MARKER_IN_HEADER)) != E_NOT_OK)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1129                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1130                              Fee_RdWrOrder_st.Fee_LLBlankCheckState_en = FEE_LL_WAIT_PERFORM_BLANK_CHECK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1131                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1132                          else
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1133                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1134                              /* Error handling due to wrong user data: check the next bytes */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1135                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1136                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1137                      break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1138  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1139                      /* Wait until the read order is finished */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1140                      case FEE_LL_WAIT_PERFORM_BLANK_CHECK_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1141                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1142                          /* The next state will be set by the Fee_JobEndNotification () or
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1143                           * Fee_JobErrorNotification() function automatically */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1144  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1145                          /* Check whether the OS is currently running or not */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1146                          if (Fee_stMain == FEE_POLLING_MODE_E)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1147                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1148                              /* Call the Fls main function manually */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1149                              Fls_MainFunction();
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1150                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1151  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1152                          #if (STD_ON == FEE_POLLING_MODE)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1153                          /* Use the FLS polling mechanism in order to reach the next state */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1154                          Fee_CheckFlsJobResult();
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1155                          #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1156                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1157                      break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1158  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1159                      /* Differences detected */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1160                      case FEE_LL_BLANK_CHECK_ERROR_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1161                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1162                          /* Differences to the erase pattern were detected, check the next address area */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1163  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1164                          /* Mark this sector as USED */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1165                          if(Fee_LLWriteMarker(xCurrSectPhys_u8, FEE_USED_MARKER_ID_E) != FEE_ORDER_PENDING_E)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1166                          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1167                              /* Set return type */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1168                              xRetVal_en = FEE_ORDER_FINISHED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1169  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1170                              /* Restart the state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1171                              Fee_RdWrOrder_st.Fee_LLBlankCheckState_en = FEE_LL_INIT_BLANK_CHECK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1172                          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1173                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1174                      break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1175  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1176                      /* Finish the state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1177                      case FEE_LL_BLANK_CHECK_FINISHED_E:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1178                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1179                          /* No differences were detected, finish the function with the xRdAddress keeping
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1180                           * its old value */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1181                          xRetVal_en = FEE_ORDER_FINISHED_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1182  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1183                          /* Restart the state machine */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1184                          Fee_RdWrOrder_st.Fee_LLBlankCheckState_en = FEE_LL_INIT_BLANK_CHECK_E;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1185                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1186                      break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1187  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1188                      /* Default case should never be reached */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1189                      default:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1190                      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1191                          /*If the statemachine is corrupted by any influence, keep the SW being stuck*/
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1192                      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1193                      break;
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1194                  }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1195              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1196              while((Fee_stMain == FEE_POLLING_MODE_E) && (xRetVal_en == FEE_ORDER_PENDING_E));
.L136:
	ld.w	d0,[a15]
.L773:
	mov	d15,#1
	jeq	d15,d0,.L137
.L774:
	mov	d15,#2
	jeq	d15,d0,.L138
.L775:
	mov	d1,#3
	jeq	d1,d0,.L139
.L776:
	mov	d15,#4
	jeq	d15,d0,.L140
	j	.L141
.L137:
	mov	d5,#8
	mov	d4,d8
.L358:
	call	Fls_BlankCheck
.L359:
	jeq	d2,#1,.L142
.L777:
	mov	d15,#2
.L778:
	st.w	[a15],d15
.L779:
	j	.L143
.L142:
.L143:
	j	.L144
.L138:
	movh.a	a2,#@his(Fee_stMain)
	lea	a2,[a2]@los(Fee_stMain)
	ld.w	d15,[a2]
.L780:
	jne	d15,#0,.L145
.L781:
	call	Fls_17_Pmu_MainFunction
.L145:
	call	Fee_CheckFlsJobResult
.L782:
	j	.L146
.L139:
	mov	d5,#2
	mov	d4,d9
.L360:
	call	Fee_LLWriteMarker
.L361:
	jeq	d2,#0,.L147
.L783:
	mov	d11,#1
.L784:
	mov	d15,#0
.L785:
	st.w	[a15],d15
.L147:
	j	.L148
.L140:
	mov	d11,#1
.L786:
	mov	d15,#0
.L787:
	st.w	[a15],d15
.L788:
	j	.L149
.L141:
	j	.L150
.L150:
.L149:
.L148:
.L146:
.L144:
	movh.a	a2,#@his(Fee_stMain)
	lea	a2,[a2]@los(Fee_stMain)
	ld.w	d15,[a2]
.L789:
	jne	d15,#0,.L151
.L790:
	jeq	d11,#0,.L136
.L151:
.L135:
.L134:
	add	d10,#1
.L356:
	extr.u	d10,d10,#0,#8
.L132:
	movh.a	a15,#@his(Fee_NumFlashBanksUsed_u8)
	lea	a15,[a15]@los(Fee_NumFlashBanksUsed_u8)
	ld.bu	d15,[a15]
.L791:
	jlt.u	d10,d15,.L133
.L792:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1197          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1198      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1199  }
	ret
.L271:
	
__Fee_CheckErasedSectorEmpty_function_end:
	.size	Fee_CheckErasedSectorEmpty,__Fee_CheckErasedSectorEmpty_function_end-Fee_CheckErasedSectorEmpty
.L219:
	; End of function
	
	.sdecl	'.text.rba_FeeFs1_LlDetectSector.Fee_GetMostCurrentSectorIdx',code,cluster('Fee_GetMostCurrentSectorIdx')
	.sect	'.text.rba_FeeFs1_LlDetectSector.Fee_GetMostCurrentSectorIdx'
	.align	2
	
	.global	Fee_GetMostCurrentSectorIdx

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1200  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1201  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1202   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1203   * Fee_GetMostCurrentSectorIdx(): Find most current sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1204   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1205   * This function searches for the sector with the most current
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1206   * values and returns its index.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1207   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1208   * \param    none
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1209   * \return
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1210   * \retval   0...254:   Index of physical sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1211   * \retval   255:       No sector found
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1212   * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1213   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1214   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1215   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1216  FUNC(uint8, FEE_CODE) Fee_GetMostCurrentSectorIdx(void)
; Function Fee_GetMostCurrentSectorIdx
.L186:
Fee_GetMostCurrentSectorIdx:	.type	func

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1217  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1218      VAR(uint8,AUTOMATIC) xCntFlashBank_u8;                       /* Loop counter */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1219      VAR(uint8,AUTOMATIC) xActiveSec_u8 = FEE_NO_SEC_IDX_FOUND;   /* Function return */
	mov	d2,#255
.L362:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1220      VAR(uint8,AUTOMATIC) xFirstErasedSec_u8 = FEE_NO_SEC_IDX_FOUND;    /* Temporary function return */
	mov	d0,#255
.L363:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1221  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1222      /* Explanation and hints
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1223       * *********************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1224       *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1225       * Sector order is always:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1226       *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1227       *  +---------------+  (1) (2) (3) (4) (5)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1228       *  |     FULL      |   D   D   D   D   D
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1229       *  |      #0       |   D   D   D   D   D
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1230       *  |               |   D   D   D   D   D
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1231       *  +---------------+   D   D   D   D   D
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1232       *  |     FULL      |   D   D   D   D   D
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1233       *  |      #1       |   D   D   D   D   D
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1234       *  |               |   D   D   D   D   D
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1235       *  +---------------+   D   D   D   D   D
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1236       *  |     USED      |   D       D       D
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1237       *  |      #2       |           D       D
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1238       *  |               |           D       D
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1239       *  +---------------+           D       D
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1240       *  |    ERASED     |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1241       *  |      #3       |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1242       *  +---------------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1243       *  |undef./ReqErase|
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1244       *  |      #4       |
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1245       *  +---------------+
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1246       *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1247       *  Possible cases:
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1248       *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1249       *  (1) Sector state == USED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1250       *      Data was written in the sector with state used but there is still free space
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1251       *      available within the sector (normal case)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1252       *      ==> Read address points to the last header page in sector #2
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1253       *          Write address points to the first page behind the block (usage of the block length for calculation of last page)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1254       *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1255       *  (2) Sector state == USED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1256       *      Data was not written in the sector due to a write interruption after writing the sector state
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1257       *      ==> Read address points to the last block header in the previous sector (#1)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1258       *          Write address points to the first page behind the last blockheader  (#1)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1259       *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1260       *  (3) Sector state == USED
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1261       *      Sector is completely filled, write interruption occured before writing the sector state (FULL)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1262       *      ==> Read address points to the last block header inside sector #2
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1263       *          Write address points to the next sector. The Calculation is based on the length within the last blockheader (of sector #2)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1264       *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1265       *  (4) Sector state == FULL
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1266       *      Same case as (2) - at least from data point of view. Interruption occurs directly after the sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1267       *      state "FULL" was written
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1268       *      ==> Read address see above
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1269       *          Write address see above
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1270       *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1271       *  (5) Sector state == FULL
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1272       *      Same case as (3) - at least from data point of view. Interruption occurs directly after sector state
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1273       *      "FULL" was written
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1274       *      ==> Read  address see above
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1275       *          Write address see above
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1276       */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1277  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1278      /* Loop over all configured flash banks */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1279      for(xCntFlashBank_u8=0; xCntFlashBank_u8<FEE_NUM_FLASH_BANKS; xCntFlashBank_u8++)
	mov	d1,#0
.L364:
	j	.L152
.L153:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1280      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1281          /* Check if the current sector is in state FULL */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1282          if(Fee_LLSectorOrder_st[xCntFlashBank_u8].SecState_en == FEE_SECTOR_FULL_E)
	mul	d15,d1,#12
.L725:
	movh.a	a15,#@his(Fee_LLSectorOrder_st)
	lea	a15,[a15]@los(Fee_LLSectorOrder_st)
.L726:
	addsc.a	a15,a15,d15,#0
.L727:
	ld.w	d15,[a15]4
.L728:
	jne	d15,#3,.L154
.L729:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1283          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1284              /* This sector should be used to search for block headers if no other USED sector was found */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1285              xActiveSec_u8 = Fee_LLSectorOrder_st[xCntFlashBank_u8].xPhySecIdx_u8;
	ld.bu	d2,[a15]8
.L154:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1286          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1287  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1288          /* Check if the current sector is in state USED */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1289          if(Fee_LLSectorOrder_st[xCntFlashBank_u8].SecState_en == FEE_SECTOR_USED_E)
	jne	d15,#2,.L155
.L730:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1290          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1291              /* This is the active sector, search for the first block header */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1292              xActiveSec_u8 = Fee_LLSectorOrder_st[xCntFlashBank_u8].xPhySecIdx_u8;
	ld.bu	d2,[a15]8
.L155:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1293  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1294              /* Hint: No break, otherwise the first FULL sector will be detected as first USED sector
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1295               * in case a full sector containing a FULL marker was destroyed.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1296               * -> The last found USED sector should remain the active one !!! */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1297          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1298  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1299          /* Check if the current sector is in state ERASED and no active sector has been found so far */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1300          if((Fee_LLSectorOrder_st[xCntFlashBank_u8].SecState_en == FEE_SECTOR_ERASED_E) &&
	jne	d15,#1,.L156
.L731:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1301             (xActiveSec_u8 == FEE_NO_SEC_IDX_FOUND))
	mov	d3,#255
.L732:
	jne	d2,d3,.L157
.L733:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1302          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1303              /* Check if this is the first ERASED sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1304              if(xFirstErasedSec_u8 == FEE_NO_SEC_IDX_FOUND)
	mov	d3,#255
.L734:
	eq	d3,d0,d3
.L735:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1305              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1306                  /* Save this sector temporarily */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1307                  xFirstErasedSec_u8 = xCntFlashBank_u8;
	seln	d0,d3,d0,d1
.L158:
.L157:
.L156:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1308              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1309          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1310  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1311          /* If no sector with the state "USED" or "ERASED" was found during the sector detection (Fee_LLDetectActiveSector),
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1312           * the logical sector 0 was marked to be erased already. */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1313          if(((Fee_LLSectorOrder_st[xCntFlashBank_u8].SecState_en == FEE_SECTOR_STATE_UNDEF_E) ||
	jeq	d15,#0,.L159
.L736:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1314              (Fee_LLSectorOrder_st[xCntFlashBank_u8].SecState_en == FEE_SECTOR_REQUEST2ERASE_E)) &&
	jne	d15,#4,.L160
.L159:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1315              (xActiveSec_u8 == FEE_NO_SEC_IDX_FOUND) &&
	mov	d15,#255
.L737:
	jne	d15,d2,.L161
.L738:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1316              (xFirstErasedSec_u8 == FEE_NO_SEC_IDX_FOUND))
	mov	d15,#255
.L739:
	jne	d15,d0,.L162
.L740:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1317          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1318              /* Mark the current sector to be the active one */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1319              xActiveSec_u8 = Fee_LLSectorOrder_st[xCntFlashBank_u8].xPhySecIdx_u8;
	ld.bu	d2,[a15]8
.L162:
.L161:
.L160:
	add	d1,#1
.L365:
	extr.u	d1,d1,#0,#8
.L152:
	movh.a	a15,#@his(Fee_NumFlashBanksUsed_u8)
	lea	a15,[a15]@los(Fee_NumFlashBanksUsed_u8)
	ld.bu	d15,[a15]
.L741:
	jlt.u	d1,d15,.L153
.L742:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1320          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1321      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1322  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1323      /* Check if there are no USED or FULL sectors available but an erased sector was found,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1324         take the first one as the new active sector */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1325      if((xActiveSec_u8 == FEE_NO_SEC_IDX_FOUND) && (xFirstErasedSec_u8 != FEE_NO_SEC_IDX_FOUND))
	mov	d15,#255
.L743:
	jne	d15,d2,.L163
.L744:
	mov	d15,#255
.L745:
	jeq	d15,d0,.L164
.L746:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1326      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1327          /* Take the first erased sector as the active one */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1328          xActiveSec_u8 = Fee_LLSectorOrder_st[xFirstErasedSec_u8].xPhySecIdx_u8;
	mul	d15,d0,#12
.L747:
	movh.a	a15,#@his(Fee_LLSectorOrder_st)
	lea	a15,[a15]@los(Fee_LLSectorOrder_st)
.L748:
	addsc.a	a15,a15,d15,#0
.L749:
	ld.bu	d2,[a15]8
.L164:
.L163:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1329      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1330  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1331      /* Return the most current sector index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1332      return (xActiveSec_u8);
	j	.L165

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1333  }
.L165:
	ret
.L267:
	
__Fee_GetMostCurrentSectorIdx_function_end:
	.size	Fee_GetMostCurrentSectorIdx,__Fee_GetMostCurrentSectorIdx_function_end-Fee_GetMostCurrentSectorIdx
.L214:
	; End of function
	
	.sdecl	'.text.rba_FeeFs1_LlDetectSector.Fee_IncAddressInsideSector',code,cluster('Fee_IncAddressInsideSector')
	.sect	'.text.rba_FeeFs1_LlDetectSector.Fee_IncAddressInsideSector'
	.align	2
	
	.global	Fee_IncAddressInsideSector

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1334  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1335  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1336  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1337   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1338   * Fee_IncAddressInsideSector(): Increment address page aligned
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1339   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1340   * This function returns the next page aligned address (+ user length)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1341   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1342   * \param    Address_u32:   Physical user address
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1343   * \param    numBytes_u16:  Number of bytes
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1344   * \param    EnsurePageAlign_b: Ensure page alignment option
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1345   * \return
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1346   * \retval   none
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1347   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1348   * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1349   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1350   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1351   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1352  FUNC(void, FEE_CODE) Fee_IncAddressInsideSector(P2VAR(uint32, AUTOMATIC, FEE_APPL_DATA) Address_u32,
; Function Fee_IncAddressInsideSector
.L188:
Fee_IncAddressInsideSector:	.type	func
	mov.aa	a12,a4
.L368:
	mov	d8,d4
.L369:
	mov	d10,d5
.L371:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1353                                                  VAR(uint16, FEE_VAR) numBytes_u16,
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1354                                                  VAR(boolean, FEE_VAR) EnsurePageAlign_b)
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1355  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1356      /* Get physical sector index belonging to the user address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1357      VAR(uint8, AUTOMATIC) xActSector_u8 = Fee_GetPhysSectorByAddress(*Address_u32);
	ld.w	d9,[a12]
	mov	d4,d9
.L367:
	call	Fee_GetPhysSectorByAddress
.L366:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1358  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1359      /* Check for a valid sector index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1360      if(xActSector_u8 != FEE_NO_SEC_IDX_FOUND)
	mov	d15,#255
.L810:
	jeq	d15,d2,.L166
.L811:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1361      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1362          if(EnsurePageAlign_b != FALSE)
	jeq	d10,#0,.L167
.L812:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1363          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1364              /* Check for the page alignment */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1365              while((numBytes_u16 % FEE_PAGE_LEN) != 0u)
	j	.L168
.L169:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1366              {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1367                  /* Increment address */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1368                  numBytes_u16++;
	add	d8,#1
.L370:
	extr.u	d8,d8,#0,#16
.L168:
	and	d15,d8,#7
.L813:
	jne	d15,#0,.L169
.L167:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1369              }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1370          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1371  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1372          /* Set address to the beginning of the next page */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1373          *Address_u32 += numBytes_u16;
	add	d9,d8
	st.w	[a12],d9
.L814:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1374  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1375          /* Keep address inside of the current sector in case of an address overflow.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1376           * Otherwise Fee_GetPhysSectorByAddress will return only invalid values */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1377          if (*Address_u32 > Fee_FlashProp_st[xActSector_u8].Fee_LogEndAddress_u32)
	sha	d2,#4
.L372:
	movh.a	a15,#@his(Fee_FlashProp_st)
	lea	a15,[a15]@los(Fee_FlashProp_st)
.L815:
	addsc.a	a15,a15,d2,#0
.L816:
	ld.w	d15,[a15]12
.L817:
	ld.w	d0,[a12]
.L818:
	jge.u	d15,d0,.L170
.L819:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1378          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1379              *Address_u32 = Fee_FlashProp_st[xActSector_u8].Fee_LogEndAddress_u32;
	st.w	[a12],d15
.L170:
.L166:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1380          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1381      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1382  }
	ret
.L280:
	
__Fee_IncAddressInsideSector_function_end:
	.size	Fee_IncAddressInsideSector,__Fee_IncAddressInsideSector_function_end-Fee_IncAddressInsideSector
.L229:
	; End of function
	
	.sdecl	'.text.rba_FeeFs1_LlDetectSector.Fee_GetPhysSectorByAddress',code,cluster('Fee_GetPhysSectorByAddress')
	.sect	'.text.rba_FeeFs1_LlDetectSector.Fee_GetPhysSectorByAddress'
	.align	2
	
	.global	Fee_GetPhysSectorByAddress

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1383  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1384  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1385  /**
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1386   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1387   * Fee_GetPhysSectorByAddress(): Get flash bank index
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1388   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1389   * This function searches for the physical sector index belonging
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1390   * to the address passed by the user.
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1391   *
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1392   * \param    Address_u32:   Physical user address
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1393   * \return
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1394   * \retval   0...254:       Index of physical flash bank
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1395   * \retval   255:           No configured bank was found which
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1396   *                          matches to the user parameter
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1397   * \seealso
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1398   * \usedresources
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1399   *********************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1400   */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1401  FUNC(uint8, FEE_CODE) Fee_GetPhysSectorByAddress(VAR(uint32, AUTOMATIC) Address_u32)
; Function Fee_GetPhysSectorByAddress
.L190:
Fee_GetPhysSectorByAddress:	.type	func

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1402  {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1403      VAR(uint8, AUTOMATIC) cnt_u8;                          /* Loop counter */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1404      VAR(uint8, AUTOMATIC) xSec_u8 = FEE_NO_SEC_IDX_FOUND;  /* Function return */
	mov	d2,#255
.L373:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1405  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1406  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1407      /* Loop over all configured flash banks */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1408      for (cnt_u8=0; cnt_u8<FEE_NUM_FLASH_BANKS; cnt_u8++)
	mov	d0,#0
.L374:
	j	.L171
.L172:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1409      {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1410          /* Search only within the user area */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1411          if((Address_u32 >= Fee_FlashProp_st[cnt_u8].Fee_PhysStartAddress_u32) &&
	sha	d15,d0,#4
.L797:
	movh.a	a15,#@his(Fee_FlashProp_st)
	lea	a15,[a15]@los(Fee_FlashProp_st)
.L798:
	addsc.a	a15,a15,d15,#0
.L799:
	ld.w	d15,[a15]
.L800:
	jlt.u	d4,d15,.L173
.L801:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1412             (Address_u32 <= Fee_FlashProp_st[cnt_u8].Fee_PhysEndAddress_u32))
	ld.w	d15,[a15]4
.L802:
	jlt.u	d15,d4,.L174
.L803:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1413          {
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1414              /* Save the flash bank index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1415              xSec_u8 = cnt_u8;
	mov	d2,d0
.L804:

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1416  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1417              /* Loop can be left */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1418              break;
	j	.L175
.L174:
.L173:
	add	d0,#1
.L375:
	extr.u	d0,d0,#0,#8
.L171:
	movh.a	a15,#@his(Fee_NumFlashBanksUsed_u8)
	lea	a15,[a15]@los(Fee_NumFlashBanksUsed_u8)
	ld.bu	d15,[a15]
.L805:
	jlt.u	d0,d15,.L172

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1419          }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1420      }
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1421  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1422      /* Return flash bank index */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1423      return(xSec_u8);
.L175:
	j	.L176

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1424  }
.L176:
	ret
.L276:
	
__Fee_GetPhysSectorByAddress_function_end:
	.size	Fee_GetPhysSectorByAddress,__Fee_GetPhysSectorByAddress_function_end-Fee_GetPhysSectorByAddress
.L224:
	; End of function
	
	.sdecl	'.bss.rba_FeeFs1_LlDetectSector.Fee_LastErasedMarker_u16',data,cluster('Fee_LastErasedMarker_u16')
	.sect	'.bss.rba_FeeFs1_LlDetectSector.Fee_LastErasedMarker_u16'
	.align	2
Fee_LastErasedMarker_u16:	.type	object
	.size	Fee_LastErasedMarker_u16,4
	.space	4
	.calls	'Fee_LLDetectActiveSector','Fee_LLSearchSectors'
	.calls	'Fee_LLDetectActiveSector','Fls_17_Pmu_MainFunction'
	.calls	'Fee_LLDetectActiveSector','Fee_LLWriteMarker'
	.calls	'Fee_LLDetectActiveSector','Fee_CheckErasedSectorEmpty'
	.calls	'Fee_LLDetectActiveSector','Fee_GetMostCurrentSectorIdx'
	.calls	'Fee_LLSearchSectors','Fee_SrvMemSet8'
	.calls	'Fee_LLSearchSectors','Fls_BlankCheck'
	.calls	'Fee_LLSearchSectors','Fls_17_Pmu_MainFunction'
	.calls	'Fee_LLSearchSectors','Fee_CheckFlsJobResult'
	.calls	'Fee_LLSearchSectors','Fls_17_Pmu_Read'
	.calls	'Fee_LLSearchSectors','Fee_LLCopyPageBuff2Marker'
	.calls	'Fee_LLSearchSectors','Crc_CalculateCRC16'
	.calls	'Fee_LLFindEmptyPage','Fee_LLGetSecStartAddress'
	.calls	'Fee_LLFindEmptyPage','Fee_SearchLastBlkHeader'
	.calls	'Fee_LLFindEmptyPage','Fee_LLGetSecEndAddress'
	.calls	'Fee_CheckErasedSectorEmpty','Fls_BlankCheck'
	.calls	'Fee_CheckErasedSectorEmpty','Fls_17_Pmu_MainFunction'
	.calls	'Fee_CheckErasedSectorEmpty','Fee_CheckFlsJobResult'
	.calls	'Fee_CheckErasedSectorEmpty','Fee_LLWriteMarker'
	.calls	'Fee_IncAddressInsideSector','Fee_GetPhysSectorByAddress'
	.calls	'Fee_LLDetectActiveSector','',56
	.calls	'Fee_LLSearchSectors','',8
	.calls	'Fee_LLFindEmptyPage','',16
	.calls	'Fee_CheckErasedSectorEmpty','',0
	.calls	'Fee_GetMostCurrentSectorIdx','',0
	.calls	'Fee_IncAddressInsideSector','',0
	.extern	Fls_17_Pmu_MainFunction
	.extern	Fls_17_Pmu_Read
	.extern	Fee_stMain
	.extern	Fee_SecChngCnt_u32
	.extern	Fee_FlashProp_st
	.extern	Fee_RdWrOrder_st
	.extern	Fee_LLSectorOrder_st
	.extern	Fee_MarkerBufBytePtr_cpu8
	.extern	Fee_NumFlashBanksUsed_u8
	.extern	Fee_idxLLSectorOrder_au8
	.extern	Fee_RdWrRetries_u8
	.extern	Fee_LLWriteMarker
	.extern	Fee_LLGetSecStartAddress
	.extern	Fee_LLGetSecEndAddress
	.extern	Fee_LLCopyPageBuff2Marker
	.extern	Fee_SearchLastBlkHeader
	.extern	Fee_SrvMemSet8
	.extern	Fee_CheckFlsJobResult
	.extern	Crc_CalculateCRC16
	.extern	Fls_BlankCheck
	.calls	'Fee_GetPhysSectorByAddress','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L192:
	.word	17196
	.half	3
	.word	.L193
	.byte	4
.L191:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlDetectSector.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L194
.L237:
	.byte	2
	.byte	'unsigned int',0,4,7,3
	.byte	'Fee_SrvRoundUp',0,3,1,140,11,21
	.word	158
	.byte	1,1,4
	.byte	'value_u32',0,1,140,11,43
	.word	158
	.byte	4
	.byte	'stepsize_u32',0,1,140,11,62
	.word	158
	.byte	5,0,6
	.byte	'Fls_17_Pmu_MainFunction',0,2,134,8,13,1,1,1,1
.L239:
	.byte	2
	.byte	'unsigned char',0,1,8,7
	.word	277
	.byte	8
	.byte	'Fls_17_Pmu_Read',0,2,192,8,23
	.word	277
	.byte	1,1,1,1,4
	.byte	'SourceAddress',0,2,192,8,56
	.word	158
	.byte	4
	.byte	'TargetAddressPtr',0,2,193,8,40
	.word	294
	.byte	4
	.byte	'Length',0,2,194,8,48
	.word	158
	.byte	0,9,1,234,1,9,16,10
	.byte	'SecChngCnt_u32',0
	.word	158
	.byte	4,2,35,0,10
	.byte	'ctErasedMarker_u8',0
	.word	277
	.byte	1,2,35,4,10
	.byte	'ctUsedMarker_u8',0
	.word	277
	.byte	1,2,35,5,10
	.byte	'ctFullMarker_u8',0
	.word	277
	.byte	1,2,35,6,10
	.byte	'ctEraseReq_u8',0
	.word	277
	.byte	1,2,35,7,10
	.byte	'xStartAddr_u32',0
	.word	158
	.byte	4,2,35,8,10
	.byte	'ctCloneMarker_u8',0
	.word	277
	.byte	1,2,35,12,0
.L233:
	.byte	7
	.word	394
.L241:
	.byte	2
	.byte	'unsigned short int',0,2,7,11,3
	.word	277
	.byte	12,2,0
.L235:
	.byte	9,1,225,1,9,8,10
	.byte	'xPattern',0
	.word	580
	.byte	2,2,35,0,10
	.byte	'xIdent',0
	.word	277
	.byte	1,2,35,2,10
	.byte	'xContent',0
	.word	602
	.byte	3,2,35,3,10
	.byte	'xChecksum',0
	.word	580
	.byte	2,2,35,6,0
.L243:
	.byte	2
	.byte	'char',0,1,6
.L248:
	.byte	11,32
	.word	394
	.byte	12,1,0,13,1,246,1,9,4,14
	.byte	'FEE_SECTOR_STATE_UNDEF_E',0,0,14
	.byte	'FEE_SECTOR_ERASED_E',0,1,14
	.byte	'FEE_SECTOR_USED_E',0,2,14
	.byte	'FEE_SECTOR_FULL_E',0,3,14
	.byte	'FEE_SECTOR_REQUEST2ERASE_E',0,4,14
	.byte	'FEE_SECTOR_CONSIDERED_E',0,13,0,9,1,129,2,9,12,10
	.byte	'SecChngCnt_u32',0
	.word	158
	.byte	4,2,35,0,10
	.byte	'SecState_en',0
	.word	706
	.byte	4,2,35,4,10
	.byte	'xPhySecIdx_u8',0
	.word	277
	.byte	1,2,35,8,0
.L250:
	.byte	11,24
	.word	857
	.byte	12,1,0
.L260:
	.byte	13,1,137,2,9,4,14
	.byte	'FEE_ORDER_PENDING_E',0,0,14
	.byte	'FEE_ORDER_FINISHED_E',0,1,14
	.byte	'FEE_BLOCK_INVALIDATED_E',0,2,14
	.byte	'FEE_ERROR_E',0,3,14
	.byte	'FEE_SECTORCHANGE_E',0,4,14
	.byte	'FEE_SECTORFULL_E',0,5,14
	.byte	'FEE_ABORTED_E',0,6,14
	.byte	'FEE_ERASE_SECTOR_E',0,7,14
	.byte	'FEE_SEARCH_ABORTED_E',0,8,14
	.byte	'FEE_NUM_RET_VAL_E',0,9,0
.L265:
	.byte	9,1,227,5,9,16,10
	.byte	'AdrBlkHeader_u32',0
	.word	158
	.byte	4,2,35,0,10
	.byte	'BlkCrc32_u32',0
	.word	158
	.byte	4,2,35,4,10
	.byte	'HdrCrc16_u16',0
	.word	580
	.byte	2,2,35,8,10
	.byte	'BlkLength_u16',0
	.word	580
	.byte	2,2,35,10,10
	.byte	'FeeIndex_u16',0
	.word	580
	.byte	2,2,35,12,10
	.byte	'BlkStatus_u8',0
	.word	277
	.byte	1,2,35,14,0,8
	.byte	'Fee_LLWriteMarker',0,1,174,8,41
	.word	941
	.byte	1,1,1,1,4
	.byte	'PhySectIdx_u8',0,1,174,8,81
	.word	277
	.byte	4
	.byte	'MarkerID_u8',0,1,175,8,81
	.word	277
	.byte	0,8
	.byte	'Fee_LLGetSecStartAddress',0,1,206,8,31
	.word	158
	.byte	1,1,1,1,4
	.byte	'xPhySectorIdx_u8',0,1,206,8,78
	.word	277
	.byte	0,8
	.byte	'Fee_LLGetSecEndAddress',0,1,207,8,31
	.word	158
	.byte	1,1,1,1,4
	.byte	'xPhySectorIdx_u8',0,1,207,8,76
	.word	277
	.byte	0,7
	.word	611
	.byte	15
	.word	277
	.byte	7
	.word	1506
	.byte	16
	.byte	'Fee_LLCopyPageBuff2Marker',0,1,219,8,41,1,1,1,1,4
	.byte	'Marker_pst',0,1,219,8,117
	.word	1501
	.byte	4
	.byte	'PageBuf_pcu8',0,1,220,8,108
	.word	1511
	.byte	0,7
	.word	1153
	.byte	8
	.byte	'Fee_SearchLastBlkHeader',0,1,237,8,41
	.word	941
	.byte	1,1,1,1,4
	.byte	'Fee_GlobInfoLastRdHeader_ptr',0,1,237,8,127
	.word	1594
	.byte	0
.L281:
	.byte	7
	.word	158
	.byte	16
	.byte	'Fee_SrvMemSet8',0,1,191,9,30,1,1,1,1,4
	.byte	'xDest_pu8',0,1,191,9,84
	.word	294
	.byte	4
	.byte	'xPattern_u32',0,1,192,9,66
	.word	158
	.byte	4
	.byte	'numBytes_u32',0,1,193,9,66
	.word	158
	.byte	0,6
	.byte	'Fee_CheckFlsJobResult',0,1,219,9,31,1,1,1,1,17
	.word	174
	.byte	18
	.word	201
	.byte	18
	.word	220
	.byte	5,0,8
	.byte	'Crc_CalculateCRC16',0,3,80,15
	.word	580
	.byte	1,1,1,1,4
	.byte	'Crc_DataPtr',0,3,80,47
	.word	1511
	.byte	4
	.byte	'Crc_Length',0,3,80,67
	.word	158
	.byte	4
	.byte	'Crc_StartValue16',0,3,80,86
	.word	580
	.byte	4
	.byte	'Crc_IsFirstCall',0,3,81,42
	.word	277
	.byte	0,2
	.byte	'int',0,4,5,19
	.byte	'Fls_BlankCheck',0,4,132,3,24
	.word	1936
	.byte	1,1,1,20,1,7
	.word	1970
	.byte	21
	.byte	'__codeptr',0,4,1,1
	.word	1972
	.byte	21
	.byte	'sint8',0,5,76,25
	.word	689
	.byte	21
	.byte	'uint8',0,5,81,25
	.word	277
	.byte	21
	.byte	'uint16',0,5,91,25
	.word	580
	.byte	21
	.byte	'uint32',0,5,106,24
	.word	158
	.byte	2
	.byte	'unsigned long long int',0,8,7,21
	.byte	'uint64',0,5,111,30
	.word	2053
	.byte	21
	.byte	'boolean',0,5,127,25
	.word	277
	.byte	21
	.byte	'StatusType',0,6,191,1,27
	.word	277
	.byte	21
	.byte	'Std_ReturnType',0,6,199,1,15
	.word	277
	.byte	9,6,206,1,9,8,10
	.byte	'vendorID',0
	.word	580
	.byte	2,2,35,0,10
	.byte	'moduleID',0
	.word	580
	.byte	2,2,35,2,10
	.byte	'sw_major_version',0
	.word	277
	.byte	1,2,35,4,10
	.byte	'sw_minor_version',0
	.word	277
	.byte	1,2,35,5,10
	.byte	'sw_patch_version',0
	.word	277
	.byte	1,2,35,6,0,21
	.byte	'Std_VersionInfoType',0,6,213,1,3
	.word	2154
	.byte	9,7,93,9,8,10
	.byte	'Class',0
	.word	277
	.byte	1,2,35,0,10
	.byte	'TIN',0
	.word	277
	.byte	1,2,35,1,10
	.byte	'ReturnAddress',0
	.word	158
	.byte	4,2,35,4,0,21
	.byte	'OsTrapInfoType',0,7,97,3
	.word	2304
	.byte	11,68
	.word	158
	.byte	12,16,0,9,7,154,1,9,68,10
	.byte	'store',0
	.word	2384
	.byte	68,2,35,0,0,11,68
	.word	2393
	.byte	12,0,0,21
	.byte	'Os_JumpBufType',0,7,156,1,3
	.word	2415
	.byte	21
	.byte	'Os_StackTraceType',0,7,174,1,18
	.word	158
	.byte	9,7,175,1,9,8,10
	.byte	'sp',0
	.word	158
	.byte	4,2,35,0,10
	.byte	'ctx',0
	.word	158
	.byte	4,2,35,4,0,21
	.byte	'Os_StackValueType',0,7,175,1,63
	.word	2475
	.byte	21
	.byte	'Os_StackSizeType',0,7,176,1,27
	.word	2475
	.byte	22,1,1,7
	.word	2560
	.byte	21
	.byte	'Os_VoidVoidFunctionType',0,7,179,1,16
	.word	2563
	.byte	21
	.byte	'ApplicationType',0,7,193,1,23
	.word	277
	.byte	23
	.byte	'Os_ApplicationConfigurationType_s',0,7,198,1,16,2,10
	.byte	'app_id',0
	.word	277
	.byte	1,2,35,0,10
	.byte	'access',0
	.word	277
	.byte	1,2,35,1,0,21
	.byte	'Os_ApplicationConfigurationType',0,7,201,1,3
	.word	2626
	.byte	21
	.byte	'Os_CoreStateType',0,7,203,1,16
	.word	158
	.byte	21
	.byte	'AreaIdType',0,7,204,1,16
	.word	580
	.byte	21
	.byte	'Os_PeripheralAddressType',0,7,212,1,22
	.word	158
	.byte	21
	.byte	'TickType',0,7,221,1,22
	.word	158
	.byte	21
	.byte	'Os_StopwatchTickType',0,7,225,1,22
	.word	158
	.byte	21
	.byte	'Os_Lockable',0,7,234,1,18
	.word	1675
	.byte	21
	.byte	'CoreIdType',0,7,236,1,16
	.word	580
	.byte	21
	.byte	'SpinlockIdType',0,7,237,1,16
	.word	580
	.byte	13,7,239,1,9,4,14
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,14
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,21
	.byte	'TryToGetSpinlockType',0,7,239,1,74
	.word	2933
	.byte	13,7,174,2,9,4,14
	.byte	'APPLICATION_ACCESSIBLE',0,0,14
	.byte	'APPLICATION_RESTARTING',0,1,14
	.byte	'APPLICATION_TERMINATED',0,2,0,21
	.byte	'ApplicationStateType',0,7,174,2,92
	.word	3026
	.byte	24
	.byte	'void',0,7
	.word	3138
	.byte	25,1,1,26
	.word	277
	.byte	26
	.word	3144
	.byte	0,7
	.word	3149
	.byte	21
	.byte	'Os_FunctionEntryType',0,7,183,2,16
	.word	3163
	.byte	23
	.byte	'Os_MeterInfoType_s',0,7,193,2,16,48,10
	.byte	'elapsed',0
	.word	158
	.byte	4,2,35,0,10
	.byte	'previous',0
	.word	158
	.byte	4,2,35,4,10
	.byte	'max',0
	.word	158
	.byte	4,2,35,8,10
	.byte	'cumulative',0
	.word	158
	.byte	4,2,35,12,10
	.byte	'stackbase',0
	.word	2475
	.byte	8,2,35,16,10
	.byte	'stackusage',0
	.word	2475
	.byte	8,2,35,24,10
	.byte	'stackmax',0
	.word	2475
	.byte	8,2,35,32,10
	.byte	'stackbudget',0
	.word	2475
	.byte	8,2,35,40,0,21
	.byte	'Os_MeterInfoType',0,7,202,2,3
	.word	3198
	.byte	7
	.word	3198
	.byte	21
	.byte	'Os_MeterInfoRefType',0,7,203,2,50
	.word	3396
	.byte	21
	.byte	'EventMaskType',0,7,206,2,15
	.word	277
	.byte	21
	.byte	'Os_imaskType',0,7,211,2,16
	.word	158
	.byte	23
	.byte	'Os_ISRDynType_s',0,7,213,2,16,48,10
	.byte	'meter',0
	.word	3198
	.byte	48,2,35,0,0,21
	.byte	'Os_ISRDynType',0,7,215,2,3
	.word	3475
	.byte	7
	.word	3475
	.byte	15
	.word	3536
	.byte	23
	.byte	'Os_ISRType_s',0,7,216,2,16,24,10
	.byte	'entry_function',0
	.word	2568
	.byte	4,2,35,0,10
	.byte	'dynamic',0
	.word	3541
	.byte	4,2,35,4,10
	.byte	'imask',0
	.word	158
	.byte	4,2,35,8,10
	.byte	'stackbudget',0
	.word	2475
	.byte	8,2,35,12,10
	.byte	'access',0
	.word	277
	.byte	1,2,35,20,10
	.byte	'application',0
	.word	277
	.byte	1,2,35,21,0,21
	.byte	'Os_ISRType',0,7,223,2,3
	.word	3546
	.byte	7
	.word	2560
	.byte	15
	.word	3546
	.byte	7
	.word	3705
	.byte	21
	.byte	'ISRType',0,7,224,2,46
	.word	3710
	.byte	21
	.byte	'Os_bitmask',0,7,239,2,22
	.word	158
	.byte	21
	.byte	'Os_pset0Type',0,7,240,2,20
	.word	158
	.byte	21
	.byte	'Os_pset1Type',0,7,241,2,20
	.word	158
	.byte	21
	.byte	'Os_pset2Type',0,7,242,2,20
	.word	158
	.byte	27,7,243,2,9,4,10
	.byte	'p0',0
	.word	158
	.byte	4,2,35,0,10
	.byte	'p1',0
	.word	158
	.byte	4,2,35,0,10
	.byte	'p2',0
	.word	158
	.byte	4,2,35,0,0,21
	.byte	'Os_psetType',0,7,247,2,3
	.word	3818
	.byte	27,7,249,2,9,4,10
	.byte	't0',0
	.word	158
	.byte	4,2,35,0,10
	.byte	't1',0
	.word	158
	.byte	4,2,35,0,10
	.byte	't2',0
	.word	158
	.byte	4,2,35,0,0,21
	.byte	'Os_tpmaskType',0,7,253,2,3
	.word	3882
	.byte	21
	.byte	'Os_ActivationCountType',0,7,254,2,23
	.word	277
	.byte	23
	.byte	'Os_TaskDynType_s',0,7,128,3,16,120,10
	.byte	'terminate_jump_buf',0
	.word	2424
	.byte	68,2,35,0,10
	.byte	'meter',0
	.word	3198
	.byte	48,2,35,68,10
	.byte	'activation_count',0
	.word	277
	.byte	1,2,35,116,0,21
	.byte	'Os_TaskDynType',0,7,132,3,3
	.word	3980
	.byte	11,68
	.word	2393
	.byte	12,0,0,7
	.word	3980
	.byte	15
	.word	4106
	.byte	23
	.byte	'Os_TaskType_s',0,7,134,3,16,40,10
	.byte	'dynamic',0
	.word	4111
	.byte	4,2,35,0,10
	.byte	'entry_function',0
	.word	2568
	.byte	4,2,35,4,10
	.byte	'pset',0
	.word	3818
	.byte	4,2,35,8,10
	.byte	'base_tpmask',0
	.word	3882
	.byte	4,2,35,12,10
	.byte	'tpmask',0
	.word	3882
	.byte	4,2,35,16,10
	.byte	'core_id',0
	.word	580
	.byte	2,2,35,20,10
	.byte	'index',0
	.word	158
	.byte	4,2,35,24,10
	.byte	'stackbudget',0
	.word	2475
	.byte	8,2,35,28,10
	.byte	'activation_count',0
	.word	277
	.byte	1,2,35,36,10
	.byte	'access',0
	.word	277
	.byte	1,2,35,37,10
	.byte	'application',0
	.word	277
	.byte	1,2,35,38,0,21
	.byte	'Os_TaskType',0,7,146,3,3
	.word	4116
	.byte	15
	.word	4116
	.byte	7
	.word	4366
	.byte	21
	.byte	'TaskType',0,7,147,3,47
	.word	4371
	.byte	28
	.byte	'Os_TaskStateType',0,7,155,3,6,4,14
	.byte	'SUSPENDED',0,0,14
	.byte	'READY',0,1,14
	.byte	'WAITING',0,2,14
	.byte	'RUNNING',0,3,0,21
	.byte	'TaskStateType',0,7,156,3,31
	.word	4394
	.byte	27,7,167,3,3,4,10
	.byte	'tpmask',0
	.word	3882
	.byte	4,2,35,0,0,23
	.byte	'Os_ResourceDynType_s',0,7,166,3,16,4,10
	.byte	'saved_priority',0
	.word	4481
	.byte	4,2,35,0,0,21
	.byte	'Os_ResourceDynType',0,7,170,3,3
	.word	4504
	.byte	7
	.word	4504
	.byte	15
	.word	4584
	.byte	23
	.byte	'Os_ResourceType_s',0,7,171,3,16,12,10
	.byte	'dynamic',0
	.word	4589
	.byte	4,2,35,0,10
	.byte	'tpmask',0
	.word	3882
	.byte	4,2,35,4,10
	.byte	'access',0
	.word	277
	.byte	1,2,35,8,0,21
	.byte	'Os_ResourceType',0,7,175,3,3
	.word	4594
	.byte	9,7,181,3,9,12,10
	.byte	'maxallowedvalue',0
	.word	158
	.byte	4,2,35,0,10
	.byte	'ticksperbase',0
	.word	158
	.byte	4,2,35,4,10
	.byte	'mincycle',0
	.word	158
	.byte	4,2,35,8,0,21
	.byte	'AlarmBaseType',0,7,185,3,3
	.word	4693
	.byte	9,7,206,3,9,8,10
	.byte	'Running',0
	.word	277
	.byte	1,2,35,0,10
	.byte	'Pending',0
	.word	277
	.byte	1,2,35,1,10
	.byte	'Delay',0
	.word	158
	.byte	4,2,35,4,0,21
	.byte	'Os_CounterStatusType',0,7,210,3,3
	.word	4788
	.byte	29
	.word	277
	.byte	1,1,7
	.word	4874
	.byte	21
	.byte	'Os_CounterIncrAdvType',0,7,217,3,22
	.word	4881
	.byte	23
	.byte	's_swd',0,7,222,3,12,4,10
	.byte	'count',0
	.word	158
	.byte	4,2,35,0,0,27,7,221,3,3,4,10
	.byte	'sw',0
	.word	4917
	.byte	4,2,35,0,0,23
	.byte	'Os_CounterDynType_s',0,7,220,3,16,4,10
	.byte	'type_dependent',0
	.word	4945
	.byte	4,2,35,0,0,21
	.byte	'Os_CounterDynType',0,7,226,3,3
	.word	4964
	.byte	7
	.word	4964
	.byte	15
	.word	5042
	.byte	23
	.byte	'Os_CounterType_s',0,7,227,3,16,28,10
	.byte	'dynamic',0
	.word	5047
	.byte	4,2,35,0,10
	.byte	'advincr',0
	.word	4886
	.byte	4,2,35,4,10
	.byte	'base',0
	.word	4693
	.byte	12,2,35,8,10
	.byte	'core',0
	.word	3144
	.byte	4,2,35,20,10
	.byte	'access',0
	.word	277
	.byte	1,2,35,24,10
	.byte	'application',0
	.word	277
	.byte	1,2,35,25,0,21
	.byte	'Os_CounterType',0,7,234,3,3
	.word	5052
	.byte	7
	.word	4874
	.byte	15
	.word	5052
	.byte	7
	.word	5204
	.byte	21
	.byte	'CounterType',0,7,235,3,52
	.word	5209
	.byte	28
	.byte	'Os_ScheduleTableStatusType',0,7,240,3,6,4,14
	.byte	'SCHEDULETABLE_STOPPED',0,0,14
	.byte	'SCHEDULETABLE_NEXT',0,1,14
	.byte	'SCHEDULETABLE_WAITING',0,2,14
	.byte	'SCHEDULETABLE_RUNNING',0,3,14
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,21
	.byte	'ScheduleTableStatusType',0,7,241,3,41
	.word	5235
	.byte	15
	.word	.L376-.L192
	.byte	7
	.word	5435
	.byte	21
	.byte	'ScheduleTableType',0,7,128,4,58
	.word	5440
	.byte	23
	.byte	'Os_ScheduleTableDynType_s',0,7,130,4,16,16,10
	.byte	'match',0
	.word	158
	.byte	4,2,35,0,10
	.byte	'next',0
	.word	5445
	.byte	4,2,35,4,10
	.byte	'state',0
	.word	5235
	.byte	4,2,35,8,10
	.byte	'config',0
	.word	580
	.byte	2,2,35,12,0,7
	.word	5472
	.byte	15
	.word	5565
.L376:
	.byte	23
	.byte	'Os_ScheduleTableType_s',0,7,247,3,16,16,10
	.byte	'dynamic',0
	.word	5570
	.byte	4,2,35,0,10
	.byte	'counter',0
	.word	5214
	.byte	4,2,35,4,10
	.byte	'repeat',0
	.word	277
	.byte	1,2,35,8,10
	.byte	'config',0
	.word	580
	.byte	2,2,35,10,10
	.byte	'initial',0
	.word	277
	.byte	1,2,35,12,10
	.byte	'access',0
	.word	277
	.byte	1,2,35,13,10
	.byte	'application',0
	.word	277
	.byte	1,2,35,14,0,21
	.byte	'Os_ScheduleTableType',0,7,255,3,3
	.word	5575
	.byte	15
	.word	5575
	.byte	7
	.word	5755
	.byte	15
	.word	5052
	.byte	7
	.word	5765
	.byte	30
	.word	2868
	.byte	30
	.word	3818
	.byte	30
	.word	3715
	.byte	30
	.word	4376
	.byte	30
	.word	3882
	.byte	30
	.word	277
	.byte	30
	.word	4376
	.byte	23
	.byte	'Os_ControlledCoreType_s',0,7,251,6,16,112,10
	.byte	'TrapInfo',0
	.word	2304
	.byte	8,2,35,0,10
	.byte	'lock_taskaccess',0
	.word	5775
	.byte	4,2,35,8,10
	.byte	'ReadyTasks',0
	.word	5780
	.byte	4,2,35,12,10
	.byte	'RunningISR',0
	.word	5785
	.byte	4,2,35,16,10
	.byte	'RunningTask',0
	.word	5790
	.byte	4,2,35,20,10
	.byte	'RunningTPMask',0
	.word	5795
	.byte	4,2,35,24,10
	.byte	'CurrentMeteredObject',0
	.word	3401
	.byte	4,2,35,28,10
	.byte	'IdleMeter',0
	.word	3198
	.byte	48,2,35,32,10
	.byte	'AppAccess',0
	.word	277
	.byte	1,2,35,80,10
	.byte	'AppOverride',0
	.word	5800
	.byte	1,2,35,81,10
	.byte	'GetStackValueAdjust',0
	.word	2475
	.byte	8,2,35,84,10
	.byte	'InErrorHook',0
	.word	277
	.byte	1,2,35,92,10
	.byte	'ChainTaskRef',0
	.word	5805
	.byte	4,2,35,96,10
	.byte	'GetStackUsageAdjust',0
	.word	2475
	.byte	8,2,35,100,10
	.byte	'InProtectionHook',0
	.word	277
	.byte	1,2,35,108,10
	.byte	'CoreIsActive',0
	.word	277
	.byte	1,2,35,109,10
	.byte	'InShutdownHook',0
	.word	277
	.byte	1,2,35,110,0,21
	.byte	'Os_ControlledCoreType',0,7,141,7,3
	.word	5810
	.byte	7
	.word	158
	.byte	15
	.word	3546
	.byte	7
	.word	6266
	.byte	15
	.word	4116
	.byte	7
	.word	6276
	.byte	7
	.word	3198
	.byte	23
	.byte	'Os_AnyCoreType_s',0,7,151,7,16,96,10
	.byte	'DisableAllImask',0
	.word	158
	.byte	4,2,35,0,10
	.byte	'SuspendAllImask',0
	.word	158
	.byte	4,2,35,4,10
	.byte	'SuspendOSImask',0
	.word	158
	.byte	4,2,35,8,10
	.byte	'DisableAllCount',0
	.word	158
	.byte	4,2,35,12,10
	.byte	'SuspendAllCount',0
	.word	158
	.byte	4,2,35,16,10
	.byte	'SuspendOSCount',0
	.word	158
	.byte	4,2,35,20,10
	.byte	'RestartJumpBuf',0
	.word	2424
	.byte	68,2,35,24,10
	.byte	'Restartable',0
	.word	277
	.byte	1,2,35,92,0,21
	.byte	'Os_AnyCoreType',0,7,160,7,3
	.word	6291
	.byte	21
	.byte	'unsigned_int',0,8,116,22
	.word	158
	.byte	13,9,31,9,4,14
	.byte	'MEMIF_JOB_OK',0,0,14
	.byte	'MEMIF_JOB_FAILED',0,1,14
	.byte	'MEMIF_JOB_PENDING',0,2,14
	.byte	'MEMIF_JOB_CANCELED',0,3,14
	.byte	'MEMIF_BLOCK_INCONSISTENT',0,4,14
	.byte	'MEMIF_BLOCK_INVALID',0,5,0,21
	.byte	'MemIf_JobResultType',0,9,39,2
	.word	6553
	.byte	13,9,41,9,4,14
	.byte	'MEMIF_MODE_SLOW',0,0,14
	.byte	'MEMIF_MODE_FAST',0,1,0,21
	.byte	'MemIf_ModeType',0,9,45,2
	.word	6711
	.byte	21
	.byte	'PduIdType',0,10,22,19
	.word	580
	.byte	21
	.byte	'PduLengthType',0,10,26,19
	.word	580
	.byte	13,11,113,9,4,14
	.byte	'TP_DATACONF',0,0,14
	.byte	'TP_DATARETRY',0,1,14
	.byte	'TP_CONFPENDING',0,2,0,21
	.byte	'TpDataStateType',0,11,118,3
	.word	6816
	.byte	21
	.byte	'Can_IdType',0,12,32,16
	.word	158
	.byte	21
	.byte	'Can_HwHandleType',0,12,43,16
	.word	580
	.byte	21
	.byte	'Can_TxObjPriorityClassType',0,13,219,3,16
	.word	158
	.byte	23
	.byte	'Can_TxHwObjectConfigType',0,13,231,3,16,8,10
	.byte	'MsgObjId',0
	.word	277
	.byte	1,2,35,0,10
	.byte	'HwControllerId',0
	.word	277
	.byte	1,2,35,1,10
	.byte	'TxObjPriorityClass',0
	.word	158
	.byte	4,2,35,4,0,21
	.byte	'Can_TxHwObjectConfigType',0,13,252,3,3
	.word	6972
	.byte	23
	.byte	'Can_RxHwObjectConfigType',0,13,129,4,16,12,10
	.byte	'MaskRef',0
	.word	158
	.byte	4,2,35,0,10
	.byte	'MsgId',0
	.word	158
	.byte	4,2,35,4,10
	.byte	'MsgObjId',0
	.word	277
	.byte	1,2,35,8,10
	.byte	'HwControllerId',0
	.word	277
	.byte	1,2,35,9,0,21
	.byte	'Can_RxHwObjectConfigType',0,13,147,4,3
	.word	7108
	.byte	11,4
	.word	277
	.byte	12,3,0,23
	.byte	'Can_ControllerMOMapConfigType',0,13,181,4,16,4,10
	.byte	'ControllerMOMap',0
	.word	7248
	.byte	4,2,35,0,0,21
	.byte	'Can_ControllerMOMapConfigType',0,13,184,4,3
	.word	7257
	.byte	23
	.byte	'Can_NPCRValueType',0,13,188,4,16,2,10
	.byte	'Can_NPCRValue',0
	.word	580
	.byte	2,2,35,0,0,21
	.byte	'Can_NPCRValueType',0,13,191,4,3
	.word	7358
	.byte	23
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,13,194,4,16,8,10
	.byte	'CanControllerBaudrate',0
	.word	158
	.byte	4,2,35,0,10
	.byte	'CanControllerBaudrateCfg',0
	.word	580
	.byte	2,2,35,4,0,21
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,13,198,4,3
	.word	7433
	.byte	15
	.word	7433
	.byte	7
	.word	7598
	.byte	23
	.byte	'Can_BaudrateConfigPtrType',0,13,201,4,16,4,10
	.byte	'Can_kBaudrateConfigPtr',0
	.word	7603
	.byte	4,2,35,0,0,21
	.byte	'Can_BaudrateConfigPtrType',0,13,204,4,3
	.word	7608
	.byte	23
	.byte	'Can_EventHandlingType',0,13,226,4,16,4,10
	.byte	'CanEventType',0
	.word	7248
	.byte	4,2,35,0,0,21
	.byte	'Can_EventHandlingType',0,13,229,4,3
	.word	7708
	.byte	21
	.byte	'Rte_TransformerErrorCode',0,14,130,1,15
	.word	277
	.byte	21
	.byte	'Rte_TransformerClass',0,14,131,1,15
	.word	277
	.byte	9,14,168,1,9,12,10
	.byte	'in',0
	.word	3144
	.byte	4,2,35,0,10
	.byte	'out',0
	.word	3144
	.byte	4,2,35,4,10
	.byte	'used',0
	.word	580
	.byte	2,2,35,8,10
	.byte	'lost_data',0
	.word	277
	.byte	1,2,35,10,0,21
	.byte	'Rte_QDynType',0,14,173,1,3
	.word	7854
	.byte	13,14,175,1,9,4,14
	.byte	'RTE_DRA',0,0,14
	.byte	'RTE_WOWP',0,1,14
	.byte	'RTE_TASK',0,2,14
	.byte	'RTE_ARE',0,3,14
	.byte	'RTE_EV',0,4,14
	.byte	'RTE_MSI',0,5,0,21
	.byte	'Rte_NotificationType',0,14,182,1,3
	.word	7941
	.byte	11,128,8
	.word	277
	.byte	12,255,7,0,21
	.byte	'Impl_NVM_DstPtrType_1024',0,15,50,15
	.word	8039
	.byte	21
	.byte	'CanIf_u32_impl',0,15,69,16
	.word	158
	.byte	21
	.byte	'CanIf_u16_impl',0,15,71,16
	.word	580
	.byte	21
	.byte	'CanIf_u8_impl',0,15,73,15
	.word	277
	.byte	21
	.byte	'CanIf_ControllerModeType_Enum_impl',0,15,88,15
	.word	277
	.byte	21
	.byte	'CanIf_PduModeType_Enum_impl',0,15,90,15
	.word	277
	.byte	9,15,92,9,2,10
	.byte	'DeviceMode',0
	.word	277
	.byte	1,2,35,0,10
	.byte	'ChannelMode',0
	.word	277
	.byte	1,2,35,1,0,21
	.byte	'CanIf_ControllerStateType_struct_impl',0,15,95,3
	.word	8230
	.byte	21
	.byte	'CanIf_NotifStatusType_Enum_impl',0,15,100,15
	.word	277
	.byte	21
	.byte	'CanSM_boolean_Impl',0,15,120,15
	.word	277
	.byte	21
	.byte	'CanSM_u8_Impl',0,15,123,15
	.word	277
	.byte	21
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,15,128,1,15
	.word	277
	.byte	21
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,15,132,1,15
	.word	277
	.byte	21
	.byte	'CanSM_u16_Impl',0,15,136,1,16
	.word	580
	.byte	21
	.byte	'CanSM_TimerStateType_Enum_impl',0,15,138,1,15
	.word	277
	.byte	9,15,140,1,9,4,10
	.byte	'cntTick_u16',0
	.word	580
	.byte	2,2,35,0,10
	.byte	'stTimer',0
	.word	277
	.byte	1,2,35,2,0,21
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,15,143,1,3
	.word	8571
	.byte	21
	.byte	'Com_impl_u16',0,15,154,1,16
	.word	580
	.byte	21
	.byte	'Com_impl_u8',0,15,157,1,15
	.word	277
	.byte	21
	.byte	'ComM_uint32_Impl',0,15,173,1,16
	.word	158
	.byte	21
	.byte	'ComM_uint16_Impl',0,15,175,1,16
	.word	580
	.byte	21
	.byte	'ComM_uint8_Impl',0,15,177,1,15
	.word	277
	.byte	21
	.byte	'ComM_bool_Impl',0,15,179,1,15
	.word	277
	.byte	9,15,181,1,9,24,10
	.byte	'ChannelState_e',0
	.word	158
	.byte	4,2,35,0,10
	.byte	'LightTimeoutCtr_u32',0
	.word	158
	.byte	4,2,35,4,10
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	580
	.byte	2,2,35,8,10
	.byte	'ChannelMode_u8',0
	.word	277
	.byte	1,2,35,10,10
	.byte	'BusSmMode_u8',0
	.word	277
	.byte	1,2,35,11,10
	.byte	'UserRequestCtr_u8',0
	.word	277
	.byte	1,2,35,12,10
	.byte	'PassiveRequestState_u8',0
	.word	277
	.byte	1,2,35,13,10
	.byte	'PncRequestCtr_u8',0
	.word	277
	.byte	1,2,35,14,10
	.byte	'InhibitionReqStatus_u8',0
	.word	277
	.byte	1,2,35,15,10
	.byte	'NmNetworkRequestStatus_b',0
	.word	277
	.byte	1,2,35,16,10
	.byte	'DiagnosticRequestState_b',0
	.word	277
	.byte	1,2,35,17,10
	.byte	'CommunicationAllowed_b',0
	.word	277
	.byte	1,2,35,18,10
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	277
	.byte	1,2,35,19,10
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	277
	.byte	1,2,35,20,10
	.byte	'NmNetworkModeStatus_b',0
	.word	277
	.byte	1,2,35,21,0,21
	.byte	'ComM_ChannelStruct_Impl',0,15,197,1,3
	.word	8803
	.byte	9,15,206,1,9,10,10
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	580
	.byte	2,2,35,0,10
	.byte	'LimitToNoComCtr_u16',0
	.word	580
	.byte	2,2,35,2,10
	.byte	'RequestedUserMode_t',0
	.word	277
	.byte	1,2,35,4,10
	.byte	'IndicatedUserMode_t',0
	.word	277
	.byte	1,2,35,5,10
	.byte	'numChannelsInFullCom_u8',0
	.word	277
	.byte	1,2,35,6,10
	.byte	'numChannelsInSilentCom_u8',0
	.word	277
	.byte	1,2,35,7,10
	.byte	'numChannelsInNoCom_u8',0
	.word	277
	.byte	1,2,35,8,0,21
	.byte	'ComM_UserStruct_Impl',0,15,214,1,3
	.word	9307
	.byte	21
	.byte	'Dcm_IOOperationResponseType',0,15,252,1,15
	.word	277
	.byte	21
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	15,138,2,15
	.word	277
	.byte	21
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,15,146,2,15
	.word	277
	.byte	21
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,15,150,2,15
	.word	277
	.byte	21
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,15,154,2,15
	.word	277
	.byte	21
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,15,243,3,34
	.word	8050
	.byte	11,128,8
	.word	277
	.byte	12,255,7,0,21
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,15,246,3,34
	.word	8050
	.byte	21
	.byte	'Fls_AddressType',0,2,171,3,16
	.word	158
	.byte	21
	.byte	'Fls_LengthType',0,2,173,3,16
	.word	158
	.byte	23
	.byte	'Fls_JobStartType',0,2,175,3,16,1,31
	.byte	'Reserved1',0,1
	.word	277
	.byte	1,7,2,35,0,31
	.byte	'Write',0,1
	.word	277
	.byte	1,6,2,35,0,31
	.byte	'Erase',0,1
	.word	277
	.byte	1,5,2,35,0,31
	.byte	'Read',0,1
	.word	277
	.byte	1,4,2,35,0,31
	.byte	'Compare',0,1
	.word	277
	.byte	1,3,2,35,0,31
	.byte	'Reserved2',0,1
	.word	277
	.byte	3,0,2,35,0,0,21
	.byte	'Fls_JobStartType',0,2,183,3,3
	.word	10174
	.byte	21
	.byte	'Fls_17_Pmu_Job_Type',0,2,187,3,15
	.word	277
	.byte	11,2
	.word	277
	.byte	12,1,0,23
	.byte	'Fls_17_Pmu_StateType',0,2,198,3,16,48,10
	.byte	'FlsReadAddress',0
	.word	158
	.byte	4,2,35,0,10
	.byte	'FlsWriteAddress',0
	.word	158
	.byte	4,2,35,4,10
	.byte	'FlsEraseTimeoutCycleCount',0
	.word	158
	.byte	4,2,35,8,10
	.byte	'FlsWriteTimeoutCycleCount',0
	.word	158
	.byte	4,2,35,12,10
	.byte	'FlsReadLength',0
	.word	158
	.byte	4,2,35,16,10
	.byte	'FlsWriteLength',0
	.word	158
	.byte	4,2,35,20,10
	.byte	'FlsReadBufferPtr',0
	.word	294
	.byte	4,2,35,24,10
	.byte	'FlsWriteBufferPtr',0
	.word	1511
	.byte	4,2,35,28,10
	.byte	'FlsJobResult',0
	.word	6553
	.byte	4,2,35,32,10
	.byte	'FlsMode',0
	.word	6711
	.byte	4,2,35,36,10
	.byte	'NotifCaller',0
	.word	277
	.byte	1,2,35,40,10
	.byte	'JobStarted',0
	.word	10174
	.byte	1,2,35,41,10
	.byte	'FlsJobType',0
	.word	10364
	.byte	2,2,35,42,10
	.byte	'FlsOper',0
	.word	277
	.byte	1,2,35,44,10
	.byte	'FlsTimeoutErr',0
	.word	277
	.byte	1,2,35,45,10
	.byte	'FlsTimeoutControl',0
	.word	277
	.byte	1,2,35,46,0,21
	.byte	'Fls_17_Pmu_StateType',0,2,130,4,3
	.word	10373
	.byte	21
	.byte	'Fls_NotifFunctionPtrType',0,2,137,4,16
	.word	2563
	.byte	15
	.word	158
	.byte	7
	.word	10851
	.byte	25,1,1,26
	.word	158
	.byte	26
	.word	158
	.byte	26
	.word	10856
	.byte	26
	.word	277
	.byte	0,7
	.word	10861
	.byte	21
	.byte	'Fls_WriteCmdPtrType',0,2,139,4,16
	.word	10885
	.byte	25,1,1,26
	.word	158
	.byte	0,7
	.word	10919
	.byte	21
	.byte	'Fls_EraseCmdPtrType',0,2,144,4,16
	.word	10928
	.byte	13,16,115,9,4,14
	.byte	'FEE_POLLING_MODE_E',0,0,14
	.byte	'FEE_NORMAL_MODE_E',0,1,0,21
	.byte	'Fee_stMainType',0,16,119,2
	.word	10962
	.byte	13,16,122,9,4,14
	.byte	'FEE_NO_ORDER',0,0,14
	.byte	'FEE_READ_ORDER',0,1,14
	.byte	'FEE_WRITE_ORDER',0,2,14
	.byte	'FEE_INVALIDATE_ORDER',0,3,14
	.byte	'FEE_MAINTAIN_ORDER',0,4,14
	.byte	'FEE_FORCED_READ_ORDER',0,5,0,21
	.byte	'Fee_HlMode_ten',0,16,132,1,2
	.word	11032
	.byte	32
	.byte	'Fee_stMain',0,16,203,1,39
	.word	10962
	.byte	1,1,32
	.byte	'Fee_SecChngCnt_u32',0,16,209,1,31
	.word	158
	.byte	1,1,13,1,147,1,9,4,14
	.byte	'FEE_NORMAL_PRIO_E',0,0,14
	.byte	'FEE_HIGH_PRIO_E',0,1,0,21
	.byte	'Fee_HlPriority_ten',0,1,151,1,2
	.word	11232
	.byte	21
	.byte	'Fee_MarkerProp_t',0,1,231,1,2
	.word	611
	.byte	21
	.byte	'Fee_stSecDet_tst',0,1,243,1,2
	.word	394
	.byte	21
	.byte	'Fee_SectorState_ten',0,1,254,1,2
	.word	706
	.byte	21
	.byte	'Fee_LLSectorOrder_tst',0,1,134,2,2
	.word	857
	.byte	21
	.byte	'Fee_stRetVal_ten',0,1,149,2,2
	.word	941
	.byte	9,1,153,2,9,16,10
	.byte	'Fee_PhysStartAddress_u32',0
	.word	158
	.byte	4,2,35,0,10
	.byte	'Fee_PhysEndAddress_u32',0
	.word	158
	.byte	4,2,35,4,10
	.byte	'Fee_LogStartAddress_u32',0
	.word	158
	.byte	4,2,35,8,10
	.byte	'Fee_LogEndAddress_u32',0
	.word	158
	.byte	4,2,35,12,0,21
	.byte	'Fee_FlashProp_tst',0,1,159,2,2
	.word	11443
	.byte	13,1,210,2,9,4,14
	.byte	'FEE_LL_MARKER_INIT_E',0,0,14
	.byte	'FEE_LL_MARKER_BLK_CHK_E',0,1,14
	.byte	'FEE_LL_MARKER_BLK_CHK_WAIT_E',0,2,14
	.byte	'FEE_LL_MARKER_BLK_CHK_ERROR_E',0,3,14
	.byte	'FEE_LL_MARKER_BLK_CHK_FINISHED_E',0,4,14
	.byte	'FEE_LL_MARKER_WRITE_WAIT_E',0,5,14
	.byte	'FEE_LL_MARKER_WRITE_ERROR_E',0,6,14
	.byte	'FEE_LL_MARKER_VERIFY_E',0,7,14
	.byte	'FEE_LL_MARKER_VERIFY_WAIT_E',0,8,14
	.byte	'FEE_LL_MARKER_VERIFY_FINISHED_E',0,9,0,21
	.byte	'Fee_LLWrMarkerType_ten',0,1,222,2,2
	.word	11607
	.byte	13,1,225,2,9,4,14
	.byte	'FEE_HL_RDWR_BLK_INIT_E',0,0,14
	.byte	'FEE_HL_SEARCH_BLK_HDR_E',0,1,14
	.byte	'FEE_HL_READ_BLK_HDR_WAIT_E',0,2,14
	.byte	'FEE_HL_CHECK_BLK_HDR_E',0,3,14
	.byte	'FEE_HL_CALC_BLK_CS_E',0,4,14
	.byte	'FEE_HL_CHECK_BLK_CS_E',0,5,14
	.byte	'FEE_HL_RD_DATA_FROM_BLK_E',0,6,14
	.byte	'FEE_HL_COMP_BLK_E',0,7,14
	.byte	'FEE_HL_WR_BLK_E',0,8,0,21
	.byte	'Fee_HLRdWrBlockType_ten',0,1,243,2,2
	.word	11941
	.byte	13,1,246,2,9,4,14
	.byte	'FEE_LL_WR_BLK_INIT_E',0,0,14
	.byte	'FEE_LL_WR_WRITEHEADER_E',0,1,14
	.byte	'FEE_LL_WR_SIZECHECK_HSR_E',0,2,14
	.byte	'FEE_LL_WR_WRITEHEADER_WAIT_E',0,3,14
	.byte	'FEE_LL_WR_VERIFYHEADER_E',0,4,14
	.byte	'FEE_LL_WR_VERIFYHEADER_WAIT_E',0,5,14
	.byte	'FEE_LL_WR_VERIFYHEADER_ERROR_E',0,6,14
	.byte	'FEE_LL_WR_WRITEDATA_SEC_A_E',0,7,14
	.byte	'FEE_LL_WR_WAIT_WRITEDATA_SEC_A_E',0,8,14
	.byte	'FEE_LL_WR_WRITE_ERROR_E',0,9,14
	.byte	'FEE_LL_WR_WRITE_FULL_MARKER_E',0,10,14
	.byte	'FEE_LL_WR_ERASE_SECTOR_E',0,11,14
	.byte	'FEE_LL_WR_WRITE_USED_MARKER_E',0,12,14
	.byte	'FEE_LL_WR_WRITE_START_MARKER_E',0,13,14
	.byte	'FEE_LL_WR_VERIFY_BLK_E',0,14,14
	.byte	'FEE_LL_WR_WRITEHDRPG2_E',0,15,14
	.byte	'FEE_LL_WR_WAIT_WRITEHDRPG2_E',0,16,0,21
	.byte	'Fee_LLWrBlockType_ten',0,1,162,3,2
	.word	12199
	.byte	13,1,165,3,9,4,14
	.byte	'FEE_LL_CMP_BLK_INIT_E',0,0,14
	.byte	'FEE_LL_CMP_HEADER_E',0,1,14
	.byte	'FEE_LL_CMP_WAIT_HEADER_E',0,2,14
	.byte	'FEE_LL_CMP_CHECK_OVERLAP_E',0,3,14
	.byte	'FEE_LL_CMP_DATA_SEC_A_E',0,4,14
	.byte	'FEE_LL_CMP_WAIT_DATA_SEC_A_E',0,5,14
	.byte	'FEE_LL_CMP_FINISHED_E',0,6,0,21
	.byte	'Fee_LLCmpBlkType_ten',0,1,174,3,2
	.word	12734
	.byte	13,1,177,3,9,4,14
	.byte	'FEE_LL_CPY_BLK_INIT_E',0,0,14
	.byte	'FEE_LL_CPY_BLOCK_START_E',0,1,14
	.byte	'FEE_LL_CPY_BLOCK_WAIT_E',0,2,14
	.byte	'FEE_LL_CPY_BLOCK_ERROR_E',0,3,14
	.byte	'FEE_LL_CPY_BLOCK_FINISHED_E',0,4,0,21
	.byte	'Fee_LLCpyBlkType_ten',0,1,184,3,2
	.word	12954
	.byte	13,1,187,3,9,4,14
	.byte	'FEE_LL_CRC_BLK_INIT_E',0,0,14
	.byte	'FEE_LL_CRC_RD_HD_PAGE_E',0,1,14
	.byte	'FEE_LL_CRC_RD_PAGE_E',0,2,14
	.byte	'FEE_LL_CRC_CHECK_OVERLAP_E',0,3,14
	.byte	'FEE_LL_CRC_RD_ROB_PAGE_E',0,4,14
	.byte	'FEE_LL_CRC_CHECK_OVERLAP_ROB_E',0,5,14
	.byte	'FEE_LL_CRC_RD_ROB_PAGE_WAIT_E',0,6,14
	.byte	'FEE_LL_CRC_RD_PAGE_WAIT_E',0,7,14
	.byte	'FEE_LL_CRC_RD_ERROR_E',0,8,0,21
	.byte	'Fee_LLCalcCrcBlkType_ten',0,1,200,3,2
	.word	13125
	.byte	13,1,203,3,9,4,14
	.byte	'FEE_LL_INIT_READ_E',0,0,14
	.byte	'FEE_LL_BLANK_CHECK_E',0,1,14
	.byte	'FEE_LL_BLANK_CHECK_WAIT_E',0,2,14
	.byte	'FEE_LL_READ_PAGE_E',0,3,14
	.byte	'FEE_LL_WAIT_READ_PAGE_E',0,4,14
	.byte	'FEE_LL_READ_ERROR_E',0,5,14
	.byte	'FEE_LL_READ_FINISHED_E',0,6,0,21
	.byte	'Fee_LLRdStateType_ten',0,1,223,3,3
	.word	13412
	.byte	13,1,226,3,9,4,14
	.byte	'FEE_LL_INIT_BLANK_CHECK_E',0,0,14
	.byte	'FEE_LL_PERFORM_BLANK_CHECK_E',0,1,14
	.byte	'FEE_LL_WAIT_PERFORM_BLANK_CHECK_E',0,2,14
	.byte	'FEE_LL_BLANK_CHECK_ERROR_E',0,3,14
	.byte	'FEE_LL_BLANK_CHECK_FINISHED_E',0,4,0,21
	.byte	'Fee_LLBlankCheckType_ten',0,1,233,3,3
	.word	13616
	.byte	13,1,236,3,9,4,14
	.byte	'FEE_LL_FIND_CURRENT_SECTOR_E',0,0,14
	.byte	'FEE_LL_FIND_LAST_HEADER_E',0,1,14
	.byte	'FEE_LL_FINISHED_E',0,2,0,21
	.byte	'Fee_LLFndEmptyPgeType_ten',0,1,249,3,2
	.word	13813
	.byte	13,1,252,3,9,4,14
	.byte	'FEE_LL_SEARCHBLK_INIT_E',0,0,14
	.byte	'FEE_LL_SEARCHBLK_BLK_HEADER_E',0,1,0,21
	.byte	'Fee_LLSearchBlkHdrType_ten',0,1,128,4,2
	.word	13934
	.byte	13,1,132,4,9,4,14
	.byte	'FEE_LL_BLD_UP_CACHE_INIT_E',0,0,14
	.byte	'FEE_LL_BLD_UP_CACHE_READ_E',0,1,0,21
	.byte	'Fee_LLBuildUpCache_ten',0,1,136,4,2
	.word	14035
	.byte	13,1,139,4,9,4,14
	.byte	'FEE_LL_BLD_UP_CACHE_ALL_SECT_INIT_E',0,0,14
	.byte	'FEE_LL_BLD_UP_CACHE_ALL_SECT_DO_E',0,1,0,21
	.byte	'Fee_LLBuildUpCacheAllSect_ten',0,1,143,4,2
	.word	14132
	.byte	13,1,168,4,9,4,14
	.byte	'FEE_LL_REORG_INIT_E',0,0,14
	.byte	'FEE_LL_REORG_PREP_SEARCH_BLK_E',0,1,14
	.byte	'FEE_LL_REORG_SEARCH_BLK_E',0,2,14
	.byte	'FEE_LL_REORG_CHECK_BLOCK_CS_E',0,3,14
	.byte	'FEE_LL_REORG_REDUNDANT_BLK_CHK_E',0,4,14
	.byte	'FEE_LL_REORG_WRITE_BLOCK_E',0,5,14
	.byte	'FEE_LL_REORG_FINISHED_E',0,6,0,21
	.byte	'Fee_LLSecReorgType_ten',0,1,193,4,2
	.word	14252
	.byte	13,1,196,4,9,4,14
	.byte	'FEE_LL_REDUNDANT_CPY_CHK_INIT_E',0,0,14
	.byte	'FEE_LL_REDUNDANT_CPY_CHK_SEARCH_HDR_E',0,1,14
	.byte	'FEE_LL_REDUNDANT_CPY_CHK_BLK_CS_E',0,2,0,21
	.byte	'Fee_LLRedundantCpyChk_ten',0,1,201,4,2
	.word	14496
	.byte	13,1,204,4,9,4,14
	.byte	'FEE_LL_CPY_FLS2FLS_INIT_E',0,0,14
	.byte	'FEE_LL_CPY_FLS2FLS_READ_E',0,1,14
	.byte	'FEE_LL_CPY_FLS2FLS_WAIT_READ_E',0,2,14
	.byte	'FEE_LL_CPY_FLS2FLS_READ_ERROR_E',0,3,14
	.byte	'FEE_LL_CPY_FLS2FLS_HDRPG1_WRITE_E',0,4,14
	.byte	'FEE_LL_CPY_FLS2FLS_WAIT_HDRPG1_WRITE_E',0,5,14
	.byte	'FEE_LL_CPY_FLS2FLS_HDRPG1_WRITE_ERROR_E',0,6,14
	.byte	'FEE_LL_CPY_FLS2FLS_HDRPG1_VERIFY_E',0,7,14
	.byte	'FEE_LL_CPY_FLS2FLS_WAIT_HDRPG1_VERIFY_E',0,8,14
	.byte	'FEE_LL_CPY_FLS2FLS_HDRPG1_VERIFY_ERROR_E',0,9,14
	.byte	'FEE_LL_CPY_FLS2FLS_WRITE_E',0,10,14
	.byte	'FEE_LL_CPY_FLS2FLS_WAIT_WRITE_E',0,11,14
	.byte	'FEE_LL_CPY_FLS2FLS_WRITE_ERROR_E',0,12,14
	.byte	'FEE_LL_CPY_FLS2FLS_VERIFY_E',0,13,14
	.byte	'FEE_LL_CPY_FLS2FLS_WAIT_VERIFY_E',0,14,14
	.byte	'FEE_LL_CPY_FLS2FLS_VERIFY_ERROR_E',0,15,14
	.byte	'FEE_LL_CPY_FLS2FLS_HDRPG2_WRITE_E',0,16,14
	.byte	'FEE_LL_CPY_FLS2FLS_WAIT_HDRPG2_WRITE_E',0,17,14
	.byte	'FEE_LL_CPY_FLS2FLS_HDRPG2_WRITE_ERROR_E',0,18,14
	.byte	'FEE_LL_CPY_FLS2FLS_HDRPG2_VERIFY_E',0,19,14
	.byte	'FEE_LL_CPY_FLS2FLS_WAIT_HDRPG2_VERIFY_E',0,20,14
	.byte	'FEE_LL_CPY_FLS2FLS_HDRPG2_VERIFY_ERROR_E',0,21,14
	.byte	'FEE_LL_CPY_FLS2FLS_CHECK_ADR_OVERFLOW_E',0,22,14
	.byte	'FEE_LL_CPY_FLS2FLS_WRITE_FULL_MARKER_E',0,23,14
	.byte	'FEE_LL_CPY_FLS2FLS_ERASE_SECTOR_E',0,24,14
	.byte	'FEE_LL_CPY_FLS2FLS_WRITE_USED_MARKER_E',0,25,14
	.byte	'FEE_LL_CPY_FLS2FLS_WRITE_START_MARKER_E',0,26,0,21
	.byte	'Fee_LLCpyBlkFls2Fls_ten',0,1,133,5,2
	.word	14648
	.byte	9,1,163,5,9,116,10
	.byte	'xRdAddress',0
	.word	158
	.byte	4,2,35,0,10
	.byte	'xWrAddress',0
	.word	158
	.byte	4,2,35,4,10
	.byte	'xCmpAddress',0
	.word	158
	.byte	4,2,35,8,10
	.byte	'xCrcAddress',0
	.word	158
	.byte	4,2,35,12,10
	.byte	'xCpyAddress',0
	.word	158
	.byte	4,2,35,16,10
	.byte	'AdrHdSearchStart_u32',0
	.word	158
	.byte	4,2,35,20,10
	.byte	'xStartAddrNextSector_u32',0
	.word	158
	.byte	4,2,35,24,10
	.byte	'xHdPg2Address',0
	.word	158
	.byte	4,2,35,28,10
	.byte	'LastProgrammedAddress_u32',0
	.word	158
	.byte	4,2,35,32,10
	.byte	'LastValidHdrAddress_u32',0
	.word	158
	.byte	4,2,35,36,10
	.byte	'Fee_LLSecReorg_en',0
	.word	14252
	.byte	4,2,35,40,10
	.byte	'Fee_LLRedundantCpyChk_en',0
	.word	14496
	.byte	4,2,35,44,10
	.byte	'Fee_LLCpyBlkFls2Fls_en',0
	.word	14648
	.byte	4,2,35,48,10
	.byte	'Fee_HLWrBlock_en',0
	.word	11941
	.byte	4,2,35,52,10
	.byte	'Fee_HLMtBlock_en',0
	.word	11941
	.byte	4,2,35,56,10
	.byte	'Fee_LLWrBlock_en',0
	.word	12199
	.byte	4,2,35,60,10
	.byte	'Fee_HLRdBlock',0
	.word	11941
	.byte	4,2,35,64,10
	.byte	'Fee_LLNextUsedWrBlock_en',0
	.word	12199
	.byte	4,2,35,68,10
	.byte	'Fee_LLNextEraseWrBlock_en',0
	.word	12199
	.byte	4,2,35,72,10
	.byte	'Fee_LLCompBlk',0
	.word	12734
	.byte	4,2,35,76,10
	.byte	'Fee_LLCopyBlk_en',0
	.word	12954
	.byte	4,2,35,80,10
	.byte	'Fee_LLCalcCrcBlk_en',0
	.word	13125
	.byte	4,2,35,84,10
	.byte	'Fee_LLWrMarker_en',0
	.word	11607
	.byte	4,2,35,88,10
	.byte	'Fee_LLRdState_en',0
	.word	13412
	.byte	4,2,35,92,10
	.byte	'Fee_LLBlankCheckState_en',0
	.word	13616
	.byte	4,2,35,96,10
	.byte	'Fee_LLFindEmptyPageState_en',0
	.word	13813
	.byte	4,2,35,100,10
	.byte	'Fee_LLSearchBlkHdr_en',0
	.word	13934
	.byte	4,2,35,104,10
	.byte	'Fee_LLBuildUpCache_en',0
	.word	14035
	.byte	4,2,35,108,10
	.byte	'Fee_LLBuildUpCacheAllSect_en',0
	.word	14132
	.byte	4,2,35,112,0,21
	.byte	'Fee_RdWrOrder_tst',0,1,224,5,3
	.word	15694
	.byte	21
	.byte	'Fee_GlobInfoLastRdHeader_tst',0,1,235,5,2
	.word	1153
	.byte	13,1,133,6,9,4,14
	.byte	'FEE_ERASESEC_IDLE_E',0,0,14
	.byte	'FEE_ERASESEC_CHECK_CACHE_E',0,1,14
	.byte	'FEE_ERASESEC_START_E',0,2,14
	.byte	'FEE_ERASESEC_DO_E',0,3,14
	.byte	'FEE_ERASESEC_WRITE_MARKER_E',0,4,14
	.byte	'FEE_ERASESEC_ERROR_E',0,5,0,21
	.byte	'Fee_LLEraseStateType_ten',0,1,141,6,2
	.word	16589
	.byte	9,1,151,6,9,16,10
	.byte	'Preamble_au8',0
	.word	602
	.byte	3,2,35,0,10
	.byte	'BlkStatus_u8',0
	.word	277
	.byte	1,2,35,3,10
	.byte	'FeeIndex_u16',0
	.word	580
	.byte	2,2,35,4,10
	.byte	'BlkLength_u16',0
	.word	580
	.byte	2,2,35,6,10
	.byte	'HdrCrc16_u16',0
	.word	580
	.byte	2,2,35,8,10
	.byte	'BlkCrc32_u32',0
	.word	158
	.byte	4,2,35,12,0,21
	.byte	'Fee_BlkHeader_tst',0,1,159,6,2
	.word	16777
	.byte	11,32
	.word	11443
	.byte	12,1,0,15
	.word	16944
	.byte	32
	.byte	'Fee_FlashProp_st',0,1,135,7,53
	.word	16953
	.byte	1,1,32
	.byte	'Fee_RdWrOrder_st',0,1,144,7,53
	.word	15694
	.byte	1,1,32
	.byte	'Fee_LLSectorOrder_st',0,1,145,7,53
	.word	932
	.byte	1,1,15
	.word	294
	.byte	32
	.byte	'Fee_MarkerBufBytePtr_cpu8',0,1,157,7,53
	.word	17046
	.byte	1,1,32
	.byte	'Fee_NumFlashBanksUsed_u8',0,1,166,7,53
	.word	277
	.byte	1,1,32
	.byte	'Fee_idxLLSectorOrder_au8',0,1,192,7,53
	.word	10364
	.byte	1,1,32
	.byte	'Fee_RdWrRetries_u8',0,1,195,7,53
	.word	277
	.byte	1,1
.L286:
	.byte	11,4
	.word	580
	.byte	12,1,0,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L193:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,46,1,3,8,32,13,58,15,59,15
	.byte	57,15,73,19,54,15,39,12,0,0,4,5,0,3,8,58,15,59,15,57,15,73,19,0,0,5,11,0,0,0,6,46,0,3,8,58,15,59,15,57
	.byte	15,54,15,39,12,63,12,60,12,0,0,7,15,0,73,19,0,0,8,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60
	.byte	12,0,0,9,19,1,58,15,59,15,57,15,11,15,0,0,10,13,0,3,8,73,19,11,15,56,9,0,0,11,1,1,11,15,73,19,0,0,12,33
	.byte	0,47,15,0,0,13,4,1,58,15,59,15,57,15,11,15,0,0,14,40,0,3,8,28,13,0,0,15,38,0,73,19,0,0,16,46,1,3,8,58
	.byte	15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,17,46,1,49,19,0,0,18,5,0,49,19,0,0,19,46,0,3,8,58,15,59,15
	.byte	57,15,73,19,54,15,63,12,60,12,0,0,20,21,0,54,15,0,0,21,22,0,3,8,58,15,59,15,57,15,73,19,0,0,22,21,0,54
	.byte	15,39,12,0,0,23,19,1,3,8,58,15,59,15,57,15,11,15,0,0,24,59,0,3,8,0,0,25,21,1,54,15,39,12,0,0,26,5,0,73
	.byte	19,0,0,27,23,1,58,15,59,15,57,15,11,15,0,0,28,4,1,3,8,58,15,59,15,57,15,11,15,0,0,29,21,0,73,19,54,15
	.byte	39,12,0,0,30,53,0,73,19,0,0,31,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,32,52,0,3,8,58,15,59,15,57,15
	.byte	73,19,63,12,60,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L194:
	.word	.L378-.L377
.L377:
	.half	3
	.word	.L380-.L379
.L379:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_Prv.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Fls\\inc\\Fls_17_Pmu.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Crc\\Crc_16.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlDetectSector.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Integration\\TargetIntegration\\TC275\\Include\\Mcal_TcLib.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\MemIf\\api\\MemIf_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Fee\\api\\Fee.h',0,0,0,0,0
.L380:
.L378:
	.sdecl	'.debug_info',debug,cluster('Fee_LLSearchSectors')
	.sect	'.debug_info'
.L195:
	.word	420
	.half	3
	.word	.L196
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlDetectSector.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L198,.L197
	.byte	2
	.word	.L191
	.byte	3
	.byte	'Fee_LLSearchSectors',0,1,191,2,22,1,1,1
	.word	.L180,.L232,.L179
	.byte	4
	.byte	'Fee_stSecDet_ps',0,1,191,2,92
	.word	.L233,.L234
	.byte	5
	.word	.L180,.L232
	.byte	6
	.byte	'xRdMarker',0,1,193,2,41
	.word	.L235,.L236
	.byte	6
	.byte	'xTmpMarkerContent_u32',0,1,194,2,41
	.word	.L237,.L238
	.byte	6
	.byte	'xCurrSect_u8',0,1,195,2,41
	.word	.L239,.L240
	.byte	6
	.byte	'xCalc_crc_u16',0,1,196,2,41
	.word	.L241,.L242
	.byte	6
	.byte	'xMarkerIdx_s8',0,1,197,2,42
	.word	.L243,.L244
	.byte	6
	.byte	'xAdrBlnkChk_u32',0,1,198,2,43
	.word	.L237,.L245
	.byte	7
	.word	.L246,.L57
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fee_LLSearchSectors')
	.sect	'.debug_abbrev'
.L196:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fee_LLSearchSectors')
	.sect	'.debug_line'
.L197:
	.word	.L382-.L381
.L381:
	.half	3
	.word	.L384-.L383
.L383:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlDetectSector.c',0,0,0,0,0
.L384:
	.byte	5,22,7,0,5,2
	.word	.L180
	.byte	3,190,2,1,5,54,9
	.half	.L313-.L180
	.byte	3,4,1,5,56,9
	.half	.L314-.L313
	.byte	3,2,1,5,59,9
	.half	.L316-.L314
	.byte	3,1,1,5,5,9
	.half	.L318-.L316
	.byte	3,3,1,5,26,9
	.half	.L385-.L318
	.byte	1,5,24,9
	.half	.L386-.L385
	.byte	1,5,44,9
	.half	.L387-.L386
	.byte	3,3,1,5,16,9
	.half	.L46-.L387
	.byte	3,3,1,5,32,9
	.half	.L388-.L46
	.byte	1,5,18,9
	.half	.L389-.L388
	.byte	3,3,1,9
	.half	.L390-.L389
	.byte	3,34,1,9
	.half	.L391-.L390
	.byte	3,41,1,9
	.half	.L392-.L391
	.byte	3,21,1,9
	.half	.L393-.L392
	.byte	3,24,1,9
	.half	.L394-.L393
	.byte	3,145,1,1,9
	.half	.L395-.L394
	.byte	3,131,127,1,5,33,9
	.half	.L47-.L395
	.byte	3,247,126,1,5,32,9
	.half	.L319-.L47
	.byte	1,5,46,9
	.half	.L396-.L319
	.byte	1,5,70,9
	.half	.L397-.L396
	.byte	1,5,68,9
	.half	.L398-.L397
	.byte	1,5,46,9
	.half	.L399-.L398
	.byte	3,1,1,5,70,9
	.half	.L400-.L399
	.byte	1,5,68,9
	.half	.L401-.L400
	.byte	1,5,46,9
	.half	.L402-.L401
	.byte	3,1,1,5,70,9
	.half	.L403-.L402
	.byte	1,5,68,9
	.half	.L404-.L403
	.byte	1,5,46,9
	.half	.L405-.L404
	.byte	3,1,1,5,70,9
	.half	.L406-.L405
	.byte	1,5,68,9
	.half	.L407-.L406
	.byte	1,5,46,9
	.half	.L408-.L407
	.byte	3,1,1,5,70,9
	.half	.L409-.L408
	.byte	1,5,68,9
	.half	.L410-.L409
	.byte	1,5,70,9
	.half	.L411-.L410
	.byte	3,1,1,5,68,9
	.half	.L412-.L411
	.byte	1,5,46,9
	.half	.L413-.L412
	.byte	3,1,1,5,70,9
	.half	.L414-.L413
	.byte	1,5,68,9
	.half	.L415-.L414
	.byte	1,5,37,9
	.half	.L416-.L415
	.byte	3,2,1,5,17,9
	.half	.L417-.L416
	.byte	1,5,37,9
	.half	.L418-.L417
	.byte	1,5,69,9
	.half	.L419-.L418
	.byte	1,5,67,9
	.half	.L420-.L419
	.byte	1,5,69,9
	.half	.L421-.L420
	.byte	3,1,1,5,67,9
	.half	.L422-.L421
	.byte	1,5,69,9
	.half	.L423-.L422
	.byte	3,1,1,5,67,9
	.half	.L424-.L423
	.byte	1,5,41,9
	.half	.L425-.L424
	.byte	3,3,1,5,71,9
	.half	.L426-.L425
	.byte	1,5,98,9
	.half	.L427-.L426
	.byte	1,5,53,9
	.half	.L428-.L427
	.byte	3,3,1,5,51,9
	.half	.L429-.L428
	.byte	1,5,17,9
	.half	.L430-.L429
	.byte	3,3,1,5,41,9
	.half	.L431-.L430
	.byte	1,5,59,9
	.half	.L432-.L431
	.byte	1,5,57,9
	.half	.L433-.L432
	.byte	1,5,31,9
	.half	.L434-.L433
	.byte	3,3,1,5,35,9
	.half	.L435-.L434
	.byte	3,3,1,5,51,9
	.half	.L436-.L435
	.byte	1,5,65,9
	.half	.L437-.L436
	.byte	1,5,91,9
	.half	.L320-.L437
	.byte	1,5,30,9
	.half	.L48-.L320
	.byte	3,9,1,5,37,9
	.half	.L321-.L48
	.byte	3,3,1,5,17,9
	.half	.L438-.L321
	.byte	1,5,37,7,9
	.half	.L439-.L438
	.byte	3,3,1,5,24,9
	.half	.L246-.L439
	.byte	3,7,1,5,21,9
	.half	.L323-.L246
	.byte	1,5,61,7,9
	.half	.L440-.L323
	.byte	3,5,1,5,59,9
	.half	.L441-.L440
	.byte	1,5,86,9
	.half	.L442-.L441
	.byte	1,5,61,9
	.half	.L56-.L442
	.byte	3,6,1,5,59,9
	.half	.L443-.L56
	.byte	1,5,37,9
	.half	.L444-.L443
	.byte	3,1,1,5,21,9
	.half	.L57-.L444
	.byte	3,123,1,5,57,9
	.half	.L55-.L57
	.byte	3,11,1,5,55,9
	.half	.L445-.L55
	.byte	1,5,33,9
	.half	.L446-.L445
	.byte	3,1,1,5,13,9
	.half	.L58-.L446
	.byte	3,3,1,5,21,9
	.half	.L49-.L58
	.byte	3,9,1,5,17,9
	.half	.L447-.L49
	.byte	1,5,21,7,9
	.half	.L448-.L447
	.byte	3,3,1,5,38,9
	.half	.L60-.L448
	.byte	3,5,1,5,13,9
	.half	.L449-.L60
	.byte	3,3,1,5,20,9
	.half	.L50-.L449
	.byte	3,7,1,5,17,9
	.half	.L327-.L50
	.byte	1,5,57,7,9
	.half	.L450-.L327
	.byte	3,5,1,5,55,9
	.half	.L451-.L450
	.byte	1,5,80,9
	.half	.L452-.L451
	.byte	1,5,57,9
	.half	.L62-.L452
	.byte	3,6,1,5,55,9
	.half	.L453-.L62
	.byte	1,5,33,9
	.half	.L454-.L453
	.byte	3,1,1,5,42,9
	.half	.L328-.L454
	.byte	3,3,1,5,40,9
	.half	.L455-.L328
	.byte	1,5,13,9
	.half	.L63-.L455
	.byte	3,3,1,5,21,9
	.half	.L51-.L63
	.byte	3,9,1,5,17,9
	.half	.L456-.L51
	.byte	1,5,21,7,9
	.half	.L457-.L456
	.byte	3,3,1,5,38,9
	.half	.L65-.L457
	.byte	3,5,1,5,13,9
	.half	.L458-.L65
	.byte	3,3,1,5,44,9
	.half	.L53-.L458
	.byte	3,7,1,5,56,9
	.half	.L459-.L53
	.byte	1,5,81,9
	.half	.L460-.L459
	.byte	1,5,43,9
	.half	.L461-.L460
	.byte	3,3,1,5,30,9
	.half	.L462-.L461
	.byte	1,5,17,9
	.half	.L463-.L462
	.byte	1,5,71,7,9
	.half	.L464-.L463
	.byte	3,4,1,5,80,9
	.half	.L465-.L464
	.byte	3,1,1,5,57,9
	.half	.L466-.L465
	.byte	3,2,1,5,51,9
	.half	.L330-.L466
	.byte	3,3,1,5,21,9
	.half	.L467-.L330
	.byte	1,5,87,7,9
	.half	.L468-.L467
	.byte	3,3,1,5,93,9
	.half	.L469-.L468
	.byte	1,5,87,9
	.half	.L332-.L469
	.byte	3,1,1,5,93,9
	.half	.L470-.L332
	.byte	1,5,47,9
	.half	.L471-.L470
	.byte	1,5,77,9
	.half	.L472-.L471
	.byte	3,1,1,5,47,9
	.half	.L473-.L472
	.byte	1,5,42,9
	.half	.L474-.L473
	.byte	3,4,1,5,34,9
	.half	.L331-.L474
	.byte	3,2,1,9
	.half	.L475-.L331
	.byte	3,1,1,9
	.half	.L476-.L475
	.byte	3,1,1,9
	.half	.L477-.L476
	.byte	3,20,1,9
	.half	.L478-.L477
	.byte	3,118,1,9
	.half	.L479-.L478
	.byte	3,11,1,5,54,9
	.half	.L71-.L479
	.byte	3,109,1,5,53,9
	.half	.L480-.L71
	.byte	1,5,67,9
	.half	.L481-.L480
	.byte	1,5,37,9
	.half	.L482-.L481
	.byte	1,5,158,1,7,9
	.half	.L483-.L482
	.byte	1,5,82,7,9
	.half	.L76-.L483
	.byte	3,4,1,5,30,9
	.half	.L77-.L76
	.byte	3,2,1,5,49,9
	.half	.L73-.L77
	.byte	3,8,1,5,48,9
	.half	.L484-.L73
	.byte	1,5,62,9
	.half	.L485-.L484
	.byte	1,5,82,9
	.half	.L486-.L485
	.byte	1,5,98,9
	.half	.L487-.L486
	.byte	1,5,112,9
	.half	.L488-.L487
	.byte	1,5,137,1,9
	.half	.L489-.L488
	.byte	1,5,79,9
	.half	.L490-.L489
	.byte	1,5,62,9
	.half	.L491-.L490
	.byte	3,1,1,5,78,9
	.half	.L492-.L491
	.byte	1,5,30,9
	.half	.L493-.L492
	.byte	3,1,1,9
	.half	.L75-.L493
	.byte	3,7,1,5,34,9
	.half	.L78-.L75
	.byte	3,7,1,9
	.half	.L494-.L78
	.byte	3,12,1,9
	.half	.L495-.L494
	.byte	3,6,1,9
	.half	.L496-.L495
	.byte	3,6,1,9
	.half	.L497-.L496
	.byte	3,115,1,9
	.half	.L498-.L497
	.byte	3,19,1,5,49,9
	.half	.L81-.L498
	.byte	3,100,1,5,48,9
	.half	.L499-.L81
	.byte	1,5,62,9
	.half	.L500-.L499
	.byte	1,5,80,9
	.half	.L501-.L500
	.byte	1,5,33,9
	.half	.L502-.L501
	.byte	3,5,1,5,57,9
	.half	.L503-.L502
	.byte	1,5,75,9
	.half	.L504-.L503
	.byte	1,5,73,9
	.half	.L505-.L504
	.byte	1,5,29,9
	.half	.L506-.L505
	.byte	3,1,1,5,49,9
	.half	.L82-.L506
	.byte	3,6,1,5,48,9
	.half	.L507-.L82
	.byte	1,5,62,9
	.half	.L508-.L507
	.byte	1,5,78,9
	.half	.L509-.L508
	.byte	1,5,29,9
	.half	.L510-.L509
	.byte	3,1,1,5,49,9
	.half	.L83-.L510
	.byte	3,5,1,5,48,9
	.half	.L511-.L83
	.byte	1,5,62,9
	.half	.L512-.L511
	.byte	1,5,78,9
	.half	.L513-.L512
	.byte	1,5,29,9
	.half	.L514-.L513
	.byte	3,1,1,5,49,9
	.half	.L84-.L514
	.byte	3,5,1,5,48,9
	.half	.L515-.L84
	.byte	1,5,62,9
	.half	.L516-.L515
	.byte	1,5,76,9
	.half	.L517-.L516
	.byte	1,5,29,9
	.half	.L518-.L517
	.byte	3,1,1,5,49,9
	.half	.L86-.L518
	.byte	3,5,1,5,48,9
	.half	.L519-.L86
	.byte	1,5,62,9
	.half	.L520-.L519
	.byte	1,5,79,9
	.half	.L521-.L520
	.byte	1,5,29,9
	.half	.L522-.L521
	.byte	3,1,1,5,69,9
	.half	.L87-.L522
	.byte	3,6,1,5,67,9
	.half	.L523-.L87
	.byte	1,5,29,9
	.half	.L524-.L523
	.byte	3,1,1,5,21,9
	.half	.L88-.L524
	.byte	3,2,1,9
	.half	.L94-.L88
	.byte	3,1,1,5,53,9
	.half	.L95-.L94
	.byte	3,15,1,5,51,9
	.half	.L525-.L95
	.byte	1,5,13,9
	.half	.L526-.L525
	.byte	3,2,1,5,53,9
	.half	.L52-.L526
	.byte	3,6,1,5,51,9
	.half	.L527-.L52
	.byte	1,5,20,9
	.half	.L528-.L527
	.byte	3,3,1,5,17,9
	.half	.L529-.L528
	.byte	1,5,39,7,9
	.half	.L530-.L529
	.byte	3,3,1,5,41,9
	.half	.L531-.L530
	.byte	1,5,33,9
	.half	.L97-.L531
	.byte	3,5,1,5,42,9
	.half	.L334-.L97
	.byte	3,3,1,5,40,9
	.half	.L532-.L334
	.byte	1,5,13,9
	.half	.L98-.L532
	.byte	3,2,1,5,53,9
	.half	.L54-.L98
	.byte	3,5,1,5,51,9
	.half	.L533-.L54
	.byte	1,5,29,9
	.half	.L534-.L533
	.byte	3,1,1,5,38,9
	.half	.L336-.L534
	.byte	3,3,1,5,36,9
	.half	.L535-.L336
	.byte	1,5,13,9
	.half	.L536-.L535
	.byte	3,2,1,5,25,9
	.half	.L45-.L536
	.byte	3,211,125,1,5,44,9
	.half	.L537-.L45
	.byte	1,5,1,7,9
	.half	.L538-.L537
	.byte	3,176,2,1,7,9
	.half	.L199-.L538
	.byte	0,1,1
.L382:
	.sdecl	'.debug_ranges',debug,cluster('Fee_LLSearchSectors')
	.sect	'.debug_ranges'
.L198:
	.word	-1,.L180,0,.L199-.L180,0,0
	.sdecl	'.debug_info',debug,cluster('Fee_LLDetectActiveSector')
	.sect	'.debug_info'
.L200:
	.word	490
	.half	3
	.word	.L201
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlDetectSector.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L203,.L202
	.byte	2
	.word	.L191
	.byte	3
	.byte	'Fee_LLDetectActiveSector',0,1,65,23
	.word	.L239
	.byte	1,1,1
	.word	.L178,.L247,.L177
	.byte	4
	.word	.L178,.L247
	.byte	5
	.byte	'Fee_stSecDet_st',0,1,68,38
	.word	.L248,.L249
	.byte	5
	.byte	'TmpSectorOrder_st',0,1,69,43
	.word	.L250,.L251
	.byte	5
	.byte	'xCurrSect_u8',0,1,70,28
	.word	.L239,.L252
	.byte	5
	.byte	'xCntFlashBank_u8',0,1,71,28
	.word	.L239,.L253
	.byte	5
	.byte	'cnt_u8',0,1,72,28
	.word	.L239,.L254
	.byte	5
	.byte	'SectCntMin_u32',0,1,73,28
	.word	.L237,.L255
	.byte	5
	.byte	'xActiveSec_u8',0,1,74,28
	.word	.L239,.L256
	.byte	5
	.byte	'xPhySecIdx_u8',0,1,75,28
	.word	.L239,.L257
	.byte	5
	.byte	'xLogSecIdx_u8',0,1,76,28
	.word	.L239,.L258
	.byte	5
	.byte	'xRepeatSortLoop_u8',0,1,77,28
	.word	.L239,.L259
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fee_LLDetectActiveSector')
	.sect	'.debug_abbrev'
.L201:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fee_LLDetectActiveSector')
	.sect	'.debug_line'
.L202:
	.word	.L540-.L539
.L539:
	.half	3
	.word	.L542-.L541
.L541:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlDetectSector.c',0,0,0,0,0
.L542:
	.byte	5,23,7,0,5,2
	.word	.L178
	.byte	3,192,0,1,5,26,9
	.half	.L287-.L178
	.byte	3,15,1,5,21,9
	.half	.L543-.L287
	.byte	3,24,1,5,38,9
	.half	.L288-.L543
	.byte	1,5,57,9
	.half	.L544-.L288
	.byte	1,5,74,9
	.half	.L3-.L544
	.byte	3,2,1,5,73,9
	.half	.L545-.L3
	.byte	1,5,26,9
	.half	.L546-.L545
	.byte	1,5,87,9
	.half	.L547-.L546
	.byte	1,5,56,9
	.half	.L548-.L547
	.byte	1,9
	.half	.L549-.L548
	.byte	3,1,1,5,44,9
	.half	.L550-.L549
	.byte	3,6,1,5,41,9
	.half	.L551-.L550
	.byte	3,125,1,5,9,9
	.half	.L552-.L551
	.byte	1,5,62,7,9
	.half	.L553-.L552
	.byte	3,3,1,5,60,9
	.half	.L554-.L553
	.byte	1,5,62,9
	.half	.L555-.L554
	.byte	3,1,1,5,60,9
	.half	.L556-.L555
	.byte	1,5,88,9
	.half	.L557-.L556
	.byte	3,127,1,5,45,9
	.half	.L4-.L557
	.byte	3,6,1,5,13,9
	.half	.L558-.L4
	.byte	1,5,63,7,9
	.half	.L559-.L558
	.byte	3,3,1,5,61,9
	.half	.L560-.L559
	.byte	1,5,80,9
	.half	.L561-.L560
	.byte	1,5,49,9
	.half	.L6-.L561
	.byte	3,5,1,5,17,9
	.half	.L562-.L6
	.byte	1,5,67,7,9
	.half	.L563-.L562
	.byte	3,3,1,5,65,9
	.half	.L564-.L563
	.byte	1,5,84,9
	.half	.L565-.L564
	.byte	1,5,54,9
	.half	.L8-.L565
	.byte	3,5,1,5,21,9
	.half	.L566-.L8
	.byte	1,5,58,7,9
	.half	.L567-.L566
	.byte	3,6,1,5,25,9
	.half	.L568-.L567
	.byte	1,5,78,7,9
	.half	.L569-.L568
	.byte	3,2,1,5,76,9
	.half	.L570-.L569
	.byte	1,5,78,9
	.half	.L571-.L570
	.byte	3,1,1,5,76,9
	.half	.L572-.L571
	.byte	1,5,102,9
	.half	.L573-.L572
	.byte	3,127,1,5,75,9
	.half	.L11-.L573
	.byte	3,4,1,5,73,9
	.half	.L574-.L11
	.byte	1,5,26,9
	.half	.L12-.L574
	.byte	3,126,1,5,74,9
	.half	.L10-.L12
	.byte	3,8,1,5,72,9
	.half	.L575-.L10
	.byte	1,5,74,9
	.half	.L576-.L575
	.byte	3,1,1,5,72,9
	.half	.L577-.L576
	.byte	1,5,71,9
	.half	.L5-.L577
	.byte	3,78,1,5,57,9
	.half	.L2-.L5
	.byte	1,5,20,7,9
	.half	.L578-.L2
	.byte	3,62,1,5,25,9
	.half	.L290-.L578
	.byte	3,3,1,5,65,9
	.half	.L291-.L290
	.byte	1,5,9,9
	.half	.L15-.L291
	.byte	3,3,1,5,29,9
	.half	.L579-.L15
	.byte	1,5,65,9
	.half	.L580-.L579
	.byte	1,5,63,9
	.half	.L581-.L580
	.byte	1,5,22,9
	.half	.L582-.L581
	.byte	3,1,1,5,19,9
	.half	.L293-.L582
	.byte	3,2,1,5,49,9
	.half	.L294-.L293
	.byte	1,5,52,9
	.half	.L17-.L294
	.byte	3,4,1,5,60,9
	.half	.L583-.L17
	.byte	1,5,16,9
	.half	.L584-.L583
	.byte	1,5,42,7,9
	.half	.L585-.L584
	.byte	3,1,1,5,58,9
	.half	.L586-.L585
	.byte	1,5,55,9
	.half	.L587-.L586
	.byte	1,5,58,7,9
	.half	.L588-.L587
	.byte	3,1,1,5,32,7,9
	.half	.L589-.L588
	.byte	3,3,1,5,30,9
	.half	.L590-.L589
	.byte	3,1,1,5,57,9
	.half	.L18-.L590
	.byte	3,118,1,5,49,9
	.half	.L16-.L18
	.byte	1,5,29,7,9
	.half	.L591-.L16
	.byte	3,13,1,5,9,9
	.half	.L592-.L591
	.byte	1,5,23,7,9
	.half	.L593-.L592
	.byte	3,2,1,5,53,9
	.half	.L594-.L593
	.byte	1,5,20,9
	.half	.L23-.L594
	.byte	3,3,1,5,38,7,9
	.half	.L595-.L23
	.byte	3,1,1,5,46,9
	.half	.L596-.L595
	.byte	1,5,62,9
	.half	.L597-.L596
	.byte	1,5,59,9
	.half	.L598-.L597
	.byte	1,5,34,7,9
	.half	.L599-.L598
	.byte	3,3,1,5,21,9
	.half	.L600-.L599
	.byte	3,1,1,5,61,9
	.half	.L24-.L600
	.byte	3,120,1,5,53,9
	.half	.L22-.L24
	.byte	1,5,47,7,9
	.half	.L21-.L22
	.byte	3,13,1,5,83,9
	.half	.L601-.L21
	.byte	1,5,97,9
	.half	.L602-.L601
	.byte	1,5,64,9
	.half	.L603-.L602
	.byte	1,5,97,9
	.half	.L604-.L603
	.byte	3,1,1,5,47,9
	.half	.L605-.L604
	.byte	1,5,97,9
	.half	.L606-.L605
	.byte	1,5,64,9
	.half	.L607-.L606
	.byte	1,5,97,9
	.half	.L608-.L607
	.byte	3,1,1,5,64,9
	.half	.L609-.L608
	.byte	1,5,52,9
	.half	.L610-.L609
	.byte	3,3,1,5,13,9
	.half	.L611-.L610
	.byte	1,5,65,7,9
	.half	.L612-.L611
	.byte	3,1,1,5,13,7,9
	.half	.L613-.L612
	.byte	3,3,1,5,72,9
	.half	.L614-.L613
	.byte	1,5,32,9
	.half	.L615-.L614
	.byte	1,5,9,9
	.half	.L27-.L615
	.byte	3,5,1,5,72,9
	.half	.L616-.L27
	.byte	1,5,33,9
	.half	.L617-.L616
	.byte	1,5,88,9
	.half	.L618-.L617
	.byte	1,5,55,9
	.half	.L619-.L618
	.byte	3,3,1,5,53,9
	.half	.L620-.L619
	.byte	1,5,24,9
	.half	.L621-.L620
	.byte	3,1,1,5,83,9
	.half	.L622-.L621
	.byte	3,76,1,5,65,9
	.half	.L14-.L622
	.byte	1,5,25,7,9
	.half	.L623-.L14
	.byte	3,57,1,5,65,9
	.half	.L297-.L623
	.byte	1,5,25,9
	.half	.L30-.L297
	.byte	3,2,1,5,45,9
	.half	.L624-.L30
	.byte	1,5,63,9
	.half	.L625-.L624
	.byte	1,5,52,9
	.half	.L299-.L625
	.byte	3,1,1,5,13,9
	.half	.L626-.L299
	.byte	1,5,54,7,9
	.half	.L627-.L626
	.byte	3,1,1,5,67,9
	.half	.L628-.L627
	.byte	1,5,96,7,9
	.half	.L629-.L628
	.byte	3,2,1,5,17,9
	.half	.L34-.L629
	.byte	3,1,1,5,52,9
	.half	.L33-.L34
	.byte	3,127,1,5,96,9
	.half	.L301-.L33
	.byte	1,5,83,7,9
	.half	.L31-.L301
	.byte	3,122,1,5,46,9
	.half	.L29-.L31
	.byte	1,5,65,9
	.half	.L630-.L29
	.byte	1,5,31,7,9
	.half	.L631-.L630
	.byte	3,15,1,5,48,9
	.half	.L632-.L631
	.byte	3,5,1,5,19,9
	.half	.L302-.L632
	.byte	1,5,5,9
	.half	.L303-.L302
	.byte	3,4,1,5,65,9
	.half	.L633-.L303
	.byte	1,5,64,9
	.half	.L634-.L633
	.byte	1,5,79,9
	.half	.L635-.L634
	.byte	1,5,47,9
	.half	.L636-.L635
	.byte	1,5,38,9
	.half	.L637-.L636
	.byte	3,28,1,5,28,9
	.half	.L35-.L637
	.byte	3,107,1,5,29,9
	.half	.L304-.L35
	.byte	3,1,1,5,69,9
	.half	.L306-.L304
	.byte	1,5,18,9
	.half	.L37-.L306
	.byte	3,3,1,5,38,9
	.half	.L638-.L37
	.byte	1,5,56,9
	.half	.L639-.L638
	.byte	1,5,17,9
	.half	.L640-.L639
	.byte	1,5,69,7,9
	.half	.L641-.L640
	.byte	3,1,1,5,58,7,9
	.half	.L38-.L641
	.byte	3,1,1,5,71,9
	.half	.L642-.L38
	.byte	1,7,9
	.half	.L643-.L642
	.byte	3,1,1,5,73,7,9
	.half	.L644-.L643
	.byte	3,3,1,5,30,9
	.half	.L305-.L644
	.byte	3,2,1,5,9,9
	.half	.L308-.L305
	.byte	3,76,1,5,41,9
	.half	.L42-.L308
	.byte	3,56,1,5,21,9
	.half	.L645-.L42
	.byte	1,5,81,9
	.half	.L646-.L645
	.byte	1,5,59,9
	.half	.L647-.L646
	.byte	1,5,83,9
	.half	.L648-.L647
	.byte	3,3,1,5,45,9
	.half	.L649-.L648
	.byte	1,5,114,9
	.half	.L650-.L649
	.byte	1,5,99,9
	.half	.L651-.L650
	.byte	1,5,34,9
	.half	.L652-.L651
	.byte	3,1,1,5,38,9
	.half	.L310-.L652
	.byte	3,1,1,5,58,9
	.half	.L653-.L310
	.byte	1,5,37,7,9
	.half	.L654-.L653
	.byte	3,3,1,5,17,9
	.half	.L655-.L654
	.byte	1,5,79,9
	.half	.L656-.L655
	.byte	1,5,77,9
	.half	.L657-.L656
	.byte	1,9
	.half	.L658-.L657
	.byte	3,1,1,5,79,9
	.half	.L659-.L658
	.byte	3,1,1,5,77,9
	.half	.L660-.L659
	.byte	1,5,41,9
	.half	.L661-.L660
	.byte	3,1,1,5,78,9
	.half	.L662-.L661
	.byte	1,5,57,9
	.half	.L663-.L662
	.byte	1,5,36,9
	.half	.L664-.L663
	.byte	3,1,1,5,87,9
	.half	.L39-.L664
	.byte	3,101,1,5,69,9
	.half	.L36-.L39
	.byte	1,5,35,7,9
	.half	.L665-.L36
	.byte	3,31,1,5,5,7,9
	.half	.L666-.L665
	.byte	3,3,1,5,1,9
	.half	.L44-.L666
	.byte	3,1,1,7,9
	.half	.L204-.L44
	.byte	0,1,1
.L540:
	.sdecl	'.debug_ranges',debug,cluster('Fee_LLDetectActiveSector')
	.sect	'.debug_ranges'
.L203:
	.word	-1,.L178,0,.L204-.L178,0,0
	.sdecl	'.debug_info',debug,cluster('Fee_LLFindEmptyPage')
	.sect	'.debug_info'
.L205:
	.word	332
	.half	3
	.word	.L206
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlDetectSector.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L208,.L207
	.byte	2
	.word	.L191
	.byte	3
	.byte	'Fee_LLFindEmptyPage',0,1,147,5,34
	.word	.L260
	.byte	1,1,1
	.word	.L182,.L261,.L181
	.byte	4
	.byte	'PhySectIdxUsedSect_u8',0,1,147,5,60
	.word	.L239,.L262
	.byte	5
	.word	.L182,.L261
	.byte	6
	.byte	'xRetVal_en',0,1,229,6,38
	.word	.L260,.L263
	.byte	6
	.byte	'xTmpRetVal_en',0,1,230,6,38
	.word	.L260,.L264
	.byte	6
	.byte	'xBlkHdrTmp_st',0,1,231,6,50
	.word	.L265,.L266
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fee_LLFindEmptyPage')
	.sect	'.debug_abbrev'
.L206:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fee_LLFindEmptyPage')
	.sect	'.debug_line'
.L207:
	.word	.L668-.L667
.L667:
	.half	3
	.word	.L670-.L669
.L669:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlDetectSector.c',0,0,0,0,0
.L670:
	.byte	5,34,7,0,5,2
	.word	.L182
	.byte	3,146,5,1,5,53,9
	.half	.L338-.L182
	.byte	3,210,1,1,5,16,9
	.half	.L339-.L338
	.byte	3,13,1,5,32,9
	.half	.L671-.L339
	.byte	1,5,18,9
	.half	.L672-.L671
	.byte	3,3,1,9
	.half	.L673-.L672
	.byte	3,17,1,9
	.half	.L674-.L673
	.byte	3,242,0,1,5,46,9
	.half	.L102-.L674
	.byte	3,128,127,1,5,44,9
	.half	.L675-.L102
	.byte	1,5,71,9
	.half	.L676-.L675
	.byte	3,3,1,5,44,9
	.half	.L341-.L676
	.byte	1,5,63,9
	.half	.L677-.L341
	.byte	3,7,1,5,61,9
	.half	.L678-.L677
	.byte	1,5,58,9
	.half	.L103-.L678
	.byte	3,8,1,5,26,9
	.half	.L342-.L103
	.byte	3,11,1,9
	.half	.L679-.L342
	.byte	3,8,1,9
	.half	.L680-.L679
	.byte	3,206,0,1,9
	.half	.L681-.L680
	.byte	3,125,1,9
	.half	.L682-.L681
	.byte	3,2,1,9
	.half	.L683-.L682
	.byte	3,2,1,5,21,9
	.half	.L106-.L683
	.byte	3,174,127,1,5,42,9
	.half	.L107-.L106
	.byte	3,32,1,5,59,9
	.half	.L684-.L107
	.byte	1,5,25,9
	.half	.L685-.L684
	.byte	1,5,81,7,9
	.half	.L686-.L685
	.byte	3,4,1,5,144,1,9
	.half	.L687-.L686
	.byte	1,5,129,1,9
	.half	.L688-.L687
	.byte	1,5,99,9
	.half	.L689-.L688
	.byte	1,5,57,9
	.half	.L690-.L689
	.byte	1,5,86,9
	.half	.L691-.L690
	.byte	3,4,1,5,49,9
	.half	.L116-.L691
	.byte	3,2,1,5,60,9
	.half	.L692-.L116
	.byte	1,5,53,9
	.half	.L115-.L692
	.byte	3,126,1,5,86,9
	.half	.L693-.L115
	.byte	1,5,49,7,9
	.half	.L694-.L693
	.byte	3,6,1,5,86,9
	.half	.L695-.L694
	.byte	1,5,29,9
	.half	.L343-.L695
	.byte	1,5,86,7,9
	.half	.L696-.L343
	.byte	3,2,1,5,61,9
	.half	.L346-.L696
	.byte	1,5,29,9
	.half	.L117-.L346
	.byte	3,126,1,5,49,9
	.half	.L114-.L117
	.byte	3,11,1,5,29,9
	.half	.L697-.L114
	.byte	1,5,62,7,9
	.half	.L698-.L697
	.byte	3,3,1,5,105,9
	.half	.L699-.L698
	.byte	1,5,88,9
	.half	.L119-.L699
	.byte	3,5,1,5,61,9
	.half	.L347-.L119
	.byte	1,5,72,9
	.half	.L118-.L347
	.byte	3,6,1,5,70,9
	.half	.L700-.L118
	.byte	1,5,21,9
	.half	.L701-.L700
	.byte	3,2,1,5,36,9
	.half	.L112-.L701
	.byte	3,13,1,5,21,9
	.half	.L702-.L112
	.byte	3,2,1,5,13,9
	.half	.L113-.L702
	.byte	3,3,1,5,33,9
	.half	.L104-.L113
	.byte	3,7,1,5,63,9
	.half	.L703-.L104
	.byte	1,5,45,9
	.half	.L704-.L703
	.byte	1,5,68,9
	.half	.L705-.L704
	.byte	3,3,1,5,94,9
	.half	.L706-.L705
	.byte	1,5,37,9
	.half	.L707-.L706
	.byte	1,5,17,9
	.half	.L708-.L707
	.byte	1,5,49,7,9
	.half	.L709-.L708
	.byte	3,2,1,5,41,9
	.half	.L710-.L709
	.byte	3,3,1,5,78,9
	.half	.L711-.L710
	.byte	1,5,21,9
	.half	.L350-.L711
	.byte	1,5,78,7,9
	.half	.L712-.L350
	.byte	3,2,1,5,53,9
	.half	.L352-.L712
	.byte	1,5,100,9
	.half	.L713-.L352
	.byte	1,5,67,9
	.half	.L126-.L713
	.byte	3,7,1,5,49,9
	.half	.L714-.L126
	.byte	1,5,28,9
	.half	.L124-.L714
	.byte	3,4,1,5,13,9
	.half	.L715-.L124
	.byte	3,2,1,5,28,9
	.half	.L105-.L715
	.byte	3,6,1,5,13,9
	.half	.L716-.L105
	.byte	3,2,1,5,12,9
	.half	.L123-.L716
	.byte	3,3,1,5,11,9
	.half	.L717-.L123
	.byte	1,5,61,7,9
	.half	.L718-.L717
	.byte	1,5,5,7,9
	.half	.L129-.L718
	.byte	3,3,1,5,56,7,9
	.half	.L719-.L129
	.byte	3,3,1,5,54,9
	.half	.L720-.L719
	.byte	1,5,5,9
	.half	.L130-.L720
	.byte	3,3,1,5,1,9
	.half	.L131-.L130
	.byte	3,4,1,7,9
	.half	.L209-.L131
	.byte	0,1,1
.L668:
	.sdecl	'.debug_ranges',debug,cluster('Fee_LLFindEmptyPage')
	.sect	'.debug_ranges'
.L208:
	.word	-1,.L182,0,.L209-.L182,0,0
	.sdecl	'.debug_info',debug,cluster('Fee_GetMostCurrentSectorIdx')
	.sect	'.debug_info'
.L210:
	.word	316
	.half	3
	.word	.L211
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlDetectSector.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L213,.L212
	.byte	2
	.word	.L191
	.byte	3
	.byte	'Fee_GetMostCurrentSectorIdx',0,1,192,9,23
	.word	.L239
	.byte	1,1,1
	.word	.L186,.L267,.L185
	.byte	4
	.word	.L186,.L267
	.byte	5
	.byte	'xCntFlashBank_u8',0,1,194,9,26
	.word	.L239,.L268
	.byte	5
	.byte	'xActiveSec_u8',0,1,195,9,26
	.word	.L239,.L269
	.byte	5
	.byte	'xFirstErasedSec_u8',0,1,196,9,26
	.word	.L239,.L270
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fee_GetMostCurrentSectorIdx')
	.sect	'.debug_abbrev'
.L211:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fee_GetMostCurrentSectorIdx')
	.sect	'.debug_line'
.L212:
	.word	.L722-.L721
.L721:
	.half	3
	.word	.L724-.L723
.L723:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlDetectSector.c',0,0,0,0,0
.L724:
	.byte	5,40,7,0,5,2
	.word	.L186
	.byte	3,194,9,1,5,45,9
	.half	.L362-.L186
	.byte	3,1,1,5,25,9
	.half	.L363-.L362
	.byte	3,59,1,5,65,9
	.half	.L364-.L363
	.byte	1,5,32,9
	.half	.L153-.L364
	.byte	3,3,1,5,12,9
	.half	.L725-.L153
	.byte	1,5,32,9
	.half	.L726-.L725
	.byte	1,5,50,9
	.half	.L727-.L726
	.byte	1,5,9,9
	.half	.L728-.L727
	.byte	1,5,67,7,9
	.half	.L729-.L728
	.byte	3,3,1,5,9,9
	.half	.L154-.L729
	.byte	3,4,1,5,67,7,9
	.half	.L730-.L154
	.byte	3,3,1,5,12,9
	.half	.L155-.L730
	.byte	3,8,1,5,30,7,9
	.half	.L731-.L155
	.byte	3,1,1,5,27,9
	.half	.L732-.L731
	.byte	1,5,38,7,9
	.half	.L733-.L732
	.byte	3,3,1,5,13,9
	.half	.L734-.L733
	.byte	1,5,36,9
	.half	.L735-.L734
	.byte	3,3,1,5,13,9
	.half	.L156-.L735
	.byte	3,6,1,5,65,7,9
	.half	.L736-.L156
	.byte	3,1,1,5,31,7,9
	.half	.L159-.L736
	.byte	3,1,1,5,28,9
	.half	.L737-.L159
	.byte	1,5,36,7,9
	.half	.L738-.L737
	.byte	3,1,1,5,33,9
	.half	.L739-.L738
	.byte	1,5,67,7,9
	.half	.L740-.L739
	.byte	3,3,1,5,83,9
	.half	.L160-.L740
	.byte	3,88,1,5,46,9
	.half	.L152-.L160
	.byte	1,5,65,9
	.half	.L741-.L152
	.byte	1,5,26,7,9
	.half	.L742-.L741
	.byte	3,46,1,5,8,9
	.half	.L743-.L742
	.byte	1,5,74,7,9
	.half	.L744-.L743
	.byte	1,5,71,9
	.half	.L745-.L744
	.byte	1,5,45,7,9
	.half	.L746-.L745
	.byte	3,3,1,5,25,9
	.half	.L747-.L746
	.byte	1,5,45,9
	.half	.L748-.L747
	.byte	1,5,65,9
	.half	.L749-.L748
	.byte	1,5,5,9
	.half	.L163-.L749
	.byte	3,4,1,5,1,9
	.half	.L165-.L163
	.byte	3,1,1,7,9
	.half	.L214-.L165
	.byte	0,1,1
.L722:
	.sdecl	'.debug_ranges',debug,cluster('Fee_GetMostCurrentSectorIdx')
	.sect	'.debug_ranges'
.L213:
	.word	-1,.L186,0,.L214-.L186,0,0
	.sdecl	'.debug_info',debug,cluster('Fee_CheckErasedSectorEmpty')
	.sect	'.debug_info'
.L215:
	.word	345
	.half	3
	.word	.L216
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlDetectSector.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L218,.L217
	.byte	2
	.word	.L191
	.byte	3
	.byte	'Fee_CheckErasedSectorEmpty',0,1,189,8,22,1,1,1
	.word	.L184,.L271,.L183
	.byte	4
	.word	.L184,.L271
	.byte	5
	.byte	'xCurrSect_u8',0,1,191,8,28
	.word	.L239,.L272
	.byte	5
	.byte	'xCurrSectPhys_u8',0,1,192,8,28
	.word	.L239,.L273
	.byte	5
	.byte	'xPageAfterErased_u32',0,1,193,8,28
	.word	.L237,.L274
	.byte	5
	.byte	'xRetVal_en',0,1,194,8,39
	.word	.L260,.L275
	.byte	6
	.word	.L137,.L143
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fee_CheckErasedSectorEmpty')
	.sect	'.debug_abbrev'
.L216:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6,11,0
	.byte	17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fee_CheckErasedSectorEmpty')
	.sect	'.debug_line'
.L217:
	.word	.L751-.L750
.L750:
	.half	3
	.word	.L753-.L752
.L752:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlDetectSector.c',0,0,0,0,0
.L753:
	.byte	5,45,7,0,5,2
	.word	.L184
	.byte	3,191,8,1,5,21,9
	.half	.L354-.L184
	.byte	3,5,1,5,57,9
	.half	.L355-.L354
	.byte	1,5,33,9
	.half	.L133-.L355
	.byte	3,7,1,5,13,9
	.half	.L754-.L133
	.byte	1,5,33,9
	.half	.L755-.L754
	.byte	1,5,47,9
	.half	.L756-.L755
	.byte	1,5,12,9
	.half	.L757-.L756
	.byte	1,5,13,7,9
	.half	.L758-.L757
	.byte	3,1,1,5,37,9
	.half	.L759-.L758
	.byte	1,5,56,9
	.half	.L760-.L759
	.byte	1,5,66,7,9
	.half	.L761-.L760
	.byte	3,3,1,5,53,9
	.half	.L762-.L761
	.byte	3,3,1,5,36,9
	.half	.L763-.L762
	.byte	1,5,52,9
	.half	.L764-.L763
	.byte	1,5,70,9
	.half	.L765-.L764
	.byte	1,5,67,9
	.half	.L766-.L765
	.byte	3,1,1,5,86,9
	.half	.L767-.L766
	.byte	1,5,96,9
	.half	.L357-.L767
	.byte	3,127,1,5,13,9
	.half	.L768-.L357
	.byte	3,5,1,5,29,9
	.half	.L769-.L768
	.byte	1,5,57,9
	.half	.L770-.L769
	.byte	1,5,55,9
	.half	.L771-.L770
	.byte	1,5,24,9
	.half	.L772-.L771
	.byte	3,3,1,5,40,9
	.half	.L136-.L772
	.byte	3,6,1,5,26,9
	.half	.L773-.L136
	.byte	3,3,1,9
	.half	.L774-.L773
	.byte	3,16,1,9
	.half	.L775-.L774
	.byte	3,20,1,9
	.half	.L776-.L775
	.byte	3,17,1,5,28,9
	.half	.L137-.L776
	.byte	3,79,1,5,25,9
	.half	.L359-.L137
	.byte	1,5,73,7,9
	.half	.L777-.L359
	.byte	3,2,1,5,71,9
	.half	.L778-.L777
	.byte	1,5,106,9
	.half	.L779-.L778
	.byte	1,5,21,9
	.half	.L143-.L779
	.byte	3,7,1,5,29,9
	.half	.L138-.L143
	.byte	3,9,1,5,25,9
	.half	.L780-.L138
	.byte	1,5,29,7,9
	.half	.L781-.L780
	.byte	3,3,1,5,46,9
	.half	.L145-.L781
	.byte	3,5,1,5,21,9
	.half	.L782-.L145
	.byte	3,3,1,5,64,9
	.half	.L139-.L782
	.byte	3,8,1,5,25,9
	.half	.L361-.L139
	.byte	1,5,40,7,9
	.half	.L783-.L361
	.byte	3,3,1,5,73,9
	.half	.L784-.L783
	.byte	3,3,1,5,71,9
	.half	.L785-.L784
	.byte	1,5,21,9
	.half	.L147-.L785
	.byte	3,3,1,5,36,9
	.half	.L140-.L147
	.byte	3,7,1,5,69,9
	.half	.L786-.L140
	.byte	3,3,1,5,67,9
	.half	.L787-.L786
	.byte	1,5,21,9
	.half	.L788-.L787
	.byte	3,2,1,9
	.half	.L141-.L788
	.byte	3,7,1,5,20,9
	.half	.L144-.L141
	.byte	3,3,1,5,19,9
	.half	.L789-.L144
	.byte	1,5,69,7,9
	.half	.L790-.L789
	.byte	1,5,71,7,9
	.half	.L134-.L790
	.byte	3,153,127,1,5,38,9
	.half	.L132-.L134
	.byte	1,5,57,9
	.half	.L791-.L132
	.byte	1,5,1,7,9
	.half	.L792-.L791
	.byte	3,234,0,1,7,9
	.half	.L219-.L792
	.byte	0,1,1
.L751:
	.sdecl	'.debug_ranges',debug,cluster('Fee_CheckErasedSectorEmpty')
	.sect	'.debug_ranges'
.L218:
	.word	-1,.L184,0,.L219-.L184,0,0
	.sdecl	'.debug_info',debug,cluster('Fee_GetPhysSectorByAddress')
	.sect	'.debug_info'
.L220:
	.word	292
	.half	3
	.word	.L221
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlDetectSector.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L223,.L222
	.byte	2
	.word	.L191
	.byte	3
	.byte	'Fee_GetPhysSectorByAddress',0,1,249,10,23
	.word	.L239
	.byte	1,1,1
	.word	.L190,.L276,.L189
	.byte	4
	.byte	'Address_u32',0,1,249,10,73
	.word	.L237,.L277
	.byte	5
	.word	.L190,.L276
	.byte	6
	.byte	'cnt_u8',0,1,251,10,27
	.word	.L239,.L278
	.byte	6
	.byte	'xSec_u8',0,1,252,10,27
	.word	.L239,.L279
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fee_GetPhysSectorByAddress')
	.sect	'.debug_abbrev'
.L221:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fee_GetPhysSectorByAddress')
	.sect	'.debug_line'
.L222:
	.word	.L794-.L793
.L793:
	.half	3
	.word	.L796-.L795
.L795:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlDetectSector.c',0,0,0,0,0
.L796:
	.byte	5,35,7,0,5,2
	.word	.L190
	.byte	3,251,10,1,5,16,9
	.half	.L373-.L190
	.byte	3,4,1,5,46,9
	.half	.L374-.L373
	.byte	1,5,45,9
	.half	.L172-.L374
	.byte	3,3,1,5,28,9
	.half	.L797-.L172
	.byte	1,5,44,9
	.half	.L798-.L797
	.byte	1,5,52,9
	.half	.L799-.L798
	.byte	1,5,12,9
	.half	.L800-.L799
	.byte	1,5,52,7,9
	.half	.L801-.L800
	.byte	3,1,1,5,25,9
	.half	.L802-.L801
	.byte	1,5,21,7,9
	.half	.L803-.L802
	.byte	3,3,1,5,13,9
	.half	.L804-.L803
	.byte	3,3,1,5,54,9
	.half	.L173-.L804
	.byte	3,118,1,5,27,9
	.half	.L171-.L173
	.byte	1,5,46,9
	.half	.L805-.L171
	.byte	1,5,5,7,9
	.half	.L175-.L805
	.byte	3,15,1,5,1,9
	.half	.L176-.L175
	.byte	3,1,1,7,9
	.half	.L224-.L176
	.byte	0,1,1
.L794:
	.sdecl	'.debug_ranges',debug,cluster('Fee_GetPhysSectorByAddress')
	.sect	'.debug_ranges'
.L223:
	.word	-1,.L190,0,.L224-.L190,0,0
	.sdecl	'.debug_info',debug,cluster('Fee_IncAddressInsideSector')
	.sect	'.debug_info'
.L225:
	.word	331
	.half	3
	.word	.L226
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlDetectSector.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L228,.L227
	.byte	2
	.word	.L191
	.byte	3
	.byte	'Fee_IncAddressInsideSector',0,1,200,10,22,1,1,1
	.word	.L188,.L280,.L187
	.byte	4
	.byte	'Address_u32',0,1,200,10,89
	.word	.L281,.L282
	.byte	4
	.byte	'numBytes_u16',0,1,201,10,70
	.word	.L241,.L283
	.byte	4
	.byte	'EnsurePageAlign_b',0,1,202,10,71
	.word	.L239,.L284
	.byte	5
	.word	.L188,.L280
	.byte	6
	.byte	'xActSector_u8',0,1,205,10,27
	.word	.L239,.L285
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Fee_IncAddressInsideSector')
	.sect	'.debug_abbrev'
.L226:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Fee_IncAddressInsideSector')
	.sect	'.debug_line'
.L227:
	.word	.L807-.L806
.L806:
	.half	3
	.word	.L809-.L808
.L808:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlDetectSector.c',0,0,0,0,0
.L809:
	.byte	5,22,7,0,5,2
	.word	.L188
	.byte	3,199,10,1,5,70,9
	.half	.L371-.L188
	.byte	3,5,1,5,25,9
	.half	.L366-.L371
	.byte	3,3,1,5,5,9
	.half	.L810-.L366
	.byte	1,5,9,7,9
	.half	.L811-.L810
	.byte	3,2,1,5,54,7,9
	.half	.L812-.L811
	.byte	3,3,1,5,29,9
	.half	.L169-.L812
	.byte	3,3,1,5,20,9
	.half	.L168-.L169
	.byte	3,125,1,5,54,9
	.half	.L813-.L168
	.byte	1,5,22,7,9
	.half	.L167-.L813
	.byte	3,8,1,5,45,9
	.half	.L814-.L167
	.byte	3,4,1,5,28,9
	.half	.L372-.L814
	.byte	1,5,44,9
	.half	.L815-.L372
	.byte	1,5,59,9
	.half	.L816-.L815
	.byte	1,5,13,9
	.half	.L817-.L816
	.byte	1,5,9,9
	.half	.L818-.L817
	.byte	1,5,26,7,9
	.half	.L819-.L818
	.byte	3,2,1,5,1,9
	.half	.L166-.L819
	.byte	3,3,1,7,9
	.half	.L229-.L166
	.byte	0,1,1
.L807:
	.sdecl	'.debug_ranges',debug,cluster('Fee_IncAddressInsideSector')
	.sect	'.debug_ranges'
.L228:
	.word	-1,.L188,0,.L229-.L188,0,0
	.sdecl	'.debug_info',debug,cluster('Fee_LastErasedMarker_u16')
	.sect	'.debug_info'
.L230:
	.word	195
	.half	3
	.word	.L231
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Rba_FeeFs1\\src\\rba_FeeFs1_LlDetectSector.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L191
	.byte	3
	.byte	'Fee_LastErasedMarker_u16',0,4,42,15
	.word	.L286
	.byte	5,3
	.word	Fee_LastErasedMarker_u16
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Fee_LastErasedMarker_u16')
	.sect	'.debug_abbrev'
.L231:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('Fee_CheckErasedSectorEmpty')
	.sect	'.debug_loc'
.L183:
	.word	-1,.L184,0,.L271-.L184
	.half	2
	.byte	138,0
	.word	0,0
.L273:
	.word	-1,.L184,.L354-.L184,.L271-.L184
	.half	1
	.byte	89
	.word	.L360-.L184,.L361-.L184
	.half	1
	.byte	84
	.word	0,0
.L272:
	.word	-1,.L184,.L355-.L184,.L356-.L184
	.half	1
	.byte	90
	.word	.L132-.L184,.L271-.L184
	.half	1
	.byte	90
	.word	0,0
.L274:
	.word	-1,.L184,.L357-.L184,.L134-.L184
	.half	1
	.byte	88
	.word	.L358-.L184,.L359-.L184
	.half	1
	.byte	84
	.word	0,0
.L275:
	.word	-1,.L184,.L136-.L184,.L134-.L184
	.half	1
	.byte	91
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fee_GetMostCurrentSectorIdx')
	.sect	'.debug_loc'
.L185:
	.word	-1,.L186,0,.L267-.L186
	.half	2
	.byte	138,0
	.word	0,0
.L269:
	.word	-1,.L186,.L362-.L186,.L267-.L186
	.half	1
	.byte	82
	.word	0,0
.L268:
	.word	-1,.L186,.L364-.L186,.L365-.L186
	.half	1
	.byte	81
	.word	.L152-.L186,.L267-.L186
	.half	1
	.byte	81
	.word	0,0
.L270:
	.word	-1,.L186,.L363-.L186,.L267-.L186
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fee_GetPhysSectorByAddress')
	.sect	'.debug_loc'
.L277:
	.word	-1,.L190,0,.L276-.L190
	.half	1
	.byte	84
	.word	0,0
.L189:
	.word	-1,.L190,0,.L276-.L190
	.half	2
	.byte	138,0
	.word	0,0
.L278:
	.word	-1,.L190,.L374-.L190,.L375-.L190
	.half	5
	.byte	144,32,157,32,0
	.word	.L171-.L190,.L276-.L190
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L279:
	.word	-1,.L190,.L373-.L190,.L276-.L190
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fee_IncAddressInsideSector')
	.sect	'.debug_loc'
.L282:
	.word	-1,.L188,0,.L366-.L188
	.half	1
	.byte	100
	.word	.L368-.L188,.L280-.L188
	.half	1
	.byte	108
	.word	0,0
.L284:
	.word	-1,.L188,0,.L366-.L188
	.half	1
	.byte	85
	.word	.L371-.L188,.L280-.L188
	.half	1
	.byte	90
	.word	0,0
.L187:
	.word	-1,.L188,0,.L280-.L188
	.half	2
	.byte	138,0
	.word	0,0
.L283:
	.word	-1,.L188,0,.L367-.L188
	.half	1
	.byte	84
	.word	.L369-.L188,.L370-.L188
	.half	1
	.byte	88
	.word	.L168-.L188,.L280-.L188
	.half	1
	.byte	88
	.word	0,0
.L285:
	.word	-1,.L188,.L366-.L188,.L372-.L188
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fee_LLDetectActiveSector')
	.sect	'.debug_loc'
.L177:
	.word	-1,.L178,0,.L287-.L178
	.half	2
	.byte	138,0
	.word	.L287-.L178,.L247-.L178
	.half	2
	.byte	138,56
	.word	.L247-.L178,.L247-.L178
	.half	2
	.byte	138,0
	.word	0,0
.L249:
	.word	-1,.L178,0,.L247-.L178
	.half	2
	.byte	145,72
	.word	0,0
.L255:
	.word	-1,.L178,.L290-.L178,.L30-.L178
	.half	1
	.byte	85
	.word	0,0
.L251:
	.word	-1,.L178,0,.L247-.L178
	.half	2
	.byte	145,104
	.word	0,0
.L254:
	.word	-1,.L178,.L294-.L178,.L295-.L178
	.half	1
	.byte	81
	.word	.L16-.L178,.L296-.L178
	.half	1
	.byte	81
	.word	.L22-.L178,.L21-.L178
	.half	1
	.byte	81
	.word	0,0
.L256:
	.word	-1,.L178,.L302-.L178,.L303-.L178
	.half	1
	.byte	82
	.word	.L303-.L178,.L247-.L178
	.half	1
	.byte	84
	.word	.L311-.L178,.L247-.L178
	.half	1
	.byte	82
	.word	0,0
.L253:
	.word	-1,.L178,.L291-.L178,.L292-.L178
	.half	1
	.byte	86
	.word	.L14-.L178,.L297-.L178
	.half	1
	.byte	86
	.word	.L297-.L178,.L298-.L178
	.half	1
	.byte	88
	.word	.L29-.L178,.L35-.L178
	.half	1
	.byte	88
	.word	.L306-.L178,.L307-.L178
	.half	1
	.byte	83
	.word	.L36-.L178,.L247-.L178
	.half	1
	.byte	83
	.word	0,0
.L252:
	.word	-1,.L178,.L288-.L178,.L289-.L178
	.half	1
	.byte	81
	.word	.L2-.L178,.L15-.L178
	.half	1
	.byte	81
	.word	.L293-.L178,.L14-.L178
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L258:
	.word	-1,.L178,.L308-.L178,.L309-.L178
	.half	1
	.byte	82
	.word	.L310-.L178,.L39-.L178
	.half	1
	.byte	82
	.word	0,0
.L257:
	.word	-1,.L178,.L299-.L178,.L29-.L178
	.half	1
	.byte	89
	.word	.L300-.L178,.L301-.L178
	.half	1
	.byte	84
	.word	.L305-.L178,.L39-.L178
	.half	1
	.byte	81
	.word	0,0
.L259:
	.word	-1,.L178,.L304-.L178,.L305-.L178
	.half	1
	.byte	81
	.word	.L39-.L178,.L247-.L178
	.half	1
	.byte	81
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fee_LLFindEmptyPage')
	.sect	'.debug_loc'
.L181:
	.word	-1,.L182,0,.L337-.L182
	.half	2
	.byte	138,0
	.word	.L337-.L182,.L261-.L182
	.half	2
	.byte	138,16
	.word	.L261-.L182,.L261-.L182
	.half	2
	.byte	138,0
	.word	0,0
.L262:
	.word	-1,.L182,0,.L101-.L182
	.half	1
	.byte	84
	.word	.L338-.L182,.L261-.L182
	.half	1
	.byte	88
	.word	.L340-.L182,.L341-.L182
	.half	1
	.byte	84
	.word	.L344-.L182,.L343-.L182
	.half	1
	.byte	84
	.word	.L345-.L182,.L346-.L182
	.half	1
	.byte	84
	.word	.L348-.L182,.L347-.L182
	.half	1
	.byte	84
	.word	.L349-.L182,.L350-.L182
	.half	1
	.byte	84
	.word	.L351-.L182,.L352-.L182
	.half	1
	.byte	84
	.word	0,0
.L266:
	.word	-1,.L182,0,.L261-.L182
	.half	2
	.byte	145,112
	.word	0,0
.L263:
	.word	-1,.L182,.L339-.L182,.L261-.L182
	.half	1
	.byte	89
	.word	.L353-.L182,.L261-.L182
	.half	1
	.byte	82
	.word	0,0
.L264:
	.word	-1,.L182,.L342-.L182,.L343-.L182
	.half	1
	.byte	82
	.word	.L114-.L182,.L347-.L182
	.half	1
	.byte	82
	.word	.L112-.L182,.L113-.L182
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Fee_LLSearchSectors')
	.sect	'.debug_loc'
.L179:
	.word	-1,.L180,0,.L312-.L180
	.half	2
	.byte	138,0
	.word	.L312-.L180,.L232-.L180
	.half	2
	.byte	138,8
	.word	.L232-.L180,.L232-.L180
	.half	2
	.byte	138,0
	.word	0,0
.L234:
	.word	-1,.L180,0,.L46-.L180
	.half	1
	.byte	100
	.word	.L313-.L180,.L232-.L180
	.half	1
	.byte	108
	.word	0,0
.L245:
	.word	-1,.L180,.L318-.L180,.L319-.L180
	.half	1
	.byte	90
	.word	.L320-.L180,.L232-.L180
	.half	1
	.byte	90
	.word	.L322-.L180,.L323-.L180
	.half	1
	.byte	84
	.word	.L326-.L180,.L327-.L180
	.half	1
	.byte	84
	.word	0,0
.L242:
	.word	-1,.L180,.L330-.L180,.L331-.L180
	.half	1
	.byte	82
	.word	0,0
.L240:
	.word	-1,.L180,.L314-.L180,.L315-.L180
	.half	1
	.byte	88
	.word	.L57-.L180,.L324-.L180
	.half	1
	.byte	88
	.word	.L58-.L180,.L325-.L180
	.half	1
	.byte	88
	.word	.L328-.L180,.L329-.L180
	.half	1
	.byte	88
	.word	.L334-.L180,.L335-.L180
	.half	1
	.byte	88
	.word	.L336-.L180,.L232-.L180
	.half	1
	.byte	88
	.word	0,0
.L244:
	.word	-1,.L180,.L316-.L180,.L317-.L180
	.half	1
	.byte	89
	.word	.L321-.L180,.L232-.L180
	.half	1
	.byte	89
	.word	0,0
.L236:
	.word	-1,.L180,0,.L232-.L180
	.half	2
	.byte	145,120
	.word	0,0
.L238:
	.word	-1,.L180,.L332-.L180,.L333-.L180
	.half	5
	.byte	144,32,157,32,0
	.word	.L71-.L180,.L75-.L180
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L820:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Fee_LLDetectActiveSector')
	.sect	'.debug_frame'
	.word	36
	.word	.L820,.L178,.L247-.L178
	.byte	4
	.word	(.L287-.L178)/2
	.byte	19,56,22,26,3,19,138,56,4
	.word	(.L247-.L287)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Fee_LLSearchSectors')
	.sect	'.debug_frame'
	.word	36
	.word	.L820,.L180,.L232-.L180
	.byte	4
	.word	(.L312-.L180)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L232-.L312)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Fee_LLFindEmptyPage')
	.sect	'.debug_frame'
	.word	36
	.word	.L820,.L182,.L261-.L182
	.byte	4
	.word	(.L337-.L182)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L261-.L337)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Fee_CheckErasedSectorEmpty')
	.sect	'.debug_frame'
	.word	12
	.word	.L820,.L184,.L271-.L184
	.sdecl	'.debug_frame',debug,cluster('Fee_GetMostCurrentSectorIdx')
	.sect	'.debug_frame'
	.word	24
	.word	.L820,.L186,.L267-.L186
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Fee_IncAddressInsideSector')
	.sect	'.debug_frame'
	.word	12
	.word	.L820,.L188,.L280-.L188
	.sdecl	'.debug_frame',debug,cluster('Fee_GetPhysSectorByAddress')
	.sect	'.debug_frame'
	.word	24
	.word	.L820,.L190,.L276-.L190
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1425  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1426  #define FEE_STOP_SEC_CODE
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1427  #include "Fee_MemMap.h"
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1428  /* FEE_PRESENT */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1429  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1430  /* 1 == FEE_PRV_CFG_SELECTED_FS */
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1431  #endif
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1432  
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1433  /*<BASDKey>
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1434  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1435  * $History__:$
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1436  **********************************************************************************************************************
; BSW\src\BSW\Gen\Rba_FeeFs1\src\rba_FeeFs1_LlDetectSector.c	  1437  </BASDKey>*/

	; Module end
