	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc15508a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Dem\\src\\Dem_Events.src BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c'

	
$TC16X
	
	.sdecl	'.text.Dem_Events.Dem_EvtSetCausal',code,cluster('Dem_EvtSetCausal')
	.sect	'.text.Dem_Events.Dem_EvtSetCausal'
	.align	2
	
	.global	Dem_EvtSetCausal

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	     3  #include "Dem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	     4  #include "Rte_Dem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	     5  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	     6  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	     7  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	     8  #include "Dem_Dependencies.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	     9  #include "Dem_EventRecheck.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    10  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    11  #include "Dem_Cfg_ExtPrototypes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    12  #include "Dem_Cfg_EventsCallback.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    13  #include "Dem_DTCs.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    14  #include "Dem_EventStatus.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    15  #include "Dem_Prv_CallEvtStChngdCbk.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    16  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    17  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    18  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    19  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    20  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    21  uint16 Dem_GlobalInitMonitoringCounter;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    22  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    23  DEM_ARRAY_DEFINE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    24  DEM_ARRAY_DEFINE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    25  DEM_BITARRAY_DEFINE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    26  DEM_BITARRAY_DEFINE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    27  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    28  uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    29  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    30  #if (DEM_CFG_BUILDTARGET == DEM_CFG_BUILDTARGET_DEMTESTSUITE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    31      extern boolean TESTSUITE_ALLOW_INITIALIZE_EVENT_SUPPRESSION;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    32  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    33  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    34  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    35  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    38  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    39  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    40  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    41  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    42  DEM_BITARRAY_DEFINE(Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    43  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    44  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    45  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    46  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    47  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    48  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    49  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    50  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    51  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    52  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    53  DEM_ARRAY_DEFINE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH, DEM_CFG_EVTUSERATTRIBUTES);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    54  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    55  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    56  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    57  DEM_ARRAY_DEFINE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS, DEM_EVT_ST_CH_CALLBACK_FUNCTIONS);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    58  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    59  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    60  /* MR12 RULE 1.3 VIOLATION: A function-like macro shall not be invoked without all of its arguments, hence some of the arguments are optional based on configuration */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    61  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    62  DEM_ARRAY_DEFINE_CONST(Dem_EvtCategoryPriority, Dem_EvtCategoryPrio, DEM_EVENTCATPRIO_ARRAYLENGTH, DEM_CFG_EVTCATEGORYPRIO);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    63  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    65  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    66  DEM_ARRAY_DEFINE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH, DEM_CFG_CALLBACK_INITMFORE_LIST);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    67  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    68  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    69  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    70  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    71  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    72  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    74  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    75  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    76  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    77  DEM_DTC_ST_CH_CALLBACK_FUNCTION
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    78  DEM_EVT_ST_CH_CONTAINERCALLBACKS
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    79  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    80  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    81  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    82  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    83  void Dem_EvtSetCausal(Dem_EventIdType EventId, Dem_boolean_least causal)
; Function Dem_EvtSetCausal
.L146:
Dem_EvtSetCausal:	.type	func

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;      (inlined)
	j	.L2

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }      (inlined)
.L2:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    84  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    85  	Dem_ComponentIdType nodeId = Dem_NodeIdFromEventId(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    86  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    87  	DEM_ASSERT_ISLOCKED();
.L3:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();      (inlined)
.L4:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
	movh.a	a15,#@his(Dem_AllEventsState)
	lea	a15,[a15]@los(Dem_AllEventsState)
.L837:
	addsc.a	a15,a15,d4,#2
.L838:
	mov	d0,#0
.L417:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
	jeq	d5,#0,.L5
.L426:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
	mov	d15,#1
.L672:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
	ld.bu	d1,[a15]
.L839:
	sha	d15,d15,d0
.L673:
	or	d1,d15
	st.b	[a15],d1
.L427:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);      (inlined)
	j	.L6

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
.L5:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
	mov	d15,#1
.L674:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
	ld.bu	d1,[a15]
.L840:
	sha	d15,d15,d0
.L675:
	xor	d15,d15,#255
.L841:
	and	d1,d15
	st.b	[a15],d1

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else      (inlined)
.L6:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
	mov	d15,#0

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;      (inlined)
	j	.L7

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }      (inlined)
.L7:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    88  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    89  	Dem_EvtSetCausal_Flag(EventId, causal);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    90  	if (Dem_NodeIdIsValid(nodeId))
	jeq	d15,#0,.L8
.L8:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    91  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    92  		Dem_NodeSetHasCausalFault(nodeId, causal);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    93  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    94  }
	ret
.L405:
	
__Dem_EvtSetCausal_function_end:
	.size	Dem_EvtSetCausal,__Dem_EvtSetCausal_function_end-Dem_EvtSetCausal
.L218:
	; End of function
	
	.sdecl	'.text.Dem_Events.Dem_EvtIsRecoverable',code,cluster('Dem_EvtIsRecoverable')
	.sect	'.text.Dem_Events.Dem_EvtIsRecoverable'
	.align	2
	
	.global	Dem_EvtIsRecoverable

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    95  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    96  Dem_boolean_least Dem_EvtIsRecoverable(Dem_EventIdType EventId)
; Function Dem_EvtIsRecoverable
.L148:
Dem_EvtIsRecoverable:	.type	func

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    97  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    98      /* resetting failure is only allowed, if failure is recoverable or failure is sequential */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	    99      return (
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   100              (   Dem_EvtParam_GetIsRecoverable(EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   101                      && Dem_NodeRecoveryAllowed(Dem_NodeIdFromEventId(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   102              )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   103              || (!Dem_EvtIsCausal(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   104              || (Dem_EvtIsRecheckedAndWaitingForMonResult(EventId)) /* in case the fault is rechecked and still in evbuffer */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   105              || (!Dem_EvtSt_GetTestFailedTOC(EventId))
	mov	d2,#0

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L9:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
	mov	d15,#1

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;      (inlined)
	j	.L10

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }      (inlined)
.L10:
	jeq	d15,#0,.L11
.L368:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;      (inlined)
	j	.L12

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }      (inlined)
.L12:

; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     3  #ifndef DEM_NODES_H
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     4  #define DEM_NODES_H
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     8  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     9  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    10  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    11  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    12  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    15  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    18  #define DEM_NODE_INFINITE_RECOVERIES  255
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    19  #define DEM_NODE_NO_RECOVERIES          0
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    20  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    21  #define DEM_NODESTATUS_FAILED                   0
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    22  #define DEM_NODESTATUS_SUSPICIOUS               1
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    23  #define DEM_NODESTATUS_NOTINIT                  2
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    24  #define DEM_NODESTATUS_NOTAVAILABLE             3
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    25  #define DEM_NODESTATUS_FAILEDFILTERED           4
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    26  #define DEM_NODESTATUS_FAILEDNOTRECOVERABLE     5
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    27  #define DEM_NODESTATUS_PENDING                  6
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    29  #if DEM_CFG_DEPENDENCY_PENDING_ON
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    30  #define DEM_NODESTATUS_COUNT                    7
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    31  #else
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    32  #define DEM_NODESTATUS_COUNT                    6
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    33  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    35  #define DEM_NODESTATUS__NODEMASK               ((uint8)0x80)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    36  #define DEM_NODESTATUS__ANCESTORMASK           ((uint8)0x7F)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    38  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    39  DEM_INLINE void Dem_NodeStatusSet(uint8 *status)            { (*status) |= DEM_NODESTATUS__NODEMASK;  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    40  DEM_INLINE void Dem_NodeStatusReset(uint8 *status)          { (*status) &= (uint8)~DEM_NODESTATUS__NODEMASK; }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    41  DEM_INLINE Dem_boolean_least Dem_NodeStatusIsSet(uint8 status)  { return ((status) & DEM_NODESTATUS__NODEMASK) > 0; }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    42  DEM_INLINE Dem_boolean_least Dem_NodeStatusIsAnyAncestorSet (uint8 status) { return ((status) & DEM_NODESTATUS__ANCESTORMASK) > 0; }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    45  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    46  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    47  	uint8 status[DEM_NODESTATUS_COUNT];
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    48  #if (DEM_CFG_DEPRECOVERYLIMIT == DEM_CFG_DEPRECOVERYLIMIT_ON)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    49  	uint8 performedRecoveries;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    51  	uint8 stateFlags;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    52  } Dem_NodeState;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    54  #define DEM_NODE_STATEFLAG_RECHECKONCLEAR    0
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    55  #define DEM_NODE_STATEFLAG_HASCAUSALFAULT    1
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    56  #define DEM_NODE_STATEFLAG_RECOVERYBLOCKED    2
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    57  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    59  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    60  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    61  #if (DEM_CFG_DEPRECOVERYLIMIT == DEM_CFG_DEPRECOVERYLIMIT_ON)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    62  	uint8 allowedRecoveries;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    63  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    64  #if (DEM_CFG_NODEFAILEDCALLBACK_COUNT > 0)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    65  	uint8 nodeFailedCallbackIdx;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    66  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    67  	uint8 paramFlags;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    68  } Dem_NodeParam;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    70  typedef Std_ReturnType (*Dem_NodeFailedCallbackType)(boolean testFailed);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    73  #define DEM_NODE_PARAMFLAG_IGNOREPRIORITY    0
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    75  #if (DEM_CFG_DEPRECOVERYLIMIT == DEM_CFG_DEPRECOVERYLIMIT_ON)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    76  	#define DEM_NODES_INIT_ALLOWEDRECOVERIES(X)    (X),
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    77  #else
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    78  	#define DEM_NODES_INIT_ALLOWEDRECOVERIES(X)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    79  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    80  #if (DEM_CFG_NODEFAILEDCALLBACK_COUNT > 0)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    81  	#define DEM_NODES_INIT_NODEFAILEDCALLBACK(X)    (X),
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    83  	#define DEM_NODES_INIT_NODEFAILEDCALLBACK(X)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    86  #define DEM_NODES_INIT(ALLOWEDRECOVERIES,IGNORES_PRIO,NODEFAILEDCALLBACK)        \ 
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    87      {                                              			  \ 
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    88  		DEM_NODES_INIT_ALLOWEDRECOVERIES(ALLOWEDRECOVERIES)   \ 
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    89  		DEM_NODES_INIT_NODEFAILEDCALLBACK(NODEFAILEDCALLBACK)  \ 
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    90  		((IGNORES_PRIO) << DEM_NODE_PARAMFLAG_IGNOREPRIORITY)   \ 
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    91      }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    92  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    93  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    95  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    96  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    98  DEM_ARRAY_DECLARE(      Dem_NodeState, Dem_AllNodesState, DEM_NODEID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   100  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   101  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   105  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   106  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   108  DEM_ARRAY_DECLARE_CONST(Dem_NodeParam, Dem_AllNodesParam, DEM_NODEID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   109  DEM_ARRAY_DECLARE_CONST(Dem_NodeFailedCallbackType, Dem_NodeFailedCallbacks, DEM_CFG_NODEFAILEDCALLBACK_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   111  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   112  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   115  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   116  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   117  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   119  void Dem_SetNodeStatus (const Dem_ComponentIdType NodeId, uint8 statusIndex);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   121  Dem_boolean_least Dem_Dependencies_CheckEventIsCausal(Dem_EventIdType EventId, Dem_ComponentIdType NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   123  #if DEM_CFG_DEPENDENCY_PENDING_ON
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   124  Dem_boolean_least Dem_Dependencies_CheckEventIsCausalPending(Dem_EventIdType EventId, Dem_ComponentIdType NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   125  void Dem_Dependencies_SetNodePending(Dem_EventIdType EventId , Dem_boolean_least setBit);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   126  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   128  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   129  /*************   Status Querries   ***************/
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   130  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   131  DEM_INLINE boolean Dem_NodeIsFailed(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   132  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   133  	return (Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_FAILED] != 0);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   134  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   136  DEM_INLINE boolean Dem_NodeIsFailedItself(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   137  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   138  	return Dem_NodeStatusIsSet(Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_FAILED]);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   139  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   142  DEM_INLINE boolean Dem_NodeIsSuspicious(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   143  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   144     return (Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_SUSPICIOUS] != 0);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   145  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   146  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   147  DEM_INLINE boolean Dem_NodeIsSuspiciousItself(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   148  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   149     return Dem_NodeStatusIsSet(Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_SUSPICIOUS]);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   150  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   152  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   153  DEM_INLINE boolean Dem_NodeIsFailedFilteredItself(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   154  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   155     return (Dem_NodeStatusIsSet(Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_FAILEDFILTERED]));
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   156  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   159  DEM_INLINE boolean Dem_NodeIsFailedNotRecoverable(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   160  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   161      return (Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_FAILEDNOTRECOVERABLE] != 0);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   162  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   164  DEM_INLINE boolean Dem_NodeIsFailedNotRecoverableItself(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   165  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   166      return Dem_NodeStatusIsSet(Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_FAILEDNOTRECOVERABLE]);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   167  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   170  DEM_INLINE boolean Dem_NodeIsAvailable(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   171  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   172  	   return (Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_NOTAVAILABLE] == 0);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   176  DEM_INLINE boolean Dem_NodeIsInitialized(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   178  	   return (Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_NOTINIT] == 0);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   179  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   180  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   181  DEM_INLINE boolean Dem_NodeAreAncestorsInitialized(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   182  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   183  	return !Dem_NodeStatusIsAnyAncestorSet(Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_NOTINIT]);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   184  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   186  DEM_INLINE boolean Dem_NodeIsRestrictedUsable(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   187  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   188  	return (   (Dem_NodeIsInitialized(NodeId))
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   189  			&& (Dem_NodeIsAvailable(NodeId))
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   190  			&& (!Dem_NodeIsFailed(NodeId))
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   191  			);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   194  DEM_INLINE boolean Dem_NodeIsUsable(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   195  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   196  	return (   (Dem_NodeIsRestrictedUsable(NodeId))
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   197  			&& (!Dem_NodeIsSuspicious(NodeId))
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   198  			);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   199  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   200  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   202  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   203  DEM_INLINE boolean Dem_NodeRecoveryAllowed (Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   204  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   205      DEM_UNUSED_PARAM(NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   207      return (TRUE
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   208  #if (DEM_CFG_DEPRECOVERYLIMIT == DEM_CFG_DEPRECOVERYLIMIT_ON)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   209              && (    (Dem_AllNodesState[NodeId].performedRecoveries < Dem_AllNodesParam[NodeId].allowedRecoveries)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   210                   || (DEM_NODE_INFINITE_RECOVERIES == Dem_AllNodesParam[NodeId].allowedRecoveries)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   211                 )
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   212  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   213  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   214             );
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   217  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   218  DEM_INLINE void Dem_NodeCallFailedCallback (Dem_ComponentIdType NodeId, boolean failed)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   219  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   220  #if (DEM_CFG_NODEFAILEDCALLBACK_COUNT > 0)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   221  	if (Dem_AllNodesParam[NodeId].nodeFailedCallbackIdx != 0)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   222  	{
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   223  		(Dem_NodeFailedCallbacks[Dem_AllNodesParam[NodeId].nodeFailedCallbackIdx])(failed);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   224  	}
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   225  #else
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   226  	DEM_UNUSED_PARAM(NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   227  	DEM_UNUSED_PARAM(failed);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   228  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   229  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   232  void Dem_Dependencies_SetNodeFailed(Dem_ComponentIdType NodeId, boolean EventIsCausal, boolean EventStorageFiltered, boolean EventIsRecoverable);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   233  void Dem_Dependencies_ResetNodeFailed(Dem_ComponentIdType NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   234  void Dem_Dependencies_ResetNodeFailedFiltered(Dem_ComponentIdType NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   235  void Dem_Dependencies_ResetNodeFailedNotRecoverable(Dem_ComponentIdType NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   237  void Dem_NodeSetSuspicious(Dem_ComponentIdType NodeId, Dem_boolean_least suspicious);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   238  void Dem_NodeSetHasCausalFault (const Dem_ComponentIdType NodeId, Dem_boolean_least causalFault);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   239  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   240  void Dem_NodeSetAvailable(Dem_ComponentIdType ComponentId, boolean AvailableStatus);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   242  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   243  DEM_INLINE void Dem_NodeSetRecovered(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   244  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   245  	DEM_UNUSED_PARAM(NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   246  #if (DEM_CFG_DEPRECOVERYLIMIT == DEM_CFG_DEPRECOVERYLIMIT_ON)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   247  	if (Dem_AllNodesState[NodeId].performedRecoveries < Dem_AllNodesParam[NodeId].allowedRecoveries)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   248  	{
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   249  		Dem_AllNodesState[NodeId].performedRecoveries++;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   250  	}
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   251  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   252  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   253  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   254  DEM_INLINE void Dem_NodeSetRecheckOnClear (Dem_ComponentIdType NodeId, Dem_boolean_least newRecheckOnClear)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   255  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   256      rba_DiagLib_Bit8OverwriteBit(&(Dem_AllNodesState[NodeId].stateFlags), DEM_NODE_STATEFLAG_RECHECKONCLEAR, newRecheckOnClear);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   257  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   258  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   259  DEM_INLINE Dem_boolean_least Dem_NodeIsRecheckOnClear (Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   260  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   261  	return rba_DiagLib_Bit8IsBitSet(Dem_AllNodesState[NodeId].stateFlags, DEM_NODE_STATEFLAG_RECHECKONCLEAR);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   262  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   263  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   264  DEM_INLINE Dem_boolean_least Dem_NodeIgnorePriority(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   265  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   266  	return rba_DiagLib_Bit8IsBitSet(Dem_AllNodesParam[NodeId].paramFlags, DEM_NODE_PARAMFLAG_IGNOREPRIORITY);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   267  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   268  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   269  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   271  void Dem_NodeRecheckOnClear (void);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   272  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   273  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   274  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   276  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   278  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   279  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   282  #else
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   283  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   284  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   285  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   286  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   288  DEM_INLINE Dem_boolean_least Dem_Dependencies_CheckEventIsCausal(Dem_EventIdType EventId, Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   289  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   290      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   291      DEM_UNUSED_PARAM(NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   292      return TRUE;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   293  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   294  DEM_INLINE void Dem_Dependencies_ResetNodeFailed(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   295  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   296      DEM_UNUSED_PARAM(NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   297  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   299  DEM_INLINE void Dem_Dependencies_SetNodeFailed(Dem_ComponentIdType NodeId, boolean EventIsCausal, boolean EventStorageFiltered, boolean EventIsRecoverable)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   300  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   301      DEM_UNUSED_PARAM(NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   302      DEM_UNUSED_PARAM(EventIsCausal);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   303      DEM_UNUSED_PARAM(EventStorageFiltered);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   304      DEM_UNUSED_PARAM(EventIsRecoverable);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   305  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   306  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   307  DEM_INLINE void Dem_Dependencies_ResetNodeFailedFiltered(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   308  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   309      DEM_UNUSED_PARAM(NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   310  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   311  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   312  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   313  DEM_INLINE boolean Dem_NodeIsAvailable(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   314  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   315      DEM_UNUSED_PARAM(NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   316      return TRUE;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   317  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   318  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   319  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   320  DEM_INLINE boolean Dem_NodeRecoveryAllowed (Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   321  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   322      DEM_UNUSED_PARAM(NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   323      return TRUE;
	mov	d15,#1

; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   323      return TRUE;      (inlined)
	j	.L13

; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   324  }      (inlined)
.L13:
	jne	d15,#0,.L14
.L11:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
	movh.a	a15,#@his(Dem_AllEventsState)
	lea	a15,[a15]@los(Dem_AllEventsState)
.L819:
	addsc.a	a15,a15,d4,#2
.L820:
	ld.bu	d15,[a15]
.L821:
	mov	d0,#0
.L381:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L822:
	and	d15,#1
.L823:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L15

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L15:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L824:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L16

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L16:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);      (inlined)
	j	.L17

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }      (inlined)
.L17:
	jeq	d15,#0,.L18
.L377:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
	mov	d15,#0

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;      (inlined)
	j	.L19

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }      (inlined)
.L19:
	jne	d15,#0,.L20
.L391:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     3  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     4  #ifndef DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     5  #define DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     6  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     7  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     9  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    10  #include "Dem_Cfg_EventId.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    11  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    12  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    13  #include "Dem_Cfg_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    14  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    15  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    16  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    17  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    18  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    19  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    20  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    21  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    22  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    23  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    24  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    25  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    26  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    29  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    30  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    31  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    32  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    33  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    34  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    35  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    38  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    39  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    41  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    42  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    43  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    46  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    47  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetCustIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    48  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    49      return Dem_AllEventsStatusByteCust[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    50  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    51  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    52  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    53  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    54  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    55  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    57  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    58  #include "Dem_CustomStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    59  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    60  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    61  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    62  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    63  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    65  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    66  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    67  #define DEM_STATUSBYTE_EVENT_UNAVAILABLE                   (0x00)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    68  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_SETMASK          (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    69  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_CLEARMASK        (DEM_ISO14229_BM_TESTFAILED_TOC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    70  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    71  #define DEM_INIT_ISOBITS_CLEARMASK									(DEM_ISO14229_BM_TESTFAILED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    72  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    74  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    75  void Dem_EventStatusInitCheckNvM(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    76  void Dem_ClearEvent(Dem_EventIdType eventId, boolean ClearFully);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    77  void Dem_EvtAdvanceOperationCycle(Dem_OperationCycleList operationCycleList);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    78  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    79  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    80  /* Duplicate of Dem_GetEventStatus to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    81  Std_ReturnType Dem_GetEventStatus_GeneralEvtInfo(Dem_EventIdType EventId, Dem_UdsStatusByteType* EventStatusExtended);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    82  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    83  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    84  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    85  DEM_INLINE void Dem_InitEventStatusTestFailed(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    86  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    87  #if (!DEM_CFG_EVMEM_STORAGE_TESTFAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    88  	Dem_EventIdIterator eventIt;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    89  	Dem_EventIdType eventId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    90  	Dem_UdsStatusByteType statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    92  	for (Dem_EventIdIteratorNew(&eventIt); Dem_EventIdIteratorIsValid(&eventIt); Dem_EventIdIteratorNext(&eventIt))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    93  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    94  		eventId = Dem_EventIdIteratorCurrent(&eventIt);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    95  		statusNew = Dem_EvtGetIsoByte(eventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    96  		if (!Dem_EvtParam_GetStoreTestFailedToNextOC(eventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    97  		{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    98  			statusNew &= (Dem_UdsStatusByteType)(~DEM_INIT_ISOBITS_CLEARMASK);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    99  		}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   100  		Dem_AllEventsStatusByte[eventId] = statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   101  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   102  		Dem_AllEventsStatusByteCust[eventId] = statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   103  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   104  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   105  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   106  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   107  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   108  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   109  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte4DtcCalculation (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   110  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   111  #if !DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   112      return Dem_AllEventsStatusByte[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   113  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   114      return Dem_AllEventsStatusByteCust[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   115  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   116  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   118  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   119  /*
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   120   * Called in Dem_EvtProcessPassedAndFailed() to check whether the reported status would change the event status information
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   121   */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   122  DEM_INLINE Dem_boolean_least Dem_EvtSt_IsUpdateNeeded(Dem_EventIdType EventId, Dem_boolean_least reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   123  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   124      return (
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   125             (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetIsoByte(EventId)) != reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   126          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetIsoByte(EventId)))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   127  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   128  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   129          || (reportIsFailed && !Dem_EvtGetTestFailedTFCSincePreinit(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   130          || (!Dem_EvtGetTestCompleteTFCSincePreinit(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   131  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   132  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   133  #if (DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   134          || (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetCustIsoByte(EventId)) != reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   135          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetCustIsoByte(EventId)))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   136  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   137      );
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   138  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   139  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   141  DEM_INLINE void Dem_EvtSt_HandleInitialization (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   142  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   143      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   145      /* We don't need to reset Test*TFCSincePreinit here because it is already properly initialized by static
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   146       * initialization with zeros on ECU startup */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   148  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   149      Dem_EvtSt_CustomInitialization(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   150  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   151  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   152  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   153  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   154  DEM_INLINE void Dem_EvtSt_HandleFailed(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   155  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   156      Dem_ISO14229ByteSetTestFailed (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   157      Dem_ISO14229ByteSetTestFailedTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   158      Dem_ISO14229ByteSetTestFailedSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   159      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   160      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   161      /* only valid with failurecycle=operationcycle
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   162      Dem_ISO14229ByteSetPendingDTC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   163      */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   164  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   165  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   166      Dem_EvtSetTestFailedTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   167      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   168  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   169  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   170  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   171      Dem_EvtSt_CustomFailed(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   175  DEM_INLINE void Dem_EvtSt_HandlePassed(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   176  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   177      Dem_ISO14229ByteSetTestFailed (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   178      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   179      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   180  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   181  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   182      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   183  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   184  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   185  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   186      Dem_EvtSt_CustomPassed(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   187  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   188  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   190  DEM_INLINE void Dem_EvtSt_HandleResetEventStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   191  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   192      Dem_ISO14229ByteSetTestFailed(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   193  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   194      Dem_EvtSt_CustomResetEventStatus(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   195  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   198  DEM_INLINE void Dem_EvtSt_HandleEvtAvailable(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   199  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   200      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   201  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   202      Dem_EvtSt_CustomEvtAvailable(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   203  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   204  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   205  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   206  DEM_INLINE void Dem_EvtSt_HandleEvtNotAvailable(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   207  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   208      Dem_AllEventsStatusByte[EventId] = DEM_STATUSBYTE_EVENT_UNAVAILABLE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   209  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   210      Dem_EvtSt_CustomEvtNotAvailable(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   211  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   212  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   213  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   214  DEM_INLINE void Dem_EvtSt_HandleClear(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   215  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   216  #if DEM_CFG_CLEARDTCCLEARSALLBITS
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   217      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   218  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   219      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   220      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   221      Dem_ISO14229ByteSetTestFailedTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   222      Dem_ISO14229ByteSetTestFailedSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   223      Dem_ISO14229ByteSetPendingDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   224      Dem_ISO14229ByteSetConfirmedDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   225      if(!(Dem_ISO14229ByteIsTestFailed(Dem_AllEventsStatusByte[EventId])))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   226      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   227          Dem_ISO14229ByteSetWarningIndicatorRequested(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   228      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   229  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   230  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   231  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   232      Dem_EvtSetTestFailedTFCSincePreinit(EventId, FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   233      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   234  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   235  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   236  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   237      Dem_EvtSt_CustomClear(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   238  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   239  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   240  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   241  DEM_INLINE void Dem_EvtSt_HandleClear_OnlyThisCycleAndReadiness(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   242  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   243      Dem_ISO14229ByteSetTestFailedTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   244      Dem_ISO14229ByteSetTestFailedSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   245      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   246      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   247  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   248  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   249      Dem_EvtSt_CustomClear_OnlyThisCycleAndReadiness(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   250  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   251  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   252      /* Hint : As Events mapped to OBD DTCs are not allowed to configure ClearAllowedBehavior as ONLY_THIS_CYCLE_AND_READINESS,
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   253       * no additional functions are called when DEM_CFG_OBD == DEM_CFG_OBD_ON */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   254  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   255  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   256  DEM_INLINE void Dem_EvtSt_HandleNewOperationCycle(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   257  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   258      if(!Dem_EvtIsSuppressed(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   259      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   260          /* only valid with failurecycle=operationcycle
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   261      if (Dem_ISO14229ByteIsTestCompleteTOC(Dem_AllEventsStatusByte[EventId]) && !Dem_ISO14229ByteIsTestFailedTOC(Dem_AllEventsStatusByte[EventId]))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   262      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   263          Dem_ISO14229ByteSetPendingDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   264      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   265           */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   266          Dem_AllEventsStatusByte[EventId] &= (Dem_UdsStatusByteType)(~DEM_STATUSBYTE_NEW_OPERATIONCYCLE_CLEARMASK);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   267          Dem_AllEventsStatusByte[EventId] |= DEM_STATUSBYTE_NEW_OPERATIONCYCLE_SETMASK;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   268  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   269          Dem_EvtSt_CustomNewOperationCycle(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   270  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   271      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   272  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   273  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   274  DEM_INLINE void Dem_EvtSt_HandleNewFailureCycle(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   275  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   276  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   277      Dem_EvtSetTestFailedTFCSincePreinit(EventId, FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   278      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   279  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   280      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   281  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   282  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   283  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   284  DEM_INLINE void Dem_EvtSt_HandleIndicatorOn(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   285  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   286      Dem_ISO14229ByteSetWarningIndicatorRequested(&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   287  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   288      Dem_EvtSt_CustomIndicatorOn(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   289  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   290  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   291  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   292  DEM_INLINE void Dem_EvtSt_HandleIndicatorOff(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   293  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   294      Dem_ISO14229ByteSetWarningIndicatorRequested(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   295  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   296      Dem_EvtSt_CustomIndicatorOff(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   297  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   298  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   299  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   300  DEM_INLINE void Dem_EvtSt_HandleDTCSettingOn(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   301  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   302  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   303      Dem_EvtSt_CustomDTCSettingOn(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   304  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   305      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   306  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   307  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   308  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   309  DEM_INLINE void Dem_EvtSt_HandleConfirmation(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   310  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   311      Dem_ISO14229ByteSetPendingDTC(&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   312      Dem_ISO14229ByteSetConfirmedDTC(&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   313  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   314      Dem_EvtSt_CustomConfirmation(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   315  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   316  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   317  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   318  DEM_INLINE void Dem_EvtSt_HandleAging(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   319  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   320      if ( Dem_LibGetParamBool(DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT) )
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   321      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   322          Dem_ISO14229ByteSetTestFailedSLC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   323      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   324      Dem_ISO14229ByteSetConfirmedDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   325  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   326  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   327      Dem_EvtSt_CustomAging(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   328  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   329  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   330  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   331  DEM_INLINE void Dem_EvtSt_HandleAgingOfConfirmed(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   332  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   333  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   334      Dem_ISO14229ByteSetConfirmedDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   335  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   336  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   337      Dem_EvtSt_CustomAging(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   338  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   339  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   340  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   341  #if (DEM_CFG_PRJSPECIFICEVENTSTATUSHANDLING == FALSE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   342  DEM_INLINE void Dem_EvtSt_HandleImmediateAging(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   343  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   344      if ( Dem_LibGetParamBool(DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT) )
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   345      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   346          Dem_ISO14229ByteSetTestFailedSLC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   347      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   348      Dem_ISO14229ByteSetConfirmedDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   349      Dem_ISO14229ByteSetPendingDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   350  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   351      Dem_EvtSt_CustomSetImmediateAging(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   352  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   353  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   354  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   355  #include "Dem_PrjEventStatus.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   356  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   357  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   358  DEM_INLINE void Dem_EvtSt_HandleDisplacement(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   359  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   360      if ( Dem_LibGetParamBool(DEM_CFG_EVMEM_RESET_CONFIRMED_BIT_ON_OVERFLOW) )
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   361      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   362          if ( Dem_LibGetParamBool(DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   363          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   364              Dem_ISO14229ByteSetTestFailedSLC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   365          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   366          Dem_ISO14229ByteSetConfirmedDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   367      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   368      Dem_ISO14229ByteSetPendingDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   369  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   370  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   371      Dem_EvtSt_CustomDisplacement(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   372  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   373  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   374  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   375  DEM_INLINE void Dem_EvtSt_HandleEvCombinationReplacement(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   376  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   377      /* this function is used for event combination "on storage" for the event of a dtc, which is replaced by another event of the same dtc */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   378      if ( Dem_LibGetParamBool(DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT) )
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   379      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   380          Dem_ISO14229ByteSetTestFailedSLC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   381      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   382      Dem_ISO14229ByteSetConfirmedDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   383  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   384      Dem_ISO14229ByteSetPendingDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   385  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   386  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   387      Dem_EvtSt_CustomEvCombinationReplacement(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   388  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   389  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   390  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   391  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   392  DEM_INLINE void Dem_EvtSt_HandlePendingDTC(Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   393  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   394      Dem_ISO14229ByteSetPendingDTC(&(Dem_AllEventsStatusByte[EventId]), setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   395  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   396      Dem_EvtSt_CustomSetPending(EventId, &(Dem_AllEventsStatusByteCust[EventId]), setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   397  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   398  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   399  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   400  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   401  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   402  /****** ATTENTION: May only be used by consistency checks; otherwise use the HandleXXX functions! ******/
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   403  DEM_INLINE Dem_boolean_least Dem_EvtSt_GetTestFailed(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   404  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   405      return Dem_ISO14229ByteIsTestFailed(Dem_AllEventsStatusByte[EventId]);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   406  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   407  DEM_INLINE Dem_boolean_least Dem_EvtSt_GetTestFailedTOC(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   408  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   409      return Dem_ISO14229ByteIsTestFailedTOC(Dem_AllEventsStatusByte[EventId]);
	movh.a	a15,#@his(Dem_AllEventsStatusByte)
	lea	a15,[a15]@los(Dem_AllEventsStatusByte)
.L825:
	addsc.a	a15,a15,d4,#0
	ld.bu	d15,[a15]
.L396:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     4  #ifndef DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     5  #define DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     8  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    11  /* Refer to Dem_UdsStatusByteType */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    14  #define DEM_ISO14229_TESTFAILED             0u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    15  #define DEM_ISO14229_TESTFAILED_TOC         1u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    16  #define DEM_ISO14229_TESTFAILED_SLC         5u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    17  #define DEM_ISO14229_TESTNOTCOMPLETE_TOC    6u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    18  #define DEM_ISO14229_TESTNOTCOMPLETE_SLC    4u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    19  #define DEM_ISO14229_PENDINGDTC             2u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    20  #define DEM_ISO14229_CONFIRMEDDTC           3u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    21  #define DEM_ISO14229_WARNINGINDICATOR       7u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    23  #define DEM_ISO14229_BM_TESTFAILED             (1u<<DEM_ISO14229_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    24  #define DEM_ISO14229_BM_TESTFAILED_TOC         (1u<<DEM_ISO14229_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    25  #define DEM_ISO14229_BM_TESTFAILED_SLC         (1u<<DEM_ISO14229_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    26  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    27  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    28  #define DEM_ISO14229_BM_PENDINGDTC             (1u<<DEM_ISO14229_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    29  #define DEM_ISO14229_BM_CONFIRMEDDTC           (1u<<DEM_ISO14229_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    30  #define DEM_ISO14229_BM_WARNINGINDICATOR       (1u<<DEM_ISO14229_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    32  #if (DEM_ISO14229_BM_TESTFAILED           !=  DEM_UDS_STATUS_TF)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    33  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    34  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    36  #if (DEM_ISO14229_BM_TESTFAILED_TOC       !=  DEM_UDS_STATUS_TFTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    37  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    40  #if (DEM_ISO14229_BM_TESTFAILED_SLC       !=  DEM_UDS_STATUS_TFSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    41  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    42  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    44  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC  !=  DEM_UDS_STATUS_TNCTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    45  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    46  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    48  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC  !=  DEM_UDS_STATUS_TNCSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    49  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    52  #if (DEM_ISO14229_BM_PENDINGDTC           !=  DEM_UDS_STATUS_PDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    53  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    54  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    56  #if (DEM_ISO14229_BM_CONFIRMEDDTC         !=  DEM_UDS_STATUS_CDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    57  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    60  #if (DEM_ISO14229_BM_WARNINGINDICATOR     !=  DEM_UDS_STATUS_WIR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    61  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    62  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    66  #define DEM_ISO14229BYTE_INITVALUE            		( (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)|(DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC) )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    67  #define DEM_ISO14229BYTE_MASK_PENDING_CONFIRMED     ( DEM_ISO14229_BM_PENDINGDTC | DEM_ISO14229_BM_CONFIRMEDDTC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    68  /*#define DEM_ISO14229BYTE_MASK_FAILED_COMPLETE_WIR   ( DEM_ISO14229_BM_TESTFAILED | DEM_ISO14229_BM_TESTFAILED_TOC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    69                                                        | DEM_ISO14229_BM_TESTFAILED_SLC | DEM_ISO14229_BM_WARNINGINDICATOR \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    70                                                        | DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC | DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    71   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    73  #define DEM_ISO14229BYTE_MASK_INDICATOR_OFF			(DEM_ISO14229_BM_CONFIRMEDDTC | DEM_ISO14229_BM_TESTFAILED \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    74                                                        | DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    76  #define DEM_ISO14229BYTE_MASK_TESTFAILEDSINCELASTCLEAR     ( DEM_ISO14229_BM_TESTFAILED_SLC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    78  #if (DEM_UDS_STATUS_TF     != DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    79  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    80  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    81  #if (DEM_UDS_STATUS_TFTOC  != DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    82  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    84  #if (DEM_UDS_STATUS_PDTC   != DEM_ISO14229_BM_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    85  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    86  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    87  #if (DEM_UDS_STATUS_CDTC   != DEM_ISO14229_BM_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    88  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    89  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    90  #if (DEM_UDS_STATUS_TNCSLC != DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    91  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    93  #if (DEM_UDS_STATUS_TFSLC  != DEM_ISO14229_BM_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    94  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    95  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    96  #if (DEM_UDS_STATUS_TNCTOC != DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    97  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    98  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    99  #if (DEM_UDS_STATUS_WIR    != DEM_ISO14229_BM_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   100  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   101  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   108  /*
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   109   * concept idea for triggering storage to NVM for single status bytes
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   110   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   111  #define DEM_ISO14229BYTE_NVMTRIGGER(STATUSBITSTORAGETESTFAILED, OPERATIONCYCLE_IS_PC) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   112          (0|DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   113                  |DEM_ISO14229_BM_TESTFAILED_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   114                  |(DEM_ISO14229_BM_TESTFAILED*(STATUSBITSTORAGETESTFAILED)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   115                  |(DEM_ISO14229_BM_TESTFAILED_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   116                  |(DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   117          )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   120  /* query functions */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   122  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailed (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   128  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   129  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   130  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   131      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_TOC);
	mov	d0,#1
.L401:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L826:
	and	d15,#1
.L827:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L21

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L21:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L828:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L22

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L22:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   131      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_TOC);      (inlined)
	j	.L23

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   132  }      (inlined)
.L23:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   409      return Dem_ISO14229ByteIsTestFailedTOC(Dem_AllEventsStatusByte[EventId]);      (inlined)
	j	.L24

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   410  }      (inlined)
.L24:
	jne	d15,#0,.L25
.L20:
.L18:
.L14:
	mov	d2,#1
.L25:
	j	.L26

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   106      );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   107  }
.L26:
	ret
.L361:
	
__Dem_EvtIsRecoverable_function_end:
	.size	Dem_EvtIsRecoverable,__Dem_EvtIsRecoverable_function_end-Dem_EvtIsRecoverable
.L208:
	; End of function
	
	.sdecl	'.text.Dem_Events.Dem_EvtClearEventAllowed',code,cluster('Dem_EvtClearEventAllowed')
	.sect	'.text.Dem_Events.Dem_EvtClearEventAllowed'
	.align	2
	
	.global	Dem_EvtClearEventAllowed

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   108  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   109  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   110  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId )
; Function Dem_EvtClearEventAllowed
.L150:
Dem_EvtClearEventAllowed:	.type	func

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   111  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   112    boolean ret_val = TRUE;
	mov	d2,#1
.L676:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   113    DEM_UNUSED_PARAM(eventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   114  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   115  #if ( DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   116    if ( Dem_EvtParam_GetCallbackClearAllowed(eventId) != NULL_PTR )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   117    {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   118      (void) (Dem_EvtParam_GetCallbackClearAllowed(eventId))(&ret_val);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   119    }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   120    else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   121  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   122    {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   123  #if ( DEM_CFG_EVT_GLOBALCLEARALLOWEDCALLBACK != DEM_CFG_EVT_GLOBALCLEARALLOWEDCALLBACK_OFF )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   124      (void) DEM_CFG_EVT_GLOBALCLEARALLOWEDCALLBACKFNC (eventId, &ret_val);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   125  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   126    }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   127    return (ret_val);
	j	.L27

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   128  }
.L27:
	ret
.L402:
	
__Dem_EvtClearEventAllowed_function_end:
	.size	Dem_EvtClearEventAllowed,__Dem_EvtClearEventAllowed_function_end-Dem_EvtClearEventAllowed
.L213:
	; End of function
	
	.sdecl	'.text.Dem_Events.Dem_EvtPreInitEvents',code,cluster('Dem_EvtPreInitEvents')
	.sect	'.text.Dem_Events.Dem_EvtPreInitEvents'
	.align	2
	
	.global	Dem_EvtPreInitEvents

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   129  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   130  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   131  void Dem_EvtPreInitEvents(void)
; Function Dem_EvtPreInitEvents
.L152:
Dem_EvtPreInitEvents:	.type	func
	sub.a	a10,#8
.L677:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   132  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   133  	Dem_EventIdIterator eventIt;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   134  	Dem_EventIdType eventId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   135  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   136  	for (Dem_EventIdIteratorNew(&eventIt); Dem_EventIdIteratorIsValid(&eventIt); Dem_EventIdIteratorNext(&eventIt))
	lea	a15,[a10]0
.L476:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
	mov	d15,#1
.L862:
	st.w	[a15],d15
.L477:
	j	.L28
.L29:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   137  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   138  		eventId = Dem_EventIdIteratorCurrent(&eventIt);
	lea	a15,[a10]0
.L479:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
	ld.w	d15,[a15]
.L863:
	extr.u	d4,d15,#0,#16
.L678:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);      (inlined)
	j	.L30

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }      (inlined)
.L30:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   139  		Dem_EvtSetLastReportedEvent(eventId, DEM_EVENT_STATUS_INVALIDREPORT);
	mov	d15,#255
.L482:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
	movh.a	a15,#@his(Dem_AllEventsState8)
	lea	a15,[a15]@los(Dem_AllEventsState8)
.L864:
	addsc.a	a15,a15,d4,#0
.L865:
	st.b	[a15],d15
.L483:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     3  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     4  #ifndef DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     5  #define DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     6  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     7  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     9  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    10  #include "Dem_Cfg_EventId.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    11  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    12  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    13  #include "Dem_Cfg_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    14  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    15  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    16  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    17  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    18  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    19  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    20  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    21  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    22  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    23  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    24  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    25  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    26  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    29  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    30  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    31  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    32  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    33  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    34  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    35  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    38  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    39  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    41  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    42  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    43  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    46  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    47  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetCustIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    48  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    49      return Dem_AllEventsStatusByteCust[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    50  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    51  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    52  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    53  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    54  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    55  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    57  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    58  #include "Dem_CustomStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    59  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    60  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    61  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    62  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    63  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    65  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    66  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    67  #define DEM_STATUSBYTE_EVENT_UNAVAILABLE                   (0x00)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    68  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_SETMASK          (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    69  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_CLEARMASK        (DEM_ISO14229_BM_TESTFAILED_TOC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    70  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    71  #define DEM_INIT_ISOBITS_CLEARMASK									(DEM_ISO14229_BM_TESTFAILED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    72  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    74  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    75  void Dem_EventStatusInitCheckNvM(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    76  void Dem_ClearEvent(Dem_EventIdType eventId, boolean ClearFully);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    77  void Dem_EvtAdvanceOperationCycle(Dem_OperationCycleList operationCycleList);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    78  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    79  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    80  /* Duplicate of Dem_GetEventStatus to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    81  Std_ReturnType Dem_GetEventStatus_GeneralEvtInfo(Dem_EventIdType EventId, Dem_UdsStatusByteType* EventStatusExtended);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    82  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    83  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    84  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    85  DEM_INLINE void Dem_InitEventStatusTestFailed(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    86  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    87  #if (!DEM_CFG_EVMEM_STORAGE_TESTFAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    88  	Dem_EventIdIterator eventIt;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    89  	Dem_EventIdType eventId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    90  	Dem_UdsStatusByteType statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    92  	for (Dem_EventIdIteratorNew(&eventIt); Dem_EventIdIteratorIsValid(&eventIt); Dem_EventIdIteratorNext(&eventIt))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    93  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    94  		eventId = Dem_EventIdIteratorCurrent(&eventIt);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    95  		statusNew = Dem_EvtGetIsoByte(eventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    96  		if (!Dem_EvtParam_GetStoreTestFailedToNextOC(eventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    97  		{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    98  			statusNew &= (Dem_UdsStatusByteType)(~DEM_INIT_ISOBITS_CLEARMASK);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    99  		}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   100  		Dem_AllEventsStatusByte[eventId] = statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   101  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   102  		Dem_AllEventsStatusByteCust[eventId] = statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   103  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   104  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   105  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   106  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   107  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   108  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   109  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte4DtcCalculation (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   110  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   111  #if !DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   112      return Dem_AllEventsStatusByte[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   113  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   114      return Dem_AllEventsStatusByteCust[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   115  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   116  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   118  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   119  /*
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   120   * Called in Dem_EvtProcessPassedAndFailed() to check whether the reported status would change the event status information
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   121   */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   122  DEM_INLINE Dem_boolean_least Dem_EvtSt_IsUpdateNeeded(Dem_EventIdType EventId, Dem_boolean_least reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   123  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   124      return (
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   125             (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetIsoByte(EventId)) != reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   126          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetIsoByte(EventId)))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   127  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   128  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   129          || (reportIsFailed && !Dem_EvtGetTestFailedTFCSincePreinit(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   130          || (!Dem_EvtGetTestCompleteTFCSincePreinit(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   131  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   132  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   133  #if (DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   134          || (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetCustIsoByte(EventId)) != reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   135          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetCustIsoByte(EventId)))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   136  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   137      );
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   138  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   139  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   141  DEM_INLINE void Dem_EvtSt_HandleInitialization (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   142  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   143      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
	movh.a	a15,#@his(Dem_AllEventsStatusByte)
	lea	a15,[a15]@los(Dem_AllEventsStatusByte)
.L866:
	addsc.a	a15,a15,d4,#0
.L867:
	mov	d15,#80
.L868:
	st.b	[a15],d15

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   144  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L31:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    53  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    54  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    55  LOCAL_INLINE boolean Dem_EvtParam_GetStoreTestFailedToNextOC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    56  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    57  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    58  	return TRUE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    59  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    60  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    61  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    62  LOCAL_INLINE boolean Dem_EvtParam_GetRequestsWarningIndicator(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    65  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    68  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    69  LOCAL_INLINE Dem_EventCategoryType Dem_EvtParam_GetCategory(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    70  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    71  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    72  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    73  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    74  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    75  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInPrimary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    76  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    80  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    81  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    82  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInSecondary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    83  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    84  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    85  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    86  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    87  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    88  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    89  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInMirror(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    90  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    91  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    92  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    93  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    94  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    95  LOCAL_INLINE boolean Dem_EvtParam_GetAgingAllowed(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    96  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    97  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    98  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 1);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    99  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   100  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   101  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   102  LOCAL_INLINE boolean Dem_EvtParam_GetIsGlobalFDCCallbackConfigured(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   103  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   104  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   105  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   106  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   107  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   108  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   109  LOCAL_INLINE boolean Dem_EvtParam_GetTriggersDataChangedCallback(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   110  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   111  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   112  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   113  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   114  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   115  LOCAL_INLINE uint8 Dem_EvtParam_GetSignificance(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   116  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   117  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   118  	return (uint8)(RBA_DIAGLIB_GETSINGLEBIT16(Dem_EvtParam_16[indx].dataDataContainer_2, 2));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   119  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   120  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   121  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   122  LOCAL_INLINE uint8 Dem_EvtParam_GetOperationCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   123  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   124  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   125  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   126  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   127  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   128  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   129  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   130  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   131  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   132  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   133  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   134  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   135  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   136  LOCAL_INLINE uint8 Dem_EvtParam_GetFailureCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   137  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   138  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   139  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   140  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   141  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   142  LOCAL_INLINE boolean Dem_EvtParam_GetInitialSuppressionStatus(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   143  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   144  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   145  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 3);
	movh.a	a15,#@his(Dem_EvtParam_16)
	lea	a15,[a15]@los(Dem_EvtParam_16)
.L869:
	addsc.a	a15,a15,d4,#1
.L870:
	ld.hu	d15,[a15]0
.L871:
	mov	d0,#3
.L498:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     3  #ifndef RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     4  #define RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     9  #define RBA_DIAGLIB_ISBITSET16       rba_DiagLib_Bit16IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT16   rba_DiagLib_Bit16GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    11  #define RBA_DIAGLIB_GETBITS16        rba_DiagLib_Bit16GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT16   rba_DiagLib_Bit16OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS16  rba_DiagLib_Bit16OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    15  LOCAL_INLINE uint16 rba_DiagLib_Bit16Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    17      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    21  LOCAL_INLINE void rba_DiagLib_Bit16SetBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    26  LOCAL_INLINE void rba_DiagLib_Bit16ClearBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    28      *buffer &= ((uint16) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    31  LOCAL_INLINE void rba_DiagLib_Bit16MergeBitmask(uint16 *buffer, uint16 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    36  LOCAL_INLINE void rba_DiagLib_Bit16SetBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    38      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    39      *buffer |= ((uint16) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    42  LOCAL_INLINE void rba_DiagLib_Bit16ClearBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    44      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    45      *buffer &= ((uint16) (~((uint16) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    48  LOCAL_INLINE void rba_DiagLib_Bit16OverwriteBit(uint16 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    52          rba_DiagLib_Bit16SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    56          rba_DiagLib_Bit16ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    60  LOCAL_INLINE uint16 rba_DiagLib_Bit16GetSingleBit(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    62      return (uint16) ((value >> bit_position) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L872:
	and	d15,#1
.L873:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    62      return (uint16) ((value >> bit_position) & 1u);      (inlined)
	j	.L32

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    63  }      (inlined)
.L32:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    64  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    65  LOCAL_INLINE boolean rba_DiagLib_Bit16IsBitSet(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    66  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    67      return (boolean) (rba_DiagLib_Bit16GetSingleBit(value, bit_position) != 0u);
	ne	d5,d15,#0
.L874:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    67      return (boolean) (rba_DiagLib_Bit16GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L33

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    68  }      (inlined)
.L33:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   145  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 3);      (inlined)
	j	.L34

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   146  }      (inlined)
.L34:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
	movh.a	a15,#@his(Dem_AllEventsState)
	lea	a15,[a15]@los(Dem_AllEventsState)
.L875:
	addsc.a	a15,a15,d4,#2
.L876:
	ld.bu	d15,[a15]
.L877:
	mov	d0,#2
.L511:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L878:
	and	d15,#1
.L879:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L35

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L35:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L880:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L36

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L36:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);      (inlined)
	j	.L37

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   631  }      (inlined)
.L37:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   140  		Dem_EvtSt_HandleInitialization(eventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   141  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   142  		/**
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   143  		 * Function to update "DemEventSuppression" configuration value as intial value for availability of an event
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   144  		 * and may be changed dynamically via API Dem_SetEventSuppression().
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   145  		 */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   146  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   147  #if (DEM_CFG_BUILDTARGET == DEM_CFG_BUILDTARGET_DEMTESTSUITE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   148  		if (TESTSUITE_ALLOW_INITIALIZE_EVENT_SUPPRESSION)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   149  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   150  		{
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   151  		    Dem_boolean_least initialSuppression = Dem_EvtParam_GetInitialSuppressionStatus(eventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   152  		    if (Dem_EvtIsSuppressed(eventId) != initialSuppression)
	jeq	d15,d5,.L38
.L496:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   153  		    {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   154  		        DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   155  		        Dem_EvtSetSuppression(eventId, initialSuppression);
	call	Dem_EvtSetSuppression
.L38:
	lea	a15,[a10]0
.L516:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
	ld.w	d15,[a15]
.L881:
	add	d15,#1
	st.w	[a15],d15
.L28:
	lea	a15,[a10]0
.L518:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
	ld.w	d15,[a15]
.L882:
	mov	d0,#5
.L883:
	ge.u	d15,d0,d15
.L884:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);      (inlined)
	j	.L39

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }      (inlined)
.L39:
	jne	d15,#0,.L29
.L885:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   156  		        DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   157  		    }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   158  		}
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   159  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   160  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   161  }
	ret
.L473:
	
__Dem_EvtPreInitEvents_function_end:
	.size	Dem_EvtPreInitEvents,__Dem_EvtPreInitEvents_function_end-Dem_EvtPreInitEvents
.L228:
	; End of function
	
	.sdecl	'.text.Dem_Events.Dem_EvtInitEvents',code,cluster('Dem_EvtInitEvents')
	.sect	'.text.Dem_Events.Dem_EvtInitEvents'
	.align	2
	
	.global	Dem_EvtInitEvents

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   162  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   163  void Dem_EvtInitEvents(void)
; Function Dem_EvtInitEvents
.L154:
Dem_EvtInitEvents:	.type	func
	sub.a	a10,#8
.L679:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   164  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   165  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   166      Dem_EventIdType EventId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   167      Dem_EventIdIterator eventIt;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   168  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   169      for (Dem_EventIdIteratorNew(&eventIt); Dem_EventIdIteratorIsValid(&eventIt); Dem_EventIdIteratorNext(&eventIt))
	lea	a15,[a10]0
.L523:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
	mov	d15,#1
.L890:
	st.w	[a15],d15
.L524:
	j	.L40
.L41:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   170      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   171          EventId = Dem_EventIdIteratorCurrent(&eventIt);
	lea	a15,[a10]0
.L526:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
	ld.w	d15,[a15]
.L891:
	extr.u	d15,d15,#0,#16
.L680:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);      (inlined)
	j	.L42

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }      (inlined)
.L42:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
	movh.a	a15,#@his(Dem_AllEventsState)
	lea	a15,[a15]@los(Dem_AllEventsState)
.L892:
	addsc.a	a15,a15,d15,#2
.L893:
	ld.bu	d0,[a15]
.L894:
	mov	d1,#2
.L530:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d1,#0
	sha	d0,d0,d1
.L895:
	and	d0,d0,#1
.L896:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L43

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L43:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d0,d0,#0
.L897:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L44

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L44:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);      (inlined)
	j	.L45

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   631  }      (inlined)
.L45:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   172          if(Dem_EvtIsSuppressed(EventId))
	jeq	d0,#0,.L46
.L528:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     3  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     4  #ifndef DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     5  #define DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     6  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     7  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     9  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    10  #include "Dem_Cfg_EventId.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    11  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    12  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    13  #include "Dem_Cfg_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    14  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    15  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    16  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    17  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    18  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    19  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    20  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    21  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    22  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    23  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    24  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    25  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    26  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    29  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    30  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    31  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    32  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    33  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    34  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    35  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    38  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    39  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    41  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    42  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    43  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    46  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    47  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetCustIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    48  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    49      return Dem_AllEventsStatusByteCust[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    50  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    51  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    52  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    53  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    54  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    55  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    57  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    58  #include "Dem_CustomStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    59  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    60  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    61  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    62  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    63  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    65  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    66  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    67  #define DEM_STATUSBYTE_EVENT_UNAVAILABLE                   (0x00)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    68  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_SETMASK          (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    69  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_CLEARMASK        (DEM_ISO14229_BM_TESTFAILED_TOC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    70  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    71  #define DEM_INIT_ISOBITS_CLEARMASK									(DEM_ISO14229_BM_TESTFAILED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    72  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    74  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    75  void Dem_EventStatusInitCheckNvM(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    76  void Dem_ClearEvent(Dem_EventIdType eventId, boolean ClearFully);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    77  void Dem_EvtAdvanceOperationCycle(Dem_OperationCycleList operationCycleList);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    78  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    79  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    80  /* Duplicate of Dem_GetEventStatus to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    81  Std_ReturnType Dem_GetEventStatus_GeneralEvtInfo(Dem_EventIdType EventId, Dem_UdsStatusByteType* EventStatusExtended);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    82  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    83  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    84  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    85  DEM_INLINE void Dem_InitEventStatusTestFailed(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    86  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    87  #if (!DEM_CFG_EVMEM_STORAGE_TESTFAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    88  	Dem_EventIdIterator eventIt;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    89  	Dem_EventIdType eventId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    90  	Dem_UdsStatusByteType statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    92  	for (Dem_EventIdIteratorNew(&eventIt); Dem_EventIdIteratorIsValid(&eventIt); Dem_EventIdIteratorNext(&eventIt))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    93  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    94  		eventId = Dem_EventIdIteratorCurrent(&eventIt);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    95  		statusNew = Dem_EvtGetIsoByte(eventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    96  		if (!Dem_EvtParam_GetStoreTestFailedToNextOC(eventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    97  		{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    98  			statusNew &= (Dem_UdsStatusByteType)(~DEM_INIT_ISOBITS_CLEARMASK);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    99  		}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   100  		Dem_AllEventsStatusByte[eventId] = statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   101  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   102  		Dem_AllEventsStatusByteCust[eventId] = statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   103  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   104  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   105  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   106  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   107  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   108  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   109  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte4DtcCalculation (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   110  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   111  #if !DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   112      return Dem_AllEventsStatusByte[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   113  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   114      return Dem_AllEventsStatusByteCust[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   115  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   116  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   118  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   119  /*
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   120   * Called in Dem_EvtProcessPassedAndFailed() to check whether the reported status would change the event status information
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   121   */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   122  DEM_INLINE Dem_boolean_least Dem_EvtSt_IsUpdateNeeded(Dem_EventIdType EventId, Dem_boolean_least reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   123  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   124      return (
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   125             (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetIsoByte(EventId)) != reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   126          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetIsoByte(EventId)))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   127  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   128  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   129          || (reportIsFailed && !Dem_EvtGetTestFailedTFCSincePreinit(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   130          || (!Dem_EvtGetTestCompleteTFCSincePreinit(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   131  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   132  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   133  #if (DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   134          || (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetCustIsoByte(EventId)) != reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   135          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetCustIsoByte(EventId)))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   136  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   137      );
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   138  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   139  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   141  DEM_INLINE void Dem_EvtSt_HandleInitialization (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   142  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   143      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   145      /* We don't need to reset Test*TFCSincePreinit here because it is already properly initialized by static
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   146       * initialization with zeros on ECU startup */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   148  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   149      Dem_EvtSt_CustomInitialization(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   150  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   151  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   152  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   153  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   154  DEM_INLINE void Dem_EvtSt_HandleFailed(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   155  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   156      Dem_ISO14229ByteSetTestFailed (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   157      Dem_ISO14229ByteSetTestFailedTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   158      Dem_ISO14229ByteSetTestFailedSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   159      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   160      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   161      /* only valid with failurecycle=operationcycle
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   162      Dem_ISO14229ByteSetPendingDTC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   163      */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   164  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   165  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   166      Dem_EvtSetTestFailedTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   167      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   168  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   169  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   170  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   171      Dem_EvtSt_CustomFailed(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   175  DEM_INLINE void Dem_EvtSt_HandlePassed(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   176  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   177      Dem_ISO14229ByteSetTestFailed (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   178      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   179      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   180  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   181  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   182      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   183  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   184  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   185  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   186      Dem_EvtSt_CustomPassed(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   187  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   188  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   190  DEM_INLINE void Dem_EvtSt_HandleResetEventStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   191  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   192      Dem_ISO14229ByteSetTestFailed(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   193  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   194      Dem_EvtSt_CustomResetEventStatus(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   195  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   198  DEM_INLINE void Dem_EvtSt_HandleEvtAvailable(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   199  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   200      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   201  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   202      Dem_EvtSt_CustomEvtAvailable(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   203  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   204  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   205  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   206  DEM_INLINE void Dem_EvtSt_HandleEvtNotAvailable(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   207  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   208      Dem_AllEventsStatusByte[EventId] = DEM_STATUSBYTE_EVENT_UNAVAILABLE;
	movh.a	a15,#@his(Dem_AllEventsStatusByte)
	lea	a15,[a15]@los(Dem_AllEventsStatusByte)
.L898:
	addsc.a	a15,a15,d15,#0
.L899:
	mov	d15,#0
.L681:
	st.b	[a15],d15
.L46:
	lea	a15,[a10]0
.L539:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
	ld.w	d15,[a15]
.L900:
	add	d15,#1
	st.w	[a15],d15
.L40:
	lea	a15,[a10]0
.L541:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
	ld.w	d15,[a15]
.L901:
	mov	d0,#5
.L902:
	ge.u	d15,d0,d15
.L903:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);      (inlined)
	j	.L47

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }      (inlined)
.L47:
	jne	d15,#0,.L41
.L904:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   173          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   174              Dem_EvtSt_HandleEvtNotAvailable(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   175          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   176      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   177  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   178  }
	ret
.L520:
	
__Dem_EvtInitEvents_function_end:
	.size	Dem_EvtInitEvents,__Dem_EvtInitEvents_function_end-Dem_EvtInitEvents
.L233:
	; End of function
	
	.sdecl	'.text.Dem_Events.Dem_EvtResetIsoByteCallback',code,cluster('Dem_EvtResetIsoByteCallback')
	.sect	'.text.Dem_Events.Dem_EvtResetIsoByteCallback'
	.align	2
	
	.global	Dem_EvtResetIsoByteCallback

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   179  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   180  /* According to prototype "Std_ReturnType InitBlockCallbackFunction(void)" from NVM, this callback shall be called by
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   181   * NVM, if the Iso-statusbytes may not be read from EEPROM. => enter in NvMInitBlockCallback
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   182   */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   183  Std_ReturnType Dem_EvtResetIsoByteCallback(void)
; Function Dem_EvtResetIsoByteCallback
.L156:
Dem_EvtResetIsoByteCallback:	.type	func
	sub.a	a10,#8
.L682:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   184  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   185  	Dem_EventIdIterator eventIt;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   186  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   187  	for (Dem_EventIdIteratorNew(&eventIt); Dem_EventIdIteratorIsValid(&eventIt); Dem_EventIdIteratorNext(&eventIt))
	lea	a15,[a10]0
.L448:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
	mov	d15,#1
.L846:
	st.w	[a15],d15
.L449:
	j	.L48
.L49:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   188  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   189          Dem_EvtSt_HandleInitialization(Dem_EventIdIteratorCurrent(&eventIt));
	lea	a15,[a10]0
.L454:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
	ld.w	d15,[a15]
.L847:
	extr.u	d15,d15,#0,#16
.L848:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);      (inlined)
	j	.L50

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }      (inlined)
.L50:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     3  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     4  #ifndef DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     5  #define DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     6  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     7  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     9  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    10  #include "Dem_Cfg_EventId.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    11  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    12  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    13  #include "Dem_Cfg_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    14  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    15  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    16  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    17  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    18  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    19  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    20  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    21  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    22  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    23  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    24  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    25  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    26  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    29  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    30  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    31  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    32  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    33  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    34  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    35  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    38  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    39  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    41  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    42  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    43  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    46  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    47  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetCustIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    48  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    49      return Dem_AllEventsStatusByteCust[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    50  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    51  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    52  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    53  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    54  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    55  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    57  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    58  #include "Dem_CustomStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    59  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    60  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    61  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    62  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    63  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    65  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    66  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    67  #define DEM_STATUSBYTE_EVENT_UNAVAILABLE                   (0x00)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    68  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_SETMASK          (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    69  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_CLEARMASK        (DEM_ISO14229_BM_TESTFAILED_TOC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    70  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    71  #define DEM_INIT_ISOBITS_CLEARMASK									(DEM_ISO14229_BM_TESTFAILED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    72  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    74  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    75  void Dem_EventStatusInitCheckNvM(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    76  void Dem_ClearEvent(Dem_EventIdType eventId, boolean ClearFully);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    77  void Dem_EvtAdvanceOperationCycle(Dem_OperationCycleList operationCycleList);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    78  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    79  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    80  /* Duplicate of Dem_GetEventStatus to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    81  Std_ReturnType Dem_GetEventStatus_GeneralEvtInfo(Dem_EventIdType EventId, Dem_UdsStatusByteType* EventStatusExtended);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    82  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    83  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    84  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    85  DEM_INLINE void Dem_InitEventStatusTestFailed(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    86  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    87  #if (!DEM_CFG_EVMEM_STORAGE_TESTFAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    88  	Dem_EventIdIterator eventIt;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    89  	Dem_EventIdType eventId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    90  	Dem_UdsStatusByteType statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    92  	for (Dem_EventIdIteratorNew(&eventIt); Dem_EventIdIteratorIsValid(&eventIt); Dem_EventIdIteratorNext(&eventIt))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    93  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    94  		eventId = Dem_EventIdIteratorCurrent(&eventIt);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    95  		statusNew = Dem_EvtGetIsoByte(eventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    96  		if (!Dem_EvtParam_GetStoreTestFailedToNextOC(eventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    97  		{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    98  			statusNew &= (Dem_UdsStatusByteType)(~DEM_INIT_ISOBITS_CLEARMASK);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    99  		}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   100  		Dem_AllEventsStatusByte[eventId] = statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   101  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   102  		Dem_AllEventsStatusByteCust[eventId] = statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   103  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   104  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   105  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   106  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   107  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   108  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   109  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte4DtcCalculation (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   110  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   111  #if !DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   112      return Dem_AllEventsStatusByte[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   113  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   114      return Dem_AllEventsStatusByteCust[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   115  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   116  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   118  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   119  /*
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   120   * Called in Dem_EvtProcessPassedAndFailed() to check whether the reported status would change the event status information
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   121   */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   122  DEM_INLINE Dem_boolean_least Dem_EvtSt_IsUpdateNeeded(Dem_EventIdType EventId, Dem_boolean_least reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   123  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   124      return (
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   125             (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetIsoByte(EventId)) != reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   126          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetIsoByte(EventId)))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   127  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   128  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   129          || (reportIsFailed && !Dem_EvtGetTestFailedTFCSincePreinit(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   130          || (!Dem_EvtGetTestCompleteTFCSincePreinit(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   131  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   132  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   133  #if (DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   134          || (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetCustIsoByte(EventId)) != reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   135          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetCustIsoByte(EventId)))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   136  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   137      );
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   138  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   139  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   141  DEM_INLINE void Dem_EvtSt_HandleInitialization (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   142  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   143      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
	movh.a	a15,#@his(Dem_AllEventsStatusByte)
	lea	a15,[a15]@los(Dem_AllEventsStatusByte)
.L849:
	addsc.a	a15,a15,d15,#0
.L850:
	mov	d15,#80
.L851:
	st.b	[a15],d15
.L459:
	lea	a15,[a10]0
.L464:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
	ld.w	d15,[a15]
.L852:
	add	d15,#1
	st.w	[a15],d15
.L48:
	lea	a15,[a10]0
.L469:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
	ld.w	d15,[a15]
.L853:
	mov	d0,#5
.L854:
	ge.u	d15,d0,d15
.L855:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);      (inlined)
	j	.L51

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }      (inlined)
.L51:
	jne	d15,#0,.L49
.L856:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   190  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   191  	return E_OK;
	mov	d2,#0
.L857:
	j	.L52

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   192  }
.L52:
	ret
.L445:
	
__Dem_EvtResetIsoByteCallback_function_end:
	.size	Dem_EvtResetIsoByteCallback,__Dem_EvtResetIsoByteCallback_function_end-Dem_EvtResetIsoByteCallback
.L223:
	; End of function
	
	.sdecl	'.text.Dem_Events.Dem_IsInitMonitorForEventRequested',code,cluster('Dem_IsInitMonitorForEventRequested')
	.sect	'.text.Dem_Events.Dem_IsInitMonitorForEventRequested'
	.align	2
	
	.global	Dem_IsInitMonitorForEventRequested

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   193  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   194  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   195  boolean Dem_IsInitMonitorForEventRequested(Dem_EventIdType EventId, Dem_InitMonitorReasonType* InitMonitorReason)
; Function Dem_IsInitMonitorForEventRequested
.L158:
Dem_IsInitMonitorForEventRequested:	.type	func

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
	movh.a	a15,#@his(Dem_AllEventsState)
	lea	a15,[a15]@los(Dem_AllEventsState)
.L798:
	addsc.a	a2,a15,d4,#2
.L799:
	ld.bu	d15,[a2]
.L331:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    68  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    69  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetBits(uint8 value, uint8 bit_position, uint8 number_of_bits)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    70  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    71      uint8 bit2shift = 1;
	mov	d0,#1
.L683:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    72      value = value >> bit_position;
	sha	d15,#-3
.L800:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    73      value = value % ((uint8) (bit2shift << number_of_bits));
	sha	d0,#3
.L684:
	div.u	e0,d15,d0
.L801:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    74      return value;      (inlined)
	j	.L53

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    75  }      (inlined)
.L53:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));      (inlined)
	j	.L54

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }      (inlined)
.L54:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   196  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   197  	uint8_least initMonitoring = Dem_EvtIsInitMonitoringRequested(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   198  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   199  	if (initMonitoring != 0u)
	jeq	d1,#0,.L55
.L326:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
	addsc.a	a2,a15,d4,#2
.L802:
	ld.bu	d15,[a2]
.L341:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    68  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    69  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetBits(uint8 value, uint8 bit_position, uint8 number_of_bits)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    70  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    71      uint8 bit2shift = 1;
	mov	d0,#1
.L685:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    72      value = value >> bit_position;
	sha	d15,#-3
.L803:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    73      value = value % ((uint8) (bit2shift << number_of_bits));
	sha	d0,#3
.L686:
	div.u	e0,d15,d0
.L804:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    74      return value;      (inlined)
	j	.L56

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    75  }      (inlined)
.L56:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));      (inlined)
	j	.L57

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }      (inlined)
.L57:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   200  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   201  		DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   202  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   203  		*InitMonitorReason = Dem_EvtIsInitMonitoringRequested(EventId); /* has to be querried again here inside the lock! */
	st.b	[a4],d1
.L340:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
	addsc.a	a15,a15,d4,#2
.L349:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    68  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    69  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetBits(uint8 value, uint8 bit_position, uint8 number_of_bits)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    70  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    71      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    72      value = value >> bit_position;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    73      value = value % ((uint8) (bit2shift << number_of_bits));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    74      return value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    75  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    76  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    77  LOCAL_INLINE void rba_DiagLib_Bit8ClearBits(uint8 *value, uint8 bit_position, uint8 number_of_bits)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    78  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    79      uint8 bit2shift = 1;
	mov	d15,#1
.L687:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    80      *value &= ((uint8) (~((uint8) ((((uint8) (bit2shift << number_of_bits)) - 1u) << bit_position))));
	ld.bu	d0,[a15]
.L805:
	sha	d15,#3
.L688:
	add	d15,#-1
.L806:
	sh	d15,#3
.L807:
	xor	d15,d15,#255
.L808:
	and	d0,d15
	st.b	[a15],d0
.L344:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   204  		Dem_EvtClearInitMonitoringRequests(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   205  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   206  		DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   207  		return TRUE;
	mov	d2,#1
.L809:
	j	.L58
.L55:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   208  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   209  	return FALSE;
	mov	d2,#0
.L810:
	j	.L59

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   210  }
.L59:
.L58:
	ret
.L319:
	
__Dem_IsInitMonitorForEventRequested_function_end:
	.size	Dem_IsInitMonitorForEventRequested,__Dem_IsInitMonitorForEventRequested_function_end-Dem_IsInitMonitorForEventRequested
.L198:
	; End of function
	
	.sdecl	'.text.Dem_Events.Dem_GetEventTested',code,cluster('Dem_GetEventTested')
	.sect	'.text.Dem_Events.Dem_GetEventTested'
	.align	2
	
	.global	Dem_GetEventTested

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   211  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   212  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   213  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   214  Std_ReturnType  Dem_GetEventTested(Dem_EventIdType  EventId,
; Function Dem_GetEventTested
Dem_GetEventTested:	.type	func

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   215                                     boolean*         EventTested)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   216  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   217      DEM_ENTRY_CONDITION_CHECK_INIT_EVTIDVALID_EVTAVAILABLE(EventId,DEM_DET_APIID_DEM_GETEVENTTESTED,E_NOT_OK);
.L60:
.L61:
.L62:
	movh.a	a15,#@his(Dem_OpMoState)
	lea	a15,[a15]@los(Dem_OpMoState)
	ld.bu	d15,[a15]
	jeq	d15,#2,.L63
	mov	d4,#54
.L689:
	mov	d5,#0
	mov	d6,#12
	mov	d7,#32
	call	Det_ReportError
.L690:
	mov	d2,#1
	j	.L64
.L63:
.L65:
.L66:
.L67:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
	mov	d15,#0
.L736:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
	jeq	d4,#0,.L68
.L737:
	ge.u	d0,d4,#6
.L738:
	sel	d15,d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
.L69:
.L68:
	j	.L70

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }      (inlined)
.L70:
	jne	d15,#0,.L71
.L258:
	mov	d4,#54
.L691:
	mov	d5,#0
	mov	d6,#12
	mov	d7,#16
	call	Det_ReportError
.L692:
	mov	d2,#1
	j	.L72
.L71:
.L73:
.L74:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
	movh.a	a15,#@his(Dem_AllEventsState)
	lea	a15,[a15]@los(Dem_AllEventsState)
.L739:
	addsc.a	a15,a15,d4,#2
.L740:
	ld.bu	d15,[a15]
.L741:
	mov	d0,#2
.L268:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L742:
	and	d15,#1
.L743:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L75

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L75:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L744:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L76

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L76:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);      (inlined)
	j	.L77

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   631  }      (inlined)
.L77:
	jeq	d15,#0,.L78
.L263:
	mov	d2,#1
	j	.L79
.L78:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   218      DEM_ENTRY_CONDITION_CHECK_NOT_NULL_PTR(EventTested,DEM_DET_APIID_DEM_GETEVENTTESTED,E_NOT_OK);
.L80:
.L81:
	jnz.a	a4,.L82
.L745:
	mov	d4,#54
.L693:
	mov	d5,#0
	mov	d6,#12
	mov	d7,#17
	call	Det_ReportError
.L694:
	mov	d2,#1
	j	.L83
.L82:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     3  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     4  #ifndef DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     5  #define DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     6  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     7  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     9  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    10  #include "Dem_Cfg_EventId.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    11  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    12  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    13  #include "Dem_Cfg_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    14  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    15  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    16  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    17  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    18  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    19  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    20  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    21  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    22  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    23  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    24  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    25  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    26  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    29  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    30  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    31  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    32  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    33  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    34  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    35  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    38  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    39  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    41  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    42  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    43  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    46  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    47  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetCustIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    48  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    49      return Dem_AllEventsStatusByteCust[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    50  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    51  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    52  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    53  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    54  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    55  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    57  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    58  #include "Dem_CustomStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    59  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    60  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    61  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    62  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    63  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    65  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    66  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    67  #define DEM_STATUSBYTE_EVENT_UNAVAILABLE                   (0x00)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    68  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_SETMASK          (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    69  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_CLEARMASK        (DEM_ISO14229_BM_TESTFAILED_TOC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    70  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    71  #define DEM_INIT_ISOBITS_CLEARMASK									(DEM_ISO14229_BM_TESTFAILED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    72  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    74  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    75  void Dem_EventStatusInitCheckNvM(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    76  void Dem_ClearEvent(Dem_EventIdType eventId, boolean ClearFully);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    77  void Dem_EvtAdvanceOperationCycle(Dem_OperationCycleList operationCycleList);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    78  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    79  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    80  /* Duplicate of Dem_GetEventStatus to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    81  Std_ReturnType Dem_GetEventStatus_GeneralEvtInfo(Dem_EventIdType EventId, Dem_UdsStatusByteType* EventStatusExtended);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    82  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    83  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    84  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    85  DEM_INLINE void Dem_InitEventStatusTestFailed(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    86  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    87  #if (!DEM_CFG_EVMEM_STORAGE_TESTFAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    88  	Dem_EventIdIterator eventIt;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    89  	Dem_EventIdType eventId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    90  	Dem_UdsStatusByteType statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    92  	for (Dem_EventIdIteratorNew(&eventIt); Dem_EventIdIteratorIsValid(&eventIt); Dem_EventIdIteratorNext(&eventIt))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    93  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    94  		eventId = Dem_EventIdIteratorCurrent(&eventIt);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    95  		statusNew = Dem_EvtGetIsoByte(eventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    96  		if (!Dem_EvtParam_GetStoreTestFailedToNextOC(eventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    97  		{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    98  			statusNew &= (Dem_UdsStatusByteType)(~DEM_INIT_ISOBITS_CLEARMASK);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    99  		}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   100  		Dem_AllEventsStatusByte[eventId] = statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   101  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   102  		Dem_AllEventsStatusByteCust[eventId] = statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   103  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   104  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   105  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   106  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   107  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   108  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   109  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte4DtcCalculation (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   110  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   111  #if !DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   112      return Dem_AllEventsStatusByte[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   113  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   114      return Dem_AllEventsStatusByteCust[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   115  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   116  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   118  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   119  /*
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   120   * Called in Dem_EvtProcessPassedAndFailed() to check whether the reported status would change the event status information
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   121   */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   122  DEM_INLINE Dem_boolean_least Dem_EvtSt_IsUpdateNeeded(Dem_EventIdType EventId, Dem_boolean_least reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   123  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   124      return (
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   125             (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetIsoByte(EventId)) != reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   126          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetIsoByte(EventId)))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   127  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   128  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   129          || (reportIsFailed && !Dem_EvtGetTestFailedTFCSincePreinit(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   130          || (!Dem_EvtGetTestCompleteTFCSincePreinit(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   131  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   132  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   133  #if (DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   134          || (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetCustIsoByte(EventId)) != reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   135          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetCustIsoByte(EventId)))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   136  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   137      );
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   138  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   139  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   141  DEM_INLINE void Dem_EvtSt_HandleInitialization (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   142  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   143      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   145      /* We don't need to reset Test*TFCSincePreinit here because it is already properly initialized by static
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   146       * initialization with zeros on ECU startup */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   148  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   149      Dem_EvtSt_CustomInitialization(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   150  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   151  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   152  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   153  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   154  DEM_INLINE void Dem_EvtSt_HandleFailed(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   155  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   156      Dem_ISO14229ByteSetTestFailed (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   157      Dem_ISO14229ByteSetTestFailedTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   158      Dem_ISO14229ByteSetTestFailedSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   159      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   160      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   161      /* only valid with failurecycle=operationcycle
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   162      Dem_ISO14229ByteSetPendingDTC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   163      */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   164  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   165  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   166      Dem_EvtSetTestFailedTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   167      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   168  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   169  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   170  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   171      Dem_EvtSt_CustomFailed(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   175  DEM_INLINE void Dem_EvtSt_HandlePassed(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   176  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   177      Dem_ISO14229ByteSetTestFailed (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   178      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   179      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   180  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   181  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   182      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   183  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   184  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   185  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   186      Dem_EvtSt_CustomPassed(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   187  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   188  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   190  DEM_INLINE void Dem_EvtSt_HandleResetEventStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   191  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   192      Dem_ISO14229ByteSetTestFailed(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   193  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   194      Dem_EvtSt_CustomResetEventStatus(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   195  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   198  DEM_INLINE void Dem_EvtSt_HandleEvtAvailable(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   199  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   200      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   201  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   202      Dem_EvtSt_CustomEvtAvailable(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   203  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   204  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   205  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   206  DEM_INLINE void Dem_EvtSt_HandleEvtNotAvailable(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   207  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   208      Dem_AllEventsStatusByte[EventId] = DEM_STATUSBYTE_EVENT_UNAVAILABLE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   209  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   210      Dem_EvtSt_CustomEvtNotAvailable(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   211  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   212  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   213  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   214  DEM_INLINE void Dem_EvtSt_HandleClear(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   215  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   216  #if DEM_CFG_CLEARDTCCLEARSALLBITS
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   217      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   218  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   219      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   220      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   221      Dem_ISO14229ByteSetTestFailedTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   222      Dem_ISO14229ByteSetTestFailedSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   223      Dem_ISO14229ByteSetPendingDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   224      Dem_ISO14229ByteSetConfirmedDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   225      if(!(Dem_ISO14229ByteIsTestFailed(Dem_AllEventsStatusByte[EventId])))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   226      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   227          Dem_ISO14229ByteSetWarningIndicatorRequested(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   228      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   229  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   230  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   231  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   232      Dem_EvtSetTestFailedTFCSincePreinit(EventId, FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   233      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   234  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   235  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   236  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   237      Dem_EvtSt_CustomClear(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   238  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   239  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   240  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   241  DEM_INLINE void Dem_EvtSt_HandleClear_OnlyThisCycleAndReadiness(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   242  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   243      Dem_ISO14229ByteSetTestFailedTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   244      Dem_ISO14229ByteSetTestFailedSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   245      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   246      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   247  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   248  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   249      Dem_EvtSt_CustomClear_OnlyThisCycleAndReadiness(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   250  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   251  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   252      /* Hint : As Events mapped to OBD DTCs are not allowed to configure ClearAllowedBehavior as ONLY_THIS_CYCLE_AND_READINESS,
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   253       * no additional functions are called when DEM_CFG_OBD == DEM_CFG_OBD_ON */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   254  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   255  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   256  DEM_INLINE void Dem_EvtSt_HandleNewOperationCycle(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   257  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   258      if(!Dem_EvtIsSuppressed(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   259      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   260          /* only valid with failurecycle=operationcycle
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   261      if (Dem_ISO14229ByteIsTestCompleteTOC(Dem_AllEventsStatusByte[EventId]) && !Dem_ISO14229ByteIsTestFailedTOC(Dem_AllEventsStatusByte[EventId]))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   262      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   263          Dem_ISO14229ByteSetPendingDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   264      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   265           */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   266          Dem_AllEventsStatusByte[EventId] &= (Dem_UdsStatusByteType)(~DEM_STATUSBYTE_NEW_OPERATIONCYCLE_CLEARMASK);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   267          Dem_AllEventsStatusByte[EventId] |= DEM_STATUSBYTE_NEW_OPERATIONCYCLE_SETMASK;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   268  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   269          Dem_EvtSt_CustomNewOperationCycle(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   270  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   271      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   272  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   273  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   274  DEM_INLINE void Dem_EvtSt_HandleNewFailureCycle(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   275  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   276  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   277      Dem_EvtSetTestFailedTFCSincePreinit(EventId, FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   278      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   279  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   280      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   281  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   282  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   283  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   284  DEM_INLINE void Dem_EvtSt_HandleIndicatorOn(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   285  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   286      Dem_ISO14229ByteSetWarningIndicatorRequested(&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   287  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   288      Dem_EvtSt_CustomIndicatorOn(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   289  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   290  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   291  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   292  DEM_INLINE void Dem_EvtSt_HandleIndicatorOff(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   293  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   294      Dem_ISO14229ByteSetWarningIndicatorRequested(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   295  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   296      Dem_EvtSt_CustomIndicatorOff(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   297  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   298  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   299  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   300  DEM_INLINE void Dem_EvtSt_HandleDTCSettingOn(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   301  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   302  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   303      Dem_EvtSt_CustomDTCSettingOn(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   304  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   305      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   306  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   307  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   308  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   309  DEM_INLINE void Dem_EvtSt_HandleConfirmation(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   310  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   311      Dem_ISO14229ByteSetPendingDTC(&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   312      Dem_ISO14229ByteSetConfirmedDTC(&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   313  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   314      Dem_EvtSt_CustomConfirmation(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   315  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   316  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   317  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   318  DEM_INLINE void Dem_EvtSt_HandleAging(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   319  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   320      if ( Dem_LibGetParamBool(DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT) )
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   321      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   322          Dem_ISO14229ByteSetTestFailedSLC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   323      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   324      Dem_ISO14229ByteSetConfirmedDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   325  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   326  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   327      Dem_EvtSt_CustomAging(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   328  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   329  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   330  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   331  DEM_INLINE void Dem_EvtSt_HandleAgingOfConfirmed(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   332  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   333  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   334      Dem_ISO14229ByteSetConfirmedDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   335  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   336  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   337      Dem_EvtSt_CustomAging(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   338  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   339  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   340  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   341  #if (DEM_CFG_PRJSPECIFICEVENTSTATUSHANDLING == FALSE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   342  DEM_INLINE void Dem_EvtSt_HandleImmediateAging(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   343  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   344      if ( Dem_LibGetParamBool(DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT) )
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   345      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   346          Dem_ISO14229ByteSetTestFailedSLC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   347      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   348      Dem_ISO14229ByteSetConfirmedDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   349      Dem_ISO14229ByteSetPendingDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   350  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   351      Dem_EvtSt_CustomSetImmediateAging(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   352  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   353  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   354  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   355  #include "Dem_PrjEventStatus.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   356  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   357  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   358  DEM_INLINE void Dem_EvtSt_HandleDisplacement(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   359  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   360      if ( Dem_LibGetParamBool(DEM_CFG_EVMEM_RESET_CONFIRMED_BIT_ON_OVERFLOW) )
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   361      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   362          if ( Dem_LibGetParamBool(DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   363          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   364              Dem_ISO14229ByteSetTestFailedSLC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   365          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   366          Dem_ISO14229ByteSetConfirmedDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   367      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   368      Dem_ISO14229ByteSetPendingDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   369  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   370  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   371      Dem_EvtSt_CustomDisplacement(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   372  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   373  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   374  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   375  DEM_INLINE void Dem_EvtSt_HandleEvCombinationReplacement(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   376  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   377      /* this function is used for event combination "on storage" for the event of a dtc, which is replaced by another event of the same dtc */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   378      if ( Dem_LibGetParamBool(DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT) )
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   379      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   380          Dem_ISO14229ByteSetTestFailedSLC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   381      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   382      Dem_ISO14229ByteSetConfirmedDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   383  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   384      Dem_ISO14229ByteSetPendingDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   385  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   386  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   387      Dem_EvtSt_CustomEvCombinationReplacement(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   388  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   389  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   390  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   391  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   392  DEM_INLINE void Dem_EvtSt_HandlePendingDTC(Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   393  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   394      Dem_ISO14229ByteSetPendingDTC(&(Dem_AllEventsStatusByte[EventId]), setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   395  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   396      Dem_EvtSt_CustomSetPending(EventId, &(Dem_AllEventsStatusByteCust[EventId]), setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   397  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   398  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   399  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   400  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   401  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   402  /****** ATTENTION: May only be used by consistency checks; otherwise use the HandleXXX functions! ******/
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   403  DEM_INLINE Dem_boolean_least Dem_EvtSt_GetTestFailed(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   404  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   405      return Dem_ISO14229ByteIsTestFailed(Dem_AllEventsStatusByte[EventId]);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   406  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   407  DEM_INLINE Dem_boolean_least Dem_EvtSt_GetTestFailedTOC(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   408  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   409      return Dem_ISO14229ByteIsTestFailedTOC(Dem_AllEventsStatusByte[EventId]);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   410  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   411  DEM_INLINE Dem_boolean_least Dem_EvtSt_GetTestCompleteTOC (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   412  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   413      return Dem_ISO14229ByteIsTestCompleteTOC(Dem_AllEventsStatusByte[EventId]);
	movh.a	a15,#@his(Dem_AllEventsStatusByte)
	lea	a15,[a15]@los(Dem_AllEventsStatusByte)
.L746:
	addsc.a	a15,a15,d4,#0
	ld.bu	d15,[a15]
.L286:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     4  #ifndef DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     5  #define DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     8  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    11  /* Refer to Dem_UdsStatusByteType */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    14  #define DEM_ISO14229_TESTFAILED             0u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    15  #define DEM_ISO14229_TESTFAILED_TOC         1u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    16  #define DEM_ISO14229_TESTFAILED_SLC         5u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    17  #define DEM_ISO14229_TESTNOTCOMPLETE_TOC    6u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    18  #define DEM_ISO14229_TESTNOTCOMPLETE_SLC    4u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    19  #define DEM_ISO14229_PENDINGDTC             2u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    20  #define DEM_ISO14229_CONFIRMEDDTC           3u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    21  #define DEM_ISO14229_WARNINGINDICATOR       7u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    23  #define DEM_ISO14229_BM_TESTFAILED             (1u<<DEM_ISO14229_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    24  #define DEM_ISO14229_BM_TESTFAILED_TOC         (1u<<DEM_ISO14229_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    25  #define DEM_ISO14229_BM_TESTFAILED_SLC         (1u<<DEM_ISO14229_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    26  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    27  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    28  #define DEM_ISO14229_BM_PENDINGDTC             (1u<<DEM_ISO14229_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    29  #define DEM_ISO14229_BM_CONFIRMEDDTC           (1u<<DEM_ISO14229_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    30  #define DEM_ISO14229_BM_WARNINGINDICATOR       (1u<<DEM_ISO14229_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    32  #if (DEM_ISO14229_BM_TESTFAILED           !=  DEM_UDS_STATUS_TF)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    33  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    34  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    36  #if (DEM_ISO14229_BM_TESTFAILED_TOC       !=  DEM_UDS_STATUS_TFTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    37  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    40  #if (DEM_ISO14229_BM_TESTFAILED_SLC       !=  DEM_UDS_STATUS_TFSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    41  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    42  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    44  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC  !=  DEM_UDS_STATUS_TNCTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    45  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    46  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    48  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC  !=  DEM_UDS_STATUS_TNCSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    49  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    52  #if (DEM_ISO14229_BM_PENDINGDTC           !=  DEM_UDS_STATUS_PDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    53  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    54  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    56  #if (DEM_ISO14229_BM_CONFIRMEDDTC         !=  DEM_UDS_STATUS_CDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    57  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    60  #if (DEM_ISO14229_BM_WARNINGINDICATOR     !=  DEM_UDS_STATUS_WIR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    61  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    62  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    66  #define DEM_ISO14229BYTE_INITVALUE            		( (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)|(DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC) )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    67  #define DEM_ISO14229BYTE_MASK_PENDING_CONFIRMED     ( DEM_ISO14229_BM_PENDINGDTC | DEM_ISO14229_BM_CONFIRMEDDTC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    68  /*#define DEM_ISO14229BYTE_MASK_FAILED_COMPLETE_WIR   ( DEM_ISO14229_BM_TESTFAILED | DEM_ISO14229_BM_TESTFAILED_TOC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    69                                                        | DEM_ISO14229_BM_TESTFAILED_SLC | DEM_ISO14229_BM_WARNINGINDICATOR \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    70                                                        | DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC | DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    71   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    73  #define DEM_ISO14229BYTE_MASK_INDICATOR_OFF			(DEM_ISO14229_BM_CONFIRMEDDTC | DEM_ISO14229_BM_TESTFAILED \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    74                                                        | DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    76  #define DEM_ISO14229BYTE_MASK_TESTFAILEDSINCELASTCLEAR     ( DEM_ISO14229_BM_TESTFAILED_SLC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    78  #if (DEM_UDS_STATUS_TF     != DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    79  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    80  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    81  #if (DEM_UDS_STATUS_TFTOC  != DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    82  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    84  #if (DEM_UDS_STATUS_PDTC   != DEM_ISO14229_BM_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    85  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    86  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    87  #if (DEM_UDS_STATUS_CDTC   != DEM_ISO14229_BM_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    88  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    89  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    90  #if (DEM_UDS_STATUS_TNCSLC != DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    91  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    93  #if (DEM_UDS_STATUS_TFSLC  != DEM_ISO14229_BM_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    94  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    95  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    96  #if (DEM_UDS_STATUS_TNCTOC != DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    97  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    98  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    99  #if (DEM_UDS_STATUS_WIR    != DEM_ISO14229_BM_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   100  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   101  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   108  /*
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   109   * concept idea for triggering storage to NVM for single status bytes
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   110   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   111  #define DEM_ISO14229BYTE_NVMTRIGGER(STATUSBITSTORAGETESTFAILED, OPERATIONCYCLE_IS_PC) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   112          (0|DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   113                  |DEM_ISO14229_BM_TESTFAILED_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   114                  |(DEM_ISO14229_BM_TESTFAILED*(STATUSBITSTORAGETESTFAILED)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   115                  |(DEM_ISO14229_BM_TESTFAILED_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   116                  |(DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   117          )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   120  /* query functions */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   122  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailed (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   128  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   129  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   130  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   131      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   132  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   136  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   137  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   138      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   139  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   143  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   145      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   146  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   148  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   150  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   152      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   153  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   154  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   157  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   159      return !rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
	mov	d0,#6
.L290:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L747:
	and	d15,#1
.L748:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L84

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L84:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L749:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L85

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L85:
	eq	d15,d15,#0
.L750:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   159      return !rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);      (inlined)
	j	.L86

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   160  }      (inlined)
.L86:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   413      return Dem_ISO14229ByteIsTestCompleteTOC(Dem_AllEventsStatusByte[EventId]);      (inlined)
	j	.L87

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   414  }      (inlined)
.L87:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   219  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   220  	*EventTested = (boolean) Dem_EvtSt_GetTestCompleteTOC(EventId);
	st.b	[a4],d15
.L281:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   221  	return E_OK;
	mov	d2,#0
.L751:
	j	.L88

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   222  }
.L88:
.L83:
.L79:
.L72:
.L64:
	ret
.L252:
	
__Dem_GetEventTested_function_end:
	.size	Dem_GetEventTested,__Dem_GetEventTested_function_end-Dem_GetEventTested
.L178:
	; End of function
	
	.sdecl	'.text.Dem_Events.Dem_GetEventTested_GeneralEvtInfo',code,cluster('Dem_GetEventTested_GeneralEvtInfo')
	.sect	'.text.Dem_Events.Dem_GetEventTested_GeneralEvtInfo'
	.align	2
	
	.global	Dem_GetEventTested_GeneralEvtInfo

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   223  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   224  Std_ReturnType  Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType  EventId,
; Function Dem_GetEventTested_GeneralEvtInfo
.L161:
Dem_GetEventTested_GeneralEvtInfo:	.type	func

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   225                                     boolean*         EventTested)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   226  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   227  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   228      return Dem_GetEventTested(EventId, EventTested);
	call	Dem_GetEventTested
.L695:
	j	.L89

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   229  }
.L89:
	ret
.L358:
	
__Dem_GetEventTested_GeneralEvtInfo_function_end:
	.size	Dem_GetEventTested_GeneralEvtInfo,__Dem_GetEventTested_GeneralEvtInfo_function_end-Dem_GetEventTested_GeneralEvtInfo
.L203:
	; End of function
	
	.sdecl	'.text.Dem_Events.Dem_GetEventCategory',code,cluster('Dem_GetEventCategory')
	.sect	'.text.Dem_Events.Dem_GetEventCategory'
	.align	2
	
	.global	Dem_GetEventCategory

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   230  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   231  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   232  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   233  Std_ReturnType Dem_GetEventCategory( Dem_EventIdType EventId, Dem_EventCategoryType *EventCategory)
; Function Dem_GetEventCategory
.L163:
Dem_GetEventCategory:	.type	func

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   234  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   235  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   236  	Dem_EventCategoryType evtCategory;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   237  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   238  	if(!Dem_isEventIdValid(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   239  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   240  		return E_NOT_OK;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   241  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   242  	else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   243  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   244  		evtCategory = Dem_EvtParam_GetCategory(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   245  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   246  		if (( evtCategory <= DEM_CFG_CATEGORY_COUNT ) && ( evtCategory != DemConf_DemEventCategory_INVALIDCATEGORY ))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   247  		{
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   248  			*EventCategory = evtCategory;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   249  			return E_OK;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   250  		}
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   251  		else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   252  		{
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   253  			return E_NOT_OK;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   254  		}
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   255  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   256  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   257  	(void) EventId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   258  	*EventCategory = 0;
	mov	d15,#0
.L777:
	st.b	[a4],d15
.L778:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   259  	return E_NOT_OK;
	mov	d2,#1
.L779:
	j	.L90

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   260  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   261  }
.L90:
	ret
.L310:
	
__Dem_GetEventCategory_function_end:
	.size	Dem_GetEventCategory,__Dem_GetEventCategory_function_end-Dem_GetEventCategory
.L188:
	; End of function
	
	.sdecl	'.text.Dem_Events.Dem_GetDtcKindOfEvent',code,cluster('Dem_GetDtcKindOfEvent')
	.sect	'.text.Dem_Events.Dem_GetDtcKindOfEvent'
	.align	2
	
	.global	Dem_GetDtcKindOfEvent

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   262  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   263  /**********Event User Attribute **************************************************/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   264  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   265  const Dem_EventAttributeType* Dem_getEventUserAttributes(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   266  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   267  	return (&Dem_AllEventsUserAttributes[EventId]);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   268  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   269  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   270  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   271  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   272  Std_ReturnType Dem_GetDtcKindOfEvent (Dem_EventIdType EventId, Dem_DTCKindType *DtcKind)
; Function Dem_GetDtcKindOfEvent
.L165:
Dem_GetDtcKindOfEvent:	.type	func

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
	mov	d15,#0
.L756:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
	jeq	d4,#0,.L91
.L757:
	ge.u	d0,d4,#6
.L758:
	sel	d15,d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
.L92:
.L91:
	j	.L93

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }      (inlined)
.L93:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   273  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   274     if(!Dem_isEventIdValid(EventId))
	jne	d15,#0,.L94
.L295:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   275     {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   276        return E_NOT_OK;
	mov	d2,#1
.L759:
	j	.L95
.L94:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
	movh.a	a15,#@his(Dem_MapEventIdToDtcId)
	lea	a15,[a15]@los(Dem_MapEventIdToDtcId)
.L760:
	addsc.a	a2,a15,d4,#1
	ld.hu	d15,[a2]0
.L761:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];      (inlined)
	j	.L96

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }      (inlined)
.L96:
	mov	d0,#0
.L762:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
	jeq	d15,#0,.L97
.L763:
	ge.u	d15,d15,#5
.L764:
	cmovn	d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
.L98:
.L97:
	j	.L99

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }      (inlined)
.L99:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   277     }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   278     else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   279     {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   280        if (!Dem_isDtcIdValid(Dem_DtcIdFromEventId(EventId)))
	jne	d0,#0,.L100
.L302:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   281        {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   282           return E_NOT_OK;
	mov	d2,#1
.L765:
	j	.L101
.L100:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
	addsc.a	a15,a15,d4,#1
	ld.hu	d15,[a15]0
.L766:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];      (inlined)
	j	.L102

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }      (inlined)
.L102:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));      (inlined)
.L103:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     2  /********************************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     3  /*                                                                                                                  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     4  /* TOOL-GENERATED SOURCECODE, DO NOT CHANGE                                                                         */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     5  /*                                                                                                                  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     6  /********************************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     7  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     8  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     9  #ifndef DEM_CFG_DTC_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    10  #define DEM_CFG_DTC_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    12  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    13  #include "Dem_Cfg_DTCs.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    14  #include "Dem_Prv_Det.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    15  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    17  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    18  /*
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    19  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    20  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    21  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    22  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    23  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    24  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    26  #include "Dem_Lib.h"  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    27  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    28  /*
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    29  #define DEM_CFG_STOREWAITINGFORMONITORINGEVENT  FALSE
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    30  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING_OFF  STD_OFF
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    31  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING_ON   STD_ON
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    32  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING      DEM_CFG_DTCFILTER_EXTERNALPROCESSING_OFF
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    33  #define DEM_CFG_DTCSTATUS_AVAILABILITYMASK     0xFFu
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    34  #define DEM_CFG_DTC_TRANSLATION_TYPE           DEM_DTC_TRANSLATION_SAEJ1939_73
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    35  #define DEM_CFG_DTCSTATEMANGER_DTCS_PER_CYCLE   5u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    36  #define DEM_DTC_BP_STATE_SUPPRESSED             0u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    37  #define DEM_DTC_BP_GROUP_DTCSETTING_DISABLED    1u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    38  #define DEM_DTC_GROUP_DemGroupOfDTC_0_DTCS           0xFA0u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    39  #define DEM_DTC_GROUP_DemGroupOfDTC_1_DTCS           0x1388u  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    40  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    41  /* --------------------------------------------------- */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    42  /* DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED    */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    43  /* --------------------------------------------------- */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    44  // #define DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED   FALSE
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    45  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    47  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    48  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    49  	Dem_DtcCodeType DtcCode;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    50  	Dem_DTCSeverityType Severity;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    51  	Dem_DTCKindType Kind;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    52  	boolean DtcCode_Is_Index;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    53  	uint8 Func_Unit;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    54  	boolean Nv_Storage;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    55  } Dem_Cfg_DtcType;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    56  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    57  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    58  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    59  extern const Dem_Cfg_DtcType Dem_Cfg_Dtc[5];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    62  LOCAL_INLINE Dem_DTCKindType Dem_Cfg_Dtc_GetKind(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    65  	return Dem_Cfg_Dtc[indx].Kind;
	mul	d15,d15,#12
.L767:
	movh.a	a15,#@his(Dem_Cfg_Dtc)
	lea	a15,[a15]@los(Dem_Cfg_Dtc)
.L768:
	addsc.a	a15,a15,d15,#0
.L769:
	ld.bu	d15,[a15]5
.L770:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    65  	return Dem_Cfg_Dtc[indx].Kind;      (inlined)
	j	.L104

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    66  }      (inlined)
.L104:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   283        }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   284        else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   285        {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   286           *DtcKind = Dem_Cfg_Dtc_GetKind(Dem_DtcIdFromEventId(EventId));
	st.b	[a4],d15
.L771:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   287           return E_OK;
	mov	d2,#0
.L772:
	j	.L105

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   288        }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   289     }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   290  }
.L105:
.L101:
.L95:
	ret
.L291:
	
__Dem_GetDtcKindOfEvent_function_end:
	.size	Dem_GetDtcKindOfEvent,__Dem_GetDtcKindOfEvent_function_end-Dem_GetDtcKindOfEvent
.L183:
	; End of function
	
	.sdecl	'.text.Dem_Events.Dem_EvtSetSuppression',code,cluster('Dem_EvtSetSuppression')
	.sect	'.text.Dem_Events.Dem_EvtSetSuppression'
	.align	2
	
	.global	Dem_EvtSetSuppression

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   291  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   292  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   293  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   294  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed)
; Function Dem_EvtSetSuppression
.L167:
Dem_EvtSetSuppression:	.type	func
	sub.a	a10,#8
.L696:
	mov	e8,d5,d4
.L547:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
	movh.a	a12,#@his(Dem_AllEventsState)
	lea	a12,[a12]@los(Dem_AllEventsState)
.L699:
	addsc.a	a15,a12,d8,#2
.L700:
	ld.bu	d0,[a15]
.L909:
	mov	d1,#2
.L549:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d1,#0
	sha	d0,d0,d1
.L910:
	and	d15,d0,#1
.L911:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L106

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L106:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d0,d15,#0
.L912:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L107

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L107:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);      (inlined)
	j	.L108

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   631  }      (inlined)
.L108:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   295  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   296      Dem_DtcIdType dtcId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   297  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   298  #if (DEM_CFG_TRIGGERFIMREPORTS == DEM_CFG_TRIGGERFIMREPORTS_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   299      Dem_UdsStatusByteType isoByteOld, isoByteNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   300  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   301  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   302      if (Dem_EvtIsSuppressed(EventId) != newSuppressed)
	jeq	d0,d9,.L109

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   303      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   304          DEM_ASSERT_ISLOCKED();
.L110:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
	movh.a	a15,#@his(Dem_MapEventIdToDtcId)
	lea	a15,[a15]@los(Dem_MapEventIdToDtcId)
.L701:
	addsc.a	a15,a15,d8,#1
.L702:
	ld.hu	d10,[a15]0
.L703:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];      (inlined)
	j	.L111

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }      (inlined)
.L111:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   305  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   306          dtcId = Dem_DtcIdFromEventId(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   307  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   308  #if (DEM_CFG_TRIGGERFIMREPORTS == DEM_CFG_TRIGGERFIMREPORTS_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   309          isoByteOld = Dem_EvtGetIsoByte(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   310  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   311          DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE, newSuppressed);
	addsc.a	a15,a12,d8,#2
.L704:
	mov	d0,#2
.L555:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
	jeq	d9,#0,.L112
.L559:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
	mov	d1,#1
.L705:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
	ld.bu	d2,[a15]
.L913:
	sha	d1,d1,d0
.L706:
	or	d2,d1
	st.b	[a15],d2
.L560:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);      (inlined)
	j	.L113

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
.L112:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
	mov	d15,#1
.L707:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
	ld.bu	d1,[a15]
.L914:
	sha	d15,d15,d0
.L708:
	xor	d15,d15,#255
.L915:
	and	d1,d15
	st.b	[a15],d1

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else      (inlined)
.L113:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   312          if ( dtcId != DEM_DTCID_INVALID )
	jeq	d10,#0,.L114
.L709:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   313          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   314              Dem_DtcHandleEventSuppression(dtcId, !newSuppressed);
	eq	d11,d9,#0

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   148      DEM_ASSERT_ISLOCKED();      (inlined)
.L115:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     4  #ifndef DEM_DTCS_H
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     5  #define DEM_DTCS_H
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     8  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     9  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    10  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    11  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    12  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    13  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    14  #include "Dem_Cfg_DTC_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    15  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    16  #include "Dem_Mapping.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    17  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    18  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    19  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    20  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    22  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    23  #include "Dem_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    25  #define DEM_DTC_SETTING_ENABLED     FALSE
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    26  #define DEM_DTC_SETTING_DISABLED    TRUE
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    27  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    29  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    30  	Dem_DtcStateType state;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    31  } Dem_DtcState;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    33  /******************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    37  #define DEM_DTCS_NVSTORAGE_BP    2u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    38  #define DEM_DTCS_ALTERNATIVEDTC_FLAG_BP    3u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    40  #define DEM_DTCS_SEVERITYMASK    0xE0u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    41  #define DEM_DTCS_KINDMASK        0x03u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    42  #define DEM_DTCS_NVSTORAGEMASK   ((uint8)(1u<<DEM_DTCS_NVSTORAGE_BP))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    43  #define DEM_DTCS_ALTERNATIVEDTC_FLAG   ((uint8)(1u<<DEM_DTCS_ALTERNATIVEDTC_FLAG_BP))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    46  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    47  #define DEM_DTCS_INIT8(KIND, SEVERITY, NVSTORAGE, FUNC_UNIT, INDEXOF_ALTERNATIVE_DTCID) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    48  {   ((KIND) & (DEM_DTCS_KINDMASK))|((SEVERITY) & (DEM_DTCS_SEVERITYMASK)) | ((uint8)(((NVSTORAGE) & (0x01u)) << DEM_DTCS_NVSTORAGE_BP)) | ((uint8)((DEM_BOOL2BIT(INDEXOF_ALTERNATIVE_DTCID) & (0x01u)) << DEM_DTCS_ALTERNATIVEDTC_FLAG_BP)) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    49      ,(FUNC_UNIT) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    50  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    52  /* FC_VariationPoint_START */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    53  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    54  #define DEM_DTCS_INIT16(OBDCODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    55  {   (OBDCODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    56  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    57  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    58  /* FC_VariationPoint_END */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    60  #define DEM_DTCS_INIT32(CODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    61  {   (CODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    62  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    66  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    67     uint8 kind_severity_storage;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    68     uint8 Functional_Unit;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    69  } Dem_DtcParam8;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    71  /* FC_VariationPoint_START */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    72  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    73  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    74     uint16 ObdCode;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    75  } Dem_DtcParam16;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    76  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    77  /* FC_VariationPoint_END */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    78  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    79  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    80     Dem_DtcCodeType code;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    81  } Dem_DtcParam32;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    82  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    83  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    84      Dem_DtcCodeType AltDtccode;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    85      Dem_DtcCodeType Dtccode;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    86  }Dem_DtcAltParam;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    87  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    88  /******************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    89  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    90  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    92      DEM_ARRAY_DECLARE(Dem_DtcState, Dem_AllDTCsState, DEM_DTCID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    93  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    94  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    97  #define DEM_START_SEC_RAM_INIT
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    98  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   100      #if(DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   101      extern boolean Dem_AlternativeDTCEnabled;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   102      #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   104  #define DEM_STOP_SEC_RAM_INIT
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   105  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   107  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   108  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   110      #if (DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   111      DEM_ARRAY_DECLARE_CONST(Dem_DtcAltParam, Dem_AllAlternativeDTCsParam, DEM_ALTERNATIVE_DTCCODE_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   112      #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   114  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   115  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   117  /********DTC SUPPRESSION************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   118  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressed (Dem_DtcIdType dtcId)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   119  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   120  #if (DEM_CFG_SUPPRESSION != DEM_NO_SUPPRESSION)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   121      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   122  #else
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   123      DEM_UNUSED_PARAM(dtcId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   124      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   128  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressedDirectly (Dem_DtcIdType dtcId)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   130  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   131      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED_DIRECTLY);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   132  #else
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   133      DEM_UNUSED_PARAM(dtcId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   134      return FALSE;
	mov	d15,#0

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   134      return FALSE;      (inlined)
	j	.L116

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   136  }      (inlined)
.L116:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   150      if (!Dem_DtcIsSuppressedDirectly(dtcId))      (inlined)
	jne	d15,#0,.L117
.L578:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   154          if (!eventUnsuppressed)      (inlined)
	jne	d11,#0,.L118
.L916:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   136  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   138  DEM_INLINE Dem_boolean_least Dem_DtcIsSupported (Dem_DtcIdType dtcID)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   139  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   141              && (!Dem_DtcIsSuppressed(dtcID))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   142      );
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   143  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   145  #if ((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   146  DEM_INLINE void Dem_DtcHandleEventSuppression (Dem_DtcIdType dtcId, Dem_boolean_least eventUnsuppressed)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   148      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   150      if (!Dem_DtcIsSuppressedDirectly(dtcId))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   151      {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   152          Dem_EventIdListIterator it;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   153  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   154          if (!eventUnsuppressed)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   155          {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   156              for (Dem_EventIdListIteratorNewFromDtcId(&it, dtcId);
	lea	a13,[a10]0
.L582:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
	mov	d0,#0
.L917:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
	jeq	d10,#0,.L119
.L918:
	ge.u	d15,d10,#5
.L919:
	cmovn	d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
.L120:
.L119:
	j	.L121

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }      (inlined)
.L121:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))      (inlined)
	jne	d0,#0,.L122
.L589:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
	mov	d4,#54
.L697:
	mov	d5,#0
.L698:
	mov	d6,#189
	mov	d7,#0
	call	Det_ReportError

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))      (inlined)
.L122:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
	movh.a	a15,#@his(Dem_MapDtcIdToEventId)
	lea	a15,[a15]@los(Dem_MapDtcIdToEventId)
.L920:
	addsc.a	a15,a15,d10,#1
.L921:
	st.a	[a13],a15
.L922:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
	add.a	a15,#2
.L923:
	st.a	[a10]4,a15
.L583:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   157                      Dem_EventIdListIteratorIsValid(&it);      (inlined)
	j	.L123

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   158                      Dem_EventIdListIteratorNext(&it))      (inlined)
.L124:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   157                      Dem_EventIdListIteratorIsValid(&it);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   158                      Dem_EventIdListIteratorNext(&it))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   159              {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   160                  if ( !Dem_EvtIsSuppressed(Dem_EventIdListIteratorCurrent(&it)) )
	lea	a15,[a10]0
.L592:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   315  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   316     it->it = &Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   317     it->end = &Dem_MapDtcIdToEventId[dtcid].mappingTable[Dem_MapDtcIdToEventId[dtcid].length];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   318  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   319  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   320  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   321  DEM_INLINE Dem_boolean_least Dem_EventIdListIteratorIsValid(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   322  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   324  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   326  DEM_INLINE void Dem_EventIdListIteratorNext(Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   327  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   328     (it->it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   329  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   331  DEM_INLINE Dem_EventIdType Dem_EventIdListIteratorCurrent(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   333     return (Dem_EventIdType)(*(it->it));
	ld.a	a15,[a15]
.L924:
	ld.hu	d15,[a15]0
.L925:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   333     return (Dem_EventIdType)(*(it->it));      (inlined)
	j	.L125

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   334  }      (inlined)
.L125:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
	addsc.a	a15,a12,d15,#2
.L926:
	ld.bu	d15,[a15]
.L927:
	mov	d0,#2
.L597:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L928:
	and	d15,#1
.L929:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L126

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L126:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L930:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L127

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L127:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);      (inlined)
	j	.L128

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   631  }      (inlined)
.L128:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   160                  if ( !Dem_EvtIsSuppressed(Dem_EventIdListIteratorCurrent(&it)) )      (inlined)
	jne	d15,#0,.L129
.L596:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   161                  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   162                      eventUnsuppressed = TRUE;
	mov	d11,#1
.L931:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   163                      break;      (inlined)
	j	.L130

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   160                  if ( !Dem_EvtIsSuppressed(Dem_EventIdListIteratorCurrent(&it)) )      (inlined)
.L129:
	lea	a15,[a10]0
.L599:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   315  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   316     it->it = &Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   317     it->end = &Dem_MapDtcIdToEventId[dtcid].mappingTable[Dem_MapDtcIdToEventId[dtcid].length];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   318  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   319  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   320  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   321  DEM_INLINE Dem_boolean_least Dem_EventIdListIteratorIsValid(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   322  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   324  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   326  DEM_INLINE void Dem_EventIdListIteratorNext(Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   327  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   328     (it->it)++;
	ld.a	a2,[a15]
.L932:
	add.a	a2,#2
	st.a	[a15],a2

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   157                      Dem_EventIdListIteratorIsValid(&it);      (inlined)
.L123:
	lea	a15,[a10]0
.L604:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   315  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   316     it->it = &Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   317     it->end = &Dem_MapDtcIdToEventId[dtcid].mappingTable[Dem_MapDtcIdToEventId[dtcid].length];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   318  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   319  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   320  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   321  DEM_INLINE Dem_boolean_least Dem_EventIdListIteratorIsValid(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   322  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));
	ld.a	a15,[a15]
.L933:
	ld.a	a2,[a10]4
.L934:
	lt.a	d15,a15,a2
.L935:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));      (inlined)
	j	.L131

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   324  }      (inlined)
.L131:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   157                      Dem_EventIdListIteratorIsValid(&it);      (inlined)
	jne	d15,#0,.L124

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   166          }      (inlined)
.L130:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   154          if (!eventUnsuppressed)      (inlined)
.L118:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   163                      break;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   164                  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   165              }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   166          }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   167  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   168          DEM_DTCSTATE_OVERWRITEBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED, !eventUnsuppressed);
	movh.a	a15,#@his(Dem_AllDTCsState)
	lea	a15,[a15]@los(Dem_AllDTCsState)
.L936:
	addsc.a	a15,a15,d10,#0
.L937:
	mov	d0,#0
.L938:
	eq	d15,d11,#0
.L608:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
	jeq	d15,#0,.L132
.L609:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
	mov	d15,#1
.L710:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
	ld.bu	d1,[a15]
.L939:
	sha	d15,d15,d0
.L711:
	or	d1,d15
	st.b	[a15],d1
.L610:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);      (inlined)
	j	.L133

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
.L132:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
	mov	d15,#1
.L712:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
	ld.bu	d1,[a15]
.L940:
	sha	d15,d15,d0
.L713:
	xor	d15,d15,#255
.L941:
	and	d1,d15
	st.b	[a15],d1

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else      (inlined)
.L133:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   150      if (!Dem_DtcIsSuppressedDirectly(dtcId))      (inlined)
.L117:
.L114:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   315          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   316  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   317          if (newSuppressed)
	jeq	d9,#0,.L134
.L613:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     3  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     4  #ifndef DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     5  #define DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     6  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     7  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     9  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    10  #include "Dem_Cfg_EventId.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    11  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    12  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    13  #include "Dem_Cfg_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    14  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    15  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    16  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    17  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    18  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    19  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    20  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    21  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    22  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    23  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    24  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    25  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    26  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    29  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    30  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    31  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    32  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    33  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    34  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    35  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    38  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    39  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    41  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    42  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    43  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    46  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    47  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetCustIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    48  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    49      return Dem_AllEventsStatusByteCust[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    50  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    51  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    52  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    53  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    54  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    55  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    57  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    58  #include "Dem_CustomStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    59  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    60  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    61  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    62  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    63  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    65  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    66  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    67  #define DEM_STATUSBYTE_EVENT_UNAVAILABLE                   (0x00)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    68  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_SETMASK          (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    69  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_CLEARMASK        (DEM_ISO14229_BM_TESTFAILED_TOC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    70  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    71  #define DEM_INIT_ISOBITS_CLEARMASK									(DEM_ISO14229_BM_TESTFAILED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    72  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    74  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    75  void Dem_EventStatusInitCheckNvM(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    76  void Dem_ClearEvent(Dem_EventIdType eventId, boolean ClearFully);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    77  void Dem_EvtAdvanceOperationCycle(Dem_OperationCycleList operationCycleList);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    78  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    79  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    80  /* Duplicate of Dem_GetEventStatus to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    81  Std_ReturnType Dem_GetEventStatus_GeneralEvtInfo(Dem_EventIdType EventId, Dem_UdsStatusByteType* EventStatusExtended);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    82  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    83  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    84  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    85  DEM_INLINE void Dem_InitEventStatusTestFailed(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    86  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    87  #if (!DEM_CFG_EVMEM_STORAGE_TESTFAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    88  	Dem_EventIdIterator eventIt;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    89  	Dem_EventIdType eventId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    90  	Dem_UdsStatusByteType statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    92  	for (Dem_EventIdIteratorNew(&eventIt); Dem_EventIdIteratorIsValid(&eventIt); Dem_EventIdIteratorNext(&eventIt))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    93  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    94  		eventId = Dem_EventIdIteratorCurrent(&eventIt);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    95  		statusNew = Dem_EvtGetIsoByte(eventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    96  		if (!Dem_EvtParam_GetStoreTestFailedToNextOC(eventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    97  		{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    98  			statusNew &= (Dem_UdsStatusByteType)(~DEM_INIT_ISOBITS_CLEARMASK);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    99  		}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   100  		Dem_AllEventsStatusByte[eventId] = statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   101  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   102  		Dem_AllEventsStatusByteCust[eventId] = statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   103  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   104  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   105  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   106  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   107  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   108  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   109  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte4DtcCalculation (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   110  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   111  #if !DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   112      return Dem_AllEventsStatusByte[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   113  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   114      return Dem_AllEventsStatusByteCust[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   115  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   116  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   118  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   119  /*
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   120   * Called in Dem_EvtProcessPassedAndFailed() to check whether the reported status would change the event status information
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   121   */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   122  DEM_INLINE Dem_boolean_least Dem_EvtSt_IsUpdateNeeded(Dem_EventIdType EventId, Dem_boolean_least reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   123  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   124      return (
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   125             (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetIsoByte(EventId)) != reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   126          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetIsoByte(EventId)))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   127  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   128  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   129          || (reportIsFailed && !Dem_EvtGetTestFailedTFCSincePreinit(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   130          || (!Dem_EvtGetTestCompleteTFCSincePreinit(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   131  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   132  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   133  #if (DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   134          || (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetCustIsoByte(EventId)) != reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   135          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetCustIsoByte(EventId)))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   136  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   137      );
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   138  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   139  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   141  DEM_INLINE void Dem_EvtSt_HandleInitialization (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   142  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   143      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   145      /* We don't need to reset Test*TFCSincePreinit here because it is already properly initialized by static
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   146       * initialization with zeros on ECU startup */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   148  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   149      Dem_EvtSt_CustomInitialization(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   150  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   151  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   152  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   153  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   154  DEM_INLINE void Dem_EvtSt_HandleFailed(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   155  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   156      Dem_ISO14229ByteSetTestFailed (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   157      Dem_ISO14229ByteSetTestFailedTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   158      Dem_ISO14229ByteSetTestFailedSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   159      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   160      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   161      /* only valid with failurecycle=operationcycle
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   162      Dem_ISO14229ByteSetPendingDTC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   163      */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   164  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   165  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   166      Dem_EvtSetTestFailedTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   167      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   168  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   169  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   170  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   171      Dem_EvtSt_CustomFailed(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   175  DEM_INLINE void Dem_EvtSt_HandlePassed(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   176  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   177      Dem_ISO14229ByteSetTestFailed (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   178      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   179      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   180  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   181  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   182      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   183  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   184  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   185  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   186      Dem_EvtSt_CustomPassed(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   187  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   188  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   190  DEM_INLINE void Dem_EvtSt_HandleResetEventStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   191  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   192      Dem_ISO14229ByteSetTestFailed(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   193  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   194      Dem_EvtSt_CustomResetEventStatus(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   195  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   198  DEM_INLINE void Dem_EvtSt_HandleEvtAvailable(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   199  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   200      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   201  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   202      Dem_EvtSt_CustomEvtAvailable(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   203  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   204  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   205  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   206  DEM_INLINE void Dem_EvtSt_HandleEvtNotAvailable(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   207  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   208      Dem_AllEventsStatusByte[EventId] = DEM_STATUSBYTE_EVENT_UNAVAILABLE;
	movh.a	a15,#@his(Dem_AllEventsStatusByte)
	lea	a15,[a15]@los(Dem_AllEventsStatusByte)
.L714:
	addsc.a	a15,a15,d8,#0
.L715:
	mov	d15,#0
.L942:
	st.b	[a15],d15
.L614:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   318          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   319              Dem_EvtSt_HandleEvtNotAvailable(EventId);
	j	.L135
.L134:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     3  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     4  #ifndef DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     5  #define DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     6  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     7  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     9  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    10  #include "Dem_Cfg_EventId.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    11  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    12  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    13  #include "Dem_Cfg_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    14  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    15  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    16  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    17  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    18  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    19  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    20  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    21  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    22  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    23  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    24  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    25  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    26  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    29  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    30  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    31  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    32  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    33  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    34  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    35  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    38  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    39  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    41  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    42  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    43  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    46  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    47  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetCustIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    48  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    49      return Dem_AllEventsStatusByteCust[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    50  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    51  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    52  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    53  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    54  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    55  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    57  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    58  #include "Dem_CustomStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    59  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    60  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    61  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    62  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    63  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    65  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    66  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    67  #define DEM_STATUSBYTE_EVENT_UNAVAILABLE                   (0x00)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    68  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_SETMASK          (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    69  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_CLEARMASK        (DEM_ISO14229_BM_TESTFAILED_TOC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    70  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    71  #define DEM_INIT_ISOBITS_CLEARMASK									(DEM_ISO14229_BM_TESTFAILED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    72  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    74  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    75  void Dem_EventStatusInitCheckNvM(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    76  void Dem_ClearEvent(Dem_EventIdType eventId, boolean ClearFully);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    77  void Dem_EvtAdvanceOperationCycle(Dem_OperationCycleList operationCycleList);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    78  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    79  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    80  /* Duplicate of Dem_GetEventStatus to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    81  Std_ReturnType Dem_GetEventStatus_GeneralEvtInfo(Dem_EventIdType EventId, Dem_UdsStatusByteType* EventStatusExtended);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    82  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    83  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    84  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    85  DEM_INLINE void Dem_InitEventStatusTestFailed(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    86  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    87  #if (!DEM_CFG_EVMEM_STORAGE_TESTFAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    88  	Dem_EventIdIterator eventIt;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    89  	Dem_EventIdType eventId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    90  	Dem_UdsStatusByteType statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    92  	for (Dem_EventIdIteratorNew(&eventIt); Dem_EventIdIteratorIsValid(&eventIt); Dem_EventIdIteratorNext(&eventIt))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    93  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    94  		eventId = Dem_EventIdIteratorCurrent(&eventIt);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    95  		statusNew = Dem_EvtGetIsoByte(eventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    96  		if (!Dem_EvtParam_GetStoreTestFailedToNextOC(eventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    97  		{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    98  			statusNew &= (Dem_UdsStatusByteType)(~DEM_INIT_ISOBITS_CLEARMASK);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    99  		}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   100  		Dem_AllEventsStatusByte[eventId] = statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   101  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   102  		Dem_AllEventsStatusByteCust[eventId] = statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   103  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   104  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   105  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   106  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   107  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   108  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   109  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte4DtcCalculation (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   110  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   111  #if !DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   112      return Dem_AllEventsStatusByte[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   113  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   114      return Dem_AllEventsStatusByteCust[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   115  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   116  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   118  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   119  /*
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   120   * Called in Dem_EvtProcessPassedAndFailed() to check whether the reported status would change the event status information
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   121   */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   122  DEM_INLINE Dem_boolean_least Dem_EvtSt_IsUpdateNeeded(Dem_EventIdType EventId, Dem_boolean_least reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   123  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   124      return (
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   125             (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetIsoByte(EventId)) != reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   126          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetIsoByte(EventId)))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   127  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   128  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   129          || (reportIsFailed && !Dem_EvtGetTestFailedTFCSincePreinit(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   130          || (!Dem_EvtGetTestCompleteTFCSincePreinit(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   131  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   132  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   133  #if (DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   134          || (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetCustIsoByte(EventId)) != reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   135          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetCustIsoByte(EventId)))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   136  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   137      );
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   138  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   139  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   141  DEM_INLINE void Dem_EvtSt_HandleInitialization (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   142  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   143      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   145      /* We don't need to reset Test*TFCSincePreinit here because it is already properly initialized by static
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   146       * initialization with zeros on ECU startup */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   148  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   149      Dem_EvtSt_CustomInitialization(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   150  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   151  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   152  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   153  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   154  DEM_INLINE void Dem_EvtSt_HandleFailed(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   155  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   156      Dem_ISO14229ByteSetTestFailed (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   157      Dem_ISO14229ByteSetTestFailedTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   158      Dem_ISO14229ByteSetTestFailedSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   159      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   160      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   161      /* only valid with failurecycle=operationcycle
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   162      Dem_ISO14229ByteSetPendingDTC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   163      */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   164  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   165  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   166      Dem_EvtSetTestFailedTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   167      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   168  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   169  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   170  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   171      Dem_EvtSt_CustomFailed(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   175  DEM_INLINE void Dem_EvtSt_HandlePassed(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   176  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   177      Dem_ISO14229ByteSetTestFailed (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   178      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   179      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   180  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   181  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   182      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   183  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   184  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   185  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   186      Dem_EvtSt_CustomPassed(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   187  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   188  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   190  DEM_INLINE void Dem_EvtSt_HandleResetEventStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   191  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   192      Dem_ISO14229ByteSetTestFailed(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   193  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   194      Dem_EvtSt_CustomResetEventStatus(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   195  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   198  DEM_INLINE void Dem_EvtSt_HandleEvtAvailable(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   199  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   200      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
	movh.a	a15,#@his(Dem_AllEventsStatusByte)
	lea	a15,[a15]@los(Dem_AllEventsStatusByte)
.L716:
	addsc.a	a15,a15,d8,#0
.L717:
	mov	d15,#80
.L943:
	st.b	[a15],d15
.L617:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   320          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   321          else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   322          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   323              Dem_EvtSt_HandleEvtAvailable(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   324              Dem_EvtSetInitMonitoring(EventId, DEM_INIT_MONITOR_REENABLED);
	mov	d4,#3
.L622:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
	addsc.a	a15,a12,d8,#2
.L718:
	ld.bu	d15,[a15]
.L629:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    68  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    69  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetBits(uint8 value, uint8 bit_position, uint8 number_of_bits)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    70  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    71      uint8 bit2shift = 1;
	mov	d0,#1
.L719:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    72      value = value >> bit_position;
	sha	d15,#-3
.L944:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    73      value = value % ((uint8) (bit2shift << number_of_bits));
	sha	d0,#3
.L720:
	div.u	e0,d15,d0
.L945:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    74      return value;      (inlined)
	j	.L136

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    75  }      (inlined)
.L136:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();      (inlined)
.L137:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))      (inlined)
	jeq	d1,#0,.L138
.L946:
	jlt.u	d1,#4,.L139
.L138:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
	mov	d15,#3
.L947:
	mov	d1,#3
.L635:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    68  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    69  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetBits(uint8 value, uint8 bit_position, uint8 number_of_bits)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    70  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    71      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    72      value = value >> bit_position;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    73      value = value % ((uint8) (bit2shift << number_of_bits));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    74      return value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    75  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    76  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    77  LOCAL_INLINE void rba_DiagLib_Bit8ClearBits(uint8 *value, uint8 bit_position, uint8 number_of_bits)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    78  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    79      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    80      *value &= ((uint8) (~((uint8) ((((uint8) (bit2shift << number_of_bits)) - 1u) << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    81  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    82  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    83  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBits(uint8 *value, uint8 bit_position, uint8 number_of_bits, uint8 newValue)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    84  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    85      uint8 bit2shift = 1;
	mov	d0,#1
.L646:
	mov	d2,#1
.L722:
	ld.bu	d3,[a15]
.L948:
	sha	d2,d2,d1
.L723:
	add	d2,#-1
.L949:
	sh	d2,d2,d15
.L950:
	xor	d15,d2,#255
.L951:
	and	d3,d15
	st.b	[a15],d3
.L647:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    86      rba_DiagLib_Bit8ClearBits(value, bit_position, number_of_bits);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    87      *value |= ((uint8) ((newValue % ((uint8) (bit2shift << number_of_bits))) << bit_position));
	ld.bu	d15,[a15]
.L952:
	sha	d0,#3
.L721:
	div.u	e0,d4,d0
.L953:
	sha	d0,d1,#3
.L954:
	or	d15,d0
	st.b	[a15],d15

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))      (inlined)
.L139:
	movh.a	a15,#@his(Dem_GlobalInitMonitoringCounter)
	lea	a15,[a15]@los(Dem_GlobalInitMonitoringCounter)
	ld.hu	d15,[a15]0
.L955:
	add	d15,#1
	st.h	[a15],d15
.L653:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
	mov	d0,#3
.L656:
	movh.a	a15,#@his(Dem_EvtIsAnyInitMonitoringRequestedMask)
	lea	a15,[a15]@los(Dem_EvtIsAnyInitMonitoringRequestedMask)
.L661:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     3  #ifndef RBA_DIAGLIB_BITS32_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     4  #define RBA_DIAGLIB_BITS32_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     9  #define RBA_DIAGLIB_ISBITSET32       rba_DiagLib_Bit32IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT32   rba_DiagLib_Bit32GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    11  #define RBA_DIAGLIB_GETBITS32        rba_DiagLib_Bit32GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT32   rba_DiagLib_Bit32OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS32  rba_DiagLib_Bit32OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    15  LOCAL_INLINE uint32 rba_DiagLib_Bit32Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    17      uint32 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    21  LOCAL_INLINE void rba_DiagLib_Bit32SetBitMask(uint32 *buffer, uint32 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    26  LOCAL_INLINE void rba_DiagLib_Bit32ClearBitMask(uint32 *buffer, uint32 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    28      *buffer &= ((uint32) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    31  LOCAL_INLINE void rba_DiagLib_Bit32MergeBitmask(uint32 *buffer, uint32 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    36  LOCAL_INLINE void rba_DiagLib_Bit32SetBit(uint32 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    38      uint32 bit2shift = 1;
	mov	d15,#1
.L724:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    39      *buffer |= ((uint32) (bit2shift << bit_position));
	ld.w	d1,[a15]
.L956:
	sh	d15,d15,d0
.L725:
	or	d1,d15
	st.w	[a15],d1
.L135:
.L109:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   325          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   326  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   327  #if (DEM_CFG_TRIGGERFIMREPORTS == DEM_CFG_TRIGGERFIMREPORTS_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   328          /* DET will be reported if FiM_DemTriggerOnEventStatus function is called before Fim_Init() and FiM_DemInit() */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   329          if(Dem_Is_Fim_Initialized())
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   330          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   331              isoByteNew = Dem_EvtGetIsoByte(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   332              FiM_DemTriggerOnEventStatus(EventId, isoByteOld, isoByteNew);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   333          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   334  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   335      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   336  }
	ret
.L543:
	
__Dem_EvtSetSuppression_function_end:
	.size	Dem_EvtSetSuppression,__Dem_EvtSetSuppression_function_end-Dem_EvtSetSuppression
.L238:
	; End of function
	
	.sdecl	'.text.Dem_Events.Dem_IsAnyInitMonitorForEventRequested',code,cluster('Dem_IsAnyInitMonitorForEventRequested')
	.sect	'.text.Dem_Events.Dem_IsAnyInitMonitorForEventRequested'
	.align	2
	
	.global	Dem_IsAnyInitMonitorForEventRequested

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   337  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   338  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   339  //*****************************************************************************
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   340  Std_ReturnType Dem_IsAnyInitMonitorForEventRequested ( uint16 *localCounter, boolean *modified )
; Function Dem_IsAnyInitMonitorForEventRequested
.L169:
Dem_IsAnyInitMonitorForEventRequested:	.type	func

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   341  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   342      Std_ReturnType retVal = E_NOT_OK;
	mov	d2,#1
.L726:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   343  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   344      if( (localCounter!=NULL_PTR) && (modified!=NULL_PTR) )
	jz.a	a4,.L140
.L784:
	jz.a	a5,.L141
.L785:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   345      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   346          retVal = E_OK;
	mov	d2,#0
.L786:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   347  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   348          if( *localCounter==Dem_GlobalInitMonitoringCounter )
	movh.a	a15,#@his(Dem_GlobalInitMonitoringCounter)
	lea	a15,[a15]@los(Dem_GlobalInitMonitoringCounter)
	ld.hu	d15,[a15]0
.L787:
	ld.hu	d0,[a4]0
.L788:
	jne	d15,d0,.L142
.L789:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   349          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   350              *modified = FALSE;
	mov	d15,#0
.L790:
	st.b	[a5],d15
.L791:
	j	.L143
.L142:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   351          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   352          else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   353          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   354              *localCounter = Dem_GlobalInitMonitoringCounter;
	st.h	[a4],d15
.L792:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   355              *modified = TRUE;
	mov	d15,#1
.L793:
	st.b	[a5],d15
.L143:
.L141:
.L140:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   356          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   357      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   358  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   359      return retVal;
	j	.L144

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   360  }
.L144:
	ret
.L314:
	
__Dem_IsAnyInitMonitorForEventRequested_function_end:
	.size	Dem_IsAnyInitMonitorForEventRequested,__Dem_IsAnyInitMonitorForEventRequested_function_end-Dem_IsAnyInitMonitorForEventRequested
.L193:
	; End of function
	
	.sdecl	'.bss.Dem_Events.Dem_GlobalInitMonitoringCounter',data,cluster('Dem_GlobalInitMonitoringCounter')
	.sect	'.bss.Dem_Events.Dem_GlobalInitMonitoringCounter'
	.global	Dem_GlobalInitMonitoringCounter
	.align	2
Dem_GlobalInitMonitoringCounter:	.type	object
	.size	Dem_GlobalInitMonitoringCounter,2
	.space	2
	.sdecl	'.bss.Dem_Events.Dem_AllEventsState',data,cluster('Dem_AllEventsState')
	.sect	'.bss.Dem_Events.Dem_AllEventsState'
	.global	Dem_AllEventsState
	.align	2
Dem_AllEventsState:	.type	object
	.size	Dem_AllEventsState,24
	.space	24
	.sdecl	'.bss.Dem_Events.Dem_AllEventsState8',data,cluster('Dem_AllEventsState8')
	.sect	'.bss.Dem_Events.Dem_AllEventsState8'
	.global	Dem_AllEventsState8
Dem_AllEventsState8:	.type	object
	.size	Dem_AllEventsState8,6
	.space	6
	.sdecl	'.bss.Dem_Events.Dem_AllEventsResetDebouncerRequested',data,cluster('Dem_AllEventsResetDebouncerRequested')
	.sect	'.bss.Dem_Events.Dem_AllEventsResetDebouncerRequested'
	.global	Dem_AllEventsResetDebouncerRequested
	.align	4
Dem_AllEventsResetDebouncerRequested:	.type	object
	.size	Dem_AllEventsResetDebouncerRequested,4
	.space	4
	.sdecl	'.bss.Dem_Events.Dem_EventWasPassedReported',data,cluster('Dem_EventWasPassedReported')
	.sect	'.bss.Dem_Events.Dem_EventWasPassedReported'
	.global	Dem_EventWasPassedReported
	.align	4
Dem_EventWasPassedReported:	.type	object
	.size	Dem_EventWasPassedReported,4
	.space	4
	.sdecl	'.bss.Dem_Events.Dem_EvtIsAnyInitMonitoringRequestedMask',data,cluster('Dem_EvtIsAnyInitMonitoringRequestedMask')
	.sect	'.bss.Dem_Events.Dem_EvtIsAnyInitMonitoringRequestedMask'
	.global	Dem_EvtIsAnyInitMonitoringRequestedMask
	.align	4
Dem_EvtIsAnyInitMonitoringRequestedMask:	.type	object
	.size	Dem_EvtIsAnyInitMonitoringRequestedMask,4
	.space	4
	.calls	'Dem_EvtPreInitEvents','Dem_EvtSetSuppression'
	.calls	'Dem_GetEventTested','Det_ReportError'
	.calls	'Dem_GetEventTested_GeneralEvtInfo','Dem_GetEventTested'
	.calls	'Dem_EvtSetSuppression','Det_ReportError'
	.calls	'Dem_EvtSetCausal','',0
	.calls	'Dem_EvtIsRecoverable','',0
	.calls	'Dem_EvtClearEventAllowed','',0
	.calls	'Dem_EvtPreInitEvents','',8
	.calls	'Dem_EvtInitEvents','',8
	.calls	'Dem_EvtResetIsoByteCallback','',8
	.calls	'Dem_IsInitMonitorForEventRequested','',0
	.calls	'Dem_GetEventTested','',0
	.calls	'Dem_GetEventTested_GeneralEvtInfo','',0
	.calls	'Dem_GetEventCategory','',0
	.calls	'Dem_GetDtcKindOfEvent','',0
	.calls	'Dem_EvtSetSuppression','',8
	.extern	Dem_OpMoState
	.extern	Det_ReportError
	.extern	Dem_MapDtcIdToEventId
	.extern	Dem_MapEventIdToDtcId
	.extern	Dem_Cfg_Dtc
	.extern	Dem_EvtParam_16
	.extern	Dem_AllDTCsState
	.extern	Dem_AllEventsStatusByte
	.calls	'Dem_IsAnyInitMonitorForEventRequested','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L171:
	.word	28337
	.half	3
	.word	.L172
	.byte	4
.L170:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L173
.L251:
	.byte	2
	.byte	'unsigned char',0,1,8,3
	.word	142
.L425:
	.byte	4
	.byte	'rba_DiagLib_Bit8SetBit',0,3,1,36,19,1,1
.L428:
	.byte	5
	.byte	'buffer',0,1,36,49
	.word	159
.L430:
	.byte	5
	.byte	'bit_position',0,1,36,63
	.word	142
.L432:
	.byte	6,0
.L434:
	.byte	4
	.byte	'rba_DiagLib_Bit8ClearBit',0,3,1,42,19,1,1
.L435:
	.byte	5
	.byte	'buffer',0,1,42,51
	.word	159
.L437:
	.byte	5
	.byte	'bit_position',0,1,42,65
	.word	142
.L439:
	.byte	6,0
.L416:
	.byte	4
	.byte	'rba_DiagLib_Bit8OverwriteBit',0,3,1,48,19,1,1
.L418:
	.byte	5
	.byte	'buffer',0,1,48,55
	.word	159
.L420:
	.byte	5
	.byte	'bit_position',0,1,48,69
	.word	142
.L422:
	.byte	5
	.byte	'will_bit_be_set',0,1,48,91
	.word	142
.L424:
	.byte	7,6,6,0,0
.L274:
	.byte	8
	.byte	'rba_DiagLib_Bit8GetSingleBit',0,3,1,60,20
	.word	142
	.byte	1,1
.L275:
	.byte	5
	.byte	'value',0,1,60,55
	.word	142
.L277:
	.byte	5
	.byte	'bit_position',0,1,60,68
	.word	142
.L279:
	.byte	6,0
.L267:
	.byte	8
	.byte	'rba_DiagLib_Bit8IsBitSet',0,3,1,64,22
	.word	142
	.byte	1,1
.L269:
	.byte	5
	.byte	'value',0,1,64,53
	.word	142
.L271:
	.byte	5
	.byte	'bit_position',0,1,64,66
	.word	142
.L273:
	.byte	7,6,0,0
.L330:
	.byte	8
	.byte	'rba_DiagLib_Bit8GetBits',0,3,1,69,20
	.word	142
	.byte	1,1
.L332:
	.byte	5
	.byte	'value',0,1,69,50
	.word	142
.L334:
	.byte	5
	.byte	'bit_position',0,1,69,63
	.word	142
.L336:
	.byte	5
	.byte	'number_of_bits',0,1,69,83
	.word	142
.L338:
	.byte	6,0
.L348:
	.byte	4
	.byte	'rba_DiagLib_Bit8ClearBits',0,3,1,77,19,1,1
.L350:
	.byte	5
	.byte	'value',0,1,77,52
	.word	159
.L352:
	.byte	5
	.byte	'bit_position',0,1,77,65
	.word	142
.L354:
	.byte	5
	.byte	'number_of_bits',0,1,77,85
	.word	142
.L356:
	.byte	6,0
.L634:
	.byte	4
	.byte	'rba_DiagLib_Bit8OverwriteBits',0,3,1,83,19,1,1
.L636:
	.byte	5
	.byte	'value',0,1,83,56
	.word	159
.L638:
	.byte	5
	.byte	'bit_position',0,1,83,69
	.word	142
.L640:
	.byte	5
	.byte	'number_of_bits',0,1,83,89
	.word	142
.L642:
	.byte	5
	.byte	'newValue',0,1,83,111
	.word	142
.L644:
	.byte	7,6,0,0
.L253:
	.byte	2
	.byte	'unsigned short int',0,2,7
.L315:
	.byte	3
	.word	859
	.byte	4
	.byte	'rba_DiagLib_Bit16SetBit',0,3,2,36,19,1,1,5
	.byte	'buffer',0,2,36,51
	.word	881
	.byte	5
	.byte	'bit_position',0,2,36,65
	.word	142
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit16ClearBit',0,3,2,42,19,1,1,5
	.byte	'buffer',0,2,42,53
	.word	881
	.byte	5
	.byte	'bit_position',0,2,42,67
	.word	142
	.byte	6,0
.L504:
	.byte	8
	.byte	'rba_DiagLib_Bit16GetSingleBit',0,3,2,60,21
	.word	859
	.byte	1,1
.L505:
	.byte	5
	.byte	'value',0,2,60,58
	.word	859
.L507:
	.byte	5
	.byte	'bit_position',0,2,60,71
	.word	142
.L509:
	.byte	6,0
.L497:
	.byte	8
	.byte	'rba_DiagLib_Bit16IsBitSet',0,3,2,65,22
	.word	142
	.byte	1,1
.L499:
	.byte	5
	.byte	'value',0,2,65,55
	.word	859
.L501:
	.byte	5
	.byte	'bit_position',0,2,65,68
	.word	142
.L503:
	.byte	7,6,0,0,8
	.byte	'rba_DiagLib_Bit16GetBits',0,3,2,70,21
	.word	859
	.byte	1,1,5
	.byte	'value',0,2,70,53
	.word	859
	.byte	5
	.byte	'bit_position',0,2,70,66
	.word	142
	.byte	5
	.byte	'number_of_bits',0,2,70,86
	.word	142
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit16ClearBits',0,3,2,78,19,1,1,5
	.byte	'value',0,2,78,54
	.word	881
	.byte	5
	.byte	'bit_position',0,2,78,67
	.word	142
	.byte	5
	.byte	'number_of_bits',0,2,78,87
	.word	142
	.byte	6,0
.L667:
	.byte	2
	.byte	'unsigned int',0,4,7,3
	.word	1370
.L660:
	.byte	4
	.byte	'rba_DiagLib_Bit32SetBit',0,3,3,36,19,1,1
.L662:
	.byte	5
	.byte	'buffer',0,3,36,51
	.word	1386
.L664:
	.byte	5
	.byte	'bit_position',0,3,36,65
	.word	142
.L666:
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit32ClearBit',0,3,3,42,19,1,1,5
	.byte	'buffer',0,3,42,53
	.word	1386
	.byte	5
	.byte	'bit_position',0,3,42,67
	.word	142
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit32GetSingleBit',0,3,3,60,21
	.word	1370
	.byte	1,1,5
	.byte	'value',0,3,60,58
	.word	1370
	.byte	5
	.byte	'bit_position',0,3,60,71
	.word	142
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit32IsBitSet',0,3,3,65,22
	.word	142
	.byte	1,1,5
	.byte	'value',0,3,65,55
	.word	1370
	.byte	5
	.byte	'bit_position',0,3,65,68
	.word	142
	.byte	7,6,0,0,4
	.byte	'rba_DiagLib_Bit32ClearBits',0,3,3,78,19,1,1,5
	.byte	'value',0,3,78,54
	.word	1386
	.byte	5
	.byte	'bit_position',0,3,78,67
	.word	142
	.byte	5
	.byte	'number_of_bits',0,3,78,87
	.word	142
	.byte	6,0,4
	.byte	'Dem_BitArraySetBit',0,3,4,33,17,1,1,5
	.byte	'buffer',0,4,33,36
	.word	1386
	.byte	5
	.byte	'bit_position',0,4,33,75
	.word	1370
	.byte	6,0,4
	.byte	'Dem_BitArrayClearBit',0,3,4,46,17,1,1,5
	.byte	'buffer',0,4,46,38
	.word	1386
	.byte	5
	.byte	'bit_position',0,4,46,77
	.word	1370
	.byte	6,0,4
	.byte	'Dem_BitArrayOverwriteBit',0,3,4,61,17,1,1,5
	.byte	'buffer',0,4,61,42
	.word	1386
	.byte	5
	.byte	'bit_position',0,4,62,25
	.word	1370
	.byte	5
	.byte	'will_bit_be_set',0,4,62,57
	.word	142
	.byte	7,6,6,0,0,9
	.word	1370
	.byte	3
	.word	2006
	.byte	8
	.byte	'Dem_BitArrayIsBitSet',0,3,4,75,30
	.word	142
	.byte	1,1,5
	.byte	'buffer',0,4,75,51
	.word	2011
	.byte	5
	.byte	'bit_position',0,4,75,95
	.word	1370
	.byte	6,0,8
	.byte	'Dem_ISO14229ByteIsTestFailed',0,3,5,122,30
	.word	142
	.byte	1,1,5
	.byte	'self',0,5,122,66
	.word	142
	.byte	7,6,0,0
.L395:
	.byte	8
	.byte	'Dem_ISO14229ByteIsTestFailedTOC',0,3,5,129,1,30
	.word	142
	.byte	1,1
.L397:
	.byte	5
	.byte	'self',0,5,129,1,69
	.word	142
.L399:
	.byte	7,6,0,0
.L285:
	.byte	8
	.byte	'Dem_ISO14229ByteIsTestCompleteTOC',0,3,5,157,1,30
	.word	142
	.byte	1,1
.L287:
	.byte	5
	.byte	'self',0,5,157,1,71
	.word	142
.L289:
	.byte	7,6,0,0,8
	.byte	'Dem_ISO14229ByteIsPendingDTC',0,3,5,164,1,30
	.word	142
	.byte	1,1,5
	.byte	'self',0,5,164,1,66
	.word	142
	.byte	7,6,0,0,8
	.byte	'Dem_ISO14229ByteIsWarningIndicatorRequested',0,3,5,177,1,30
	.word	142
	.byte	1,1,5
	.byte	'self',0,5,177,1,81
	.word	142
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetTestFailed',0,3,5,186,1,17,1,1,5
	.byte	'self',0,5,186,1,55
	.word	159
	.byte	5
	.byte	'setOrReset',0,5,186,1,79
	.word	142
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetTestFailedTOC',0,3,5,193,1,17,1,1,5
	.byte	'self',0,5,193,1,58
	.word	159
	.byte	5
	.byte	'setOrReset',0,5,193,1,82
	.word	142
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetTestFailedSLC',0,3,5,200,1,17,1,1,5
	.byte	'self',0,5,200,1,58
	.word	159
	.byte	5
	.byte	'setOrReset',0,5,200,1,82
	.word	142
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetTestCompleteTOC',0,3,5,214,1,17,1,1,5
	.byte	'self',0,5,214,1,60
	.word	159
	.byte	5
	.byte	'setOrReset',0,5,214,1,84
	.word	142
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetTestCompleteSLC',0,3,5,221,1,17,1,1,5
	.byte	'self',0,5,221,1,60
	.word	159
	.byte	5
	.byte	'setOrReset',0,5,221,1,84
	.word	142
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetPendingDTC',0,3,5,228,1,17,1,1,5
	.byte	'self',0,5,228,1,55
	.word	159
	.byte	5
	.byte	'setOrReset',0,5,228,1,79
	.word	142
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetConfirmedDTC',0,3,5,235,1,17,1,1,5
	.byte	'self',0,5,235,1,57
	.word	159
	.byte	5
	.byte	'setOrReset',0,5,235,1,81
	.word	142
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetWarningIndicatorRequested',0,3,5,242,1,17,1,1,5
	.byte	'self',0,5,242,1,70
	.word	159
	.byte	5
	.byte	'setOrReset',0,5,242,1,94
	.word	142
	.byte	7,6,0,0,8
	.byte	'rba_BswSrv_ByteOrderSwap32',0,3,6,125,21
	.word	1370
	.byte	1,1,5
	.byte	'Input_u32',0,6,125,55
	.word	1370
	.byte	6,0,8
	.byte	'rba_BswSrv_ByteOrderSwap16',0,3,6,150,1,21
	.word	859
	.byte	1,1,5
	.byte	'Input_u16',0,6,150,1,55
	.word	859
	.byte	6,0,8
	.byte	'Dem_LibGetParamUI8',0,3,7,36,18
	.word	142
	.byte	1,1,5
	.byte	'parameter',0,7,36,44
	.word	142
	.byte	6,0,8
	.byte	'Dem_LibGetParamBool',0,3,7,41,20
	.word	142
	.byte	1,1,5
	.byte	'parameter',0,7,41,49
	.word	142
	.byte	6,0
.L257:
	.byte	8
	.byte	'Dem_isEventIdValid',0,3,8,20,30
	.word	142
	.byte	1,1
.L259:
	.byte	5
	.byte	'checkID',0,8,20,65
	.word	859
.L261:
	.byte	6,0
.L323:
	.byte	2
	.byte	'unsigned long int',0,4,7,3
	.word	3310
.L447:
	.byte	4
	.byte	'Dem_EventIdIteratorNew',0,3,8,31,17,1,1
.L450:
	.byte	5
	.byte	'it',0,8,31,61
	.word	3331
.L452:
	.byte	6,0,9
	.word	3310
	.byte	3
	.word	3379
.L468:
	.byte	8
	.byte	'Dem_EventIdIteratorIsValid',0,3,8,36,30
	.word	142
	.byte	1,1
.L470:
	.byte	5
	.byte	'it',0,8,36,84
	.word	3384
.L472:
	.byte	6,0
.L463:
	.byte	4
	.byte	'Dem_EventIdIteratorNext',0,3,8,41,17,1,1
.L465:
	.byte	5
	.byte	'it',0,8,41,62
	.word	3331
.L467:
	.byte	6,0
.L453:
	.byte	8
	.byte	'Dem_EventIdIteratorCurrent',0,3,8,46,28
	.word	859
	.byte	1,1
.L455:
	.byte	5
	.byte	'it',0,8,46,82
	.word	3384
.L457:
	.byte	6,0
.L367:
	.byte	8
	.byte	'Dem_NodeIdFromEventId',0,3,8,105,33
	.word	142
	.byte	1,1
.L369:
	.byte	5
	.byte	'id',0,8,105,72
	.word	859
.L371:
	.byte	6,0
.L441:
	.byte	8
	.byte	'Dem_NodeIdIsValid',0,3,8,111,30
	.word	142
	.byte	1,1
.L442:
	.byte	5
	.byte	'checkID',0,8,111,56
	.word	859
.L444:
	.byte	6,0
.L301:
	.byte	8
	.byte	'Dem_isDtcIdValid',0,3,8,152,1,30
	.word	142
	.byte	1,1
.L303:
	.byte	5
	.byte	'id',0,8,152,1,62
	.word	859
.L305:
	.byte	6,0
.L297:
	.byte	8
	.byte	'Dem_DtcIdFromEventId',0,3,8,158,1,27
	.word	859
	.byte	1,1
.L298:
	.byte	5
	.byte	'id',0,8,158,1,65
	.word	859
.L300:
	.byte	6,0,8
	.byte	'Dem_DtcIdGetEventId',0,3,8,166,1,28
	.word	859
	.byte	1,1,5
	.byte	'dtcid',0,8,166,1,63
	.word	859
	.byte	6,0,8
	.byte	'Dem_DtcIdGetFirstEventId',0,3,8,174,1,28
	.word	859
	.byte	1,1,5
	.byte	'dtcid',0,8,174,1,68
	.word	859
	.byte	7,6,0,0,8
	.byte	'Dem_DtcGroupIdIsValid',0,3,8,252,1,30
	.word	142
	.byte	1,1,5
	.byte	'dtcGroupID',0,8,252,1,72
	.word	142
	.byte	6,0,9
	.word	859
	.byte	3
	.word	3879
.L579:
	.byte	10,8,171,2,9,8,11
	.byte	'it',0
	.word	3884
	.byte	4,2,35,0,11
	.byte	'end',0
	.word	3884
	.byte	4,2,35,4,0,3
	.word	3889
.L581:
	.byte	4
	.byte	'Dem_EventIdListIteratorNewFromDtcId',0,3,8,177,2,17,1,1
.L584:
	.byte	5
	.byte	'it',0,8,177,2,78
	.word	3921
.L586:
	.byte	5
	.byte	'dtcid',0,8,177,2,96
	.word	859
.L588:
	.byte	7,6,0,0,9
	.word	3889
	.byte	3
	.word	4001
.L603:
	.byte	8
	.byte	'Dem_EventIdListIteratorIsValid',0,3,8,193,2,30
	.word	142
	.byte	1,1
.L605:
	.byte	5
	.byte	'it',0,8,193,2,92
	.word	4006
.L607:
	.byte	6,0
.L598:
	.byte	4
	.byte	'Dem_EventIdListIteratorNext',0,3,8,198,2,17,1,1
.L600:
	.byte	5
	.byte	'it',0,8,198,2,70
	.word	3921
.L602:
	.byte	6,0
.L591:
	.byte	8
	.byte	'Dem_EventIdListIteratorCurrent',0,3,8,203,2,28
	.word	859
	.byte	1,1
.L593:
	.byte	5
	.byte	'it',0,8,203,2,90
	.word	4006
.L595:
	.byte	6,0,8
	.byte	'Dem_EnCoAreAllFulfilled',0,3,9,32,30
	.word	142
	.byte	1,1,5
	.byte	'enableConditionList',0,9,32,68
	.word	142
	.byte	6,0
.L306:
	.byte	8
	.byte	'Dem_Cfg_Dtc_GetKind',0,3,10,62,30
	.word	142
	.byte	1,1
.L307:
	.byte	5
	.byte	'indx',0,10,62,64
	.word	859
.L309:
	.byte	6,0,8
	.byte	'Dem_Cfg_Dtc_GetDtcCode',0,3,10,99,30
	.word	1370
	.byte	1,1,5
	.byte	'indx',0,10,99,67
	.word	859
	.byte	6,0,8
	.byte	'Dem_NvMGetNvMBlocKId',0,3,11,49,28
	.word	859
	.byte	1,1,5
	.byte	'id',0,11,49,68
	.word	142
	.byte	6,0,4
	.byte	'Dem_NvMStartClear',0,3,11,138,1,17,1,1,6,0,8
	.byte	'rba_DiagLib_ByteOrderUtils_SwapByteOrderS',0,3,12,36,21
	.word	859
	.byte	1,1,5
	.byte	'val',0,12,36,70
	.word	859
	.byte	7,6,0,0,8
	.byte	'rba_DiagLib_ByteOrderUtils_SwapByteOrderL',0,3,12,41,21
	.word	1370
	.byte	1,1,5
	.byte	'val',0,12,41,70
	.word	1370
	.byte	7,6,0,0
.L363:
	.byte	8
	.byte	'Dem_EvtParam_GetIsRecoverable',0,3,13,48,22
	.word	142
	.byte	1,1
.L364:
	.byte	5
	.byte	'indx',0,13,48,68
	.word	859
.L366:
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetStoreTestFailedToNextOC',0,3,13,55,22
	.word	142
	.byte	1,1,5
	.byte	'indx',0,13,55,78
	.word	859
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetEventIsStoredInPrimary',0,3,13,75,22
	.word	142
	.byte	1,1,5
	.byte	'indx',0,13,75,77
	.word	859
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetEventIsStoredInSecondary',0,3,13,82,22
	.word	142
	.byte	1,1,5
	.byte	'indx',0,13,82,79
	.word	859
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetEventIsStoredInMirror',0,3,13,89,22
	.word	142
	.byte	1,1,5
	.byte	'indx',0,13,89,76
	.word	859
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetAgingAllowed',0,3,13,95,22
	.word	142
	.byte	1,1,5
	.byte	'indx',0,13,95,67
	.word	859
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetOperationCycleID',0,3,13,122,20
	.word	142
	.byte	1,1,5
	.byte	'indx',0,13,122,69
	.word	859
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetAgingCycleID',0,3,13,129,1,20
	.word	142
	.byte	1,1,5
	.byte	'indx',0,13,129,1,65
	.word	859
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetFailureCycleID',0,3,13,136,1,20
	.word	142
	.byte	1,1,5
	.byte	'indx',0,13,136,1,67
	.word	859
	.byte	6,0
.L491:
	.byte	8
	.byte	'Dem_EvtParam_GetInitialSuppressionStatus',0,3,13,142,1,22
	.word	142
	.byte	1,1
.L492:
	.byte	5
	.byte	'indx',0,13,142,1,79
	.word	859
.L494:
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetDebounceMethodIndex',0,3,13,149,1,20
	.word	142
	.byte	1,1,5
	.byte	'indx',0,13,149,1,72
	.word	859
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetDebounceParamSettingIndex',0,3,13,155,1,21
	.word	859
	.byte	1,1,5
	.byte	'indx',0,13,155,1,79
	.word	859
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetAgingThreshold',0,3,13,168,1,20
	.word	142
	.byte	1,1,5
	.byte	'indx',0,13,168,1,67
	.word	859
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetEnableConditions',0,3,13,208,1,27
	.word	142
	.byte	1,1,5
	.byte	'indx',0,13,208,1,76
	.word	859
	.byte	6,0,2
	.byte	'short int',0,2,5,8
	.byte	'Dem_EvtGetDebounceLevel',0,3,14,193,1,19
	.word	5425
	.byte	1,1,5
	.byte	'EventId',0,14,193,1,60
	.word	859
	.byte	6,0,8
	.byte	'Dem_EvtGetLastReportedEvent',0,3,14,219,1,32
	.word	142
	.byte	1,1,5
	.byte	'EventId',0,14,219,1,77
	.word	859
	.byte	6,0
.L481:
	.byte	4
	.byte	'Dem_EvtSetLastReportedEvent',0,3,14,225,1,17,1,1
.L484:
	.byte	5
	.byte	'EventId',0,14,225,1,62
	.word	859
.L486:
	.byte	5
	.byte	'EventStatus',0,14,225,1,91
	.word	142
.L488:
	.byte	6,0
.L376:
	.byte	8
	.byte	'Dem_EvtIsCausal',0,3,14,244,1,30
	.word	142
	.byte	1,1
.L378:
	.byte	5
	.byte	'EventId',0,14,244,1,63
	.word	859
.L380:
	.byte	7,6,0,0
.L410:
	.byte	4
	.byte	'Dem_EvtSetCausal_Flag',0,3,14,250,1,17,1,1
.L411:
	.byte	5
	.byte	'EventId',0,14,250,1,56
	.word	859
.L413:
	.byte	5
	.byte	'setBit',0,14,250,1,83
	.word	142
.L415:
	.byte	7,6,0,0
.L386:
	.byte	8
	.byte	'Dem_EvtIsRecheckedAndWaitingForMonResult',0,3,14,128,2,30
	.word	142
	.byte	1,1
.L387:
	.byte	5
	.byte	'EventId',0,14,128,2,88
	.word	859
.L389:
	.byte	6,0
.L652:
	.byte	4
	.byte	'Dem_EvtIncreaseGlobalInitMonitoringCounter',0,3,14,227,3,17,1,1
.L654:
	.byte	6,0
.L655:
	.byte	4
	.byte	'Dem_EvtSetAnyInitMonitoring',0,3,14,233,3,17,1,1
.L657:
	.byte	5
	.byte	'reason',0,14,233,3,72
	.word	142
.L659:
	.byte	7,6,0,0
.L621:
	.byte	4
	.byte	'Dem_EvtSetInitMonitoring',0,3,14,241,3,17,1,1
.L623:
	.byte	5
	.byte	'EventId',0,14,241,3,59
	.word	859
.L625:
	.byte	5
	.byte	'newReason',0,14,241,3,94
	.word	142
.L627:
	.byte	7,6,6,6,6,0,0
.L325:
	.byte	8
	.byte	'Dem_EvtIsInitMonitoringRequested',0,3,14,128,4,18
	.word	142
	.byte	1,1
.L327:
	.byte	5
	.byte	'EventId',0,14,128,4,68
	.word	859
.L329:
	.byte	7,6,0,0
.L343:
	.byte	4
	.byte	'Dem_EvtClearInitMonitoringRequests',0,3,14,133,4,17,1,1
.L345:
	.byte	5
	.byte	'EventId',0,14,133,4,69
	.word	859
.L347:
	.byte	7,6,0,0
.L262:
	.byte	8
	.byte	'Dem_EvtIsSuppressed',0,3,14,244,4,30
	.word	142
	.byte	1,1
.L264:
	.byte	5
	.byte	'EventId',0,14,244,4,67
	.word	859
.L266:
	.byte	7,6,0,0
.L372:
	.byte	8
	.byte	'Dem_NodeRecoveryAllowed',0,3,15,192,2,20
	.word	142
	.byte	1,1
.L373:
	.byte	5
	.byte	'NodeId',0,15,192,2,65
	.word	142
.L375:
	.byte	6,0,8
	.byte	'Dem_DebHandleDebounceAction__processBits',0,3,16,101,30
	.word	142
	.byte	1,1,5
	.byte	'EventId',0,16,101,87
	.word	859
	.byte	5
	.byte	'debAction',0,16,101,120
	.word	3310
	.byte	6,0,12
	.word	859
	.byte	3
	.word	6326
	.byte	4
	.byte	'Dem_ClientResultType_setResult',0,3,17,27,17,1,1,5
	.byte	'result',0,17,27,79
	.word	6331
	.byte	5
	.byte	'request',0,17,27,109
	.word	859
	.byte	5
	.byte	'newResult',0,17,27,133,1
	.word	142
	.byte	6,0,12
	.word	859
	.byte	3
	.word	6426
	.byte	4
	.byte	'Dem_ClientRequestType_setRequest',0,3,17,65,17,1,1,5
	.byte	'request',0,17,65,82
	.word	6431
	.byte	5
	.byte	'newRequest',0,17,65,97
	.word	142
	.byte	6,0,3
	.word	1370
	.byte	4
	.byte	'Dem_ClientSelectionType_invalidateSelectionResult',0,3,17,151,1,17,1,1,5
	.byte	'selection',0,17,151,1,93
	.word	6513
	.byte	6,0,8
	.byte	'Dem_ClientSelectionType_getTypeOfSelection',0,3,17,168,1,18
	.word	142
	.byte	1,1,5
	.byte	'selection',0,17,168,1,86
	.word	1370
	.byte	6,0,4
	.byte	'Dem_ClientClearMachine_SetMachineActiveClient',0,3,18,53,17,1,1,5
	.byte	'ClientId',0,18,53,80
	.word	142
	.byte	6,0,4
	.byte	'Dem_ClientClearMachine_SetMachineState',0,3,18,68,17,1,1,5
	.byte	'state',0,18,68,62
	.word	142
	.byte	6,0,8
	.byte	'Dem_ClientClearMachine_isClearDtcGroupAllDtcsSelected',0,3,18,78,20
	.word	142
	.byte	1,1,5
	.byte	'ClientId',0,18,78,91
	.word	142
	.byte	7,6,6,6,6,0,0,3
	.word	142
	.byte	4
	.byte	'Dem_EnvSetTrigger',0,3,19,17,17,1,1,5
	.byte	'trigger',0,19,17,52
	.word	6896
	.byte	5
	.byte	'trigger2set',0,19,17,77
	.word	142
	.byte	6,0,8
	.byte	'Dem_EnvIsAnyTriggerSet',0,3,19,22,30
	.word	142
	.byte	1,1,5
	.byte	'trigger2test',0,19,22,69
	.word	142
	.byte	6,0,8
	.byte	'Dem_EvMemIsMemIdValid',0,3,20,103,30
	.word	142
	.byte	1,1,5
	.byte	'MemId',0,20,103,65
	.word	3310
	.byte	6,0,8
	.byte	'Dem_EvMemIsEventMemLocIdValid',0,3,20,112,30
	.word	142
	.byte	1,1,5
	.byte	'LocId',0,20,112,73
	.word	3310
	.byte	6,0,10,21,133,1,3,4,11
	.byte	'Status',0
	.word	859
	.byte	2,2,35,0,11
	.byte	'EventId',0
	.word	859
	.byte	2,2,35,2,0,13,21,131,1,9,4,11
	.byte	'Data',0
	.word	7127
	.byte	4,2,35,0,0,14,7
	.word	142
	.byte	15,6,0,10,21,144,1,9,20,11
	.byte	'Hdr',0
	.word	7167
	.byte	4,2,35,0,11
	.byte	'Data',0
	.word	7188
	.byte	7,2,35,4,11
	.byte	'FailureCounter',0
	.word	142
	.byte	1,2,35,11,11
	.byte	'FreezeFrameCounter',0
	.word	142
	.byte	1,2,35,12,11
	.byte	'AgingCounter',0
	.word	142
	.byte	1,2,35,13,11
	.byte	'OccurrenceCounter',0
	.word	142
	.byte	1,2,35,14,11
	.byte	'Trigger',0
	.word	142
	.byte	1,2,35,15,11
	.byte	'TimeId',0
	.word	1370
	.byte	4,2,35,16,0,9
	.word	7197
	.byte	3
	.word	7365
	.byte	8
	.byte	'Dem_EvMemGetEventMemStatusByPtr',0,3,20,134,1,25
	.word	3310
	.byte	1,1,5
	.byte	'EventMemory',0,20,134,1,89
	.word	7370
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemStatus',0,3,20,139,1,25
	.word	3310
	.byte	1,1,5
	.byte	'LocId',0,20,139,1,65
	.word	3310
	.byte	7,6,0,0,8
	.byte	'Dem_EvMemGetEventMemEventIdByPtr',0,3,20,152,1,28
	.word	859
	.byte	1,1,5
	.byte	'EventMemory',0,20,152,1,93
	.word	7370
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemTimeIdByPtr',0,3,20,170,1,19
	.word	1370
	.byte	1,1,5
	.byte	'EventMemory',0,20,170,1,83
	.word	7370
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemDtcStatusByPtr',0,3,20,188,1,18
	.word	142
	.byte	1,1,5
	.byte	'EventMemory',0,20,188,1,85
	.word	7370
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemFailureCounterByPtr',0,3,20,216,1,24
	.word	3310
	.byte	1,1,5
	.byte	'EventMemory',0,20,216,1,96
	.word	7370
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemOccurrenceCounterByPtr',0,3,20,233,1,25
	.word	3310
	.byte	1,1,5
	.byte	'EventMemory',0,20,233,1,100
	.word	7370
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemAgingCounterByPtr',0,3,20,133,2,25
	.word	3310
	.byte	1,1,5
	.byte	'EventMemory',0,20,133,2,95
	.word	7370
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemAgingCounter',0,3,20,144,2,25
	.word	3310
	.byte	1,1,5
	.byte	'LocId',0,20,144,2,71
	.word	3310
	.byte	7,6,0,0,4
	.byte	'Dem_EvMemSetEventMemAgingCounter',0,3,20,150,2,17,1,1,5
	.byte	'LocId',0,20,150,2,63
	.word	3310
	.byte	5
	.byte	'AgingCounter',0,20,150,2,83
	.word	3310
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr',0,3,20,161,2,25
	.word	3310
	.byte	1,1,5
	.byte	'EventMemory',0,20,161,2,103
	.word	7370
	.byte	6,0,2
	.byte	'char',0,1,6,8
	.byte	'Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr',0,3,20,213,2,18
	.word	8156
	.byte	1,1,5
	.byte	'EventMemory',0,20,213,2,92
	.word	7370
	.byte	6,0,8
	.byte	'Dem_EvMemGetMaxFdcSinceLastClearByPtr',0,3,20,224,2,18
	.word	8156
	.byte	1,1,5
	.byte	'EventMemory',0,20,224,2,88
	.word	7370
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemFreezeFrameCounterByPtr',0,3,20,238,3,25
	.word	3310
	.byte	1,1,5
	.byte	'EventMemory',0,20,238,3,101
	.word	7370
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemTriggerByPtr',0,3,20,141,4,28
	.word	142
	.byte	1,1,5
	.byte	'EventMemory',0,20,141,4,93
	.word	7370
	.byte	6,0,3
	.word	7197
	.byte	8
	.byte	'Dem_EvMemGetEventMemDataByPtr',0,3,20,170,4,19
	.word	159
	.byte	1,1,5
	.byte	'EventMemory',0,20,170,4,75
	.word	8461
	.byte	6,0,8
	.byte	'Dem_EvMemIsStored',0,3,20,206,4,30
	.word	142
	.byte	1,1,5
	.byte	'Status',0,20,206,4,61
	.word	3310
	.byte	6,0,8
	.byte	'Dem_EvMemIsEmpty',0,3,20,211,4,30
	.word	142
	.byte	1,1,5
	.byte	'Status',0,20,211,4,60
	.word	3310
	.byte	6,0,8
	.byte	'Dem_EvMemSetToEmpty',0,3,20,226,4,25
	.word	3310
	.byte	1,1,6,0,8
	.byte	'Dem_EvMemGetShadowVisibility',0,3,20,242,4,30
	.word	142
	.byte	1,1,6,0,8
	.byte	'Dem_EvMemGetEventMemStartLocId',0,3,20,131,5,25
	.word	3310
	.byte	1,1,5
	.byte	'MemId',0,20,131,5,69
	.word	3310
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemEndLocId',0,3,20,143,5,25
	.word	3310
	.byte	1,1,5
	.byte	'MemId',0,20,143,5,67
	.word	3310
	.byte	6,0,3
	.word	3310
	.byte	4
	.byte	'Dem_EvMemEventMemoryIteratorNew',0,3,20,179,5,17,1,1,5
	.byte	'MemId',0,20,179,5,63
	.word	8821
	.byte	6,0,9
	.word	3310
	.byte	3
	.word	8883
	.byte	8
	.byte	'Dem_EvMemEventMemoryIteratorIsValid',0,3,20,184,5,30
	.word	142
	.byte	1,1,5
	.byte	'MemId',0,20,184,5,86
	.word	8888
	.byte	6,0,4
	.byte	'Dem_EvMemEventMemoryIteratorNext',0,3,20,189,5,17,1,1,5
	.byte	'MemId',0,20,189,5,64
	.word	8821
	.byte	6,0,8
	.byte	'Dem_EvMemIsEdgeTrigger',0,3,20,247,5,30
	.word	142
	.byte	1,1,5
	.byte	'StatusOld',0,20,247,5,66
	.word	3310
	.byte	5
	.byte	'StatusNew',0,20,247,5,90
	.word	3310
	.byte	5
	.byte	'Trigger',0,20,247,5,114
	.word	3310
	.byte	6,0,8
	.byte	'Dem_EvMemGetRamStsMask',0,3,20,154,7,25
	.word	3310
	.byte	1,1,5
	.byte	'EventId',0,20,154,7,64
	.word	859
	.byte	7,6,0,0,8
	.byte	'Dem_EvMemGetCurrentAgingCycleCounterInt',0,3,22,20,25
	.word	3310
	.byte	1,1,5
	.byte	'EventId',0,22,20,81
	.word	859
	.byte	6,0,8
	.byte	'Dem_EvMemIsAged',0,3,22,61,30
	.word	142
	.byte	1,1,5
	.byte	'EventId',0,22,61,62
	.word	859
	.byte	5
	.byte	'LocId',0,22,61,84
	.word	3310
	.byte	5
	.byte	'StatusNew',0,22,61,104
	.word	3310
	.byte	6,0,8
	.byte	'Dem_EvMemGetMemIdForDTCOrigin',0,3,23,150,1,25
	.word	3310
	.byte	1,1,5
	.byte	'DTCOrigin',0,23,150,1,73
	.word	142
	.byte	6,0,8
	.byte	'Dem_EvMemGetMemIdForEvent',0,3,23,222,1,25
	.word	3310
	.byte	1,1,5
	.byte	'EventId',0,23,222,1,67
	.word	859
	.byte	7,6,0,0,8
	.byte	'Dem_DtcIsSuppressed',0,3,24,118,30
	.word	142
	.byte	1,1,5
	.byte	'dtcId',0,24,118,65
	.word	859
	.byte	7,6,0,0
.L573:
	.byte	8
	.byte	'Dem_DtcIsSuppressedDirectly',0,3,24,128,1,30
	.word	142
	.byte	1,1
.L574:
	.byte	5
	.byte	'dtcId',0,24,128,1,73
	.word	859
.L576:
	.byte	6,0
.L567:
	.byte	4
	.byte	'Dem_DtcHandleEventSuppression',0,3,24,146,1,17,1,1
.L568:
	.byte	5
	.byte	'dtcId',0,24,146,1,62
	.word	859
.L570:
	.byte	5
	.byte	'eventUnsuppressed',0,24,146,1,87
	.word	142
.L572:
	.byte	7
.L577:
	.byte	6,6,6,6,6,6,6,6,0,0,8
	.byte	'Dem_EventUsesOrigin',0,3,24,137,2,30
	.word	142
	.byte	1,1,5
	.byte	'eventId',0,24,137,2,67
	.word	859
	.byte	5
	.byte	'origin',0,24,137,2,94
	.word	142
	.byte	7,6,6,6,0,0,8
	.byte	'Dem_EvtGetIsoByte',0,3,25,42,34
	.word	142
	.byte	1,1,5
	.byte	'EventId',0,25,42,69
	.word	859
	.byte	6,0
.L458:
	.byte	4
	.byte	'Dem_EvtSt_HandleInitialization',0,3,25,141,1,17,1,1
.L460:
	.byte	5
	.byte	'EventId',0,25,141,1,65
	.word	859
.L462:
	.byte	6,0
.L616:
	.byte	4
	.byte	'Dem_EvtSt_HandleEvtAvailable',0,3,25,198,1,17,1,1
.L618:
	.byte	5
	.byte	'EventId',0,25,198,1,62
	.word	859
.L620:
	.byte	6,0
.L535:
	.byte	4
	.byte	'Dem_EvtSt_HandleEvtNotAvailable',0,3,25,206,1,17,1,1
.L536:
	.byte	5
	.byte	'EventId',0,25,206,1,65
	.word	859
.L538:
	.byte	6,0
.L390:
	.byte	8
	.byte	'Dem_EvtSt_GetTestFailedTOC',0,3,25,151,3,30
	.word	142
	.byte	1,1
.L392:
	.byte	5
	.byte	'EventId',0,25,151,3,73
	.word	859
.L394:
	.byte	7,6,0,0
.L280:
	.byte	8
	.byte	'Dem_EvtSt_GetTestCompleteTOC',0,3,25,155,3,30
	.word	142
	.byte	1,1
.L282:
	.byte	5
	.byte	'EventId',0,25,155,3,76
	.word	859
.L284:
	.byte	7,6,0,0,4
	.byte	'Dem_CallBackTriggerOnEventStatus',0,3,26,17,17,1,1,5
	.byte	'EventId',0,26,18,19
	.word	859
	.byte	5
	.byte	'EventStatusOld',0,26,19,25
	.word	142
	.byte	5
	.byte	'EventStatusNew',0,26,20,25
	.word	142
	.byte	5
	.byte	'dtcStByteOld',0,26,21,25
	.word	142
	.byte	6,0,16
	.word	164
	.byte	17
	.word	194
	.byte	17
	.word	209
	.byte	6,0,16
	.word	232
	.byte	17
	.word	264
	.byte	17
	.word	279
	.byte	6,0,16
	.word	302
	.byte	17
	.word	338
	.byte	17
	.word	353
	.byte	17
	.word	374
	.byte	7,18
	.word	164
	.byte	17
	.word	194
	.byte	17
	.word	209
	.byte	19
	.word	230
	.byte	0,6,18
	.word	232
	.byte	17
	.word	264
	.byte	17
	.word	279
	.byte	19
	.word	300
	.byte	0,6,0,0,16
	.word	403
	.byte	17
	.word	443
	.byte	17
	.word	457
	.byte	6,0,16
	.word	480
	.byte	17
	.word	516
	.byte	17
	.word	530
	.byte	7,18
	.word	403
	.byte	17
	.word	443
	.byte	17
	.word	457
	.byte	19
	.word	478
	.byte	0,6,0,0,16
	.word	555
	.byte	17
	.word	590
	.byte	17
	.word	604
	.byte	17
	.word	625
	.byte	6,0,16
	.word	650
	.byte	17
	.word	683
	.byte	17
	.word	697
	.byte	17
	.word	718
	.byte	6,0,16
	.word	743
	.byte	17
	.word	780
	.byte	17
	.word	794
	.byte	17
	.word	815
	.byte	17
	.word	838
	.byte	7,18
	.word	650
	.byte	17
	.word	683
	.byte	17
	.word	697
	.byte	17
	.word	718
	.byte	19
	.word	741
	.byte	0,6,0,0,16
	.word	886
	.byte	17
	.word	917
	.byte	17
	.word	932
	.byte	6,0,16
	.word	955
	.byte	17
	.word	988
	.byte	17
	.word	1003
	.byte	6,0,16
	.word	1026
	.byte	17
	.word	1067
	.byte	17
	.word	1081
	.byte	6,0,16
	.word	1104
	.byte	17
	.word	1141
	.byte	17
	.word	1155
	.byte	7,18
	.word	1026
	.byte	17
	.word	1067
	.byte	17
	.word	1081
	.byte	19
	.word	1102
	.byte	0,6,0,0,16
	.word	1180
	.byte	17
	.word	1216
	.byte	17
	.word	1230
	.byte	17
	.word	1251
	.byte	6,0,16
	.word	1276
	.byte	17
	.word	1310
	.byte	17
	.word	1324
	.byte	17
	.word	1345
	.byte	6,0,16
	.word	1391
	.byte	17
	.word	1422
	.byte	17
	.word	1437
	.byte	6,0,16
	.word	1460
	.byte	17
	.word	1493
	.byte	17
	.word	1508
	.byte	6,0,16
	.word	1531
	.byte	17
	.word	1572
	.byte	17
	.word	1586
	.byte	6,0,16
	.word	1609
	.byte	17
	.word	1646
	.byte	17
	.word	1660
	.byte	7,18
	.word	1531
	.byte	17
	.word	1572
	.byte	17
	.word	1586
	.byte	19
	.word	1607
	.byte	0,6,0,0,16
	.word	1685
	.byte	17
	.word	1719
	.byte	17
	.word	1733
	.byte	17
	.word	1754
	.byte	6,0
.L255:
	.byte	3
	.word	142
.L293:
	.byte	3
	.word	142
.L312:
	.byte	3
	.word	142
.L321:
	.byte	3
	.word	142
	.byte	16
	.word	1779
	.byte	17
	.word	1805
	.byte	17
	.word	1820
	.byte	6,0,16
	.word	1843
	.byte	17
	.word	1871
	.byte	17
	.word	1886
	.byte	6,0,16
	.word	1909
	.byte	17
	.word	1941
	.byte	17
	.word	1956
	.byte	17
	.word	1977
	.byte	7,18
	.word	1779
	.byte	17
	.word	1805
	.byte	17
	.word	1820
	.byte	19
	.word	1841
	.byte	0,6,18
	.word	1843
	.byte	17
	.word	1871
	.byte	17
	.word	1886
	.byte	19
	.word	1907
	.byte	0,6,0,0,16
	.word	2016
	.byte	17
	.word	2048
	.byte	17
	.word	2063
	.byte	6,0,16
	.word	2086
	.byte	17
	.word	2126
	.byte	7,18
	.word	480
	.byte	17
	.word	516
	.byte	17
	.word	530
	.byte	20
	.word	551
	.byte	18
	.word	403
	.byte	17
	.word	443
	.byte	17
	.word	457
	.byte	19
	.word	478
	.byte	0,19
	.word	552
	.byte	0,0,6,0,0,16
	.word	2143
	.byte	17
	.word	2187
	.byte	7,18
	.word	480
	.byte	17
	.word	516
	.byte	17
	.word	530
	.byte	20
	.word	551
	.byte	18
	.word	403
	.byte	17
	.word	443
	.byte	17
	.word	457
	.byte	19
	.word	478
	.byte	0,19
	.word	552
	.byte	0,0,6,0,0,16
	.word	2205
	.byte	17
	.word	2251
	.byte	7,18
	.word	480
	.byte	17
	.word	516
	.byte	17
	.word	530
	.byte	20
	.word	551
	.byte	18
	.word	403
	.byte	17
	.word	443
	.byte	17
	.word	457
	.byte	19
	.word	478
	.byte	0,19
	.word	552
	.byte	0,0,6,0,0,16
	.word	2269
	.byte	17
	.word	2310
	.byte	7,18
	.word	480
	.byte	17
	.word	516
	.byte	17
	.word	530
	.byte	20
	.word	551
	.byte	18
	.word	403
	.byte	17
	.word	443
	.byte	17
	.word	457
	.byte	19
	.word	478
	.byte	0,19
	.word	552
	.byte	0,0,6,0,0,16
	.word	2328
	.byte	17
	.word	2384
	.byte	7,18
	.word	480
	.byte	17
	.word	516
	.byte	17
	.word	530
	.byte	20
	.word	551
	.byte	18
	.word	403
	.byte	17
	.word	443
	.byte	17
	.word	457
	.byte	19
	.word	478
	.byte	0,19
	.word	552
	.byte	0,0,6,0,0,16
	.word	2402
	.byte	17
	.word	2440
	.byte	17
	.word	2454
	.byte	7,18
	.word	302
	.byte	17
	.word	338
	.byte	17
	.word	353
	.byte	17
	.word	374
	.byte	20
	.word	398
	.byte	18
	.word	164
	.byte	17
	.word	194
	.byte	17
	.word	209
	.byte	19
	.word	230
	.byte	0,19
	.word	399
	.byte	18
	.word	232
	.byte	17
	.word	264
	.byte	17
	.word	279
	.byte	19
	.word	300
	.byte	0,19
	.word	400
	.byte	0,0,6,0,0,16
	.word	2478
	.byte	17
	.word	2519
	.byte	17
	.word	2533
	.byte	7,18
	.word	302
	.byte	17
	.word	338
	.byte	17
	.word	353
	.byte	17
	.word	374
	.byte	20
	.word	398
	.byte	18
	.word	164
	.byte	17
	.word	194
	.byte	17
	.word	209
	.byte	19
	.word	230
	.byte	0,19
	.word	399
	.byte	18
	.word	232
	.byte	17
	.word	264
	.byte	17
	.word	279
	.byte	19
	.word	300
	.byte	0,19
	.word	400
	.byte	0,0,6,0,0,16
	.word	2557
	.byte	17
	.word	2598
	.byte	17
	.word	2612
	.byte	7,18
	.word	302
	.byte	17
	.word	338
	.byte	17
	.word	353
	.byte	17
	.word	374
	.byte	20
	.word	398
	.byte	18
	.word	164
	.byte	17
	.word	194
	.byte	17
	.word	209
	.byte	19
	.word	230
	.byte	0,19
	.word	399
	.byte	18
	.word	232
	.byte	17
	.word	264
	.byte	17
	.word	279
	.byte	19
	.word	300
	.byte	0,19
	.word	400
	.byte	0,0,6,0,0,16
	.word	2636
	.byte	17
	.word	2679
	.byte	17
	.word	2693
	.byte	7,18
	.word	302
	.byte	17
	.word	338
	.byte	17
	.word	353
	.byte	17
	.word	374
	.byte	20
	.word	398
	.byte	18
	.word	164
	.byte	17
	.word	194
	.byte	17
	.word	209
	.byte	19
	.word	230
	.byte	0,19
	.word	399
	.byte	18
	.word	232
	.byte	17
	.word	264
	.byte	17
	.word	279
	.byte	19
	.word	300
	.byte	0,19
	.word	400
	.byte	0,0,6,0,0,16
	.word	2717
	.byte	17
	.word	2760
	.byte	17
	.word	2774
	.byte	7,18
	.word	302
	.byte	17
	.word	338
	.byte	17
	.word	353
	.byte	17
	.word	374
	.byte	20
	.word	398
	.byte	18
	.word	164
	.byte	17
	.word	194
	.byte	17
	.word	209
	.byte	19
	.word	230
	.byte	0,19
	.word	399
	.byte	18
	.word	232
	.byte	17
	.word	264
	.byte	17
	.word	279
	.byte	19
	.word	300
	.byte	0,19
	.word	400
	.byte	0,0,6,0,0,16
	.word	2798
	.byte	17
	.word	2836
	.byte	17
	.word	2850
	.byte	7,18
	.word	302
	.byte	17
	.word	338
	.byte	17
	.word	353
	.byte	17
	.word	374
	.byte	20
	.word	398
	.byte	18
	.word	164
	.byte	17
	.word	194
	.byte	17
	.word	209
	.byte	19
	.word	230
	.byte	0,19
	.word	399
	.byte	18
	.word	232
	.byte	17
	.word	264
	.byte	17
	.word	279
	.byte	19
	.word	300
	.byte	0,19
	.word	400
	.byte	0,0,6,0,0,16
	.word	2874
	.byte	17
	.word	2914
	.byte	17
	.word	2928
	.byte	7,18
	.word	302
	.byte	17
	.word	338
	.byte	17
	.word	353
	.byte	17
	.word	374
	.byte	20
	.word	398
	.byte	18
	.word	164
	.byte	17
	.word	194
	.byte	17
	.word	209
	.byte	19
	.word	230
	.byte	0,19
	.word	399
	.byte	18
	.word	232
	.byte	17
	.word	264
	.byte	17
	.word	279
	.byte	19
	.word	300
	.byte	0,19
	.word	400
	.byte	0,0,6,0,0,16
	.word	2952
	.byte	17
	.word	3005
	.byte	17
	.word	3019
	.byte	7,18
	.word	302
	.byte	17
	.word	338
	.byte	17
	.word	353
	.byte	17
	.word	374
	.byte	20
	.word	398
	.byte	18
	.word	164
	.byte	17
	.word	194
	.byte	17
	.word	209
	.byte	19
	.word	230
	.byte	0,19
	.word	399
	.byte	18
	.word	232
	.byte	17
	.word	264
	.byte	17
	.word	279
	.byte	19
	.word	300
	.byte	0,19
	.word	400
	.byte	0,0,6,0,0,21
	.byte	'Det_ReportError',0,27,112,16
	.word	142
	.byte	1,1,1,1,5
	.byte	'ModuleId',0,27,112,39
	.word	859
	.byte	5
	.byte	'InstanceId',0,27,112,55
	.word	142
	.byte	5
	.byte	'ApiId',0,27,112,73
	.word	142
	.byte	5
	.byte	'ErrorId',0,27,112,86
	.word	142
	.byte	0,16
	.word	3043
	.byte	17
	.word	3081
	.byte	6,0,16
	.word	3101
	.byte	17
	.word	3140
	.byte	6,0,16
	.word	3161
	.byte	17
	.word	3191
	.byte	6,0,16
	.word	3211
	.byte	17
	.word	3242
	.byte	6,0,16
	.word	3262
	.byte	17
	.word	3292
	.byte	6,0,16
	.word	3336
	.byte	17
	.word	3366
	.byte	6,0,16
	.word	3389
	.byte	17
	.word	3427
	.byte	6,0,16
	.word	3440
	.byte	17
	.word	3471
	.byte	6,0,16
	.word	3484
	.byte	17
	.word	3522
	.byte	6,0,16
	.word	3535
	.byte	17
	.word	3568
	.byte	6,0,16
	.word	3581
	.byte	17
	.word	3610
	.byte	6,0,16
	.word	3628
	.byte	17
	.word	3657
	.byte	6,0,16
	.word	3671
	.byte	17
	.word	3704
	.byte	6,0,16
	.word	3718
	.byte	17
	.word	3750
	.byte	6,0,16
	.word	3767
	.byte	17
	.word	3804
	.byte	7,18
	.word	3718
	.byte	17
	.word	3750
	.byte	19
	.word	3765
	.byte	0,6,0,0,16
	.word	3823
	.byte	17
	.word	3857
	.byte	6,0,16
	.word	3926
	.byte	17
	.word	3970
	.byte	17
	.word	3982
	.byte	7,18
	.word	3628
	.byte	17
	.word	3657
	.byte	19
	.word	3669
	.byte	0,6,0,0,16
	.word	4011
	.byte	17
	.word	4054
	.byte	6,0,16
	.word	4068
	.byte	17
	.word	4104
	.byte	6,0,16
	.word	4118
	.byte	17
	.word	4161
	.byte	6,0,16
	.word	4175
	.byte	17
	.word	4210
	.byte	6,0,16
	.word	4240
	.byte	17
	.word	4271
	.byte	6,0,16
	.word	4286
	.byte	17
	.word	4320
	.byte	6,0,16
	.word	4335
	.byte	17
	.word	4367
	.byte	6,0,16
	.word	4380
	.byte	6,0,16
	.word	4408
	.byte	17
	.word	4461
	.byte	7,18
	.word	3101
	.byte	17
	.word	3140
	.byte	19
	.word	3159
	.byte	0,6,0,0,16
	.word	4477
	.byte	17
	.word	4530
	.byte	7,18
	.word	3043
	.byte	17
	.word	3081
	.byte	19
	.word	3099
	.byte	0,6,0,0,16
	.word	4546
	.byte	17
	.word	4587
	.byte	6,0,16
	.word	4602
	.byte	17
	.word	4653
	.byte	6,0,16
	.word	4668
	.byte	17
	.word	4718
	.byte	7,18
	.word	1104
	.byte	17
	.word	1141
	.byte	17
	.word	1155
	.byte	20
	.word	1176
	.byte	18
	.word	1026
	.byte	17
	.word	1067
	.byte	17
	.word	1081
	.byte	19
	.word	1102
	.byte	0,19
	.word	1177
	.byte	0,0,6,0,0,16
	.word	4735
	.byte	17
	.word	4787
	.byte	6,0,16
	.word	4802
	.byte	17
	.word	4851
	.byte	6,0,16
	.word	4866
	.byte	17
	.word	4906
	.byte	7,18
	.word	1104
	.byte	17
	.word	1141
	.byte	17
	.word	1155
	.byte	20
	.word	1176
	.byte	18
	.word	1026
	.byte	17
	.word	1067
	.byte	17
	.word	1081
	.byte	19
	.word	1102
	.byte	0,19
	.word	1177
	.byte	0,0,6,0,0,16
	.word	4923
	.byte	17
	.word	4967
	.byte	6,0,16
	.word	4982
	.byte	17
	.word	5023
	.byte	6,0,16
	.word	5039
	.byte	17
	.word	5082
	.byte	6,0,16
	.word	5098
	.byte	17
	.word	5151
	.byte	7,18
	.word	1104
	.byte	17
	.word	1141
	.byte	17
	.word	1155
	.byte	20
	.word	1176
	.byte	18
	.word	1026
	.byte	17
	.word	1067
	.byte	17
	.word	1081
	.byte	19
	.word	1102
	.byte	0,19
	.word	1177
	.byte	0,0,6,0,0,16
	.word	5169
	.byte	17
	.word	5217
	.byte	6,0,16
	.word	5233
	.byte	17
	.word	5287
	.byte	7,18
	.word	1180
	.byte	17
	.word	1216
	.byte	17
	.word	1230
	.byte	17
	.word	1251
	.byte	19
	.word	1274
	.byte	0,6,0,0,16
	.word	5305
	.byte	17
	.word	5348
	.byte	6,0,16
	.word	5364
	.byte	17
	.word	5409
	.byte	6,0,16
	.word	5438
	.byte	17
	.word	5474
	.byte	6,0,16
	.word	5493
	.byte	17
	.word	5533
	.byte	6,0,16
	.word	5552
	.byte	17
	.word	5588
	.byte	17
	.word	5605
	.byte	6,0,16
	.word	5628
	.byte	17
	.word	5656
	.byte	7,18
	.word	480
	.byte	17
	.word	516
	.byte	17
	.word	530
	.byte	20
	.word	551
	.byte	18
	.word	403
	.byte	17
	.word	443
	.byte	17
	.word	457
	.byte	19
	.word	478
	.byte	0,19
	.word	552
	.byte	0,0,6,0,0,16
	.word	5677
	.byte	17
	.word	5707
	.byte	17
	.word	5724
	.byte	7,18
	.word	302
	.byte	17
	.word	338
	.byte	17
	.word	353
	.byte	17
	.word	374
	.byte	20
	.word	398
	.byte	18
	.word	164
	.byte	17
	.word	194
	.byte	17
	.word	209
	.byte	19
	.word	230
	.byte	0,19
	.word	399
	.byte	18
	.word	232
	.byte	17
	.word	264
	.byte	17
	.word	279
	.byte	19
	.word	300
	.byte	0,19
	.word	400
	.byte	0,0,6,0,0,16
	.word	5744
	.byte	17
	.word	5797
	.byte	6,0,16
	.word	5816
	.byte	6,0,16
	.word	5869
	.byte	17
	.word	5905
	.byte	7,18
	.word	1391
	.byte	17
	.word	1422
	.byte	17
	.word	1437
	.byte	19
	.word	1458
	.byte	0,6,0,0,16
	.word	5925
	.byte	17
	.word	5958
	.byte	17
	.word	5975
	.byte	7,18
	.word	5816
	.byte	19
	.word	5867
	.byte	0,6,18
	.word	5869
	.byte	17
	.word	5905
	.byte	20
	.word	5921
	.byte	18
	.word	1391
	.byte	17
	.word	1422
	.byte	17
	.word	1437
	.byte	19
	.word	1458
	.byte	0,19
	.word	5922
	.byte	0,0,6,18
	.word	555
	.byte	17
	.word	590
	.byte	17
	.word	604
	.byte	17
	.word	625
	.byte	19
	.word	648
	.byte	0,6,18
	.word	743
	.byte	17
	.word	780
	.byte	17
	.word	794
	.byte	17
	.word	815
	.byte	17
	.word	838
	.byte	20
	.word	855
	.byte	18
	.word	650
	.byte	17
	.word	683
	.byte	17
	.word	697
	.byte	17
	.word	718
	.byte	19
	.word	741
	.byte	0,19
	.word	856
	.byte	0,0,6,0,0,16
	.word	6001
	.byte	17
	.word	6046
	.byte	7,18
	.word	555
	.byte	17
	.word	590
	.byte	17
	.word	604
	.byte	17
	.word	625
	.byte	19
	.word	648
	.byte	0,6,0,0,16
	.word	6067
	.byte	17
	.word	6110
	.byte	7,18
	.word	650
	.byte	17
	.word	683
	.byte	17
	.word	697
	.byte	17
	.word	718
	.byte	19
	.word	741
	.byte	0,6,0,0,16
	.word	6131
	.byte	17
	.word	6163
	.byte	7,18
	.word	480
	.byte	17
	.word	516
	.byte	17
	.word	530
	.byte	20
	.word	551
	.byte	18
	.word	403
	.byte	17
	.word	443
	.byte	17
	.word	457
	.byte	19
	.word	478
	.byte	0,19
	.word	552
	.byte	0,0,6,0,0,16
	.word	6184
	.byte	17
	.word	6220
	.byte	6,0,16
	.word	6238
	.byte	17
	.word	6290
	.byte	17
	.word	6306
	.byte	6,0,16
	.word	6336
	.byte	17
	.word	6374
	.byte	17
	.word	6389
	.byte	17
	.word	6405
	.byte	6,0,16
	.word	6436
	.byte	17
	.word	6476
	.byte	17
	.word	6492
	.byte	6,0,16
	.word	6518
	.byte	17
	.word	6576
	.byte	6,0,16
	.word	6597
	.byte	17
	.word	6652
	.byte	6,0,16
	.word	6673
	.byte	17
	.word	6726
	.byte	6,0,16
	.word	6745
	.byte	17
	.word	6791
	.byte	6,0,16
	.word	6807
	.byte	17
	.word	6872
	.byte	7,18
	.word	3161
	.byte	17
	.word	3191
	.byte	19
	.word	3209
	.byte	0,6,18
	.word	3161
	.byte	17
	.word	3191
	.byte	19
	.word	3209
	.byte	0,6,18
	.word	6597
	.byte	17
	.word	6652
	.byte	19
	.word	6671
	.byte	0,6,18
	.word	6336
	.byte	17
	.word	6374
	.byte	17
	.word	6389
	.byte	17
	.word	6405
	.byte	19
	.word	6424
	.byte	0,6,0,0,16
	.word	6901
	.byte	17
	.word	6926
	.byte	17
	.word	6942
	.byte	6,0,16
	.word	6964
	.byte	17
	.word	6998
	.byte	6,0,16
	.word	7021
	.byte	17
	.word	7054
	.byte	6,0,16
	.word	7070
	.byte	17
	.word	7111
	.byte	6,0,16
	.word	7375
	.byte	17
	.word	7419
	.byte	6,0,16
	.word	7442
	.byte	17
	.word	7481
	.byte	7,18
	.word	7375
	.byte	17
	.word	7419
	.byte	19
	.word	7440
	.byte	0,6,0,0,16
	.word	7500
	.byte	17
	.word	7545
	.byte	6,0,16
	.word	7568
	.byte	17
	.word	7612
	.byte	6,0,16
	.word	7635
	.byte	17
	.word	7682
	.byte	6,0,16
	.word	7705
	.byte	17
	.word	7757
	.byte	6,0,16
	.word	7780
	.byte	17
	.word	7835
	.byte	6,0,16
	.word	7858
	.byte	17
	.word	7908
	.byte	6,0,16
	.word	7931
	.byte	17
	.word	7976
	.byte	7,18
	.word	7858
	.byte	17
	.word	7908
	.byte	19
	.word	7929
	.byte	0,6,0,0,16
	.word	7995
	.byte	17
	.word	8036
	.byte	17
	.word	8051
	.byte	6,0,16
	.word	8075
	.byte	17
	.word	8133
	.byte	6,0,16
	.word	8164
	.byte	17
	.word	8218
	.byte	6,0,16
	.word	8241
	.byte	17
	.word	8291
	.byte	6,0,16
	.word	8314
	.byte	17
	.word	8370
	.byte	6,0,16
	.word	8393
	.byte	17
	.word	8438
	.byte	6,0,16
	.word	8466
	.byte	17
	.word	8508
	.byte	6,0,16
	.word	8531
	.byte	17
	.word	8561
	.byte	6,0,16
	.word	8579
	.byte	17
	.word	8608
	.byte	6,0,16
	.word	8626
	.byte	6,0,16
	.word	8660
	.byte	6,0,16
	.word	8703
	.byte	17
	.word	8746
	.byte	6,0,16
	.word	8763
	.byte	17
	.word	8804
	.byte	6,0,16
	.word	8826
	.byte	17
	.word	8866
	.byte	6,0,16
	.word	8893
	.byte	17
	.word	8941
	.byte	6,0,16
	.word	8958
	.byte	17
	.word	8999
	.byte	6,0,16
	.word	9016
	.byte	17
	.word	9051
	.byte	17
	.word	9070
	.byte	17
	.word	9089
	.byte	6,0,16
	.word	9108
	.byte	17
	.word	9143
	.byte	7,18
	.word	4602
	.byte	17
	.word	4653
	.byte	19
	.word	4666
	.byte	0,6,0,0,16
	.word	9164
	.byte	17
	.word	9215
	.byte	6,0,16
	.word	9233
	.byte	17
	.word	9260
	.byte	17
	.word	9276
	.byte	17
	.word	9290
	.byte	6,0,16
	.word	9310
	.byte	17
	.word	9352
	.byte	6,0,16
	.word	9373
	.byte	17
	.word	9411
	.byte	7,18
	.word	4668
	.byte	17
	.word	4718
	.byte	20
	.word	4731
	.byte	18
	.word	1104
	.byte	17
	.word	1141
	.byte	17
	.word	1155
	.byte	20
	.word	1176
	.byte	18
	.word	1026
	.byte	17
	.word	1067
	.byte	17
	.word	1081
	.byte	19
	.word	1102
	.byte	0,19
	.word	1177
	.byte	0,0,19
	.word	4732
	.byte	0,0,6,0,0,16
	.word	9432
	.byte	17
	.word	9463
	.byte	7,18
	.word	480
	.byte	17
	.word	516
	.byte	17
	.word	530
	.byte	20
	.word	551
	.byte	18
	.word	403
	.byte	17
	.word	443
	.byte	17
	.word	457
	.byte	19
	.word	478
	.byte	0,19
	.word	552
	.byte	0,0,6,0,0,16
	.word	9481
	.byte	17
	.word	9521
	.byte	6,0,16
	.word	9538
	.byte	17
	.word	9576
	.byte	17
	.word	9591
	.byte	7,7,18
	.word	4118
	.byte	17
	.word	4161
	.byte	19
	.word	4173
	.byte	0,18
	.word	4068
	.byte	17
	.word	4104
	.byte	19
	.word	4116
	.byte	0,18
	.word	4011
	.byte	17
	.word	4054
	.byte	19
	.word	4066
	.byte	0,18
	.word	6131
	.byte	17
	.word	6163
	.byte	20
	.word	6180
	.byte	18
	.word	480
	.byte	17
	.word	516
	.byte	17
	.word	530
	.byte	20
	.word	551
	.byte	18
	.word	403
	.byte	17
	.word	443
	.byte	17
	.word	457
	.byte	19
	.word	478
	.byte	0,19
	.word	552
	.byte	0,0,19
	.word	6181
	.byte	0,0,18
	.word	302
	.byte	17
	.word	338
	.byte	17
	.word	353
	.byte	17
	.word	374
	.byte	20
	.word	398
	.byte	18
	.word	164
	.byte	17
	.word	194
	.byte	17
	.word	209
	.byte	19
	.word	230
	.byte	0,19
	.word	399
	.byte	18
	.word	232
	.byte	17
	.word	264
	.byte	17
	.word	279
	.byte	19
	.word	300
	.byte	0,19
	.word	400
	.byte	0,0,18
	.word	3926
	.byte	17
	.word	3970
	.byte	17
	.word	3982
	.byte	20
	.word	3997
	.byte	18
	.word	3628
	.byte	17
	.word	3657
	.byte	19
	.word	3669
	.byte	0,19
	.word	3998
	.byte	0,0,0,18
	.word	9481
	.byte	17
	.word	9521
	.byte	19
	.word	9536
	.byte	0,6,6,6,6,6,6,6,0,0,16
	.word	9629
	.byte	17
	.word	9661
	.byte	17
	.word	9678
	.byte	7,18
	.word	4735
	.byte	17
	.word	4787
	.byte	19
	.word	4800
	.byte	0,6,18
	.word	4802
	.byte	17
	.word	4851
	.byte	19
	.word	4864
	.byte	0,6,18
	.word	4668
	.byte	17
	.word	4718
	.byte	20
	.word	4731
	.byte	18
	.word	1104
	.byte	17
	.word	1141
	.byte	17
	.word	1155
	.byte	20
	.word	1176
	.byte	18
	.word	1026
	.byte	17
	.word	1067
	.byte	17
	.word	1081
	.byte	19
	.word	1102
	.byte	0,19
	.word	1177
	.byte	0,0,19
	.word	4732
	.byte	0,0,6,0,0,16
	.word	9700
	.byte	17
	.word	9729
	.byte	6,0,16
	.word	9747
	.byte	17
	.word	9786
	.byte	6,0,16
	.word	9805
	.byte	17
	.word	9842
	.byte	6,0,16
	.word	9861
	.byte	17
	.word	9901
	.byte	6,0,16
	.word	9920
	.byte	17
	.word	9959
	.byte	7,18
	.word	2143
	.byte	17
	.word	2187
	.byte	20
	.word	2201
	.byte	18
	.word	480
	.byte	17
	.word	516
	.byte	17
	.word	530
	.byte	20
	.word	551
	.byte	18
	.word	403
	.byte	17
	.word	443
	.byte	17
	.word	457
	.byte	19
	.word	478
	.byte	0,19
	.word	552
	.byte	0,0,19
	.word	2202
	.byte	0,0,6,0,0,16
	.word	9980
	.byte	17
	.word	10021
	.byte	7,18
	.word	2205
	.byte	17
	.word	2251
	.byte	20
	.word	2265
	.byte	18
	.word	480
	.byte	17
	.word	516
	.byte	17
	.word	530
	.byte	20
	.word	551
	.byte	18
	.word	403
	.byte	17
	.word	443
	.byte	17
	.word	457
	.byte	19
	.word	478
	.byte	0,19
	.word	552
	.byte	0,0,19
	.word	2266
	.byte	0,0,6,0,0,16
	.word	10042
	.byte	17
	.word	10082
	.byte	17
	.word	10098
	.byte	17
	.word	10121
	.byte	17
	.word	10144
	.byte	6,0,22,1,3
	.word	14799
	.byte	23
	.byte	'__codeptr',0,28,1,1
	.word	14801
	.byte	23
	.byte	'sint8',0,29,76,25
	.word	8156
	.byte	23
	.byte	'uint8',0,29,81,25
	.word	142
	.byte	23
	.byte	'sint16',0,29,86,25
	.word	5425
	.byte	23
	.byte	'uint16',0,29,91,25
	.word	859
	.byte	2
	.byte	'int',0,4,5,23
	.byte	'sint32',0,29,96,24
	.word	14882
	.byte	23
	.byte	'uint32',0,29,106,24
	.word	1370
	.byte	2
	.byte	'unsigned long long int',0,8,7,23
	.byte	'uint64',0,29,111,30
	.word	14919
	.byte	23
	.byte	'boolean',0,29,127,25
	.word	142
	.byte	23
	.byte	'uint8_least',0,29,137,1,25
	.word	3310
	.byte	23
	.byte	'uint16_least',0,29,147,1,25
	.word	3310
	.byte	23
	.byte	'StatusType',0,30,191,1,27
	.word	142
	.byte	23
	.byte	'Std_ReturnType',0,30,199,1,15
	.word	142
	.byte	10,30,206,1,9,8,11
	.byte	'vendorID',0
	.word	859
	.byte	2,2,35,0,11
	.byte	'moduleID',0
	.word	859
	.byte	2,2,35,2,11
	.byte	'sw_major_version',0
	.word	142
	.byte	1,2,35,4,11
	.byte	'sw_minor_version',0
	.word	142
	.byte	1,2,35,5,11
	.byte	'sw_patch_version',0
	.word	142
	.byte	1,2,35,6,0,23
	.byte	'Std_VersionInfoType',0,30,213,1,3
	.word	15063
	.byte	23
	.byte	'Dem_ClientRequestType',0,31,46,16
	.word	859
	.byte	23
	.byte	'Dem_ClientResultType',0,31,47,16
	.word	859
	.byte	23
	.byte	'Dem_ClientSelectionType',0,31,48,16
	.word	1370
	.byte	23
	.byte	'Dem_ClientPriorityType',0,31,50,15
	.word	142
	.byte	23
	.byte	'Dem_ComponentIdType',0,32,20,15
	.word	142
	.byte	23
	.byte	'PduIdType',0,33,22,19
	.word	859
	.byte	23
	.byte	'PduLengthType',0,33,26,19
	.word	859
	.byte	24,34,113,9,4,25
	.byte	'TP_DATACONF',0,0,25
	.byte	'TP_DATARETRY',0,1,25
	.byte	'TP_CONFPENDING',0,2,0,23
	.byte	'TpDataStateType',0,34,118,3
	.word	15403
	.byte	23
	.byte	'Can_IdType',0,35,32,16
	.word	1370
	.byte	23
	.byte	'Can_HwHandleType',0,35,43,16
	.word	859
	.byte	10,36,93,9,8,11
	.byte	'Class',0
	.word	142
	.byte	1,2,35,0,11
	.byte	'TIN',0
	.word	142
	.byte	1,2,35,1,11
	.byte	'ReturnAddress',0
	.word	1370
	.byte	4,2,35,4,0,23
	.byte	'OsTrapInfoType',0,36,97,3
	.word	15523
	.byte	14,68
	.word	1370
	.byte	15,16,0,10,36,154,1,9,68,11
	.byte	'store',0
	.word	15603
	.byte	68,2,35,0,0,14,68
	.word	15612
	.byte	15,0,0,23
	.byte	'Os_JumpBufType',0,36,156,1,3
	.word	15634
	.byte	23
	.byte	'Os_StackTraceType',0,36,174,1,18
	.word	1370
	.byte	10,36,175,1,9,8,11
	.byte	'sp',0
	.word	1370
	.byte	4,2,35,0,11
	.byte	'ctx',0
	.word	1370
	.byte	4,2,35,4,0,23
	.byte	'Os_StackValueType',0,36,175,1,63
	.word	15694
	.byte	23
	.byte	'Os_StackSizeType',0,36,176,1,27
	.word	15694
	.byte	26,1,1,3
	.word	15779
	.byte	23
	.byte	'Os_VoidVoidFunctionType',0,36,179,1,16
	.word	15782
	.byte	23
	.byte	'ApplicationType',0,36,193,1,23
	.word	142
	.byte	27
	.byte	'Os_ApplicationConfigurationType_s',0,36,198,1,16,2,11
	.byte	'app_id',0
	.word	142
	.byte	1,2,35,0,11
	.byte	'access',0
	.word	142
	.byte	1,2,35,1,0,23
	.byte	'Os_ApplicationConfigurationType',0,36,201,1,3
	.word	15845
	.byte	23
	.byte	'Os_CoreStateType',0,36,203,1,16
	.word	1370
	.byte	23
	.byte	'AreaIdType',0,36,204,1,16
	.word	859
	.byte	23
	.byte	'Os_PeripheralAddressType',0,36,212,1,22
	.word	1370
	.byte	23
	.byte	'TickType',0,36,221,1,22
	.word	1370
	.byte	23
	.byte	'Os_StopwatchTickType',0,36,225,1,22
	.word	1370
	.byte	23
	.byte	'Os_Lockable',0,36,234,1,18
	.word	1386
	.byte	23
	.byte	'CoreIdType',0,36,236,1,16
	.word	859
	.byte	23
	.byte	'SpinlockIdType',0,36,237,1,16
	.word	859
	.byte	24,36,239,1,9,4,25
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,25
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,23
	.byte	'TryToGetSpinlockType',0,36,239,1,74
	.word	16152
	.byte	24,36,174,2,9,4,25
	.byte	'APPLICATION_ACCESSIBLE',0,0,25
	.byte	'APPLICATION_RESTARTING',0,1,25
	.byte	'APPLICATION_TERMINATED',0,2,0,23
	.byte	'ApplicationStateType',0,36,174,2,92
	.word	16245
	.byte	28
	.byte	'void',0,3
	.word	16357
	.byte	29,1,1,30
	.word	142
	.byte	30
	.word	16363
	.byte	0,3
	.word	16368
	.byte	23
	.byte	'Os_FunctionEntryType',0,36,183,2,16
	.word	16382
	.byte	27
	.byte	'Os_MeterInfoType_s',0,36,193,2,16,48,11
	.byte	'elapsed',0
	.word	1370
	.byte	4,2,35,0,11
	.byte	'previous',0
	.word	1370
	.byte	4,2,35,4,11
	.byte	'max',0
	.word	1370
	.byte	4,2,35,8,11
	.byte	'cumulative',0
	.word	1370
	.byte	4,2,35,12,11
	.byte	'stackbase',0
	.word	15694
	.byte	8,2,35,16,11
	.byte	'stackusage',0
	.word	15694
	.byte	8,2,35,24,11
	.byte	'stackmax',0
	.word	15694
	.byte	8,2,35,32,11
	.byte	'stackbudget',0
	.word	15694
	.byte	8,2,35,40,0,23
	.byte	'Os_MeterInfoType',0,36,202,2,3
	.word	16417
	.byte	3
	.word	16417
	.byte	23
	.byte	'Os_MeterInfoRefType',0,36,203,2,50
	.word	16615
	.byte	23
	.byte	'EventMaskType',0,36,206,2,15
	.word	142
	.byte	23
	.byte	'Os_imaskType',0,36,211,2,16
	.word	1370
	.byte	27
	.byte	'Os_ISRDynType_s',0,36,213,2,16,48,11
	.byte	'meter',0
	.word	16417
	.byte	48,2,35,0,0,23
	.byte	'Os_ISRDynType',0,36,215,2,3
	.word	16694
	.byte	3
	.word	16694
	.byte	9
	.word	16755
	.byte	27
	.byte	'Os_ISRType_s',0,36,216,2,16,24,11
	.byte	'entry_function',0
	.word	15787
	.byte	4,2,35,0,11
	.byte	'dynamic',0
	.word	16760
	.byte	4,2,35,4,11
	.byte	'imask',0
	.word	1370
	.byte	4,2,35,8,11
	.byte	'stackbudget',0
	.word	15694
	.byte	8,2,35,12,11
	.byte	'access',0
	.word	142
	.byte	1,2,35,20,11
	.byte	'application',0
	.word	142
	.byte	1,2,35,21,0,23
	.byte	'Os_ISRType',0,36,223,2,3
	.word	16765
	.byte	3
	.word	15779
	.byte	9
	.word	16765
	.byte	3
	.word	16924
	.byte	23
	.byte	'ISRType',0,36,224,2,46
	.word	16929
	.byte	23
	.byte	'Os_bitmask',0,36,239,2,22
	.word	1370
	.byte	23
	.byte	'Os_pset0Type',0,36,240,2,20
	.word	1370
	.byte	23
	.byte	'Os_pset1Type',0,36,241,2,20
	.word	1370
	.byte	23
	.byte	'Os_pset2Type',0,36,242,2,20
	.word	1370
	.byte	13,36,243,2,9,4,11
	.byte	'p0',0
	.word	1370
	.byte	4,2,35,0,11
	.byte	'p1',0
	.word	1370
	.byte	4,2,35,0,11
	.byte	'p2',0
	.word	1370
	.byte	4,2,35,0,0,23
	.byte	'Os_psetType',0,36,247,2,3
	.word	17037
	.byte	13,36,249,2,9,4,11
	.byte	't0',0
	.word	1370
	.byte	4,2,35,0,11
	.byte	't1',0
	.word	1370
	.byte	4,2,35,0,11
	.byte	't2',0
	.word	1370
	.byte	4,2,35,0,0,23
	.byte	'Os_tpmaskType',0,36,253,2,3
	.word	17101
	.byte	23
	.byte	'Os_ActivationCountType',0,36,254,2,23
	.word	142
	.byte	27
	.byte	'Os_TaskDynType_s',0,36,128,3,16,120,11
	.byte	'terminate_jump_buf',0
	.word	15643
	.byte	68,2,35,0,11
	.byte	'meter',0
	.word	16417
	.byte	48,2,35,68,11
	.byte	'activation_count',0
	.word	142
	.byte	1,2,35,116,0,23
	.byte	'Os_TaskDynType',0,36,132,3,3
	.word	17199
	.byte	14,68
	.word	15612
	.byte	15,0,0,3
	.word	17199
	.byte	9
	.word	17325
	.byte	27
	.byte	'Os_TaskType_s',0,36,134,3,16,40,11
	.byte	'dynamic',0
	.word	17330
	.byte	4,2,35,0,11
	.byte	'entry_function',0
	.word	15787
	.byte	4,2,35,4,11
	.byte	'pset',0
	.word	17037
	.byte	4,2,35,8,11
	.byte	'base_tpmask',0
	.word	17101
	.byte	4,2,35,12,11
	.byte	'tpmask',0
	.word	17101
	.byte	4,2,35,16,11
	.byte	'core_id',0
	.word	859
	.byte	2,2,35,20,11
	.byte	'index',0
	.word	1370
	.byte	4,2,35,24,11
	.byte	'stackbudget',0
	.word	15694
	.byte	8,2,35,28,11
	.byte	'activation_count',0
	.word	142
	.byte	1,2,35,36,11
	.byte	'access',0
	.word	142
	.byte	1,2,35,37,11
	.byte	'application',0
	.word	142
	.byte	1,2,35,38,0,23
	.byte	'Os_TaskType',0,36,146,3,3
	.word	17335
	.byte	9
	.word	17335
	.byte	3
	.word	17585
	.byte	23
	.byte	'TaskType',0,36,147,3,47
	.word	17590
	.byte	31
	.byte	'Os_TaskStateType',0,36,155,3,6,4,25
	.byte	'SUSPENDED',0,0,25
	.byte	'READY',0,1,25
	.byte	'WAITING',0,2,25
	.byte	'RUNNING',0,3,0,23
	.byte	'TaskStateType',0,36,156,3,31
	.word	17613
	.byte	13,36,167,3,3,4,11
	.byte	'tpmask',0
	.word	17101
	.byte	4,2,35,0,0,27
	.byte	'Os_ResourceDynType_s',0,36,166,3,16,4,11
	.byte	'saved_priority',0
	.word	17700
	.byte	4,2,35,0,0,23
	.byte	'Os_ResourceDynType',0,36,170,3,3
	.word	17723
	.byte	3
	.word	17723
	.byte	9
	.word	17803
	.byte	27
	.byte	'Os_ResourceType_s',0,36,171,3,16,12,11
	.byte	'dynamic',0
	.word	17808
	.byte	4,2,35,0,11
	.byte	'tpmask',0
	.word	17101
	.byte	4,2,35,4,11
	.byte	'access',0
	.word	142
	.byte	1,2,35,8,0,23
	.byte	'Os_ResourceType',0,36,175,3,3
	.word	17813
	.byte	10,36,181,3,9,12,11
	.byte	'maxallowedvalue',0
	.word	1370
	.byte	4,2,35,0,11
	.byte	'ticksperbase',0
	.word	1370
	.byte	4,2,35,4,11
	.byte	'mincycle',0
	.word	1370
	.byte	4,2,35,8,0,23
	.byte	'AlarmBaseType',0,36,185,3,3
	.word	17912
	.byte	10,36,206,3,9,8,11
	.byte	'Running',0
	.word	142
	.byte	1,2,35,0,11
	.byte	'Pending',0
	.word	142
	.byte	1,2,35,1,11
	.byte	'Delay',0
	.word	1370
	.byte	4,2,35,4,0,23
	.byte	'Os_CounterStatusType',0,36,210,3,3
	.word	18007
	.byte	32
	.word	142
	.byte	1,1,3
	.word	18093
	.byte	23
	.byte	'Os_CounterIncrAdvType',0,36,217,3,22
	.word	18100
	.byte	27
	.byte	's_swd',0,36,222,3,12,4,11
	.byte	'count',0
	.word	1370
	.byte	4,2,35,0,0,13,36,221,3,3,4,11
	.byte	'sw',0
	.word	18136
	.byte	4,2,35,0,0,27
	.byte	'Os_CounterDynType_s',0,36,220,3,16,4,11
	.byte	'type_dependent',0
	.word	18164
	.byte	4,2,35,0,0,23
	.byte	'Os_CounterDynType',0,36,226,3,3
	.word	18183
	.byte	3
	.word	18183
	.byte	9
	.word	18261
	.byte	27
	.byte	'Os_CounterType_s',0,36,227,3,16,28,11
	.byte	'dynamic',0
	.word	18266
	.byte	4,2,35,0,11
	.byte	'advincr',0
	.word	18105
	.byte	4,2,35,4,11
	.byte	'base',0
	.word	17912
	.byte	12,2,35,8,11
	.byte	'core',0
	.word	16363
	.byte	4,2,35,20,11
	.byte	'access',0
	.word	142
	.byte	1,2,35,24,11
	.byte	'application',0
	.word	142
	.byte	1,2,35,25,0,23
	.byte	'Os_CounterType',0,36,234,3,3
	.word	18271
	.byte	3
	.word	18093
	.byte	9
	.word	18271
	.byte	3
	.word	18423
	.byte	23
	.byte	'CounterType',0,36,235,3,52
	.word	18428
	.byte	31
	.byte	'Os_ScheduleTableStatusType',0,36,240,3,6,4,25
	.byte	'SCHEDULETABLE_STOPPED',0,0,25
	.byte	'SCHEDULETABLE_NEXT',0,1,25
	.byte	'SCHEDULETABLE_WAITING',0,2,25
	.byte	'SCHEDULETABLE_RUNNING',0,3,25
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,23
	.byte	'ScheduleTableStatusType',0,36,241,3,41
	.word	18454
	.byte	9
	.word	.L727-.L171
	.byte	3
	.word	18654
	.byte	23
	.byte	'ScheduleTableType',0,36,128,4,58
	.word	18659
	.byte	27
	.byte	'Os_ScheduleTableDynType_s',0,36,130,4,16,16,11
	.byte	'match',0
	.word	1370
	.byte	4,2,35,0,11
	.byte	'next',0
	.word	18664
	.byte	4,2,35,4,11
	.byte	'state',0
	.word	18454
	.byte	4,2,35,8,11
	.byte	'config',0
	.word	859
	.byte	2,2,35,12,0,3
	.word	18691
	.byte	9
	.word	18784
.L727:
	.byte	27
	.byte	'Os_ScheduleTableType_s',0,36,247,3,16,16,11
	.byte	'dynamic',0
	.word	18789
	.byte	4,2,35,0,11
	.byte	'counter',0
	.word	18433
	.byte	4,2,35,4,11
	.byte	'repeat',0
	.word	142
	.byte	1,2,35,8,11
	.byte	'config',0
	.word	859
	.byte	2,2,35,10,11
	.byte	'initial',0
	.word	142
	.byte	1,2,35,12,11
	.byte	'access',0
	.word	142
	.byte	1,2,35,13,11
	.byte	'application',0
	.word	142
	.byte	1,2,35,14,0,23
	.byte	'Os_ScheduleTableType',0,36,255,3,3
	.word	18794
	.byte	9
	.word	18794
	.byte	3
	.word	18974
	.byte	9
	.word	18271
	.byte	3
	.word	18984
	.byte	12
	.word	16087
	.byte	12
	.word	17037
	.byte	12
	.word	16934
	.byte	12
	.word	17595
	.byte	12
	.word	17101
	.byte	12
	.word	142
	.byte	12
	.word	17595
	.byte	27
	.byte	'Os_ControlledCoreType_s',0,36,251,6,16,112,11
	.byte	'TrapInfo',0
	.word	15523
	.byte	8,2,35,0,11
	.byte	'lock_taskaccess',0
	.word	18994
	.byte	4,2,35,8,11
	.byte	'ReadyTasks',0
	.word	18999
	.byte	4,2,35,12,11
	.byte	'RunningISR',0
	.word	19004
	.byte	4,2,35,16,11
	.byte	'RunningTask',0
	.word	19009
	.byte	4,2,35,20,11
	.byte	'RunningTPMask',0
	.word	19014
	.byte	4,2,35,24,11
	.byte	'CurrentMeteredObject',0
	.word	16620
	.byte	4,2,35,28,11
	.byte	'IdleMeter',0
	.word	16417
	.byte	48,2,35,32,11
	.byte	'AppAccess',0
	.word	142
	.byte	1,2,35,80,11
	.byte	'AppOverride',0
	.word	19019
	.byte	1,2,35,81,11
	.byte	'GetStackValueAdjust',0
	.word	15694
	.byte	8,2,35,84,11
	.byte	'InErrorHook',0
	.word	142
	.byte	1,2,35,92,11
	.byte	'ChainTaskRef',0
	.word	19024
	.byte	4,2,35,96,11
	.byte	'GetStackUsageAdjust',0
	.word	15694
	.byte	8,2,35,100,11
	.byte	'InProtectionHook',0
	.word	142
	.byte	1,2,35,108,11
	.byte	'CoreIsActive',0
	.word	142
	.byte	1,2,35,109,11
	.byte	'InShutdownHook',0
	.word	142
	.byte	1,2,35,110,0,23
	.byte	'Os_ControlledCoreType',0,36,141,7,3
	.word	19029
	.byte	3
	.word	1370
	.byte	9
	.word	16765
	.byte	3
	.word	19485
	.byte	9
	.word	17335
	.byte	3
	.word	19495
	.byte	3
	.word	16417
	.byte	27
	.byte	'Os_AnyCoreType_s',0,36,151,7,16,96,11
	.byte	'DisableAllImask',0
	.word	1370
	.byte	4,2,35,0,11
	.byte	'SuspendAllImask',0
	.word	1370
	.byte	4,2,35,4,11
	.byte	'SuspendOSImask',0
	.word	1370
	.byte	4,2,35,8,11
	.byte	'DisableAllCount',0
	.word	1370
	.byte	4,2,35,12,11
	.byte	'SuspendAllCount',0
	.word	1370
	.byte	4,2,35,16,11
	.byte	'SuspendOSCount',0
	.word	1370
	.byte	4,2,35,20,11
	.byte	'RestartJumpBuf',0
	.word	15643
	.byte	68,2,35,24,11
	.byte	'Restartable',0
	.word	142
	.byte	1,2,35,92,0,23
	.byte	'Os_AnyCoreType',0,36,160,7,3
	.word	19510
	.byte	23
	.byte	'Can_TxObjPriorityClassType',0,37,219,3,16
	.word	1370
	.byte	27
	.byte	'Can_TxHwObjectConfigType',0,37,231,3,16,8,11
	.byte	'MsgObjId',0
	.word	142
	.byte	1,2,35,0,11
	.byte	'HwControllerId',0
	.word	142
	.byte	1,2,35,1,11
	.byte	'TxObjPriorityClass',0
	.word	1370
	.byte	4,2,35,4,0,23
	.byte	'Can_TxHwObjectConfigType',0,37,252,3,3
	.word	19787
	.byte	27
	.byte	'Can_RxHwObjectConfigType',0,37,129,4,16,12,11
	.byte	'MaskRef',0
	.word	1370
	.byte	4,2,35,0,11
	.byte	'MsgId',0
	.word	1370
	.byte	4,2,35,4,11
	.byte	'MsgObjId',0
	.word	142
	.byte	1,2,35,8,11
	.byte	'HwControllerId',0
	.word	142
	.byte	1,2,35,9,0,23
	.byte	'Can_RxHwObjectConfigType',0,37,147,4,3
	.word	19923
	.byte	14,4
	.word	142
	.byte	15,3,0,27
	.byte	'Can_ControllerMOMapConfigType',0,37,181,4,16,4,11
	.byte	'ControllerMOMap',0
	.word	20063
	.byte	4,2,35,0,0,23
	.byte	'Can_ControllerMOMapConfigType',0,37,184,4,3
	.word	20072
	.byte	27
	.byte	'Can_NPCRValueType',0,37,188,4,16,2,11
	.byte	'Can_NPCRValue',0
	.word	859
	.byte	2,2,35,0,0,23
	.byte	'Can_NPCRValueType',0,37,191,4,3
	.word	20173
	.byte	27
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,37,194,4,16,8,11
	.byte	'CanControllerBaudrate',0
	.word	1370
	.byte	4,2,35,0,11
	.byte	'CanControllerBaudrateCfg',0
	.word	859
	.byte	2,2,35,4,0,23
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,37,198,4,3
	.word	20248
	.byte	9
	.word	20248
	.byte	3
	.word	20413
	.byte	27
	.byte	'Can_BaudrateConfigPtrType',0,37,201,4,16,4,11
	.byte	'Can_kBaudrateConfigPtr',0
	.word	20418
	.byte	4,2,35,0,0,23
	.byte	'Can_BaudrateConfigPtrType',0,37,204,4,3
	.word	20423
	.byte	27
	.byte	'Can_EventHandlingType',0,37,226,4,16,4,11
	.byte	'CanEventType',0
	.word	20063
	.byte	4,2,35,0,0,23
	.byte	'Can_EventHandlingType',0,37,229,4,3
	.word	20523
	.byte	23
	.byte	'Rte_TransformerErrorCode',0,38,130,1,15
	.word	142
	.byte	23
	.byte	'Rte_TransformerClass',0,38,131,1,15
	.word	142
	.byte	10,38,168,1,9,12,11
	.byte	'in',0
	.word	16363
	.byte	4,2,35,0,11
	.byte	'out',0
	.word	16363
	.byte	4,2,35,4,11
	.byte	'used',0
	.word	859
	.byte	2,2,35,8,11
	.byte	'lost_data',0
	.word	142
	.byte	1,2,35,10,0,23
	.byte	'Rte_QDynType',0,38,173,1,3
	.word	20669
	.byte	24,38,175,1,9,4,25
	.byte	'RTE_DRA',0,0,25
	.byte	'RTE_WOWP',0,1,25
	.byte	'RTE_TASK',0,2,25
	.byte	'RTE_ARE',0,3,25
	.byte	'RTE_EV',0,4,25
	.byte	'RTE_MSI',0,5,0,23
	.byte	'Rte_NotificationType',0,38,182,1,3
	.word	20756
	.byte	3
	.word	20669
	.byte	27
	.byte	'Rte_QCmnType',0,38,184,1,16,24,11
	.byte	'dynamic',0
	.word	20854
	.byte	4,2,35,0,11
	.byte	'copy',0
	.word	142
	.byte	1,2,35,4,11
	.byte	'queue_size',0
	.word	859
	.byte	2,2,35,6,11
	.byte	'element_size',0
	.word	859
	.byte	2,2,35,8,11
	.byte	'buffer_start',0
	.word	16363
	.byte	4,2,35,12,11
	.byte	'buffer_end',0
	.word	16363
	.byte	4,2,35,16,11
	.byte	'notification_type',0
	.word	20756
	.byte	4,2,35,20,0,23
	.byte	'Rte_QCmnType',0,38,192,1,3
	.word	20859
	.byte	23
	.byte	'Rte_AlarmRefType',0,38,224,1,32
	.word	1370
	.byte	23
	.byte	'Rte_AlarmIndexType',0,38,226,1,32
	.word	859
	.byte	14,128,8
	.word	142
	.byte	15,255,7,0,23
	.byte	'Impl_NVM_DstPtrType_1024',0,39,50,15
	.word	21097
	.byte	23
	.byte	'CanIf_u32_impl',0,39,69,16
	.word	1370
	.byte	23
	.byte	'CanIf_u16_impl',0,39,71,16
	.word	859
	.byte	23
	.byte	'CanIf_u8_impl',0,39,73,15
	.word	142
	.byte	23
	.byte	'CanIf_ControllerModeType_Enum_impl',0,39,88,15
	.word	142
	.byte	23
	.byte	'CanIf_PduModeType_Enum_impl',0,39,90,15
	.word	142
	.byte	10,39,92,9,2,11
	.byte	'DeviceMode',0
	.word	142
	.byte	1,2,35,0,11
	.byte	'ChannelMode',0
	.word	142
	.byte	1,2,35,1,0,23
	.byte	'CanIf_ControllerStateType_struct_impl',0,39,95,3
	.word	21288
	.byte	23
	.byte	'CanIf_NotifStatusType_Enum_impl',0,39,100,15
	.word	142
	.byte	23
	.byte	'CanSM_boolean_Impl',0,39,120,15
	.word	142
	.byte	23
	.byte	'CanSM_u8_Impl',0,39,123,15
	.word	142
	.byte	23
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,39,128,1,15
	.word	142
	.byte	23
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,39,132,1,15
	.word	142
	.byte	23
	.byte	'CanSM_u16_Impl',0,39,136,1,16
	.word	859
	.byte	23
	.byte	'CanSM_TimerStateType_Enum_impl',0,39,138,1,15
	.word	142
	.byte	10,39,140,1,9,4,11
	.byte	'cntTick_u16',0
	.word	859
	.byte	2,2,35,0,11
	.byte	'stTimer',0
	.word	142
	.byte	1,2,35,2,0,23
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,39,143,1,3
	.word	21629
	.byte	23
	.byte	'Com_impl_u16',0,39,154,1,16
	.word	859
	.byte	23
	.byte	'Com_impl_u8',0,39,157,1,15
	.word	142
	.byte	23
	.byte	'ComM_uint32_Impl',0,39,173,1,16
	.word	1370
	.byte	23
	.byte	'ComM_uint16_Impl',0,39,175,1,16
	.word	859
	.byte	23
	.byte	'ComM_uint8_Impl',0,39,177,1,15
	.word	142
	.byte	23
	.byte	'ComM_bool_Impl',0,39,179,1,15
	.word	142
	.byte	10,39,181,1,9,24,11
	.byte	'ChannelState_e',0
	.word	1370
	.byte	4,2,35,0,11
	.byte	'LightTimeoutCtr_u32',0
	.word	1370
	.byte	4,2,35,4,11
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	859
	.byte	2,2,35,8,11
	.byte	'ChannelMode_u8',0
	.word	142
	.byte	1,2,35,10,11
	.byte	'BusSmMode_u8',0
	.word	142
	.byte	1,2,35,11,11
	.byte	'UserRequestCtr_u8',0
	.word	142
	.byte	1,2,35,12,11
	.byte	'PassiveRequestState_u8',0
	.word	142
	.byte	1,2,35,13,11
	.byte	'PncRequestCtr_u8',0
	.word	142
	.byte	1,2,35,14,11
	.byte	'InhibitionReqStatus_u8',0
	.word	142
	.byte	1,2,35,15,11
	.byte	'NmNetworkRequestStatus_b',0
	.word	142
	.byte	1,2,35,16,11
	.byte	'DiagnosticRequestState_b',0
	.word	142
	.byte	1,2,35,17,11
	.byte	'CommunicationAllowed_b',0
	.word	142
	.byte	1,2,35,18,11
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	142
	.byte	1,2,35,19,11
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	142
	.byte	1,2,35,20,11
	.byte	'NmNetworkModeStatus_b',0
	.word	142
	.byte	1,2,35,21,0,23
	.byte	'ComM_ChannelStruct_Impl',0,39,197,1,3
	.word	21861
	.byte	10,39,206,1,9,10,11
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	859
	.byte	2,2,35,0,11
	.byte	'LimitToNoComCtr_u16',0
	.word	859
	.byte	2,2,35,2,11
	.byte	'RequestedUserMode_t',0
	.word	142
	.byte	1,2,35,4,11
	.byte	'IndicatedUserMode_t',0
	.word	142
	.byte	1,2,35,5,11
	.byte	'numChannelsInFullCom_u8',0
	.word	142
	.byte	1,2,35,6,11
	.byte	'numChannelsInSilentCom_u8',0
	.word	142
	.byte	1,2,35,7,11
	.byte	'numChannelsInNoCom_u8',0
	.word	142
	.byte	1,2,35,8,0,23
	.byte	'ComM_UserStruct_Impl',0,39,214,1,3
	.word	22365
	.byte	23
	.byte	'Dcm_IOOperationResponseType',0,39,252,1,15
	.word	142
	.byte	23
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	39,138,2,15
	.word	142
	.byte	23
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,39,146,2,15
	.word	142
	.byte	23
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,39,150,2,15
	.word	142
	.byte	23
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,39,154,2,15
	.word	142
	.byte	23
	.byte	'Dem_DTCFormatType',0,39,160,2,15
	.word	142
	.byte	23
	.byte	'Dem_DTCOriginType',0,39,162,2,15
	.word	142
	.byte	23
	.byte	'Dem_EventIdType',0,39,168,2,16
	.word	859
	.byte	23
	.byte	'Dem_EventStatusType',0,39,170,2,15
	.word	142
	.byte	23
	.byte	'Dem_InitMonitorReasonType',0,39,176,2,15
	.word	142
	.byte	23
	.byte	'Dem_OperationCycleIdType',0,39,179,2,15
	.word	142
	.byte	23
	.byte	'Dem_UdsStatusByteType',0,39,185,2,15
	.word	142
	.byte	23
	.byte	'NvM_BlockIdType',0,39,215,2,16
	.word	859
	.byte	23
	.byte	'NvM_RequestResultType',0,39,225,2,15
	.word	142
	.byte	23
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,39,243,3,34
	.word	21108
	.byte	14,128,8
	.word	142
	.byte	15,255,7,0,23
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,39,246,3,34
	.word	21108
	.byte	23
	.byte	'Dem_DTCGroupIdType',0,40,49,15
	.word	142
	.byte	23
	.byte	'Dem_DtcIdType',0,40,50,16
	.word	859
	.byte	23
	.byte	'Dem_ClientIdType',0,40,53,15
	.word	142
	.byte	23
	.byte	'Dem_DtcCodeType',0,40,55,16
	.word	1370
	.byte	23
	.byte	'Dem_boolean_least',0,40,60,17
	.word	142
	.byte	23
	.byte	'Dem_EventCategoryType',0,40,62,15
	.word	142
	.byte	23
	.byte	'Dem_DTCSeverityType',0,40,217,1,15
	.word	142
	.byte	23
	.byte	'Dem_DebugDataType',0,40,131,3,16
	.word	1370
	.byte	23
	.byte	'Dem_DTCKindType',0,40,145,3,16
	.word	142
	.byte	23
	.byte	'Dem_TriggerType',0,40,167,3,15
	.word	142
	.byte	23
	.byte	'Dem_EnCoList',0,41,31,15
	.word	142
	.byte	23
	.byte	'Dem_OperationCycleList',0,42,23,15
	.word	142
	.byte	23
	.byte	'Dem_StoCoList',0,43,32,15
	.word	142
	.byte	23
	.byte	'Rte_TaskRefType',0,44,184,1,32
	.word	17595
	.byte	23
	.byte	'Rte_EventRefType',0,44,185,1,32
	.word	142
	.byte	23
	.byte	'Rte_EventType',0,44,186,1,32
	.word	1370
	.byte	23
	.byte	'Rte_REActCounterType',0,44,252,1,15
	.word	142
	.byte	3
	.word	142
	.byte	23
	.byte	'Rte_REActCounterRefType',0,44,253,1,58
	.word	23885
	.byte	10,44,255,1,9,8,11
	.byte	'task',0
	.word	23781
	.byte	4,2,35,0,11
	.byte	'acnt',0
	.word	23890
	.byte	4,2,35,4,0,23
	.byte	'Rte_REContainerType',0,44,130,2,3
	.word	23923
	.byte	9
	.word	17335
	.byte	3
	.word	23987
	.byte	3
	.word	142
	.byte	9
	.word	23923
	.byte	3
	.word	24002
	.byte	23
	.byte	'Rte_REContainerRefType',0,44,132,2,60
	.word	24007
	.byte	23
	.byte	'Rte_MSICounterType',0,44,149,2,16
	.word	859
	.byte	3
	.word	859
	.byte	23
	.byte	'Rte_MSICounterRefType',0,44,150,2,56
	.word	24072
	.byte	23
	.byte	'Rte_MSIPendingFlagType',0,44,152,2,17
	.word	142
	.byte	3
	.word	142
	.byte	23
	.byte	'Rte_MSIPendingFlagRefType',0,44,153,2,60
	.word	24140
	.byte	10,44,163,2,9,24,11
	.byte	'counter',0
	.word	24077
	.byte	4,2,35,0,11
	.byte	'incCounter',0
	.word	142
	.byte	1,2,35,4,11
	.byte	'pending',0
	.word	24145
	.byte	4,2,35,8,11
	.byte	'osTask',0
	.word	23781
	.byte	4,2,35,12,11
	.byte	'acnt',0
	.word	23890
	.byte	4,2,35,16,11
	.byte	'osEvent',0
	.word	142
	.byte	1,2,35,20,11
	.byte	'MSIInit',0
	.word	859
	.byte	2,2,35,22,0,23
	.byte	'Rte_MSITableEntry',0,44,172,2,3
	.word	24180
	.byte	3
	.word	859
	.byte	3
	.word	142
	.byte	23
	.byte	'Rte_TaskArrayIndex',0,44,179,2,16
	.word	142
	.byte	23
	.byte	'Rte_NrWaitingTasks',0,44,180,2,16
	.word	142
	.byte	10,44,182,2,9,4,11
	.byte	'pending',0
	.word	142
	.byte	1,2,35,0,11
	.byte	'count',0
	.word	142
	.byte	1,2,35,1,11
	.byte	'firstWaitingTask',0
	.word	142
	.byte	1,2,35,2,0,23
	.byte	'Rte_WaitableDatum',0,44,186,2,3
	.word	24398
	.byte	3
	.word	24398
	.byte	10,44,226,2,9,12,11
	.byte	'event_id',0
	.word	1370
	.byte	4,2,35,0,11
	.byte	'wd',0
	.word	24490
	.byte	4,2,35,4,11
	.byte	'timeout',0
	.word	1370
	.byte	4,2,35,8,0,23
	.byte	'Rte_WOWP_NotificationType',0,44,230,2,3
	.word	24495
	.byte	9
	.word	24495
	.byte	3
	.word	24584
	.byte	23
	.byte	'Rte_WOWP_NotificationRefType',0,44,232,2,66
	.word	24589
	.byte	23
	.byte	'Rte_ARE_NotificationType',0,44,234,2,29
	.word	23923
	.byte	27
	.byte	'Rte_QTaskType',0,44,243,2,16,28,11
	.byte	'cmn',0
	.word	20859
	.byte	24,2,35,0,11
	.byte	'task',0
	.word	23781
	.byte	4,2,35,24,0,23
	.byte	'Rte_QTaskType',0,44,246,2,3
	.word	24666
	.byte	27
	.byte	'Rte_QREType',0,44,250,2,16,28,11
	.byte	'cmn',0
	.word	20859
	.byte	24,2,35,0,11
	.byte	're',0
	.word	24012
	.byte	4,2,35,24,0,23
	.byte	'Rte_QREType',0,44,253,2,3
	.word	24737
	.byte	9
	.word	23923
	.byte	3
	.word	24802
	.byte	27
	.byte	'Rte_QWWPType',0,44,129,3,16,28,11
	.byte	'cmn',0
	.word	20859
	.byte	24,2,35,0,11
	.byte	'wwp',0
	.word	24594
	.byte	4,2,35,24,0,23
	.byte	'Rte_QWWPType',0,44,132,3,3
	.word	24812
	.byte	9
	.word	24495
	.byte	3
	.word	24880
	.byte	27
	.byte	'Rte_QEvType',0,44,136,3,16,36,11
	.byte	'cmn',0
	.word	20859
	.byte	24,2,35,0,11
	.byte	'task',0
	.word	23781
	.byte	4,2,35,24,11
	.byte	'mask',0
	.word	142
	.byte	1,2,35,28,11
	.byte	'acnt',0
	.word	23890
	.byte	4,2,35,32,0,23
	.byte	'Rte_QEvType',0,44,141,3,3
	.word	24890
	.byte	27
	.byte	'Rte_QMSIType',0,44,145,3,16,48,11
	.byte	'cmn',0
	.word	20859
	.byte	24,2,35,0,11
	.byte	'task',0
	.word	23781
	.byte	4,2,35,24,11
	.byte	'mask',0
	.word	142
	.byte	1,2,35,28,11
	.byte	'acnt',0
	.word	23890
	.byte	4,2,35,32,11
	.byte	'msiCounter',0
	.word	24077
	.byte	4,2,35,36,11
	.byte	'msiPending',0
	.word	24145
	.byte	4,2,35,40,11
	.byte	'msiLimit',0
	.word	859
	.byte	2,2,35,44,0,23
	.byte	'Rte_QMSIType',0,44,153,3,3
	.word	24985
	.byte	23
	.byte	'Dem_EvtStateType',0,45,151,1,15
	.word	142
	.byte	23
	.byte	'Dem_OpMoStateType',0,46,13,15
	.word	142
	.byte	33
	.byte	'Dem_OpMoState',0,46,31,26
	.word	142
	.byte	1,1,23
	.byte	'rba_BswSrv_uint64',0,6,66,28
	.word	14919
	.byte	23
	.byte	'Dem_EventIdIterator',0,8,27,22
	.word	3310
	.byte	23
	.byte	'Dem_MapDtcIdToEventIdType',0,8,126,25
	.word	859
	.byte	14,10
	.word	859
	.byte	15,4,0,9
	.word	25304
	.byte	33
	.byte	'Dem_MapDtcIdToEventId',0,8,139,1,41
	.word	25313
	.byte	1,1,14,12
	.word	859
	.byte	15,5,0,9
	.word	25351
	.byte	33
	.byte	'Dem_MapEventIdToDtcId',0,8,140,1,41
	.word	25360
	.byte	1,1,23
	.byte	'Dem_DtcIdIterator',0,8,197,1,22
	.word	3310
	.byte	23
	.byte	'Dem_DtcGroupIdIterator',0,8,230,1,21
	.word	3310
	.byte	23
	.byte	'Dem_EventIdListIterator',0,8,174,2,3
	.word	3889
	.byte	10,8,213,2,9,4,11
	.byte	'it',0
	.word	859
	.byte	2,2,35,0,11
	.byte	'end',0
	.word	859
	.byte	2,2,35,2,0,23
	.byte	'Dem_DtcIdListIterator',0,8,216,2,3
	.word	25490
	.byte	24,47,31,9,4,25
	.byte	'MEMIF_JOB_OK',0,0,25
	.byte	'MEMIF_JOB_FAILED',0,1,25
	.byte	'MEMIF_JOB_PENDING',0,2,25
	.byte	'MEMIF_JOB_CANCELED',0,3,25
	.byte	'MEMIF_BLOCK_INCONSISTENT',0,4,25
	.byte	'MEMIF_BLOCK_INVALID',0,5,0,23
	.byte	'MemIf_JobResultType',0,47,39,2
	.word	25553
	.byte	24,48,49,9,4,25
	.byte	'NVM_PRV_ACTIVITY_NOT_INIT',0,0,25
	.byte	'NVM_PRV_ACTIVITY_IDLE',0,1,25
	.byte	'NVM_PRV_ACTIVITY_ARBITRATE',0,2,25
	.byte	'NVM_PRV_ACTIVITY_JOB_START',0,3,25
	.byte	'NVM_PRV_ACTIVITY_POLL_RESULT',0,4,25
	.byte	'NVM_PRV_ACTIVITY_JOB_COMPLETE',0,5,25
	.byte	'NVM_PRV_ACTIVITY_RESULT_EVAL',0,6,0,23
	.byte	'NvM_Prv_Activities_ten',0,48,58,3
	.word	25711
	.byte	24,48,104,9,4,25
	.byte	'NvM_Prv_idJob_Idle_e',0,0,25
	.byte	'NvM_Prv_idJob_Read_e',0,1,25
	.byte	'NvM_Prv_idJob_Write_e',0,2,25
	.byte	'NvM_Prv_idJob_Erase_e',0,3,25
	.byte	'NvM_Prv_idJob_Restore_e',0,4,25
	.byte	'NvM_Prv_idJob_Maintain_e',0,5,25
	.byte	'NvM_Prv_idJob_Validate_e',0,6,25
	.byte	'NvM_Prv_idJob_Invalidate_e',0,7,25
	.byte	'NvM_Prv_idJob_ReadIdConfigForReadAll_e',0,8,25
	.byte	'NvM_Prv_idJob_InvalidateForFirstInitAll_e',0,9,25
	.byte	'NvM_Prv_idJob_RestoreForImplicitRecovery_e',0,10,25
	.byte	'NvM_Prv_idJob_InvalidateForRemoveNonResistant_e',0,11,25
	.byte	'NvM_Prv_idJob_Invalid_e',0,12,25
	.byte	'NvM_Prv_idJob_Count_e',0,13,0,23
	.byte	'NvM_Prv_idJob_ten',0,48,115,3
	.word	25952
	.byte	23
	.byte	'NvM_Prv_ServiceBit_tuo',0,48,168,1,16
	.word	859
	.byte	23
	.byte	'NvM_Prv_idService_tuo',0,48,173,1,15
	.word	142
	.byte	23
	.byte	'NvM_Prv_idQueue_tuo',0,48,206,1,15
	.word	142
	.byte	10,48,210,1,9,12,11
	.byte	'idService_uo',0
	.word	142
	.byte	1,2,35,0,11
	.byte	'idBlock_uo',0
	.word	859
	.byte	2,2,35,2,11
	.byte	'ServiceBit_uo',0
	.word	859
	.byte	2,2,35,4,11
	.byte	'BlockData_pv',0
	.word	16363
	.byte	4,2,35,8,0,23
	.byte	'NvM_Prv_QueueEntry_tst',0,48,225,1,3
	.word	26509
	.byte	10,48,227,1,9,20,11
	.byte	'idJob_en',0
	.word	25952
	.byte	4,2,35,0,11
	.byte	'idBlock_uo',0
	.word	859
	.byte	2,2,35,4,11
	.byte	'RamBlock_pu8',0
	.word	159
	.byte	4,2,35,8,11
	.byte	'idxDataset_u8',0
	.word	142
	.byte	1,2,35,12,11
	.byte	'Result_en',0
	.word	25553
	.byte	4,2,35,16,0,23
	.byte	'NvM_Prv_JobData_tst',0,48,240,1,3
	.word	26635
	.byte	23
	.byte	'Dem_DtcStateType',0,49,47,15
	.word	142
	.byte	10,10,47,9,12,11
	.byte	'DtcCode',0
	.word	1370
	.byte	4,2,35,0,11
	.byte	'Severity',0
	.word	142
	.byte	1,2,35,4,11
	.byte	'Kind',0
	.word	142
	.byte	1,2,35,5,11
	.byte	'DtcCode_Is_Index',0
	.word	142
	.byte	1,2,35,6,11
	.byte	'Func_Unit',0
	.word	142
	.byte	1,2,35,7,11
	.byte	'Nv_Storage',0
	.word	142
	.byte	1,2,35,8,0,23
	.byte	'Dem_Cfg_DtcType',0,10,55,3
	.word	26798
	.byte	14,60
	.word	26798
	.byte	15,4,0,9
	.word	26942
	.byte	33
	.byte	'Dem_Cfg_Dtc',0,10,59,30
	.word	26951
	.byte	1,1,23
	.byte	'Dem_EvMemOccurrenceCounterType',0,21,90,21
	.word	142
	.byte	23
	.byte	'Dem_EvMemAgingCounterType',0,21,99,21
	.word	142
	.byte	23
	.byte	'Dem_EvMemHdrType',0,21,141,1,4
	.word	7167
	.byte	23
	.byte	'Dem_EvMemEventMemoryType',0,21,213,1,4
	.word	7197
	.byte	14,5
	.word	142
	.byte	15,4,0,14,10
	.word	859
	.byte	15,4,0,10,50,9,9,18,11
	.byte	'OperationCycleStates',0
	.word	142
	.byte	1,2,35,0,11
	.byte	'OperationCycleQualified',0
	.word	142
	.byte	1,2,35,1,11
	.byte	'Overflow',0
	.word	27111
	.byte	5,2,35,2,11
	.byte	'DtcIdsByOccurrenceTime',0
	.word	27120
	.byte	10,2,35,8,0,23
	.byte	'Dem_GenericNvDataType',0,50,24,4
	.word	27129
	.byte	23
	.byte	'Dem_NvmBlockIdType',0,51,14,34
	.word	142
	.byte	13,51,16,9,20,11
	.byte	'evMemData',0
	.word	7197
	.byte	20,2,35,0,11
	.byte	'genericNvData',0
	.word	27129
	.byte	18,2,35,0,0,23
	.byte	'Dem_NvMStorageBufferData',0,51,37,3
	.word	27305
	.byte	23
	.byte	'Dem_NvmBlockStatusType',0,51,59,15
	.word	142
	.byte	23
	.byte	'Dem_NvmResultType',0,51,78,31
	.word	142
	.byte	3
	.word	142
	.byte	34
	.word	142
	.byte	1,1,30
	.word	27443
	.byte	0,3
	.word	27448
	.byte	23
	.byte	'Dem_EvtClearAllowedFncType',0,13,12,26
	.word	27461
	.byte	10,13,31,9,2,11
	.byte	'dataDataContainer_2',0
	.word	859
	.byte	2,2,35,0,0,23
	.byte	'Dem_EvtParam_16Type',0,13,34,3
	.word	27501
	.byte	14,12
	.word	27501
	.byte	15,5,0,9
	.word	27564
	.byte	33
	.byte	'Dem_EvtParam_16',0,13,38,34
	.word	27573
	.byte	1,1,34
	.word	142
	.byte	1,1,30
	.word	142
	.byte	0,3
	.word	27604
	.byte	23
	.byte	'Dem_InitMForEAllowedFncType',0,14,38,27
	.word	27617
	.byte	10,14,46,9,4,11
	.byte	'state',0
	.word	142
	.byte	1,2,35,0,11
	.byte	'debounceLevel',0
	.word	5425
	.byte	2,2,35,2,0,23
	.byte	'Dem_EvtState',0,14,50,3
	.word	27658
	.byte	10,14,52,9,1,11
	.byte	'lastReportedEvent',0
	.word	142
	.byte	1,2,35,0,0,23
	.byte	'Dem_EvtState8',0,14,55,3
	.word	27723
.L669:
	.byte	14,24
	.word	27658
	.byte	15,5,0
.L670:
	.byte	14,6
	.word	27723
	.byte	15,5,0
.L671:
	.byte	14,4
	.word	1370
	.byte	15,0,0,9
	.word	16357
	.byte	3
	.word	27805
	.byte	34
	.word	3310
	.byte	1,1,30
	.word	859
	.byte	30
	.word	27443
	.byte	30
	.word	27810
	.byte	30
	.word	859
	.byte	0,3
	.word	27815
	.byte	23
	.byte	'Dem_DebFilter',0,52,12,23
	.word	27843
	.byte	2
	.byte	'long int',0,4,5,3
	.word	27870
	.byte	29,1,1,30
	.word	27810
	.byte	30
	.word	859
	.byte	30
	.word	27882
	.byte	30
	.word	27882
	.byte	0,3
	.word	27887
	.byte	23
	.byte	'Dem_DebGetLimits',0,52,13,23
	.word	27911
	.byte	29,1,1,30
	.word	859
	.byte	30
	.word	27810
	.byte	30
	.word	859
	.byte	0,3
	.word	27941
	.byte	23
	.byte	'Dem_DebCyclic',0,52,14,16
	.word	27960
	.byte	23
	.byte	'Dem_DebouncedActionType',0,52,35,21
	.word	3310
	.byte	13,53,37,9,4,11
	.byte	'EnforceAlignment',0
	.word	1370
	.byte	4,2,35,0,11
	.byte	'Buffer',0
	.word	20063
	.byte	4,2,35,0,0,23
	.byte	'Dem_EvBuffEnvDataAlignedType',0,53,47,3
	.word	28019
	.byte	10,53,49,9,16,11
	.byte	'envData',0
	.word	28019
	.byte	4,2,35,0,11
	.byte	'eventType',0
	.word	142
	.byte	1,2,35,4,11
	.byte	'eventId',0
	.word	859
	.byte	2,2,35,6,11
	.byte	'debug0',0
	.word	1370
	.byte	4,2,35,8,11
	.byte	'debug1',0
	.word	1370
	.byte	4,2,35,12,0,23
	.byte	'Dem_EvBuffEvent',0,53,75,2
	.word	28104
	.byte	10,24,29,9,1,11
	.byte	'state',0
	.word	142
	.byte	1,2,35,0,0,23
	.byte	'Dem_DtcState',0,24,31,3
	.word	28219
	.byte	14,5
	.word	28219
	.byte	15,4,0,33
	.byte	'Dem_AllDTCsState',0,24,92,5
	.word	28261
	.byte	1,1,14,6
	.word	142
	.byte	15,5,0,33
	.byte	'Dem_AllEventsStatusByte',0,25,22,1
	.word	28297
	.byte	1,1,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L172:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32
	.byte	13,58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,11,1,0,0,8,46
	.byte	1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,38,0,73,19,0,0,10,19,1,58,15,59,15,57,15,11,15,0
	.byte	0,11,13,0,3,8,73,19,11,15,56,9,0,0,12,53,0,73,19,0,0,13,23,1,58,15,59,15,57,15,11,15,0,0,14,1,1,11,15
	.byte	73,19,0,0,15,33,0,47,15,0,0,16,46,1,49,19,0,0,17,5,0,49,19,0,0,18,29,1,49,19,0,0,19,11,0,49,19,0,0,20
	.byte	11,1,49,19,0,0,21,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,22,21,0,54,15,0,0,23,22
	.byte	0,3,8,58,15,59,15,57,15,73,19,0,0,24,4,1,58,15,59,15,57,15,11,15,0,0,25,40,0,3,8,28,13,0,0,26,21,0,54
	.byte	15,39,12,0,0,27,19,1,3,8,58,15,59,15,57,15,11,15,0,0,28,59,0,3,8,0,0,29,21,1,54,15,39,12,0,0,30,5,0,73
	.byte	19,0,0,31,4,1,3,8,58,15,59,15,57,15,11,15,0,0,32,21,0,73,19,54,15,39,12,0,0,33,52,0,3,8,58,15,59,15,57
	.byte	15,73,19,63,12,60,12,0,0,34,21,1,73,19,54,15,39,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L173:
	.word	.L729-.L728
.L728:
	.half	3
	.word	.L731-.L730
.L730:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits32.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_BitArray.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_ISO14229Byte.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_Lib.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\enco\\Dem_EnableCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTC_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_ByteOrderUtils.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evdep\\Dem_Dependencies.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\deb\\Dem_Deb.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientBaseHandling.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientClearMachine.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvTrigger.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemTypes.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemAging.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMem.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Prv_CallEvtStChngdCbk.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Det\\api\\Det.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientHandlingTypes.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_NodeId.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\api\\Dem_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_EnableCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_OperationCycle.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_StorageCondition.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Intl.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_Main.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\MemIf\\api\\MemIf_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\NvM\\api\\NvM_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_GenericNvData.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\deb\\Dem_DebBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuffEvent.h',0,0,0,0,0
.L731:
.L729:
	.sdecl	'.debug_info',debug,cluster('Dem_GetEventTested')
	.sect	'.debug_info'
.L174:
	.word	577
	.half	3
	.word	.L175
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L177,.L176
	.byte	2
	.word	.L170
	.byte	3
	.byte	'Dem_GetEventTested',0,1,214,1,17
	.word	.L251
	.byte	1,1,1
	.word	.L60,.L252,.L159
	.byte	4
	.byte	'EventId',0,1,214,1,53
	.word	.L253,.L254
	.byte	4
	.byte	'EventTested',0,1,215,1,53
	.word	.L255,.L256
	.byte	5
	.word	.L60,.L252
	.byte	6
	.word	.L257,.L67,.L258
	.byte	7
	.word	.L259,.L260
	.byte	8
	.word	.L261,.L67,.L258
	.byte	0,6
	.word	.L262,.L74,.L263
	.byte	7
	.word	.L264,.L265
	.byte	9
	.word	.L266,.L74,.L263
	.byte	6
	.word	.L267,.L268,.L76
	.byte	7
	.word	.L269,.L270
	.byte	7
	.word	.L271,.L272
	.byte	9
	.word	.L273,.L268,.L76
	.byte	6
	.word	.L274,.L268,.L75
	.byte	7
	.word	.L275,.L276
	.byte	7
	.word	.L277,.L278
	.byte	8
	.word	.L279,.L268,.L75
	.byte	0,0,0,0,0,6
	.word	.L280,.L82,.L281
	.byte	7
	.word	.L282,.L283
	.byte	9
	.word	.L284,.L82,.L281
	.byte	6
	.word	.L285,.L286,.L86
	.byte	7
	.word	.L287,.L288
	.byte	9
	.word	.L289,.L286,.L86
	.byte	6
	.word	.L267,.L290,.L85
	.byte	7
	.word	.L269,.L270
	.byte	7
	.word	.L271,.L272
	.byte	9
	.word	.L273,.L290,.L85
	.byte	6
	.word	.L274,.L290,.L84
	.byte	7
	.word	.L275,.L276
	.byte	7
	.word	.L277,.L278
	.byte	8
	.word	.L279,.L290,.L84
	.byte	0,0,0,0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetEventTested')
	.sect	'.debug_abbrev'
.L175:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	29,1,49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,9,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetEventTested')
	.sect	'.debug_line'
.L176:
	.word	.L733-.L732
.L732:
	.half	3
	.word	.L735-.L734
.L734:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_ISO14229Byte.h',0,0,0,0,0
.L735:
	.byte	5,5,7,0,5,2
	.word	.L62
	.byte	3,216,1,1,4,2,5,26,9
	.half	.L67-.L62
	.byte	3,189,126,1,5,12,9
	.half	.L736-.L67
	.byte	1,5,38,7,9
	.half	.L737-.L736
	.byte	1,5,26,9
	.half	.L738-.L737
	.byte	1,5,4,9
	.half	.L68-.L738
	.byte	1,4,1,5,5,9
	.half	.L70-.L68
	.byte	3,195,1,1,7,9
	.half	.L258-.L70
	.byte	1,4,3,5,33,9
	.half	.L74-.L258
	.byte	3,157,3,1,5,51,9
	.half	.L739-.L74
	.byte	1,5,60,9
	.half	.L740-.L739
	.byte	1,5,68,9
	.half	.L741-.L740
	.byte	1,4,4,5,28,9
	.half	.L268-.L741
	.byte	3,200,123,1,5,47,9
	.half	.L742-.L268
	.byte	1,5,5,9
	.half	.L743-.L742
	.byte	1,5,73,9
	.half	.L75-.L743
	.byte	3,4,1,5,5,9
	.half	.L744-.L75
	.byte	1,4,3,5,3,9
	.half	.L76-.L744
	.byte	3,180,4,1,4,1,5,5,9
	.half	.L77-.L76
	.byte	3,227,124,1,7,9
	.half	.L263-.L77
	.byte	1,9
	.half	.L81-.L263
	.byte	3,1,1,7,9
	.half	.L745-.L81
	.byte	1,4,5,5,46,9
	.half	.L82-.L745
	.byte	3,195,1,1,5,69,9
	.half	.L746-.L82
	.byte	1,4,6,5,45,9
	.half	.L286-.L746
	.byte	3,130,126,1,4,4,5,28,9
	.half	.L290-.L286
	.byte	3,159,127,1,5,47,9
	.half	.L747-.L290
	.byte	1,5,5,9
	.half	.L748-.L747
	.byte	1,5,73,9
	.half	.L84-.L748
	.byte	3,4,1,5,5,9
	.half	.L749-.L84
	.byte	1,4,6,5,12,9
	.half	.L85-.L749
	.byte	3,221,0,1,5,5,9
	.half	.L750-.L85
	.byte	1,4,5,9
	.half	.L86-.L750
	.byte	3,254,1,1,4,1,5,15,9
	.half	.L87-.L86
	.byte	3,191,126,1,5,9,9
	.half	.L281-.L87
	.byte	3,1,1,5,2,9
	.half	.L751-.L281
	.byte	1,5,1,9
	.half	.L64-.L751
	.byte	3,1,1,7,9
	.half	.L178-.L64
	.byte	0,1,1
.L733:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetEventTested')
	.sect	'.debug_ranges'
.L177:
	.word	-1,.L60,0,.L178-.L60,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetDtcKindOfEvent')
	.sect	'.debug_info'
.L179:
	.word	427
	.half	3
	.word	.L180
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L182,.L181
	.byte	2
	.word	.L170
	.byte	3
	.byte	'Dem_GetDtcKindOfEvent',0,1,144,2,16
	.word	.L251
	.byte	1,1,1
	.word	.L165,.L291,.L164
	.byte	4
	.byte	'EventId',0,1,144,2,55
	.word	.L253,.L292
	.byte	4
	.byte	'DtcKind',0,1,144,2,81
	.word	.L293,.L294
	.byte	5
	.word	.L165,.L291
	.byte	6
	.word	.L257,.L165,.L295
	.byte	7
	.word	.L259,.L296
	.byte	8
	.word	.L261,.L165,.L295
	.byte	0,6
	.word	.L297,.L94,.L96
	.byte	7
	.word	.L298,.L299
	.byte	8
	.word	.L300,.L94,.L96
	.byte	0,6
	.word	.L301,.L96,.L302
	.byte	7
	.word	.L303,.L304
	.byte	8
	.word	.L305,.L96,.L302
	.byte	0,6
	.word	.L297,.L100,.L103
	.byte	7
	.word	.L298,.L299
	.byte	8
	.word	.L300,.L100,.L103
	.byte	0,6
	.word	.L306,.L103,.L104
	.byte	7
	.word	.L307,.L308
	.byte	8
	.word	.L309,.L103,.L104
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetDtcKindOfEvent')
	.sect	'.debug_abbrev'
.L180:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	29,1,49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetDtcKindOfEvent')
	.sect	'.debug_line'
.L181:
	.word	.L753-.L752
.L752:
	.half	3
	.word	.L755-.L754
.L754:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTC_DataStructures.h',0,0,0,0,0
.L755:
	.byte	4,2,5,26,7,0,5,2
	.word	.L165
	.byte	3,21,1,5,12,9
	.half	.L756-.L165
	.byte	1,5,38,7,9
	.half	.L757-.L756
	.byte	1,5,26,9
	.half	.L758-.L757
	.byte	1,5,4,9
	.half	.L91-.L758
	.byte	1,4,1,5,8,9
	.half	.L93-.L91
	.byte	3,252,1,1,5,14,7,9
	.half	.L295-.L93
	.byte	3,2,1,5,7,9
	.half	.L759-.L295
	.byte	1,4,2,5,11,9
	.half	.L94-.L759
	.byte	3,140,127,1,5,32,9
	.half	.L760-.L94
	.byte	1,5,4,9
	.half	.L761-.L760
	.byte	1,5,21,9
	.half	.L96-.L761
	.byte	3,122,1,5,12,9
	.half	.L762-.L96
	.byte	1,5,28,7,9
	.half	.L763-.L762
	.byte	1,5,21,9
	.half	.L764-.L763
	.byte	1,5,4,9
	.half	.L97-.L764
	.byte	1,4,1,5,12,9
	.half	.L99-.L97
	.byte	3,254,0,1,5,17,7,9
	.half	.L302-.L99
	.byte	3,2,1,5,10,9
	.half	.L765-.L302
	.byte	1,4,2,5,32,9
	.half	.L100-.L765
	.byte	3,134,127,1,5,4,9
	.half	.L766-.L100
	.byte	1,4,3,5,20,9
	.half	.L103-.L766
	.byte	3,161,127,1,5,9,9
	.half	.L767-.L103
	.byte	1,5,20,9
	.half	.L768-.L767
	.byte	1,5,26,9
	.half	.L769-.L768
	.byte	1,5,2,9
	.half	.L770-.L769
	.byte	1,4,1,5,19,9
	.half	.L104-.L770
	.byte	3,221,1,1,5,17,9
	.half	.L771-.L104
	.byte	3,1,1,5,10,9
	.half	.L772-.L771
	.byte	1,5,1,9
	.half	.L95-.L772
	.byte	3,3,1,7,9
	.half	.L183-.L95
	.byte	0,1,1
.L753:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetDtcKindOfEvent')
	.sect	'.debug_ranges'
.L182:
	.word	-1,.L165,0,.L183-.L165,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetEventCategory')
	.sect	'.debug_info'
.L184:
	.word	251
	.half	3
	.word	.L185
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L187,.L186
	.byte	2
	.word	.L170
	.byte	3
	.byte	'Dem_GetEventCategory',0,1,233,1,16
	.word	.L251
	.byte	1,1,1
	.word	.L163,.L310,.L162
	.byte	4
	.byte	'EventId',0,1,233,1,54
	.word	.L253,.L311
	.byte	4
	.byte	'EventCategory',0,1,233,1,86
	.word	.L312,.L313
	.byte	5
	.word	.L163,.L310
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetEventCategory')
	.sect	'.debug_abbrev'
.L185:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetEventCategory')
	.sect	'.debug_line'
.L186:
	.word	.L774-.L773
.L773:
	.half	3
	.word	.L776-.L775
.L775:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c',0,0,0,0,0
.L776:
	.byte	5,19,7,0,5,2
	.word	.L163
	.byte	3,129,2,1,5,17,9
	.half	.L777-.L163
	.byte	1,5,9,9
	.half	.L778-.L777
	.byte	3,1,1,5,2,9
	.half	.L779-.L778
	.byte	1,5,1,9
	.half	.L90-.L779
	.byte	3,2,1,7,9
	.half	.L188-.L90
	.byte	0,1,1
.L774:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetEventCategory')
	.sect	'.debug_ranges'
.L187:
	.word	-1,.L163,0,.L188-.L163,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_IsAnyInitMonitorForEventRequested')
	.sect	'.debug_info'
.L189:
	.word	289
	.half	3
	.word	.L190
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L192,.L191
	.byte	2
	.word	.L170
	.byte	3
	.byte	'Dem_IsAnyInitMonitorForEventRequested',0,1,212,2,16
	.word	.L251
	.byte	1,1,1
	.word	.L169,.L314,.L168
	.byte	4
	.byte	'localCounter',0,1,212,2,64
	.word	.L315,.L316
	.byte	4
	.byte	'modified',0,1,212,2,87
	.word	.L255,.L317
	.byte	5
	.word	.L169,.L314
	.byte	6
	.byte	'retVal',0,1,214,2,20
	.word	.L251,.L318
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_IsAnyInitMonitorForEventRequested')
	.sect	'.debug_abbrev'
.L190:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_IsAnyInitMonitorForEventRequested')
	.sect	'.debug_line'
.L191:
	.word	.L781-.L780
.L780:
	.half	3
	.word	.L783-.L782
.L782:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c',0,0,0,0,0
.L783:
	.byte	5,27,7,0,5,2
	.word	.L169
	.byte	3,213,2,1,5,9,9
	.half	.L726-.L169
	.byte	3,2,1,5,46,7,9
	.half	.L784-.L726
	.byte	1,5,16,7,9
	.half	.L785-.L784
	.byte	3,2,1,5,28,9
	.half	.L786-.L785
	.byte	3,2,1,5,13,9
	.half	.L787-.L786
	.byte	1,5,9,9
	.half	.L788-.L787
	.byte	1,5,25,7,9
	.half	.L789-.L788
	.byte	3,2,1,5,23,9
	.half	.L790-.L789
	.byte	1,5,30,9
	.half	.L791-.L790
	.byte	1,5,27,9
	.half	.L142-.L791
	.byte	3,4,1,5,25,9
	.half	.L792-.L142
	.byte	3,1,1,5,23,9
	.half	.L793-.L792
	.byte	1,5,5,9
	.half	.L140-.L793
	.byte	3,4,1,5,1,9
	.half	.L144-.L140
	.byte	3,1,1,7,9
	.half	.L193-.L144
	.byte	0,1,1
.L781:
	.sdecl	'.debug_ranges',debug,cluster('Dem_IsAnyInitMonitorForEventRequested')
	.sect	'.debug_ranges'
.L192:
	.word	-1,.L169,0,.L193-.L169,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_IsInitMonitorForEventRequested')
	.sect	'.debug_info'
.L194:
	.word	640
	.half	3
	.word	.L195
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L197,.L196
	.byte	2
	.word	.L170
	.byte	3
	.byte	'Dem_IsInitMonitorForEventRequested',0,1,195,1,9
	.word	.L251
	.byte	1,1,1
	.word	.L158,.L319,.L157
	.byte	4
	.byte	'EventId',0,1,195,1,60
	.word	.L253,.L320
	.byte	4
	.byte	'InitMonitorReason',0,1,195,1,96
	.word	.L321,.L322
	.byte	5
	.word	.L158,.L319
	.byte	6
	.byte	'initMonitoring',0,1,197,1,14
	.word	.L323,.L324
	.byte	7
	.word	.L325,.L158,.L326
	.byte	8
	.word	.L327,.L328
	.byte	9
	.word	.L329,.L158,.L326
	.byte	7
	.word	.L330,.L331,.L53
	.byte	8
	.word	.L332,.L333
	.byte	8
	.word	.L334,.L335
	.byte	8
	.word	.L336,.L337
	.byte	9
	.word	.L338,.L331,.L53
	.byte	6
	.byte	'bit2shift',0,2,71,11
	.word	.L251,.L339
	.byte	0,0,0,0,7
	.word	.L325,.L326,.L340
	.byte	8
	.word	.L327,.L328
	.byte	9
	.word	.L329,.L326,.L340
	.byte	7
	.word	.L330,.L341,.L56
	.byte	8
	.word	.L332,.L333
	.byte	8
	.word	.L334,.L335
	.byte	8
	.word	.L336,.L337
	.byte	9
	.word	.L338,.L341,.L56
	.byte	6
	.byte	'bit2shift',0,2,71,11
	.word	.L251,.L342
	.byte	0,0,0,0,7
	.word	.L343,.L340,.L344
	.byte	8
	.word	.L345,.L346
	.byte	9
	.word	.L347,.L340,.L344
	.byte	7
	.word	.L348,.L349,.L344
	.byte	8
	.word	.L350,.L351
	.byte	8
	.word	.L352,.L353
	.byte	8
	.word	.L354,.L355
	.byte	9
	.word	.L356,.L349,.L344
	.byte	6
	.byte	'bit2shift',0,2,79,11
	.word	.L251,.L357
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_IsInitMonitorForEventRequested')
	.sect	'.debug_abbrev'
.L195:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17
	.byte	1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_IsInitMonitorForEventRequested')
	.sect	'.debug_line'
.L196:
	.word	.L795-.L794
.L794:
	.half	3
	.word	.L797-.L796
.L796:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0,0
.L797:
	.byte	4,3,5,41,7,0,5,2
	.word	.L158
	.byte	3,129,4,1,5,59,9
	.half	.L798-.L158
	.byte	1,5,68,9
	.half	.L799-.L798
	.byte	1,4,2,5,21,9
	.half	.L331-.L799
	.byte	3,197,124,1,5,19,9
	.half	.L683-.L331
	.byte	3,1,1,5,41,9
	.half	.L800-.L683
	.byte	3,1,1,5,19,9
	.half	.L684-.L800
	.byte	1,5,5,9
	.half	.L801-.L684
	.byte	3,1,1,4,3,5,3,9
	.half	.L53-.L801
	.byte	3,184,3,1,4,1,5,2,9
	.half	.L54-.L53
	.byte	3,197,125,1,4,3,5,59,7,9
	.half	.L326-.L54
	.byte	3,187,2,1,5,68,9
	.half	.L802-.L326
	.byte	1,4,2,5,21,9
	.half	.L341-.L802
	.byte	3,197,124,1,5,19,9
	.half	.L685-.L341
	.byte	3,1,1,5,41,9
	.half	.L803-.L685
	.byte	3,1,1,5,19,9
	.half	.L686-.L803
	.byte	1,5,5,9
	.half	.L804-.L686
	.byte	3,1,1,4,3,5,3,9
	.half	.L56-.L804
	.byte	3,184,3,1,4,1,5,22,9
	.half	.L57-.L56
	.byte	3,201,125,1,4,3,5,46,9
	.half	.L340-.L57
	.byte	3,188,2,1,4,2,5,21,9
	.half	.L349-.L340
	.byte	3,200,124,1,5,6,9
	.half	.L687-.L349
	.byte	3,1,1,5,57,9
	.half	.L805-.L687
	.byte	1,5,77,9
	.half	.L688-.L805
	.byte	1,5,83,9
	.half	.L806-.L688
	.byte	1,5,25,9
	.half	.L807-.L806
	.byte	1,5,12,9
	.half	.L808-.L807
	.byte	1,4,1,5,10,9
	.half	.L344-.L808
	.byte	3,255,0,1,5,3,9
	.half	.L809-.L344
	.byte	1,5,9,9
	.half	.L55-.L809
	.byte	3,2,1,5,2,9
	.half	.L810-.L55
	.byte	1,5,1,9
	.half	.L58-.L810
	.byte	3,1,1,7,9
	.half	.L198-.L58
	.byte	0,1,1
.L795:
	.sdecl	'.debug_ranges',debug,cluster('Dem_IsInitMonitorForEventRequested')
	.sect	'.debug_ranges'
.L197:
	.word	-1,.L158,0,.L198-.L158,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetEventTested_GeneralEvtInfo')
	.sect	'.debug_info'
.L199:
	.word	262
	.half	3
	.word	.L200
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L202,.L201
	.byte	2
	.word	.L170
	.byte	3
	.byte	'Dem_GetEventTested_GeneralEvtInfo',0,1,224,1,17
	.word	.L251
	.byte	1,1,1
	.word	.L161,.L358,.L160
	.byte	4
	.byte	'EventId',0,1,224,1,68
	.word	.L253,.L359
	.byte	4
	.byte	'EventTested',0,1,225,1,53
	.word	.L255,.L360
	.byte	5
	.word	.L161,.L358
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetEventTested_GeneralEvtInfo')
	.sect	'.debug_abbrev'
.L200:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetEventTested_GeneralEvtInfo')
	.sect	'.debug_line'
.L201:
	.word	.L812-.L811
.L811:
	.half	3
	.word	.L814-.L813
.L813:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c',0,0,0,0,0
.L814:
	.byte	5,40,7,0,5,2
	.word	.L161
	.byte	3,227,1,1,5,5,9
	.half	.L695-.L161
	.byte	1,5,1,9
	.half	.L89-.L695
	.byte	3,1,1,7,9
	.half	.L203-.L89
	.byte	0,1,1
.L812:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetEventTested_GeneralEvtInfo')
	.sect	'.debug_ranges'
.L202:
	.word	-1,.L161,0,.L203-.L161,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_EvtIsRecoverable')
	.sect	'.debug_info'
.L204:
	.word	679
	.half	3
	.word	.L205
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L207,.L206
	.byte	2
	.word	.L170
	.byte	3
	.byte	'Dem_EvtIsRecoverable',0,1,96,19
	.word	.L251
	.byte	1,1,1
	.word	.L148,.L361,.L147
	.byte	4
	.byte	'EventId',0,1,96,56
	.word	.L253,.L362
	.byte	5
	.word	.L148,.L361
	.byte	6
	.word	.L363,.L9,.L10
	.byte	7
	.word	.L364,.L365
	.byte	8
	.word	.L366,.L9,.L10
	.byte	0,6
	.word	.L367,.L368,.L12
	.byte	7
	.word	.L369,.L370
	.byte	8
	.word	.L371,.L368,.L12
	.byte	0,6
	.word	.L372,.L12,.L13
	.byte	7
	.word	.L373,.L374
	.byte	8
	.word	.L375,.L12,.L13
	.byte	0,6
	.word	.L376,.L11,.L377
	.byte	7
	.word	.L378,.L379
	.byte	9
	.word	.L380,.L11,.L377
	.byte	6
	.word	.L267,.L381,.L16
	.byte	7
	.word	.L269,.L382
	.byte	7
	.word	.L271,.L383
	.byte	9
	.word	.L273,.L381,.L16
	.byte	6
	.word	.L274,.L381,.L15
	.byte	7
	.word	.L275,.L384
	.byte	7
	.word	.L277,.L385
	.byte	8
	.word	.L279,.L381,.L15
	.byte	0,0,0,0,0,6
	.word	.L386,.L377,.L19
	.byte	7
	.word	.L387,.L388
	.byte	8
	.word	.L389,.L377,.L19
	.byte	0,6
	.word	.L390,.L391,.L14
	.byte	7
	.word	.L392,.L393
	.byte	9
	.word	.L394,.L391,.L14
	.byte	6
	.word	.L395,.L396,.L23
	.byte	7
	.word	.L397,.L398
	.byte	10
	.word	.L399,.L400
	.byte	6
	.word	.L267,.L401,.L22
	.byte	7
	.word	.L269,.L382
	.byte	7
	.word	.L271,.L383
	.byte	9
	.word	.L273,.L401,.L22
	.byte	6
	.word	.L274,.L401,.L21
	.byte	7
	.word	.L275,.L384
	.byte	7
	.word	.L277,.L385
	.byte	8
	.word	.L279,.L401,.L21
	.byte	0,0,0,0,0,6
	.word	.L395,.L24,.L14
	.byte	7
	.word	.L397,.L398
	.byte	0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EvtIsRecoverable')
	.sect	'.debug_abbrev'
.L205:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	29,1,49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,9,11,1,49,16,17,1,18,1,0,0,10
	.byte	11,1,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_EvtIsRecoverable')
	.sect	'.debug_line'
.L206:
	.word	.L816-.L815
.L815:
	.half	3
	.word	.L818-.L817
.L817:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evdep\\Dem_Dependencies.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_ISO14229Byte.h',0,0,0,0,0
.L818:
	.byte	5,13,7,0,5,2
	.word	.L148
	.byte	3,232,0,1,4,2,5,2,9
	.half	.L9-.L148
	.byte	3,74,1,4,1,5,17,9
	.half	.L10-.L9
	.byte	3,49,1,4,3,5,2,7,9
	.half	.L368-.L10
	.byte	3,8,1,4,4,5,5,9
	.half	.L12-.L368
	.byte	3,215,1,1,4,1,5,47,9
	.half	.L13-.L12
	.byte	3,162,126,1,4,5,5,34,7,9
	.half	.L11-.L13
	.byte	3,145,1,1,5,52,9
	.half	.L819-.L11
	.byte	1,5,61,9
	.half	.L820-.L819
	.byte	1,5,69,9
	.half	.L821-.L820
	.byte	1,4,6,5,28,9
	.half	.L381-.L821
	.byte	3,200,126,1,5,47,9
	.half	.L822-.L381
	.byte	1,5,5,9
	.half	.L823-.L822
	.byte	1,5,73,9
	.half	.L15-.L823
	.byte	3,4,1,5,5,9
	.half	.L824-.L15
	.byte	1,4,5,5,4,9
	.half	.L16-.L824
	.byte	3,180,1,1,4,1,5,18,9
	.half	.L17-.L16
	.byte	3,241,126,1,4,5,5,5,7,9
	.half	.L377-.L17
	.byte	3,159,1,1,4,1,5,57,9
	.half	.L19-.L377
	.byte	3,226,126,1,4,7,5,44,7,9
	.half	.L391-.L19
	.byte	3,177,2,1,5,67,9
	.half	.L825-.L391
	.byte	1,4,8,5,44,9
	.half	.L396-.L825
	.byte	3,234,125,1,4,6,5,28,9
	.half	.L401-.L396
	.byte	3,187,127,1,5,47,9
	.half	.L826-.L401
	.byte	1,5,5,9
	.half	.L827-.L826
	.byte	1,5,73,9
	.half	.L21-.L827
	.byte	3,4,1,5,5,9
	.half	.L828-.L21
	.byte	1,4,8,9
	.half	.L22-.L828
	.byte	3,193,0,1,4,7,9
	.half	.L23-.L22
	.byte	3,150,2,1,4,1,5,18,9
	.half	.L24-.L23
	.byte	3,208,125,1,5,13,7,9
	.half	.L14-.L24
	.byte	1,5,5,9
	.half	.L25-.L14
	.byte	3,122,1,5,1,9
	.half	.L26-.L25
	.byte	3,8,1,7,9
	.half	.L208-.L26
	.byte	0,1,1
.L816:
	.sdecl	'.debug_ranges',debug,cluster('Dem_EvtIsRecoverable')
	.sect	'.debug_ranges'
.L207:
	.word	-1,.L148,0,.L208-.L148,0,0
.L400:
	.word	-1,.L148,.L396-.L148,.L23-.L148,.L24-.L148,.L14-.L148,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_EvtClearEventAllowed')
	.sect	'.debug_info'
.L209:
	.word	247
	.half	3
	.word	.L210
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L212,.L211
	.byte	2
	.word	.L170
	.byte	3
	.byte	'Dem_EvtClearEventAllowed',0,1,110,9
	.word	.L251
	.byte	1,1,1
	.word	.L150,.L402,.L149
	.byte	4
	.byte	'eventId',0,1,110,52
	.word	.L253,.L403
	.byte	5
	.word	.L150,.L402
	.byte	6
	.byte	'ret_val',0,1,112,11
	.word	.L251,.L404
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EvtClearEventAllowed')
	.sect	'.debug_abbrev'
.L210:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_EvtClearEventAllowed')
	.sect	'.debug_line'
.L211:
	.word	.L830-.L829
.L829:
	.half	3
	.word	.L832-.L831
.L831:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c',0,0,0,0,0
.L832:
	.byte	5,19,7,0,5,2
	.word	.L150
	.byte	3,239,0,1,5,3,9
	.half	.L676-.L150
	.byte	3,15,1,5,1,9
	.half	.L27-.L676
	.byte	3,1,1,7,9
	.half	.L213-.L27
	.byte	0,1,1
.L830:
	.sdecl	'.debug_ranges',debug,cluster('Dem_EvtClearEventAllowed')
	.sect	'.debug_ranges'
.L212:
	.word	-1,.L150,0,.L213-.L150,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_EvtSetCausal')
	.sect	'.debug_info'
.L214:
	.word	562
	.half	3
	.word	.L215
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L217,.L216
	.byte	2
	.word	.L170
	.byte	3
	.byte	'Dem_EvtSetCausal',0,1,83,6,1,1,1
	.word	.L146,.L405,.L145
	.byte	4
	.byte	'EventId',0,1,83,39
	.word	.L253,.L406
	.byte	4
	.byte	'causal',0,1,83,66
	.word	.L251,.L407
	.byte	5
	.word	.L146,.L405
	.byte	6
	.byte	'nodeId',0,1,85,22
	.word	.L251,.L408
	.byte	7
	.word	.L367,.L146,.L4
	.byte	8
	.word	.L369,.L409
	.byte	9
	.word	.L371,.L146,.L4
	.byte	0,7
	.word	.L410,.L4,.L6
	.byte	8
	.word	.L411,.L412
	.byte	8
	.word	.L413,.L414
	.byte	10
	.word	.L415,.L4,.L6
	.byte	7
	.word	.L416,.L417,.L6
	.byte	8
	.word	.L418,.L419
	.byte	8
	.word	.L420,.L421
	.byte	8
	.word	.L422,.L423
	.byte	10
	.word	.L424,.L417,.L6
	.byte	7
	.word	.L425,.L426,.L427
	.byte	8
	.word	.L428,.L429
	.byte	8
	.word	.L430,.L431
	.byte	10
	.word	.L432,.L426,.L427
	.byte	6
	.byte	'bit2shift',0,2,38,11
	.word	.L251,.L433
	.byte	0,0,7
	.word	.L434,.L5,.L6
	.byte	8
	.word	.L435,.L436
	.byte	8
	.word	.L437,.L438
	.byte	10
	.word	.L439,.L5,.L6
	.byte	6
	.byte	'bit2shift',0,2,44,11
	.word	.L251,.L440
	.byte	0,0,0,0,0,0,7
	.word	.L441,.L6,.L7
	.byte	8
	.word	.L442,.L443
	.byte	9
	.word	.L444,.L6,.L7
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EvtSetCausal')
	.sect	'.debug_abbrev'
.L215:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_EvtSetCausal')
	.sect	'.debug_line'
.L216:
	.word	.L834-.L833
.L833:
	.half	3
	.word	.L836-.L835
.L835:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0,0
.L836:
	.byte	4,3,5,2,7,0,5,2
	.word	.L146
	.byte	3,235,0,1,4,4,5,31,9
	.half	.L4-.L146
	.byte	3,145,1,1,5,49,9
	.half	.L837-.L4
	.byte	1,5,66,9
	.half	.L838-.L837
	.byte	1,4,2,5,5,9
	.half	.L417-.L838
	.byte	3,181,126,1,5,21,7,9
	.half	.L426-.L417
	.byte	3,116,1,5,6,9
	.half	.L672-.L426
	.byte	3,1,1,5,36,9
	.half	.L839-.L672
	.byte	1,5,13,9
	.half	.L673-.L839
	.byte	1,5,53,9
	.half	.L427-.L673
	.byte	3,13,1,5,21,9
	.half	.L5-.L427
	.byte	3,120,1,5,6,9
	.half	.L674-.L5
	.byte	3,1,1,5,47,9
	.half	.L840-.L674
	.byte	1,5,26,9
	.half	.L675-.L840
	.byte	1,5,13,9
	.half	.L841-.L675
	.byte	1,4,3,5,2,9
	.half	.L6-.L841
	.byte	3,197,0,1,4,1,9
	.half	.L7-.L6
	.byte	3,104,1,5,1,7,9
	.half	.L8-.L7
	.byte	3,4,1,7,9
	.half	.L218-.L8
	.byte	0,1,1
.L834:
	.sdecl	'.debug_ranges',debug,cluster('Dem_EvtSetCausal')
	.sect	'.debug_ranges'
.L217:
	.word	-1,.L146,0,.L218-.L146,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_EvtResetIsoByteCallback')
	.sect	'.debug_info'
.L219:
	.word	412
	.half	3
	.word	.L220
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L222,.L221
	.byte	2
	.word	.L170
	.byte	3
	.byte	'Dem_EvtResetIsoByteCallback',0,1,183,1,16
	.word	.L251
	.byte	1,1,1
	.word	.L156,.L445,.L155
	.byte	4
	.word	.L156,.L445
	.byte	5
	.byte	'eventIt',0,1,185,1,22
	.word	.L323,.L446
	.byte	6
	.word	.L447,.L448,.L449
	.byte	7
	.word	.L450,.L451
	.byte	8
	.word	.L452,.L448,.L449
	.byte	0,6
	.word	.L453,.L454,.L50
	.byte	7
	.word	.L455,.L456
	.byte	8
	.word	.L457,.L454,.L50
	.byte	0,6
	.word	.L458,.L50,.L459
	.byte	7
	.word	.L460,.L461
	.byte	8
	.word	.L462,.L50,.L459
	.byte	0,6
	.word	.L463,.L464,.L48
	.byte	7
	.word	.L465,.L466
	.byte	8
	.word	.L467,.L464,.L48
	.byte	0,6
	.word	.L468,.L469,.L51
	.byte	7
	.word	.L470,.L471
	.byte	8
	.word	.L472,.L469,.L51
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EvtResetIsoByteCallback')
	.sect	'.debug_abbrev'
.L220:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6
	.byte	29,1,49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_EvtResetIsoByteCallback')
	.sect	'.debug_line'
.L221:
	.word	.L843-.L842
.L842:
	.half	3
	.word	.L845-.L844
.L844:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.h',0,0,0,0,0
.L845:
	.byte	5,16,7,0,5,2
	.word	.L156
	.byte	3,182,1,1,5,31,9
	.half	.L682-.L156
	.byte	3,4,1,4,2,5,12,9
	.half	.L448-.L682
	.byte	3,230,126,1,5,10,9
	.half	.L846-.L448
	.byte	1,4,1,5,77,9
	.half	.L449-.L846
	.byte	3,154,1,1,5,68,9
	.half	.L49-.L449
	.byte	3,2,1,4,2,5,29,9
	.half	.L454-.L49
	.byte	3,243,126,1,5,11,9
	.half	.L847-.L454
	.byte	1,5,4,9
	.half	.L848-.L847
	.byte	1,4,3,5,5,9
	.half	.L50-.L848
	.byte	3,223,0,1,5,28,9
	.half	.L849-.L50
	.byte	1,5,40,9
	.half	.L850-.L849
	.byte	1,5,38,9
	.half	.L851-.L850
	.byte	1,4,1,5,104,9
	.half	.L459-.L851
	.byte	3,44,1,4,2,5,6,9
	.half	.L464-.L459
	.byte	3,240,126,1,5,9,9
	.half	.L852-.L464
	.byte	1,4,1,5,69,9
	.half	.L48-.L852
	.byte	3,144,1,1,4,2,5,12,9
	.half	.L469-.L48
	.byte	3,235,126,1,5,19,9
	.half	.L853-.L469
	.byte	1,5,16,9
	.half	.L854-.L853
	.byte	1,5,4,9
	.half	.L855-.L854
	.byte	1,4,1,5,77,9
	.half	.L51-.L855
	.byte	3,149,1,1,5,9,7,9
	.half	.L856-.L51
	.byte	3,4,1,5,2,9
	.half	.L857-.L856
	.byte	1,5,1,9
	.half	.L52-.L857
	.byte	3,1,1,7,9
	.half	.L223-.L52
	.byte	0,1,1
.L843:
	.sdecl	'.debug_ranges',debug,cluster('Dem_EvtResetIsoByteCallback')
	.sect	'.debug_ranges'
.L222:
	.word	-1,.L156,0,.L223-.L156,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_EvtPreInitEvents')
	.sect	'.debug_info'
.L224:
	.word	784
	.half	3
	.word	.L225
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L227,.L226
	.byte	2
	.word	.L170
	.byte	3
	.byte	'Dem_EvtPreInitEvents',0,1,131,1,6,1,1,1
	.word	.L152,.L473,.L151
	.byte	4
	.word	.L152,.L473
	.byte	5
	.byte	'eventIt',0,1,133,1,22
	.word	.L323,.L474
	.byte	5
	.byte	'eventId',0,1,134,1,18
	.word	.L253,.L475
	.byte	6
	.word	.L447,.L476,.L477
	.byte	7
	.word	.L450,.L478
	.byte	8
	.word	.L452,.L476,.L477
	.byte	0,6
	.word	.L453,.L479,.L30
	.byte	7
	.word	.L455,.L480
	.byte	8
	.word	.L457,.L479,.L30
	.byte	0,6
	.word	.L481,.L482,.L483
	.byte	7
	.word	.L484,.L485
	.byte	7
	.word	.L486,.L487
	.byte	8
	.word	.L488,.L482,.L483
	.byte	0,6
	.word	.L458,.L483,.L31
	.byte	7
	.word	.L460,.L489
	.byte	8
	.word	.L462,.L483,.L31
	.byte	0,4
	.word	.L31,.L38
	.byte	5
	.byte	'initialSuppression',0,1,151,1,25
	.word	.L251,.L490
	.byte	6
	.word	.L491,.L31,.L34
	.byte	7
	.word	.L492,.L493
	.byte	9
	.word	.L494,.L495
	.byte	6
	.word	.L497,.L498,.L33
	.byte	7
	.word	.L499,.L500
	.byte	7
	.word	.L501,.L502
	.byte	10
	.word	.L503,.L498,.L33
	.byte	6
	.word	.L504,.L498,.L32
	.byte	7
	.word	.L505,.L506
	.byte	7
	.word	.L507,.L508
	.byte	8
	.word	.L509,.L498,.L32
	.byte	0,0,0,0,0,6
	.word	.L262,.L34,.L496
	.byte	7
	.word	.L264,.L510
	.byte	10
	.word	.L266,.L34,.L496
	.byte	6
	.word	.L267,.L511,.L36
	.byte	7
	.word	.L269,.L512
	.byte	7
	.word	.L271,.L513
	.byte	10
	.word	.L273,.L511,.L36
	.byte	6
	.word	.L274,.L511,.L35
	.byte	7
	.word	.L275,.L514
	.byte	7
	.word	.L277,.L515
	.byte	8
	.word	.L279,.L511,.L35
	.byte	0,0,0,0,0,6
	.word	.L491,.L496,.L38
	.byte	7
	.word	.L492,.L493
	.byte	0,0,6
	.word	.L463,.L516,.L28
	.byte	7
	.word	.L465,.L517
	.byte	8
	.word	.L467,.L516,.L28
	.byte	0,6
	.word	.L468,.L518,.L39
	.byte	7
	.word	.L470,.L519
	.byte	8
	.word	.L472,.L518,.L39
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EvtPreInitEvents')
	.sect	'.debug_abbrev'
.L225:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6,29,1
	.byte	49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,9,11,1,49,16,85,6,0,0,10,11,1,49,16
	.byte	17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_EvtPreInitEvents')
	.sect	'.debug_line'
.L226:
	.word	.L859-.L858
.L858:
	.half	3
	.word	.L861-.L860
.L860:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0,0
.L861:
	.byte	5,6,7,0,5,2
	.word	.L152
	.byte	3,130,1,1,5,31,9
	.half	.L677-.L152
	.byte	3,5,1,4,2,5,12,9
	.half	.L476-.L677
	.byte	3,153,127,1,5,10,9
	.half	.L862-.L476
	.byte	1,4,1,5,77,9
	.half	.L477-.L862
	.byte	3,231,0,1,5,41,9
	.half	.L29-.L477
	.byte	3,2,1,4,2,5,29,9
	.half	.L479-.L29
	.byte	3,166,127,1,5,11,9
	.half	.L863-.L479
	.byte	1,5,4,9
	.half	.L678-.L863
	.byte	1,4,1,5,40,9
	.half	.L30-.L678
	.byte	3,219,0,1,4,3,5,4,9
	.half	.L482-.L30
	.byte	3,216,0,1,5,23,9
	.half	.L864-.L482
	.byte	1,5,51,9
	.half	.L865-.L864
	.byte	1,4,4,5,5,9
	.half	.L483-.L865
	.byte	3,172,127,1,5,28,9
	.half	.L866-.L483
	.byte	1,5,40,9
	.half	.L867-.L866
	.byte	1,5,38,9
	.half	.L868-.L867
	.byte	1,4,5,5,32,9
	.half	.L31-.L868
	.byte	3,2,1,5,47,9
	.half	.L869-.L31
	.byte	1,5,53,9
	.half	.L870-.L869
	.byte	1,5,75,9
	.half	.L871-.L870
	.byte	1,4,6,5,29,9
	.half	.L498-.L871
	.byte	3,173,127,1,5,46,9
	.half	.L872-.L498
	.byte	1,5,5,9
	.half	.L873-.L872
	.byte	1,5,74,9
	.half	.L32-.L873
	.byte	3,5,1,5,5,9
	.half	.L874-.L32
	.byte	1,4,5,5,2,9
	.half	.L33-.L874
	.byte	3,206,0,1,4,3,5,33,9
	.half	.L34-.L33
	.byte	3,229,3,1,5,51,9
	.half	.L875-.L34
	.byte	1,5,60,9
	.half	.L876-.L875
	.byte	1,5,68,9
	.half	.L877-.L876
	.byte	1,4,7,5,28,9
	.half	.L511-.L877
	.byte	3,200,123,1,5,47,9
	.half	.L878-.L511
	.byte	1,5,5,9
	.half	.L879-.L878
	.byte	1,5,73,9
	.half	.L35-.L879
	.byte	3,4,1,5,5,9
	.half	.L880-.L35
	.byte	1,4,3,5,3,9
	.half	.L36-.L880
	.byte	3,180,4,1,4,1,5,7,9
	.half	.L37-.L36
	.byte	3,162,124,1,5,42,7,9
	.half	.L496-.L37
	.byte	3,3,1,5,104,9
	.half	.L38-.L496
	.byte	3,109,1,4,2,5,6,9
	.half	.L516-.L38
	.byte	3,163,127,1,5,9,9
	.half	.L881-.L516
	.byte	1,4,1,5,69,9
	.half	.L28-.L881
	.byte	3,221,0,1,4,2,5,12,9
	.half	.L518-.L28
	.byte	3,158,127,1,5,19,9
	.half	.L882-.L518
	.byte	1,5,16,9
	.half	.L883-.L882
	.byte	1,5,4,9
	.half	.L884-.L883
	.byte	1,4,1,5,77,9
	.half	.L39-.L884
	.byte	3,226,0,1,5,1,7,9
	.half	.L885-.L39
	.byte	3,25,1,7,9
	.half	.L228-.L885
	.byte	0,1,1
.L859:
	.sdecl	'.debug_ranges',debug,cluster('Dem_EvtPreInitEvents')
	.sect	'.debug_ranges'
.L227:
	.word	-1,.L152,0,.L228-.L152,0,0
.L495:
	.word	-1,.L152,.L31-.L152,.L34-.L152,.L496-.L152,.L38-.L152,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_EvtInitEvents')
	.sect	'.debug_info'
.L229:
	.word	547
	.half	3
	.word	.L230
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L232,.L231
	.byte	2
	.word	.L170
	.byte	3
	.byte	'Dem_EvtInitEvents',0,1,163,1,6,1,1,1
	.word	.L154,.L520,.L153
	.byte	4
	.word	.L154,.L520
	.byte	5
	.byte	'EventId',0,1,166,1,21
	.word	.L253,.L521
	.byte	5
	.byte	'eventIt',0,1,167,1,25
	.word	.L323,.L522
	.byte	6
	.word	.L447,.L523,.L524
	.byte	7
	.word	.L450,.L525
	.byte	8
	.word	.L452,.L523,.L524
	.byte	0,6
	.word	.L453,.L526,.L42
	.byte	7
	.word	.L455,.L527
	.byte	8
	.word	.L457,.L526,.L42
	.byte	0,6
	.word	.L262,.L42,.L528
	.byte	7
	.word	.L264,.L529
	.byte	9
	.word	.L266,.L42,.L528
	.byte	6
	.word	.L267,.L530,.L44
	.byte	7
	.word	.L269,.L531
	.byte	7
	.word	.L271,.L532
	.byte	9
	.word	.L273,.L530,.L44
	.byte	6
	.word	.L274,.L530,.L43
	.byte	7
	.word	.L275,.L533
	.byte	7
	.word	.L277,.L534
	.byte	8
	.word	.L279,.L530,.L43
	.byte	0,0,0,0,0,6
	.word	.L535,.L528,.L46
	.byte	7
	.word	.L536,.L537
	.byte	8
	.word	.L538,.L528,.L46
	.byte	0,6
	.word	.L463,.L539,.L40
	.byte	7
	.word	.L465,.L540
	.byte	8
	.word	.L467,.L539,.L40
	.byte	0,6
	.word	.L468,.L541,.L47
	.byte	7
	.word	.L470,.L542
	.byte	8
	.word	.L472,.L541,.L47
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EvtInitEvents')
	.sect	'.debug_abbrev'
.L230:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6,29,1
	.byte	49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,9,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_EvtInitEvents')
	.sect	'.debug_line'
.L231:
	.word	.L887-.L886
.L886:
	.half	3
	.word	.L889-.L888
.L888:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.h',0,0,0,0,0
.L889:
	.byte	5,6,7,0,5,2
	.word	.L154
	.byte	3,162,1,1,5,34,9
	.half	.L679-.L154
	.byte	3,6,1,4,2,5,12,9
	.half	.L523-.L679
	.byte	3,248,126,1,5,10,9
	.half	.L890-.L523
	.byte	1,4,1,5,80,9
	.half	.L524-.L890
	.byte	3,136,1,1,5,47,9
	.half	.L41-.L524
	.byte	3,2,1,4,2,5,29,9
	.half	.L526-.L41
	.byte	3,133,127,1,5,11,9
	.half	.L891-.L526
	.byte	1,5,4,9
	.half	.L680-.L891
	.byte	1,4,3,5,33,9
	.half	.L42-.L680
	.byte	3,198,4,1,5,51,9
	.half	.L892-.L42
	.byte	1,5,60,9
	.half	.L893-.L892
	.byte	1,5,68,9
	.half	.L894-.L893
	.byte	1,4,4,5,28,9
	.half	.L530-.L894
	.byte	3,200,123,1,5,47,9
	.half	.L895-.L530
	.byte	1,5,5,9
	.half	.L896-.L895
	.byte	1,5,73,9
	.half	.L43-.L896
	.byte	3,4,1,5,5,9
	.half	.L897-.L43
	.byte	1,4,3,5,3,9
	.half	.L44-.L897
	.byte	3,180,4,1,4,1,5,9,9
	.half	.L45-.L44
	.byte	3,182,124,1,4,5,5,5,7,9
	.half	.L528-.L45
	.byte	3,36,1,5,28,9
	.half	.L898-.L528
	.byte	1,5,40,9
	.half	.L899-.L898
	.byte	1,5,38,9
	.half	.L681-.L899
	.byte	1,4,1,5,107,9
	.half	.L46-.L681
	.byte	3,89,1,4,2,5,6,9
	.half	.L539-.L46
	.byte	3,130,127,1,5,9,9
	.half	.L900-.L539
	.byte	1,4,1,5,72,9
	.half	.L40-.L900
	.byte	3,254,0,1,4,2,5,12,9
	.half	.L541-.L40
	.byte	3,253,126,1,5,19,9
	.half	.L901-.L541
	.byte	1,5,16,9
	.half	.L902-.L901
	.byte	1,5,4,9
	.half	.L903-.L902
	.byte	1,4,1,5,80,9
	.half	.L47-.L903
	.byte	3,131,1,1,5,1,7,9
	.half	.L904-.L47
	.byte	3,9,1,7,9
	.half	.L233-.L904
	.byte	0,1,1
.L887:
	.sdecl	'.debug_ranges',debug,cluster('Dem_EvtInitEvents')
	.sect	'.debug_ranges'
.L232:
	.word	-1,.L154,0,.L233-.L154,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_EvtSetSuppression')
	.sect	'.debug_info'
.L234:
	.word	1757
	.half	3
	.word	.L235
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L237,.L236
	.byte	2
	.word	.L170
	.byte	3
	.byte	'Dem_EvtSetSuppression',0,1,166,2,6,1,1,1
	.word	.L167,.L543,.L166
	.byte	4
	.byte	'EventId',0,1,166,2,45
	.word	.L253,.L544
	.byte	4
	.byte	'newSuppressed',0,1,166,2,72
	.word	.L251,.L545
	.byte	5
	.word	.L167,.L543
	.byte	6
	.byte	'dtcId',0,1,168,2,19
	.word	.L253,.L546
	.byte	7
	.word	.L262,.L547,.L110
	.byte	8
	.word	.L264,.L548
	.byte	9
	.word	.L266,.L547,.L110
	.byte	7
	.word	.L267,.L549,.L107
	.byte	8
	.word	.L269,.L550
	.byte	8
	.word	.L271,.L551
	.byte	9
	.word	.L273,.L549,.L107
	.byte	7
	.word	.L274,.L549,.L106
	.byte	8
	.word	.L275,.L552
	.byte	8
	.word	.L277,.L553
	.byte	10
	.word	.L279,.L549,.L106
	.byte	0,0,0,0,0,7
	.word	.L297,.L110,.L111
	.byte	8
	.word	.L298,.L554
	.byte	10
	.word	.L300,.L110,.L111
	.byte	0,7
	.word	.L416,.L555,.L113
	.byte	8
	.word	.L418,.L556
	.byte	8
	.word	.L420,.L557
	.byte	8
	.word	.L422,.L558
	.byte	9
	.word	.L424,.L555,.L113
	.byte	7
	.word	.L425,.L559,.L560
	.byte	8
	.word	.L428,.L561
	.byte	8
	.word	.L430,.L562
	.byte	9
	.word	.L432,.L559,.L560
	.byte	6
	.byte	'bit2shift',0,2,38,11
	.word	.L251,.L563
	.byte	0,0,7
	.word	.L434,.L112,.L113
	.byte	8
	.word	.L435,.L564
	.byte	8
	.word	.L437,.L565
	.byte	9
	.word	.L439,.L112,.L113
	.byte	6
	.byte	'bit2shift',0,2,44,11
	.word	.L251,.L566
	.byte	0,0,0,0,7
	.word	.L567,.L115,.L114
	.byte	8
	.word	.L568,.L569
	.byte	8
	.word	.L570,.L571
	.byte	9
	.word	.L572,.L115,.L114
	.byte	7
	.word	.L573,.L115,.L116
	.byte	8
	.word	.L574,.L575
	.byte	10
	.word	.L576,.L115,.L116
	.byte	0,9
	.word	.L577,.L578,.L114
	.byte	6
	.byte	'it',0,3,152,1,33
	.word	.L579,.L580
	.byte	7
	.word	.L581,.L582,.L583
	.byte	8
	.word	.L584,.L585
	.byte	8
	.word	.L586,.L587
	.byte	9
	.word	.L588,.L582,.L583
	.byte	7
	.word	.L301,.L582,.L589
	.byte	8
	.word	.L303,.L590
	.byte	10
	.word	.L305,.L582,.L589
	.byte	0,0,0,7
	.word	.L591,.L592,.L125
	.byte	8
	.word	.L593,.L594
	.byte	10
	.word	.L595,.L592,.L125
	.byte	0,7
	.word	.L262,.L125,.L596
	.byte	8
	.word	.L264,.L548
	.byte	9
	.word	.L266,.L125,.L596
	.byte	7
	.word	.L267,.L597,.L127
	.byte	8
	.word	.L269,.L550
	.byte	8
	.word	.L271,.L551
	.byte	9
	.word	.L273,.L597,.L127
	.byte	7
	.word	.L274,.L597,.L126
	.byte	8
	.word	.L275,.L552
	.byte	8
	.word	.L277,.L553
	.byte	10
	.word	.L279,.L597,.L126
	.byte	0,0,0,0,0,7
	.word	.L598,.L599,.L123
	.byte	8
	.word	.L600,.L601
	.byte	10
	.word	.L602,.L599,.L123
	.byte	0,7
	.word	.L603,.L604,.L131
	.byte	8
	.word	.L605,.L606
	.byte	10
	.word	.L607,.L604,.L131
	.byte	0,7
	.word	.L416,.L608,.L114
	.byte	8
	.word	.L418,.L556
	.byte	8
	.word	.L420,.L557
	.byte	8
	.word	.L422,.L558
	.byte	9
	.word	.L424,.L608,.L114
	.byte	7
	.word	.L425,.L609,.L610
	.byte	8
	.word	.L428,.L561
	.byte	8
	.word	.L430,.L562
	.byte	9
	.word	.L432,.L609,.L610
	.byte	6
	.byte	'bit2shift',0,2,38,11
	.word	.L251,.L611
	.byte	0,0,7
	.word	.L434,.L132,.L114
	.byte	8
	.word	.L435,.L564
	.byte	8
	.word	.L437,.L565
	.byte	9
	.word	.L439,.L132,.L114
	.byte	6
	.byte	'bit2shift',0,2,44,11
	.word	.L251,.L612
	.byte	0,0,0,0,0,0,0,7
	.word	.L535,.L613,.L614
	.byte	8
	.word	.L536,.L615
	.byte	10
	.word	.L538,.L613,.L614
	.byte	0,7
	.word	.L616,.L134,.L617
	.byte	8
	.word	.L618,.L619
	.byte	10
	.word	.L620,.L134,.L617
	.byte	0,7
	.word	.L621,.L622,.L109
	.byte	8
	.word	.L623,.L624
	.byte	8
	.word	.L625,.L626
	.byte	9
	.word	.L627,.L622,.L109
	.byte	6
	.byte	'oldReason',0,4,243,3,31
	.word	.L251,.L628
	.byte	7
	.word	.L330,.L629,.L137
	.byte	8
	.word	.L332,.L630
	.byte	8
	.word	.L334,.L631
	.byte	8
	.word	.L336,.L632
	.byte	9
	.word	.L338,.L629,.L137
	.byte	6
	.byte	'bit2shift',0,2,71,11
	.word	.L251,.L633
	.byte	0,0,7
	.word	.L634,.L635,.L139
	.byte	8
	.word	.L636,.L637
	.byte	8
	.word	.L638,.L639
	.byte	8
	.word	.L640,.L641
	.byte	8
	.word	.L642,.L643
	.byte	9
	.word	.L644,.L635,.L139
	.byte	6
	.byte	'bit2shift',0,2,85,11
	.word	.L251,.L645
	.byte	7
	.word	.L348,.L646,.L647
	.byte	8
	.word	.L350,.L648
	.byte	8
	.word	.L352,.L649
	.byte	8
	.word	.L354,.L650
	.byte	9
	.word	.L356,.L646,.L647
	.byte	6
	.byte	'bit2shift',0,2,79,11
	.word	.L251,.L651
	.byte	0,0,0,0,7
	.word	.L652,.L139,.L653
	.byte	10
	.word	.L654,.L139,.L653
	.byte	0,7
	.word	.L655,.L656,.L109
	.byte	8
	.word	.L657,.L658
	.byte	9
	.word	.L659,.L656,.L109
	.byte	7
	.word	.L660,.L661,.L109
	.byte	8
	.word	.L662,.L663
	.byte	8
	.word	.L664,.L665
	.byte	9
	.word	.L666,.L661,.L109
	.byte	6
	.byte	'bit2shift',0,5,38,12
	.word	.L667,.L668
	.byte	0,0,0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EvtSetSuppression')
	.sect	'.debug_abbrev'
.L235:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,10,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_EvtSetSuppression')
	.sect	'.debug_line'
.L236:
	.word	.L906-.L905
.L905:
	.half	3
	.word	.L908-.L907
.L907:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits32.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.h',0,0,0,0,0
.L908:
	.byte	5,6,7,0,5,2
	.word	.L167
	.byte	3,165,2,1,4,4,5,33,9
	.half	.L547-.L167
	.byte	3,208,2,1,5,51,9
	.half	.L699-.L547
	.byte	1,5,60,9
	.half	.L700-.L699
	.byte	1,5,68,9
	.half	.L909-.L700
	.byte	1,4,2,5,28,9
	.half	.L549-.L909
	.byte	3,200,123,1,5,47,9
	.half	.L910-.L549
	.byte	1,5,5,9
	.half	.L911-.L910
	.byte	1,5,73,9
	.half	.L106-.L911
	.byte	3,4,1,5,5,9
	.half	.L912-.L106
	.byte	1,4,4,5,3,9
	.half	.L107-.L912
	.byte	3,180,4,1,4,1,5,5,9
	.half	.L108-.L107
	.byte	3,184,125,1,4,6,5,11,7,9
	.half	.L110-.L108
	.byte	3,242,126,1,5,32,9
	.half	.L701-.L110
	.byte	1,5,4,9
	.half	.L703-.L701
	.byte	1,4,1,5,54,9
	.half	.L111-.L703
	.byte	3,151,1,1,5,71,9
	.half	.L704-.L111
	.byte	1,4,2,5,5,9
	.half	.L555-.L704
	.byte	3,251,125,1,5,21,7,9
	.half	.L559-.L555
	.byte	3,116,1,5,6,9
	.half	.L705-.L559
	.byte	3,1,1,5,36,9
	.half	.L913-.L705
	.byte	1,5,13,9
	.half	.L706-.L913
	.byte	1,5,53,9
	.half	.L560-.L706
	.byte	3,13,1,5,21,9
	.half	.L112-.L560
	.byte	3,120,1,5,6,9
	.half	.L707-.L112
	.byte	3,1,1,5,47,9
	.half	.L914-.L707
	.byte	1,5,26,9
	.half	.L708-.L914
	.byte	1,5,13,9
	.half	.L915-.L708
	.byte	1,4,1,5,9,9
	.half	.L113-.L915
	.byte	3,139,2,1,5,50,7,9
	.half	.L709-.L113
	.byte	3,2,1,4,3,5,5,9
	.half	.L115-.L709
	.byte	3,204,126,1,5,10,9
	.half	.L116-.L115
	.byte	3,16,1,5,14,7,9
	.half	.L578-.L116
	.byte	3,4,1,5,55,7,9
	.half	.L916-.L578
	.byte	3,2,1,4,6,5,21,9
	.half	.L582-.L916
	.byte	3,126,1,5,12,9
	.half	.L917-.L582
	.byte	1,5,28,7,9
	.half	.L918-.L917
	.byte	1,5,21,9
	.half	.L919-.L918
	.byte	1,5,4,9
	.half	.L119-.L919
	.byte	1,5,9,9
	.half	.L121-.L119
	.byte	3,154,1,1,5,5,7,9
	.half	.L589-.L121
	.byte	3,2,1,5,14,9
	.half	.L122-.L589
	.byte	3,3,1,5,35,9
	.half	.L920-.L122
	.byte	1,5,11,9
	.half	.L921-.L920
	.byte	1,5,44,9
	.half	.L922-.L921
	.byte	3,1,1,5,12,9
	.half	.L923-.L922
	.byte	1,4,3,5,56,9
	.half	.L583-.L923
	.byte	3,227,126,1,5,75,9
	.half	.L124-.L583
	.byte	3,3,1,4,6,5,33,9
	.half	.L592-.L124
	.byte	3,173,1,1,5,29,9
	.half	.L924-.L592
	.byte	1,5,4,9
	.half	.L925-.L924
	.byte	1,4,4,5,51,9
	.half	.L125-.L925
	.byte	3,169,2,1,5,60,9
	.half	.L926-.L125
	.byte	1,5,68,9
	.half	.L927-.L926
	.byte	1,4,2,5,28,9
	.half	.L597-.L927
	.byte	3,200,123,1,5,47,9
	.half	.L928-.L597
	.byte	1,5,5,9
	.half	.L929-.L928
	.byte	1,5,73,9
	.half	.L126-.L929
	.byte	3,4,1,5,5,9
	.half	.L930-.L126
	.byte	1,4,4,5,3,9
	.half	.L127-.L930
	.byte	3,180,4,1,4,3,5,23,9
	.half	.L128-.L127
	.byte	3,170,124,1,5,39,7,9
	.half	.L596-.L128
	.byte	3,2,1,5,21,9
	.half	.L931-.L596
	.byte	3,1,1,5,50,9
	.half	.L129-.L931
	.byte	3,123,1,4,6,5,7,9
	.half	.L599-.L129
	.byte	3,170,1,1,5,12,9
	.half	.L932-.L599
	.byte	1,4,3,5,53,9
	.half	.L123-.L932
	.byte	3,213,126,1,4,6,5,34,9
	.half	.L604-.L123
	.byte	3,166,1,1,5,43,9
	.half	.L933-.L604
	.byte	1,5,39,9
	.half	.L934-.L933
	.byte	1,5,4,9
	.half	.L935-.L934
	.byte	1,4,3,5,56,9
	.half	.L131-.L935
	.byte	3,218,126,1,5,37,7,9
	.half	.L118-.L131
	.byte	3,11,1,5,53,9
	.half	.L936-.L118
	.byte	1,5,68,9
	.half	.L937-.L936
	.byte	1,5,97,9
	.half	.L938-.L937
	.byte	1,4,2,5,5,9
	.half	.L608-.L938
	.byte	3,138,127,1,5,21,7,9
	.half	.L609-.L608
	.byte	3,116,1,5,6,9
	.half	.L710-.L609
	.byte	3,1,1,5,36,9
	.half	.L939-.L710
	.byte	1,5,13,9
	.half	.L711-.L939
	.byte	1,5,53,9
	.half	.L610-.L711
	.byte	3,13,1,5,21,9
	.half	.L132-.L610
	.byte	3,120,1,5,6,9
	.half	.L712-.L132
	.byte	3,1,1,5,47,9
	.half	.L940-.L712
	.byte	1,5,26,9
	.half	.L713-.L940
	.byte	1,5,13,9
	.half	.L941-.L713
	.byte	1,4,1,5,9,9
	.half	.L114-.L941
	.byte	3,144,2,1,4,7,5,5,7,9
	.half	.L613-.L114
	.byte	3,147,127,1,5,28,9
	.half	.L714-.L613
	.byte	1,5,40,9
	.half	.L715-.L714
	.byte	1,5,38,9
	.half	.L942-.L715
	.byte	1,4,1,5,53,9
	.half	.L614-.L942
	.byte	3,239,0,1,4,7,5,5,9
	.half	.L134-.L614
	.byte	3,137,127,1,5,28,9
	.half	.L716-.L134
	.byte	1,5,40,9
	.half	.L717-.L716
	.byte	1,5,38,9
	.half	.L943-.L717
	.byte	1,4,1,5,47,9
	.half	.L617-.L943
	.byte	3,252,0,1,4,4,5,110,9
	.half	.L622-.L617
	.byte	3,175,1,1,5,119,9
	.half	.L718-.L622
	.byte	1,4,2,5,21,9
	.half	.L629-.L718
	.byte	3,212,124,1,5,19,9
	.half	.L719-.L629
	.byte	3,1,1,5,41,9
	.half	.L944-.L719
	.byte	3,1,1,5,19,9
	.half	.L720-.L944
	.byte	1,5,5,9
	.half	.L945-.L720
	.byte	3,1,1,4,4,5,9,9
	.half	.L137-.L945
	.byte	3,172,3,1,5,41,7,9
	.half	.L946-.L137
	.byte	1,5,73,7,9
	.half	.L138-.L946
	.byte	3,2,1,5,106,9
	.half	.L947-.L138
	.byte	1,4,2,5,21,9
	.half	.L635-.L947
	.byte	3,221,124,1,9
	.half	.L646-.L635
	.byte	3,122,1,5,6,9
	.half	.L722-.L646
	.byte	3,1,1,5,57,9
	.half	.L948-.L722
	.byte	1,5,77,9
	.half	.L723-.L948
	.byte	1,5,83,9
	.half	.L949-.L723
	.byte	1,5,25,9
	.half	.L950-.L949
	.byte	1,5,12,9
	.half	.L951-.L950
	.byte	1,5,6,9
	.half	.L647-.L951
	.byte	3,7,1,5,57,9
	.half	.L952-.L647
	.byte	1,5,35,9
	.half	.L721-.L952
	.byte	1,5,78,9
	.half	.L953-.L721
	.byte	1,5,12,9
	.half	.L954-.L953
	.byte	1,4,4,5,5,9
	.half	.L139-.L954
	.byte	3,142,3,1,5,36,9
	.half	.L955-.L139
	.byte	1,5,34,9
	.half	.L653-.L955
	.byte	3,22,1,5,107,9
	.half	.L656-.L653
	.byte	3,110,1,4,5,5,22,9
	.half	.L661-.L656
	.byte	3,189,124,1,5,6,9
	.half	.L724-.L661
	.byte	3,1,1,5,37,9
	.half	.L956-.L724
	.byte	1,5,13,9
	.half	.L725-.L956
	.byte	1,4,1,5,1,9
	.half	.L109-.L725
	.byte	3,169,2,1,7,9
	.half	.L238-.L109
	.byte	0,1,1
.L906:
	.sdecl	'.debug_ranges',debug,cluster('Dem_EvtSetSuppression')
	.sect	'.debug_ranges'
.L237:
	.word	-1,.L167,0,.L238-.L167,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_EvtIsAnyInitMonitoringRequestedMask')
	.sect	'.debug_info'
.L239:
	.word	195
	.half	3
	.word	.L240
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L170
	.byte	3
	.byte	'Dem_EvtIsAnyInitMonitoringRequestedMask',0,28,28,8
	.word	.L667
	.byte	1,5,3
	.word	Dem_EvtIsAnyInitMonitoringRequestedMask
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EvtIsAnyInitMonitoringRequestedMask')
	.sect	'.debug_abbrev'
.L240:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_AllEventsState')
	.sect	'.debug_info'
.L241:
	.word	174
	.half	3
	.word	.L242
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L170
	.byte	3
	.byte	'Dem_AllEventsState',0,28,23,1
	.word	.L669
	.byte	1,5,3
	.word	Dem_AllEventsState
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_AllEventsState')
	.sect	'.debug_abbrev'
.L242:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_AllEventsState8')
	.sect	'.debug_info'
.L243:
	.word	175
	.half	3
	.word	.L244
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L170
	.byte	3
	.byte	'Dem_AllEventsState8',0,28,24,1
	.word	.L670
	.byte	1,5,3
	.word	Dem_AllEventsState8
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_AllEventsState8')
	.sect	'.debug_abbrev'
.L244:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_AllEventsResetDebouncerRequested')
	.sect	'.debug_info'
.L245:
	.word	192
	.half	3
	.word	.L246
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L170
	.byte	3
	.byte	'Dem_AllEventsResetDebouncerRequested',0,28,25,1
	.word	.L671
	.byte	1,5,3
	.word	Dem_AllEventsResetDebouncerRequested
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_AllEventsResetDebouncerRequested')
	.sect	'.debug_abbrev'
.L246:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_EventWasPassedReported')
	.sect	'.debug_info'
.L247:
	.word	182
	.half	3
	.word	.L248
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L170
	.byte	3
	.byte	'Dem_EventWasPassedReported',0,28,26,1
	.word	.L671
	.byte	1,5,3
	.word	Dem_EventWasPassedReported
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EventWasPassedReported')
	.sect	'.debug_abbrev'
.L248:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GlobalInitMonitoringCounter')
	.sect	'.debug_info'
.L249:
	.word	187
	.half	3
	.word	.L250
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L170
	.byte	3
	.byte	'Dem_GlobalInitMonitoringCounter',0,28,21,8
	.word	.L253
	.byte	1,5,3
	.word	Dem_GlobalInitMonitoringCounter
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GlobalInitMonitoringCounter')
	.sect	'.debug_abbrev'
.L250:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_EvtClearEventAllowed')
	.sect	'.debug_loc'
.L149:
	.word	-1,.L150,0,.L402-.L150
	.half	2
	.byte	138,0
	.word	0,0
.L403:
	.word	-1,.L150,0,.L402-.L150
	.half	1
	.byte	84
	.word	0,0
.L404:
	.word	-1,.L150,.L676-.L150,.L402-.L150
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_EvtInitEvents')
	.sect	'.debug_loc'
.L153:
	.word	-1,.L154,0,.L679-.L154
	.half	2
	.byte	138,0
	.word	.L679-.L154,.L520-.L154
	.half	2
	.byte	138,8
	.word	.L520-.L154,.L520-.L154
	.half	2
	.byte	138,0
	.word	0,0
.L521:
	.word	-1,.L154,.L680-.L154,.L681-.L154
	.half	1
	.byte	95
	.word	0,0
.L537:
	.word	0,0
.L529:
	.word	0,0
.L534:
	.word	0,0
.L532:
	.word	0,0
.L522:
	.word	-1,.L154,0,.L520-.L154
	.half	2
	.byte	145,120
	.word	0,0
.L525:
	.word	0,0
.L542:
	.word	0,0
.L540:
	.word	0,0
.L527:
	.word	0,0
.L533:
	.word	0,0
.L531:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_EvtIsRecoverable')
	.sect	'.debug_loc'
.L147:
	.word	-1,.L148,0,.L361-.L148
	.half	2
	.byte	138,0
	.word	0,0
.L362:
	.word	-1,.L148,0,.L361-.L148
	.half	1
	.byte	84
	.word	0,0
.L379:
	.word	0,0
.L388:
	.word	0,0
.L393:
	.word	0,0
.L374:
	.word	0,0
.L385:
	.word	0,0
.L383:
	.word	0,0
.L370:
	.word	0,0
.L365:
	.word	0,0
.L398:
	.word	0,0
.L384:
	.word	0,0
.L382:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_EvtPreInitEvents')
	.sect	'.debug_loc'
.L151:
	.word	-1,.L152,0,.L677-.L152
	.half	2
	.byte	138,0
	.word	.L677-.L152,.L473-.L152
	.half	2
	.byte	138,8
	.word	.L473-.L152,.L473-.L152
	.half	2
	.byte	138,0
	.word	0,0
.L489:
	.word	0,0
.L485:
	.word	0,0
.L510:
	.word	0,0
.L487:
	.word	0,0
.L515:
	.word	0,0
.L508:
	.word	0,0
.L513:
	.word	0,0
.L502:
	.word	0,0
.L475:
	.word	-1,.L152,.L678-.L152,.L38-.L152
	.half	1
	.byte	84
	.word	0,0
.L474:
	.word	-1,.L152,0,.L473-.L152
	.half	2
	.byte	145,120
	.word	0,0
.L493:
	.word	0,0
.L490:
	.word	0,0
.L478:
	.word	0,0
.L519:
	.word	0,0
.L517:
	.word	0,0
.L480:
	.word	0,0
.L514:
	.word	0,0
.L506:
	.word	0,0
.L512:
	.word	0,0
.L500:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_EvtResetIsoByteCallback')
	.sect	'.debug_loc'
.L155:
	.word	-1,.L156,0,.L682-.L156
	.half	2
	.byte	138,0
	.word	.L682-.L156,.L445-.L156
	.half	2
	.byte	138,8
	.word	.L445-.L156,.L445-.L156
	.half	2
	.byte	138,0
	.word	0,0
.L461:
	.word	0,0
.L446:
	.word	-1,.L156,0,.L445-.L156
	.half	2
	.byte	145,120
	.word	0,0
.L451:
	.word	0,0
.L471:
	.word	0,0
.L466:
	.word	0,0
.L456:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_EvtSetCausal')
	.sect	'.debug_loc'
.L145:
	.word	-1,.L146,0,.L405-.L146
	.half	2
	.byte	138,0
	.word	0,0
.L406:
	.word	-1,.L146,0,.L405-.L146
	.half	1
	.byte	84
	.word	0,0
.L412:
	.word	0,0
.L433:
	.word	-1,.L146,.L672-.L146,.L673-.L146
	.half	1
	.byte	95
	.word	0,0
.L440:
	.word	-1,.L146,.L674-.L146,.L675-.L146
	.half	1
	.byte	95
	.word	0,0
.L431:
	.word	0,0
.L438:
	.word	0,0
.L421:
	.word	0,0
.L429:
	.word	0,0
.L436:
	.word	0,0
.L419:
	.word	0,0
.L407:
	.word	-1,.L146,0,.L405-.L146
	.half	1
	.byte	85
	.word	0,0
.L443:
	.word	0,0
.L409:
	.word	0,0
.L408:
	.word	0,0
.L414:
	.word	0,0
.L423:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_EvtSetSuppression')
	.sect	'.debug_loc'
.L166:
	.word	-1,.L167,0,.L696-.L167
	.half	2
	.byte	138,0
	.word	.L696-.L167,.L543-.L167
	.half	2
	.byte	138,8
	.word	.L543-.L167,.L543-.L167
	.half	2
	.byte	138,0
	.word	0,0
.L619:
	.word	0,0
.L615:
	.word	0,0
.L544:
	.word	-1,.L167,0,.L697-.L167
	.half	1
	.byte	84
	.word	.L699-.L167,.L700-.L167
	.half	1
	.byte	88
	.word	.L701-.L167,.L702-.L167
	.half	1
	.byte	88
	.word	.L111-.L167,.L704-.L167
	.half	1
	.byte	88
	.word	.L714-.L167,.L715-.L167
	.half	1
	.byte	88
	.word	.L716-.L167,.L717-.L167
	.half	1
	.byte	88
	.word	.L622-.L167,.L718-.L167
	.half	1
	.byte	88
	.word	0,0
.L624:
	.word	0,0
.L548:
	.word	0,0
.L611:
	.word	-1,.L167,.L710-.L167,.L711-.L167
	.half	1
	.byte	95
	.word	0,0
.L563:
	.word	-1,.L167,.L705-.L167,.L706-.L167
	.half	1
	.byte	81
	.word	0,0
.L668:
	.word	-1,.L167,.L724-.L167,.L725-.L167
	.half	1
	.byte	95
	.word	0,0
.L566:
	.word	-1,.L167,.L707-.L167,.L708-.L167
	.half	1
	.byte	95
	.word	0,0
.L612:
	.word	-1,.L167,.L712-.L167,.L713-.L167
	.half	1
	.byte	95
	.word	0,0
.L633:
	.word	-1,.L167,.L719-.L167,.L720-.L167
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L651:
	.word	-1,.L167,.L722-.L167,.L723-.L167
	.half	1
	.byte	82
	.word	0,0
.L645:
	.word	-1,.L167,.L646-.L167,.L721-.L167
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L562:
	.word	0,0
.L665:
	.word	0,0
.L565:
	.word	0,0
.L557:
	.word	0,0
.L553:
	.word	0,0
.L551:
	.word	0,0
.L631:
	.word	0,0
.L649:
	.word	0,0
.L639:
	.word	0,0
.L561:
	.word	0,0
.L663:
	.word	0,0
.L564:
	.word	0,0
.L556:
	.word	0,0
.L575:
	.word	0,0
.L569:
	.word	0,0
.L546:
	.word	-1,.L167,.L703-.L167,.L109-.L167
	.half	1
	.byte	90
	.word	0,0
.L587:
	.word	0,0
.L571:
	.word	0,0
.L590:
	.word	0,0
.L554:
	.word	0,0
.L580:
	.word	-1,.L167,0,.L543-.L167
	.half	2
	.byte	145,120
	.word	0,0
.L585:
	.word	0,0
.L606:
	.word	0,0
.L601:
	.word	0,0
.L594:
	.word	0,0
.L626:
	.word	0,0
.L545:
	.word	-1,.L167,0,.L698-.L167
	.half	1
	.byte	85
	.word	.L108-.L167,.L110-.L167
	.half	1
	.byte	89
	.word	.L555-.L167,.L559-.L167
	.half	1
	.byte	89
	.word	.L709-.L167,.L115-.L167
	.half	1
	.byte	89
	.word	.L114-.L167,.L613-.L167
	.half	1
	.byte	89
	.word	0,0
.L643:
	.word	0,0
.L632:
	.word	0,0
.L650:
	.word	0,0
.L641:
	.word	0,0
.L628:
	.word	0,0
.L658:
	.word	0,0
.L552:
	.word	0,0
.L550:
	.word	0,0
.L630:
	.word	0,0
.L648:
	.word	0,0
.L637:
	.word	0,0
.L558:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetDtcKindOfEvent')
	.sect	'.debug_loc'
.L164:
	.word	-1,.L165,0,.L291-.L165
	.half	2
	.byte	138,0
	.word	0,0
.L294:
	.word	-1,.L165,0,.L291-.L165
	.half	1
	.byte	100
	.word	0,0
.L292:
	.word	-1,.L165,0,.L291-.L165
	.half	1
	.byte	84
	.word	0,0
.L296:
	.word	0,0
.L304:
	.word	0,0
.L299:
	.word	0,0
.L308:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetEventCategory')
	.sect	'.debug_loc'
.L162:
	.word	-1,.L163,0,.L310-.L163
	.half	2
	.byte	138,0
	.word	0,0
.L313:
	.word	-1,.L163,0,.L310-.L163
	.half	1
	.byte	100
	.word	0,0
.L311:
	.word	-1,.L163,0,.L310-.L163
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetEventTested')
	.sect	'.debug_loc'
.L159:
	.word	-1,.L60,0,.L252-.L60
	.half	2
	.byte	138,0
	.word	0,0
.L254:
	.word	-1,.L60,.L62-.L60,.L689-.L60
	.half	1
	.byte	84
	.word	.L67-.L60,.L691-.L60
	.half	1
	.byte	84
	.word	.L74-.L60,.L693-.L60
	.half	1
	.byte	84
	.word	.L82-.L60,.L64-.L60
	.half	1
	.byte	84
	.word	0,0
.L283:
	.word	0,0
.L265:
	.word	0,0
.L256:
	.word	-1,.L60,.L62-.L60,.L690-.L60
	.half	1
	.byte	100
	.word	.L67-.L60,.L692-.L60
	.half	1
	.byte	100
	.word	.L74-.L60,.L694-.L60
	.half	1
	.byte	100
	.word	.L82-.L60,.L64-.L60
	.half	1
	.byte	100
	.word	0,0
.L278:
	.word	0,0
.L272:
	.word	0,0
.L260:
	.word	0,0
.L288:
	.word	0,0
.L276:
	.word	0,0
.L270:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetEventTested_GeneralEvtInfo')
	.sect	'.debug_loc'
.L160:
	.word	-1,.L161,0,.L358-.L161
	.half	2
	.byte	138,0
	.word	0,0
.L359:
	.word	-1,.L161,0,.L695-.L161
	.half	1
	.byte	84
	.word	0,0
.L360:
	.word	-1,.L161,0,.L695-.L161
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_IsAnyInitMonitorForEventRequested')
	.sect	'.debug_loc'
.L168:
	.word	-1,.L169,0,.L314-.L169
	.half	2
	.byte	138,0
	.word	0,0
.L316:
	.word	-1,.L169,0,.L314-.L169
	.half	1
	.byte	100
	.word	0,0
.L317:
	.word	-1,.L169,0,.L314-.L169
	.half	1
	.byte	101
	.word	0,0
.L318:
	.word	-1,.L169,.L726-.L169,.L314-.L169
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_IsInitMonitorForEventRequested')
	.sect	'.debug_loc'
.L157:
	.word	-1,.L158,0,.L319-.L158
	.half	2
	.byte	138,0
	.word	0,0
.L320:
	.word	-1,.L158,0,.L319-.L158
	.half	1
	.byte	84
	.word	0,0
.L328:
	.word	0,0
.L346:
	.word	0,0
.L322:
	.word	-1,.L158,0,.L319-.L158
	.half	1
	.byte	100
	.word	0,0
.L339:
	.word	-1,.L158,.L683-.L158,.L684-.L158
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L342:
	.word	-1,.L158,.L685-.L158,.L686-.L158
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L357:
	.word	-1,.L158,.L687-.L158,.L688-.L158
	.half	1
	.byte	95
	.word	0,0
.L335:
	.word	0,0
.L353:
	.word	0,0
.L324:
	.word	0,0
.L337:
	.word	0,0
.L355:
	.word	0,0
.L333:
	.word	0,0
.L351:
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L957:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Dem_EvtSetCausal')
	.sect	'.debug_frame'
	.word	24
	.word	.L957,.L146,.L405-.L146
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Dem_EvtIsRecoverable')
	.sect	'.debug_frame'
	.word	24
	.word	.L957,.L148,.L361-.L148
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Dem_EvtClearEventAllowed')
	.sect	'.debug_frame'
	.word	24
	.word	.L957,.L150,.L402-.L150
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Dem_EvtPreInitEvents')
	.sect	'.debug_frame'
	.word	36
	.word	.L957,.L152,.L473-.L152
	.byte	4
	.word	(.L677-.L152)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L473-.L677)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_EvtInitEvents')
	.sect	'.debug_frame'
	.word	48
	.word	.L957,.L154,.L520-.L154
	.byte	8,18,8,19,8,20,8,21,8,22,8,23,4
	.word	(.L679-.L154)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L520-.L679)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_EvtResetIsoByteCallback')
	.sect	'.debug_frame'
	.word	48
	.word	.L957,.L156,.L445-.L156
	.byte	8,18,8,19,8,20,8,21,8,22,8,23,4
	.word	(.L682-.L156)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L445-.L682)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_IsInitMonitorForEventRequested')
	.sect	'.debug_frame'
	.word	20
	.word	.L957,.L158,.L319-.L158
	.byte	8,19,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Dem_GetEventTested')
	.sect	'.debug_frame'
	.word	12
	.word	.L957,.L60,.L252-.L60
	.sdecl	'.debug_frame',debug,cluster('Dem_GetEventTested_GeneralEvtInfo')
	.sect	'.debug_frame'
	.word	12
	.word	.L957,.L161,.L358-.L161
	.sdecl	'.debug_frame',debug,cluster('Dem_GetEventCategory')
	.sect	'.debug_frame'
	.word	24
	.word	.L957,.L163,.L310-.L163
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_GetDtcKindOfEvent')
	.sect	'.debug_frame'
	.word	20
	.word	.L957,.L165,.L291-.L165
	.byte	8,19,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Dem_EvtSetSuppression')
	.sect	'.debug_frame'
	.word	36
	.word	.L957,.L167,.L543-.L167
	.byte	4
	.word	(.L696-.L167)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L543-.L696)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_IsAnyInitMonitorForEventRequested')
	.sect	'.debug_frame'
	.word	20
	.word	.L957,.L169,.L314-.L169
	.byte	8,18,8,19,8,22,8,23

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   361  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   362  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   363  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.c	   364  #include "Dem_Cfg_MemMap.h"

	; Module end
