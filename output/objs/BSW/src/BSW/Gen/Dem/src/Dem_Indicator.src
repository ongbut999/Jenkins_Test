	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc15656a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Dem\\src\\Dem_Indicator.src BSW\\src\\BSW\\Gen\\Dem\\src\\indct\\Dem_Indicator.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Dem\\src\\indct\\Dem_Indicator.c'

	
$TC16X
	
	.sdecl	'.text.Dem_Indicator.Dem_SetIndicatorStatusForEvent',code,cluster('Dem_SetIndicatorStatusForEvent')
	.sect	'.text.Dem_Indicator.Dem_SetIndicatorStatusForEvent'
	.align	2
	
	.global	Dem_SetIndicatorStatusForEvent

; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	     1  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	     2  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	     3  #include "Dem.h"
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	     4  #include "Rte_Dem.h"
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	     5  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	     6  #include "Dem_EventStatus.h"
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	     7  #include "Dem_Prv_CallEvtStChngdCbk.h"
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	     8  #include "Dem_Obd.h"
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	     9  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    10  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    11  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    12  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    13  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    14  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    15  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    16  DEM_ARRAY_DEFINE(Dem_IndicatorStatus, Dem_AllIndicatorStatus, DEM_INDICATORID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    17  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    18  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    19  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    20  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    21  #endif
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    22  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    23  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    24  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    25  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    26  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    27  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    28  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    29  Std_ReturnType Dem_SetIndicatorStatusForEvent (Dem_EventIdType EventId, Dem_IndicatorIdType IndicatorId, boolean IndicatorActivation)
; Function Dem_SetIndicatorStatusForEvent
.L62:
Dem_SetIndicatorStatusForEvent:	.type	func

; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    30  {
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    31  #if(DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    32  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    33      Std_ReturnType retVal = E_NOT_OK;
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    34      Dem_EventIndicatorAttributeIterator it;
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    35      uint16_least currentIndicAttrib = 0;
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    36      uint8 indicatorBehaviour;
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    37      Dem_UdsStatusByteType statusOld, statusNew, dtcStByteOld;
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    38  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    39      if (!Dem_isIndicatorIdValid(IndicatorId) || !(Dem_isEventIdValid(EventId)))
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    40      {
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    41          return E_NOT_OK;
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    42      }
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    43  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    44      for ( Dem_EventIndicatorAttributeIteratorNew(EventId, &it);
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    45              Dem_EventIndicatorAttributeIsValid(EventId, &it);
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    46              Dem_EventIndicatorAttributeNext(&it)
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    47      )
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    48      {
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    49          currentIndicAttrib = Dem_EventIndicatorAttributeCurrent(&it);
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    50  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    51          if (Dem_IsIndicatorAttributeValid(currentIndicAttrib))
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    52          {
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    53              if (   (Dem_IndicatorAttrib_GetIndicatorId(currentIndicAttrib) == IndicatorId)
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    54                      && (Dem_IndicatorAttrib_IsApiControl(currentIndicAttrib) == TRUE)
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    55              )
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    56              {
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    57  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    58                  DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    59                  indicatorBehaviour = Dem_IndicatorAttrib_GetBehaviour(currentIndicAttrib);
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    60  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    61                  if (IndicatorActivation == TRUE)
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    62                  {
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    63                      Dem_IndicatorAttribSetHealingCycCtr(currentIndicAttrib, 0);
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    64                      Dem_IndicatorAttribSetFailureCycCtr(currentIndicAttrib, 0xFF);
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    65                      Dem_IndicatorIncrementBehaviourCounter(IndicatorId, indicatorBehaviour);
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    66                  }
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    67                  else
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    68                  {
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    69                      Dem_IndicatorAttribSetHealingCycCtr(currentIndicAttrib, 0xFF);
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    70                      Dem_IndicatorAttribSetFailureCycCtr(currentIndicAttrib, 0);
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    71                      Dem_IndicatorDecrementBehaviourCounter(IndicatorId, indicatorBehaviour);
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    72                  }
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    73                  retVal = E_OK;
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    74                  DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    75  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    76                  break;
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    77              }
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    78          }
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    79      }
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    80  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    81      DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    82      Dem_StatusChange_GetOldStatus(EventId, &statusOld, &dtcStByteOld);
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    83      statusNew = Dem_EvtGetIsoByte(EventId);
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    84  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    85      if (IndicatorActivation)
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    86      {
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    87          Dem_EvtSt_HandleIndicatorOn(EventId);
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    88      }
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    89      else
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    90      {
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    91          Dem_UpdateISO14229WIRStatus(EventId);
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    92      }
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    93  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    94      statusNew = Dem_EvtGetIsoByte(EventId);
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    95  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    96      DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    97  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    98      if (statusNew != statusOld )
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	    99      {
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   100          Dem_CallBackTriggerOnEventStatus(EventId, statusOld, statusNew, dtcStByteOld);
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   101      }
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   102  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   103      return retVal;
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   104  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   105  #else /* DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON */
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   106      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   107      DEM_UNUSED_PARAM(IndicatorId);
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   108      DEM_UNUSED_PARAM(IndicatorActivation);
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   109      return E_NOT_OK;
	mov	d2,#1
.L336:
	j	.L2

; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   110  #endif /* DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON */
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   111  }
.L2:
	ret
.L205:
	
__Dem_SetIndicatorStatusForEvent_function_end:
	.size	Dem_SetIndicatorStatusForEvent,__Dem_SetIndicatorStatusForEvent_function_end-Dem_SetIndicatorStatusForEvent
.L80:
	; End of function
	
	.sdecl	'.text.Dem_Indicator.Dem_SetWIRStatus',code,cluster('Dem_SetWIRStatus')
	.sect	'.text.Dem_Indicator.Dem_SetWIRStatus'
	.align	2
	
	.global	Dem_SetWIRStatus

; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   112  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   113  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   114  #if (DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   115  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   116  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   117  /* MR12 RULE 8.13 VIOLATION: Function defined according to AR Spec IndicatorStatus not changed if OBD is OFF */
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   118  Std_ReturnType Dem_GetIndicatorStatus(uint8 IndicatorId, Dem_IndicatorStatusType* IndicatorStatus)
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   119  {
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   120  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   121  	DEM_ENTRY_CONDITION_CHECK_DEM_INITIALIZED(DEM_DET_APIID_DEM_GETINDICATORSTATUS,E_NOT_OK);
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   122  	DEM_ENTRY_CONDITION_CHECK_NOT_NULL_PTR(IndicatorStatus,DEM_DET_APIID_DEM_GETINDICATORSTATUS,E_NOT_OK);
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   123  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   124  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   125  #if (DEM_CFG_OBD != DEM_CFG_OBD_OFF)
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   126     if (IndicatorId == DEM_OBD_CFG_MIL_INDICATOR_ID)
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   127     {
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   128        *IndicatorStatus = rba_DemObdBasic_Mil_GetIndicatorStatusExternal();
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   129        return E_OK;
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   130     }
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   131  #endif
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   132   /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   133  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   134  	if(!Dem_isIndicatorIdValid(IndicatorId))
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   135  	{
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   136  	    DEM_DET(DEM_DET_APIID_DEM_GETINDICATORSTATUS,DEM_E_WRONG_CONFIGURATION);
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   137  	    DEM_ASSERT_ISNOTLOCKED();
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   138  	    return E_NOT_OK;
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   139  	}
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   140  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   141  	*IndicatorStatus = Dem_EvtGetIndicatorStatus(IndicatorId);
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   142  	return E_OK;
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   143  }
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   144  #endif
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   145  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   146  FUNC(Std_ReturnType, Dem_CODE) Dem_SetWIRStatus (
; Function Dem_SetWIRStatus
.L64:
Dem_SetWIRStatus:	.type	func
	sub.a	a10,#8
.L240:
	mov	e8,d5,d4
.L288:

; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   147          VAR(Dem_EventIdType, AUTOMATIC) EventId,
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   148          VAR(boolean, AUTOMATIC) WIRStatus
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   149  )
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   150  {
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   151      Std_ReturnType ret_val = E_OK;
	mov	d10,#0
.L243:

; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   152  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   153      Dem_UdsStatusByteType statusOld, statusNew, dtcStByteOld;
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   154  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   155  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   156      statusOld = DEM_ISO14229BYTE_INITVALUE;
	mov	d15,#80
.L289:
	st.b	[a10],d15
.L290:

; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   157      statusNew = DEM_ISO14229BYTE_INITVALUE;
	mov	d11,#80
.L244:

; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   158      dtcStByteOld = DEM_ISO14229BYTE_INITVALUE;
	mov	d15,#80
.L291:
	st.b	[a10]1,d15

; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   159  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   160      DEM_ENTRY_CONDITION_CHECK_INIT_EVTIDVALID_EVTAVAILABLE(EventId,DEM_DET_APIID_DEM_SETWIRSTATUS,E_NOT_OK);
.L3:
.L4:
.L5:
	movh.a	a15,#@his(Dem_OpMoState)
	lea	a15,[a15]@los(Dem_OpMoState)
	ld.bu	d15,[a15]
	jeq	d15,#2,.L6
	mov	d4,#54
.L241:
	mov	d5,#0
.L242:
	mov	d6,#122
	mov	d7,#32
	call	Det_ReportError
	mov	d2,#1
	j	.L7
.L6:
.L8:
.L9:
.L10:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
	mov	d0,#0
.L247:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
	jeq	d8,#0,.L11
.L292:
	ge.u	d15,d8,#6
.L248:
	cmovn	d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
.L12:
.L11:
	j	.L13

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }      (inlined)
.L13:
	jne	d0,#0,.L14
.L96:
	mov	d4,#54
.L245:
	mov	d5,#0
.L246:
	mov	d6,#122
	mov	d7,#16
	call	Det_ReportError
	mov	d2,#1
	j	.L15
.L14:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
	movh.a	a12,#@his(Dem_AllEventsState)
	lea	a12,[a12]@los(Dem_AllEventsState)
.L16:
.L17:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
	addsc.a	a15,a12,d8,#2
.L250:
	ld.bu	d15,[a15]
.L293:
	mov	d0,#2
.L106:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L294:
	and	d15,#1
.L295:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L18

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L18:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L296:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L19

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L19:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);      (inlined)
	j	.L20

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   631  }      (inlined)
.L20:
	jeq	d15,#0,.L21
.L101:
	mov	d2,#1
	j	.L22
.L21:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
	addsc.a	a15,a12,d8,#2
.L251:
	ld.bu	d15,[a15]
.L297:
	mov	d0,#2
.L119:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L298:
	and	d15,#1
.L299:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L23

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L23:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L300:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L24

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L24:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);      (inlined)
	j	.L25

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   631  }      (inlined)
.L25:

; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   161  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   162      DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   163  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   164      if (       Dem_EvtIsSuppressed(EventId)
	jne	d15,#0,.L26
.L118:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     4  #ifndef DEM_DTCS_H
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     5  #define DEM_DTCS_H
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     8  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     9  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    10  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    11  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    12  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    13  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    14  #include "Dem_Cfg_DTC_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    15  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    16  #include "Dem_Mapping.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    17  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    18  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    19  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    20  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    22  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    23  #include "Dem_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    25  #define DEM_DTC_SETTING_ENABLED     FALSE
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    26  #define DEM_DTC_SETTING_DISABLED    TRUE
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    27  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    29  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    30  	Dem_DtcStateType state;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    31  } Dem_DtcState;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    33  /******************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    37  #define DEM_DTCS_NVSTORAGE_BP    2u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    38  #define DEM_DTCS_ALTERNATIVEDTC_FLAG_BP    3u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    40  #define DEM_DTCS_SEVERITYMASK    0xE0u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    41  #define DEM_DTCS_KINDMASK        0x03u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    42  #define DEM_DTCS_NVSTORAGEMASK   ((uint8)(1u<<DEM_DTCS_NVSTORAGE_BP))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    43  #define DEM_DTCS_ALTERNATIVEDTC_FLAG   ((uint8)(1u<<DEM_DTCS_ALTERNATIVEDTC_FLAG_BP))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    46  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    47  #define DEM_DTCS_INIT8(KIND, SEVERITY, NVSTORAGE, FUNC_UNIT, INDEXOF_ALTERNATIVE_DTCID) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    48  {   ((KIND) & (DEM_DTCS_KINDMASK))|((SEVERITY) & (DEM_DTCS_SEVERITYMASK)) | ((uint8)(((NVSTORAGE) & (0x01u)) << DEM_DTCS_NVSTORAGE_BP)) | ((uint8)((DEM_BOOL2BIT(INDEXOF_ALTERNATIVE_DTCID) & (0x01u)) << DEM_DTCS_ALTERNATIVEDTC_FLAG_BP)) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    49      ,(FUNC_UNIT) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    50  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    52  /* FC_VariationPoint_START */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    53  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    54  #define DEM_DTCS_INIT16(OBDCODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    55  {   (OBDCODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    56  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    57  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    58  /* FC_VariationPoint_END */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    60  #define DEM_DTCS_INIT32(CODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    61  {   (CODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    62  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    66  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    67     uint8 kind_severity_storage;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    68     uint8 Functional_Unit;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    69  } Dem_DtcParam8;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    71  /* FC_VariationPoint_START */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    72  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    73  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    74     uint16 ObdCode;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    75  } Dem_DtcParam16;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    76  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    77  /* FC_VariationPoint_END */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    78  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    79  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    80     Dem_DtcCodeType code;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    81  } Dem_DtcParam32;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    82  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    83  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    84      Dem_DtcCodeType AltDtccode;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    85      Dem_DtcCodeType Dtccode;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    86  }Dem_DtcAltParam;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    87  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    88  /******************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    89  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    90  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    92      DEM_ARRAY_DECLARE(Dem_DtcState, Dem_AllDTCsState, DEM_DTCID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    93  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    94  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    97  #define DEM_START_SEC_RAM_INIT
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    98  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   100      #if(DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   101      extern boolean Dem_AlternativeDTCEnabled;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   102      #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   104  #define DEM_STOP_SEC_RAM_INIT
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   105  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   107  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   108  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   110      #if (DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   111      DEM_ARRAY_DECLARE_CONST(Dem_DtcAltParam, Dem_AllAlternativeDTCsParam, DEM_ALTERNATIVE_DTCCODE_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   112      #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   114  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   115  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   117  /********DTC SUPPRESSION************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   118  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressed (Dem_DtcIdType dtcId)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   119  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   120  #if (DEM_CFG_SUPPRESSION != DEM_NO_SUPPRESSION)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   121      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   122  #else
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   123      DEM_UNUSED_PARAM(dtcId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   124      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   128  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressedDirectly (Dem_DtcIdType dtcId)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   130  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   131      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED_DIRECTLY);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   132  #else
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   133      DEM_UNUSED_PARAM(dtcId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   134      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   136  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   138  DEM_INLINE Dem_boolean_least Dem_DtcIsSupported (Dem_DtcIdType dtcID)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   139  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   141              && (!Dem_DtcIsSuppressed(dtcID))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   142      );
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   143  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   145  #if ((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   146  DEM_INLINE void Dem_DtcHandleEventSuppression (Dem_DtcIdType dtcId, Dem_boolean_least eventUnsuppressed)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   148      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   150      if (!Dem_DtcIsSuppressedDirectly(dtcId))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   151      {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   152          Dem_EventIdListIterator it;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   153  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   154          if (!eventUnsuppressed)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   155          {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   156              for (Dem_EventIdListIteratorNewFromDtcId(&it, dtcId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   157                      Dem_EventIdListIteratorIsValid(&it);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   158                      Dem_EventIdListIteratorNext(&it))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   159              {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   160                  if ( !Dem_EvtIsSuppressed(Dem_EventIdListIteratorCurrent(&it)) )
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   161                  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   162                      eventUnsuppressed = TRUE;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   163                      break;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   164                  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   165              }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   166          }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   167  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   168          DEM_DTCSTATE_OVERWRITEBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED, !eventUnsuppressed);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   169      }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   170  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   173  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   174  DEM_INLINE void Dem_DtcSuppressionApply (Dem_DtcIdType dtcId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   176  	DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   177  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   178  	DEM_DTCSTATE_OVERWRITEBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED_DIRECTLY, setBit);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   179  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   180  	if (setBit)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   181  	{
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   182  	    DEM_DTCSTATE_SETBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   183  	}
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   184  	else
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   185  	{
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   186  # if (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   187  	    Dem_DtcHandleEventSuppression (dtcId, FALSE);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   188  # else
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   189  	    DEM_DTCSTATE_CLEARBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   190  # endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   191  	}
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   193  	DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   194  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   195  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   197  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   198  DEM_INLINE Dem_boolean_least Dem_IsEventMemoryEntryExistForDTC (Dem_DtcIdType dtcId)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   199  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   200  	uint8 DtcStatusByte = Dem_DtcStatusByteRetrieve(dtcId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   202  	/**
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   203  	 * Checking, whether TestFailed or TestFailedSLC bit is set
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   204  	 * (To make sure that corresponding DTC already processed and available in Event memory)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   205  	 */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   206  	if(Dem_ISO14229ByteIsTestFailed(DtcStatusByte) || Dem_ISO14229ByteIsTestFailedSLC(DtcStatusByte))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   207  	{
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   208  		return TRUE;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   209  	}
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   210  	else
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   211  	{
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   212  		return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   213  	}
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   214  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   215  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   217  /***********************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   219  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   220  /*-- DTC CODE ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   222  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   223  DEM_INLINE Dem_DtcCodeType Dem_GetDtcCode (Dem_DtcIdType dtcId)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   224  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   225  #if (DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   226      if(Dem_Cfg_Dtc_GetDtcCode_Is_Index(dtcId))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   227      {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   228          if (Dem_AlternativeDTCEnabled)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   229          {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   230              return Dem_AllAlternativeDTCsParam[Dem_Cfg_Dtc_GetDtcCode(dtcId)].AltDtccode;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   231          }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   232          else
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   233          {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   234              return Dem_AllAlternativeDTCsParam[Dem_Cfg_Dtc_GetDtcCode(dtcId)].Dtccode;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   235          }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   236      }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   237      else
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   238  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   239      {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   240          return Dem_Cfg_Dtc_GetDtcCode(dtcId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   241      }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   242  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   244  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   245  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   247  /* FC_VariationPoint_START */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   248  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   250  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   251  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   252  /* FC_VariationPoint_END */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   253  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   254  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   256  Dem_DtcIdType Dem_DtcIdFromDtcCode (Dem_DtcCodeType dtcCode);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   257  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   258  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   259  /* Duplicate of Dem_GetDTCOfEvent to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   260  Std_ReturnType Dem_GetDTCOfEvent_GeneralEvtInfo(Dem_EventIdType EventId, Dem_DTCFormatType DTCFormat, uint32* DTCOfEvent);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   261  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   262  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   263  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   264  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   265  DEM_INLINE Dem_boolean_least Dem_EventUsesOrigin (Dem_EventIdType eventId, Dem_DTCOriginType origin)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   266  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   267  	if (   ((origin == DEM_DTC_ORIGIN_PRIMARY_MEMORY) && Dem_EvtParam_GetEventIsStoredInPrimary(eventId))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   268  			|| ((origin == DEM_DTC_ORIGIN_SECONDARY_MEMORY) && Dem_EvtParam_GetEventIsStoredInSecondary(eventId))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   269  			|| ((origin == DEM_DTC_ORIGIN_MIRROR_MEMORY) && Dem_EvtParam_GetEventIsStoredInMirror(eventId))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   270  /* FC_VariationPoint_START */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   271  #if (DEM_CFG_OBD != DEM_CFG_OBD_OFF)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   272  			|| ((origin == DEM_DTC_ORIGIN_PERMANENT_MEMORY) && (Dem_Cfg_Dtc_GetKind(Dem_DtcIdFromEventId(eventId)) == DEM_DTC_KIND_EMISSION_REL_DTCS))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   273  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   274  /* FC_VariationPoint_END */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   275  	)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   276  	{
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   277  		return TRUE;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   278  	}
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   279  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   280  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   282  DEM_INLINE Dem_boolean_least Dem_DtcUsesOrigin (Dem_DtcIdType dtcId, Dem_DTCOriginType origin)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   283  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   284      Dem_EventIdType eventId = Dem_DtcIdGetFirstEventId(dtcId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   285      return Dem_EventUsesOrigin(eventId, origin);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   286  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   288  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   289  /*************************Enable & DiableDTCGroup****************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   290  void Dem_DtcSetDTCSetting (Dem_DtcIdType dtcId, Dem_boolean_least setBit);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   292  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   293  DEM_INLINE Dem_boolean_least Dem_DtcIsDTCSettingEnabled(Dem_DtcIdType dtcId)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   294  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   295  	return (!(DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_GROUP_DTCSETTING_DISABLED)));
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   296  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   297  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   298  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   299  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   300  /*************************CheckDTCSettingStatus****************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   301  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   302  Dem_boolean_least Dem_IsEventEnabledByDtcSetting(Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   304  DEM_INLINE Dem_boolean_least Dem_IsEventReportingEnabledByDtcSetting(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   305  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   306  #if (DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   307      return Dem_IsEventEnabledByDtcSetting(EventId);
	mov	d4,d8
.L252:
	call	Dem_IsEventEnabledByDtcSetting
.L249:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   307      return Dem_IsEventEnabledByDtcSetting(EventId);      (inlined)
	j	.L27

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   312  }      (inlined)
.L27:

; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   165              || !Dem_IsEventReportingEnabledByDtcSetting(EventId)
	jne	d2,#0,.L28
.L26:

; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   166      )
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   167      {
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   168          ret_val = E_NOT_OK;
	mov	d10,#1
.L301:
	j	.L29
.L28:

; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   169      }
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   170      else
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   171      {
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   172          if (WIRStatus)
	jeq	d9,#0,.L30
.L253:

; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   173          {
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   174              /*Set Bit corresponding to WIRStatus as TRUE within Dem_AllEventsState[EventId].state
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   175                  Invoke Dem_EvtSetWIR to set WIRStatus bit for that event*/
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   176  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   177              Dem_StatusChange_GetOldStatus(EventId, &statusOld, &dtcStByteOld);
	mov	d15,d8
.L254:
	lea	a15,[a10]0
.L302:
	lea	a2,[a10]1
.L125:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     4  #ifndef DEM_EVENTSTATUS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     5  #define DEM_EVENTSTATUS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     7  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     9  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    10  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    11  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    12  #include "Dem_Cfg_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    13  #include "Dem_Cfg_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    14  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    19  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    20  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    22  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    23  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    24  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    25  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    27  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    28  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    30  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    31  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    32  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    34  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    35  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    38  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    39  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    40  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    41  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    42  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    43  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];
	movh.a	a4,#@his(Dem_AllEventsStatusByte)
	lea	a4,[a4]@los(Dem_AllEventsStatusByte)
.L303:
	addsc.a	a5,a4,d15,#0
	ld.bu	d15,[a5]
.L304:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];      (inlined)
	j	.L31

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }      (inlined)
.L31:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     3  #ifndef DEM_PRV_CALLEVTSTCHNGDCBK_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     4  #define DEM_PRV_CALLEVTSTCHNGDCBK_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     6  #if(DEM_CFG_TRIGGERFIMREPORTS == DEM_CFG_TRIGGERFIMREPORTS_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     7  #include "FiM.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     8  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     9  #if (DEM_CFG_TRIGGERDLTREPORTS == DEM_CFG_TRIGGERDLTREPORTS_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    10  #include "Dlt.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    11  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    12  #include "Dem_DTCs.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    13  #include "Dem_Cfg_EventsCallback.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    14  #include "Dem_EventStatus.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    17  DEM_INLINE void Dem_CallBackTriggerOnEventStatus (
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    18  		Dem_EventIdType EventId,
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    19  		Dem_UdsStatusByteType EventStatusOld,
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    20  		Dem_UdsStatusByteType EventStatusNew,
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    21  		Dem_UdsStatusByteType dtcStByteOld
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    22  )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    23  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    24  #if ( DEM_CFG_DTC_STATUSCHANGEDCALLBACK == DEM_CFG_DTC_STATUSCHANGEDCALLBACK_ON )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    25      Dem_DtcIdType dtcId;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    26      Dem_UdsStatusByteType dtcStByteNew;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    27      Dem_DtcCodeType dtcCode;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    28  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    30      DEM_ASSERT_ISNOTLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    31      DEM_UNUSED_PARAM(dtcStByteOld);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    32      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    33      DEM_UNUSED_PARAM(EventStatusOld);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    34      DEM_UNUSED_PARAM(EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    36  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    37      Dem_CallEventStatusChangedCallBack(EventId, EventStatusOld, EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    39  #if ( DEM_CFG_TRIGGERDLTREPORTS == DEM_CFG_TRIGGERDLTREPORTS_ON )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    40      Dlt_DemTriggerOnEventStatus(EventId, EventStatusOld, EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    41  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    42  #if ( DEM_CFG_DTC_STATUSCHANGEDCALLBACK == DEM_CFG_DTC_STATUSCHANGEDCALLBACK_ON )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    43      if ( Dem_EventIdIsDtcAssigned(EventId) )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    44      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    45          dtcId = Dem_DtcIdFromEventId(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    46          if ( Dem_DtcIsSupported(dtcId) )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    47          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    48              dtcStByteNew = (uint8)(Dem_DtcStatusByteRetrieve (dtcId) & DEM_CFG_DTCSTATUS_AVAILABILITYMASK);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    49              if (dtcStByteNew != dtcStByteOld)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    50              {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    51                  dtcCode = Dem_GetDtcCode(dtcId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    52                  Dem_CallbackDTCStatusChangedIndication( dtcCode, dtcStByteOld, dtcStByteNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    53              }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    54          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    55      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    56  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    57  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    59  DEM_INLINE void Dem_StatusChange_GetOldStatus (
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    60  		Dem_EventIdType EventId,
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    61  		Dem_UdsStatusByteType *isoByteOld,
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    62  		Dem_UdsStatusByteType *dtcStByteOld
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    63  )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    64  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    65  #if ( DEM_CFG_DTC_STATUSCHANGEDCALLBACK == DEM_CFG_DTC_STATUSCHANGEDCALLBACK_ON )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    66  	Dem_DtcIdType dtcId;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    67  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    68  	*(isoByteOld) = Dem_EvtGetIsoByte(EventId);
	st.b	[a15],d15
.L305:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    69      *dtcStByteOld = 0;
	mov	d15,#0
.L306:
	st.b	[a2],d15
.L126:

; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   178              statusNew = statusOld;
	ld.bu	d11,[a10]
.L307:

; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   179              Dem_EvtSetWIRExtern(EventId, TRUE);
	mov	d15,#1
.L139:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
	addsc.a	a15,a12,d8,#2
.L255:
	mov	d0,#6
.L146:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
	jeq	d15,#0,.L32
.L155:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
	mov	d15,#1
.L256:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
	ld.bu	d1,[a15]
.L308:
	sha	d15,d15,d0
.L257:
	or	d1,d15
	st.b	[a15],d1
.L156:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);      (inlined)
	j	.L33

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
.L32:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
	mov	d15,#1
.L258:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
	ld.bu	d1,[a15]
.L309:
	sha	d15,d15,d0
.L259:
	xor	d15,d15,#255
.L310:
	and	d1,d15
	st.b	[a15],d1

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else      (inlined)
.L33:

; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   180              if (!Dem_ISO14229ByteIsWarningIndicatorRequested(statusOld))
	ld.bu	d15,[a10]
.L171:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     4  #ifndef DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     5  #define DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     8  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    11  /* Refer to Dem_UdsStatusByteType */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    14  #define DEM_ISO14229_TESTFAILED             0u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    15  #define DEM_ISO14229_TESTFAILED_TOC         1u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    16  #define DEM_ISO14229_TESTFAILED_SLC         5u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    17  #define DEM_ISO14229_TESTNOTCOMPLETE_TOC    6u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    18  #define DEM_ISO14229_TESTNOTCOMPLETE_SLC    4u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    19  #define DEM_ISO14229_PENDINGDTC             2u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    20  #define DEM_ISO14229_CONFIRMEDDTC           3u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    21  #define DEM_ISO14229_WARNINGINDICATOR       7u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    23  #define DEM_ISO14229_BM_TESTFAILED             (1u<<DEM_ISO14229_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    24  #define DEM_ISO14229_BM_TESTFAILED_TOC         (1u<<DEM_ISO14229_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    25  #define DEM_ISO14229_BM_TESTFAILED_SLC         (1u<<DEM_ISO14229_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    26  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    27  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    28  #define DEM_ISO14229_BM_PENDINGDTC             (1u<<DEM_ISO14229_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    29  #define DEM_ISO14229_BM_CONFIRMEDDTC           (1u<<DEM_ISO14229_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    30  #define DEM_ISO14229_BM_WARNINGINDICATOR       (1u<<DEM_ISO14229_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    32  #if (DEM_ISO14229_BM_TESTFAILED           !=  DEM_UDS_STATUS_TF)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    33  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    34  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    36  #if (DEM_ISO14229_BM_TESTFAILED_TOC       !=  DEM_UDS_STATUS_TFTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    37  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    40  #if (DEM_ISO14229_BM_TESTFAILED_SLC       !=  DEM_UDS_STATUS_TFSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    41  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    42  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    44  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC  !=  DEM_UDS_STATUS_TNCTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    45  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    46  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    48  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC  !=  DEM_UDS_STATUS_TNCSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    49  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    52  #if (DEM_ISO14229_BM_PENDINGDTC           !=  DEM_UDS_STATUS_PDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    53  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    54  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    56  #if (DEM_ISO14229_BM_CONFIRMEDDTC         !=  DEM_UDS_STATUS_CDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    57  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    60  #if (DEM_ISO14229_BM_WARNINGINDICATOR     !=  DEM_UDS_STATUS_WIR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    61  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    62  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    66  #define DEM_ISO14229BYTE_INITVALUE            		( (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)|(DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC) )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    67  #define DEM_ISO14229BYTE_MASK_PENDING_CONFIRMED     ( DEM_ISO14229_BM_PENDINGDTC | DEM_ISO14229_BM_CONFIRMEDDTC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    68  /*#define DEM_ISO14229BYTE_MASK_FAILED_COMPLETE_WIR   ( DEM_ISO14229_BM_TESTFAILED | DEM_ISO14229_BM_TESTFAILED_TOC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    69                                                        | DEM_ISO14229_BM_TESTFAILED_SLC | DEM_ISO14229_BM_WARNINGINDICATOR \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    70                                                        | DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC | DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    71   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    73  #define DEM_ISO14229BYTE_MASK_INDICATOR_OFF			(DEM_ISO14229_BM_CONFIRMEDDTC | DEM_ISO14229_BM_TESTFAILED \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    74                                                        | DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    76  #define DEM_ISO14229BYTE_MASK_TESTFAILEDSINCELASTCLEAR     ( DEM_ISO14229_BM_TESTFAILED_SLC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    78  #if (DEM_UDS_STATUS_TF     != DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    79  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    80  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    81  #if (DEM_UDS_STATUS_TFTOC  != DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    82  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    84  #if (DEM_UDS_STATUS_PDTC   != DEM_ISO14229_BM_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    85  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    86  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    87  #if (DEM_UDS_STATUS_CDTC   != DEM_ISO14229_BM_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    88  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    89  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    90  #if (DEM_UDS_STATUS_TNCSLC != DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    91  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    93  #if (DEM_UDS_STATUS_TFSLC  != DEM_ISO14229_BM_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    94  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    95  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    96  #if (DEM_UDS_STATUS_TNCTOC != DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    97  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    98  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    99  #if (DEM_UDS_STATUS_WIR    != DEM_ISO14229_BM_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   100  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   101  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   108  /*
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   109   * concept idea for triggering storage to NVM for single status bytes
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   110   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   111  #define DEM_ISO14229BYTE_NVMTRIGGER(STATUSBITSTORAGETESTFAILED, OPERATIONCYCLE_IS_PC) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   112          (0|DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   113                  |DEM_ISO14229_BM_TESTFAILED_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   114                  |(DEM_ISO14229_BM_TESTFAILED*(STATUSBITSTORAGETESTFAILED)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   115                  |(DEM_ISO14229_BM_TESTFAILED_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   116                  |(DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   117          )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   120  /* query functions */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   122  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailed (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   128  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   129  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   130  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   131      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   132  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   136  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   137  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   138      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   139  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   143  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   145      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   146  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   148  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   150  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   152      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   153  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   154  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   157  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   159      return !rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   164  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsPendingDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   165  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   166      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_PENDINGDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   167  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   171  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsConfirmedDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   172  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   173      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_CONFIRMEDDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   174  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   176  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   177  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsWarningIndicatorRequested (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   178  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   179      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_WARNINGINDICATOR);
	mov	d0,#7
.L176:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L311:
	and	d15,#1
.L312:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L34

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L34:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L313:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L35

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L35:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   179      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_WARNINGINDICATOR);      (inlined)
	j	.L36

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   180  }      (inlined)
.L36:
	jne	d15,#0,.L37
.L172:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     4  #ifndef DEM_EVENTSTATUS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     5  #define DEM_EVENTSTATUS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     7  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     9  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    10  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    11  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    12  #include "Dem_Cfg_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    13  #include "Dem_Cfg_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    14  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    19  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    20  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    22  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    23  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    24  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    25  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    27  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    28  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    30  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    31  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    32  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    34  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    35  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    38  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    39  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    40  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    41  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    42  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    43  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    46  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    47  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetCustIsoByte (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    48  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    49      return Dem_AllEventsStatusByteCust[EventId];
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    50  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    51  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    53  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    54  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    57  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    58  #include "Dem_CustomStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    59  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    61  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    62  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    63  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    66  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    67  #define DEM_STATUSBYTE_EVENT_UNAVAILABLE                   (0x00)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    68  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_SETMASK          (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    69  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_CLEARMASK        (DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    71  #define DEM_INIT_ISOBITS_CLEARMASK									(DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    75  void Dem_EventStatusInitCheckNvM(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    76  void Dem_ClearEvent(Dem_EventIdType eventId, boolean ClearFully);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    77  void Dem_EvtAdvanceOperationCycle(Dem_OperationCycleList operationCycleList);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    78  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    79  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    80  /* Duplicate of Dem_GetEventStatus to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    81  Std_ReturnType Dem_GetEventStatus_GeneralEvtInfo(Dem_EventIdType EventId, Dem_UdsStatusByteType* EventStatusExtended);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    82  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    85  DEM_INLINE void Dem_InitEventStatusTestFailed(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    87  #if (!DEM_CFG_EVMEM_STORAGE_TESTFAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    88  	Dem_EventIdIterator eventIt;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    89  	Dem_EventIdType eventId;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    90  	Dem_UdsStatusByteType statusNew;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    92  	for (Dem_EventIdIteratorNew(&eventIt); Dem_EventIdIteratorIsValid(&eventIt); Dem_EventIdIteratorNext(&eventIt))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    93  	{
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    94  		eventId = Dem_EventIdIteratorCurrent(&eventIt);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    95  		statusNew = Dem_EvtGetIsoByte(eventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    96  		if (!Dem_EvtParam_GetStoreTestFailedToNextOC(eventId))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    97  		{
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    98  			statusNew &= (Dem_UdsStatusByteType)(~DEM_INIT_ISOBITS_CLEARMASK);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    99  		}
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   100  		Dem_AllEventsStatusByte[eventId] = statusNew;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   101  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   102  		Dem_AllEventsStatusByteCust[eventId] = statusNew;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   103  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   104  	}
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   105  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   108  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   109  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte4DtcCalculation (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   110  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   111  #if !DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   112      return Dem_AllEventsStatusByte[EventId];
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   113  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   114      return Dem_AllEventsStatusByteCust[EventId];
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   115  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   116  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   119  /*
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   120   * Called in Dem_EvtProcessPassedAndFailed() to check whether the reported status would change the event status information
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   121   */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   122  DEM_INLINE Dem_boolean_least Dem_EvtSt_IsUpdateNeeded(Dem_EventIdType EventId, Dem_boolean_least reportIsFailed)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   124      return (
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   125             (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetIsoByte(EventId)) != reportIsFailed)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   126          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetIsoByte(EventId)))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   128  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   129          || (reportIsFailed && !Dem_EvtGetTestFailedTFCSincePreinit(EventId))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   130          || (!Dem_EvtGetTestCompleteTFCSincePreinit(EventId))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   131  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   132  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   133  #if (DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   134          || (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetCustIsoByte(EventId)) != reportIsFailed)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   135          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetCustIsoByte(EventId)))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   136  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   137      );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   138  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   139  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   141  DEM_INLINE void Dem_EvtSt_HandleInitialization (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   142  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   143      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   145      /* We don't need to reset Test*TFCSincePreinit here because it is already properly initialized by static
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   146       * initialization with zeros on ECU startup */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   148  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   149      Dem_EvtSt_CustomInitialization(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   150  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   151  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   152  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   153  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   154  DEM_INLINE void Dem_EvtSt_HandleFailed(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   155  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   156      Dem_ISO14229ByteSetTestFailed (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   157      Dem_ISO14229ByteSetTestFailedTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   158      Dem_ISO14229ByteSetTestFailedSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   159      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   160      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   161      /* only valid with failurecycle=operationcycle
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   162      Dem_ISO14229ByteSetPendingDTC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   163      */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   164  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   165  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   166      Dem_EvtSetTestFailedTFCSincePreinit(EventId, TRUE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   167      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, TRUE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   168  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   170  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   171      Dem_EvtSt_CustomFailed(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   175  DEM_INLINE void Dem_EvtSt_HandlePassed(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   176  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   177      Dem_ISO14229ByteSetTestFailed (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   178      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   179      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   180  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   181  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   182      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, TRUE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   183  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   184  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   185  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   186      Dem_EvtSt_CustomPassed(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   187  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   188  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   190  DEM_INLINE void Dem_EvtSt_HandleResetEventStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   191  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   192      Dem_ISO14229ByteSetTestFailed(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   193  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   194      Dem_EvtSt_CustomResetEventStatus(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   195  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   198  DEM_INLINE void Dem_EvtSt_HandleEvtAvailable(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   199  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   200      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   201  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   202      Dem_EvtSt_CustomEvtAvailable(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   203  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   204  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   205  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   206  DEM_INLINE void Dem_EvtSt_HandleEvtNotAvailable(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   207  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   208      Dem_AllEventsStatusByte[EventId] = DEM_STATUSBYTE_EVENT_UNAVAILABLE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   209  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   210      Dem_EvtSt_CustomEvtNotAvailable(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   211  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   212  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   213  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   214  DEM_INLINE void Dem_EvtSt_HandleClear(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   215  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   216  #if DEM_CFG_CLEARDTCCLEARSALLBITS
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   217      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   218  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   219      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   220      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   221      Dem_ISO14229ByteSetTestFailedTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   222      Dem_ISO14229ByteSetTestFailedSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   223      Dem_ISO14229ByteSetPendingDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   224      Dem_ISO14229ByteSetConfirmedDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   225      if(!(Dem_ISO14229ByteIsTestFailed(Dem_AllEventsStatusByte[EventId])))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   226      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   227          Dem_ISO14229ByteSetWarningIndicatorRequested(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   228      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   229  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   231  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   232      Dem_EvtSetTestFailedTFCSincePreinit(EventId, FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   233      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   234  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   235  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   236  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   237      Dem_EvtSt_CustomClear(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   238  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   239  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   240  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   241  DEM_INLINE void Dem_EvtSt_HandleClear_OnlyThisCycleAndReadiness(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   242  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   243      Dem_ISO14229ByteSetTestFailedTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   244      Dem_ISO14229ByteSetTestFailedSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   245      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   246      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   247  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   248  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   249      Dem_EvtSt_CustomClear_OnlyThisCycleAndReadiness(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   250  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   252      /* Hint : As Events mapped to OBD DTCs are not allowed to configure ClearAllowedBehavior as ONLY_THIS_CYCLE_AND_READINESS,
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   253       * no additional functions are called when DEM_CFG_OBD == DEM_CFG_OBD_ON */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   256  DEM_INLINE void Dem_EvtSt_HandleNewOperationCycle(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   258      if(!Dem_EvtIsSuppressed(EventId))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   259      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   260          /* only valid with failurecycle=operationcycle
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   261      if (Dem_ISO14229ByteIsTestCompleteTOC(Dem_AllEventsStatusByte[EventId]) && !Dem_ISO14229ByteIsTestFailedTOC(Dem_AllEventsStatusByte[EventId]))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   262      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   263          Dem_ISO14229ByteSetPendingDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   264      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   265           */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   266          Dem_AllEventsStatusByte[EventId] &= (Dem_UdsStatusByteType)(~DEM_STATUSBYTE_NEW_OPERATIONCYCLE_CLEARMASK);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   267          Dem_AllEventsStatusByte[EventId] |= DEM_STATUSBYTE_NEW_OPERATIONCYCLE_SETMASK;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   268  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   269          Dem_EvtSt_CustomNewOperationCycle(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   270  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   271      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   272  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   273  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   274  DEM_INLINE void Dem_EvtSt_HandleNewFailureCycle(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   275  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   276  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   277      Dem_EvtSetTestFailedTFCSincePreinit(EventId, FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   278      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   279  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   280      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   281  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   282  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   283  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   284  DEM_INLINE void Dem_EvtSt_HandleIndicatorOn(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   285  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   286      Dem_ISO14229ByteSetWarningIndicatorRequested(&(Dem_AllEventsStatusByte[EventId]), TRUE);
	addsc.a	a15,a4,d8,#0
.L260:
	mov	d15,#1
.L182:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     4  #ifndef DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     5  #define DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     8  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    11  /* Refer to Dem_UdsStatusByteType */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    14  #define DEM_ISO14229_TESTFAILED             0u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    15  #define DEM_ISO14229_TESTFAILED_TOC         1u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    16  #define DEM_ISO14229_TESTFAILED_SLC         5u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    17  #define DEM_ISO14229_TESTNOTCOMPLETE_TOC    6u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    18  #define DEM_ISO14229_TESTNOTCOMPLETE_SLC    4u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    19  #define DEM_ISO14229_PENDINGDTC             2u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    20  #define DEM_ISO14229_CONFIRMEDDTC           3u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    21  #define DEM_ISO14229_WARNINGINDICATOR       7u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    23  #define DEM_ISO14229_BM_TESTFAILED             (1u<<DEM_ISO14229_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    24  #define DEM_ISO14229_BM_TESTFAILED_TOC         (1u<<DEM_ISO14229_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    25  #define DEM_ISO14229_BM_TESTFAILED_SLC         (1u<<DEM_ISO14229_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    26  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    27  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    28  #define DEM_ISO14229_BM_PENDINGDTC             (1u<<DEM_ISO14229_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    29  #define DEM_ISO14229_BM_CONFIRMEDDTC           (1u<<DEM_ISO14229_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    30  #define DEM_ISO14229_BM_WARNINGINDICATOR       (1u<<DEM_ISO14229_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    32  #if (DEM_ISO14229_BM_TESTFAILED           !=  DEM_UDS_STATUS_TF)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    33  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    34  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    36  #if (DEM_ISO14229_BM_TESTFAILED_TOC       !=  DEM_UDS_STATUS_TFTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    37  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    40  #if (DEM_ISO14229_BM_TESTFAILED_SLC       !=  DEM_UDS_STATUS_TFSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    41  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    42  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    44  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC  !=  DEM_UDS_STATUS_TNCTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    45  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    46  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    48  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC  !=  DEM_UDS_STATUS_TNCSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    49  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    52  #if (DEM_ISO14229_BM_PENDINGDTC           !=  DEM_UDS_STATUS_PDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    53  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    54  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    56  #if (DEM_ISO14229_BM_CONFIRMEDDTC         !=  DEM_UDS_STATUS_CDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    57  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    60  #if (DEM_ISO14229_BM_WARNINGINDICATOR     !=  DEM_UDS_STATUS_WIR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    61  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    62  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    66  #define DEM_ISO14229BYTE_INITVALUE            		( (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)|(DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC) )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    67  #define DEM_ISO14229BYTE_MASK_PENDING_CONFIRMED     ( DEM_ISO14229_BM_PENDINGDTC | DEM_ISO14229_BM_CONFIRMEDDTC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    68  /*#define DEM_ISO14229BYTE_MASK_FAILED_COMPLETE_WIR   ( DEM_ISO14229_BM_TESTFAILED | DEM_ISO14229_BM_TESTFAILED_TOC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    69                                                        | DEM_ISO14229_BM_TESTFAILED_SLC | DEM_ISO14229_BM_WARNINGINDICATOR \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    70                                                        | DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC | DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    71   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    73  #define DEM_ISO14229BYTE_MASK_INDICATOR_OFF			(DEM_ISO14229_BM_CONFIRMEDDTC | DEM_ISO14229_BM_TESTFAILED \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    74                                                        | DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    76  #define DEM_ISO14229BYTE_MASK_TESTFAILEDSINCELASTCLEAR     ( DEM_ISO14229_BM_TESTFAILED_SLC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    78  #if (DEM_UDS_STATUS_TF     != DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    79  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    80  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    81  #if (DEM_UDS_STATUS_TFTOC  != DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    82  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    84  #if (DEM_UDS_STATUS_PDTC   != DEM_ISO14229_BM_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    85  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    86  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    87  #if (DEM_UDS_STATUS_CDTC   != DEM_ISO14229_BM_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    88  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    89  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    90  #if (DEM_UDS_STATUS_TNCSLC != DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    91  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    93  #if (DEM_UDS_STATUS_TFSLC  != DEM_ISO14229_BM_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    94  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    95  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    96  #if (DEM_UDS_STATUS_TNCTOC != DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    97  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    98  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    99  #if (DEM_UDS_STATUS_WIR    != DEM_ISO14229_BM_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   100  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   101  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   108  /*
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   109   * concept idea for triggering storage to NVM for single status bytes
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   110   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   111  #define DEM_ISO14229BYTE_NVMTRIGGER(STATUSBITSTORAGETESTFAILED, OPERATIONCYCLE_IS_PC) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   112          (0|DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   113                  |DEM_ISO14229_BM_TESTFAILED_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   114                  |(DEM_ISO14229_BM_TESTFAILED*(STATUSBITSTORAGETESTFAILED)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   115                  |(DEM_ISO14229_BM_TESTFAILED_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   116                  |(DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   117          )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   120  /* query functions */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   122  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailed (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   128  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   129  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   130  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   131      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   132  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   136  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   137  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   138      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   139  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   143  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   145      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   146  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   148  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   150  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   152      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   153  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   154  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   157  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   159      return !rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   164  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsPendingDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   165  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   166      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_PENDINGDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   167  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   171  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsConfirmedDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   172  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   173      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_CONFIRMEDDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   174  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   176  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   177  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsWarningIndicatorRequested (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   178  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   179      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_WARNINGINDICATOR);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   180  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   181  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   183  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   184  /* set methods */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   186  DEM_INLINE void Dem_ISO14229ByteSetTestFailed (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   187  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   188      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   189  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   193  DEM_INLINE void Dem_ISO14229ByteSetTestFailedTOC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   195      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED_TOC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   199  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   200  DEM_INLINE void Dem_ISO14229ByteSetTestFailedSLC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   201  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   202      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED_SLC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   203  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   205  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   207  DEM_INLINE void Dem_ISO14229ByteSetTestNotCompleteTOC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   209      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   212  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   213  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   214  DEM_INLINE void Dem_ISO14229ByteSetTestCompleteTOC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   215  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   216      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC, !setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   217  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   219  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   220  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   221  DEM_INLINE void Dem_ISO14229ByteSetTestCompleteSLC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   222  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   223      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTNOTCOMPLETE_SLC, !setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   224  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   225  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   227  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   228  DEM_INLINE void Dem_ISO14229ByteSetPendingDTC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   229  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   230      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_PENDINGDTC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   231  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   233  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   235  DEM_INLINE void Dem_ISO14229ByteSetConfirmedDTC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   236  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   237      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_CONFIRMEDDTC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   238  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   239  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   240  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   242  DEM_INLINE void Dem_ISO14229ByteSetWarningIndicatorRequested (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   244      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_WARNINGINDICATOR, setOrReset);
	mov	d0,#7
.L188:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
	jeq	d15,#0,.L38
.L189:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
	mov	d15,#1
.L261:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
	ld.bu	d1,[a15]
.L314:
	sha	d15,d15,d0
.L262:
	or	d1,d15
	st.b	[a15],d1
.L190:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);      (inlined)
	j	.L39

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
.L38:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
	mov	d15,#1
.L263:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
	ld.bu	d1,[a15]
.L315:
	sha	d15,d15,d0
.L264:
	xor	d15,d15,#255
.L316:
	and	d1,d15
	st.b	[a15],d1

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else      (inlined)
.L39:
	addsc.a	a15,a4,d8,#0
.L265:
	ld.bu	d11,[a15]
.L317:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];      (inlined)
	j	.L40

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }      (inlined)
.L40:
.L37:
	j	.L41
.L30:

; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   181              {
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   182                  Dem_EvtSt_HandleIndicatorOn(EventId);
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   183                  statusNew = Dem_EvtGetIsoByte(EventId);
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   184  #if (DEM_CFG_TRIGGERFIMREPORTS == DEM_CFG_TRIGGERFIMREPORTS_ON)
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   185                  FiM_DemTriggerOnEventStatus (EventId, statusOld, statusNew);
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   186  #endif
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   187              }
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   188          }
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   189          else
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   190          {
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   191              /*Set Bit corresponding to WIRStatus as FALSE within Dem_AllEventsState[EventId].state*/
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   192              Dem_EvtSetWIRExtern(EventId, FALSE);
	mov	d15,#0
.L193:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
	addsc.a	a15,a12,d8,#2
.L266:
	mov	d0,#6
.L194:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
	jeq	d15,#0,.L42
.L195:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
	mov	d15,#1
.L267:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
	ld.bu	d1,[a15]
.L318:
	sha	d15,d15,d0
.L268:
	or	d1,d15
	st.b	[a15],d1
.L196:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);      (inlined)
	j	.L43

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
.L42:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
	mov	d15,#1
.L269:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
	ld.bu	d1,[a15]
.L319:
	sha	d15,d15,d0
.L270:
	xor	d15,d15,#255
.L320:
	and	d1,d15
	st.b	[a15],d1

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else      (inlined)
.L43:

; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   193              Dem_StatusChange_GetOldStatus(EventId, &statusOld, &dtcStByteOld);
	mov	d15,d8
.L271:
	lea	a15,[a10]0
.L321:
	lea	a2,[a10]1
.L199:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     4  #ifndef DEM_EVENTSTATUS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     5  #define DEM_EVENTSTATUS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     7  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     9  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    10  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    11  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    12  #include "Dem_Cfg_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    13  #include "Dem_Cfg_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    14  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    19  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    20  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    22  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    23  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    24  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    25  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    27  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    28  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    30  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    31  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    32  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    34  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    35  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    38  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    39  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    40  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    41  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    42  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    43  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];
	movh.a	a12,#@his(Dem_AllEventsStatusByte)
	lea	a12,[a12]@los(Dem_AllEventsStatusByte)
.L322:
	addsc.a	a4,a12,d15,#0
	ld.bu	d15,[a4]
.L323:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];      (inlined)
	j	.L44

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }      (inlined)
.L44:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     3  #ifndef DEM_PRV_CALLEVTSTCHNGDCBK_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     4  #define DEM_PRV_CALLEVTSTCHNGDCBK_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     6  #if(DEM_CFG_TRIGGERFIMREPORTS == DEM_CFG_TRIGGERFIMREPORTS_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     7  #include "FiM.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     8  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     9  #if (DEM_CFG_TRIGGERDLTREPORTS == DEM_CFG_TRIGGERDLTREPORTS_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    10  #include "Dlt.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    11  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    12  #include "Dem_DTCs.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    13  #include "Dem_Cfg_EventsCallback.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    14  #include "Dem_EventStatus.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    17  DEM_INLINE void Dem_CallBackTriggerOnEventStatus (
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    18  		Dem_EventIdType EventId,
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    19  		Dem_UdsStatusByteType EventStatusOld,
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    20  		Dem_UdsStatusByteType EventStatusNew,
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    21  		Dem_UdsStatusByteType dtcStByteOld
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    22  )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    23  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    24  #if ( DEM_CFG_DTC_STATUSCHANGEDCALLBACK == DEM_CFG_DTC_STATUSCHANGEDCALLBACK_ON )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    25      Dem_DtcIdType dtcId;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    26      Dem_UdsStatusByteType dtcStByteNew;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    27      Dem_DtcCodeType dtcCode;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    28  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    30      DEM_ASSERT_ISNOTLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    31      DEM_UNUSED_PARAM(dtcStByteOld);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    32      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    33      DEM_UNUSED_PARAM(EventStatusOld);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    34      DEM_UNUSED_PARAM(EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    36  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    37      Dem_CallEventStatusChangedCallBack(EventId, EventStatusOld, EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    39  #if ( DEM_CFG_TRIGGERDLTREPORTS == DEM_CFG_TRIGGERDLTREPORTS_ON )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    40      Dlt_DemTriggerOnEventStatus(EventId, EventStatusOld, EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    41  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    42  #if ( DEM_CFG_DTC_STATUSCHANGEDCALLBACK == DEM_CFG_DTC_STATUSCHANGEDCALLBACK_ON )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    43      if ( Dem_EventIdIsDtcAssigned(EventId) )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    44      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    45          dtcId = Dem_DtcIdFromEventId(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    46          if ( Dem_DtcIsSupported(dtcId) )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    47          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    48              dtcStByteNew = (uint8)(Dem_DtcStatusByteRetrieve (dtcId) & DEM_CFG_DTCSTATUS_AVAILABILITYMASK);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    49              if (dtcStByteNew != dtcStByteOld)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    50              {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    51                  dtcCode = Dem_GetDtcCode(dtcId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    52                  Dem_CallbackDTCStatusChangedIndication( dtcCode, dtcStByteOld, dtcStByteNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    53              }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    54          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    55      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    56  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    57  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    59  DEM_INLINE void Dem_StatusChange_GetOldStatus (
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    60  		Dem_EventIdType EventId,
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    61  		Dem_UdsStatusByteType *isoByteOld,
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    62  		Dem_UdsStatusByteType *dtcStByteOld
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    63  )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    64  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    65  #if ( DEM_CFG_DTC_STATUSCHANGEDCALLBACK == DEM_CFG_DTC_STATUSCHANGEDCALLBACK_ON )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    66  	Dem_DtcIdType dtcId;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    67  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    68  	*(isoByteOld) = Dem_EvtGetIsoByte(EventId);
	st.b	[a15],d15
.L324:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    69      *dtcStByteOld = 0;
	mov	d15,#0
.L325:
	st.b	[a2],d15
.L200:

; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   194              statusNew = statusOld;
	ld.bu	d11,[a10]
.L326:

; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   195              if (Dem_ISO14229ByteIsWarningIndicatorRequested(statusOld))
	ld.bu	d15,[a10]
.L201:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     4  #ifndef DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     5  #define DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     8  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    11  /* Refer to Dem_UdsStatusByteType */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    14  #define DEM_ISO14229_TESTFAILED             0u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    15  #define DEM_ISO14229_TESTFAILED_TOC         1u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    16  #define DEM_ISO14229_TESTFAILED_SLC         5u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    17  #define DEM_ISO14229_TESTNOTCOMPLETE_TOC    6u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    18  #define DEM_ISO14229_TESTNOTCOMPLETE_SLC    4u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    19  #define DEM_ISO14229_PENDINGDTC             2u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    20  #define DEM_ISO14229_CONFIRMEDDTC           3u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    21  #define DEM_ISO14229_WARNINGINDICATOR       7u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    23  #define DEM_ISO14229_BM_TESTFAILED             (1u<<DEM_ISO14229_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    24  #define DEM_ISO14229_BM_TESTFAILED_TOC         (1u<<DEM_ISO14229_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    25  #define DEM_ISO14229_BM_TESTFAILED_SLC         (1u<<DEM_ISO14229_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    26  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    27  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    28  #define DEM_ISO14229_BM_PENDINGDTC             (1u<<DEM_ISO14229_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    29  #define DEM_ISO14229_BM_CONFIRMEDDTC           (1u<<DEM_ISO14229_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    30  #define DEM_ISO14229_BM_WARNINGINDICATOR       (1u<<DEM_ISO14229_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    32  #if (DEM_ISO14229_BM_TESTFAILED           !=  DEM_UDS_STATUS_TF)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    33  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    34  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    36  #if (DEM_ISO14229_BM_TESTFAILED_TOC       !=  DEM_UDS_STATUS_TFTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    37  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    40  #if (DEM_ISO14229_BM_TESTFAILED_SLC       !=  DEM_UDS_STATUS_TFSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    41  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    42  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    44  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC  !=  DEM_UDS_STATUS_TNCTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    45  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    46  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    48  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC  !=  DEM_UDS_STATUS_TNCSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    49  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    52  #if (DEM_ISO14229_BM_PENDINGDTC           !=  DEM_UDS_STATUS_PDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    53  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    54  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    56  #if (DEM_ISO14229_BM_CONFIRMEDDTC         !=  DEM_UDS_STATUS_CDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    57  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    60  #if (DEM_ISO14229_BM_WARNINGINDICATOR     !=  DEM_UDS_STATUS_WIR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    61  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    62  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    66  #define DEM_ISO14229BYTE_INITVALUE            		( (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)|(DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC) )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    67  #define DEM_ISO14229BYTE_MASK_PENDING_CONFIRMED     ( DEM_ISO14229_BM_PENDINGDTC | DEM_ISO14229_BM_CONFIRMEDDTC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    68  /*#define DEM_ISO14229BYTE_MASK_FAILED_COMPLETE_WIR   ( DEM_ISO14229_BM_TESTFAILED | DEM_ISO14229_BM_TESTFAILED_TOC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    69                                                        | DEM_ISO14229_BM_TESTFAILED_SLC | DEM_ISO14229_BM_WARNINGINDICATOR \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    70                                                        | DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC | DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    71   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    73  #define DEM_ISO14229BYTE_MASK_INDICATOR_OFF			(DEM_ISO14229_BM_CONFIRMEDDTC | DEM_ISO14229_BM_TESTFAILED \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    74                                                        | DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    76  #define DEM_ISO14229BYTE_MASK_TESTFAILEDSINCELASTCLEAR     ( DEM_ISO14229_BM_TESTFAILED_SLC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    78  #if (DEM_UDS_STATUS_TF     != DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    79  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    80  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    81  #if (DEM_UDS_STATUS_TFTOC  != DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    82  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    84  #if (DEM_UDS_STATUS_PDTC   != DEM_ISO14229_BM_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    85  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    86  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    87  #if (DEM_UDS_STATUS_CDTC   != DEM_ISO14229_BM_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    88  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    89  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    90  #if (DEM_UDS_STATUS_TNCSLC != DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    91  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    93  #if (DEM_UDS_STATUS_TFSLC  != DEM_ISO14229_BM_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    94  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    95  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    96  #if (DEM_UDS_STATUS_TNCTOC != DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    97  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    98  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    99  #if (DEM_UDS_STATUS_WIR    != DEM_ISO14229_BM_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   100  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   101  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   108  /*
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   109   * concept idea for triggering storage to NVM for single status bytes
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   110   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   111  #define DEM_ISO14229BYTE_NVMTRIGGER(STATUSBITSTORAGETESTFAILED, OPERATIONCYCLE_IS_PC) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   112          (0|DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   113                  |DEM_ISO14229_BM_TESTFAILED_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   114                  |(DEM_ISO14229_BM_TESTFAILED*(STATUSBITSTORAGETESTFAILED)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   115                  |(DEM_ISO14229_BM_TESTFAILED_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   116                  |(DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   117          )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   120  /* query functions */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   122  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailed (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   128  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   129  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   130  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   131      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   132  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   136  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   137  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   138      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   139  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   143  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   145      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   146  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   148  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   150  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   152      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   153  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   154  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   157  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   159      return !rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   164  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsPendingDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   165  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   166      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_PENDINGDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   167  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   171  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsConfirmedDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   172  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   173      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_CONFIRMEDDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   174  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   176  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   177  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsWarningIndicatorRequested (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   178  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   179      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_WARNINGINDICATOR);
	mov	d0,#7
.L203:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L327:
	and	d15,#1
.L328:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L45

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L45:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L329:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L46

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L46:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   179      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_WARNINGINDICATOR);      (inlined)
	j	.L47

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   180  }      (inlined)
.L47:
	jeq	d15,#0,.L48
.L202:

; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   196              {
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   197  					Dem_UpdateISO14229WIRStatus(EventId);
	mov	d4,d8
.L272:
	call	Dem_UpdateISO14229WIRStatus
.L204:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     4  #ifndef DEM_EVENTSTATUS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     5  #define DEM_EVENTSTATUS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     7  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     9  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    10  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    11  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    12  #include "Dem_Cfg_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    13  #include "Dem_Cfg_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    14  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    19  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    20  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    22  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    23  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    24  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    25  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    27  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    28  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    30  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    31  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    32  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    34  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    35  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    38  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    39  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    40  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    41  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    42  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    43  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];
	addsc.a	a15,a12,d8,#0
.L273:
	ld.bu	d11,[a15]
.L330:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];      (inlined)
	j	.L49

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }      (inlined)
.L49:
	j	.L50
.L48:

; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   198                      statusNew = Dem_EvtGetIsoByte(EventId);
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   199  #if (DEM_CFG_TRIGGERFIMREPORTS == DEM_CFG_TRIGGERFIMREPORTS_ON)
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   200                      FiM_DemTriggerOnEventStatus (EventId, statusOld, statusNew);
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   201  #endif
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   202              }
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   203              else
.L50:
.L41:
.L29:

; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   204              {
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   205                  //nothing to do
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   206              }
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   207          }
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   208      }
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   209  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   210      DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   211  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   212      if (statusNew != statusOld )
	ld.bu	d15,[a10]
.L331:
	jeq	d15,d11,.L51

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    30      DEM_ASSERT_ISNOTLOCKED();      (inlined)
.L52:
.L51:

; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   213      {
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   214          Dem_CallBackTriggerOnEventStatus(EventId, statusOld, statusNew, dtcStByteOld);
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   215      }
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   216  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   217      return ret_val;
	mov	d2,d10
.L274:
	j	.L53

; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   218  }
.L53:
.L22:
.L15:
.L7:
	ret
.L87:
	
__Dem_SetWIRStatus_function_end:
	.size	Dem_SetWIRStatus,__Dem_SetWIRStatus_function_end-Dem_SetWIRStatus
.L75:
	; End of function
	
	.sdecl	'.text.Dem_Indicator.Dem_UpdateISO14229WIRStatus',code,cluster('Dem_UpdateISO14229WIRStatus')
	.sect	'.text.Dem_Indicator.Dem_UpdateISO14229WIRStatus'
	.align	2
	
	.global	Dem_UpdateISO14229WIRStatus

; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   219  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   220  #endif
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   221  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   222  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   223  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   224  void Dem_UpdateISO14229WIRStatus (Dem_EventIdType EventId)
; Function Dem_UpdateISO14229WIRStatus
.L66:
Dem_UpdateISO14229WIRStatus:	.type	func

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
	movh.a	a15,#@his(Dem_AllEventsState)
	lea	a15,[a15]@los(Dem_AllEventsState)
.L341:
	addsc.a	a15,a15,d4,#2
.L342:
	ld.bu	d15,[a15]
.L343:
	mov	d0,#6
.L216:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L344:
	and	d15,#1
.L345:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L54

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L54:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L346:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L55

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L55:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);      (inlined)
	j	.L56

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }      (inlined)
.L56:

; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   225  {
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   226      if (        (!Dem_EvtIsWIRExternal(EventId))
	jne	d15,#0,.L57
.L212:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     4  #ifndef DEM_EVENTSTATUS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     5  #define DEM_EVENTSTATUS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     7  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     9  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    10  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    11  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    12  #include "Dem_Cfg_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    13  #include "Dem_Cfg_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    14  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    19  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    20  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    22  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    23  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    24  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    25  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    27  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    28  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    30  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    31  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    32  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    34  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    35  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    38  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    39  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    40  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    41  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    42  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    43  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    46  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    47  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetCustIsoByte (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    48  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    49      return Dem_AllEventsStatusByteCust[EventId];
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    50  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    51  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    53  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    54  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    57  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    58  #include "Dem_CustomStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    59  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    61  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    62  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    63  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    66  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    67  #define DEM_STATUSBYTE_EVENT_UNAVAILABLE                   (0x00)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    68  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_SETMASK          (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    69  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_CLEARMASK        (DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    71  #define DEM_INIT_ISOBITS_CLEARMASK									(DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    75  void Dem_EventStatusInitCheckNvM(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    76  void Dem_ClearEvent(Dem_EventIdType eventId, boolean ClearFully);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    77  void Dem_EvtAdvanceOperationCycle(Dem_OperationCycleList operationCycleList);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    78  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    79  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    80  /* Duplicate of Dem_GetEventStatus to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    81  Std_ReturnType Dem_GetEventStatus_GeneralEvtInfo(Dem_EventIdType EventId, Dem_UdsStatusByteType* EventStatusExtended);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    82  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    85  DEM_INLINE void Dem_InitEventStatusTestFailed(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    87  #if (!DEM_CFG_EVMEM_STORAGE_TESTFAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    88  	Dem_EventIdIterator eventIt;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    89  	Dem_EventIdType eventId;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    90  	Dem_UdsStatusByteType statusNew;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    92  	for (Dem_EventIdIteratorNew(&eventIt); Dem_EventIdIteratorIsValid(&eventIt); Dem_EventIdIteratorNext(&eventIt))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    93  	{
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    94  		eventId = Dem_EventIdIteratorCurrent(&eventIt);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    95  		statusNew = Dem_EvtGetIsoByte(eventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    96  		if (!Dem_EvtParam_GetStoreTestFailedToNextOC(eventId))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    97  		{
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    98  			statusNew &= (Dem_UdsStatusByteType)(~DEM_INIT_ISOBITS_CLEARMASK);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    99  		}
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   100  		Dem_AllEventsStatusByte[eventId] = statusNew;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   101  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   102  		Dem_AllEventsStatusByteCust[eventId] = statusNew;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   103  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   104  	}
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   105  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   108  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   109  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte4DtcCalculation (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   110  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   111  #if !DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   112      return Dem_AllEventsStatusByte[EventId];
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   113  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   114      return Dem_AllEventsStatusByteCust[EventId];
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   115  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   116  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   119  /*
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   120   * Called in Dem_EvtProcessPassedAndFailed() to check whether the reported status would change the event status information
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   121   */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   122  DEM_INLINE Dem_boolean_least Dem_EvtSt_IsUpdateNeeded(Dem_EventIdType EventId, Dem_boolean_least reportIsFailed)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   124      return (
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   125             (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetIsoByte(EventId)) != reportIsFailed)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   126          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetIsoByte(EventId)))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   128  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   129          || (reportIsFailed && !Dem_EvtGetTestFailedTFCSincePreinit(EventId))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   130          || (!Dem_EvtGetTestCompleteTFCSincePreinit(EventId))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   131  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   132  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   133  #if (DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   134          || (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetCustIsoByte(EventId)) != reportIsFailed)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   135          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetCustIsoByte(EventId)))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   136  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   137      );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   138  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   139  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   141  DEM_INLINE void Dem_EvtSt_HandleInitialization (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   142  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   143      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   145      /* We don't need to reset Test*TFCSincePreinit here because it is already properly initialized by static
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   146       * initialization with zeros on ECU startup */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   148  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   149      Dem_EvtSt_CustomInitialization(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   150  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   151  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   152  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   153  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   154  DEM_INLINE void Dem_EvtSt_HandleFailed(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   155  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   156      Dem_ISO14229ByteSetTestFailed (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   157      Dem_ISO14229ByteSetTestFailedTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   158      Dem_ISO14229ByteSetTestFailedSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   159      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   160      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   161      /* only valid with failurecycle=operationcycle
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   162      Dem_ISO14229ByteSetPendingDTC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   163      */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   164  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   165  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   166      Dem_EvtSetTestFailedTFCSincePreinit(EventId, TRUE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   167      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, TRUE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   168  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   170  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   171      Dem_EvtSt_CustomFailed(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   175  DEM_INLINE void Dem_EvtSt_HandlePassed(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   176  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   177      Dem_ISO14229ByteSetTestFailed (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   178      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   179      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   180  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   181  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   182      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, TRUE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   183  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   184  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   185  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   186      Dem_EvtSt_CustomPassed(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   187  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   188  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   190  DEM_INLINE void Dem_EvtSt_HandleResetEventStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   191  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   192      Dem_ISO14229ByteSetTestFailed(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   193  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   194      Dem_EvtSt_CustomResetEventStatus(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   195  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   198  DEM_INLINE void Dem_EvtSt_HandleEvtAvailable(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   199  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   200      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   201  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   202      Dem_EvtSt_CustomEvtAvailable(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   203  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   204  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   205  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   206  DEM_INLINE void Dem_EvtSt_HandleEvtNotAvailable(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   207  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   208      Dem_AllEventsStatusByte[EventId] = DEM_STATUSBYTE_EVENT_UNAVAILABLE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   209  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   210      Dem_EvtSt_CustomEvtNotAvailable(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   211  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   212  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   213  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   214  DEM_INLINE void Dem_EvtSt_HandleClear(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   215  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   216  #if DEM_CFG_CLEARDTCCLEARSALLBITS
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   217      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   218  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   219      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   220      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   221      Dem_ISO14229ByteSetTestFailedTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   222      Dem_ISO14229ByteSetTestFailedSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   223      Dem_ISO14229ByteSetPendingDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   224      Dem_ISO14229ByteSetConfirmedDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   225      if(!(Dem_ISO14229ByteIsTestFailed(Dem_AllEventsStatusByte[EventId])))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   226      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   227          Dem_ISO14229ByteSetWarningIndicatorRequested(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   228      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   229  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   231  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   232      Dem_EvtSetTestFailedTFCSincePreinit(EventId, FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   233      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   234  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   235  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   236  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   237      Dem_EvtSt_CustomClear(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   238  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   239  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   240  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   241  DEM_INLINE void Dem_EvtSt_HandleClear_OnlyThisCycleAndReadiness(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   242  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   243      Dem_ISO14229ByteSetTestFailedTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   244      Dem_ISO14229ByteSetTestFailedSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   245      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   246      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   247  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   248  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   249      Dem_EvtSt_CustomClear_OnlyThisCycleAndReadiness(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   250  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   252      /* Hint : As Events mapped to OBD DTCs are not allowed to configure ClearAllowedBehavior as ONLY_THIS_CYCLE_AND_READINESS,
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   253       * no additional functions are called when DEM_CFG_OBD == DEM_CFG_OBD_ON */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   256  DEM_INLINE void Dem_EvtSt_HandleNewOperationCycle(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   258      if(!Dem_EvtIsSuppressed(EventId))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   259      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   260          /* only valid with failurecycle=operationcycle
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   261      if (Dem_ISO14229ByteIsTestCompleteTOC(Dem_AllEventsStatusByte[EventId]) && !Dem_ISO14229ByteIsTestFailedTOC(Dem_AllEventsStatusByte[EventId]))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   262      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   263          Dem_ISO14229ByteSetPendingDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   264      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   265           */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   266          Dem_AllEventsStatusByte[EventId] &= (Dem_UdsStatusByteType)(~DEM_STATUSBYTE_NEW_OPERATIONCYCLE_CLEARMASK);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   267          Dem_AllEventsStatusByte[EventId] |= DEM_STATUSBYTE_NEW_OPERATIONCYCLE_SETMASK;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   268  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   269          Dem_EvtSt_CustomNewOperationCycle(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   270  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   271      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   272  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   273  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   274  DEM_INLINE void Dem_EvtSt_HandleNewFailureCycle(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   275  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   276  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   277      Dem_EvtSetTestFailedTFCSincePreinit(EventId, FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   278      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, FALSE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   279  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   280      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   281  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   282  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   283  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   284  DEM_INLINE void Dem_EvtSt_HandleIndicatorOn(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   285  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   286      Dem_ISO14229ByteSetWarningIndicatorRequested(&(Dem_AllEventsStatusByte[EventId]), TRUE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   287  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   288      Dem_EvtSt_CustomIndicatorOn(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   289  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   292  DEM_INLINE void Dem_EvtSt_HandleIndicatorOff(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   293  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   294      Dem_ISO14229ByteSetWarningIndicatorRequested(&(Dem_AllEventsStatusByte[EventId]), FALSE);
	movh.a	a15,#@his(Dem_AllEventsStatusByte)
	lea	a15,[a15]@los(Dem_AllEventsStatusByte)
.L347:
	addsc.a	a15,a15,d4,#0
.L348:
	mov	d15,#0
.L225:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     4  #ifndef DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     5  #define DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     8  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    11  /* Refer to Dem_UdsStatusByteType */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    14  #define DEM_ISO14229_TESTFAILED             0u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    15  #define DEM_ISO14229_TESTFAILED_TOC         1u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    16  #define DEM_ISO14229_TESTFAILED_SLC         5u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    17  #define DEM_ISO14229_TESTNOTCOMPLETE_TOC    6u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    18  #define DEM_ISO14229_TESTNOTCOMPLETE_SLC    4u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    19  #define DEM_ISO14229_PENDINGDTC             2u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    20  #define DEM_ISO14229_CONFIRMEDDTC           3u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    21  #define DEM_ISO14229_WARNINGINDICATOR       7u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    23  #define DEM_ISO14229_BM_TESTFAILED             (1u<<DEM_ISO14229_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    24  #define DEM_ISO14229_BM_TESTFAILED_TOC         (1u<<DEM_ISO14229_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    25  #define DEM_ISO14229_BM_TESTFAILED_SLC         (1u<<DEM_ISO14229_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    26  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    27  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    28  #define DEM_ISO14229_BM_PENDINGDTC             (1u<<DEM_ISO14229_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    29  #define DEM_ISO14229_BM_CONFIRMEDDTC           (1u<<DEM_ISO14229_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    30  #define DEM_ISO14229_BM_WARNINGINDICATOR       (1u<<DEM_ISO14229_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    32  #if (DEM_ISO14229_BM_TESTFAILED           !=  DEM_UDS_STATUS_TF)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    33  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    34  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    36  #if (DEM_ISO14229_BM_TESTFAILED_TOC       !=  DEM_UDS_STATUS_TFTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    37  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    40  #if (DEM_ISO14229_BM_TESTFAILED_SLC       !=  DEM_UDS_STATUS_TFSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    41  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    42  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    44  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC  !=  DEM_UDS_STATUS_TNCTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    45  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    46  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    48  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC  !=  DEM_UDS_STATUS_TNCSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    49  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    52  #if (DEM_ISO14229_BM_PENDINGDTC           !=  DEM_UDS_STATUS_PDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    53  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    54  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    56  #if (DEM_ISO14229_BM_CONFIRMEDDTC         !=  DEM_UDS_STATUS_CDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    57  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    60  #if (DEM_ISO14229_BM_WARNINGINDICATOR     !=  DEM_UDS_STATUS_WIR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    61  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    62  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    66  #define DEM_ISO14229BYTE_INITVALUE            		( (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)|(DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC) )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    67  #define DEM_ISO14229BYTE_MASK_PENDING_CONFIRMED     ( DEM_ISO14229_BM_PENDINGDTC | DEM_ISO14229_BM_CONFIRMEDDTC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    68  /*#define DEM_ISO14229BYTE_MASK_FAILED_COMPLETE_WIR   ( DEM_ISO14229_BM_TESTFAILED | DEM_ISO14229_BM_TESTFAILED_TOC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    69                                                        | DEM_ISO14229_BM_TESTFAILED_SLC | DEM_ISO14229_BM_WARNINGINDICATOR \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    70                                                        | DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC | DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    71   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    73  #define DEM_ISO14229BYTE_MASK_INDICATOR_OFF			(DEM_ISO14229_BM_CONFIRMEDDTC | DEM_ISO14229_BM_TESTFAILED \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    74                                                        | DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    76  #define DEM_ISO14229BYTE_MASK_TESTFAILEDSINCELASTCLEAR     ( DEM_ISO14229_BM_TESTFAILED_SLC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    78  #if (DEM_UDS_STATUS_TF     != DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    79  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    80  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    81  #if (DEM_UDS_STATUS_TFTOC  != DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    82  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    84  #if (DEM_UDS_STATUS_PDTC   != DEM_ISO14229_BM_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    85  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    86  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    87  #if (DEM_UDS_STATUS_CDTC   != DEM_ISO14229_BM_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    88  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    89  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    90  #if (DEM_UDS_STATUS_TNCSLC != DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    91  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    93  #if (DEM_UDS_STATUS_TFSLC  != DEM_ISO14229_BM_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    94  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    95  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    96  #if (DEM_UDS_STATUS_TNCTOC != DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    97  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    98  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    99  #if (DEM_UDS_STATUS_WIR    != DEM_ISO14229_BM_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   100  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   101  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   108  /*
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   109   * concept idea for triggering storage to NVM for single status bytes
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   110   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   111  #define DEM_ISO14229BYTE_NVMTRIGGER(STATUSBITSTORAGETESTFAILED, OPERATIONCYCLE_IS_PC) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   112          (0|DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   113                  |DEM_ISO14229_BM_TESTFAILED_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   114                  |(DEM_ISO14229_BM_TESTFAILED*(STATUSBITSTORAGETESTFAILED)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   115                  |(DEM_ISO14229_BM_TESTFAILED_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   116                  |(DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   117          )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   120  /* query functions */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   122  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailed (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   128  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   129  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   130  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   131      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   132  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   136  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   137  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   138      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   139  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   143  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   145      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   146  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   148  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   150  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   152      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   153  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   154  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   157  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   159      return !rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   164  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsPendingDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   165  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   166      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_PENDINGDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   167  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   171  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsConfirmedDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   172  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   173      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_CONFIRMEDDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   174  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   176  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   177  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsWarningIndicatorRequested (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   178  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   179      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_WARNINGINDICATOR);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   180  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   181  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   183  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   184  /* set methods */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   186  DEM_INLINE void Dem_ISO14229ByteSetTestFailed (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   187  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   188      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   189  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   193  DEM_INLINE void Dem_ISO14229ByteSetTestFailedTOC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   195      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED_TOC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   199  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   200  DEM_INLINE void Dem_ISO14229ByteSetTestFailedSLC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   201  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   202      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED_SLC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   203  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   205  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   207  DEM_INLINE void Dem_ISO14229ByteSetTestNotCompleteTOC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   209      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   212  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   213  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   214  DEM_INLINE void Dem_ISO14229ByteSetTestCompleteTOC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   215  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   216      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC, !setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   217  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   219  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   220  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   221  DEM_INLINE void Dem_ISO14229ByteSetTestCompleteSLC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   222  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   223      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTNOTCOMPLETE_SLC, !setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   224  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   225  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   227  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   228  DEM_INLINE void Dem_ISO14229ByteSetPendingDTC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   229  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   230      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_PENDINGDTC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   231  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   233  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   235  DEM_INLINE void Dem_ISO14229ByteSetConfirmedDTC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   236  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   237      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_CONFIRMEDDTC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   238  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   239  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   240  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   242  DEM_INLINE void Dem_ISO14229ByteSetWarningIndicatorRequested (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   244      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_WARNINGINDICATOR, setOrReset);
	mov	d0,#7
.L228:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
	jeq	d15,#0,.L58
.L232:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
	mov	d15,#1
.L275:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
	ld.bu	d1,[a15]
.L349:
	sha	d15,d15,d0
.L276:
	or	d1,d15
	st.b	[a15],d1
.L233:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);      (inlined)
	j	.L59

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
.L58:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
	mov	d15,#1
.L277:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
	ld.bu	d1,[a15]
.L350:
	sha	d15,d15,d0
.L278:
	xor	d15,d15,#255
.L351:
	and	d1,d15
	st.b	[a15],d1

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else      (inlined)
.L59:
.L60:

; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   227              &&  (!Dem_isAnyIndicatorAttribOn(EventId))
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   228  #if (DEM_CFG_OBD != DEM_CFG_OBD_OFF)
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   229              &&  (!rba_DemObdBasic_Event_IsRequestingMil(EventId))
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   230  #endif
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   231      )
.L57:

; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   232      {
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   233          Dem_EvtSt_HandleIndicatorOff(EventId);
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   234      }
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   235  }
	ret
.L209:
	
__Dem_UpdateISO14229WIRStatus_function_end:
	.size	Dem_UpdateISO14229WIRStatus,__Dem_UpdateISO14229WIRStatus_function_end-Dem_UpdateISO14229WIRStatus
.L85:
	; End of function
	
	.calls	'Dem_SetWIRStatus','Det_ReportError'
	.calls	'Dem_SetWIRStatus','Dem_IsEventEnabledByDtcSetting'
	.calls	'Dem_SetWIRStatus','Dem_UpdateISO14229WIRStatus'
	.calls	'Dem_SetIndicatorStatusForEvent','',0
	.calls	'Dem_SetWIRStatus','',8
	.extern	Dem_OpMoState
	.extern	Det_ReportError
	.extern	Dem_AllEventsState
	.extern	Dem_AllEventsStatusByte
	.extern	Dem_IsEventEnabledByDtcSetting
	.calls	'Dem_UpdateISO14229WIRStatus','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L68:
	.word	26269
	.half	3
	.word	.L69
	.byte	4
.L67:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\indct\\Dem_Indicator.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L70
.L86:
	.byte	2
	.byte	'unsigned char',0,1,8,3
	.word	145
.L154:
	.byte	4
	.byte	'rba_DiagLib_Bit8SetBit',0,3,1,36,19,1,1
.L157:
	.byte	5
	.byte	'buffer',0,1,36,49
	.word	162
.L159:
	.byte	5
	.byte	'bit_position',0,1,36,63
	.word	145
.L161:
	.byte	6,0
.L163:
	.byte	4
	.byte	'rba_DiagLib_Bit8ClearBit',0,3,1,42,19,1,1
.L164:
	.byte	5
	.byte	'buffer',0,1,42,51
	.word	162
.L166:
	.byte	5
	.byte	'bit_position',0,1,42,65
	.word	145
.L168:
	.byte	6,0
.L145:
	.byte	4
	.byte	'rba_DiagLib_Bit8OverwriteBit',0,3,1,48,19,1,1
.L147:
	.byte	5
	.byte	'buffer',0,1,48,55
	.word	162
.L149:
	.byte	5
	.byte	'bit_position',0,1,48,69
	.word	145
.L151:
	.byte	5
	.byte	'will_bit_be_set',0,1,48,91
	.word	145
.L153:
	.byte	7,6,6,0,0
.L112:
	.byte	8
	.byte	'rba_DiagLib_Bit8GetSingleBit',0,3,1,60,20
	.word	145
	.byte	1,1
.L113:
	.byte	5
	.byte	'value',0,1,60,55
	.word	145
.L115:
	.byte	5
	.byte	'bit_position',0,1,60,68
	.word	145
.L117:
	.byte	6,0
.L105:
	.byte	8
	.byte	'rba_DiagLib_Bit8IsBitSet',0,3,1,64,22
	.word	145
	.byte	1,1
.L107:
	.byte	5
	.byte	'value',0,1,64,53
	.word	145
.L109:
	.byte	5
	.byte	'bit_position',0,1,64,66
	.word	145
.L111:
	.byte	7,6,0,0,8
	.byte	'rba_DiagLib_Bit8GetBits',0,3,1,69,20
	.word	145
	.byte	1,1,5
	.byte	'value',0,1,69,50
	.word	145
	.byte	5
	.byte	'bit_position',0,1,69,63
	.word	145
	.byte	5
	.byte	'number_of_bits',0,1,69,83
	.word	145
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8ClearBits',0,3,1,77,19,1,1,5
	.byte	'value',0,1,77,52
	.word	162
	.byte	5
	.byte	'bit_position',0,1,77,65
	.word	145
	.byte	5
	.byte	'number_of_bits',0,1,77,85
	.word	145
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8OverwriteBits',0,3,1,83,19,1,1,5
	.byte	'value',0,1,83,56
	.word	162
	.byte	5
	.byte	'bit_position',0,1,83,69
	.word	145
	.byte	5
	.byte	'number_of_bits',0,1,83,89
	.word	145
	.byte	5
	.byte	'newValue',0,1,83,111
	.word	145
	.byte	7,6,0,0
.L88:
	.byte	2
	.byte	'unsigned short int',0,2,7,3
	.word	862
	.byte	4
	.byte	'rba_DiagLib_Bit16SetBit',0,3,2,36,19,1,1,5
	.byte	'buffer',0,2,36,51
	.word	884
	.byte	5
	.byte	'bit_position',0,2,36,65
	.word	145
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit16ClearBit',0,3,2,42,19,1,1,5
	.byte	'buffer',0,2,42,53
	.word	884
	.byte	5
	.byte	'bit_position',0,2,42,67
	.word	145
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit16GetSingleBit',0,3,2,60,21
	.word	862
	.byte	1,1,5
	.byte	'value',0,2,60,58
	.word	862
	.byte	5
	.byte	'bit_position',0,2,60,71
	.word	145
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit16IsBitSet',0,3,2,65,22
	.word	145
	.byte	1,1,5
	.byte	'value',0,2,65,55
	.word	862
	.byte	5
	.byte	'bit_position',0,2,65,68
	.word	145
	.byte	7,6,0,0,8
	.byte	'rba_DiagLib_Bit16GetBits',0,3,2,70,21
	.word	862
	.byte	1,1,5
	.byte	'value',0,2,70,53
	.word	862
	.byte	5
	.byte	'bit_position',0,2,70,66
	.word	145
	.byte	5
	.byte	'number_of_bits',0,2,70,86
	.word	145
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit16ClearBits',0,3,2,78,19,1,1,5
	.byte	'value',0,2,78,54
	.word	884
	.byte	5
	.byte	'bit_position',0,2,78,67
	.word	145
	.byte	5
	.byte	'number_of_bits',0,2,78,87
	.word	145
	.byte	6,0,2
	.byte	'unsigned int',0,4,7,3
	.word	1373
	.byte	4
	.byte	'rba_DiagLib_Bit32SetBit',0,3,3,36,19,1,1,5
	.byte	'buffer',0,3,36,51
	.word	1389
	.byte	5
	.byte	'bit_position',0,3,36,65
	.word	145
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit32ClearBit',0,3,3,42,19,1,1,5
	.byte	'buffer',0,3,42,53
	.word	1389
	.byte	5
	.byte	'bit_position',0,3,42,67
	.word	145
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit32GetSingleBit',0,3,3,60,21
	.word	1373
	.byte	1,1,5
	.byte	'value',0,3,60,58
	.word	1373
	.byte	5
	.byte	'bit_position',0,3,60,71
	.word	145
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit32IsBitSet',0,3,3,65,22
	.word	145
	.byte	1,1,5
	.byte	'value',0,3,65,55
	.word	1373
	.byte	5
	.byte	'bit_position',0,3,65,68
	.word	145
	.byte	7,6,0,0,4
	.byte	'rba_DiagLib_Bit32ClearBits',0,3,3,78,19,1,1,5
	.byte	'value',0,3,78,54
	.word	1389
	.byte	5
	.byte	'bit_position',0,3,78,67
	.word	145
	.byte	5
	.byte	'number_of_bits',0,3,78,87
	.word	145
	.byte	6,0,8
	.byte	'Dem_ISO14229ByteIsTestFailed',0,3,4,122,30
	.word	145
	.byte	1,1,5
	.byte	'self',0,4,122,66
	.word	145
	.byte	7,6,0,0,8
	.byte	'Dem_ISO14229ByteIsTestFailedTOC',0,3,4,129,1,30
	.word	145
	.byte	1,1,5
	.byte	'self',0,4,129,1,69
	.word	145
	.byte	7,6,0,0,8
	.byte	'Dem_ISO14229ByteIsTestCompleteTOC',0,3,4,157,1,30
	.word	145
	.byte	1,1,5
	.byte	'self',0,4,157,1,71
	.word	145
	.byte	7,6,0,0,8
	.byte	'Dem_ISO14229ByteIsPendingDTC',0,3,4,164,1,30
	.word	145
	.byte	1,1,5
	.byte	'self',0,4,164,1,66
	.word	145
	.byte	7,6,0,0
.L170:
	.byte	8
	.byte	'Dem_ISO14229ByteIsWarningIndicatorRequested',0,3,4,177,1,30
	.word	145
	.byte	1,1
.L173:
	.byte	5
	.byte	'self',0,4,177,1,81
	.word	145
.L175:
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetTestFailed',0,3,4,186,1,17,1,1,5
	.byte	'self',0,4,186,1,55
	.word	162
	.byte	5
	.byte	'setOrReset',0,4,186,1,79
	.word	145
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetTestFailedTOC',0,3,4,193,1,17,1,1,5
	.byte	'self',0,4,193,1,58
	.word	162
	.byte	5
	.byte	'setOrReset',0,4,193,1,82
	.word	145
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetTestFailedSLC',0,3,4,200,1,17,1,1,5
	.byte	'self',0,4,200,1,58
	.word	162
	.byte	5
	.byte	'setOrReset',0,4,200,1,82
	.word	145
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetTestCompleteTOC',0,3,4,214,1,17,1,1,5
	.byte	'self',0,4,214,1,60
	.word	162
	.byte	5
	.byte	'setOrReset',0,4,214,1,84
	.word	145
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetTestCompleteSLC',0,3,4,221,1,17,1,1,5
	.byte	'self',0,4,221,1,60
	.word	162
	.byte	5
	.byte	'setOrReset',0,4,221,1,84
	.word	145
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetPendingDTC',0,3,4,228,1,17,1,1,5
	.byte	'self',0,4,228,1,55
	.word	162
	.byte	5
	.byte	'setOrReset',0,4,228,1,79
	.word	145
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetConfirmedDTC',0,3,4,235,1,17,1,1,5
	.byte	'self',0,4,235,1,57
	.word	162
	.byte	5
	.byte	'setOrReset',0,4,235,1,81
	.word	145
	.byte	7,6,0,0
.L181:
	.byte	4
	.byte	'Dem_ISO14229ByteSetWarningIndicatorRequested',0,3,4,242,1,17,1,1
.L183:
	.byte	5
	.byte	'self',0,4,242,1,70
	.word	162
.L185:
	.byte	5
	.byte	'setOrReset',0,4,242,1,94
	.word	145
.L187:
	.byte	7,6,0,0,4
	.byte	'Dem_BitArraySetBit',0,3,5,33,17,1,1,5
	.byte	'buffer',0,5,33,36
	.word	1389
	.byte	5
	.byte	'bit_position',0,5,33,75
	.word	1373
	.byte	6,0,4
	.byte	'Dem_BitArrayClearBit',0,3,5,46,17,1,1,5
	.byte	'buffer',0,5,46,38
	.word	1389
	.byte	5
	.byte	'bit_position',0,5,46,77
	.word	1373
	.byte	6,0,4
	.byte	'Dem_BitArrayOverwriteBit',0,3,5,61,17,1,1,5
	.byte	'buffer',0,5,61,42
	.word	1389
	.byte	5
	.byte	'bit_position',0,5,62,25
	.word	1373
	.byte	5
	.byte	'will_bit_be_set',0,5,62,57
	.word	145
	.byte	7,6,6,0,0,9
	.word	1373
	.byte	3
	.word	2966
	.byte	8
	.byte	'Dem_BitArrayIsBitSet',0,3,5,75,30
	.word	145
	.byte	1,1,5
	.byte	'buffer',0,5,75,51
	.word	2971
	.byte	5
	.byte	'bit_position',0,5,75,95
	.word	1373
	.byte	6,0,8
	.byte	'rba_BswSrv_ByteOrderSwap32',0,3,6,125,21
	.word	1373
	.byte	1,1,5
	.byte	'Input_u32',0,6,125,55
	.word	1373
	.byte	6,0,8
	.byte	'rba_BswSrv_ByteOrderSwap16',0,3,6,150,1,21
	.word	862
	.byte	1,1,5
	.byte	'Input_u16',0,6,150,1,55
	.word	862
	.byte	6,0,8
	.byte	'Dem_LibGetParamUI8',0,3,7,36,18
	.word	145
	.byte	1,1,5
	.byte	'parameter',0,7,36,44
	.word	145
	.byte	6,0,8
	.byte	'Dem_LibGetParamBool',0,3,7,41,20
	.word	145
	.byte	1,1,5
	.byte	'parameter',0,7,41,49
	.word	145
	.byte	6,0
.L95:
	.byte	8
	.byte	'Dem_isEventIdValid',0,3,8,20,30
	.word	145
	.byte	1,1
.L97:
	.byte	5
	.byte	'checkID',0,8,20,65
	.word	862
.L99:
	.byte	6,0,8
	.byte	'Dem_isDtcIdValid',0,3,8,152,1,30
	.word	145
	.byte	1,1,5
	.byte	'id',0,8,152,1,62
	.word	862
	.byte	6,0,8
	.byte	'Dem_DtcIdFromEventId',0,3,8,158,1,27
	.word	862
	.byte	1,1,5
	.byte	'id',0,8,158,1,65
	.word	862
	.byte	6,0,8
	.byte	'Dem_DtcIdGetEventId',0,3,8,166,1,28
	.word	862
	.byte	1,1,5
	.byte	'dtcid',0,8,166,1,63
	.word	862
	.byte	6,0,8
	.byte	'Dem_DtcIdGetFirstEventId',0,3,8,174,1,28
	.word	862
	.byte	1,1,5
	.byte	'dtcid',0,8,174,1,68
	.word	862
	.byte	7,6,0,0,8
	.byte	'Dem_DtcGroupIdIsValid',0,3,8,252,1,30
	.word	145
	.byte	1,1,5
	.byte	'dtcGroupID',0,8,252,1,72
	.word	145
	.byte	6,0,9
	.word	862
	.byte	3
	.word	3564
	.byte	10,8,171,2,9,8,11
	.byte	'it',0
	.word	3569
	.byte	4,2,35,0,11
	.byte	'end',0
	.word	3569
	.byte	4,2,35,4,0,3
	.word	3574
	.byte	4
	.byte	'Dem_EventIdListIteratorNewFromDtcId',0,3,8,177,2,17,1,1,5
	.byte	'it',0,8,177,2,78
	.word	3606
	.byte	5
	.byte	'dtcid',0,8,177,2,96
	.word	862
	.byte	7,6,0,0,9
	.word	3574
	.byte	3
	.word	3686
	.byte	8
	.byte	'Dem_EventIdListIteratorIsValid',0,3,8,193,2,30
	.word	145
	.byte	1,1,5
	.byte	'it',0,8,193,2,92
	.word	3691
	.byte	6,0,4
	.byte	'Dem_EventIdListIteratorNext',0,3,8,198,2,17,1,1,5
	.byte	'it',0,8,198,2,70
	.word	3606
	.byte	6,0,8
	.byte	'Dem_EventIdListIteratorCurrent',0,3,8,203,2,28
	.word	862
	.byte	1,1,5
	.byte	'it',0,8,203,2,90
	.word	3691
	.byte	6,0,8
	.byte	'Dem_EnCoAreAllFulfilled',0,3,9,32,30
	.word	145
	.byte	1,1,5
	.byte	'enableConditionList',0,9,32,68
	.word	145
	.byte	6,0,8
	.byte	'Dem_Cfg_Dtc_GetDtcCode',0,3,10,99,30
	.word	1373
	.byte	1,1,5
	.byte	'indx',0,10,99,67
	.word	862
	.byte	6,0,8
	.byte	'Dem_NvMGetNvMBlocKId',0,3,11,49,28
	.word	862
	.byte	1,1,5
	.byte	'id',0,11,49,68
	.word	145
	.byte	6,0,4
	.byte	'Dem_NvMStartClear',0,3,11,138,1,17,1,1,6,0,8
	.byte	'rba_DiagLib_ByteOrderUtils_SwapByteOrderS',0,3,12,36,21
	.word	862
	.byte	1,1,5
	.byte	'val',0,12,36,70
	.word	862
	.byte	7,6,0,0,8
	.byte	'rba_DiagLib_ByteOrderUtils_SwapByteOrderL',0,3,12,41,21
	.word	1373
	.byte	1,1,5
	.byte	'val',0,12,41,70
	.word	1373
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetStoreTestFailedToNextOC',0,3,13,55,22
	.word	145
	.byte	1,1,5
	.byte	'indx',0,13,55,78
	.word	862
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetEventIsStoredInPrimary',0,3,13,75,22
	.word	145
	.byte	1,1,5
	.byte	'indx',0,13,75,77
	.word	862
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetEventIsStoredInSecondary',0,3,13,82,22
	.word	145
	.byte	1,1,5
	.byte	'indx',0,13,82,79
	.word	862
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetEventIsStoredInMirror',0,3,13,89,22
	.word	145
	.byte	1,1,5
	.byte	'indx',0,13,89,76
	.word	862
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetAgingAllowed',0,3,13,95,22
	.word	145
	.byte	1,1,5
	.byte	'indx',0,13,95,67
	.word	862
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetOperationCycleID',0,3,13,122,20
	.word	145
	.byte	1,1,5
	.byte	'indx',0,13,122,69
	.word	862
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetAgingCycleID',0,3,13,129,1,20
	.word	145
	.byte	1,1,5
	.byte	'indx',0,13,129,1,65
	.word	862
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetFailureCycleID',0,3,13,136,1,20
	.word	145
	.byte	1,1,5
	.byte	'indx',0,13,136,1,67
	.word	862
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetDebounceMethodIndex',0,3,13,149,1,20
	.word	145
	.byte	1,1,5
	.byte	'indx',0,13,149,1,72
	.word	862
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetDebounceParamSettingIndex',0,3,13,155,1,21
	.word	862
	.byte	1,1,5
	.byte	'indx',0,13,155,1,79
	.word	862
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetAgingThreshold',0,3,13,168,1,20
	.word	145
	.byte	1,1,5
	.byte	'indx',0,13,168,1,67
	.word	862
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetEnableConditions',0,3,13,208,1,27
	.word	145
	.byte	1,1,5
	.byte	'indx',0,13,208,1,76
	.word	862
	.byte	6,0,2
	.byte	'short int',0,2,5,8
	.byte	'Dem_EvtGetDebounceLevel',0,3,14,193,1,19
	.word	4937
	.byte	1,1,5
	.byte	'EventId',0,14,193,1,60
	.word	862
	.byte	6,0,8
	.byte	'Dem_EvtGetLastReportedEvent',0,3,14,219,1,32
	.word	145
	.byte	1,1,5
	.byte	'EventId',0,14,219,1,77
	.word	862
	.byte	6,0,4
	.byte	'Dem_EvtIncreaseGlobalInitMonitoringCounter',0,3,14,227,3,17,1,1,6,0,4
	.byte	'Dem_EvtSetAnyInitMonitoring',0,3,14,233,3,17,1,1,5
	.byte	'reason',0,14,233,3,72
	.word	145
	.byte	7,6,0,0
.L138:
	.byte	4
	.byte	'Dem_EvtSetWIRExtern',0,3,14,182,4,17,1,1
.L140:
	.byte	5
	.byte	'EventId',0,14,182,4,53
	.word	862
.L142:
	.byte	5
	.byte	'newState',0,14,182,4,80
	.word	145
.L144:
	.byte	7,6,0,0
.L211:
	.byte	8
	.byte	'Dem_EvtIsWIRExternal',0,3,14,188,4,30
	.word	145
	.byte	1,1
.L213:
	.byte	5
	.byte	'EventId',0,14,188,4,67
	.word	862
.L215:
	.byte	7,6,0,0
.L100:
	.byte	8
	.byte	'Dem_EvtIsSuppressed',0,3,14,244,4,30
	.word	145
	.byte	1,1
.L102:
	.byte	5
	.byte	'EventId',0,14,244,4,67
	.word	862
.L104:
	.byte	7,6,0,0
.L134:
	.byte	8
	.byte	'Dem_EvtGetIsoByte',0,3,15,42,34
	.word	145
	.byte	1,1
.L135:
	.byte	5
	.byte	'EventId',0,15,42,69
	.word	862
.L137:
	.byte	6,0
.L177:
	.byte	4
	.byte	'Dem_EvtSt_HandleIndicatorOn',0,3,15,156,2,17,1,1
.L178:
	.byte	5
	.byte	'EventId',0,15,156,2,61
	.word	862
.L180:
	.byte	7,6,0,0
.L221:
	.byte	4
	.byte	'Dem_EvtSt_HandleIndicatorOff',0,3,15,164,2,17,1,1
.L222:
	.byte	5
	.byte	'EventId',0,15,164,2,62
	.word	862
.L224:
	.byte	7,6,0,0,12
	.word	862
	.byte	3
	.word	5509
	.byte	4
	.byte	'Dem_ClientResultType_setResult',0,3,16,27,17,1,1,5
	.byte	'result',0,16,27,79
	.word	5514
	.byte	5
	.byte	'request',0,16,27,109
	.word	862
	.byte	5
	.byte	'newResult',0,16,27,133,1
	.word	145
	.byte	6,0,12
	.word	862
	.byte	3
	.word	5609
	.byte	4
	.byte	'Dem_ClientRequestType_setRequest',0,3,16,65,17,1,1,5
	.byte	'request',0,16,65,82
	.word	5614
	.byte	5
	.byte	'newRequest',0,16,65,97
	.word	145
	.byte	6,0,3
	.word	1373
	.byte	4
	.byte	'Dem_ClientSelectionType_invalidateSelectionResult',0,3,16,151,1,17,1,1,5
	.byte	'selection',0,16,151,1,93
	.word	5696
	.byte	6,0,8
	.byte	'Dem_ClientSelectionType_getTypeOfSelection',0,3,16,168,1,18
	.word	145
	.byte	1,1,5
	.byte	'selection',0,16,168,1,86
	.word	1373
	.byte	6,0,4
	.byte	'Dem_ClientClearMachine_SetMachineActiveClient',0,3,17,53,17,1,1,5
	.byte	'ClientId',0,17,53,80
	.word	145
	.byte	6,0,4
	.byte	'Dem_ClientClearMachine_SetMachineState',0,3,17,68,17,1,1,5
	.byte	'state',0,17,68,62
	.word	145
	.byte	6,0,8
	.byte	'Dem_ClientClearMachine_isClearDtcGroupAllDtcsSelected',0,3,17,78,20
	.word	145
	.byte	1,1,5
	.byte	'ClientId',0,17,78,91
	.word	145
	.byte	7,6,6,6,6,0,0,3
	.word	145
	.byte	4
	.byte	'Dem_EnvSetTrigger',0,3,18,17,17,1,1,5
	.byte	'trigger',0,18,17,52
	.word	6079
	.byte	5
	.byte	'trigger2set',0,18,17,77
	.word	145
	.byte	6,0,8
	.byte	'Dem_EnvIsAnyTriggerSet',0,3,18,22,30
	.word	145
	.byte	1,1,5
	.byte	'trigger2test',0,18,22,69
	.word	145
	.byte	6,0,2
	.byte	'unsigned long int',0,4,7,8
	.byte	'Dem_DebHandleDebounceAction__processBits',0,3,19,101,30
	.word	145
	.byte	1,1,5
	.byte	'EventId',0,19,101,87
	.word	862
	.byte	5
	.byte	'debAction',0,19,101,120
	.word	6204
	.byte	6,0,8
	.byte	'Dem_EvMemIsMemIdValid',0,3,20,103,30
	.word	145
	.byte	1,1,5
	.byte	'MemId',0,20,103,65
	.word	6204
	.byte	6,0,8
	.byte	'Dem_EvMemIsEventMemLocIdValid',0,3,20,112,30
	.word	145
	.byte	1,1,5
	.byte	'LocId',0,20,112,73
	.word	6204
	.byte	6,0,10,21,133,1,3,4,11
	.byte	'Status',0
	.word	862
	.byte	2,2,35,0,11
	.byte	'EventId',0
	.word	862
	.byte	2,2,35,2,0,13,21,131,1,9,4,11
	.byte	'Data',0
	.word	6419
	.byte	4,2,35,0,0,14,7
	.word	145
	.byte	15,6,0,10,21,144,1,9,20,11
	.byte	'Hdr',0
	.word	6459
	.byte	4,2,35,0,11
	.byte	'Data',0
	.word	6480
	.byte	7,2,35,4,11
	.byte	'FailureCounter',0
	.word	145
	.byte	1,2,35,11,11
	.byte	'FreezeFrameCounter',0
	.word	145
	.byte	1,2,35,12,11
	.byte	'AgingCounter',0
	.word	145
	.byte	1,2,35,13,11
	.byte	'OccurrenceCounter',0
	.word	145
	.byte	1,2,35,14,11
	.byte	'Trigger',0
	.word	145
	.byte	1,2,35,15,11
	.byte	'TimeId',0
	.word	1373
	.byte	4,2,35,16,0,9
	.word	6489
	.byte	3
	.word	6657
	.byte	8
	.byte	'Dem_EvMemGetEventMemStatusByPtr',0,3,20,134,1,25
	.word	6204
	.byte	1,1,5
	.byte	'EventMemory',0,20,134,1,89
	.word	6662
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemStatus',0,3,20,139,1,25
	.word	6204
	.byte	1,1,5
	.byte	'LocId',0,20,139,1,65
	.word	6204
	.byte	7,6,0,0,8
	.byte	'Dem_EvMemGetEventMemEventIdByPtr',0,3,20,152,1,28
	.word	862
	.byte	1,1,5
	.byte	'EventMemory',0,20,152,1,93
	.word	6662
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemTimeIdByPtr',0,3,20,170,1,19
	.word	1373
	.byte	1,1,5
	.byte	'EventMemory',0,20,170,1,83
	.word	6662
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemDtcStatusByPtr',0,3,20,188,1,18
	.word	145
	.byte	1,1,5
	.byte	'EventMemory',0,20,188,1,85
	.word	6662
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemFailureCounterByPtr',0,3,20,216,1,24
	.word	6204
	.byte	1,1,5
	.byte	'EventMemory',0,20,216,1,96
	.word	6662
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemOccurrenceCounterByPtr',0,3,20,233,1,25
	.word	6204
	.byte	1,1,5
	.byte	'EventMemory',0,20,233,1,100
	.word	6662
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemAgingCounterByPtr',0,3,20,133,2,25
	.word	6204
	.byte	1,1,5
	.byte	'EventMemory',0,20,133,2,95
	.word	6662
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemAgingCounter',0,3,20,144,2,25
	.word	6204
	.byte	1,1,5
	.byte	'LocId',0,20,144,2,71
	.word	6204
	.byte	7,6,0,0,4
	.byte	'Dem_EvMemSetEventMemAgingCounter',0,3,20,150,2,17,1,1,5
	.byte	'LocId',0,20,150,2,63
	.word	6204
	.byte	5
	.byte	'AgingCounter',0,20,150,2,83
	.word	6204
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr',0,3,20,161,2,25
	.word	6204
	.byte	1,1,5
	.byte	'EventMemory',0,20,161,2,103
	.word	6662
	.byte	6,0,2
	.byte	'char',0,1,6,8
	.byte	'Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr',0,3,20,213,2,18
	.word	7448
	.byte	1,1,5
	.byte	'EventMemory',0,20,213,2,92
	.word	6662
	.byte	6,0,8
	.byte	'Dem_EvMemGetMaxFdcSinceLastClearByPtr',0,3,20,224,2,18
	.word	7448
	.byte	1,1,5
	.byte	'EventMemory',0,20,224,2,88
	.word	6662
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemFreezeFrameCounterByPtr',0,3,20,238,3,25
	.word	6204
	.byte	1,1,5
	.byte	'EventMemory',0,20,238,3,101
	.word	6662
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemTriggerByPtr',0,3,20,141,4,28
	.word	145
	.byte	1,1,5
	.byte	'EventMemory',0,20,141,4,93
	.word	6662
	.byte	6,0,3
	.word	6489
	.byte	8
	.byte	'Dem_EvMemGetEventMemDataByPtr',0,3,20,170,4,19
	.word	162
	.byte	1,1,5
	.byte	'EventMemory',0,20,170,4,75
	.word	7753
	.byte	6,0,8
	.byte	'Dem_EvMemIsStored',0,3,20,206,4,30
	.word	145
	.byte	1,1,5
	.byte	'Status',0,20,206,4,61
	.word	6204
	.byte	6,0,8
	.byte	'Dem_EvMemIsEmpty',0,3,20,211,4,30
	.word	145
	.byte	1,1,5
	.byte	'Status',0,20,211,4,60
	.word	6204
	.byte	6,0,8
	.byte	'Dem_EvMemSetToEmpty',0,3,20,226,4,25
	.word	6204
	.byte	1,1,6,0,8
	.byte	'Dem_EvMemGetShadowVisibility',0,3,20,242,4,30
	.word	145
	.byte	1,1,6,0,8
	.byte	'Dem_EvMemGetEventMemStartLocId',0,3,20,131,5,25
	.word	6204
	.byte	1,1,5
	.byte	'MemId',0,20,131,5,69
	.word	6204
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemEndLocId',0,3,20,143,5,25
	.word	6204
	.byte	1,1,5
	.byte	'MemId',0,20,143,5,67
	.word	6204
	.byte	6,0,3
	.word	6204
	.byte	4
	.byte	'Dem_EvMemEventMemoryIteratorNew',0,3,20,179,5,17,1,1,5
	.byte	'MemId',0,20,179,5,63
	.word	8113
	.byte	6,0,9
	.word	6204
	.byte	3
	.word	8175
	.byte	8
	.byte	'Dem_EvMemEventMemoryIteratorIsValid',0,3,20,184,5,30
	.word	145
	.byte	1,1,5
	.byte	'MemId',0,20,184,5,86
	.word	8180
	.byte	6,0,4
	.byte	'Dem_EvMemEventMemoryIteratorNext',0,3,20,189,5,17,1,1,5
	.byte	'MemId',0,20,189,5,64
	.word	8113
	.byte	6,0,8
	.byte	'Dem_EvMemIsEdgeTrigger',0,3,20,247,5,30
	.word	145
	.byte	1,1,5
	.byte	'StatusOld',0,20,247,5,66
	.word	6204
	.byte	5
	.byte	'StatusNew',0,20,247,5,90
	.word	6204
	.byte	5
	.byte	'Trigger',0,20,247,5,114
	.word	6204
	.byte	6,0,8
	.byte	'Dem_EvMemGetRamStsMask',0,3,20,154,7,25
	.word	6204
	.byte	1,1,5
	.byte	'EventId',0,20,154,7,64
	.word	862
	.byte	7,6,0,0,8
	.byte	'Dem_EvMemGetCurrentAgingCycleCounterInt',0,3,22,20,25
	.word	6204
	.byte	1,1,5
	.byte	'EventId',0,22,20,81
	.word	862
	.byte	6,0,8
	.byte	'Dem_EvMemIsAged',0,3,22,61,30
	.word	145
	.byte	1,1,5
	.byte	'EventId',0,22,61,62
	.word	862
	.byte	5
	.byte	'LocId',0,22,61,84
	.word	6204
	.byte	5
	.byte	'StatusNew',0,22,61,104
	.word	6204
	.byte	6,0,8
	.byte	'Dem_EvMemGetMemIdForDTCOrigin',0,3,23,150,1,25
	.word	6204
	.byte	1,1,5
	.byte	'DTCOrigin',0,23,150,1,73
	.word	145
	.byte	6,0,8
	.byte	'Dem_EvMemGetMemIdForEvent',0,3,23,222,1,25
	.word	6204
	.byte	1,1,5
	.byte	'EventId',0,23,222,1,67
	.word	862
	.byte	7,6,0,0,8
	.byte	'Dem_DtcIsSuppressed',0,3,24,118,30
	.word	145
	.byte	1,1,5
	.byte	'dtcId',0,24,118,65
	.word	862
	.byte	7,6,0,0,8
	.byte	'Dem_DtcIsSuppressedDirectly',0,3,24,128,1,30
	.word	145
	.byte	1,1,5
	.byte	'dtcId',0,24,128,1,73
	.word	862
	.byte	6,0,8
	.byte	'Dem_EventUsesOrigin',0,3,24,137,2,30
	.word	145
	.byte	1,1,5
	.byte	'eventId',0,24,137,2,67
	.word	862
	.byte	5
	.byte	'origin',0,24,137,2,94
	.word	145
	.byte	7,6,6,6,0,0
.L120:
	.byte	8
	.byte	'Dem_IsEventReportingEnabledByDtcSetting',0,3,24,176,2,30
	.word	145
	.byte	1,1
.L121:
	.byte	5
	.byte	'EventId',0,24,176,2,86
	.word	862
.L123:
	.byte	6,0,4
	.byte	'Dem_CallBackTriggerOnEventStatus',0,3,25,17,17,1,1,5
	.byte	'EventId',0,25,18,19
	.word	862
	.byte	5
	.byte	'EventStatusOld',0,25,19,25
	.word	145
	.byte	5
	.byte	'EventStatusNew',0,25,20,25
	.word	145
	.byte	5
	.byte	'dtcStByteOld',0,25,21,25
	.word	145
	.byte	6,0,3
	.word	145
.L124:
	.byte	4
	.byte	'Dem_StatusChange_GetOldStatus',0,3,25,59,17,1,1
.L127:
	.byte	5
	.byte	'EventId',0,25,60,19
	.word	862
.L129:
	.byte	5
	.byte	'isoByteOld',0,25,61,26
	.word	9097
.L131:
	.byte	5
	.byte	'dtcStByteOld',0,25,62,26
	.word	9097
.L133:
	.byte	7,6,0,0,16
	.word	167
	.byte	17
	.word	197
	.byte	17
	.word	212
	.byte	6,0,16
	.word	235
	.byte	17
	.word	267
	.byte	17
	.word	282
	.byte	6,0,16
	.word	305
	.byte	17
	.word	341
	.byte	17
	.word	356
	.byte	17
	.word	377
	.byte	7,18
	.word	167
	.byte	17
	.word	197
	.byte	17
	.word	212
	.byte	19
	.word	233
	.byte	0,6,18
	.word	235
	.byte	17
	.word	267
	.byte	17
	.word	282
	.byte	19
	.word	303
	.byte	0,6,0,0,16
	.word	406
	.byte	17
	.word	446
	.byte	17
	.word	460
	.byte	6,0,16
	.word	483
	.byte	17
	.word	519
	.byte	17
	.word	533
	.byte	7,18
	.word	406
	.byte	17
	.word	446
	.byte	17
	.word	460
	.byte	19
	.word	481
	.byte	0,6,0,0,16
	.word	558
	.byte	17
	.word	593
	.byte	17
	.word	607
	.byte	17
	.word	628
	.byte	6,0,16
	.word	653
	.byte	17
	.word	686
	.byte	17
	.word	700
	.byte	17
	.word	721
	.byte	6,0,16
	.word	746
	.byte	17
	.word	783
	.byte	17
	.word	797
	.byte	17
	.word	818
	.byte	17
	.word	841
	.byte	7,18
	.word	653
	.byte	17
	.word	686
	.byte	17
	.word	700
	.byte	17
	.word	721
	.byte	19
	.word	744
	.byte	0,6,0,0,16
	.word	889
	.byte	17
	.word	920
	.byte	17
	.word	935
	.byte	6,0,16
	.word	958
	.byte	17
	.word	991
	.byte	17
	.word	1006
	.byte	6,0,16
	.word	1029
	.byte	17
	.word	1070
	.byte	17
	.word	1084
	.byte	6,0,16
	.word	1107
	.byte	17
	.word	1144
	.byte	17
	.word	1158
	.byte	7,18
	.word	1029
	.byte	17
	.word	1070
	.byte	17
	.word	1084
	.byte	19
	.word	1105
	.byte	0,6,0,0,16
	.word	1183
	.byte	17
	.word	1219
	.byte	17
	.word	1233
	.byte	17
	.word	1254
	.byte	6,0,16
	.word	1279
	.byte	17
	.word	1313
	.byte	17
	.word	1327
	.byte	17
	.word	1348
	.byte	6,0,16
	.word	1394
	.byte	17
	.word	1425
	.byte	17
	.word	1440
	.byte	6,0,16
	.word	1463
	.byte	17
	.word	1496
	.byte	17
	.word	1511
	.byte	6,0,16
	.word	1534
	.byte	17
	.word	1575
	.byte	17
	.word	1589
	.byte	6,0,16
	.word	1612
	.byte	17
	.word	1649
	.byte	17
	.word	1663
	.byte	7,18
	.word	1534
	.byte	17
	.word	1575
	.byte	17
	.word	1589
	.byte	19
	.word	1610
	.byte	0,6,0,0,16
	.word	1688
	.byte	17
	.word	1722
	.byte	17
	.word	1736
	.byte	17
	.word	1757
	.byte	6,0,16
	.word	1782
	.byte	17
	.word	1822
	.byte	7,18
	.word	483
	.byte	17
	.word	519
	.byte	17
	.word	533
	.byte	20
	.word	554
	.byte	18
	.word	406
	.byte	17
	.word	446
	.byte	17
	.word	460
	.byte	19
	.word	481
	.byte	0,19
	.word	555
	.byte	0,0,6,0,0,16
	.word	1839
	.byte	17
	.word	1883
	.byte	7,18
	.word	483
	.byte	17
	.word	519
	.byte	17
	.word	533
	.byte	20
	.word	554
	.byte	18
	.word	406
	.byte	17
	.word	446
	.byte	17
	.word	460
	.byte	19
	.word	481
	.byte	0,19
	.word	555
	.byte	0,0,6,0,0,16
	.word	1901
	.byte	17
	.word	1947
	.byte	7,18
	.word	483
	.byte	17
	.word	519
	.byte	17
	.word	533
	.byte	20
	.word	554
	.byte	18
	.word	406
	.byte	17
	.word	446
	.byte	17
	.word	460
	.byte	19
	.word	481
	.byte	0,19
	.word	555
	.byte	0,0,6,0,0,16
	.word	1965
	.byte	17
	.word	2006
	.byte	7,18
	.word	483
	.byte	17
	.word	519
	.byte	17
	.word	533
	.byte	20
	.word	554
	.byte	18
	.word	406
	.byte	17
	.word	446
	.byte	17
	.word	460
	.byte	19
	.word	481
	.byte	0,19
	.word	555
	.byte	0,0,6,0,0,16
	.word	2024
	.byte	17
	.word	2080
	.byte	7,18
	.word	483
	.byte	17
	.word	519
	.byte	17
	.word	533
	.byte	20
	.word	554
	.byte	18
	.word	406
	.byte	17
	.word	446
	.byte	17
	.word	460
	.byte	19
	.word	481
	.byte	0,19
	.word	555
	.byte	0,0,6,0,0,16
	.word	2098
	.byte	17
	.word	2136
	.byte	17
	.word	2150
	.byte	7,18
	.word	305
	.byte	17
	.word	341
	.byte	17
	.word	356
	.byte	17
	.word	377
	.byte	20
	.word	401
	.byte	18
	.word	167
	.byte	17
	.word	197
	.byte	17
	.word	212
	.byte	19
	.word	233
	.byte	0,19
	.word	402
	.byte	18
	.word	235
	.byte	17
	.word	267
	.byte	17
	.word	282
	.byte	19
	.word	303
	.byte	0,19
	.word	403
	.byte	0,0,6,0,0,16
	.word	2174
	.byte	17
	.word	2215
	.byte	17
	.word	2229
	.byte	7,18
	.word	305
	.byte	17
	.word	341
	.byte	17
	.word	356
	.byte	17
	.word	377
	.byte	20
	.word	401
	.byte	18
	.word	167
	.byte	17
	.word	197
	.byte	17
	.word	212
	.byte	19
	.word	233
	.byte	0,19
	.word	402
	.byte	18
	.word	235
	.byte	17
	.word	267
	.byte	17
	.word	282
	.byte	19
	.word	303
	.byte	0,19
	.word	403
	.byte	0,0,6,0,0,16
	.word	2253
	.byte	17
	.word	2294
	.byte	17
	.word	2308
	.byte	7,18
	.word	305
	.byte	17
	.word	341
	.byte	17
	.word	356
	.byte	17
	.word	377
	.byte	20
	.word	401
	.byte	18
	.word	167
	.byte	17
	.word	197
	.byte	17
	.word	212
	.byte	19
	.word	233
	.byte	0,19
	.word	402
	.byte	18
	.word	235
	.byte	17
	.word	267
	.byte	17
	.word	282
	.byte	19
	.word	303
	.byte	0,19
	.word	403
	.byte	0,0,6,0,0,16
	.word	2332
	.byte	17
	.word	2375
	.byte	17
	.word	2389
	.byte	7,18
	.word	305
	.byte	17
	.word	341
	.byte	17
	.word	356
	.byte	17
	.word	377
	.byte	20
	.word	401
	.byte	18
	.word	167
	.byte	17
	.word	197
	.byte	17
	.word	212
	.byte	19
	.word	233
	.byte	0,19
	.word	402
	.byte	18
	.word	235
	.byte	17
	.word	267
	.byte	17
	.word	282
	.byte	19
	.word	303
	.byte	0,19
	.word	403
	.byte	0,0,6,0,0,16
	.word	2413
	.byte	17
	.word	2456
	.byte	17
	.word	2470
	.byte	7,18
	.word	305
	.byte	17
	.word	341
	.byte	17
	.word	356
	.byte	17
	.word	377
	.byte	20
	.word	401
	.byte	18
	.word	167
	.byte	17
	.word	197
	.byte	17
	.word	212
	.byte	19
	.word	233
	.byte	0,19
	.word	402
	.byte	18
	.word	235
	.byte	17
	.word	267
	.byte	17
	.word	282
	.byte	19
	.word	303
	.byte	0,19
	.word	403
	.byte	0,0,6,0,0,16
	.word	2494
	.byte	17
	.word	2532
	.byte	17
	.word	2546
	.byte	7,18
	.word	305
	.byte	17
	.word	341
	.byte	17
	.word	356
	.byte	17
	.word	377
	.byte	20
	.word	401
	.byte	18
	.word	167
	.byte	17
	.word	197
	.byte	17
	.word	212
	.byte	19
	.word	233
	.byte	0,19
	.word	402
	.byte	18
	.word	235
	.byte	17
	.word	267
	.byte	17
	.word	282
	.byte	19
	.word	303
	.byte	0,19
	.word	403
	.byte	0,0,6,0,0,16
	.word	2570
	.byte	17
	.word	2610
	.byte	17
	.word	2624
	.byte	7,18
	.word	305
	.byte	17
	.word	341
	.byte	17
	.word	356
	.byte	17
	.word	377
	.byte	20
	.word	401
	.byte	18
	.word	167
	.byte	17
	.word	197
	.byte	17
	.word	212
	.byte	19
	.word	233
	.byte	0,19
	.word	402
	.byte	18
	.word	235
	.byte	17
	.word	267
	.byte	17
	.word	282
	.byte	19
	.word	303
	.byte	0,19
	.word	403
	.byte	0,0,6,0,0,16
	.word	2648
	.byte	17
	.word	2701
	.byte	17
	.word	2715
	.byte	7,18
	.word	305
	.byte	17
	.word	341
	.byte	17
	.word	356
	.byte	17
	.word	377
	.byte	20
	.word	401
	.byte	18
	.word	167
	.byte	17
	.word	197
	.byte	17
	.word	212
	.byte	19
	.word	233
	.byte	0,19
	.word	402
	.byte	18
	.word	235
	.byte	17
	.word	267
	.byte	17
	.word	282
	.byte	19
	.word	303
	.byte	0,19
	.word	403
	.byte	0,0,6,0,0,16
	.word	2739
	.byte	17
	.word	2765
	.byte	17
	.word	2780
	.byte	6,0,16
	.word	2803
	.byte	17
	.word	2831
	.byte	17
	.word	2846
	.byte	6,0,16
	.word	2869
	.byte	17
	.word	2901
	.byte	17
	.word	2916
	.byte	17
	.word	2937
	.byte	7,18
	.word	2739
	.byte	17
	.word	2765
	.byte	17
	.word	2780
	.byte	19
	.word	2801
	.byte	0,6,18
	.word	2803
	.byte	17
	.word	2831
	.byte	17
	.word	2846
	.byte	19
	.word	2867
	.byte	0,6,0,0,16
	.word	2976
	.byte	17
	.word	3008
	.byte	17
	.word	3023
	.byte	6,0,21
	.byte	'Det_ReportError',0,26,112,16
	.word	145
	.byte	1,1,1,1,5
	.byte	'ModuleId',0,26,112,39
	.word	862
	.byte	5
	.byte	'InstanceId',0,26,112,55
	.word	145
	.byte	5
	.byte	'ApiId',0,26,112,73
	.word	145
	.byte	5
	.byte	'ErrorId',0,26,112,86
	.word	145
	.byte	0,16
	.word	3046
	.byte	17
	.word	3084
	.byte	6,0,16
	.word	3104
	.byte	17
	.word	3143
	.byte	6,0,16
	.word	3164
	.byte	17
	.word	3194
	.byte	6,0,16
	.word	3214
	.byte	17
	.word	3245
	.byte	6,0,16
	.word	3265
	.byte	17
	.word	3295
	.byte	6,0,16
	.word	3313
	.byte	17
	.word	3342
	.byte	6,0,16
	.word	3356
	.byte	17
	.word	3389
	.byte	6,0,16
	.word	3403
	.byte	17
	.word	3435
	.byte	6,0,16
	.word	3452
	.byte	17
	.word	3489
	.byte	7,18
	.word	3403
	.byte	17
	.word	3435
	.byte	19
	.word	3450
	.byte	0,6,0,0,16
	.word	3508
	.byte	17
	.word	3542
	.byte	6,0,16
	.word	3611
	.byte	17
	.word	3655
	.byte	17
	.word	3667
	.byte	7,18
	.word	3313
	.byte	17
	.word	3342
	.byte	19
	.word	3354
	.byte	0,6,0,0,16
	.word	3696
	.byte	17
	.word	3739
	.byte	6,0,16
	.word	3753
	.byte	17
	.word	3789
	.byte	6,0,16
	.word	3803
	.byte	17
	.word	3846
	.byte	6,0,16
	.word	3860
	.byte	17
	.word	3895
	.byte	6,0,16
	.word	3925
	.byte	17
	.word	3959
	.byte	6,0,16
	.word	3974
	.byte	17
	.word	4006
	.byte	6,0,16
	.word	4019
	.byte	6,0,16
	.word	4047
	.byte	17
	.word	4100
	.byte	7,18
	.word	3104
	.byte	17
	.word	3143
	.byte	19
	.word	3162
	.byte	0,6,0,0,16
	.word	4116
	.byte	17
	.word	4169
	.byte	7,18
	.word	3046
	.byte	17
	.word	3084
	.byte	19
	.word	3102
	.byte	0,6,0,0,16
	.word	4185
	.byte	17
	.word	4236
	.byte	6,0,16
	.word	4251
	.byte	17
	.word	4301
	.byte	7,18
	.word	1107
	.byte	17
	.word	1144
	.byte	17
	.word	1158
	.byte	20
	.word	1179
	.byte	18
	.word	1029
	.byte	17
	.word	1070
	.byte	17
	.word	1084
	.byte	19
	.word	1105
	.byte	0,19
	.word	1180
	.byte	0,0,6,0,0,16
	.word	4318
	.byte	17
	.word	4370
	.byte	6,0,16
	.word	4385
	.byte	17
	.word	4434
	.byte	6,0,16
	.word	4449
	.byte	17
	.word	4489
	.byte	7,18
	.word	1107
	.byte	17
	.word	1144
	.byte	17
	.word	1158
	.byte	20
	.word	1179
	.byte	18
	.word	1029
	.byte	17
	.word	1070
	.byte	17
	.word	1084
	.byte	19
	.word	1105
	.byte	0,19
	.word	1180
	.byte	0,0,6,0,0,16
	.word	4506
	.byte	17
	.word	4550
	.byte	6,0,16
	.word	4565
	.byte	17
	.word	4606
	.byte	6,0,16
	.word	4622
	.byte	17
	.word	4665
	.byte	6,0,16
	.word	4681
	.byte	17
	.word	4729
	.byte	6,0,16
	.word	4745
	.byte	17
	.word	4799
	.byte	7,18
	.word	1183
	.byte	17
	.word	1219
	.byte	17
	.word	1233
	.byte	17
	.word	1254
	.byte	19
	.word	1277
	.byte	0,6,0,0,16
	.word	4817
	.byte	17
	.word	4860
	.byte	6,0,16
	.word	4876
	.byte	17
	.word	4921
	.byte	6,0,16
	.word	4950
	.byte	17
	.word	4986
	.byte	6,0,16
	.word	5005
	.byte	17
	.word	5045
	.byte	6,0,16
	.word	5064
	.byte	6,0,16
	.word	5117
	.byte	17
	.word	5153
	.byte	7,18
	.word	1394
	.byte	17
	.word	1425
	.byte	17
	.word	1440
	.byte	19
	.word	1461
	.byte	0,6,0,0,16
	.word	5173
	.byte	17
	.word	5201
	.byte	17
	.word	5218
	.byte	7,18
	.word	305
	.byte	17
	.word	341
	.byte	17
	.word	356
	.byte	17
	.word	377
	.byte	20
	.word	401
	.byte	18
	.word	167
	.byte	17
	.word	197
	.byte	17
	.word	212
	.byte	19
	.word	233
	.byte	0,19
	.word	402
	.byte	18
	.word	235
	.byte	17
	.word	267
	.byte	17
	.word	282
	.byte	19
	.word	303
	.byte	0,19
	.word	403
	.byte	0,0,6,0,0,16
	.word	5240
	.byte	17
	.word	5273
	.byte	7,18
	.word	483
	.byte	17
	.word	519
	.byte	17
	.word	533
	.byte	20
	.word	554
	.byte	18
	.word	406
	.byte	17
	.word	446
	.byte	17
	.word	460
	.byte	19
	.word	481
	.byte	0,19
	.word	555
	.byte	0,0,6,0,0,16
	.word	5294
	.byte	17
	.word	5326
	.byte	7,18
	.word	483
	.byte	17
	.word	519
	.byte	17
	.word	533
	.byte	20
	.word	554
	.byte	18
	.word	406
	.byte	17
	.word	446
	.byte	17
	.word	460
	.byte	19
	.word	481
	.byte	0,19
	.word	555
	.byte	0,0,6,0,0,16
	.word	5347
	.byte	17
	.word	5376
	.byte	6,0,16
	.word	5394
	.byte	17
	.word	5430
	.byte	7,18
	.word	2648
	.byte	17
	.word	2701
	.byte	17
	.word	2715
	.byte	20
	.word	2735
	.byte	18
	.word	305
	.byte	17
	.word	341
	.byte	17
	.word	356
	.byte	17
	.word	377
	.byte	20
	.word	401
	.byte	18
	.word	167
	.byte	17
	.word	197
	.byte	17
	.word	212
	.byte	19
	.word	233
	.byte	0,19
	.word	402
	.byte	18
	.word	235
	.byte	17
	.word	267
	.byte	17
	.word	282
	.byte	19
	.word	303
	.byte	0,19
	.word	403
	.byte	0,0,19
	.word	2736
	.byte	0,0,6,0,0,16
	.word	5451
	.byte	17
	.word	5488
	.byte	7,18
	.word	2648
	.byte	17
	.word	2701
	.byte	17
	.word	2715
	.byte	20
	.word	2735
	.byte	18
	.word	305
	.byte	17
	.word	341
	.byte	17
	.word	356
	.byte	17
	.word	377
	.byte	20
	.word	401
	.byte	18
	.word	167
	.byte	17
	.word	197
	.byte	17
	.word	212
	.byte	19
	.word	233
	.byte	0,19
	.word	402
	.byte	18
	.word	235
	.byte	17
	.word	267
	.byte	17
	.word	282
	.byte	19
	.word	303
	.byte	0,19
	.word	403
	.byte	0,0,19
	.word	2736
	.byte	0,0,6,0,0,16
	.word	5519
	.byte	17
	.word	5557
	.byte	17
	.word	5572
	.byte	17
	.word	5588
	.byte	6,0,16
	.word	5619
	.byte	17
	.word	5659
	.byte	17
	.word	5675
	.byte	6,0,16
	.word	5701
	.byte	17
	.word	5759
	.byte	6,0,16
	.word	5780
	.byte	17
	.word	5835
	.byte	6,0,16
	.word	5856
	.byte	17
	.word	5909
	.byte	6,0,16
	.word	5928
	.byte	17
	.word	5974
	.byte	6,0,16
	.word	5990
	.byte	17
	.word	6055
	.byte	7,18
	.word	3164
	.byte	17
	.word	3194
	.byte	19
	.word	3212
	.byte	0,6,18
	.word	3164
	.byte	17
	.word	3194
	.byte	19
	.word	3212
	.byte	0,6,18
	.word	5780
	.byte	17
	.word	5835
	.byte	19
	.word	5854
	.byte	0,6,18
	.word	5519
	.byte	17
	.word	5557
	.byte	17
	.word	5572
	.byte	17
	.word	5588
	.byte	19
	.word	5607
	.byte	0,6,0,0,16
	.word	6084
	.byte	17
	.word	6109
	.byte	17
	.word	6125
	.byte	6,0,16
	.word	6147
	.byte	17
	.word	6181
	.byte	6,0,16
	.word	6225
	.byte	17
	.word	6277
	.byte	17
	.word	6293
	.byte	6,0,16
	.word	6313
	.byte	17
	.word	6346
	.byte	6,0,16
	.word	6362
	.byte	17
	.word	6403
	.byte	6,0,16
	.word	6667
	.byte	17
	.word	6711
	.byte	6,0,16
	.word	6734
	.byte	17
	.word	6773
	.byte	7,18
	.word	6667
	.byte	17
	.word	6711
	.byte	19
	.word	6732
	.byte	0,6,0,0,16
	.word	6792
	.byte	17
	.word	6837
	.byte	6,0,16
	.word	6860
	.byte	17
	.word	6904
	.byte	6,0,16
	.word	6927
	.byte	17
	.word	6974
	.byte	6,0,16
	.word	6997
	.byte	17
	.word	7049
	.byte	6,0,16
	.word	7072
	.byte	17
	.word	7127
	.byte	6,0,16
	.word	7150
	.byte	17
	.word	7200
	.byte	6,0,16
	.word	7223
	.byte	17
	.word	7268
	.byte	7,18
	.word	7150
	.byte	17
	.word	7200
	.byte	19
	.word	7221
	.byte	0,6,0,0,16
	.word	7287
	.byte	17
	.word	7328
	.byte	17
	.word	7343
	.byte	6,0,16
	.word	7367
	.byte	17
	.word	7425
	.byte	6,0,16
	.word	7456
	.byte	17
	.word	7510
	.byte	6,0,16
	.word	7533
	.byte	17
	.word	7583
	.byte	6,0,16
	.word	7606
	.byte	17
	.word	7662
	.byte	6,0,16
	.word	7685
	.byte	17
	.word	7730
	.byte	6,0,16
	.word	7758
	.byte	17
	.word	7800
	.byte	6,0,16
	.word	7823
	.byte	17
	.word	7853
	.byte	6,0,16
	.word	7871
	.byte	17
	.word	7900
	.byte	6,0,16
	.word	7918
	.byte	6,0,16
	.word	7952
	.byte	6,0,16
	.word	7995
	.byte	17
	.word	8038
	.byte	6,0,16
	.word	8055
	.byte	17
	.word	8096
	.byte	6,0,16
	.word	8118
	.byte	17
	.word	8158
	.byte	6,0,16
	.word	8185
	.byte	17
	.word	8233
	.byte	6,0,16
	.word	8250
	.byte	17
	.word	8291
	.byte	6,0,16
	.word	8308
	.byte	17
	.word	8343
	.byte	17
	.word	8362
	.byte	17
	.word	8381
	.byte	6,0,16
	.word	8400
	.byte	17
	.word	8435
	.byte	7,18
	.word	4185
	.byte	17
	.word	4236
	.byte	19
	.word	4249
	.byte	0,6,0,0,16
	.word	8456
	.byte	17
	.word	8507
	.byte	6,0,16
	.word	8525
	.byte	17
	.word	8552
	.byte	17
	.word	8568
	.byte	17
	.word	8582
	.byte	6,0,16
	.word	8602
	.byte	17
	.word	8644
	.byte	6,0,16
	.word	8665
	.byte	17
	.word	8703
	.byte	7,18
	.word	4251
	.byte	17
	.word	4301
	.byte	20
	.word	4314
	.byte	18
	.word	1107
	.byte	17
	.word	1144
	.byte	17
	.word	1158
	.byte	20
	.word	1179
	.byte	18
	.word	1029
	.byte	17
	.word	1070
	.byte	17
	.word	1084
	.byte	19
	.word	1105
	.byte	0,19
	.word	1180
	.byte	0,0,19
	.word	4315
	.byte	0,0,6,0,0,16
	.word	8724
	.byte	17
	.word	8755
	.byte	7,18
	.word	483
	.byte	17
	.word	519
	.byte	17
	.word	533
	.byte	20
	.word	554
	.byte	18
	.word	406
	.byte	17
	.word	446
	.byte	17
	.word	460
	.byte	19
	.word	481
	.byte	0,19
	.word	555
	.byte	0,0,6,0,0,16
	.word	8773
	.byte	17
	.word	8813
	.byte	6,0,16
	.word	8830
	.byte	17
	.word	8862
	.byte	17
	.word	8879
	.byte	7,18
	.word	4318
	.byte	17
	.word	4370
	.byte	19
	.word	4383
	.byte	0,6,18
	.word	4385
	.byte	17
	.word	4434
	.byte	19
	.word	4447
	.byte	0,6,18
	.word	4251
	.byte	17
	.word	4301
	.byte	20
	.word	4314
	.byte	18
	.word	1107
	.byte	17
	.word	1144
	.byte	17
	.word	1158
	.byte	20
	.word	1179
	.byte	18
	.word	1029
	.byte	17
	.word	1070
	.byte	17
	.word	1084
	.byte	19
	.word	1105
	.byte	0,19
	.word	1180
	.byte	0,0,19
	.word	4315
	.byte	0,0,6,0,0,21
	.byte	'Dem_IsEventEnabledByDtcSetting',0,24,174,2,19
	.word	145
	.byte	1,1,1,1,5
	.byte	'EventId',0,24,174,2,66
	.word	862
	.byte	0,16
	.word	8901
	.byte	17
	.word	8953
	.byte	6,0,16
	.word	8972
	.byte	17
	.word	9012
	.byte	17
	.word	9028
	.byte	17
	.word	9051
	.byte	17
	.word	9074
	.byte	6,0,16
	.word	9102
	.byte	17
	.word	9139
	.byte	17
	.word	9155
	.byte	17
	.word	9174
	.byte	7,18
	.word	5347
	.byte	17
	.word	5376
	.byte	19
	.word	5392
	.byte	0,6,0,0,22,1,3
	.word	13234
	.byte	23
	.byte	'__codeptr',0,27,1,1
	.word	13236
	.byte	23
	.byte	'sint8',0,28,76,25
	.word	7448
	.byte	23
	.byte	'uint8',0,28,81,25
	.word	145
	.byte	23
	.byte	'sint16',0,28,86,25
	.word	4937
	.byte	23
	.byte	'uint16',0,28,91,25
	.word	862
	.byte	2
	.byte	'int',0,4,5,23
	.byte	'sint32',0,28,96,24
	.word	13317
	.byte	23
	.byte	'uint32',0,28,106,24
	.word	1373
	.byte	2
	.byte	'unsigned long long int',0,8,7,23
	.byte	'uint64',0,28,111,30
	.word	13354
	.byte	23
	.byte	'boolean',0,28,127,25
	.word	145
	.byte	23
	.byte	'uint8_least',0,28,137,1,25
	.word	6204
	.byte	23
	.byte	'uint16_least',0,28,147,1,25
	.word	6204
	.byte	23
	.byte	'StatusType',0,29,191,1,27
	.word	145
	.byte	23
	.byte	'Std_ReturnType',0,29,199,1,15
	.word	145
	.byte	10,29,206,1,9,8,11
	.byte	'vendorID',0
	.word	862
	.byte	2,2,35,0,11
	.byte	'moduleID',0
	.word	862
	.byte	2,2,35,2,11
	.byte	'sw_major_version',0
	.word	145
	.byte	1,2,35,4,11
	.byte	'sw_minor_version',0
	.word	145
	.byte	1,2,35,5,11
	.byte	'sw_patch_version',0
	.word	145
	.byte	1,2,35,6,0,23
	.byte	'Std_VersionInfoType',0,29,213,1,3
	.word	13498
	.byte	23
	.byte	'Dem_ClientRequestType',0,30,46,16
	.word	862
	.byte	23
	.byte	'Dem_ClientResultType',0,30,47,16
	.word	862
	.byte	23
	.byte	'Dem_ClientSelectionType',0,30,48,16
	.word	1373
	.byte	23
	.byte	'Dem_ClientPriorityType',0,30,50,15
	.word	145
	.byte	23
	.byte	'Dem_ComponentIdType',0,31,20,15
	.word	145
	.byte	23
	.byte	'PduIdType',0,32,22,19
	.word	862
	.byte	23
	.byte	'PduLengthType',0,32,26,19
	.word	862
	.byte	24,33,113,9,4,25
	.byte	'TP_DATACONF',0,0,25
	.byte	'TP_DATARETRY',0,1,25
	.byte	'TP_CONFPENDING',0,2,0,23
	.byte	'TpDataStateType',0,33,118,3
	.word	13838
	.byte	23
	.byte	'Can_IdType',0,34,32,16
	.word	1373
	.byte	23
	.byte	'Can_HwHandleType',0,34,43,16
	.word	862
	.byte	10,35,93,9,8,11
	.byte	'Class',0
	.word	145
	.byte	1,2,35,0,11
	.byte	'TIN',0
	.word	145
	.byte	1,2,35,1,11
	.byte	'ReturnAddress',0
	.word	1373
	.byte	4,2,35,4,0,23
	.byte	'OsTrapInfoType',0,35,97,3
	.word	13958
	.byte	14,68
	.word	1373
	.byte	15,16,0,10,35,154,1,9,68,11
	.byte	'store',0
	.word	14038
	.byte	68,2,35,0,0,14,68
	.word	14047
	.byte	15,0,0,23
	.byte	'Os_JumpBufType',0,35,156,1,3
	.word	14069
	.byte	23
	.byte	'Os_StackTraceType',0,35,174,1,18
	.word	1373
	.byte	10,35,175,1,9,8,11
	.byte	'sp',0
	.word	1373
	.byte	4,2,35,0,11
	.byte	'ctx',0
	.word	1373
	.byte	4,2,35,4,0,23
	.byte	'Os_StackValueType',0,35,175,1,63
	.word	14129
	.byte	23
	.byte	'Os_StackSizeType',0,35,176,1,27
	.word	14129
	.byte	26,1,1,3
	.word	14214
	.byte	23
	.byte	'Os_VoidVoidFunctionType',0,35,179,1,16
	.word	14217
	.byte	23
	.byte	'ApplicationType',0,35,193,1,23
	.word	145
	.byte	27
	.byte	'Os_ApplicationConfigurationType_s',0,35,198,1,16,2,11
	.byte	'app_id',0
	.word	145
	.byte	1,2,35,0,11
	.byte	'access',0
	.word	145
	.byte	1,2,35,1,0,23
	.byte	'Os_ApplicationConfigurationType',0,35,201,1,3
	.word	14280
	.byte	23
	.byte	'Os_CoreStateType',0,35,203,1,16
	.word	1373
	.byte	23
	.byte	'AreaIdType',0,35,204,1,16
	.word	862
	.byte	23
	.byte	'Os_PeripheralAddressType',0,35,212,1,22
	.word	1373
	.byte	23
	.byte	'TickType',0,35,221,1,22
	.word	1373
	.byte	23
	.byte	'Os_StopwatchTickType',0,35,225,1,22
	.word	1373
	.byte	23
	.byte	'Os_Lockable',0,35,234,1,18
	.word	1389
	.byte	23
	.byte	'CoreIdType',0,35,236,1,16
	.word	862
	.byte	23
	.byte	'SpinlockIdType',0,35,237,1,16
	.word	862
	.byte	24,35,239,1,9,4,25
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,25
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,23
	.byte	'TryToGetSpinlockType',0,35,239,1,74
	.word	14587
	.byte	24,35,174,2,9,4,25
	.byte	'APPLICATION_ACCESSIBLE',0,0,25
	.byte	'APPLICATION_RESTARTING',0,1,25
	.byte	'APPLICATION_TERMINATED',0,2,0,23
	.byte	'ApplicationStateType',0,35,174,2,92
	.word	14680
	.byte	28
	.byte	'void',0,3
	.word	14792
	.byte	29,1,1,30
	.word	145
	.byte	30
	.word	14798
	.byte	0,3
	.word	14803
	.byte	23
	.byte	'Os_FunctionEntryType',0,35,183,2,16
	.word	14817
	.byte	27
	.byte	'Os_MeterInfoType_s',0,35,193,2,16,48,11
	.byte	'elapsed',0
	.word	1373
	.byte	4,2,35,0,11
	.byte	'previous',0
	.word	1373
	.byte	4,2,35,4,11
	.byte	'max',0
	.word	1373
	.byte	4,2,35,8,11
	.byte	'cumulative',0
	.word	1373
	.byte	4,2,35,12,11
	.byte	'stackbase',0
	.word	14129
	.byte	8,2,35,16,11
	.byte	'stackusage',0
	.word	14129
	.byte	8,2,35,24,11
	.byte	'stackmax',0
	.word	14129
	.byte	8,2,35,32,11
	.byte	'stackbudget',0
	.word	14129
	.byte	8,2,35,40,0,23
	.byte	'Os_MeterInfoType',0,35,202,2,3
	.word	14852
	.byte	3
	.word	14852
	.byte	23
	.byte	'Os_MeterInfoRefType',0,35,203,2,50
	.word	15050
	.byte	23
	.byte	'EventMaskType',0,35,206,2,15
	.word	145
	.byte	23
	.byte	'Os_imaskType',0,35,211,2,16
	.word	1373
	.byte	27
	.byte	'Os_ISRDynType_s',0,35,213,2,16,48,11
	.byte	'meter',0
	.word	14852
	.byte	48,2,35,0,0,23
	.byte	'Os_ISRDynType',0,35,215,2,3
	.word	15129
	.byte	3
	.word	15129
	.byte	9
	.word	15190
	.byte	27
	.byte	'Os_ISRType_s',0,35,216,2,16,24,11
	.byte	'entry_function',0
	.word	14222
	.byte	4,2,35,0,11
	.byte	'dynamic',0
	.word	15195
	.byte	4,2,35,4,11
	.byte	'imask',0
	.word	1373
	.byte	4,2,35,8,11
	.byte	'stackbudget',0
	.word	14129
	.byte	8,2,35,12,11
	.byte	'access',0
	.word	145
	.byte	1,2,35,20,11
	.byte	'application',0
	.word	145
	.byte	1,2,35,21,0,23
	.byte	'Os_ISRType',0,35,223,2,3
	.word	15200
	.byte	3
	.word	14214
	.byte	9
	.word	15200
	.byte	3
	.word	15359
	.byte	23
	.byte	'ISRType',0,35,224,2,46
	.word	15364
	.byte	23
	.byte	'Os_bitmask',0,35,239,2,22
	.word	1373
	.byte	23
	.byte	'Os_pset0Type',0,35,240,2,20
	.word	1373
	.byte	23
	.byte	'Os_pset1Type',0,35,241,2,20
	.word	1373
	.byte	23
	.byte	'Os_pset2Type',0,35,242,2,20
	.word	1373
	.byte	13,35,243,2,9,4,11
	.byte	'p0',0
	.word	1373
	.byte	4,2,35,0,11
	.byte	'p1',0
	.word	1373
	.byte	4,2,35,0,11
	.byte	'p2',0
	.word	1373
	.byte	4,2,35,0,0,23
	.byte	'Os_psetType',0,35,247,2,3
	.word	15472
	.byte	13,35,249,2,9,4,11
	.byte	't0',0
	.word	1373
	.byte	4,2,35,0,11
	.byte	't1',0
	.word	1373
	.byte	4,2,35,0,11
	.byte	't2',0
	.word	1373
	.byte	4,2,35,0,0,23
	.byte	'Os_tpmaskType',0,35,253,2,3
	.word	15536
	.byte	23
	.byte	'Os_ActivationCountType',0,35,254,2,23
	.word	145
	.byte	27
	.byte	'Os_TaskDynType_s',0,35,128,3,16,120,11
	.byte	'terminate_jump_buf',0
	.word	14078
	.byte	68,2,35,0,11
	.byte	'meter',0
	.word	14852
	.byte	48,2,35,68,11
	.byte	'activation_count',0
	.word	145
	.byte	1,2,35,116,0,23
	.byte	'Os_TaskDynType',0,35,132,3,3
	.word	15634
	.byte	14,68
	.word	14047
	.byte	15,0,0,3
	.word	15634
	.byte	9
	.word	15760
	.byte	27
	.byte	'Os_TaskType_s',0,35,134,3,16,40,11
	.byte	'dynamic',0
	.word	15765
	.byte	4,2,35,0,11
	.byte	'entry_function',0
	.word	14222
	.byte	4,2,35,4,11
	.byte	'pset',0
	.word	15472
	.byte	4,2,35,8,11
	.byte	'base_tpmask',0
	.word	15536
	.byte	4,2,35,12,11
	.byte	'tpmask',0
	.word	15536
	.byte	4,2,35,16,11
	.byte	'core_id',0
	.word	862
	.byte	2,2,35,20,11
	.byte	'index',0
	.word	1373
	.byte	4,2,35,24,11
	.byte	'stackbudget',0
	.word	14129
	.byte	8,2,35,28,11
	.byte	'activation_count',0
	.word	145
	.byte	1,2,35,36,11
	.byte	'access',0
	.word	145
	.byte	1,2,35,37,11
	.byte	'application',0
	.word	145
	.byte	1,2,35,38,0,23
	.byte	'Os_TaskType',0,35,146,3,3
	.word	15770
	.byte	9
	.word	15770
	.byte	3
	.word	16020
	.byte	23
	.byte	'TaskType',0,35,147,3,47
	.word	16025
	.byte	31
	.byte	'Os_TaskStateType',0,35,155,3,6,4,25
	.byte	'SUSPENDED',0,0,25
	.byte	'READY',0,1,25
	.byte	'WAITING',0,2,25
	.byte	'RUNNING',0,3,0,23
	.byte	'TaskStateType',0,35,156,3,31
	.word	16048
	.byte	13,35,167,3,3,4,11
	.byte	'tpmask',0
	.word	15536
	.byte	4,2,35,0,0,27
	.byte	'Os_ResourceDynType_s',0,35,166,3,16,4,11
	.byte	'saved_priority',0
	.word	16135
	.byte	4,2,35,0,0,23
	.byte	'Os_ResourceDynType',0,35,170,3,3
	.word	16158
	.byte	3
	.word	16158
	.byte	9
	.word	16238
	.byte	27
	.byte	'Os_ResourceType_s',0,35,171,3,16,12,11
	.byte	'dynamic',0
	.word	16243
	.byte	4,2,35,0,11
	.byte	'tpmask',0
	.word	15536
	.byte	4,2,35,4,11
	.byte	'access',0
	.word	145
	.byte	1,2,35,8,0,23
	.byte	'Os_ResourceType',0,35,175,3,3
	.word	16248
	.byte	10,35,181,3,9,12,11
	.byte	'maxallowedvalue',0
	.word	1373
	.byte	4,2,35,0,11
	.byte	'ticksperbase',0
	.word	1373
	.byte	4,2,35,4,11
	.byte	'mincycle',0
	.word	1373
	.byte	4,2,35,8,0,23
	.byte	'AlarmBaseType',0,35,185,3,3
	.word	16347
	.byte	10,35,206,3,9,8,11
	.byte	'Running',0
	.word	145
	.byte	1,2,35,0,11
	.byte	'Pending',0
	.word	145
	.byte	1,2,35,1,11
	.byte	'Delay',0
	.word	1373
	.byte	4,2,35,4,0,23
	.byte	'Os_CounterStatusType',0,35,210,3,3
	.word	16442
	.byte	32
	.word	145
	.byte	1,1,3
	.word	16528
	.byte	23
	.byte	'Os_CounterIncrAdvType',0,35,217,3,22
	.word	16535
	.byte	27
	.byte	's_swd',0,35,222,3,12,4,11
	.byte	'count',0
	.word	1373
	.byte	4,2,35,0,0,13,35,221,3,3,4,11
	.byte	'sw',0
	.word	16571
	.byte	4,2,35,0,0,27
	.byte	'Os_CounterDynType_s',0,35,220,3,16,4,11
	.byte	'type_dependent',0
	.word	16599
	.byte	4,2,35,0,0,23
	.byte	'Os_CounterDynType',0,35,226,3,3
	.word	16618
	.byte	3
	.word	16618
	.byte	9
	.word	16696
	.byte	27
	.byte	'Os_CounterType_s',0,35,227,3,16,28,11
	.byte	'dynamic',0
	.word	16701
	.byte	4,2,35,0,11
	.byte	'advincr',0
	.word	16540
	.byte	4,2,35,4,11
	.byte	'base',0
	.word	16347
	.byte	12,2,35,8,11
	.byte	'core',0
	.word	14798
	.byte	4,2,35,20,11
	.byte	'access',0
	.word	145
	.byte	1,2,35,24,11
	.byte	'application',0
	.word	145
	.byte	1,2,35,25,0,23
	.byte	'Os_CounterType',0,35,234,3,3
	.word	16706
	.byte	3
	.word	16528
	.byte	9
	.word	16706
	.byte	3
	.word	16858
	.byte	23
	.byte	'CounterType',0,35,235,3,52
	.word	16863
	.byte	31
	.byte	'Os_ScheduleTableStatusType',0,35,240,3,6,4,25
	.byte	'SCHEDULETABLE_STOPPED',0,0,25
	.byte	'SCHEDULETABLE_NEXT',0,1,25
	.byte	'SCHEDULETABLE_WAITING',0,2,25
	.byte	'SCHEDULETABLE_RUNNING',0,3,25
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,23
	.byte	'ScheduleTableStatusType',0,35,241,3,41
	.word	16889
	.byte	9
	.word	.L279-.L68
	.byte	3
	.word	17089
	.byte	23
	.byte	'ScheduleTableType',0,35,128,4,58
	.word	17094
	.byte	27
	.byte	'Os_ScheduleTableDynType_s',0,35,130,4,16,16,11
	.byte	'match',0
	.word	1373
	.byte	4,2,35,0,11
	.byte	'next',0
	.word	17099
	.byte	4,2,35,4,11
	.byte	'state',0
	.word	16889
	.byte	4,2,35,8,11
	.byte	'config',0
	.word	862
	.byte	2,2,35,12,0,3
	.word	17126
	.byte	9
	.word	17219
.L279:
	.byte	27
	.byte	'Os_ScheduleTableType_s',0,35,247,3,16,16,11
	.byte	'dynamic',0
	.word	17224
	.byte	4,2,35,0,11
	.byte	'counter',0
	.word	16868
	.byte	4,2,35,4,11
	.byte	'repeat',0
	.word	145
	.byte	1,2,35,8,11
	.byte	'config',0
	.word	862
	.byte	2,2,35,10,11
	.byte	'initial',0
	.word	145
	.byte	1,2,35,12,11
	.byte	'access',0
	.word	145
	.byte	1,2,35,13,11
	.byte	'application',0
	.word	145
	.byte	1,2,35,14,0,23
	.byte	'Os_ScheduleTableType',0,35,255,3,3
	.word	17229
	.byte	9
	.word	17229
	.byte	3
	.word	17409
	.byte	9
	.word	16706
	.byte	3
	.word	17419
	.byte	12
	.word	14522
	.byte	12
	.word	15472
	.byte	12
	.word	15369
	.byte	12
	.word	16030
	.byte	12
	.word	15536
	.byte	12
	.word	145
	.byte	12
	.word	16030
	.byte	27
	.byte	'Os_ControlledCoreType_s',0,35,251,6,16,112,11
	.byte	'TrapInfo',0
	.word	13958
	.byte	8,2,35,0,11
	.byte	'lock_taskaccess',0
	.word	17429
	.byte	4,2,35,8,11
	.byte	'ReadyTasks',0
	.word	17434
	.byte	4,2,35,12,11
	.byte	'RunningISR',0
	.word	17439
	.byte	4,2,35,16,11
	.byte	'RunningTask',0
	.word	17444
	.byte	4,2,35,20,11
	.byte	'RunningTPMask',0
	.word	17449
	.byte	4,2,35,24,11
	.byte	'CurrentMeteredObject',0
	.word	15055
	.byte	4,2,35,28,11
	.byte	'IdleMeter',0
	.word	14852
	.byte	48,2,35,32,11
	.byte	'AppAccess',0
	.word	145
	.byte	1,2,35,80,11
	.byte	'AppOverride',0
	.word	17454
	.byte	1,2,35,81,11
	.byte	'GetStackValueAdjust',0
	.word	14129
	.byte	8,2,35,84,11
	.byte	'InErrorHook',0
	.word	145
	.byte	1,2,35,92,11
	.byte	'ChainTaskRef',0
	.word	17459
	.byte	4,2,35,96,11
	.byte	'GetStackUsageAdjust',0
	.word	14129
	.byte	8,2,35,100,11
	.byte	'InProtectionHook',0
	.word	145
	.byte	1,2,35,108,11
	.byte	'CoreIsActive',0
	.word	145
	.byte	1,2,35,109,11
	.byte	'InShutdownHook',0
	.word	145
	.byte	1,2,35,110,0,23
	.byte	'Os_ControlledCoreType',0,35,141,7,3
	.word	17464
	.byte	3
	.word	1373
	.byte	9
	.word	15200
	.byte	3
	.word	17920
	.byte	9
	.word	15770
	.byte	3
	.word	17930
	.byte	3
	.word	14852
	.byte	27
	.byte	'Os_AnyCoreType_s',0,35,151,7,16,96,11
	.byte	'DisableAllImask',0
	.word	1373
	.byte	4,2,35,0,11
	.byte	'SuspendAllImask',0
	.word	1373
	.byte	4,2,35,4,11
	.byte	'SuspendOSImask',0
	.word	1373
	.byte	4,2,35,8,11
	.byte	'DisableAllCount',0
	.word	1373
	.byte	4,2,35,12,11
	.byte	'SuspendAllCount',0
	.word	1373
	.byte	4,2,35,16,11
	.byte	'SuspendOSCount',0
	.word	1373
	.byte	4,2,35,20,11
	.byte	'RestartJumpBuf',0
	.word	14078
	.byte	68,2,35,24,11
	.byte	'Restartable',0
	.word	145
	.byte	1,2,35,92,0,23
	.byte	'Os_AnyCoreType',0,35,160,7,3
	.word	17945
	.byte	23
	.byte	'Can_TxObjPriorityClassType',0,36,219,3,16
	.word	1373
	.byte	27
	.byte	'Can_TxHwObjectConfigType',0,36,231,3,16,8,11
	.byte	'MsgObjId',0
	.word	145
	.byte	1,2,35,0,11
	.byte	'HwControllerId',0
	.word	145
	.byte	1,2,35,1,11
	.byte	'TxObjPriorityClass',0
	.word	1373
	.byte	4,2,35,4,0,23
	.byte	'Can_TxHwObjectConfigType',0,36,252,3,3
	.word	18222
	.byte	27
	.byte	'Can_RxHwObjectConfigType',0,36,129,4,16,12,11
	.byte	'MaskRef',0
	.word	1373
	.byte	4,2,35,0,11
	.byte	'MsgId',0
	.word	1373
	.byte	4,2,35,4,11
	.byte	'MsgObjId',0
	.word	145
	.byte	1,2,35,8,11
	.byte	'HwControllerId',0
	.word	145
	.byte	1,2,35,9,0,23
	.byte	'Can_RxHwObjectConfigType',0,36,147,4,3
	.word	18358
	.byte	14,4
	.word	145
	.byte	15,3,0,27
	.byte	'Can_ControllerMOMapConfigType',0,36,181,4,16,4,11
	.byte	'ControllerMOMap',0
	.word	18498
	.byte	4,2,35,0,0,23
	.byte	'Can_ControllerMOMapConfigType',0,36,184,4,3
	.word	18507
	.byte	27
	.byte	'Can_NPCRValueType',0,36,188,4,16,2,11
	.byte	'Can_NPCRValue',0
	.word	862
	.byte	2,2,35,0,0,23
	.byte	'Can_NPCRValueType',0,36,191,4,3
	.word	18608
	.byte	27
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,36,194,4,16,8,11
	.byte	'CanControllerBaudrate',0
	.word	1373
	.byte	4,2,35,0,11
	.byte	'CanControllerBaudrateCfg',0
	.word	862
	.byte	2,2,35,4,0,23
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,36,198,4,3
	.word	18683
	.byte	9
	.word	18683
	.byte	3
	.word	18848
	.byte	27
	.byte	'Can_BaudrateConfigPtrType',0,36,201,4,16,4,11
	.byte	'Can_kBaudrateConfigPtr',0
	.word	18853
	.byte	4,2,35,0,0,23
	.byte	'Can_BaudrateConfigPtrType',0,36,204,4,3
	.word	18858
	.byte	27
	.byte	'Can_EventHandlingType',0,36,226,4,16,4,11
	.byte	'CanEventType',0
	.word	18498
	.byte	4,2,35,0,0,23
	.byte	'Can_EventHandlingType',0,36,229,4,3
	.word	18958
	.byte	23
	.byte	'Rte_TransformerErrorCode',0,37,130,1,15
	.word	145
	.byte	23
	.byte	'Rte_TransformerClass',0,37,131,1,15
	.word	145
	.byte	10,37,168,1,9,12,11
	.byte	'in',0
	.word	14798
	.byte	4,2,35,0,11
	.byte	'out',0
	.word	14798
	.byte	4,2,35,4,11
	.byte	'used',0
	.word	862
	.byte	2,2,35,8,11
	.byte	'lost_data',0
	.word	145
	.byte	1,2,35,10,0,23
	.byte	'Rte_QDynType',0,37,173,1,3
	.word	19104
	.byte	24,37,175,1,9,4,25
	.byte	'RTE_DRA',0,0,25
	.byte	'RTE_WOWP',0,1,25
	.byte	'RTE_TASK',0,2,25
	.byte	'RTE_ARE',0,3,25
	.byte	'RTE_EV',0,4,25
	.byte	'RTE_MSI',0,5,0,23
	.byte	'Rte_NotificationType',0,37,182,1,3
	.word	19191
	.byte	3
	.word	19104
	.byte	27
	.byte	'Rte_QCmnType',0,37,184,1,16,24,11
	.byte	'dynamic',0
	.word	19289
	.byte	4,2,35,0,11
	.byte	'copy',0
	.word	145
	.byte	1,2,35,4,11
	.byte	'queue_size',0
	.word	862
	.byte	2,2,35,6,11
	.byte	'element_size',0
	.word	862
	.byte	2,2,35,8,11
	.byte	'buffer_start',0
	.word	14798
	.byte	4,2,35,12,11
	.byte	'buffer_end',0
	.word	14798
	.byte	4,2,35,16,11
	.byte	'notification_type',0
	.word	19191
	.byte	4,2,35,20,0,23
	.byte	'Rte_QCmnType',0,37,192,1,3
	.word	19294
	.byte	23
	.byte	'Rte_AlarmRefType',0,37,224,1,32
	.word	1373
	.byte	23
	.byte	'Rte_AlarmIndexType',0,37,226,1,32
	.word	862
	.byte	14,128,8
	.word	145
	.byte	15,255,7,0,23
	.byte	'Impl_NVM_DstPtrType_1024',0,38,50,15
	.word	19532
	.byte	23
	.byte	'CanIf_u32_impl',0,38,69,16
	.word	1373
	.byte	23
	.byte	'CanIf_u16_impl',0,38,71,16
	.word	862
	.byte	23
	.byte	'CanIf_u8_impl',0,38,73,15
	.word	145
	.byte	23
	.byte	'CanIf_ControllerModeType_Enum_impl',0,38,88,15
	.word	145
	.byte	23
	.byte	'CanIf_PduModeType_Enum_impl',0,38,90,15
	.word	145
	.byte	10,38,92,9,2,11
	.byte	'DeviceMode',0
	.word	145
	.byte	1,2,35,0,11
	.byte	'ChannelMode',0
	.word	145
	.byte	1,2,35,1,0,23
	.byte	'CanIf_ControllerStateType_struct_impl',0,38,95,3
	.word	19723
	.byte	23
	.byte	'CanIf_NotifStatusType_Enum_impl',0,38,100,15
	.word	145
	.byte	23
	.byte	'CanSM_boolean_Impl',0,38,120,15
	.word	145
	.byte	23
	.byte	'CanSM_u8_Impl',0,38,123,15
	.word	145
	.byte	23
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,38,128,1,15
	.word	145
	.byte	23
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,38,132,1,15
	.word	145
	.byte	23
	.byte	'CanSM_u16_Impl',0,38,136,1,16
	.word	862
	.byte	23
	.byte	'CanSM_TimerStateType_Enum_impl',0,38,138,1,15
	.word	145
	.byte	10,38,140,1,9,4,11
	.byte	'cntTick_u16',0
	.word	862
	.byte	2,2,35,0,11
	.byte	'stTimer',0
	.word	145
	.byte	1,2,35,2,0,23
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,38,143,1,3
	.word	20064
	.byte	23
	.byte	'Com_impl_u16',0,38,154,1,16
	.word	862
	.byte	23
	.byte	'Com_impl_u8',0,38,157,1,15
	.word	145
	.byte	23
	.byte	'ComM_uint32_Impl',0,38,173,1,16
	.word	1373
	.byte	23
	.byte	'ComM_uint16_Impl',0,38,175,1,16
	.word	862
	.byte	23
	.byte	'ComM_uint8_Impl',0,38,177,1,15
	.word	145
	.byte	23
	.byte	'ComM_bool_Impl',0,38,179,1,15
	.word	145
	.byte	10,38,181,1,9,24,11
	.byte	'ChannelState_e',0
	.word	1373
	.byte	4,2,35,0,11
	.byte	'LightTimeoutCtr_u32',0
	.word	1373
	.byte	4,2,35,4,11
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	862
	.byte	2,2,35,8,11
	.byte	'ChannelMode_u8',0
	.word	145
	.byte	1,2,35,10,11
	.byte	'BusSmMode_u8',0
	.word	145
	.byte	1,2,35,11,11
	.byte	'UserRequestCtr_u8',0
	.word	145
	.byte	1,2,35,12,11
	.byte	'PassiveRequestState_u8',0
	.word	145
	.byte	1,2,35,13,11
	.byte	'PncRequestCtr_u8',0
	.word	145
	.byte	1,2,35,14,11
	.byte	'InhibitionReqStatus_u8',0
	.word	145
	.byte	1,2,35,15,11
	.byte	'NmNetworkRequestStatus_b',0
	.word	145
	.byte	1,2,35,16,11
	.byte	'DiagnosticRequestState_b',0
	.word	145
	.byte	1,2,35,17,11
	.byte	'CommunicationAllowed_b',0
	.word	145
	.byte	1,2,35,18,11
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	145
	.byte	1,2,35,19,11
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	145
	.byte	1,2,35,20,11
	.byte	'NmNetworkModeStatus_b',0
	.word	145
	.byte	1,2,35,21,0,23
	.byte	'ComM_ChannelStruct_Impl',0,38,197,1,3
	.word	20296
	.byte	10,38,206,1,9,10,11
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	862
	.byte	2,2,35,0,11
	.byte	'LimitToNoComCtr_u16',0
	.word	862
	.byte	2,2,35,2,11
	.byte	'RequestedUserMode_t',0
	.word	145
	.byte	1,2,35,4,11
	.byte	'IndicatedUserMode_t',0
	.word	145
	.byte	1,2,35,5,11
	.byte	'numChannelsInFullCom_u8',0
	.word	145
	.byte	1,2,35,6,11
	.byte	'numChannelsInSilentCom_u8',0
	.word	145
	.byte	1,2,35,7,11
	.byte	'numChannelsInNoCom_u8',0
	.word	145
	.byte	1,2,35,8,0,23
	.byte	'ComM_UserStruct_Impl',0,38,214,1,3
	.word	20800
	.byte	23
	.byte	'Dcm_IOOperationResponseType',0,38,252,1,15
	.word	145
	.byte	23
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	38,138,2,15
	.word	145
	.byte	23
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,38,146,2,15
	.word	145
	.byte	23
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,38,150,2,15
	.word	145
	.byte	23
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,38,154,2,15
	.word	145
	.byte	23
	.byte	'Dem_DTCFormatType',0,38,160,2,15
	.word	145
	.byte	23
	.byte	'Dem_DTCOriginType',0,38,162,2,15
	.word	145
	.byte	23
	.byte	'Dem_EventIdType',0,38,168,2,16
	.word	862
	.byte	23
	.byte	'Dem_EventStatusType',0,38,170,2,15
	.word	145
	.byte	23
	.byte	'Dem_IndicatorIdType',0,38,172,2,15
	.word	145
	.byte	23
	.byte	'Dem_InitMonitorReasonType',0,38,176,2,15
	.word	145
	.byte	23
	.byte	'Dem_OperationCycleIdType',0,38,179,2,15
	.word	145
	.byte	23
	.byte	'Dem_UdsStatusByteType',0,38,185,2,15
	.word	145
	.byte	23
	.byte	'NvM_BlockIdType',0,38,215,2,16
	.word	862
	.byte	23
	.byte	'NvM_RequestResultType',0,38,225,2,15
	.word	145
	.byte	23
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,38,243,3,34
	.word	19543
	.byte	14,128,8
	.word	145
	.byte	15,255,7,0,23
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,38,246,3,34
	.word	19543
	.byte	23
	.byte	'Dem_DTCGroupIdType',0,39,49,15
	.word	145
	.byte	23
	.byte	'Dem_DtcIdType',0,39,50,16
	.word	862
	.byte	23
	.byte	'Dem_ClientIdType',0,39,53,15
	.word	145
	.byte	23
	.byte	'Dem_DtcCodeType',0,39,55,16
	.word	1373
	.byte	23
	.byte	'Dem_boolean_least',0,39,60,17
	.word	145
	.byte	23
	.byte	'Dem_EventCategoryType',0,39,62,15
	.word	145
	.byte	23
	.byte	'Dem_DTCSeverityType',0,39,217,1,15
	.word	145
	.byte	23
	.byte	'Dem_DebugDataType',0,39,131,3,16
	.word	1373
	.byte	23
	.byte	'Dem_DTCKindType',0,39,145,3,16
	.word	145
	.byte	23
	.byte	'Dem_TriggerType',0,39,167,3,15
	.word	145
	.byte	23
	.byte	'Dem_EnCoList',0,40,31,15
	.word	145
	.byte	23
	.byte	'Dem_OperationCycleList',0,41,23,15
	.word	145
	.byte	23
	.byte	'Dem_StoCoList',0,42,32,15
	.word	145
	.byte	23
	.byte	'Rte_TaskRefType',0,43,184,1,32
	.word	16030
	.byte	23
	.byte	'Rte_EventRefType',0,43,185,1,32
	.word	145
	.byte	23
	.byte	'Rte_EventType',0,43,186,1,32
	.word	1373
	.byte	23
	.byte	'Rte_REActCounterType',0,43,252,1,15
	.word	145
	.byte	3
	.word	145
	.byte	23
	.byte	'Rte_REActCounterRefType',0,43,253,1,58
	.word	22349
	.byte	10,43,255,1,9,8,11
	.byte	'task',0
	.word	22245
	.byte	4,2,35,0,11
	.byte	'acnt',0
	.word	22354
	.byte	4,2,35,4,0,23
	.byte	'Rte_REContainerType',0,43,130,2,3
	.word	22387
	.byte	9
	.word	15770
	.byte	3
	.word	22451
	.byte	3
	.word	145
	.byte	9
	.word	22387
	.byte	3
	.word	22466
	.byte	23
	.byte	'Rte_REContainerRefType',0,43,132,2,60
	.word	22471
	.byte	23
	.byte	'Rte_MSICounterType',0,43,149,2,16
	.word	862
	.byte	3
	.word	862
	.byte	23
	.byte	'Rte_MSICounterRefType',0,43,150,2,56
	.word	22536
	.byte	23
	.byte	'Rte_MSIPendingFlagType',0,43,152,2,17
	.word	145
	.byte	3
	.word	145
	.byte	23
	.byte	'Rte_MSIPendingFlagRefType',0,43,153,2,60
	.word	22604
	.byte	10,43,163,2,9,24,11
	.byte	'counter',0
	.word	22541
	.byte	4,2,35,0,11
	.byte	'incCounter',0
	.word	145
	.byte	1,2,35,4,11
	.byte	'pending',0
	.word	22609
	.byte	4,2,35,8,11
	.byte	'osTask',0
	.word	22245
	.byte	4,2,35,12,11
	.byte	'acnt',0
	.word	22354
	.byte	4,2,35,16,11
	.byte	'osEvent',0
	.word	145
	.byte	1,2,35,20,11
	.byte	'MSIInit',0
	.word	862
	.byte	2,2,35,22,0,23
	.byte	'Rte_MSITableEntry',0,43,172,2,3
	.word	22644
	.byte	3
	.word	862
	.byte	3
	.word	145
	.byte	23
	.byte	'Rte_TaskArrayIndex',0,43,179,2,16
	.word	145
	.byte	23
	.byte	'Rte_NrWaitingTasks',0,43,180,2,16
	.word	145
	.byte	10,43,182,2,9,4,11
	.byte	'pending',0
	.word	145
	.byte	1,2,35,0,11
	.byte	'count',0
	.word	145
	.byte	1,2,35,1,11
	.byte	'firstWaitingTask',0
	.word	145
	.byte	1,2,35,2,0,23
	.byte	'Rte_WaitableDatum',0,43,186,2,3
	.word	22862
	.byte	3
	.word	22862
	.byte	10,43,226,2,9,12,11
	.byte	'event_id',0
	.word	1373
	.byte	4,2,35,0,11
	.byte	'wd',0
	.word	22954
	.byte	4,2,35,4,11
	.byte	'timeout',0
	.word	1373
	.byte	4,2,35,8,0,23
	.byte	'Rte_WOWP_NotificationType',0,43,230,2,3
	.word	22959
	.byte	9
	.word	22959
	.byte	3
	.word	23048
	.byte	23
	.byte	'Rte_WOWP_NotificationRefType',0,43,232,2,66
	.word	23053
	.byte	23
	.byte	'Rte_ARE_NotificationType',0,43,234,2,29
	.word	22387
	.byte	27
	.byte	'Rte_QTaskType',0,43,243,2,16,28,11
	.byte	'cmn',0
	.word	19294
	.byte	24,2,35,0,11
	.byte	'task',0
	.word	22245
	.byte	4,2,35,24,0,23
	.byte	'Rte_QTaskType',0,43,246,2,3
	.word	23130
	.byte	27
	.byte	'Rte_QREType',0,43,250,2,16,28,11
	.byte	'cmn',0
	.word	19294
	.byte	24,2,35,0,11
	.byte	're',0
	.word	22476
	.byte	4,2,35,24,0,23
	.byte	'Rte_QREType',0,43,253,2,3
	.word	23201
	.byte	9
	.word	22387
	.byte	3
	.word	23266
	.byte	27
	.byte	'Rte_QWWPType',0,43,129,3,16,28,11
	.byte	'cmn',0
	.word	19294
	.byte	24,2,35,0,11
	.byte	'wwp',0
	.word	23058
	.byte	4,2,35,24,0,23
	.byte	'Rte_QWWPType',0,43,132,3,3
	.word	23276
	.byte	9
	.word	22959
	.byte	3
	.word	23344
	.byte	27
	.byte	'Rte_QEvType',0,43,136,3,16,36,11
	.byte	'cmn',0
	.word	19294
	.byte	24,2,35,0,11
	.byte	'task',0
	.word	22245
	.byte	4,2,35,24,11
	.byte	'mask',0
	.word	145
	.byte	1,2,35,28,11
	.byte	'acnt',0
	.word	22354
	.byte	4,2,35,32,0,23
	.byte	'Rte_QEvType',0,43,141,3,3
	.word	23354
	.byte	27
	.byte	'Rte_QMSIType',0,43,145,3,16,48,11
	.byte	'cmn',0
	.word	19294
	.byte	24,2,35,0,11
	.byte	'task',0
	.word	22245
	.byte	4,2,35,24,11
	.byte	'mask',0
	.word	145
	.byte	1,2,35,28,11
	.byte	'acnt',0
	.word	22354
	.byte	4,2,35,32,11
	.byte	'msiCounter',0
	.word	22541
	.byte	4,2,35,36,11
	.byte	'msiPending',0
	.word	22609
	.byte	4,2,35,40,11
	.byte	'msiLimit',0
	.word	862
	.byte	2,2,35,44,0,23
	.byte	'Rte_QMSIType',0,43,153,3,3
	.word	23449
	.byte	23
	.byte	'Dem_EvtStateType',0,44,151,1,15
	.word	145
	.byte	23
	.byte	'Dem_OpMoStateType',0,45,13,15
	.word	145
	.byte	33
	.byte	'Dem_OpMoState',0,45,31,26
	.word	145
	.byte	1,1,23
	.byte	'rba_BswSrv_uint64',0,6,66,28
	.word	13354
	.byte	23
	.byte	'Dem_EventIdIterator',0,8,27,22
	.word	6204
	.byte	23
	.byte	'Dem_DtcIdIterator',0,8,197,1,22
	.word	6204
	.byte	23
	.byte	'Dem_DtcGroupIdIterator',0,8,230,1,21
	.word	6204
	.byte	23
	.byte	'Dem_EventIdListIterator',0,8,174,2,3
	.word	3574
	.byte	10,8,213,2,9,4,11
	.byte	'it',0
	.word	862
	.byte	2,2,35,0,11
	.byte	'end',0
	.word	862
	.byte	2,2,35,2,0,23
	.byte	'Dem_DtcIdListIterator',0,8,216,2,3
	.word	23826
	.byte	24,46,31,9,4,25
	.byte	'MEMIF_JOB_OK',0,0,25
	.byte	'MEMIF_JOB_FAILED',0,1,25
	.byte	'MEMIF_JOB_PENDING',0,2,25
	.byte	'MEMIF_JOB_CANCELED',0,3,25
	.byte	'MEMIF_BLOCK_INCONSISTENT',0,4,25
	.byte	'MEMIF_BLOCK_INVALID',0,5,0,23
	.byte	'MemIf_JobResultType',0,46,39,2
	.word	23889
	.byte	24,47,49,9,4,25
	.byte	'NVM_PRV_ACTIVITY_NOT_INIT',0,0,25
	.byte	'NVM_PRV_ACTIVITY_IDLE',0,1,25
	.byte	'NVM_PRV_ACTIVITY_ARBITRATE',0,2,25
	.byte	'NVM_PRV_ACTIVITY_JOB_START',0,3,25
	.byte	'NVM_PRV_ACTIVITY_POLL_RESULT',0,4,25
	.byte	'NVM_PRV_ACTIVITY_JOB_COMPLETE',0,5,25
	.byte	'NVM_PRV_ACTIVITY_RESULT_EVAL',0,6,0,23
	.byte	'NvM_Prv_Activities_ten',0,47,58,3
	.word	24047
	.byte	24,47,104,9,4,25
	.byte	'NvM_Prv_idJob_Idle_e',0,0,25
	.byte	'NvM_Prv_idJob_Read_e',0,1,25
	.byte	'NvM_Prv_idJob_Write_e',0,2,25
	.byte	'NvM_Prv_idJob_Erase_e',0,3,25
	.byte	'NvM_Prv_idJob_Restore_e',0,4,25
	.byte	'NvM_Prv_idJob_Maintain_e',0,5,25
	.byte	'NvM_Prv_idJob_Validate_e',0,6,25
	.byte	'NvM_Prv_idJob_Invalidate_e',0,7,25
	.byte	'NvM_Prv_idJob_ReadIdConfigForReadAll_e',0,8,25
	.byte	'NvM_Prv_idJob_InvalidateForFirstInitAll_e',0,9,25
	.byte	'NvM_Prv_idJob_RestoreForImplicitRecovery_e',0,10,25
	.byte	'NvM_Prv_idJob_InvalidateForRemoveNonResistant_e',0,11,25
	.byte	'NvM_Prv_idJob_Invalid_e',0,12,25
	.byte	'NvM_Prv_idJob_Count_e',0,13,0,23
	.byte	'NvM_Prv_idJob_ten',0,47,115,3
	.word	24288
	.byte	23
	.byte	'NvM_Prv_ServiceBit_tuo',0,47,168,1,16
	.word	862
	.byte	23
	.byte	'NvM_Prv_idService_tuo',0,47,173,1,15
	.word	145
	.byte	23
	.byte	'NvM_Prv_idQueue_tuo',0,47,206,1,15
	.word	145
	.byte	10,47,210,1,9,12,11
	.byte	'idService_uo',0
	.word	145
	.byte	1,2,35,0,11
	.byte	'idBlock_uo',0
	.word	862
	.byte	2,2,35,2,11
	.byte	'ServiceBit_uo',0
	.word	862
	.byte	2,2,35,4,11
	.byte	'BlockData_pv',0
	.word	14798
	.byte	4,2,35,8,0,23
	.byte	'NvM_Prv_QueueEntry_tst',0,47,225,1,3
	.word	24845
	.byte	10,47,227,1,9,20,11
	.byte	'idJob_en',0
	.word	24288
	.byte	4,2,35,0,11
	.byte	'idBlock_uo',0
	.word	862
	.byte	2,2,35,4,11
	.byte	'RamBlock_pu8',0
	.word	162
	.byte	4,2,35,8,11
	.byte	'idxDataset_u8',0
	.word	145
	.byte	1,2,35,12,11
	.byte	'Result_en',0
	.word	23889
	.byte	4,2,35,16,0,23
	.byte	'NvM_Prv_JobData_tst',0,47,240,1,3
	.word	24971
	.byte	23
	.byte	'Dem_DtcStateType',0,48,47,15
	.word	145
	.byte	23
	.byte	'Dem_EvMemOccurrenceCounterType',0,21,90,21
	.word	145
	.byte	23
	.byte	'Dem_EvMemAgingCounterType',0,21,99,21
	.word	145
	.byte	23
	.byte	'Dem_EvMemHdrType',0,21,141,1,4
	.word	6459
	.byte	23
	.byte	'Dem_EvMemEventMemoryType',0,21,213,1,4
	.word	6489
	.byte	14,5
	.word	145
	.byte	15,4,0,14,10
	.word	862
	.byte	15,4,0,10,49,9,9,18,11
	.byte	'OperationCycleStates',0
	.word	145
	.byte	1,2,35,0,11
	.byte	'OperationCycleQualified',0
	.word	145
	.byte	1,2,35,1,11
	.byte	'Overflow',0
	.word	25267
	.byte	5,2,35,2,11
	.byte	'DtcIdsByOccurrenceTime',0
	.word	25276
	.byte	10,2,35,8,0,23
	.byte	'Dem_GenericNvDataType',0,49,24,4
	.word	25285
	.byte	23
	.byte	'Dem_NvmBlockIdType',0,50,14,34
	.word	145
	.byte	13,50,16,9,20,11
	.byte	'evMemData',0
	.word	6489
	.byte	20,2,35,0,11
	.byte	'genericNvData',0
	.word	25285
	.byte	18,2,35,0,0,23
	.byte	'Dem_NvMStorageBufferData',0,50,37,3
	.word	25461
	.byte	23
	.byte	'Dem_NvmBlockStatusType',0,50,59,15
	.word	145
	.byte	23
	.byte	'Dem_NvmResultType',0,50,78,31
	.word	145
	.byte	3
	.word	145
	.byte	34
	.word	145
	.byte	1,1,30
	.word	25599
	.byte	0,3
	.word	25604
	.byte	23
	.byte	'Dem_EvtClearAllowedFncType',0,13,12,26
	.word	25617
	.byte	34
	.word	145
	.byte	1,1,30
	.word	145
	.byte	0,3
	.word	25657
	.byte	23
	.byte	'Dem_InitMForEAllowedFncType',0,14,38,27
	.word	25670
	.byte	10,14,46,9,4,11
	.byte	'state',0
	.word	145
	.byte	1,2,35,0,11
	.byte	'debounceLevel',0
	.word	4937
	.byte	2,2,35,2,0,23
	.byte	'Dem_EvtState',0,14,50,3
	.word	25711
	.byte	14,24
	.word	25711
	.byte	15,5,0,33
	.byte	'Dem_AllEventsState',0,14,152,1,1
	.word	25776
	.byte	1,1,14,6
	.word	145
	.byte	15,5,0,33
	.byte	'Dem_AllEventsStatusByte',0,15,22,1
	.word	25815
	.byte	1,1,9
	.word	14792
	.byte	3
	.word	25858
	.byte	34
	.word	6204
	.byte	1,1,30
	.word	862
	.byte	30
	.word	25599
	.byte	30
	.word	25863
	.byte	30
	.word	862
	.byte	0,3
	.word	25868
	.byte	23
	.byte	'Dem_DebFilter',0,51,12,23
	.word	25896
	.byte	2
	.byte	'long int',0,4,5,3
	.word	25923
	.byte	29,1,1,30
	.word	25863
	.byte	30
	.word	862
	.byte	30
	.word	25935
	.byte	30
	.word	25935
	.byte	0,3
	.word	25940
	.byte	23
	.byte	'Dem_DebGetLimits',0,51,13,23
	.word	25964
	.byte	29,1,1,30
	.word	862
	.byte	30
	.word	25863
	.byte	30
	.word	862
	.byte	0,3
	.word	25994
	.byte	23
	.byte	'Dem_DebCyclic',0,51,14,16
	.word	26013
	.byte	23
	.byte	'Dem_DebouncedActionType',0,51,35,21
	.word	6204
	.byte	13,52,37,9,4,11
	.byte	'EnforceAlignment',0
	.word	1373
	.byte	4,2,35,0,11
	.byte	'Buffer',0
	.word	18498
	.byte	4,2,35,0,0,23
	.byte	'Dem_EvBuffEnvDataAlignedType',0,52,47,3
	.word	26072
	.byte	10,52,49,9,16,11
	.byte	'envData',0
	.word	26072
	.byte	4,2,35,0,11
	.byte	'eventType',0
	.word	145
	.byte	1,2,35,4,11
	.byte	'eventId',0
	.word	862
	.byte	2,2,35,6,11
	.byte	'debug0',0
	.word	1373
	.byte	4,2,35,8,11
	.byte	'debug1',0
	.word	1373
	.byte	4,2,35,12,0,23
	.byte	'Dem_EvBuffEvent',0,52,75,2
	.word	26157
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L69:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32
	.byte	13,58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,11,1,0,0,8,46
	.byte	1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,38,0,73,19,0,0,10,19,1,58,15,59,15,57,15,11,15,0
	.byte	0,11,13,0,3,8,73,19,11,15,56,9,0,0,12,53,0,73,19,0,0,13,23,1,58,15,59,15,57,15,11,15,0,0,14,1,1,11,15
	.byte	73,19,0,0,15,33,0,47,15,0,0,16,46,1,49,19,0,0,17,5,0,49,19,0,0,18,29,1,49,19,0,0,19,11,0,49,19,0,0,20
	.byte	11,1,49,19,0,0,21,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,22,21,0,54,15,0,0,23,22
	.byte	0,3,8,58,15,59,15,57,15,73,19,0,0,24,4,1,58,15,59,15,57,15,11,15,0,0,25,40,0,3,8,28,13,0,0,26,21,0,54
	.byte	15,39,12,0,0,27,19,1,3,8,58,15,59,15,57,15,11,15,0,0,28,59,0,3,8,0,0,29,21,1,54,15,39,12,0,0,30,5,0,73
	.byte	19,0,0,31,4,1,3,8,58,15,59,15,57,15,11,15,0,0,32,21,0,73,19,54,15,39,12,0,0,33,52,0,3,8,58,15,59,15,57
	.byte	15,73,19,63,12,60,12,0,0,34,21,1,73,19,54,15,39,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L70:
	.word	.L281-.L280
.L280:
	.half	3
	.word	.L283-.L282
.L282:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits32.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_ISO14229Byte.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_BitArray.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_Lib.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\enco\\Dem_EnableCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTC_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_ByteOrderUtils.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientBaseHandling.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientClearMachine.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvTrigger.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\deb\\Dem_Deb.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemTypes.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemAging.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMem.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Prv_CallEvtStChngdCbk.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Det\\api\\Det.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\indct\\Dem_Indicator.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientHandlingTypes.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_NodeId.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\api\\Dem_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_EnableCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_OperationCycle.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_StorageCondition.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Intl.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_Main.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\MemIf\\api\\MemIf_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\NvM\\api\\NvM_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_GenericNvData.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\deb\\Dem_DebBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuffEvent.h',0,0,0,0,0
.L283:
.L281:
	.sdecl	'.debug_info',debug,cluster('Dem_SetWIRStatus')
	.sect	'.debug_info'
.L71:
	.word	1926
	.half	3
	.word	.L72
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\indct\\Dem_Indicator.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L74,.L73
	.byte	2
	.word	.L67
	.byte	3
	.byte	'Dem_SetWIRStatus',0,1,146,1,32
	.word	.L86
	.byte	1,1,1
	.word	.L64,.L87,.L63
	.byte	4
	.byte	'EventId',0,1,147,1,41
	.word	.L88,.L89
	.byte	4
	.byte	'WIRStatus',0,1,148,1,33
	.word	.L86,.L90
	.byte	5
	.word	.L64,.L87
	.byte	6
	.byte	'ret_val',0,1,151,1,20
	.word	.L86,.L91
	.byte	6
	.byte	'statusOld',0,1,153,1,27
	.word	.L86,.L92
	.byte	6
	.byte	'statusNew',0,1,153,1,38
	.word	.L86,.L93
	.byte	6
	.byte	'dtcStByteOld',0,1,153,1,49
	.word	.L86,.L94
	.byte	7
	.word	.L95,.L10,.L96
	.byte	8
	.word	.L97,.L98
	.byte	9
	.word	.L99,.L10,.L96
	.byte	0,7
	.word	.L100,.L14,.L101
	.byte	8
	.word	.L102,.L103
	.byte	10
	.word	.L104,.L14,.L101
	.byte	7
	.word	.L105,.L106,.L19
	.byte	8
	.word	.L107,.L108
	.byte	8
	.word	.L109,.L110
	.byte	10
	.word	.L111,.L106,.L19
	.byte	7
	.word	.L112,.L106,.L18
	.byte	8
	.word	.L113,.L114
	.byte	8
	.word	.L115,.L116
	.byte	9
	.word	.L117,.L106,.L18
	.byte	0,0,0,0,0,7
	.word	.L100,.L21,.L118
	.byte	8
	.word	.L102,.L103
	.byte	10
	.word	.L104,.L21,.L118
	.byte	7
	.word	.L105,.L119,.L24
	.byte	8
	.word	.L107,.L108
	.byte	8
	.word	.L109,.L110
	.byte	10
	.word	.L111,.L119,.L24
	.byte	7
	.word	.L112,.L119,.L23
	.byte	8
	.word	.L113,.L114
	.byte	8
	.word	.L115,.L116
	.byte	9
	.word	.L117,.L119,.L23
	.byte	0,0,0,0,0,7
	.word	.L120,.L118,.L27
	.byte	8
	.word	.L121,.L122
	.byte	9
	.word	.L123,.L118,.L27
	.byte	0,7
	.word	.L124,.L125,.L126
	.byte	8
	.word	.L127,.L128
	.byte	8
	.word	.L129,.L130
	.byte	8
	.word	.L131,.L132
	.byte	10
	.word	.L133,.L125,.L126
	.byte	7
	.word	.L134,.L125,.L31
	.byte	8
	.word	.L135,.L136
	.byte	9
	.word	.L137,.L125,.L31
	.byte	0,0,0,7
	.word	.L138,.L139,.L33
	.byte	8
	.word	.L140,.L141
	.byte	8
	.word	.L142,.L143
	.byte	10
	.word	.L144,.L139,.L33
	.byte	7
	.word	.L145,.L146,.L33
	.byte	8
	.word	.L147,.L148
	.byte	8
	.word	.L149,.L150
	.byte	8
	.word	.L151,.L152
	.byte	10
	.word	.L153,.L146,.L33
	.byte	7
	.word	.L154,.L155,.L156
	.byte	8
	.word	.L157,.L158
	.byte	8
	.word	.L159,.L160
	.byte	10
	.word	.L161,.L155,.L156
	.byte	6
	.byte	'bit2shift',0,2,38,11
	.word	.L86,.L162
	.byte	0,0,7
	.word	.L163,.L32,.L33
	.byte	8
	.word	.L164,.L165
	.byte	8
	.word	.L166,.L167
	.byte	10
	.word	.L168,.L32,.L33
	.byte	6
	.byte	'bit2shift',0,2,44,11
	.word	.L86,.L169
	.byte	0,0,0,0,0,0,7
	.word	.L170,.L171,.L172
	.byte	8
	.word	.L173,.L174
	.byte	10
	.word	.L175,.L171,.L172
	.byte	7
	.word	.L105,.L176,.L35
	.byte	8
	.word	.L107,.L108
	.byte	8
	.word	.L109,.L110
	.byte	10
	.word	.L111,.L176,.L35
	.byte	7
	.word	.L112,.L176,.L34
	.byte	8
	.word	.L113,.L114
	.byte	8
	.word	.L115,.L116
	.byte	9
	.word	.L117,.L176,.L34
	.byte	0,0,0,0,0,7
	.word	.L177,.L172,.L39
	.byte	8
	.word	.L178,.L179
	.byte	10
	.word	.L180,.L172,.L39
	.byte	7
	.word	.L181,.L182,.L39
	.byte	8
	.word	.L183,.L184
	.byte	8
	.word	.L185,.L186
	.byte	10
	.word	.L187,.L182,.L39
	.byte	7
	.word	.L145,.L188,.L39
	.byte	8
	.word	.L147,.L148
	.byte	8
	.word	.L149,.L150
	.byte	8
	.word	.L151,.L152
	.byte	10
	.word	.L153,.L188,.L39
	.byte	7
	.word	.L154,.L189,.L190
	.byte	8
	.word	.L157,.L158
	.byte	8
	.word	.L159,.L160
	.byte	10
	.word	.L161,.L189,.L190
	.byte	6
	.byte	'bit2shift',0,2,38,11
	.word	.L86,.L191
	.byte	0,0,7
	.word	.L163,.L38,.L39
	.byte	8
	.word	.L164,.L165
	.byte	8
	.word	.L166,.L167
	.byte	10
	.word	.L168,.L38,.L39
	.byte	6
	.byte	'bit2shift',0,2,44,11
	.word	.L86,.L192
	.byte	0,0,0,0,0,0,0,0,7
	.word	.L134,.L39,.L37
	.byte	8
	.word	.L135,.L136
	.byte	9
	.word	.L137,.L39,.L37
	.byte	0,7
	.word	.L138,.L193,.L43
	.byte	8
	.word	.L140,.L141
	.byte	8
	.word	.L142,.L143
	.byte	10
	.word	.L144,.L193,.L43
	.byte	7
	.word	.L145,.L194,.L43
	.byte	8
	.word	.L147,.L148
	.byte	8
	.word	.L149,.L150
	.byte	8
	.word	.L151,.L152
	.byte	10
	.word	.L153,.L194,.L43
	.byte	7
	.word	.L154,.L195,.L196
	.byte	8
	.word	.L157,.L158
	.byte	8
	.word	.L159,.L160
	.byte	10
	.word	.L161,.L195,.L196
	.byte	6
	.byte	'bit2shift',0,2,38,11
	.word	.L86,.L197
	.byte	0,0,7
	.word	.L163,.L42,.L43
	.byte	8
	.word	.L164,.L165
	.byte	8
	.word	.L166,.L167
	.byte	10
	.word	.L168,.L42,.L43
	.byte	6
	.byte	'bit2shift',0,2,44,11
	.word	.L86,.L198
	.byte	0,0,0,0,0,0,7
	.word	.L124,.L199,.L200
	.byte	8
	.word	.L127,.L128
	.byte	8
	.word	.L129,.L130
	.byte	8
	.word	.L131,.L132
	.byte	10
	.word	.L133,.L199,.L200
	.byte	7
	.word	.L134,.L199,.L44
	.byte	8
	.word	.L135,.L136
	.byte	9
	.word	.L137,.L199,.L44
	.byte	0,0,0,7
	.word	.L170,.L201,.L202
	.byte	8
	.word	.L173,.L174
	.byte	10
	.word	.L175,.L201,.L202
	.byte	7
	.word	.L105,.L203,.L46
	.byte	8
	.word	.L107,.L108
	.byte	8
	.word	.L109,.L110
	.byte	10
	.word	.L111,.L203,.L46
	.byte	7
	.word	.L112,.L203,.L45
	.byte	8
	.word	.L113,.L114
	.byte	8
	.word	.L115,.L116
	.byte	9
	.word	.L117,.L203,.L45
	.byte	0,0,0,0,0,7
	.word	.L134,.L204,.L49
	.byte	8
	.word	.L135,.L136
	.byte	9
	.word	.L137,.L204,.L49
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_SetWIRStatus')
	.sect	'.debug_abbrev'
.L72:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_SetWIRStatus')
	.sect	'.debug_line'
.L73:
	.word	.L285-.L284
.L284:
	.half	3
	.word	.L287-.L286
.L286:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\indct\\Dem_Indicator.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Prv_CallEvtStChngdCbk.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_ISO14229Byte.h',0,0,0,0,0
.L287:
	.byte	5,32,7,0,5,2
	.word	.L64
	.byte	3,145,1,1,5,28,9
	.half	.L288-.L64
	.byte	3,5,1,5,17,9
	.half	.L243-.L288
	.byte	3,5,1,5,15,9
	.half	.L289-.L243
	.byte	1,9
	.half	.L290-.L289
	.byte	3,1,1,5,20,9
	.half	.L244-.L290
	.byte	3,1,1,5,18,9
	.half	.L291-.L244
	.byte	1,5,5,9
	.half	.L5-.L291
	.byte	3,2,1,4,3,5,26,9
	.half	.L10-.L5
	.byte	3,246,126,1,5,12,9
	.half	.L247-.L10
	.byte	1,5,38,7,9
	.half	.L292-.L247
	.byte	1,5,26,9
	.half	.L248-.L292
	.byte	1,5,4,9
	.half	.L11-.L248
	.byte	1,4,1,5,5,9
	.half	.L13-.L11
	.byte	3,138,1,1,7,9
	.half	.L96-.L13
	.byte	1,4,4,5,33,9
	.half	.L14-.L96
	.byte	3,214,3,1,5,51,9
	.half	.L17-.L14
	.byte	1,5,60,9
	.half	.L250-.L17
	.byte	1,5,68,9
	.half	.L293-.L250
	.byte	1,4,2,5,28,9
	.half	.L106-.L293
	.byte	3,200,123,1,5,47,9
	.half	.L294-.L106
	.byte	1,5,5,9
	.half	.L295-.L294
	.byte	1,5,73,9
	.half	.L18-.L295
	.byte	3,4,1,5,5,9
	.half	.L296-.L18
	.byte	1,4,4,5,3,9
	.half	.L19-.L296
	.byte	3,180,4,1,4,1,5,5,9
	.half	.L20-.L19
	.byte	3,170,124,1,7,9
	.half	.L101-.L20
	.byte	1,4,4,5,51,9
	.half	.L21-.L101
	.byte	3,214,3,1,5,60,9
	.half	.L251-.L21
	.byte	1,5,68,9
	.half	.L297-.L251
	.byte	1,4,2,5,28,9
	.half	.L119-.L297
	.byte	3,200,123,1,5,47,9
	.half	.L298-.L119
	.byte	1,5,5,9
	.half	.L299-.L298
	.byte	1,5,73,9
	.half	.L23-.L299
	.byte	3,4,1,5,5,9
	.half	.L300-.L23
	.byte	1,4,4,5,3,9
	.half	.L24-.L300
	.byte	3,180,4,1,4,1,5,16,9
	.half	.L25-.L24
	.byte	3,174,124,1,4,5,5,43,7,9
	.half	.L118-.L25
	.byte	3,143,1,1,5,5,9
	.half	.L249-.L118
	.byte	1,4,1,5,17,9
	.half	.L27-.L249
	.byte	3,242,126,1,7,9
	.half	.L26-.L27
	.byte	3,3,1,5,27,9
	.half	.L301-.L26
	.byte	1,5,9,9
	.half	.L28-.L301
	.byte	3,4,1,5,43,7,9
	.half	.L253-.L28
	.byte	3,5,1,5,53,9
	.half	.L254-.L253
	.byte	1,5,65,9
	.half	.L302-.L254
	.byte	1,4,6,5,12,9
	.half	.L125-.L302
	.byte	3,251,126,1,5,35,9
	.half	.L303-.L125
	.byte	1,5,5,9
	.half	.L304-.L303
	.byte	1,4,7,5,16,9
	.half	.L31-.L304
	.byte	3,24,1,5,21,9
	.half	.L305-.L31
	.byte	3,1,1,5,19,9
	.half	.L306-.L305
	.byte	1,4,1,5,25,9
	.half	.L126-.L306
	.byte	3,237,0,1,5,42,9
	.half	.L307-.L126
	.byte	3,1,1,4,4,5,49,9
	.half	.L139-.L307
	.byte	3,133,3,1,5,66,9
	.half	.L255-.L139
	.byte	1,4,2,5,5,9
	.half	.L146-.L255
	.byte	3,250,123,1,5,21,7,9
	.half	.L155-.L146
	.byte	3,116,1,5,6,9
	.half	.L256-.L155
	.byte	3,1,1,5,36,9
	.half	.L308-.L256
	.byte	1,5,13,9
	.half	.L257-.L308
	.byte	1,5,53,9
	.half	.L156-.L257
	.byte	3,13,1,5,21,9
	.half	.L32-.L156
	.byte	3,120,1,5,6,9
	.half	.L258-.L32
	.byte	3,1,1,5,47,9
	.half	.L309-.L258
	.byte	1,5,26,9
	.half	.L259-.L309
	.byte	1,5,13,9
	.half	.L310-.L259
	.byte	1,4,1,5,62,9
	.half	.L33-.L310
	.byte	3,135,1,1,4,8,5,44,9
	.half	.L171-.L33
	.byte	3,127,1,4,2,5,28,9
	.half	.L176-.L171
	.byte	3,139,127,1,5,47,9
	.half	.L311-.L176
	.byte	1,5,5,9
	.half	.L312-.L311
	.byte	1,5,73,9
	.half	.L34-.L312
	.byte	3,4,1,5,5,9
	.half	.L313-.L34
	.byte	1,4,8,9
	.half	.L35-.L313
	.byte	3,241,0,1,4,1,5,18,9
	.half	.L36-.L35
	.byte	3,1,1,4,6,5,75,7,9
	.half	.L172-.L36
	.byte	3,234,0,1,5,87,9
	.half	.L260-.L172
	.byte	1,4,8,5,41,9
	.half	.L182-.L260
	.byte	3,86,1,4,2,5,5,9
	.half	.L188-.L182
	.byte	3,190,126,1,5,21,7,9
	.half	.L189-.L188
	.byte	3,116,1,5,6,9
	.half	.L261-.L189
	.byte	3,1,1,5,36,9
	.half	.L314-.L261
	.byte	1,5,13,9
	.half	.L262-.L314
	.byte	1,5,53,9
	.half	.L190-.L262
	.byte	3,13,1,5,21,9
	.half	.L38-.L190
	.byte	3,120,1,5,6,9
	.half	.L263-.L38
	.byte	3,1,1,5,47,9
	.half	.L315-.L263
	.byte	1,5,26,9
	.half	.L264-.L315
	.byte	1,5,13,9
	.half	.L316-.L264
	.byte	1,4,6,5,35,9
	.half	.L39-.L316
	.byte	3,127,1,5,5,9
	.half	.L317-.L39
	.byte	1,4,1,5,13,9
	.half	.L37-.L317
	.byte	3,136,1,1,5,42,9
	.half	.L30-.L37
	.byte	3,12,1,4,4,5,49,9
	.half	.L193-.L30
	.byte	3,248,2,1,5,66,9
	.half	.L266-.L193
	.byte	1,4,2,5,5,9
	.half	.L194-.L266
	.byte	3,250,123,1,5,21,7,9
	.half	.L195-.L194
	.byte	3,116,1,5,6,9
	.half	.L267-.L195
	.byte	3,1,1,5,36,9
	.half	.L318-.L267
	.byte	1,5,13,9
	.half	.L268-.L318
	.byte	1,5,53,9
	.half	.L196-.L268
	.byte	3,13,1,5,21,9
	.half	.L42-.L196
	.byte	3,120,1,5,6,9
	.half	.L269-.L42
	.byte	3,1,1,5,47,9
	.half	.L319-.L269
	.byte	1,5,26,9
	.half	.L270-.L319
	.byte	1,5,13,9
	.half	.L320-.L270
	.byte	1,4,1,5,43,9
	.half	.L43-.L320
	.byte	3,148,1,1,5,53,9
	.half	.L271-.L43
	.byte	1,5,65,9
	.half	.L321-.L271
	.byte	1,4,6,5,12,9
	.half	.L199-.L321
	.byte	3,235,126,1,5,35,9
	.half	.L322-.L199
	.byte	1,5,5,9
	.half	.L323-.L322
	.byte	1,4,7,5,16,9
	.half	.L44-.L323
	.byte	3,24,1,5,21,9
	.half	.L324-.L44
	.byte	3,1,1,5,19,9
	.half	.L325-.L324
	.byte	1,4,1,5,25,9
	.half	.L200-.L325
	.byte	3,253,0,1,5,61,9
	.half	.L326-.L200
	.byte	3,1,1,4,8,5,44,9
	.half	.L201-.L326
	.byte	3,112,1,4,2,5,28,9
	.half	.L203-.L201
	.byte	3,139,127,1,5,47,9
	.half	.L327-.L203
	.byte	1,5,5,9
	.half	.L328-.L327
	.byte	1,5,73,9
	.half	.L45-.L328
	.byte	3,4,1,5,5,9
	.half	.L329-.L45
	.byte	1,4,8,9
	.half	.L46-.L329
	.byte	3,241,0,1,4,1,5,13,9
	.half	.L47-.L46
	.byte	3,16,1,5,34,7,9
	.half	.L202-.L47
	.byte	3,2,1,4,6,5,35,9
	.half	.L204-.L202
	.byte	3,231,126,1,5,5,9
	.half	.L330-.L204
	.byte	1,4,1,5,42,9
	.half	.L49-.L330
	.byte	3,153,1,1,5,22,9
	.half	.L29-.L49
	.byte	3,15,1,5,5,9
	.half	.L331-.L29
	.byte	1,7,9
	.half	.L51-.L331
	.byte	3,5,1,5,1,9
	.half	.L7-.L51
	.byte	3,1,1,7,9
	.half	.L75-.L7
	.byte	0,1,1
.L285:
	.sdecl	'.debug_ranges',debug,cluster('Dem_SetWIRStatus')
	.sect	'.debug_ranges'
.L74:
	.word	-1,.L64,0,.L75-.L64,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_SetIndicatorStatusForEvent')
	.sect	'.debug_info'
.L76:
	.word	291
	.half	3
	.word	.L77
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\indct\\Dem_Indicator.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L79,.L78
	.byte	2
	.word	.L67
	.byte	3
	.byte	'Dem_SetIndicatorStatusForEvent',0,1,29,16
	.word	.L86
	.byte	1,1,1
	.word	.L62,.L205,.L61
	.byte	4
	.byte	'EventId',0,1,29,64
	.word	.L88,.L206
	.byte	4
	.byte	'IndicatorId',0,1,29,93
	.word	.L86,.L207
	.byte	4
	.byte	'IndicatorActivation',0,1,29,114
	.word	.L86,.L208
	.byte	5
	.word	.L62,.L205
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_SetIndicatorStatusForEvent')
	.sect	'.debug_abbrev'
.L77:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_SetIndicatorStatusForEvent')
	.sect	'.debug_line'
.L78:
	.word	.L333-.L332
.L332:
	.half	3
	.word	.L335-.L334
.L334:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\indct\\Dem_Indicator.c',0,0,0,0,0
.L335:
	.byte	5,12,7,0,5,2
	.word	.L62
	.byte	3,236,0,1,5,5,9
	.half	.L336-.L62
	.byte	1,5,1,9
	.half	.L2-.L336
	.byte	3,2,1,7,9
	.half	.L80-.L2
	.byte	0,1,1
.L333:
	.sdecl	'.debug_ranges',debug,cluster('Dem_SetIndicatorStatusForEvent')
	.sect	'.debug_ranges'
.L79:
	.word	-1,.L62,0,.L80-.L62,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_UpdateISO14229WIRStatus')
	.sect	'.debug_info'
.L81:
	.word	633
	.half	3
	.word	.L82
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\indct\\Dem_Indicator.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L84,.L83
	.byte	2
	.word	.L67
	.byte	3
	.byte	'Dem_UpdateISO14229WIRStatus',0,1,224,1,6,1,1,1
	.word	.L66,.L209,.L65
	.byte	4
	.byte	'EventId',0,1,224,1,51
	.word	.L88,.L210
	.byte	5
	.word	.L66,.L209
	.byte	6
	.word	.L211,.L66,.L212
	.byte	7
	.word	.L213,.L214
	.byte	8
	.word	.L215,.L66,.L212
	.byte	6
	.word	.L105,.L216,.L55
	.byte	7
	.word	.L107,.L217
	.byte	7
	.word	.L109,.L218
	.byte	8
	.word	.L111,.L216,.L55
	.byte	6
	.word	.L112,.L216,.L54
	.byte	7
	.word	.L113,.L219
	.byte	7
	.word	.L115,.L220
	.byte	9
	.word	.L117,.L216,.L54
	.byte	0,0,0,0,0,6
	.word	.L221,.L212,.L57
	.byte	7
	.word	.L222,.L223
	.byte	8
	.word	.L224,.L212,.L57
	.byte	6
	.word	.L181,.L225,.L57
	.byte	7
	.word	.L183,.L226
	.byte	7
	.word	.L185,.L227
	.byte	8
	.word	.L187,.L225,.L57
	.byte	6
	.word	.L145,.L228,.L57
	.byte	7
	.word	.L147,.L229
	.byte	7
	.word	.L149,.L230
	.byte	7
	.word	.L151,.L231
	.byte	8
	.word	.L153,.L228,.L57
	.byte	6
	.word	.L154,.L232,.L233
	.byte	7
	.word	.L157,.L234
	.byte	7
	.word	.L159,.L235
	.byte	8
	.word	.L161,.L232,.L233
	.byte	10
	.byte	'bit2shift',0,2,38,11
	.word	.L86,.L236
	.byte	0,0,6
	.word	.L163,.L58,.L57
	.byte	7
	.word	.L164,.L237
	.byte	7
	.word	.L166,.L238
	.byte	8
	.word	.L168,.L58,.L57
	.byte	10
	.byte	'bit2shift',0,2,44,11
	.word	.L86,.L239
	.byte	0,0,0,0,0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_UpdateISO14229WIRStatus')
	.sect	'.debug_abbrev'
.L82:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,17,1,18,1,0,0,9,11,0,49,16,17,1,18,1,0,0,10,52,0,3,8
	.byte	58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_UpdateISO14229WIRStatus')
	.sect	'.debug_line'
.L83:
	.word	.L338-.L337
.L337:
	.half	3
	.word	.L340-.L339
.L339:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\indct\\Dem_Indicator.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_ISO14229Byte.h',0,0,0,0,0
.L340:
	.byte	4,3,5,33,7,0,5,2
	.word	.L66
	.byte	3,189,4,1,5,51,9
	.half	.L341-.L66
	.byte	1,5,60,9
	.half	.L342-.L341
	.byte	1,5,68,9
	.half	.L343-.L342
	.byte	1,4,2,5,28,9
	.half	.L216-.L343
	.byte	3,128,124,1,5,47,9
	.half	.L344-.L216
	.byte	1,5,5,9
	.half	.L345-.L344
	.byte	1,5,73,9
	.half	.L54-.L345
	.byte	3,4,1,5,5,9
	.half	.L346-.L54
	.byte	1,4,3,5,3,9
	.half	.L55-.L346
	.byte	3,252,3,1,4,1,5,19,9
	.half	.L56-.L55
	.byte	3,164,125,1,4,4,5,52,7,9
	.half	.L212-.L56
	.byte	3,196,0,1,5,75,9
	.half	.L347-.L212
	.byte	1,5,87,9
	.half	.L348-.L347
	.byte	1,4,5,5,41,9
	.half	.L225-.L348
	.byte	3,78,1,4,2,5,5,9
	.half	.L228-.L225
	.byte	3,190,126,1,5,21,7,9
	.half	.L232-.L228
	.byte	3,116,1,5,6,9
	.half	.L275-.L232
	.byte	3,1,1,5,36,9
	.half	.L349-.L275
	.byte	1,5,13,9
	.half	.L276-.L349
	.byte	1,5,53,9
	.half	.L233-.L276
	.byte	3,13,1,5,21,9
	.half	.L58-.L233
	.byte	3,120,1,5,6,9
	.half	.L277-.L58
	.byte	3,1,1,5,47,9
	.half	.L350-.L277
	.byte	1,5,26,9
	.half	.L278-.L350
	.byte	1,5,13,9
	.half	.L351-.L278
	.byte	1,4,1,5,1,9
	.half	.L57-.L351
	.byte	3,190,1,1,7,9
	.half	.L85-.L57
	.byte	0,1,1
.L338:
	.sdecl	'.debug_ranges',debug,cluster('Dem_UpdateISO14229WIRStatus')
	.sect	'.debug_ranges'
.L84:
	.word	-1,.L66,0,.L85-.L66,0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_SetIndicatorStatusForEvent')
	.sect	'.debug_loc'
.L61:
	.word	-1,.L62,0,.L205-.L62
	.half	2
	.byte	138,0
	.word	0,0
.L206:
	.word	-1,.L62,0,.L205-.L62
	.half	1
	.byte	84
	.word	0,0
.L208:
	.word	-1,.L62,0,.L205-.L62
	.half	1
	.byte	86
	.word	0,0
.L207:
	.word	-1,.L62,0,.L205-.L62
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_SetWIRStatus')
	.sect	'.debug_loc'
.L63:
	.word	-1,.L64,0,.L240-.L64
	.half	2
	.byte	138,0
	.word	.L240-.L64,.L87-.L64
	.half	2
	.byte	138,8
	.word	.L87-.L64,.L87-.L64
	.half	2
	.byte	138,0
	.word	0,0
.L136:
	.word	0,0
.L128:
	.word	0,0
.L89:
	.word	-1,.L64,0,.L241-.L64
	.half	1
	.byte	84
	.word	.L10-.L64,.L245-.L64
	.half	1
	.byte	84
	.word	.L247-.L64,.L248-.L64
	.half	1
	.byte	88
	.word	.L14-.L64,.L249-.L64
	.half	1
	.byte	84
	.word	.L17-.L64,.L250-.L64
	.half	1
	.byte	88
	.word	.L21-.L64,.L251-.L64
	.half	1
	.byte	88
	.word	.L118-.L64,.L252-.L64
	.half	1
	.byte	88
	.word	.L253-.L64,.L254-.L64
	.half	1
	.byte	88
	.word	.L139-.L64,.L255-.L64
	.half	1
	.byte	88
	.word	.L172-.L64,.L260-.L64
	.half	1
	.byte	88
	.word	.L39-.L64,.L265-.L64
	.half	1
	.byte	88
	.word	.L193-.L64,.L266-.L64
	.half	1
	.byte	88
	.word	.L43-.L64,.L271-.L64
	.half	1
	.byte	88
	.word	.L202-.L64,.L272-.L64
	.half	1
	.byte	88
	.word	.L272-.L64,.L204-.L64
	.half	1
	.byte	84
	.word	.L204-.L64,.L273-.L64
	.half	1
	.byte	88
	.word	0,0
.L179:
	.word	0,0
.L122:
	.word	0,0
.L141:
	.word	0,0
.L103:
	.word	0,0
.L90:
	.word	-1,.L64,0,.L242-.L64
	.half	1
	.byte	85
	.word	.L10-.L64,.L246-.L64
	.half	1
	.byte	85
	.word	.L14-.L64,.L249-.L64
	.half	1
	.byte	85
	.word	.L28-.L64,.L253-.L64
	.half	1
	.byte	89
	.word	0,0
.L162:
	.word	-1,.L64,.L256-.L64,.L257-.L64
	.half	1
	.byte	95
	.word	0,0
.L191:
	.word	-1,.L64,.L261-.L64,.L262-.L64
	.half	1
	.byte	95
	.word	0,0
.L197:
	.word	-1,.L64,.L267-.L64,.L268-.L64
	.half	1
	.byte	95
	.word	0,0
.L198:
	.word	-1,.L64,.L269-.L64,.L270-.L64
	.half	1
	.byte	95
	.word	0,0
.L192:
	.word	-1,.L64,.L263-.L64,.L264-.L64
	.half	1
	.byte	95
	.word	0,0
.L169:
	.word	-1,.L64,.L258-.L64,.L259-.L64
	.half	1
	.byte	95
	.word	0,0
.L160:
	.word	0,0
.L167:
	.word	0,0
.L150:
	.word	0,0
.L116:
	.word	0,0
.L110:
	.word	0,0
.L158:
	.word	0,0
.L165:
	.word	0,0
.L148:
	.word	0,0
.L98:
	.word	0,0
.L132:
	.word	0,0
.L94:
	.word	-1,.L64,0,.L87-.L64
	.half	2
	.byte	145,121
	.word	0,0
.L130:
	.word	0,0
.L143:
	.word	0,0
.L91:
	.word	-1,.L64,.L243-.L64,.L87-.L64
	.half	1
	.byte	90
	.word	.L274-.L64,.L7-.L64
	.half	1
	.byte	82
	.word	0,0
.L174:
	.word	0,0
.L184:
	.word	0,0
.L186:
	.word	0,0
.L93:
	.word	-1,.L64,.L244-.L64,.L87-.L64
	.half	1
	.byte	91
	.word	0,0
.L92:
	.word	-1,.L64,0,.L87-.L64
	.half	2
	.byte	145,120
	.word	0,0
.L114:
	.word	0,0
.L108:
	.word	0,0
.L152:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_UpdateISO14229WIRStatus')
	.sect	'.debug_loc'
.L65:
	.word	-1,.L66,0,.L209-.L66
	.half	2
	.byte	138,0
	.word	0,0
.L210:
	.word	-1,.L66,0,.L209-.L66
	.half	1
	.byte	84
	.word	0,0
.L223:
	.word	0,0
.L214:
	.word	0,0
.L236:
	.word	-1,.L66,.L275-.L66,.L276-.L66
	.half	1
	.byte	95
	.word	0,0
.L239:
	.word	-1,.L66,.L277-.L66,.L278-.L66
	.half	1
	.byte	95
	.word	0,0
.L235:
	.word	0,0
.L238:
	.word	0,0
.L230:
	.word	0,0
.L220:
	.word	0,0
.L218:
	.word	0,0
.L234:
	.word	0,0
.L237:
	.word	0,0
.L229:
	.word	0,0
.L226:
	.word	0,0
.L227:
	.word	0,0
.L219:
	.word	0,0
.L217:
	.word	0,0
.L231:
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L352:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Dem_SetIndicatorStatusForEvent')
	.sect	'.debug_frame'
	.word	24
	.word	.L352,.L62,.L205-.L62
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Dem_SetWIRStatus')
	.sect	'.debug_frame'
	.word	36
	.word	.L352,.L64,.L87-.L64
	.byte	4
	.word	(.L240-.L64)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L87-.L240)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_UpdateISO14229WIRStatus')
	.sect	'.debug_frame'
	.word	24
	.word	.L352,.L66,.L209-.L66
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   236  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   237  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   238  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   239  
; BSW\src\BSW\Gen\Dem\src\indct\Dem_Indicator.c	   240  

	; Module end
