	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc15712a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Dem\\src\\Dem_DTCs.src BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.c'

	
$TC16X
	
	.sdecl	'.text.Dem_DTCs.Dem_IsEventEnabledByDtcSetting',code,cluster('Dem_IsEventEnabledByDtcSetting')
	.sect	'.text.Dem_DTCs.Dem_IsEventEnabledByDtcSetting'
	.align	2
	
	.global	Dem_IsEventEnabledByDtcSetting

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	     1  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	     2  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	     3  #include "Dem.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	     4  #include "Dem_Dcm.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	     5  #include "Rte_Dem.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	     6  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	     7  #include "Dem_DTCs.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	     8  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	     9  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    10  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    11  #include "Dem_EventStatus.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    12  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    13  #include "Dem_Mapping.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    14  #include "Dem_Obd.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    15  #include "Dem_DTCGroup.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    16  #include "Dem_Prv_J1939Dcm.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    17  #include "Dem_Cfg_ExtPrototypes.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    18  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    19  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    20  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    21  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    22  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    23      DEM_ARRAY_DEFINE(Dem_DtcState, Dem_AllDTCsState, DEM_DTCID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    24  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    25  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    26  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    27  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    28  #define DEM_START_SEC_RAM_INIT
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    29  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    30  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    31      #if (DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    32      boolean Dem_AlternativeDTCEnabled = FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    33      #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    34  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    35  #define DEM_STOP_SEC_RAM_INIT
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    36  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    37  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    38  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    39  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    40  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    41  #if (DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    42   DEM_ARRAY_DEFINE_CONST(Dem_DtcAltParam, Dem_AllAlternativeDTCsParam, DEM_ALTERNATIVE_DTCCODE_ARRAYLENGTH, DEM_CFG_ALTERNATIVE_DTCPARAMS);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    43  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    44  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    45  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    46  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    47  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    48  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    49  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    50  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    51  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    52  #if (DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    53  void Dem_SwitchToAlternativeDtc(void)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    54  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    55  	Dem_AlternativeDTCEnabled = TRUE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    56  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    57  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    58  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    59  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    60  /*************************CheckDTCSettingStatus****************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    61  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    62  Dem_boolean_least Dem_IsEventEnabledByDtcSetting(Dem_EventIdType EventId)
; Function Dem_IsEventEnabledByDtcSetting
.L137:
Dem_IsEventEnabledByDtcSetting:	.type	func

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
	movh.a	a15,#@his(Dem_MapEventIdToDtcId)
	lea	a15,[a15]@los(Dem_MapEventIdToDtcId)
.L736:
	addsc.a	a2,a15,d4,#1
	ld.hu	d15,[a2]0
.L737:
	ne	d15,d15,#0
.L738:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);      (inlined)
	j	.L2

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }      (inlined)
.L2:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    63  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    64      if (Dem_EventIdIsDtcAssigned(EventId))
	jeq	d15,#0,.L3
.L490:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
	addsc.a	a15,a15,d4,#1
	ld.hu	d15,[a15]0
.L739:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];      (inlined)
	j	.L4

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }      (inlined)
.L4:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     1  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     2  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     3  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     4  #ifndef DEM_DTCS_H
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     5  #define DEM_DTCS_H
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     6  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     7  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     8  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     9  #include "Dem_Types.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    10  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    11  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    12  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    13  #include "Dem_Cfg_DtcId.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    14  #include "Dem_Cfg_DTC_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    15  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    16  #include "Dem_Mapping.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    17  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    18  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    19  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    20  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    21  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    22  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    23  #include "Dem_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    24  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    25  #define DEM_DTC_SETTING_ENABLED     FALSE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    26  #define DEM_DTC_SETTING_DISABLED    TRUE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    27  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    28  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    29  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    30  	Dem_DtcStateType state;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    31  } Dem_DtcState;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    32  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    33  /******************************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    34  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    35  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    36  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    37  #define DEM_DTCS_NVSTORAGE_BP    2u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    38  #define DEM_DTCS_ALTERNATIVEDTC_FLAG_BP    3u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    39  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    40  #define DEM_DTCS_SEVERITYMASK    0xE0u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    41  #define DEM_DTCS_KINDMASK        0x03u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    42  #define DEM_DTCS_NVSTORAGEMASK   ((uint8)(1u<<DEM_DTCS_NVSTORAGE_BP))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    43  #define DEM_DTCS_ALTERNATIVEDTC_FLAG   ((uint8)(1u<<DEM_DTCS_ALTERNATIVEDTC_FLAG_BP))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    44  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    45  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    46  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    47  #define DEM_DTCS_INIT8(KIND, SEVERITY, NVSTORAGE, FUNC_UNIT, INDEXOF_ALTERNATIVE_DTCID) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    48  {   ((KIND) & (DEM_DTCS_KINDMASK))|((SEVERITY) & (DEM_DTCS_SEVERITYMASK)) | ((uint8)(((NVSTORAGE) & (0x01u)) << DEM_DTCS_NVSTORAGE_BP)) | ((uint8)((DEM_BOOL2BIT(INDEXOF_ALTERNATIVE_DTCID) & (0x01u)) << DEM_DTCS_ALTERNATIVEDTC_FLAG_BP)) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    49      ,(FUNC_UNIT) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    50  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    51  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    52  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    53  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    54  #define DEM_DTCS_INIT16(OBDCODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    55  {   (OBDCODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    56  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    57  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    58  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    59  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    60  #define DEM_DTCS_INIT32(CODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    61  {   (CODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    62  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    63  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    64  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    65  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    66  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    67     uint8 kind_severity_storage;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    68     uint8 Functional_Unit;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    69  } Dem_DtcParam8;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    70  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    71  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    72  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    73  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    74     uint16 ObdCode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    75  } Dem_DtcParam16;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    76  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    77  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    78  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    79  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    80     Dem_DtcCodeType code;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    81  } Dem_DtcParam32;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    82  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    83  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    84      Dem_DtcCodeType AltDtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    85      Dem_DtcCodeType Dtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    86  }Dem_DtcAltParam;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    87  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    88  /******************************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    89  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    90  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    91  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    92      DEM_ARRAY_DECLARE(Dem_DtcState, Dem_AllDTCsState, DEM_DTCID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    93  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    94  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    96  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    97  #define DEM_START_SEC_RAM_INIT
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    98  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    99  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   100      #if(DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   101      extern boolean Dem_AlternativeDTCEnabled;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   102      #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   103  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   104  #define DEM_STOP_SEC_RAM_INIT
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   105  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   106  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   107  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   108  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   109  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   110      #if (DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   111      DEM_ARRAY_DECLARE_CONST(Dem_DtcAltParam, Dem_AllAlternativeDTCsParam, DEM_ALTERNATIVE_DTCCODE_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   112      #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   113  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   114  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   115  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   116  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   117  /********DTC SUPPRESSION************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   118  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressed (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   119  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   120  #if (DEM_CFG_SUPPRESSION != DEM_NO_SUPPRESSION)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   121      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   122  #else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   123      DEM_UNUSED_PARAM(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   124      return FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   126  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   127  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   128  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressedDirectly (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   129  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   130  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   131      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED_DIRECTLY);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   132  #else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   133      DEM_UNUSED_PARAM(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   134      return FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   135  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   136  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   137  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   138  DEM_INLINE Dem_boolean_least Dem_DtcIsSupported (Dem_DtcIdType dtcID)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   139  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   141              && (!Dem_DtcIsSuppressed(dtcID))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   142      );
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   143  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   144  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   145  #if ((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   146  DEM_INLINE void Dem_DtcHandleEventSuppression (Dem_DtcIdType dtcId, Dem_boolean_least eventUnsuppressed)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   147  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   148      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   149  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   150      if (!Dem_DtcIsSuppressedDirectly(dtcId))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   151      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   152          Dem_EventIdListIterator it;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   153  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   154          if (!eventUnsuppressed)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   155          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   156              for (Dem_EventIdListIteratorNewFromDtcId(&it, dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   157                      Dem_EventIdListIteratorIsValid(&it);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   158                      Dem_EventIdListIteratorNext(&it))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   159              {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   160                  if ( !Dem_EvtIsSuppressed(Dem_EventIdListIteratorCurrent(&it)) )
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   161                  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   162                      eventUnsuppressed = TRUE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   163                      break;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   164                  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   165              }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   166          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   167  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   168          DEM_DTCSTATE_OVERWRITEBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED, !eventUnsuppressed);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   169      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   170  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   171  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   172  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   173  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   174  DEM_INLINE void Dem_DtcSuppressionApply (Dem_DtcIdType dtcId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   175  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   176  	DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   177  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   178  	DEM_DTCSTATE_OVERWRITEBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED_DIRECTLY, setBit);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   179  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   180  	if (setBit)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   181  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   182  	    DEM_DTCSTATE_SETBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   183  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   184  	else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   185  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   186  # if (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   187  	    Dem_DtcHandleEventSuppression (dtcId, FALSE);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   188  # else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   189  	    DEM_DTCSTATE_CLEARBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   190  # endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   191  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   192  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   193  	DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   194  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   195  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   196  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   197  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   198  DEM_INLINE Dem_boolean_least Dem_IsEventMemoryEntryExistForDTC (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   199  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   200  	uint8 DtcStatusByte = Dem_DtcStatusByteRetrieve(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   201  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   202  	/**
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   203  	 * Checking, whether TestFailed or TestFailedSLC bit is set
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   204  	 * (To make sure that corresponding DTC already processed and available in Event memory)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   205  	 */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   206  	if(Dem_ISO14229ByteIsTestFailed(DtcStatusByte) || Dem_ISO14229ByteIsTestFailedSLC(DtcStatusByte))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   207  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   208  		return TRUE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   209  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   210  	else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   211  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   212  		return FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   213  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   214  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   215  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   216  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   217  /***********************************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   218  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   219  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   220  /*-- DTC CODE ----------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   221  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   222  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   223  DEM_INLINE Dem_DtcCodeType Dem_GetDtcCode (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   224  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   225  #if (DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   226      if(Dem_Cfg_Dtc_GetDtcCode_Is_Index(dtcId))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   227      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   228          if (Dem_AlternativeDTCEnabled)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   229          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   230              return Dem_AllAlternativeDTCsParam[Dem_Cfg_Dtc_GetDtcCode(dtcId)].AltDtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   231          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   232          else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   233          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   234              return Dem_AllAlternativeDTCsParam[Dem_Cfg_Dtc_GetDtcCode(dtcId)].Dtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   235          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   236      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   237      else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   238  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   239      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   240          return Dem_Cfg_Dtc_GetDtcCode(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   241      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   242  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   243  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   244  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   245  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   246  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   247  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   248  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   249  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   250  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   251  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   252  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   253  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   254  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   255  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   256  Dem_DtcIdType Dem_DtcIdFromDtcCode (Dem_DtcCodeType dtcCode);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   257  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   258  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   259  /* Duplicate of Dem_GetDTCOfEvent to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   260  Std_ReturnType Dem_GetDTCOfEvent_GeneralEvtInfo(Dem_EventIdType EventId, Dem_DTCFormatType DTCFormat, uint32* DTCOfEvent);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   261  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   262  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   263  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   264  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   265  DEM_INLINE Dem_boolean_least Dem_EventUsesOrigin (Dem_EventIdType eventId, Dem_DTCOriginType origin)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   266  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   267  	if (   ((origin == DEM_DTC_ORIGIN_PRIMARY_MEMORY) && Dem_EvtParam_GetEventIsStoredInPrimary(eventId))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   268  			|| ((origin == DEM_DTC_ORIGIN_SECONDARY_MEMORY) && Dem_EvtParam_GetEventIsStoredInSecondary(eventId))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   269  			|| ((origin == DEM_DTC_ORIGIN_MIRROR_MEMORY) && Dem_EvtParam_GetEventIsStoredInMirror(eventId))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   270  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   271  #if (DEM_CFG_OBD != DEM_CFG_OBD_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   272  			|| ((origin == DEM_DTC_ORIGIN_PERMANENT_MEMORY) && (Dem_Cfg_Dtc_GetKind(Dem_DtcIdFromEventId(eventId)) == DEM_DTC_KIND_EMISSION_REL_DTCS))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   273  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   274  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   275  	)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   276  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   277  		return TRUE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   278  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   279  	return FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   280  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   281  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   282  DEM_INLINE Dem_boolean_least Dem_DtcUsesOrigin (Dem_DtcIdType dtcId, Dem_DTCOriginType origin)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   283  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   284      Dem_EventIdType eventId = Dem_DtcIdGetFirstEventId(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   285      return Dem_EventUsesOrigin(eventId, origin);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   286  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   287  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   288  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   289  /*************************Enable & DiableDTCGroup****************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   290  void Dem_DtcSetDTCSetting (Dem_DtcIdType dtcId, Dem_boolean_least setBit);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   291  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   292  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   293  DEM_INLINE Dem_boolean_least Dem_DtcIsDTCSettingEnabled(Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   294  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   295  	return (!(DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_GROUP_DTCSETTING_DISABLED)));
	movh.a	a15,#@his(Dem_AllDTCsState)
	lea	a15,[a15]@los(Dem_AllDTCsState)
.L740:
	addsc.a	a15,a15,d15,#0
.L741:
	ld.bu	d15,[a15]
.L742:
	mov	d0,#1
.L496:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L743:
	and	d15,#1
.L744:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L5

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L5:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L745:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L6

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L6:
	eq	d15,d15,#0
.L746:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   295  	return (!(DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_GROUP_DTCSETTING_DISABLED)));      (inlined)
	j	.L7

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   296  }      (inlined)
.L7:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    65      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    66          if(!Dem_DtcIsDTCSettingEnabled(Dem_DtcIdFromEventId(EventId)))
	jne	d15,#0,.L8
.L747:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    67          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    68  #if(DEM_DTC_DTCSETTING_CALLBACK_SUPPORTED == DEM_DTC_DTCSETTING_CALLBACK_SUPPORTED_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    69              //invoke the global config callback to get the DTC Disable status
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    70              if(DEM_DTC_CALLBACK_FUNCTION_DISABLE_DTCSETTING_ALLOWED(EventId))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    71  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    72              {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    73                  return FALSE;
	mov	d2,#0
.L748:
	j	.L9
.L8:
.L3:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    74              }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    75          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    76      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    77      return TRUE;
	mov	d2,#1
.L749:
	j	.L10

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    78  }
.L10:
.L9:
	ret
.L487:
	
__Dem_IsEventEnabledByDtcSetting_function_end:
	.size	Dem_IsEventEnabledByDtcSetting,__Dem_IsEventEnabledByDtcSetting_function_end-Dem_IsEventEnabledByDtcSetting
.L217:
	; End of function
	
	.sdecl	'.text.Dem_DTCs.Dem_DtcIdFromDtcCode',code,cluster('Dem_DtcIdFromDtcCode')
	.sect	'.text.Dem_DTCs.Dem_DtcIdFromDtcCode'
	.align	2
	
	.global	Dem_DtcIdFromDtcCode

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    79  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    80  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    81  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    82  /*-- DTC CODE ----------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    83  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    84  Dem_DtcIdType Dem_DtcIdFromDtcCode (Dem_DtcCodeType dtcCode)
; Function Dem_DtcIdFromDtcCode
.L139:
Dem_DtcIdFromDtcCode:	.type	func
	sub.a	a10,#8
.L533:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    85  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    86  	Dem_DtcIdIterator dtcId;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    87  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    88  	for (Dem_DtcIdIteratorNew(&dtcId);
	lea	a15,[a10]0
.L349:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
	mov	d15,#1
.L679:
	st.w	[a15],d15
.L350:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    89  			Dem_DtcIdIteratorIsValid(&dtcId);
	j	.L11

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    90  			Dem_DtcIdIteratorNext(&dtcId))
.L12:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    91  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    92  		if (Dem_GetDtcCode(Dem_DtcIdIteratorCurrent(&dtcId)) == dtcCode)
	lea	a15,[a10]0
.L355:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
	ld.w	d15,[a15]
.L680:
	extr.u	d15,d15,#0,#16
.L681:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);      (inlined)
	j	.L13

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }      (inlined)
.L13:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	   101  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));      (inlined)
.L14:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     2  /********************************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     3  /*                                                                                                                  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     4  /* TOOL-GENERATED SOURCECODE, DO NOT CHANGE                                                                         */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     5  /*                                                                                                                  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     6  /********************************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     7  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     8  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     9  #ifndef DEM_CFG_DTC_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    10  #define DEM_CFG_DTC_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    12  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    13  #include "Dem_Cfg_DTCs.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    14  #include "Dem_Prv_Det.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    15  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    17  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    18  /*
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    19  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    20  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    21  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    22  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    23  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    24  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    26  #include "Dem_Lib.h"  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    27  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    28  /*
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    29  #define DEM_CFG_STOREWAITINGFORMONITORINGEVENT  FALSE
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    30  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING_OFF  STD_OFF
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    31  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING_ON   STD_ON
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    32  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING      DEM_CFG_DTCFILTER_EXTERNALPROCESSING_OFF
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    33  #define DEM_CFG_DTCSTATUS_AVAILABILITYMASK     0xFFu
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    34  #define DEM_CFG_DTC_TRANSLATION_TYPE           DEM_DTC_TRANSLATION_SAEJ1939_73
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    35  #define DEM_CFG_DTCSTATEMANGER_DTCS_PER_CYCLE   5u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    36  #define DEM_DTC_BP_STATE_SUPPRESSED             0u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    37  #define DEM_DTC_BP_GROUP_DTCSETTING_DISABLED    1u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    38  #define DEM_DTC_GROUP_DemGroupOfDTC_0_DTCS           0xFA0u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    39  #define DEM_DTC_GROUP_DemGroupOfDTC_1_DTCS           0x1388u  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    40  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    41  /* --------------------------------------------------- */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    42  /* DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED    */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    43  /* --------------------------------------------------- */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    44  // #define DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED   FALSE
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    45  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    47  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    48  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    49  	Dem_DtcCodeType DtcCode;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    50  	Dem_DTCSeverityType Severity;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    51  	Dem_DTCKindType Kind;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    52  	boolean DtcCode_Is_Index;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    53  	uint8 Func_Unit;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    54  	boolean Nv_Storage;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    55  } Dem_Cfg_DtcType;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    56  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    57  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    58  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    59  extern const Dem_Cfg_DtcType Dem_Cfg_Dtc[5];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    62  LOCAL_INLINE Dem_DTCKindType Dem_Cfg_Dtc_GetKind(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    65  	return Dem_Cfg_Dtc[indx].Kind;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    68  LOCAL_INLINE Dem_DTCSeverityType Dem_Cfg_Dtc_GetSeverity(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    69  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    70  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    71  	return Dem_Cfg_Dtc[indx].Severity;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    72  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    73  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    74  LOCAL_INLINE boolean Dem_Cfg_Dtc_GetNv_Storage(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    75  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    76  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    77  	return Dem_Cfg_Dtc[indx].Nv_Storage;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    78  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    79  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    80  LOCAL_INLINE uint8 Dem_Cfg_Dtc_GetFunc_Unit(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    81  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    82  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    83  	return Dem_Cfg_Dtc[indx].Func_Unit;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    84  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    85  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    86  LOCAL_INLINE boolean Dem_Cfg_Dtc_GetDtcCode_Is_Index(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    87  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    88  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    89  	return Dem_Cfg_Dtc[indx].DtcCode_Is_Index;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    90  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    91  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    92  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    93  LOCAL_INLINE Dem_DtcCodeType Dem_Cfg_Dtc_GetObd_DtcCode(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    94  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    95  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    96  	return DEM_INVALID_DTC; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    97  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    98  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    99  LOCAL_INLINE Dem_DtcCodeType Dem_Cfg_Dtc_GetDtcCode(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	   100  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	   101  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	   102  	return Dem_Cfg_Dtc[indx].DtcCode;
	mul	d15,d15,#12
.L682:
	movh.a	a15,#@his(Dem_Cfg_Dtc)
	lea	a15,[a15]@los(Dem_Cfg_Dtc)
.L683:
	addsc.a	a15,a15,d15,#0
.L684:
	ld.w	d15,[a15]
.L685:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	   102  	return Dem_Cfg_Dtc[indx].DtcCode;      (inlined)
	j	.L15

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	   103  }      (inlined)
.L15:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   240          return Dem_Cfg_Dtc_GetDtcCode(dtcId);      (inlined)
	j	.L16

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   242  }      (inlined)
.L16:
	jne	d15,d4,.L17
.L359:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    93  		{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    94  			return Dem_DtcIdIteratorCurrent(&dtcId);
	lea	a15,[a10]0
.L362:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
	ld.w	d15,[a15]
.L686:
	extr.u	d2,d15,#0,#16
.L687:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);      (inlined)
	j	.L18

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }      (inlined)
.L18:
	j	.L19
.L17:
	lea	a15,[a10]0
.L364:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
	ld.w	d15,[a15]
.L688:
	add	d15,#1
	st.w	[a15],d15
.L11:
	lea	a15,[a10]0
.L369:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
	mov	d0,#0
.L689:
	ld.w	d15,[a15]
.L690:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));      (inlined)
	jeq	d15,#0,.L20
.L691:
	ge.u	d15,d15,#5
.L692:
	cmovn	d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));      (inlined)
.L21:
.L20:
	j	.L22

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }      (inlined)
.L22:
	jne	d0,#0,.L12
.L370:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    95  		}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    96  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    97  	return DEM_DTCID_INVALID;
	mov	d2,#0
.L693:
	j	.L23

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    98  }
.L23:
.L19:
	ret
.L344:
	
__Dem_DtcIdFromDtcCode_function_end:
	.size	Dem_DtcIdFromDtcCode,__Dem_DtcIdFromDtcCode_function_end-Dem_DtcIdFromDtcCode
.L207:
	; End of function
	
	.sdecl	'.text.Dem_DTCs.Dem_GetDTCOfEvent',code,cluster('Dem_GetDTCOfEvent')
	.sect	'.text.Dem_DTCs.Dem_GetDTCOfEvent'
	.align	2
	
	.global	Dem_GetDTCOfEvent

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	    99  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   100  /*-- PUBLIC INTERFACES -------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   101  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   102  Std_ReturnType Dem_GetDTCOfEvent(Dem_EventIdType EventId, Dem_DTCFormatType DTCFormat, uint32* DTCOfEvent)
; Function Dem_GetDTCOfEvent
Dem_GetDTCOfEvent:	.type	func

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   103  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   104     Dem_DtcIdType dtcId;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   105  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   106     DEM_ENTRY_CONDITION_CHECK_EVENT_ID_VALID_AVAILABLE(EventId,DEM_DET_APIID_DEM_GETDTCOFEVENT,E_NOT_OK);
.L24:
.L25:
.L26:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
	mov	d15,#0
.L631:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
	jeq	d4,#0,.L27
.L632:
	ge.u	d0,d4,#6
.L633:
	sel	d15,d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
.L28:
.L27:
	j	.L29

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }      (inlined)
.L29:
	jne	d15,#0,.L30
.L297:
	mov	d4,#54
.L536:
	mov	d5,#0
.L534:
	mov	d6,#13
	mov	d7,#16
	call	Det_ReportError
.L535:
	mov	d2,#1
	j	.L31
.L30:
.L32:
.L33:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
	movh.a	a15,#@his(Dem_AllEventsState)
	lea	a15,[a15]@los(Dem_AllEventsState)
.L634:
	addsc.a	a15,a15,d4,#2
.L635:
	ld.bu	d15,[a15]
.L636:
	mov	d0,#2
.L306:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L637:
	and	d15,#1
.L638:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L34

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L34:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L639:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L35

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L35:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);      (inlined)
	j	.L36

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   631  }      (inlined)
.L36:
	jeq	d15,#0,.L37
.L302:
	mov	d2,#1
	j	.L38
.L37:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   107     DEM_ENTRY_CONDITION_CHECK_NOT_NULL_PTR(DTCOfEvent,DEM_DET_APIID_DEM_GETDTCOFEVENT,E_NOT_OK);
.L39:
.L40:
	jnz.a	a4,.L41
.L640:
	mov	d4,#54
.L539:
	mov	d5,#0
.L537:
	mov	d6,#13
	mov	d7,#17
	call	Det_ReportError
.L538:
	mov	d2,#1
	j	.L42
.L41:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
	movh.a	a15,#@his(Dem_MapEventIdToDtcId)
	lea	a15,[a15]@los(Dem_MapEventIdToDtcId)
.L641:
	addsc.a	a2,a15,d4,#1
	ld.hu	d15,[a2]0
.L642:
	ne	d15,d15,#0
.L643:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);      (inlined)
	j	.L43

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }      (inlined)
.L43:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   108  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   109     if (!Dem_EventIdIsDtcAssigned(EventId))
	jne	d15,#0,.L44
.L644:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   110     {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   111        return DEM_E_NO_DTC_AVAILABLE;
	mov	d2,#2
.L645:
	j	.L45
.L44:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
	addsc.a	a15,a15,d4,#1
	ld.hu	d15,[a15]0
.L543:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];      (inlined)
	j	.L46

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }      (inlined)
.L46:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   112     }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   113  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   114     dtcId = Dem_DtcIdFromEventId(EventId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   115  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   116     if (DTCFormat == DEM_DTC_FORMAT_UDS)
	jne	d5,#1,.L47

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	   101  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));      (inlined)
.L48:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     2  /********************************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     3  /*                                                                                                                  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     4  /* TOOL-GENERATED SOURCECODE, DO NOT CHANGE                                                                         */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     5  /*                                                                                                                  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     6  /********************************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     7  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     8  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     9  #ifndef DEM_CFG_DTC_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    10  #define DEM_CFG_DTC_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    12  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    13  #include "Dem_Cfg_DTCs.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    14  #include "Dem_Prv_Det.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    15  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    17  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    18  /*
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    19  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    20  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    21  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    22  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    23  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    24  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    26  #include "Dem_Lib.h"  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    27  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    28  /*
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    29  #define DEM_CFG_STOREWAITINGFORMONITORINGEVENT  FALSE
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    30  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING_OFF  STD_OFF
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    31  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING_ON   STD_ON
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    32  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING      DEM_CFG_DTCFILTER_EXTERNALPROCESSING_OFF
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    33  #define DEM_CFG_DTCSTATUS_AVAILABILITYMASK     0xFFu
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    34  #define DEM_CFG_DTC_TRANSLATION_TYPE           DEM_DTC_TRANSLATION_SAEJ1939_73
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    35  #define DEM_CFG_DTCSTATEMANGER_DTCS_PER_CYCLE   5u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    36  #define DEM_DTC_BP_STATE_SUPPRESSED             0u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    37  #define DEM_DTC_BP_GROUP_DTCSETTING_DISABLED    1u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    38  #define DEM_DTC_GROUP_DemGroupOfDTC_0_DTCS           0xFA0u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    39  #define DEM_DTC_GROUP_DemGroupOfDTC_1_DTCS           0x1388u  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    40  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    41  /* --------------------------------------------------- */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    42  /* DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED    */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    43  /* --------------------------------------------------- */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    44  // #define DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED   FALSE
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    45  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    47  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    48  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    49  	Dem_DtcCodeType DtcCode;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    50  	Dem_DTCSeverityType Severity;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    51  	Dem_DTCKindType Kind;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    52  	boolean DtcCode_Is_Index;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    53  	uint8 Func_Unit;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    54  	boolean Nv_Storage;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    55  } Dem_Cfg_DtcType;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    56  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    57  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    58  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    59  extern const Dem_Cfg_DtcType Dem_Cfg_Dtc[5];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    62  LOCAL_INLINE Dem_DTCKindType Dem_Cfg_Dtc_GetKind(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    65  	return Dem_Cfg_Dtc[indx].Kind;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    68  LOCAL_INLINE Dem_DTCSeverityType Dem_Cfg_Dtc_GetSeverity(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    69  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    70  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    71  	return Dem_Cfg_Dtc[indx].Severity;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    72  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    73  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    74  LOCAL_INLINE boolean Dem_Cfg_Dtc_GetNv_Storage(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    75  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    76  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    77  	return Dem_Cfg_Dtc[indx].Nv_Storage;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    78  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    79  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    80  LOCAL_INLINE uint8 Dem_Cfg_Dtc_GetFunc_Unit(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    81  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    82  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    83  	return Dem_Cfg_Dtc[indx].Func_Unit;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    84  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    85  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    86  LOCAL_INLINE boolean Dem_Cfg_Dtc_GetDtcCode_Is_Index(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    87  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    88  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    89  	return Dem_Cfg_Dtc[indx].DtcCode_Is_Index;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    90  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    91  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    92  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    93  LOCAL_INLINE Dem_DtcCodeType Dem_Cfg_Dtc_GetObd_DtcCode(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    94  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    95  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    96  	return DEM_INVALID_DTC; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    97  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    98  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    99  LOCAL_INLINE Dem_DtcCodeType Dem_Cfg_Dtc_GetDtcCode(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	   100  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	   101  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	   102  	return Dem_Cfg_Dtc[indx].DtcCode;
	mul	d15,d15,#12
.L544:
	movh.a	a15,#@his(Dem_Cfg_Dtc)
	lea	a15,[a15]@los(Dem_Cfg_Dtc)
.L646:
	addsc.a	a15,a15,d15,#0
.L647:
	ld.w	d15,[a15]
.L648:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	   102  	return Dem_Cfg_Dtc[indx].DtcCode;      (inlined)
	j	.L49

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	   103  }      (inlined)
.L49:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   240          return Dem_Cfg_Dtc_GetDtcCode(dtcId);      (inlined)
	j	.L50

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   242  }      (inlined)
.L50:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   117     {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   118         *DTCOfEvent = Dem_GetDtcCode(dtcId);
	st.w	[a4],d15
.L320:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   119         return E_OK;
	mov	d2,#0
.L649:
	j	.L51
.L47:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   120     }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   121     else if (DTCFormat == DEM_DTC_FORMAT_OBD)
	jne	d5,#0,.L52
.L650:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   122     {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   123         /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   124  #if (DEM_CFG_OBD != DEM_CFG_OBD_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   125         *DTCOfEvent = rba_DemObdBasic_Dtc_GetCode(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   126         return E_OK;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   127  #else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   128         /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   129         return E_NOT_OK;
	mov	d2,#1
.L651:
	j	.L53
.L52:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   130         /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   131  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   132         /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   133     }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   134     else if (DTCFormat == DEM_DTC_FORMAT_J1939)
	jne	d5,#2,.L54
.L652:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   135     {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   136         /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   137  #if (DEM_CFG_J1939DCM != DEM_CFG_J1939DCM_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   138         *DTCOfEvent = Dem_J1939DtcGetCode(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   139         return E_OK;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   140  #else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   141         /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   142         return E_NOT_OK;
	mov	d2,#1
.L653:
	j	.L55
.L54:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   143         /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   144  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   145         /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   146     }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   147     else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   148     {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   149         DEM_ASSERT_ISNOTLOCKED(); //To ensure that early return does not exit from within lock
.L56:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   150         DEM_DET(DEM_DET_APIID_DEM_GETDTCOFEVENT,DEM_E_WRONG_CONFIGURATION);
	mov	d4,#54
.L542:
	mov	d5,#0
.L540:
	mov	d6,#13
	mov	d7,#16
	call	Det_ReportError
.L541:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   151         return E_NOT_OK;
	mov	d2,#1
.L654:
	j	.L57

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   152     }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   153  }
.L57:
.L55:
.L53:
.L51:
.L45:
.L42:
.L38:
.L31:
	ret
.L290:
	
__Dem_GetDTCOfEvent_function_end:
	.size	Dem_GetDTCOfEvent,__Dem_GetDTCOfEvent_function_end-Dem_GetDTCOfEvent
.L187:
	; End of function
	
	.sdecl	'.text.Dem_DTCs.Dem_GetDTCOfEvent_GeneralEvtInfo',code,cluster('Dem_GetDTCOfEvent_GeneralEvtInfo')
	.sect	'.text.Dem_DTCs.Dem_GetDTCOfEvent_GeneralEvtInfo'
	.align	2
	
	.global	Dem_GetDTCOfEvent_GeneralEvtInfo

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   154  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   155  Std_ReturnType Dem_GetDTCOfEvent_GeneralEvtInfo(Dem_EventIdType EventId, Dem_DTCFormatType DTCFormat, uint32* DTCOfEvent)
; Function Dem_GetDTCOfEvent_GeneralEvtInfo
.L142:
Dem_GetDTCOfEvent_GeneralEvtInfo:	.type	func

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   156  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   157      return Dem_GetDTCOfEvent(EventId, DTCFormat, DTCOfEvent);
	call	Dem_GetDTCOfEvent
.L545:
	j	.L58

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   158  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   159  }
.L58:
	ret
.L340:
	
__Dem_GetDTCOfEvent_GeneralEvtInfo_function_end:
	.size	Dem_GetDTCOfEvent_GeneralEvtInfo,__Dem_GetDTCOfEvent_GeneralEvtInfo_function_end-Dem_GetDTCOfEvent_GeneralEvtInfo
.L202:
	; End of function
	
	.sdecl	'.text.Dem_DTCs.Dem_GetTranslationType',code,cluster('Dem_GetTranslationType')
	.sect	'.text.Dem_DTCs.Dem_GetTranslationType'
	.align	2
	
	.global	Dem_GetTranslationType

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   160  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   161  Dem_DTCTranslationFormatType Dem_GetTranslationType(void)
; Function Dem_GetTranslationType
.L144:
Dem_GetTranslationType:	.type	func

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   162  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   163     return DEM_CFG_DTC_TRANSLATION_TYPE;
	mov	d2,#1
.L583:
	j	.L59

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   164  }
.L59:
	ret
.L226:
	
__Dem_GetTranslationType_function_end:
	.size	Dem_GetTranslationType,__Dem_GetTranslationType_function_end-Dem_GetTranslationType
.L167:
	; End of function
	
	.sdecl	'.text.Dem_DTCs.Dem_GetDTCStatusAvailabilityMask',code,cluster('Dem_GetDTCStatusAvailabilityMask')
	.sect	'.text.Dem_DTCs.Dem_GetDTCStatusAvailabilityMask'
	.align	2
	
	.global	Dem_GetDTCStatusAvailabilityMask

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   165  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   166  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   167  Std_ReturnType Dem_GetDTCStatusAvailabilityMask(uint8* DTCStatusMask)
; Function Dem_GetDTCStatusAvailabilityMask
.L146:
Dem_GetDTCStatusAvailabilityMask:	.type	func

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   168  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   169     *DTCStatusMask = DEM_CFG_DTCSTATUS_AVAILABILITYMASK;
	mov	d15,#255
.L588:
	st.b	[a4],d15
.L589:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   170     return E_OK;
	mov	d2,#0
.L590:
	j	.L60

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   171  }
.L60:
	ret
.L227:
	
__Dem_GetDTCStatusAvailabilityMask_function_end:
	.size	Dem_GetDTCStatusAvailabilityMask,__Dem_GetDTCStatusAvailabilityMask_function_end-Dem_GetDTCStatusAvailabilityMask
.L172:
	; End of function
	
	.sdecl	'.text.Dem_DTCs.Dem_GetSeverityOfDTC',code,cluster('Dem_GetSeverityOfDTC')
	.sect	'.text.Dem_DTCs.Dem_GetSeverityOfDTC'
	.align	2
	
	.global	Dem_GetSeverityOfDTC

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   172  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   173  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   174  Dem_ReturnGetSeverityOfDTCType Dem_GetSeverityOfDTC(uint32 DTC, Dem_DTCSeverityType* DTCSeverity)
; Function Dem_GetSeverityOfDTC
.L148:
Dem_GetSeverityOfDTC:	.type	func
	mov.aa	a12,a4
.L546:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   175  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   176     Dem_DtcIdType dtcId = Dem_DtcIdFromDtcCode(DTC);
	call	Dem_DtcIdFromDtcCode
.L238:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     1  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     2  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     3  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     4  #ifndef DEM_DTCS_H
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     5  #define DEM_DTCS_H
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     6  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     7  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     8  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     9  #include "Dem_Types.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    10  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    11  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    12  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    13  #include "Dem_Cfg_DtcId.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    14  #include "Dem_Cfg_DTC_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    15  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    16  #include "Dem_Mapping.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    17  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    18  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    19  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    20  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    21  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    22  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    23  #include "Dem_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    24  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    25  #define DEM_DTC_SETTING_ENABLED     FALSE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    26  #define DEM_DTC_SETTING_DISABLED    TRUE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    27  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    28  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    29  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    30  	Dem_DtcStateType state;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    31  } Dem_DtcState;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    32  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    33  /******************************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    34  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    35  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    36  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    37  #define DEM_DTCS_NVSTORAGE_BP    2u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    38  #define DEM_DTCS_ALTERNATIVEDTC_FLAG_BP    3u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    39  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    40  #define DEM_DTCS_SEVERITYMASK    0xE0u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    41  #define DEM_DTCS_KINDMASK        0x03u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    42  #define DEM_DTCS_NVSTORAGEMASK   ((uint8)(1u<<DEM_DTCS_NVSTORAGE_BP))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    43  #define DEM_DTCS_ALTERNATIVEDTC_FLAG   ((uint8)(1u<<DEM_DTCS_ALTERNATIVEDTC_FLAG_BP))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    44  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    45  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    46  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    47  #define DEM_DTCS_INIT8(KIND, SEVERITY, NVSTORAGE, FUNC_UNIT, INDEXOF_ALTERNATIVE_DTCID) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    48  {   ((KIND) & (DEM_DTCS_KINDMASK))|((SEVERITY) & (DEM_DTCS_SEVERITYMASK)) | ((uint8)(((NVSTORAGE) & (0x01u)) << DEM_DTCS_NVSTORAGE_BP)) | ((uint8)((DEM_BOOL2BIT(INDEXOF_ALTERNATIVE_DTCID) & (0x01u)) << DEM_DTCS_ALTERNATIVEDTC_FLAG_BP)) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    49      ,(FUNC_UNIT) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    50  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    51  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    52  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    53  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    54  #define DEM_DTCS_INIT16(OBDCODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    55  {   (OBDCODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    56  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    57  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    58  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    59  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    60  #define DEM_DTCS_INIT32(CODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    61  {   (CODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    62  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    63  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    64  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    65  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    66  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    67     uint8 kind_severity_storage;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    68     uint8 Functional_Unit;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    69  } Dem_DtcParam8;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    70  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    71  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    72  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    73  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    74     uint16 ObdCode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    75  } Dem_DtcParam16;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    76  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    77  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    78  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    79  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    80     Dem_DtcCodeType code;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    81  } Dem_DtcParam32;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    82  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    83  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    84      Dem_DtcCodeType AltDtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    85      Dem_DtcCodeType Dtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    86  }Dem_DtcAltParam;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    87  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    88  /******************************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    89  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    90  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    91  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    92      DEM_ARRAY_DECLARE(Dem_DtcState, Dem_AllDTCsState, DEM_DTCID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    93  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    94  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    96  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    97  #define DEM_START_SEC_RAM_INIT
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    98  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    99  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   100      #if(DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   101      extern boolean Dem_AlternativeDTCEnabled;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   102      #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   103  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   104  #define DEM_STOP_SEC_RAM_INIT
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   105  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   106  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   107  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   108  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   109  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   110      #if (DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   111      DEM_ARRAY_DECLARE_CONST(Dem_DtcAltParam, Dem_AllAlternativeDTCsParam, DEM_ALTERNATIVE_DTCCODE_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   112      #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   113  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   114  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   115  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   116  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   117  /********DTC SUPPRESSION************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   118  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressed (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   119  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   120  #if (DEM_CFG_SUPPRESSION != DEM_NO_SUPPRESSION)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   121      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   122  #else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   123      DEM_UNUSED_PARAM(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   124      return FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   126  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   127  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   128  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressedDirectly (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   129  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   130  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   131      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED_DIRECTLY);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   132  #else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   133      DEM_UNUSED_PARAM(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   134      return FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   135  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   136  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   137  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   138  DEM_INLINE Dem_boolean_least Dem_DtcIsSupported (Dem_DtcIdType dtcID)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   139  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   141              && (!Dem_DtcIsSuppressed(dtcID))
	mov	d0,#0
.L244:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
	mov	d1,#0
.L595:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
	jeq	d2,#0,.L61
.L596:
	ge.u	d15,d2,#5
.L597:
	cmovn	d1,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
.L62:
.L61:
	j	.L63

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }      (inlined)
.L63:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)      (inlined)
	jeq	d1,#0,.L64
.L245:
	movh.a	a15,#@his(Dem_AllDTCsState)
	lea	a15,[a15]@los(Dem_AllDTCsState)
.L598:
	addsc.a	a15,a15,d2,#0
.L599:
	ld.bu	d15,[a15]
.L600:
	mov	d1,#0
.L254:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d1,#0
	sha	d15,d15,d1
.L601:
	and	d15,#1
.L602:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L65

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L65:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L603:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L66

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L66:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   121      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);      (inlined)
	j	.L67

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   126  }      (inlined)
.L67:
	cmovn	d0,d15,#1

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   141              && (!Dem_DtcIsSuppressed(dtcID))      (inlined)
.L68:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   142      );      (inlined)
.L64:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)      (inlined)
	j	.L69

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   143  }      (inlined)
.L69:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   177  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   178     if (!Dem_DtcIsSupported(dtcId))
	jne	d0,#0,.L70
.L239:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   179     {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   180        return DEM_GET_SEVERITYOFDTC_WRONG_DTC;
	mov	d2,#1
.L547:
	j	.L71
.L70:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    70  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));      (inlined)
.L72:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     2  /********************************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     3  /*                                                                                                                  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     4  /* TOOL-GENERATED SOURCECODE, DO NOT CHANGE                                                                         */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     5  /*                                                                                                                  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     6  /********************************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     7  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     8  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     9  #ifndef DEM_CFG_DTC_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    10  #define DEM_CFG_DTC_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    12  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    13  #include "Dem_Cfg_DTCs.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    14  #include "Dem_Prv_Det.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    15  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    17  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    18  /*
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    19  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    20  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    21  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    22  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    23  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    24  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    26  #include "Dem_Lib.h"  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    27  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    28  /*
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    29  #define DEM_CFG_STOREWAITINGFORMONITORINGEVENT  FALSE
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    30  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING_OFF  STD_OFF
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    31  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING_ON   STD_ON
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    32  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING      DEM_CFG_DTCFILTER_EXTERNALPROCESSING_OFF
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    33  #define DEM_CFG_DTCSTATUS_AVAILABILITYMASK     0xFFu
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    34  #define DEM_CFG_DTC_TRANSLATION_TYPE           DEM_DTC_TRANSLATION_SAEJ1939_73
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    35  #define DEM_CFG_DTCSTATEMANGER_DTCS_PER_CYCLE   5u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    36  #define DEM_DTC_BP_STATE_SUPPRESSED             0u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    37  #define DEM_DTC_BP_GROUP_DTCSETTING_DISABLED    1u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    38  #define DEM_DTC_GROUP_DemGroupOfDTC_0_DTCS           0xFA0u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    39  #define DEM_DTC_GROUP_DemGroupOfDTC_1_DTCS           0x1388u  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    40  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    41  /* --------------------------------------------------- */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    42  /* DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED    */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    43  /* --------------------------------------------------- */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    44  // #define DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED   FALSE
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    45  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    47  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    48  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    49  	Dem_DtcCodeType DtcCode;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    50  	Dem_DTCSeverityType Severity;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    51  	Dem_DTCKindType Kind;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    52  	boolean DtcCode_Is_Index;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    53  	uint8 Func_Unit;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    54  	boolean Nv_Storage;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    55  } Dem_Cfg_DtcType;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    56  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    57  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    58  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    59  extern const Dem_Cfg_DtcType Dem_Cfg_Dtc[5];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    62  LOCAL_INLINE Dem_DTCKindType Dem_Cfg_Dtc_GetKind(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    65  	return Dem_Cfg_Dtc[indx].Kind;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    68  LOCAL_INLINE Dem_DTCSeverityType Dem_Cfg_Dtc_GetSeverity(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    69  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    70  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    71  	return Dem_Cfg_Dtc[indx].Severity;
	mul	d15,d2,#12
.L604:
	movh.a	a15,#@his(Dem_Cfg_Dtc)
	lea	a15,[a15]@los(Dem_Cfg_Dtc)
.L605:
	addsc.a	a15,a15,d15,#0
.L606:
	ld.bu	d15,[a15]4
.L607:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    71  	return Dem_Cfg_Dtc[indx].Severity;      (inlined)
	j	.L73

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    72  }      (inlined)
.L73:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   181     }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   182  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   183     *DTCSeverity = Dem_Cfg_Dtc_GetSeverity(dtcId);
	st.b	[a12],d15
.L608:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   184     return DEM_GET_SEVERITYOFDTC_OK;
	mov	d2,#0
.L548:
	j	.L74

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   185  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   186     /* TODO: is it necessary to return DEM_GET_SEVERITYOFDTC_NOSEVERITY? */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   187  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   188  }
.L74:
.L71:
	ret
.L230:
	
__Dem_GetSeverityOfDTC_function_end:
	.size	Dem_GetSeverityOfDTC,__Dem_GetSeverityOfDTC_function_end-Dem_GetSeverityOfDTC
.L177:
	; End of function
	
	.sdecl	'.text.Dem_DTCs.Dem_GetFunctionalUnitOfDTC',code,cluster('Dem_GetFunctionalUnitOfDTC')
	.sect	'.text.Dem_DTCs.Dem_GetFunctionalUnitOfDTC'
	.align	2
	
	.global	Dem_GetFunctionalUnitOfDTC

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   189  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   190  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   191  Dem_ReturnGetFunctionalUnitOfDTCType Dem_GetFunctionalUnitOfDTC (uint32 DTC, uint8* DTCFunctionalUnit)
; Function Dem_GetFunctionalUnitOfDTC
.L150:
Dem_GetFunctionalUnitOfDTC:	.type	func
	mov.aa	a12,a4
.L549:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   192  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   193     Dem_DtcIdType dtcId = Dem_DtcIdFromDtcCode(DTC);
	call	Dem_DtcIdFromDtcCode
.L274:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     1  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     2  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     3  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     4  #ifndef DEM_DTCS_H
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     5  #define DEM_DTCS_H
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     6  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     7  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     8  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     9  #include "Dem_Types.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    10  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    11  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    12  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    13  #include "Dem_Cfg_DtcId.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    14  #include "Dem_Cfg_DTC_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    15  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    16  #include "Dem_Mapping.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    17  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    18  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    19  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    20  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    21  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    22  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    23  #include "Dem_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    24  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    25  #define DEM_DTC_SETTING_ENABLED     FALSE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    26  #define DEM_DTC_SETTING_DISABLED    TRUE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    27  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    28  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    29  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    30  	Dem_DtcStateType state;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    31  } Dem_DtcState;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    32  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    33  /******************************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    34  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    35  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    36  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    37  #define DEM_DTCS_NVSTORAGE_BP    2u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    38  #define DEM_DTCS_ALTERNATIVEDTC_FLAG_BP    3u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    39  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    40  #define DEM_DTCS_SEVERITYMASK    0xE0u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    41  #define DEM_DTCS_KINDMASK        0x03u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    42  #define DEM_DTCS_NVSTORAGEMASK   ((uint8)(1u<<DEM_DTCS_NVSTORAGE_BP))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    43  #define DEM_DTCS_ALTERNATIVEDTC_FLAG   ((uint8)(1u<<DEM_DTCS_ALTERNATIVEDTC_FLAG_BP))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    44  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    45  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    46  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    47  #define DEM_DTCS_INIT8(KIND, SEVERITY, NVSTORAGE, FUNC_UNIT, INDEXOF_ALTERNATIVE_DTCID) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    48  {   ((KIND) & (DEM_DTCS_KINDMASK))|((SEVERITY) & (DEM_DTCS_SEVERITYMASK)) | ((uint8)(((NVSTORAGE) & (0x01u)) << DEM_DTCS_NVSTORAGE_BP)) | ((uint8)((DEM_BOOL2BIT(INDEXOF_ALTERNATIVE_DTCID) & (0x01u)) << DEM_DTCS_ALTERNATIVEDTC_FLAG_BP)) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    49      ,(FUNC_UNIT) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    50  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    51  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    52  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    53  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    54  #define DEM_DTCS_INIT16(OBDCODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    55  {   (OBDCODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    56  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    57  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    58  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    59  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    60  #define DEM_DTCS_INIT32(CODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    61  {   (CODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    62  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    63  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    64  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    65  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    66  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    67     uint8 kind_severity_storage;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    68     uint8 Functional_Unit;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    69  } Dem_DtcParam8;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    70  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    71  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    72  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    73  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    74     uint16 ObdCode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    75  } Dem_DtcParam16;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    76  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    77  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    78  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    79  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    80     Dem_DtcCodeType code;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    81  } Dem_DtcParam32;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    82  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    83  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    84      Dem_DtcCodeType AltDtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    85      Dem_DtcCodeType Dtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    86  }Dem_DtcAltParam;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    87  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    88  /******************************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    89  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    90  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    91  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    92      DEM_ARRAY_DECLARE(Dem_DtcState, Dem_AllDTCsState, DEM_DTCID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    93  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    94  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    96  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    97  #define DEM_START_SEC_RAM_INIT
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    98  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    99  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   100      #if(DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   101      extern boolean Dem_AlternativeDTCEnabled;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   102      #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   103  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   104  #define DEM_STOP_SEC_RAM_INIT
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   105  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   106  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   107  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   108  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   109  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   110      #if (DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   111      DEM_ARRAY_DECLARE_CONST(Dem_DtcAltParam, Dem_AllAlternativeDTCsParam, DEM_ALTERNATIVE_DTCCODE_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   112      #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   113  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   114  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   115  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   116  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   117  /********DTC SUPPRESSION************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   118  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressed (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   119  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   120  #if (DEM_CFG_SUPPRESSION != DEM_NO_SUPPRESSION)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   121      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   122  #else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   123      DEM_UNUSED_PARAM(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   124      return FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   126  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   127  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   128  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressedDirectly (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   129  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   130  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   131      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED_DIRECTLY);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   132  #else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   133      DEM_UNUSED_PARAM(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   134      return FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   135  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   136  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   137  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   138  DEM_INLINE Dem_boolean_least Dem_DtcIsSupported (Dem_DtcIdType dtcID)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   139  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   141              && (!Dem_DtcIsSuppressed(dtcID))
	mov	d0,#0
.L277:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
	mov	d1,#0
.L613:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
	jeq	d2,#0,.L75
.L614:
	ge.u	d15,d2,#5
.L615:
	cmovn	d1,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
.L76:
.L75:
	j	.L77

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }      (inlined)
.L77:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)      (inlined)
	jeq	d1,#0,.L78
.L278:
	movh.a	a15,#@his(Dem_AllDTCsState)
	lea	a15,[a15]@los(Dem_AllDTCsState)
.L616:
	addsc.a	a15,a15,d2,#0
.L617:
	ld.bu	d15,[a15]
.L618:
	mov	d1,#0
.L281:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d1,#0
	sha	d15,d15,d1
.L619:
	and	d15,#1
.L620:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L79

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L79:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L621:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L80

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L80:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   121      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);      (inlined)
	j	.L81

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   126  }      (inlined)
.L81:
	cmovn	d0,d15,#1

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   141              && (!Dem_DtcIsSuppressed(dtcID))      (inlined)
.L82:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   142      );      (inlined)
.L78:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)      (inlined)
	j	.L83

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   143  }      (inlined)
.L83:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   194  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   195     if (!Dem_DtcIsSupported(dtcId))
	jne	d0,#0,.L84
.L275:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   196     {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   197        return DEM_GET_FUNCTIONALUNITOFDTC_WRONG_DTC;
	mov	d2,#1
.L550:
	j	.L85
.L84:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    82  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));      (inlined)
.L86:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     2  /********************************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     3  /*                                                                                                                  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     4  /* TOOL-GENERATED SOURCECODE, DO NOT CHANGE                                                                         */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     5  /*                                                                                                                  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     6  /********************************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     7  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     8  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     9  #ifndef DEM_CFG_DTC_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    10  #define DEM_CFG_DTC_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    12  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    13  #include "Dem_Cfg_DTCs.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    14  #include "Dem_Prv_Det.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    15  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    17  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    18  /*
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    19  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    20  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    21  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    22  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    23  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    24  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    26  #include "Dem_Lib.h"  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    27  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    28  /*
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    29  #define DEM_CFG_STOREWAITINGFORMONITORINGEVENT  FALSE
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    30  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING_OFF  STD_OFF
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    31  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING_ON   STD_ON
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    32  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING      DEM_CFG_DTCFILTER_EXTERNALPROCESSING_OFF
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    33  #define DEM_CFG_DTCSTATUS_AVAILABILITYMASK     0xFFu
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    34  #define DEM_CFG_DTC_TRANSLATION_TYPE           DEM_DTC_TRANSLATION_SAEJ1939_73
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    35  #define DEM_CFG_DTCSTATEMANGER_DTCS_PER_CYCLE   5u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    36  #define DEM_DTC_BP_STATE_SUPPRESSED             0u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    37  #define DEM_DTC_BP_GROUP_DTCSETTING_DISABLED    1u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    38  #define DEM_DTC_GROUP_DemGroupOfDTC_0_DTCS           0xFA0u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    39  #define DEM_DTC_GROUP_DemGroupOfDTC_1_DTCS           0x1388u  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    40  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    41  /* --------------------------------------------------- */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    42  /* DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED    */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    43  /* --------------------------------------------------- */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    44  // #define DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED   FALSE
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    45  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    47  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    48  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    49  	Dem_DtcCodeType DtcCode;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    50  	Dem_DTCSeverityType Severity;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    51  	Dem_DTCKindType Kind;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    52  	boolean DtcCode_Is_Index;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    53  	uint8 Func_Unit;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    54  	boolean Nv_Storage;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    55  } Dem_Cfg_DtcType;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    56  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    57  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    58  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    59  extern const Dem_Cfg_DtcType Dem_Cfg_Dtc[5];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    62  LOCAL_INLINE Dem_DTCKindType Dem_Cfg_Dtc_GetKind(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    65  	return Dem_Cfg_Dtc[indx].Kind;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    68  LOCAL_INLINE Dem_DTCSeverityType Dem_Cfg_Dtc_GetSeverity(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    69  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    70  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    71  	return Dem_Cfg_Dtc[indx].Severity;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    72  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    73  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    74  LOCAL_INLINE boolean Dem_Cfg_Dtc_GetNv_Storage(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    75  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    76  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    77  	return Dem_Cfg_Dtc[indx].Nv_Storage;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    78  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    79  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    80  LOCAL_INLINE uint8 Dem_Cfg_Dtc_GetFunc_Unit(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    81  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    82  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    83  	return Dem_Cfg_Dtc[indx].Func_Unit;
	mul	d15,d2,#12
.L622:
	movh.a	a15,#@his(Dem_Cfg_Dtc)
	lea	a15,[a15]@los(Dem_Cfg_Dtc)
.L623:
	addsc.a	a15,a15,d15,#0
.L624:
	ld.bu	d15,[a15]7
.L625:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    83  	return Dem_Cfg_Dtc[indx].Func_Unit;      (inlined)
	j	.L87

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    84  }      (inlined)
.L87:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   198     }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   199  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   200     *DTCFunctionalUnit = Dem_Cfg_Dtc_GetFunc_Unit(dtcId);
	st.b	[a12],d15
.L626:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   201     return DEM_GET_FUNCTIONALUNITOFDTC_OK;
	mov	d2,#0
.L551:
	j	.L88

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   202  }
.L88:
.L85:
	ret
.L270:
	
__Dem_GetFunctionalUnitOfDTC_function_end:
	.size	Dem_GetFunctionalUnitOfDTC,__Dem_GetFunctionalUnitOfDTC_function_end-Dem_GetFunctionalUnitOfDTC
.L182:
	; End of function
	
	.sdecl	'.text.Dem_DTCs.Dem_SetDTCSuppression',code,cluster('Dem_SetDTCSuppression')
	.sect	'.text.Dem_DTCs.Dem_SetDTCSuppression'
	.align	2
	
	.global	Dem_SetDTCSuppression

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   203  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   204  Std_ReturnType Dem_SetDTCSuppression (uint32 DTC, Dem_DTCFormatType DTCFormat, boolean SuppressionStatus)
; Function Dem_SetDTCSuppression
.L152:
Dem_SetDTCSuppression:	.type	func

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   205  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   206  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   207  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   208  	Dem_DtcIdType dtcId = Dem_DtcIdFromDtcCode(DTC);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   209  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   210      DEM_ENTRY_CONDITION_CHECK_DEM_PREINITIALIZED(DEM_DET_APIID_DEM_SETDTCSUPPRESSION,E_NOT_OK);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   211  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   212     if (DTCFormat == DEM_DTC_FORMAT_UDS)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   213     {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   214        dtcId = Dem_DtcIdFromDtcCode(DTC);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   215     }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   216     else /* DEM_DTC_FORMAT_OBD */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   217     {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   218        /* not implemented, DEM specification not clear eg: regarding handling of readiness */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   219  	  	DEM_ASSERT_ISNOTLOCKED();	//to ensure that early return does not exit from within lock
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   220  	  	//DET reported incase DTC FOrmat is neither OBD nor UDS
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   221  	    DEM_DET(DEM_DET_APIID_DEM_SETDTCSUPPRESSION,DEM_E_WRONG_CONFIGURATION);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   222  	  return E_NOT_OK;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   223     }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   224  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   225  	/**
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   226  	 * Dem588: The API Dem_SetDTCSuppression shall reject the request and return E_NOT_OK,
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   227  	 * if the event memory entry exists already.
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   228  	 */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   229  	if ((!Dem_isDtcIdValid(dtcId)) || (Dem_IsEventMemoryEntryExistForDTC(dtcId)))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   230  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   231  	    DEM_ASSERT_ISNOTLOCKED();   //to ensure that early return does not exit from within lock
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   232  	    DEM_DET(DEM_DET_APIID_DEM_SETDTCSUPPRESSION,DEM_E_WRONG_CONFIGURATION);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   233  		return E_NOT_OK;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   234  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   235  	else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   236  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   237  		Dem_DtcSuppressionApply(dtcId, SuppressionStatus);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   238  		return E_OK;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   239  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   240  #else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   241  	DEM_UNUSED_PARAM(DTC);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   242  	DEM_UNUSED_PARAM(DTCFormat);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   243  	DEM_UNUSED_PARAM(SuppressionStatus);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   244  	return E_NOT_OK;
	mov	d2,#1
.L659:
	j	.L89

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   245  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   246  }
.L89:
	ret
.L328:
	
__Dem_SetDTCSuppression_function_end:
	.size	Dem_SetDTCSuppression,__Dem_SetDTCSuppression_function_end-Dem_SetDTCSuppression
.L192:
	; End of function
	
	.sdecl	'.text.Dem_DTCs.Dem_DtcFaultDetectionRetrieve',code,cluster('Dem_DtcFaultDetectionRetrieve')
	.sect	'.text.Dem_DTCs.Dem_DtcFaultDetectionRetrieve'
	.align	2
	
	.global	Dem_DtcFaultDetectionRetrieve

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   247  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   248  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   249  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   250  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   251  /***************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   252  /* DtcLevel Fault Detection Counter */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   253  /***************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   254  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   255  sint8 Dem_DtcFaultDetectionRetrieve (Dem_DtcIdType dtcId)
; Function Dem_DtcFaultDetectionRetrieve
.L154:
Dem_DtcFaultDetectionRetrieve:	.type	func
	sub.a	a10,#16
.L552:
	mov	d9,d4
.L554:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   256  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   257  	Dem_EventIdListIterator eventIt;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   258  	Dem_EventIdType eventId;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   259  	sint8 faultDetectionCtrVal=0;
	mov	d15,#0
.L754:
	st.b	[a10]8,d15
.L755:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   260  	sint8 maxFaultDetectionCtrVal = -128;
	mov	d8,#-128
.L555:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   261  	sint8 returnValue = 0;
	mov	d10,#0
.L509:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     1  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     2  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     3  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     4  #ifndef DEM_DTCS_H
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     5  #define DEM_DTCS_H
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     6  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     7  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     8  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     9  #include "Dem_Types.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    10  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    11  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    12  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    13  #include "Dem_Cfg_DtcId.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    14  #include "Dem_Cfg_DTC_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    15  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    16  #include "Dem_Mapping.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    17  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    18  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    19  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    20  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    21  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    22  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    23  #include "Dem_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    24  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    25  #define DEM_DTC_SETTING_ENABLED     FALSE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    26  #define DEM_DTC_SETTING_DISABLED    TRUE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    27  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    28  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    29  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    30  	Dem_DtcStateType state;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    31  } Dem_DtcState;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    32  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    33  /******************************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    34  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    35  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    36  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    37  #define DEM_DTCS_NVSTORAGE_BP    2u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    38  #define DEM_DTCS_ALTERNATIVEDTC_FLAG_BP    3u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    39  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    40  #define DEM_DTCS_SEVERITYMASK    0xE0u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    41  #define DEM_DTCS_KINDMASK        0x03u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    42  #define DEM_DTCS_NVSTORAGEMASK   ((uint8)(1u<<DEM_DTCS_NVSTORAGE_BP))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    43  #define DEM_DTCS_ALTERNATIVEDTC_FLAG   ((uint8)(1u<<DEM_DTCS_ALTERNATIVEDTC_FLAG_BP))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    44  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    45  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    46  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    47  #define DEM_DTCS_INIT8(KIND, SEVERITY, NVSTORAGE, FUNC_UNIT, INDEXOF_ALTERNATIVE_DTCID) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    48  {   ((KIND) & (DEM_DTCS_KINDMASK))|((SEVERITY) & (DEM_DTCS_SEVERITYMASK)) | ((uint8)(((NVSTORAGE) & (0x01u)) << DEM_DTCS_NVSTORAGE_BP)) | ((uint8)((DEM_BOOL2BIT(INDEXOF_ALTERNATIVE_DTCID) & (0x01u)) << DEM_DTCS_ALTERNATIVEDTC_FLAG_BP)) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    49      ,(FUNC_UNIT) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    50  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    51  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    52  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    53  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    54  #define DEM_DTCS_INIT16(OBDCODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    55  {   (OBDCODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    56  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    57  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    58  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    59  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    60  #define DEM_DTCS_INIT32(CODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    61  {   (CODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    62  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    63  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    64  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    65  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    66  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    67     uint8 kind_severity_storage;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    68     uint8 Functional_Unit;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    69  } Dem_DtcParam8;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    70  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    71  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    72  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    73  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    74     uint16 ObdCode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    75  } Dem_DtcParam16;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    76  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    77  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    78  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    79  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    80     Dem_DtcCodeType code;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    81  } Dem_DtcParam32;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    82  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    83  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    84      Dem_DtcCodeType AltDtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    85      Dem_DtcCodeType Dtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    86  }Dem_DtcAltParam;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    87  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    88  /******************************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    89  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    90  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    91  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    92      DEM_ARRAY_DECLARE(Dem_DtcState, Dem_AllDTCsState, DEM_DTCID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    93  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    94  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    96  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    97  #define DEM_START_SEC_RAM_INIT
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    98  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    99  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   100      #if(DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   101      extern boolean Dem_AlternativeDTCEnabled;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   102      #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   103  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   104  #define DEM_STOP_SEC_RAM_INIT
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   105  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   106  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   107  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   108  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   109  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   110      #if (DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   111      DEM_ARRAY_DECLARE_CONST(Dem_DtcAltParam, Dem_AllAlternativeDTCsParam, DEM_ALTERNATIVE_DTCCODE_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   112      #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   113  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   114  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   115  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   116  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   117  /********DTC SUPPRESSION************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   118  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressed (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   119  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   120  #if (DEM_CFG_SUPPRESSION != DEM_NO_SUPPRESSION)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   121      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   122  #else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   123      DEM_UNUSED_PARAM(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   124      return FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   126  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   127  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   128  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressedDirectly (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   129  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   130  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   131      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED_DIRECTLY);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   132  #else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   133      DEM_UNUSED_PARAM(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   134      return FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   135  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   136  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   137  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   138  DEM_INLINE Dem_boolean_least Dem_DtcIsSupported (Dem_DtcIdType dtcID)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   139  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   141              && (!Dem_DtcIsSuppressed(dtcID))
	mov	d0,#0
.L512:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
	mov	d1,#0
.L756:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
	jeq	d9,#0,.L90
.L757:
	ge.u	d15,d9,#5
.L758:
	cmovn	d1,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
.L91:
.L90:
	j	.L92

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }      (inlined)
.L92:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)      (inlined)
	jeq	d1,#0,.L93
.L513:
	movh.a	a15,#@his(Dem_AllDTCsState)
	lea	a15,[a15]@los(Dem_AllDTCsState)
.L759:
	addsc.a	a15,a15,d9,#0
.L760:
	ld.bu	d1,[a15]
.L761:
	mov	d2,#0
.L516:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d2,#0
	sha	d1,d1,d2
.L762:
	and	d15,d1,#1
.L763:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L94

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L94:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L764:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L95

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L95:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   121      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);      (inlined)
	j	.L96

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   126  }      (inlined)
.L96:
	cmovn	d0,d15,#1

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   141              && (!Dem_DtcIsSuppressed(dtcID))      (inlined)
.L97:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   142      );      (inlined)
.L93:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)      (inlined)
	j	.L98

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   143  }      (inlined)
.L98:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   262  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   263  	if (Dem_DtcIsSupported(dtcId))
	jeq	d0,#0,.L99
.L510:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   264  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   265  		for (Dem_EventIdListIteratorNewFromDtcId(&eventIt, dtcId);
	lea	a12,[a10]0
.L521:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
	mov	d0,#0
.L765:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
	jeq	d9,#0,.L100
.L766:
	ge.u	d15,d9,#5
.L767:
	cmovn	d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
.L101:
.L100:
	j	.L102

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }      (inlined)
.L102:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))      (inlined)
	jne	d0,#0,.L103
.L525:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
	mov	d4,#54
.L553:
	mov	d5,#0
	mov	d6,#189
	mov	d7,#0
	call	Det_ReportError

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))      (inlined)
.L103:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
	movh.a	a15,#@his(Dem_MapDtcIdToEventId)
	lea	a15,[a15]@los(Dem_MapDtcIdToEventId)
.L768:
	addsc.a	a15,a15,d9,#1
.L769:
	st.a	[a12],a15
.L770:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
	add.a	a15,#2
.L771:
	st.a	[a10]4,a15
.L522:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   266  				Dem_EventIdListIteratorIsValid(&eventIt);
	j	.L104

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   267  				Dem_EventIdListIteratorNext(&eventIt))
.L105:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   268  		{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   269  			eventId = Dem_EventIdListIteratorCurrent(&eventIt);
	lea	a15,[a10]0
.L526:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   315  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   316     it->it = &Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   317     it->end = &Dem_MapDtcIdToEventId[dtcid].mappingTable[Dem_MapDtcIdToEventId[dtcid].length];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   318  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   319  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   320  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   321  DEM_INLINE Dem_boolean_least Dem_EventIdListIteratorIsValid(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   322  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   324  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   326  DEM_INLINE void Dem_EventIdListIteratorNext(Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   327  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   328     (it->it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   329  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   331  DEM_INLINE Dem_EventIdType Dem_EventIdListIteratorCurrent(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   333     return (Dem_EventIdType)(*(it->it));
	ld.a	a15,[a15]
.L772:
	ld.hu	d4,[a15]0
.L773:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   333     return (Dem_EventIdType)(*(it->it));      (inlined)
	j	.L106

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   334  }      (inlined)
.L106:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   270  			if (Dem_GetFaultDetectionCounter(eventId, &faultDetectionCtrVal) == E_OK)
	lea	a4,[a10]8
	call	Dem_GetFaultDetectionCounter
.L774:
	jne	d2,#0,.L107

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   271  			{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   272  			    DEM_A_MAX_AB(maxFaultDetectionCtrVal, faultDetectionCtrVal);
.L108:
	ld.b	d15,[a10]8
	jge	d8,d15,.L109
	ld.b	d8,[a10]8
.L109:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   273  			                    returnValue=maxFaultDetectionCtrVal;
	mov	d10,d8
.L107:
	lea	a15,[a10]0
.L528:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   315  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   316     it->it = &Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   317     it->end = &Dem_MapDtcIdToEventId[dtcid].mappingTable[Dem_MapDtcIdToEventId[dtcid].length];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   318  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   319  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   320  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   321  DEM_INLINE Dem_boolean_least Dem_EventIdListIteratorIsValid(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   322  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   324  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   326  DEM_INLINE void Dem_EventIdListIteratorNext(Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   327  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   328     (it->it)++;
	ld.a	a2,[a15]
.L775:
	add.a	a2,#2
	st.a	[a15],a2
.L104:
	lea	a15,[a10]0
.L530:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   315  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   316     it->it = &Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   317     it->end = &Dem_MapDtcIdToEventId[dtcid].mappingTable[Dem_MapDtcIdToEventId[dtcid].length];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   318  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   319  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   320  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   321  DEM_INLINE Dem_boolean_least Dem_EventIdListIteratorIsValid(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   322  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));
	ld.a	a15,[a15]
.L776:
	ld.a	a2,[a10]4
.L777:
	lt.a	d15,a15,a2
.L778:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));      (inlined)
	j	.L110

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   324  }      (inlined)
.L110:
	jne	d15,#0,.L105
.L99:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   274  			}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   275  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   276  		}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   277  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   278  	return returnValue;
	mov	d2,d10
.L556:
	j	.L111

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   279  }
.L111:
	ret
.L502:
	
__Dem_DtcFaultDetectionRetrieve_function_end:
	.size	Dem_DtcFaultDetectionRetrieve,__Dem_DtcFaultDetectionRetrieve_function_end-Dem_DtcFaultDetectionRetrieve
.L222:
	; End of function
	
	.sdecl	'.text.Dem_DTCs.Dem_GetDtcFaultDetectionCounter',code,cluster('Dem_GetDtcFaultDetectionCounter')
	.sect	'.text.Dem_DTCs.Dem_GetDtcFaultDetectionCounter'
	.align	2
	
	.global	Dem_GetDtcFaultDetectionCounter

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   280  /***************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   281  /* DtcFault Detection Counter based on dtcCode */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   282  /***************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   283  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   284  Std_ReturnType Dem_GetDtcFaultDetectionCounter(Dem_DtcCodeType dtcCode, sint8* FaultDetectionCounter)
; Function Dem_GetDtcFaultDetectionCounter
.L156:
Dem_GetDtcFaultDetectionCounter:	.type	func
	mov.aa	a15,a4
.L557:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   285  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   286      Dem_DtcIdType dtcId;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   287  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   288      if( FaultDetectionCounter != NULL_PTR )
	jz.a	a15,.L112
.L664:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   289      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   290          dtcId = Dem_DtcIdFromDtcCode(dtcCode);
	call	Dem_DtcIdFromDtcCode
.L337:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
	mov	d15,#0
.L665:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
	jeq	d2,#0,.L113
.L666:
	ge.u	d0,d2,#5
.L667:
	sel	d15,d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
.L114:
.L113:
	j	.L115

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }      (inlined)
.L115:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   291  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   292          if( Dem_isDtcIdValid(dtcId) )
	jeq	d15,#0,.L116
.L338:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   293          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   294              *FaultDetectionCounter = Dem_DtcFaultDetectionRetrieve(dtcId);
	mov	d4,d2
.L559:
	call	Dem_DtcFaultDetectionRetrieve
.L558:
	st.b	[a15],d2
.L668:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   295              return E_OK;
	mov	d2,#0
.L669:
	j	.L117
.L116:
.L112:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   296          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   297      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   298  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   299      return E_NOT_OK;
	mov	d2,#1
.L670:
	j	.L118

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   300  }
.L118:
.L117:
	ret
.L332:
	
__Dem_GetDtcFaultDetectionCounter_function_end:
	.size	Dem_GetDtcFaultDetectionCounter,__Dem_GetDtcFaultDetectionCounter_function_end-Dem_GetDtcFaultDetectionCounter
.L197:
	; End of function
	
	.sdecl	'.text.Dem_DTCs.Dem_DtcSetDTCSetting',code,cluster('Dem_DtcSetDTCSetting')
	.sect	'.text.Dem_DTCs.Dem_DtcSetDTCSetting'
	.align	2
	
	.global	Dem_DtcSetDTCSetting

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   301  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   302  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   303  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   304  void Dem_DtcSetDTCSetting (Dem_DtcIdType dtcId, Dem_boolean_least setBit)
; Function Dem_DtcSetDTCSetting
.L158:
Dem_DtcSetDTCSetting:	.type	func
	sub.a	a10,#8
.L560:
	mov	d15,d4

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   305  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   306      Dem_EventIdListIterator eventIt;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   307  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   308      DEM_ASSERT_ISLOCKED();
.L119:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   309  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   310      DEM_DTCSTATE_OVERWRITEBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_GROUP_DTCSETTING_DISABLED, setBit);
	movh.a	a15,#@his(Dem_AllDTCsState)
	lea	a15,[a15]@los(Dem_AllDTCsState)
.L698:
	addsc.a	a15,a15,d15,#0
.L699:
	mov	d1,#1
.L380:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
	jeq	d5,#0,.L120
.L389:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
	mov	d0,#1
.L563:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
	ld.bu	d2,[a15]
.L700:
	sha	d0,d0,d1
.L564:
	or	d2,d0
	st.b	[a15],d2
.L390:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);      (inlined)
	j	.L121

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
.L120:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
	mov	d0,#1
.L565:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
	ld.bu	d2,[a15]
.L701:
	sha	d0,d0,d1
.L566:
	xor	d0,d0,#255
.L702:
	and	d2,d0
	st.b	[a15],d2

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else      (inlined)
.L121:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   311  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   312      if (!setBit)
	jne	d5,#0,.L122
.L703:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   313      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   314          for (Dem_EventIdListIteratorNewFromDtcId(&eventIt, dtcId);
	lea	a12,[a10]0
.L405:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
	mov	d0,#0
.L704:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
	jeq	d15,#0,.L123
.L705:
	ge.u	d1,d15,#5
.L706:
	sel	d0,d1,d0,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
.L124:
.L123:
	j	.L125

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }      (inlined)
.L125:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))      (inlined)
	jne	d0,#0,.L126
.L412:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
	mov	d4,#54
.L561:
	mov	d5,#0
.L562:
	mov	d6,#189
	mov	d7,#0
	call	Det_ReportError

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))      (inlined)
.L126:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
	movh.a	a15,#@his(Dem_MapDtcIdToEventId)
	lea	a15,[a15]@los(Dem_MapDtcIdToEventId)
.L707:
	addsc.a	a15,a15,d15,#1
.L708:
	st.a	[a12],a15
.L709:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
	add.a	a15,#2
.L710:
	st.a	[a10]4,a15
.L406:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   315                  Dem_EventIdListIteratorIsValid(&eventIt);
	j	.L127

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   316                  Dem_EventIdListIteratorNext(&eventIt))
.L128:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   333     return (Dem_EventIdType)(*(it->it));      (inlined)
	j	.L129

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   334  }      (inlined)
.L129:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   317          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   318              Dem_EvtSt_HandleDTCSettingOn(Dem_EventIdListIteratorCurrent(&eventIt));
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   319              Dem_EvtSetInitMonitoring((Dem_EventIdListIteratorCurrent(&eventIt)), DEM_INIT_MONITOR_REENABLED);
	lea	a15,[a10]0
.L418:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   315  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   316     it->it = &Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   317     it->end = &Dem_MapDtcIdToEventId[dtcid].mappingTable[Dem_MapDtcIdToEventId[dtcid].length];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   318  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   319  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   320  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   321  DEM_INLINE Dem_boolean_least Dem_EventIdListIteratorIsValid(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   322  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   324  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   326  DEM_INLINE void Dem_EventIdListIteratorNext(Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   327  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   328     (it->it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   329  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   331  DEM_INLINE Dem_EventIdType Dem_EventIdListIteratorCurrent(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   333     return (Dem_EventIdType)(*(it->it));
	ld.a	a15,[a15]
.L711:
	ld.hu	d15,[a15]0
.L712:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   333     return (Dem_EventIdType)(*(it->it));      (inlined)
	j	.L130

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   334  }      (inlined)
.L130:
	mov	d4,#3
.L420:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
	movh.a	a15,#@his(Dem_AllEventsState)
	lea	a15,[a15]@los(Dem_AllEventsState)
.L713:
	addsc.a	a15,a15,d15,#2
.L714:
	ld.bu	d15,[a15]
.L429:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    68  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    69  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetBits(uint8 value, uint8 bit_position, uint8 number_of_bits)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    70  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    71      uint8 bit2shift = 1;
	mov	d0,#1
.L567:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    72      value = value >> bit_position;
	sha	d15,#-3
.L715:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    73      value = value % ((uint8) (bit2shift << number_of_bits));
	sha	d0,#3
.L568:
	div.u	e0,d15,d0
.L716:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    74      return value;      (inlined)
	j	.L131

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    75  }      (inlined)
.L131:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();      (inlined)
.L132:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))      (inlined)
	jeq	d1,#0,.L133
.L717:
	jlt.u	d1,#4,.L134
.L133:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
	mov	d15,#3
.L718:
	mov	d1,#3
.L439:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    68  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    69  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetBits(uint8 value, uint8 bit_position, uint8 number_of_bits)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    70  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    71      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    72      value = value >> bit_position;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    73      value = value % ((uint8) (bit2shift << number_of_bits));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    74      return value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    75  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    76  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    77  LOCAL_INLINE void rba_DiagLib_Bit8ClearBits(uint8 *value, uint8 bit_position, uint8 number_of_bits)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    78  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    79      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    80      *value &= ((uint8) (~((uint8) ((((uint8) (bit2shift << number_of_bits)) - 1u) << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    81  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    82  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    83  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBits(uint8 *value, uint8 bit_position, uint8 number_of_bits, uint8 newValue)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    84  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    85      uint8 bit2shift = 1;
	mov	d0,#1
.L451:
	mov	d2,#1
.L570:
	ld.bu	d3,[a15]
.L719:
	sha	d2,d2,d1
.L571:
	add	d2,#-1
.L720:
	sh	d2,d2,d15
.L721:
	xor	d15,d2,#255
.L722:
	and	d3,d15
	st.b	[a15],d3
.L452:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    86      rba_DiagLib_Bit8ClearBits(value, bit_position, number_of_bits);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    87      *value |= ((uint8) ((newValue % ((uint8) (bit2shift << number_of_bits))) << bit_position));
	ld.bu	d15,[a15]
.L723:
	sha	d0,#3
.L569:
	div.u	e0,d4,d0
.L724:
	sha	d0,d1,#3
.L725:
	or	d15,d0
	st.b	[a15],d15

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))      (inlined)
.L134:
	movh.a	a15,#@his(Dem_GlobalInitMonitoringCounter)
	lea	a15,[a15]@los(Dem_GlobalInitMonitoringCounter)
	ld.hu	d15,[a15]0
.L726:
	add	d15,#1
	st.h	[a15],d15
.L462:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
	mov	d0,#3
.L465:
	movh.a	a15,#@his(Dem_EvtIsAnyInitMonitoringRequestedMask)
	lea	a15,[a15]@los(Dem_EvtIsAnyInitMonitoringRequestedMask)
.L470:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     3  #ifndef RBA_DIAGLIB_BITS32_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     4  #define RBA_DIAGLIB_BITS32_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     9  #define RBA_DIAGLIB_ISBITSET32       rba_DiagLib_Bit32IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT32   rba_DiagLib_Bit32GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    11  #define RBA_DIAGLIB_GETBITS32        rba_DiagLib_Bit32GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT32   rba_DiagLib_Bit32OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS32  rba_DiagLib_Bit32OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    15  LOCAL_INLINE uint32 rba_DiagLib_Bit32Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    17      uint32 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    21  LOCAL_INLINE void rba_DiagLib_Bit32SetBitMask(uint32 *buffer, uint32 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    26  LOCAL_INLINE void rba_DiagLib_Bit32ClearBitMask(uint32 *buffer, uint32 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    28      *buffer &= ((uint32) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    31  LOCAL_INLINE void rba_DiagLib_Bit32MergeBitmask(uint32 *buffer, uint32 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    36  LOCAL_INLINE void rba_DiagLib_Bit32SetBit(uint32 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    38      uint32 bit2shift = 1;
	mov	d15,#1
.L572:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    39      *buffer |= ((uint32) (bit2shift << bit_position));
	ld.w	d1,[a15]
.L727:
	sh	d15,d15,d0
.L573:
	or	d1,d15
	st.w	[a15],d1
.L421:
	lea	a15,[a10]0
.L478:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   315  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   316     it->it = &Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   317     it->end = &Dem_MapDtcIdToEventId[dtcid].mappingTable[Dem_MapDtcIdToEventId[dtcid].length];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   318  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   319  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   320  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   321  DEM_INLINE Dem_boolean_least Dem_EventIdListIteratorIsValid(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   322  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   324  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   326  DEM_INLINE void Dem_EventIdListIteratorNext(Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   327  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   328     (it->it)++;
	ld.a	a2,[a15]
.L728:
	add.a	a2,#2
	st.a	[a15],a2
.L127:
	lea	a15,[a10]0
.L483:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   315  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   316     it->it = &Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   317     it->end = &Dem_MapDtcIdToEventId[dtcid].mappingTable[Dem_MapDtcIdToEventId[dtcid].length];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   318  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   319  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   320  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   321  DEM_INLINE Dem_boolean_least Dem_EventIdListIteratorIsValid(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   322  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));
	ld.a	a15,[a15]
.L729:
	ld.a	a2,[a10]4
.L730:
	lt.a	d15,a15,a2
.L731:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));      (inlined)
	j	.L135

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   324  }      (inlined)
.L135:
	jne	d15,#0,.L128
.L122:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   320          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   321      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   322  }
	ret
.L374:
	
__Dem_DtcSetDTCSetting_function_end:
	.size	Dem_DtcSetDTCSetting,__Dem_DtcSetDTCSetting_function_end-Dem_DtcSetDTCSetting
.L212:
	; End of function
	
	.sdecl	'.bss.Dem_DTCs.Dem_AllDTCsState',data,cluster('Dem_AllDTCsState')
	.sect	'.bss.Dem_DTCs.Dem_AllDTCsState'
	.global	Dem_AllDTCsState
Dem_AllDTCsState:	.type	object
	.size	Dem_AllDTCsState,5
	.space	5
	.calls	'Dem_GetDTCOfEvent','Det_ReportError'
	.calls	'Dem_GetDTCOfEvent_GeneralEvtInfo','Dem_GetDTCOfEvent'
	.calls	'Dem_GetSeverityOfDTC','Dem_DtcIdFromDtcCode'
	.calls	'Dem_GetFunctionalUnitOfDTC','Dem_DtcIdFromDtcCode'
	.calls	'Dem_DtcFaultDetectionRetrieve','Det_ReportError'
	.calls	'Dem_DtcFaultDetectionRetrieve','Dem_GetFaultDetectionCounter'
	.calls	'Dem_GetDtcFaultDetectionCounter','Dem_DtcIdFromDtcCode'
	.calls	'Dem_GetDtcFaultDetectionCounter','Dem_DtcFaultDetectionRetrieve'
	.calls	'Dem_DtcSetDTCSetting','Det_ReportError'
	.calls	'Dem_IsEventEnabledByDtcSetting','',0
	.calls	'Dem_DtcIdFromDtcCode','',8
	.calls	'Dem_GetDTCOfEvent','',0
	.calls	'Dem_GetDTCOfEvent_GeneralEvtInfo','',0
	.calls	'Dem_GetTranslationType','',0
	.calls	'Dem_GetDTCStatusAvailabilityMask','',0
	.calls	'Dem_GetSeverityOfDTC','',0
	.calls	'Dem_GetFunctionalUnitOfDTC','',0
	.calls	'Dem_SetDTCSuppression','',0
	.calls	'Dem_DtcFaultDetectionRetrieve','',16
	.calls	'Dem_GetDtcFaultDetectionCounter','',0
	.extern	Dem_GetFaultDetectionCounter
	.extern	Det_ReportError
	.extern	Dem_Cfg_Dtc
	.extern	Dem_MapDtcIdToEventId
	.extern	Dem_MapEventIdToDtcId
	.extern	Dem_EvtIsAnyInitMonitoringRequestedMask
	.extern	Dem_AllEventsState
	.extern	Dem_GlobalInitMonitoringCounter
	.calls	'Dem_DtcSetDTCSetting','',8
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L160:
	.word	26805
	.half	3
	.word	.L161
	.byte	4
.L159:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L162
.L225:
	.byte	2
	.byte	'unsigned char',0,1,8
.L228:
	.byte	3
	.word	138
.L388:
	.byte	4
	.byte	'rba_DiagLib_Bit8SetBit',0,3,1,36,19,1,1
.L391:
	.byte	5
	.byte	'buffer',0,1,36,49
	.word	155
.L393:
	.byte	5
	.byte	'bit_position',0,1,36,63
	.word	138
.L395:
	.byte	6,0
.L397:
	.byte	4
	.byte	'rba_DiagLib_Bit8ClearBit',0,3,1,42,19,1,1
.L398:
	.byte	5
	.byte	'buffer',0,1,42,51
	.word	155
.L400:
	.byte	5
	.byte	'bit_position',0,1,42,65
	.word	138
.L402:
	.byte	6,0
.L379:
	.byte	4
	.byte	'rba_DiagLib_Bit8OverwriteBit',0,3,1,48,19,1,1
.L381:
	.byte	5
	.byte	'buffer',0,1,48,55
	.word	155
.L383:
	.byte	5
	.byte	'bit_position',0,1,48,69
	.word	138
.L385:
	.byte	5
	.byte	'will_bit_be_set',0,1,48,91
	.word	138
.L387:
	.byte	7,6,6,0,0
.L260:
	.byte	8
	.byte	'rba_DiagLib_Bit8GetSingleBit',0,3,1,60,20
	.word	138
	.byte	1,1
.L261:
	.byte	5
	.byte	'value',0,1,60,55
	.word	138
.L263:
	.byte	5
	.byte	'bit_position',0,1,60,68
	.word	138
.L265:
	.byte	6,0
.L253:
	.byte	8
	.byte	'rba_DiagLib_Bit8IsBitSet',0,3,1,64,22
	.word	138
	.byte	1,1
.L255:
	.byte	5
	.byte	'value',0,1,64,53
	.word	138
.L257:
	.byte	5
	.byte	'bit_position',0,1,64,66
	.word	138
.L259:
	.byte	7,6,0,0
.L428:
	.byte	8
	.byte	'rba_DiagLib_Bit8GetBits',0,3,1,69,20
	.word	138
	.byte	1,1
.L430:
	.byte	5
	.byte	'value',0,1,69,50
	.word	138
.L432:
	.byte	5
	.byte	'bit_position',0,1,69,63
	.word	138
.L434:
	.byte	5
	.byte	'number_of_bits',0,1,69,83
	.word	138
.L436:
	.byte	6,0
.L450:
	.byte	4
	.byte	'rba_DiagLib_Bit8ClearBits',0,3,1,77,19,1,1
.L453:
	.byte	5
	.byte	'value',0,1,77,52
	.word	155
.L455:
	.byte	5
	.byte	'bit_position',0,1,77,65
	.word	138
.L457:
	.byte	5
	.byte	'number_of_bits',0,1,77,85
	.word	138
.L459:
	.byte	6,0
.L438:
	.byte	4
	.byte	'rba_DiagLib_Bit8OverwriteBits',0,3,1,83,19,1,1
.L440:
	.byte	5
	.byte	'value',0,1,83,56
	.word	155
.L442:
	.byte	5
	.byte	'bit_position',0,1,83,69
	.word	138
.L444:
	.byte	5
	.byte	'number_of_bits',0,1,83,89
	.word	138
.L446:
	.byte	5
	.byte	'newValue',0,1,83,111
	.word	138
.L448:
	.byte	7,6,0,0
.L235:
	.byte	2
	.byte	'unsigned short int',0,2,7,3
	.word	855
	.byte	4
	.byte	'rba_DiagLib_Bit16SetBit',0,3,2,36,19,1,1,5
	.byte	'buffer',0,2,36,51
	.word	877
	.byte	5
	.byte	'bit_position',0,2,36,65
	.word	138
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit16ClearBit',0,3,2,42,19,1,1,5
	.byte	'buffer',0,2,42,53
	.word	877
	.byte	5
	.byte	'bit_position',0,2,42,67
	.word	138
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit16GetSingleBit',0,3,2,60,21
	.word	855
	.byte	1,1,5
	.byte	'value',0,2,60,58
	.word	855
	.byte	5
	.byte	'bit_position',0,2,60,71
	.word	138
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit16IsBitSet',0,3,2,65,22
	.word	138
	.byte	1,1,5
	.byte	'value',0,2,65,55
	.word	855
	.byte	5
	.byte	'bit_position',0,2,65,68
	.word	138
	.byte	7,6,0,0,8
	.byte	'rba_DiagLib_Bit16GetBits',0,3,2,70,21
	.word	855
	.byte	1,1,5
	.byte	'value',0,2,70,53
	.word	855
	.byte	5
	.byte	'bit_position',0,2,70,66
	.word	138
	.byte	5
	.byte	'number_of_bits',0,2,70,86
	.word	138
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit16ClearBits',0,3,2,78,19,1,1,5
	.byte	'value',0,2,78,54
	.word	877
	.byte	5
	.byte	'bit_position',0,2,78,67
	.word	138
	.byte	5
	.byte	'number_of_bits',0,2,78,87
	.word	138
	.byte	6,0
.L231:
	.byte	2
	.byte	'unsigned int',0,4,7
.L293:
	.byte	3
	.word	1366
.L469:
	.byte	4
	.byte	'rba_DiagLib_Bit32SetBit',0,3,3,36,19,1,1
.L471:
	.byte	5
	.byte	'buffer',0,3,36,51
	.word	1382
.L473:
	.byte	5
	.byte	'bit_position',0,3,36,65
	.word	138
.L475:
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit32ClearBit',0,3,3,42,19,1,1,5
	.byte	'buffer',0,3,42,53
	.word	1382
	.byte	5
	.byte	'bit_position',0,3,42,67
	.word	138
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit32GetSingleBit',0,3,3,60,21
	.word	1366
	.byte	1,1,5
	.byte	'value',0,3,60,58
	.word	1366
	.byte	5
	.byte	'bit_position',0,3,60,71
	.word	138
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit32IsBitSet',0,3,3,65,22
	.word	138
	.byte	1,1,5
	.byte	'value',0,3,65,55
	.word	1366
	.byte	5
	.byte	'bit_position',0,3,65,68
	.word	138
	.byte	7,6,0,0,4
	.byte	'rba_DiagLib_Bit32ClearBits',0,3,3,78,19,1,1,5
	.byte	'value',0,3,78,54
	.word	1382
	.byte	5
	.byte	'bit_position',0,3,78,67
	.word	138
	.byte	5
	.byte	'number_of_bits',0,3,78,87
	.word	138
	.byte	6,0,4
	.byte	'Dem_BitArraySetBit',0,3,4,33,17,1,1,5
	.byte	'buffer',0,4,33,36
	.word	1382
	.byte	5
	.byte	'bit_position',0,4,33,75
	.word	1366
	.byte	6,0,4
	.byte	'Dem_BitArrayClearBit',0,3,4,46,17,1,1,5
	.byte	'buffer',0,4,46,38
	.word	1382
	.byte	5
	.byte	'bit_position',0,4,46,77
	.word	1366
	.byte	6,0,4
	.byte	'Dem_BitArrayOverwriteBit',0,3,4,61,17,1,1,5
	.byte	'buffer',0,4,61,42
	.word	1382
	.byte	5
	.byte	'bit_position',0,4,62,25
	.word	1366
	.byte	5
	.byte	'will_bit_be_set',0,4,62,57
	.word	138
	.byte	7,6,6,0,0,9
	.word	1366
	.byte	3
	.word	2002
	.byte	8
	.byte	'Dem_BitArrayIsBitSet',0,3,4,75,30
	.word	138
	.byte	1,1,5
	.byte	'buffer',0,4,75,51
	.word	2007
	.byte	5
	.byte	'bit_position',0,4,75,95
	.word	1366
	.byte	6,0,8
	.byte	'rba_BswSrv_ByteOrderSwap32',0,3,5,125,21
	.word	1366
	.byte	1,1,5
	.byte	'Input_u32',0,5,125,55
	.word	1366
	.byte	6,0,8
	.byte	'rba_BswSrv_ByteOrderSwap16',0,3,5,150,1,21
	.word	855
	.byte	1,1,5
	.byte	'Input_u16',0,5,150,1,55
	.word	855
	.byte	6,0,8
	.byte	'Dem_LibGetParamUI8',0,3,6,36,18
	.word	138
	.byte	1,1,5
	.byte	'parameter',0,6,36,44
	.word	138
	.byte	6,0,8
	.byte	'Dem_LibGetParamBool',0,3,6,41,20
	.word	138
	.byte	1,1,5
	.byte	'parameter',0,6,41,49
	.word	138
	.byte	6,0
.L266:
	.byte	8
	.byte	'Dem_Cfg_Dtc_GetSeverity',0,3,7,68,34
	.word	138
	.byte	1,1
.L267:
	.byte	5
	.byte	'indx',0,7,68,72
	.word	855
.L269:
	.byte	6,0
.L286:
	.byte	8
	.byte	'Dem_Cfg_Dtc_GetFunc_Unit',0,3,7,80,20
	.word	138
	.byte	1,1
.L287:
	.byte	5
	.byte	'indx',0,7,80,59
	.word	855
.L289:
	.byte	6,0
.L324:
	.byte	8
	.byte	'Dem_Cfg_Dtc_GetDtcCode',0,3,7,99,30
	.word	1366
	.byte	1,1
.L325:
	.byte	5
	.byte	'indx',0,7,99,67
	.word	855
.L327:
	.byte	6,0
.L296:
	.byte	8
	.byte	'Dem_isEventIdValid',0,3,8,20,30
	.word	138
	.byte	1,1
.L298:
	.byte	5
	.byte	'checkID',0,8,20,65
	.word	855
.L300:
	.byte	6,0
.L311:
	.byte	8
	.byte	'Dem_EventIdIsDtcAssigned',0,3,8,146,1,30
	.word	138
	.byte	1,1
.L312:
	.byte	5
	.byte	'id',0,8,146,1,72
	.word	855
.L314:
	.byte	6,0
.L243:
	.byte	8
	.byte	'Dem_isDtcIdValid',0,3,8,152,1,30
	.word	138
	.byte	1,1
.L246:
	.byte	5
	.byte	'id',0,8,152,1,62
	.word	855
.L248:
	.byte	6,0
.L315:
	.byte	8
	.byte	'Dem_DtcIdFromEventId',0,3,8,158,1,27
	.word	855
	.byte	1,1
.L316:
	.byte	5
	.byte	'id',0,8,158,1,65
	.word	855
.L318:
	.byte	6,0,8
	.byte	'Dem_DtcIdGetEventId',0,3,8,166,1,28
	.word	855
	.byte	1,1,5
	.byte	'dtcid',0,8,166,1,63
	.word	855
	.byte	6,0,8
	.byte	'Dem_DtcIdGetFirstEventId',0,3,8,174,1,28
	.word	855
	.byte	1,1,5
	.byte	'dtcid',0,8,174,1,68
	.word	855
	.byte	7,6,0,0
.L346:
	.byte	2
	.byte	'unsigned long int',0,4,7,3
	.word	2745
.L348:
	.byte	4
	.byte	'Dem_DtcIdIteratorNew',0,3,8,202,1,17,1,1
.L351:
	.byte	5
	.byte	'it',0,8,202,1,57
	.word	2766
.L353:
	.byte	6,0,9
	.word	2745
	.byte	3
	.word	2814
.L368:
	.byte	8
	.byte	'Dem_DtcIdIteratorIsValid',0,3,8,207,1,30
	.word	138
	.byte	1,1
.L371:
	.byte	5
	.byte	'it',0,8,207,1,80
	.word	2819
.L373:
	.byte	6,0
.L363:
	.byte	4
	.byte	'Dem_DtcIdIteratorNext',0,3,8,212,1,17,1,1
.L365:
	.byte	5
	.byte	'it',0,8,212,1,58
	.word	2766
.L367:
	.byte	6,0
.L354:
	.byte	8
	.byte	'Dem_DtcIdIteratorCurrent',0,3,8,217,1,26
	.word	855
	.byte	1,1
.L356:
	.byte	5
	.byte	'it',0,8,217,1,76
	.word	2819
.L358:
	.byte	6,0,8
	.byte	'Dem_DtcGroupIdIsValid',0,3,8,252,1,30
	.word	138
	.byte	1,1,5
	.byte	'dtcGroupID',0,8,252,1,72
	.word	138
	.byte	6,0,9
	.word	855
	.byte	3
	.word	3026
.L377:
	.byte	10,8,171,2,9,8,11
	.byte	'it',0
	.word	3031
	.byte	4,2,35,0,11
	.byte	'end',0
	.word	3031
	.byte	4,2,35,4,0,3
	.word	3036
.L404:
	.byte	4
	.byte	'Dem_EventIdListIteratorNewFromDtcId',0,3,8,177,2,17,1,1
.L407:
	.byte	5
	.byte	'it',0,8,177,2,78
	.word	3068
.L409:
	.byte	5
	.byte	'dtcid',0,8,177,2,96
	.word	855
.L411:
	.byte	7,6,0,0,9
	.word	3036
	.byte	3
	.word	3148
.L482:
	.byte	8
	.byte	'Dem_EventIdListIteratorIsValid',0,3,8,193,2,30
	.word	138
	.byte	1,1
.L484:
	.byte	5
	.byte	'it',0,8,193,2,92
	.word	3153
.L486:
	.byte	6,0
.L477:
	.byte	4
	.byte	'Dem_EventIdListIteratorNext',0,3,8,198,2,17,1,1
.L479:
	.byte	5
	.byte	'it',0,8,198,2,70
	.word	3068
.L481:
	.byte	6,0
.L414:
	.byte	8
	.byte	'Dem_EventIdListIteratorCurrent',0,3,8,203,2,28
	.word	855
	.byte	1,1
.L415:
	.byte	5
	.byte	'it',0,8,203,2,90
	.word	3153
.L417:
	.byte	6,0,8
	.byte	'Dem_ISO14229ByteIsTestFailed',0,3,9,122,30
	.word	138
	.byte	1,1,5
	.byte	'self',0,9,122,66
	.word	138
	.byte	7,6,0,0,8
	.byte	'Dem_ISO14229ByteIsTestFailedTOC',0,3,9,129,1,30
	.word	138
	.byte	1,1,5
	.byte	'self',0,9,129,1,69
	.word	138
	.byte	7,6,0,0,8
	.byte	'Dem_ISO14229ByteIsTestCompleteTOC',0,3,9,157,1,30
	.word	138
	.byte	1,1,5
	.byte	'self',0,9,157,1,71
	.word	138
	.byte	7,6,0,0,8
	.byte	'Dem_ISO14229ByteIsPendingDTC',0,3,9,164,1,30
	.word	138
	.byte	1,1,5
	.byte	'self',0,9,164,1,66
	.word	138
	.byte	7,6,0,0,8
	.byte	'Dem_ISO14229ByteIsWarningIndicatorRequested',0,3,9,177,1,30
	.word	138
	.byte	1,1,5
	.byte	'self',0,9,177,1,81
	.word	138
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetTestFailed',0,3,9,186,1,17,1,1,5
	.byte	'self',0,9,186,1,55
	.word	155
	.byte	5
	.byte	'setOrReset',0,9,186,1,79
	.word	138
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetTestFailedTOC',0,3,9,193,1,17,1,1,5
	.byte	'self',0,9,193,1,58
	.word	155
	.byte	5
	.byte	'setOrReset',0,9,193,1,82
	.word	138
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetTestFailedSLC',0,3,9,200,1,17,1,1,5
	.byte	'self',0,9,200,1,58
	.word	155
	.byte	5
	.byte	'setOrReset',0,9,200,1,82
	.word	138
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetTestCompleteTOC',0,3,9,214,1,17,1,1,5
	.byte	'self',0,9,214,1,60
	.word	155
	.byte	5
	.byte	'setOrReset',0,9,214,1,84
	.word	138
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetTestCompleteSLC',0,3,9,221,1,17,1,1,5
	.byte	'self',0,9,221,1,60
	.word	155
	.byte	5
	.byte	'setOrReset',0,9,221,1,84
	.word	138
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetPendingDTC',0,3,9,228,1,17,1,1,5
	.byte	'self',0,9,228,1,55
	.word	155
	.byte	5
	.byte	'setOrReset',0,9,228,1,79
	.word	138
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetConfirmedDTC',0,3,9,235,1,17,1,1,5
	.byte	'self',0,9,235,1,57
	.word	155
	.byte	5
	.byte	'setOrReset',0,9,235,1,81
	.word	138
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetWarningIndicatorRequested',0,3,9,242,1,17,1,1,5
	.byte	'self',0,9,242,1,70
	.word	155
	.byte	5
	.byte	'setOrReset',0,9,242,1,94
	.word	138
	.byte	7,6,0,0,8
	.byte	'Dem_EnCoAreAllFulfilled',0,3,10,32,30
	.word	138
	.byte	1,1,5
	.byte	'enableConditionList',0,10,32,68
	.word	138
	.byte	6,0,8
	.byte	'Dem_NvMGetNvMBlocKId',0,3,11,49,28
	.word	855
	.byte	1,1,5
	.byte	'id',0,11,49,68
	.word	138
	.byte	6,0,4
	.byte	'Dem_NvMStartClear',0,3,11,138,1,17,1,1,6,0,8
	.byte	'rba_DiagLib_ByteOrderUtils_SwapByteOrderS',0,3,12,36,21
	.word	855
	.byte	1,1,5
	.byte	'val',0,12,36,70
	.word	855
	.byte	7,6,0,0,8
	.byte	'rba_DiagLib_ByteOrderUtils_SwapByteOrderL',0,3,12,41,21
	.word	1366
	.byte	1,1,5
	.byte	'val',0,12,41,70
	.word	1366
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetStoreTestFailedToNextOC',0,3,13,55,22
	.word	138
	.byte	1,1,5
	.byte	'indx',0,13,55,78
	.word	855
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetEventIsStoredInPrimary',0,3,13,75,22
	.word	138
	.byte	1,1,5
	.byte	'indx',0,13,75,77
	.word	855
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetEventIsStoredInSecondary',0,3,13,82,22
	.word	138
	.byte	1,1,5
	.byte	'indx',0,13,82,79
	.word	855
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetEventIsStoredInMirror',0,3,13,89,22
	.word	138
	.byte	1,1,5
	.byte	'indx',0,13,89,76
	.word	855
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetAgingAllowed',0,3,13,95,22
	.word	138
	.byte	1,1,5
	.byte	'indx',0,13,95,67
	.word	855
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetOperationCycleID',0,3,13,122,20
	.word	138
	.byte	1,1,5
	.byte	'indx',0,13,122,69
	.word	855
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetAgingCycleID',0,3,13,129,1,20
	.word	138
	.byte	1,1,5
	.byte	'indx',0,13,129,1,65
	.word	855
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetFailureCycleID',0,3,13,136,1,20
	.word	138
	.byte	1,1,5
	.byte	'indx',0,13,136,1,67
	.word	855
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetDebounceMethodIndex',0,3,13,149,1,20
	.word	138
	.byte	1,1,5
	.byte	'indx',0,13,149,1,72
	.word	855
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetDebounceParamSettingIndex',0,3,13,155,1,21
	.word	855
	.byte	1,1,5
	.byte	'indx',0,13,155,1,79
	.word	855
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetAgingThreshold',0,3,13,168,1,20
	.word	138
	.byte	1,1,5
	.byte	'indx',0,13,168,1,67
	.word	855
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetEnableConditions',0,3,13,208,1,27
	.word	138
	.byte	1,1,5
	.byte	'indx',0,13,208,1,76
	.word	855
	.byte	6,0,2
	.byte	'short int',0,2,5,8
	.byte	'Dem_EvtGetDebounceLevel',0,3,14,193,1,19
	.word	5307
	.byte	1,1,5
	.byte	'EventId',0,14,193,1,60
	.word	855
	.byte	6,0,8
	.byte	'Dem_EvtGetLastReportedEvent',0,3,14,219,1,32
	.word	138
	.byte	1,1,5
	.byte	'EventId',0,14,219,1,77
	.word	855
	.byte	6,0
.L461:
	.byte	4
	.byte	'Dem_EvtIncreaseGlobalInitMonitoringCounter',0,3,14,227,3,17,1,1
.L463:
	.byte	6,0
.L464:
	.byte	4
	.byte	'Dem_EvtSetAnyInitMonitoring',0,3,14,233,3,17,1,1
.L466:
	.byte	5
	.byte	'reason',0,14,233,3,72
	.word	138
.L468:
	.byte	7,6,0,0
.L419:
	.byte	4
	.byte	'Dem_EvtSetInitMonitoring',0,3,14,241,3,17,1,1
.L422:
	.byte	5
	.byte	'EventId',0,14,241,3,59
	.word	855
.L424:
	.byte	5
	.byte	'newReason',0,14,241,3,94
	.word	138
.L426:
	.byte	7,6,6,6,6,0,0
.L301:
	.byte	8
	.byte	'Dem_EvtIsSuppressed',0,3,14,244,4,30
	.word	138
	.byte	1,1
.L303:
	.byte	5
	.byte	'EventId',0,14,244,4,67
	.word	855
.L305:
	.byte	7,6,0,0,12
	.word	855
	.byte	3
	.word	5672
	.byte	4
	.byte	'Dem_ClientResultType_setResult',0,3,15,27,17,1,1,5
	.byte	'result',0,15,27,79
	.word	5677
	.byte	5
	.byte	'request',0,15,27,109
	.word	855
	.byte	5
	.byte	'newResult',0,15,27,133,1
	.word	138
	.byte	6,0,12
	.word	855
	.byte	3
	.word	5772
	.byte	4
	.byte	'Dem_ClientRequestType_setRequest',0,3,15,65,17,1,1,5
	.byte	'request',0,15,65,82
	.word	5777
	.byte	5
	.byte	'newRequest',0,15,65,97
	.word	138
	.byte	6,0,3
	.word	1366
	.byte	4
	.byte	'Dem_ClientSelectionType_invalidateSelectionResult',0,3,15,151,1,17,1,1,5
	.byte	'selection',0,15,151,1,93
	.word	5859
	.byte	6,0,8
	.byte	'Dem_ClientSelectionType_getTypeOfSelection',0,3,15,168,1,18
	.word	138
	.byte	1,1,5
	.byte	'selection',0,15,168,1,86
	.word	1366
	.byte	6,0,4
	.byte	'Dem_ClientClearMachine_SetMachineActiveClient',0,3,16,53,17,1,1,5
	.byte	'ClientId',0,16,53,80
	.word	138
	.byte	6,0,4
	.byte	'Dem_ClientClearMachine_SetMachineState',0,3,16,68,17,1,1,5
	.byte	'state',0,16,68,62
	.word	138
	.byte	6,0,8
	.byte	'Dem_ClientClearMachine_isClearDtcGroupAllDtcsSelected',0,3,16,78,20
	.word	138
	.byte	1,1,5
	.byte	'ClientId',0,16,78,91
	.word	138
	.byte	7,6,6,6,6,0,0,3
	.word	138
	.byte	4
	.byte	'Dem_EnvSetTrigger',0,3,17,17,17,1,1,5
	.byte	'trigger',0,17,17,52
	.word	6242
	.byte	5
	.byte	'trigger2set',0,17,17,77
	.word	138
	.byte	6,0,8
	.byte	'Dem_EnvIsAnyTriggerSet',0,3,17,22,30
	.word	138
	.byte	1,1,5
	.byte	'trigger2test',0,17,22,69
	.word	138
	.byte	6,0,8
	.byte	'Dem_DebHandleDebounceAction__processBits',0,3,18,101,30
	.word	138
	.byte	1,1,5
	.byte	'EventId',0,18,101,87
	.word	855
	.byte	5
	.byte	'debAction',0,18,101,120
	.word	2745
	.byte	6,0,8
	.byte	'Dem_EvMemIsMemIdValid',0,3,19,103,30
	.word	138
	.byte	1,1,5
	.byte	'MemId',0,19,103,65
	.word	2745
	.byte	6,0,8
	.byte	'Dem_EvMemIsEventMemLocIdValid',0,3,19,112,30
	.word	138
	.byte	1,1,5
	.byte	'LocId',0,19,112,73
	.word	2745
	.byte	6,0,10,20,133,1,3,4,11
	.byte	'Status',0
	.word	855
	.byte	2,2,35,0,11
	.byte	'EventId',0
	.word	855
	.byte	2,2,35,2,0,13,20,131,1,9,4,11
	.byte	'Data',0
	.word	6561
	.byte	4,2,35,0,0,14,7
	.word	138
	.byte	15,6,0,10,20,144,1,9,20,11
	.byte	'Hdr',0
	.word	6601
	.byte	4,2,35,0,11
	.byte	'Data',0
	.word	6622
	.byte	7,2,35,4,11
	.byte	'FailureCounter',0
	.word	138
	.byte	1,2,35,11,11
	.byte	'FreezeFrameCounter',0
	.word	138
	.byte	1,2,35,12,11
	.byte	'AgingCounter',0
	.word	138
	.byte	1,2,35,13,11
	.byte	'OccurrenceCounter',0
	.word	138
	.byte	1,2,35,14,11
	.byte	'Trigger',0
	.word	138
	.byte	1,2,35,15,11
	.byte	'TimeId',0
	.word	1366
	.byte	4,2,35,16,0,9
	.word	6631
	.byte	3
	.word	6799
	.byte	8
	.byte	'Dem_EvMemGetEventMemStatusByPtr',0,3,19,134,1,25
	.word	2745
	.byte	1,1,5
	.byte	'EventMemory',0,19,134,1,89
	.word	6804
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemStatus',0,3,19,139,1,25
	.word	2745
	.byte	1,1,5
	.byte	'LocId',0,19,139,1,65
	.word	2745
	.byte	7,6,0,0,8
	.byte	'Dem_EvMemGetEventMemEventIdByPtr',0,3,19,152,1,28
	.word	855
	.byte	1,1,5
	.byte	'EventMemory',0,19,152,1,93
	.word	6804
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemTimeIdByPtr',0,3,19,170,1,19
	.word	1366
	.byte	1,1,5
	.byte	'EventMemory',0,19,170,1,83
	.word	6804
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemDtcStatusByPtr',0,3,19,188,1,18
	.word	138
	.byte	1,1,5
	.byte	'EventMemory',0,19,188,1,85
	.word	6804
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemFailureCounterByPtr',0,3,19,216,1,24
	.word	2745
	.byte	1,1,5
	.byte	'EventMemory',0,19,216,1,96
	.word	6804
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemOccurrenceCounterByPtr',0,3,19,233,1,25
	.word	2745
	.byte	1,1,5
	.byte	'EventMemory',0,19,233,1,100
	.word	6804
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemAgingCounterByPtr',0,3,19,133,2,25
	.word	2745
	.byte	1,1,5
	.byte	'EventMemory',0,19,133,2,95
	.word	6804
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemAgingCounter',0,3,19,144,2,25
	.word	2745
	.byte	1,1,5
	.byte	'LocId',0,19,144,2,71
	.word	2745
	.byte	7,6,0,0,4
	.byte	'Dem_EvMemSetEventMemAgingCounter',0,3,19,150,2,17,1,1,5
	.byte	'LocId',0,19,150,2,63
	.word	2745
	.byte	5
	.byte	'AgingCounter',0,19,150,2,83
	.word	2745
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr',0,3,19,161,2,25
	.word	2745
	.byte	1,1,5
	.byte	'EventMemory',0,19,161,2,103
	.word	6804
	.byte	6,0
.L501:
	.byte	2
	.byte	'char',0,1,6,8
	.byte	'Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr',0,3,19,213,2,18
	.word	7590
	.byte	1,1,5
	.byte	'EventMemory',0,19,213,2,92
	.word	6804
	.byte	6,0,8
	.byte	'Dem_EvMemGetMaxFdcSinceLastClearByPtr',0,3,19,224,2,18
	.word	7590
	.byte	1,1,5
	.byte	'EventMemory',0,19,224,2,88
	.word	6804
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemFreezeFrameCounterByPtr',0,3,19,238,3,25
	.word	2745
	.byte	1,1,5
	.byte	'EventMemory',0,19,238,3,101
	.word	6804
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemTriggerByPtr',0,3,19,141,4,28
	.word	138
	.byte	1,1,5
	.byte	'EventMemory',0,19,141,4,93
	.word	6804
	.byte	6,0,3
	.word	6631
	.byte	8
	.byte	'Dem_EvMemGetEventMemDataByPtr',0,3,19,170,4,19
	.word	155
	.byte	1,1,5
	.byte	'EventMemory',0,19,170,4,75
	.word	7895
	.byte	6,0,8
	.byte	'Dem_EvMemIsStored',0,3,19,206,4,30
	.word	138
	.byte	1,1,5
	.byte	'Status',0,19,206,4,61
	.word	2745
	.byte	6,0,8
	.byte	'Dem_EvMemIsEmpty',0,3,19,211,4,30
	.word	138
	.byte	1,1,5
	.byte	'Status',0,19,211,4,60
	.word	2745
	.byte	6,0,8
	.byte	'Dem_EvMemSetToEmpty',0,3,19,226,4,25
	.word	2745
	.byte	1,1,6,0,8
	.byte	'Dem_EvMemGetShadowVisibility',0,3,19,242,4,30
	.word	138
	.byte	1,1,6,0,8
	.byte	'Dem_EvMemGetEventMemStartLocId',0,3,19,131,5,25
	.word	2745
	.byte	1,1,5
	.byte	'MemId',0,19,131,5,69
	.word	2745
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemEndLocId',0,3,19,143,5,25
	.word	2745
	.byte	1,1,5
	.byte	'MemId',0,19,143,5,67
	.word	2745
	.byte	6,0,3
	.word	2745
	.byte	4
	.byte	'Dem_EvMemEventMemoryIteratorNew',0,3,19,179,5,17,1,1,5
	.byte	'MemId',0,19,179,5,63
	.word	8255
	.byte	6,0,9
	.word	2745
	.byte	3
	.word	8317
	.byte	8
	.byte	'Dem_EvMemEventMemoryIteratorIsValid',0,3,19,184,5,30
	.word	138
	.byte	1,1,5
	.byte	'MemId',0,19,184,5,86
	.word	8322
	.byte	6,0,4
	.byte	'Dem_EvMemEventMemoryIteratorNext',0,3,19,189,5,17,1,1,5
	.byte	'MemId',0,19,189,5,64
	.word	8255
	.byte	6,0,8
	.byte	'Dem_EvMemIsEdgeTrigger',0,3,19,247,5,30
	.word	138
	.byte	1,1,5
	.byte	'StatusOld',0,19,247,5,66
	.word	2745
	.byte	5
	.byte	'StatusNew',0,19,247,5,90
	.word	2745
	.byte	5
	.byte	'Trigger',0,19,247,5,114
	.word	2745
	.byte	6,0,8
	.byte	'Dem_EvMemGetRamStsMask',0,3,19,154,7,25
	.word	2745
	.byte	1,1,5
	.byte	'EventId',0,19,154,7,64
	.word	855
	.byte	7,6,0,0,8
	.byte	'Dem_EvMemGetCurrentAgingCycleCounterInt',0,3,21,20,25
	.word	2745
	.byte	1,1,5
	.byte	'EventId',0,21,20,81
	.word	855
	.byte	6,0,8
	.byte	'Dem_EvMemIsAged',0,3,21,61,30
	.word	138
	.byte	1,1,5
	.byte	'EventId',0,21,61,62
	.word	855
	.byte	5
	.byte	'LocId',0,21,61,84
	.word	2745
	.byte	5
	.byte	'StatusNew',0,21,61,104
	.word	2745
	.byte	6,0,8
	.byte	'Dem_EvMemGetMemIdForDTCOrigin',0,3,22,150,1,25
	.word	2745
	.byte	1,1,5
	.byte	'DTCOrigin',0,22,150,1,73
	.word	138
	.byte	6,0,8
	.byte	'Dem_EvMemGetMemIdForEvent',0,3,22,222,1,25
	.word	2745
	.byte	1,1,5
	.byte	'EventId',0,22,222,1,67
	.word	855
	.byte	7,6,0,0
.L249:
	.byte	8
	.byte	'Dem_DtcIsSuppressed',0,3,23,118,30
	.word	138
	.byte	1,1
.L250:
	.byte	5
	.byte	'dtcId',0,23,118,65
	.word	855
.L252:
	.byte	7,6,0,0,8
	.byte	'Dem_DtcIsSuppressedDirectly',0,3,23,128,1,30
	.word	138
	.byte	1,1,5
	.byte	'dtcId',0,23,128,1,73
	.word	855
	.byte	6,0
.L237:
	.byte	8
	.byte	'Dem_DtcIsSupported',0,3,23,138,1,30
	.word	138
	.byte	1,1
.L240:
	.byte	5
	.byte	'dtcID',0,23,138,1,64
	.word	855
.L242:
	.byte	7,6,6,0,0
.L319:
	.byte	8
	.byte	'Dem_GetDtcCode',0,3,23,223,1,28
	.word	1366
	.byte	1,1
.L321:
	.byte	5
	.byte	'dtcId',0,23,223,1,58
	.word	855
.L323:
	.byte	7,6,0,0,8
	.byte	'Dem_EventUsesOrigin',0,3,23,137,2,30
	.word	138
	.byte	1,1,5
	.byte	'eventId',0,23,137,2,67
	.word	855
	.byte	5
	.byte	'origin',0,23,137,2,94
	.word	138
	.byte	7,6,6,6,0,0
.L492:
	.byte	8
	.byte	'Dem_DtcIsDTCSettingEnabled',0,3,23,165,2,30
	.word	138
	.byte	1,1
.L493:
	.byte	5
	.byte	'dtcId',0,23,165,2,71
	.word	855
.L495:
	.byte	7,6,0,0,8
	.byte	'Dem_EvtGetIsoByte',0,3,24,42,34
	.word	138
	.byte	1,1,5
	.byte	'EventId',0,24,42,69
	.word	855
	.byte	6,0,16
	.word	160
	.byte	17
	.word	190
	.byte	17
	.word	205
	.byte	6,0,16
	.word	228
	.byte	17
	.word	260
	.byte	17
	.word	275
	.byte	6,0,16
	.word	298
	.byte	17
	.word	334
	.byte	17
	.word	349
	.byte	17
	.word	370
	.byte	7,18
	.word	160
	.byte	17
	.word	190
	.byte	17
	.word	205
	.byte	19
	.word	226
	.byte	0,6,18
	.word	228
	.byte	17
	.word	260
	.byte	17
	.word	275
	.byte	19
	.word	296
	.byte	0,6,0,0,16
	.word	399
	.byte	17
	.word	439
	.byte	17
	.word	453
	.byte	6,0,16
	.word	476
	.byte	17
	.word	512
	.byte	17
	.word	526
	.byte	7,18
	.word	399
	.byte	17
	.word	439
	.byte	17
	.word	453
	.byte	19
	.word	474
	.byte	0,6,0,0,16
	.word	551
	.byte	17
	.word	586
	.byte	17
	.word	600
	.byte	17
	.word	621
	.byte	6,0,16
	.word	646
	.byte	17
	.word	679
	.byte	17
	.word	693
	.byte	17
	.word	714
	.byte	6,0,16
	.word	739
	.byte	17
	.word	776
	.byte	17
	.word	790
	.byte	17
	.word	811
	.byte	17
	.word	834
	.byte	7,18
	.word	646
	.byte	17
	.word	679
	.byte	17
	.word	693
	.byte	17
	.word	714
	.byte	19
	.word	737
	.byte	0,6,0,0,16
	.word	882
	.byte	17
	.word	913
	.byte	17
	.word	928
	.byte	6,0,16
	.word	951
	.byte	17
	.word	984
	.byte	17
	.word	999
	.byte	6,0,16
	.word	1022
	.byte	17
	.word	1063
	.byte	17
	.word	1077
	.byte	6,0,16
	.word	1100
	.byte	17
	.word	1137
	.byte	17
	.word	1151
	.byte	7,18
	.word	1022
	.byte	17
	.word	1063
	.byte	17
	.word	1077
	.byte	19
	.word	1098
	.byte	0,6,0,0,16
	.word	1176
	.byte	17
	.word	1212
	.byte	17
	.word	1226
	.byte	17
	.word	1247
	.byte	6,0,16
	.word	1272
	.byte	17
	.word	1306
	.byte	17
	.word	1320
	.byte	17
	.word	1341
	.byte	6,0,16
	.word	1387
	.byte	17
	.word	1418
	.byte	17
	.word	1433
	.byte	6,0,16
	.word	1456
	.byte	17
	.word	1489
	.byte	17
	.word	1504
	.byte	6,0,16
	.word	1527
	.byte	17
	.word	1568
	.byte	17
	.word	1582
	.byte	6,0,16
	.word	1605
	.byte	17
	.word	1642
	.byte	17
	.word	1656
	.byte	7,18
	.word	1527
	.byte	17
	.word	1568
	.byte	17
	.word	1582
	.byte	19
	.word	1603
	.byte	0,6,0,0,16
	.word	1681
	.byte	17
	.word	1715
	.byte	17
	.word	1729
	.byte	17
	.word	1750
	.byte	6,0
.L233:
	.byte	3
	.word	138
.L334:
	.byte	3
	.word	7590
	.byte	9
	.word	9755
	.byte	20
	.byte	'Dem_GetFaultDetectionCounter',0,25,165,2,32
	.word	138
	.byte	1,1,1,1,5
	.byte	'Rte_PDAV0',0,25,165,2,93
	.word	855
	.byte	5
	.byte	'FaultDetectionCounter',0,25,166,2,105
	.word	9760
	.byte	0,16
	.word	1775
	.byte	17
	.word	1801
	.byte	17
	.word	1816
	.byte	6,0,16
	.word	1839
	.byte	17
	.word	1867
	.byte	17
	.word	1882
	.byte	6,0,16
	.word	1905
	.byte	17
	.word	1937
	.byte	17
	.word	1952
	.byte	17
	.word	1973
	.byte	7,18
	.word	1775
	.byte	17
	.word	1801
	.byte	17
	.word	1816
	.byte	19
	.word	1837
	.byte	0,6,18
	.word	1839
	.byte	17
	.word	1867
	.byte	17
	.word	1882
	.byte	19
	.word	1903
	.byte	0,6,0,0,16
	.word	2012
	.byte	17
	.word	2044
	.byte	17
	.word	2059
	.byte	6,0,20
	.byte	'Det_ReportError',0,26,112,16
	.word	138
	.byte	1,1,1,1,5
	.byte	'ModuleId',0,26,112,39
	.word	855
	.byte	5
	.byte	'InstanceId',0,26,112,55
	.word	138
	.byte	5
	.byte	'ApiId',0,26,112,73
	.word	138
	.byte	5
	.byte	'ErrorId',0,26,112,86
	.word	138
	.byte	0,16
	.word	2082
	.byte	17
	.word	2120
	.byte	6,0,16
	.word	2140
	.byte	17
	.word	2179
	.byte	6,0,16
	.word	2200
	.byte	17
	.word	2230
	.byte	6,0,16
	.word	2250
	.byte	17
	.word	2281
	.byte	6,0,16
	.word	2301
	.byte	17
	.word	2336
	.byte	6,0,16
	.word	2351
	.byte	17
	.word	2387
	.byte	6,0,16
	.word	2402
	.byte	17
	.word	2436
	.byte	6,0,16
	.word	2451
	.byte	17
	.word	2481
	.byte	6,0,16
	.word	2499
	.byte	17
	.word	2536
	.byte	6,0,16
	.word	2550
	.byte	17
	.word	2579
	.byte	6,0,16
	.word	2593
	.byte	17
	.word	2626
	.byte	6,0,16
	.word	2640
	.byte	17
	.word	2672
	.byte	6,0,16
	.word	2689
	.byte	17
	.word	2726
	.byte	7,18
	.word	2640
	.byte	17
	.word	2672
	.byte	19
	.word	2687
	.byte	0,6,0,0,16
	.word	2771
	.byte	17
	.word	2800
	.byte	6,0,16
	.word	2824
	.byte	17
	.word	2861
	.byte	6,0,16
	.word	2875
	.byte	17
	.word	2905
	.byte	6,0,16
	.word	2919
	.byte	17
	.word	2956
	.byte	6,0,16
	.word	2970
	.byte	17
	.word	3004
	.byte	6,0,16
	.word	3073
	.byte	17
	.word	3117
	.byte	17
	.word	3129
	.byte	7,18
	.word	2550
	.byte	17
	.word	2579
	.byte	19
	.word	2591
	.byte	0,6,0,0,16
	.word	3158
	.byte	17
	.word	3201
	.byte	6,0,16
	.word	3215
	.byte	17
	.word	3251
	.byte	6,0,16
	.word	3265
	.byte	17
	.word	3308
	.byte	6,0,16
	.word	3322
	.byte	17
	.word	3362
	.byte	7,18
	.word	476
	.byte	17
	.word	512
	.byte	17
	.word	526
	.byte	21
	.word	547
	.byte	18
	.word	399
	.byte	17
	.word	439
	.byte	17
	.word	453
	.byte	19
	.word	474
	.byte	0,19
	.word	548
	.byte	0,0,6,0,0,16
	.word	3379
	.byte	17
	.word	3423
	.byte	7,18
	.word	476
	.byte	17
	.word	512
	.byte	17
	.word	526
	.byte	21
	.word	547
	.byte	18
	.word	399
	.byte	17
	.word	439
	.byte	17
	.word	453
	.byte	19
	.word	474
	.byte	0,19
	.word	548
	.byte	0,0,6,0,0,16
	.word	3441
	.byte	17
	.word	3487
	.byte	7,18
	.word	476
	.byte	17
	.word	512
	.byte	17
	.word	526
	.byte	21
	.word	547
	.byte	18
	.word	399
	.byte	17
	.word	439
	.byte	17
	.word	453
	.byte	19
	.word	474
	.byte	0,19
	.word	548
	.byte	0,0,6,0,0,16
	.word	3505
	.byte	17
	.word	3546
	.byte	7,18
	.word	476
	.byte	17
	.word	512
	.byte	17
	.word	526
	.byte	21
	.word	547
	.byte	18
	.word	399
	.byte	17
	.word	439
	.byte	17
	.word	453
	.byte	19
	.word	474
	.byte	0,19
	.word	548
	.byte	0,0,6,0,0,16
	.word	3564
	.byte	17
	.word	3620
	.byte	7,18
	.word	476
	.byte	17
	.word	512
	.byte	17
	.word	526
	.byte	21
	.word	547
	.byte	18
	.word	399
	.byte	17
	.word	439
	.byte	17
	.word	453
	.byte	19
	.word	474
	.byte	0,19
	.word	548
	.byte	0,0,6,0,0,16
	.word	3638
	.byte	17
	.word	3676
	.byte	17
	.word	3690
	.byte	7,18
	.word	298
	.byte	17
	.word	334
	.byte	17
	.word	349
	.byte	17
	.word	370
	.byte	21
	.word	394
	.byte	18
	.word	160
	.byte	17
	.word	190
	.byte	17
	.word	205
	.byte	19
	.word	226
	.byte	0,19
	.word	395
	.byte	18
	.word	228
	.byte	17
	.word	260
	.byte	17
	.word	275
	.byte	19
	.word	296
	.byte	0,19
	.word	396
	.byte	0,0,6,0,0,16
	.word	3714
	.byte	17
	.word	3755
	.byte	17
	.word	3769
	.byte	7,18
	.word	298
	.byte	17
	.word	334
	.byte	17
	.word	349
	.byte	17
	.word	370
	.byte	21
	.word	394
	.byte	18
	.word	160
	.byte	17
	.word	190
	.byte	17
	.word	205
	.byte	19
	.word	226
	.byte	0,19
	.word	395
	.byte	18
	.word	228
	.byte	17
	.word	260
	.byte	17
	.word	275
	.byte	19
	.word	296
	.byte	0,19
	.word	396
	.byte	0,0,6,0,0,16
	.word	3793
	.byte	17
	.word	3834
	.byte	17
	.word	3848
	.byte	7,18
	.word	298
	.byte	17
	.word	334
	.byte	17
	.word	349
	.byte	17
	.word	370
	.byte	21
	.word	394
	.byte	18
	.word	160
	.byte	17
	.word	190
	.byte	17
	.word	205
	.byte	19
	.word	226
	.byte	0,19
	.word	395
	.byte	18
	.word	228
	.byte	17
	.word	260
	.byte	17
	.word	275
	.byte	19
	.word	296
	.byte	0,19
	.word	396
	.byte	0,0,6,0,0,16
	.word	3872
	.byte	17
	.word	3915
	.byte	17
	.word	3929
	.byte	7,18
	.word	298
	.byte	17
	.word	334
	.byte	17
	.word	349
	.byte	17
	.word	370
	.byte	21
	.word	394
	.byte	18
	.word	160
	.byte	17
	.word	190
	.byte	17
	.word	205
	.byte	19
	.word	226
	.byte	0,19
	.word	395
	.byte	18
	.word	228
	.byte	17
	.word	260
	.byte	17
	.word	275
	.byte	19
	.word	296
	.byte	0,19
	.word	396
	.byte	0,0,6,0,0,16
	.word	3953
	.byte	17
	.word	3996
	.byte	17
	.word	4010
	.byte	7,18
	.word	298
	.byte	17
	.word	334
	.byte	17
	.word	349
	.byte	17
	.word	370
	.byte	21
	.word	394
	.byte	18
	.word	160
	.byte	17
	.word	190
	.byte	17
	.word	205
	.byte	19
	.word	226
	.byte	0,19
	.word	395
	.byte	18
	.word	228
	.byte	17
	.word	260
	.byte	17
	.word	275
	.byte	19
	.word	296
	.byte	0,19
	.word	396
	.byte	0,0,6,0,0,16
	.word	4034
	.byte	17
	.word	4072
	.byte	17
	.word	4086
	.byte	7,18
	.word	298
	.byte	17
	.word	334
	.byte	17
	.word	349
	.byte	17
	.word	370
	.byte	21
	.word	394
	.byte	18
	.word	160
	.byte	17
	.word	190
	.byte	17
	.word	205
	.byte	19
	.word	226
	.byte	0,19
	.word	395
	.byte	18
	.word	228
	.byte	17
	.word	260
	.byte	17
	.word	275
	.byte	19
	.word	296
	.byte	0,19
	.word	396
	.byte	0,0,6,0,0,16
	.word	4110
	.byte	17
	.word	4150
	.byte	17
	.word	4164
	.byte	7,18
	.word	298
	.byte	17
	.word	334
	.byte	17
	.word	349
	.byte	17
	.word	370
	.byte	21
	.word	394
	.byte	18
	.word	160
	.byte	17
	.word	190
	.byte	17
	.word	205
	.byte	19
	.word	226
	.byte	0,19
	.word	395
	.byte	18
	.word	228
	.byte	17
	.word	260
	.byte	17
	.word	275
	.byte	19
	.word	296
	.byte	0,19
	.word	396
	.byte	0,0,6,0,0,16
	.word	4188
	.byte	17
	.word	4241
	.byte	17
	.word	4255
	.byte	7,18
	.word	298
	.byte	17
	.word	334
	.byte	17
	.word	349
	.byte	17
	.word	370
	.byte	21
	.word	394
	.byte	18
	.word	160
	.byte	17
	.word	190
	.byte	17
	.word	205
	.byte	19
	.word	226
	.byte	0,19
	.word	395
	.byte	18
	.word	228
	.byte	17
	.word	260
	.byte	17
	.word	275
	.byte	19
	.word	296
	.byte	0,19
	.word	396
	.byte	0,0,6,0,0,16
	.word	4279
	.byte	17
	.word	4314
	.byte	6,0,16
	.word	4344
	.byte	17
	.word	4376
	.byte	6,0,16
	.word	4389
	.byte	6,0,16
	.word	4417
	.byte	17
	.word	4470
	.byte	7,18
	.word	2140
	.byte	17
	.word	2179
	.byte	19
	.word	2198
	.byte	0,6,0,0,16
	.word	4486
	.byte	17
	.word	4539
	.byte	7,18
	.word	2082
	.byte	17
	.word	2120
	.byte	19
	.word	2138
	.byte	0,6,0,0,16
	.word	4555
	.byte	17
	.word	4606
	.byte	6,0,16
	.word	4621
	.byte	17
	.word	4671
	.byte	7,18
	.word	1100
	.byte	17
	.word	1137
	.byte	17
	.word	1151
	.byte	21
	.word	1172
	.byte	18
	.word	1022
	.byte	17
	.word	1063
	.byte	17
	.word	1077
	.byte	19
	.word	1098
	.byte	0,19
	.word	1173
	.byte	0,0,6,0,0,16
	.word	4688
	.byte	17
	.word	4740
	.byte	6,0,16
	.word	4755
	.byte	17
	.word	4804
	.byte	6,0,16
	.word	4819
	.byte	17
	.word	4859
	.byte	7,18
	.word	1100
	.byte	17
	.word	1137
	.byte	17
	.word	1151
	.byte	21
	.word	1172
	.byte	18
	.word	1022
	.byte	17
	.word	1063
	.byte	17
	.word	1077
	.byte	19
	.word	1098
	.byte	0,19
	.word	1173
	.byte	0,0,6,0,0,16
	.word	4876
	.byte	17
	.word	4920
	.byte	6,0,16
	.word	4935
	.byte	17
	.word	4976
	.byte	6,0,16
	.word	4992
	.byte	17
	.word	5035
	.byte	6,0,16
	.word	5051
	.byte	17
	.word	5099
	.byte	6,0,16
	.word	5115
	.byte	17
	.word	5169
	.byte	7,18
	.word	1176
	.byte	17
	.word	1212
	.byte	17
	.word	1226
	.byte	17
	.word	1247
	.byte	19
	.word	1270
	.byte	0,6,0,0,16
	.word	5187
	.byte	17
	.word	5230
	.byte	6,0,16
	.word	5246
	.byte	17
	.word	5291
	.byte	6,0,16
	.word	5320
	.byte	17
	.word	5356
	.byte	6,0,16
	.word	5375
	.byte	17
	.word	5415
	.byte	6,0,16
	.word	5434
	.byte	6,0,16
	.word	5487
	.byte	17
	.word	5523
	.byte	7,18
	.word	1387
	.byte	17
	.word	1418
	.byte	17
	.word	1433
	.byte	19
	.word	1454
	.byte	0,6,0,0,16
	.word	5543
	.byte	17
	.word	5576
	.byte	17
	.word	5593
	.byte	7,18
	.word	5434
	.byte	19
	.word	5485
	.byte	0,6,18
	.word	5487
	.byte	17
	.word	5523
	.byte	21
	.word	5539
	.byte	18
	.word	1387
	.byte	17
	.word	1418
	.byte	17
	.word	1433
	.byte	19
	.word	1454
	.byte	0,19
	.word	5540
	.byte	0,0,6,18
	.word	551
	.byte	17
	.word	586
	.byte	17
	.word	600
	.byte	17
	.word	621
	.byte	19
	.word	644
	.byte	0,6,18
	.word	739
	.byte	17
	.word	776
	.byte	17
	.word	790
	.byte	17
	.word	811
	.byte	17
	.word	834
	.byte	21
	.word	851
	.byte	18
	.word	646
	.byte	17
	.word	679
	.byte	17
	.word	693
	.byte	17
	.word	714
	.byte	19
	.word	737
	.byte	0,19
	.word	852
	.byte	0,0,6,0,0,16
	.word	5619
	.byte	17
	.word	5651
	.byte	7,18
	.word	476
	.byte	17
	.word	512
	.byte	17
	.word	526
	.byte	21
	.word	547
	.byte	18
	.word	399
	.byte	17
	.word	439
	.byte	17
	.word	453
	.byte	19
	.word	474
	.byte	0,19
	.word	548
	.byte	0,0,6,0,0,16
	.word	5682
	.byte	17
	.word	5720
	.byte	17
	.word	5735
	.byte	17
	.word	5751
	.byte	6,0,16
	.word	5782
	.byte	17
	.word	5822
	.byte	17
	.word	5838
	.byte	6,0,16
	.word	5864
	.byte	17
	.word	5922
	.byte	6,0,16
	.word	5943
	.byte	17
	.word	5998
	.byte	6,0,16
	.word	6019
	.byte	17
	.word	6072
	.byte	6,0,16
	.word	6091
	.byte	17
	.word	6137
	.byte	6,0,16
	.word	6153
	.byte	17
	.word	6218
	.byte	7,18
	.word	2200
	.byte	17
	.word	2230
	.byte	19
	.word	2248
	.byte	0,6,18
	.word	2200
	.byte	17
	.word	2230
	.byte	19
	.word	2248
	.byte	0,6,18
	.word	5943
	.byte	17
	.word	5998
	.byte	19
	.word	6017
	.byte	0,6,18
	.word	5682
	.byte	17
	.word	5720
	.byte	17
	.word	5735
	.byte	17
	.word	5751
	.byte	19
	.word	5770
	.byte	0,6,0,0,16
	.word	6247
	.byte	17
	.word	6272
	.byte	17
	.word	6288
	.byte	6,0,16
	.word	6310
	.byte	17
	.word	6344
	.byte	6,0,16
	.word	6367
	.byte	17
	.word	6419
	.byte	17
	.word	6435
	.byte	6,0,16
	.word	6455
	.byte	17
	.word	6488
	.byte	6,0,16
	.word	6504
	.byte	17
	.word	6545
	.byte	6,0,16
	.word	6809
	.byte	17
	.word	6853
	.byte	6,0,16
	.word	6876
	.byte	17
	.word	6915
	.byte	7,18
	.word	6809
	.byte	17
	.word	6853
	.byte	19
	.word	6874
	.byte	0,6,0,0,16
	.word	6934
	.byte	17
	.word	6979
	.byte	6,0,16
	.word	7002
	.byte	17
	.word	7046
	.byte	6,0,16
	.word	7069
	.byte	17
	.word	7116
	.byte	6,0,16
	.word	7139
	.byte	17
	.word	7191
	.byte	6,0,16
	.word	7214
	.byte	17
	.word	7269
	.byte	6,0,16
	.word	7292
	.byte	17
	.word	7342
	.byte	6,0,16
	.word	7365
	.byte	17
	.word	7410
	.byte	7,18
	.word	7292
	.byte	17
	.word	7342
	.byte	19
	.word	7363
	.byte	0,6,0,0,16
	.word	7429
	.byte	17
	.word	7470
	.byte	17
	.word	7485
	.byte	6,0,16
	.word	7509
	.byte	17
	.word	7567
	.byte	6,0,16
	.word	7598
	.byte	17
	.word	7652
	.byte	6,0,16
	.word	7675
	.byte	17
	.word	7725
	.byte	6,0,16
	.word	7748
	.byte	17
	.word	7804
	.byte	6,0,16
	.word	7827
	.byte	17
	.word	7872
	.byte	6,0,16
	.word	7900
	.byte	17
	.word	7942
	.byte	6,0,16
	.word	7965
	.byte	17
	.word	7995
	.byte	6,0,16
	.word	8013
	.byte	17
	.word	8042
	.byte	6,0,16
	.word	8060
	.byte	6,0,16
	.word	8094
	.byte	6,0,16
	.word	8137
	.byte	17
	.word	8180
	.byte	6,0,16
	.word	8197
	.byte	17
	.word	8238
	.byte	6,0,16
	.word	8260
	.byte	17
	.word	8300
	.byte	6,0,16
	.word	8327
	.byte	17
	.word	8375
	.byte	6,0,16
	.word	8392
	.byte	17
	.word	8433
	.byte	6,0,16
	.word	8450
	.byte	17
	.word	8485
	.byte	17
	.word	8504
	.byte	17
	.word	8523
	.byte	6,0,16
	.word	8542
	.byte	17
	.word	8577
	.byte	7,18
	.word	4555
	.byte	17
	.word	4606
	.byte	19
	.word	4619
	.byte	0,6,0,0,16
	.word	8598
	.byte	17
	.word	8649
	.byte	6,0,16
	.word	8667
	.byte	17
	.word	8694
	.byte	17
	.word	8710
	.byte	17
	.word	8724
	.byte	6,0,16
	.word	8744
	.byte	17
	.word	8786
	.byte	6,0,16
	.word	8807
	.byte	17
	.word	8845
	.byte	7,18
	.word	4621
	.byte	17
	.word	4671
	.byte	21
	.word	4684
	.byte	18
	.word	1100
	.byte	17
	.word	1137
	.byte	17
	.word	1151
	.byte	21
	.word	1172
	.byte	18
	.word	1022
	.byte	17
	.word	1063
	.byte	17
	.word	1077
	.byte	19
	.word	1098
	.byte	0,19
	.word	1173
	.byte	0,0,19
	.word	4685
	.byte	0,0,6,0,0,16
	.word	8866
	.byte	17
	.word	8897
	.byte	7,18
	.word	476
	.byte	17
	.word	512
	.byte	17
	.word	526
	.byte	21
	.word	547
	.byte	18
	.word	399
	.byte	17
	.word	439
	.byte	17
	.word	453
	.byte	19
	.word	474
	.byte	0,19
	.word	548
	.byte	0,0,6,0,0,16
	.word	8915
	.byte	17
	.word	8955
	.byte	6,0,16
	.word	8972
	.byte	17
	.word	9003
	.byte	7,18
	.word	8866
	.byte	17
	.word	8897
	.byte	21
	.word	8911
	.byte	18
	.word	476
	.byte	17
	.word	512
	.byte	17
	.word	526
	.byte	21
	.word	547
	.byte	18
	.word	399
	.byte	17
	.word	439
	.byte	17
	.word	453
	.byte	19
	.word	474
	.byte	0,19
	.word	548
	.byte	0,0,19
	.word	8912
	.byte	0,0,6,18
	.word	2550
	.byte	17
	.word	2579
	.byte	19
	.word	2591
	.byte	0,6,0,0,16
	.word	9023
	.byte	17
	.word	9050
	.byte	7,18
	.word	2402
	.byte	17
	.word	2436
	.byte	19
	.word	2449
	.byte	0,6,0,0,16
	.word	9069
	.byte	17
	.word	9101
	.byte	17
	.word	9118
	.byte	7,18
	.word	4688
	.byte	17
	.word	4740
	.byte	19
	.word	4753
	.byte	0,6,18
	.word	4755
	.byte	17
	.word	4804
	.byte	19
	.word	4817
	.byte	0,6,18
	.word	4621
	.byte	17
	.word	4671
	.byte	21
	.word	4684
	.byte	18
	.word	1100
	.byte	17
	.word	1137
	.byte	17
	.word	1151
	.byte	21
	.word	1172
	.byte	18
	.word	1022
	.byte	17
	.word	1063
	.byte	17
	.word	1077
	.byte	19
	.word	1098
	.byte	0,19
	.word	1173
	.byte	0,0,19
	.word	4685
	.byte	0,0,6,0,0,16
	.word	9140
	.byte	17
	.word	9179
	.byte	7,18
	.word	476
	.byte	17
	.word	512
	.byte	17
	.word	526
	.byte	21
	.word	547
	.byte	18
	.word	399
	.byte	17
	.word	439
	.byte	17
	.word	453
	.byte	19
	.word	474
	.byte	0,19
	.word	548
	.byte	0,0,6,0,0,16
	.word	9198
	.byte	17
	.word	9227
	.byte	6,0,22,1,3
	.word	13289
	.byte	23
	.byte	'__codeptr',0,27,1,1
	.word	13291
	.byte	23
	.byte	'sint8',0,28,76,25
	.word	7590
	.byte	23
	.byte	'uint8',0,28,81,25
	.word	138
	.byte	23
	.byte	'sint16',0,28,86,25
	.word	5307
	.byte	23
	.byte	'uint16',0,28,91,25
	.word	855
	.byte	2
	.byte	'int',0,4,5,23
	.byte	'sint32',0,28,96,24
	.word	13372
	.byte	23
	.byte	'uint32',0,28,106,24
	.word	1366
	.byte	2
	.byte	'unsigned long long int',0,8,7,23
	.byte	'uint64',0,28,111,30
	.word	13409
	.byte	23
	.byte	'boolean',0,28,127,25
	.word	138
	.byte	23
	.byte	'uint8_least',0,28,137,1,25
	.word	2745
	.byte	23
	.byte	'uint16_least',0,28,147,1,25
	.word	2745
	.byte	23
	.byte	'StatusType',0,29,191,1,27
	.word	138
	.byte	23
	.byte	'Std_ReturnType',0,29,199,1,15
	.word	138
	.byte	10,29,206,1,9,8,11
	.byte	'vendorID',0
	.word	855
	.byte	2,2,35,0,11
	.byte	'moduleID',0
	.word	855
	.byte	2,2,35,2,11
	.byte	'sw_major_version',0
	.word	138
	.byte	1,2,35,4,11
	.byte	'sw_minor_version',0
	.word	138
	.byte	1,2,35,5,11
	.byte	'sw_patch_version',0
	.word	138
	.byte	1,2,35,6,0,23
	.byte	'Std_VersionInfoType',0,29,213,1,3
	.word	13553
	.byte	23
	.byte	'Dem_ClientRequestType',0,30,46,16
	.word	855
	.byte	23
	.byte	'Dem_ClientResultType',0,30,47,16
	.word	855
	.byte	23
	.byte	'Dem_ClientSelectionType',0,30,48,16
	.word	1366
	.byte	23
	.byte	'Dem_ClientPriorityType',0,30,50,15
	.word	138
	.byte	23
	.byte	'Dem_ComponentIdType',0,31,20,15
	.word	138
	.byte	23
	.byte	'PduIdType',0,32,22,19
	.word	855
	.byte	23
	.byte	'PduLengthType',0,32,26,19
	.word	855
	.byte	24,33,113,9,4,25
	.byte	'TP_DATACONF',0,0,25
	.byte	'TP_DATARETRY',0,1,25
	.byte	'TP_CONFPENDING',0,2,0,23
	.byte	'TpDataStateType',0,33,118,3
	.word	13893
	.byte	23
	.byte	'Can_IdType',0,34,32,16
	.word	1366
	.byte	23
	.byte	'Can_HwHandleType',0,34,43,16
	.word	855
	.byte	10,35,93,9,8,11
	.byte	'Class',0
	.word	138
	.byte	1,2,35,0,11
	.byte	'TIN',0
	.word	138
	.byte	1,2,35,1,11
	.byte	'ReturnAddress',0
	.word	1366
	.byte	4,2,35,4,0,23
	.byte	'OsTrapInfoType',0,35,97,3
	.word	14013
	.byte	14,68
	.word	1366
	.byte	15,16,0,10,35,154,1,9,68,11
	.byte	'store',0
	.word	14093
	.byte	68,2,35,0,0,14,68
	.word	14102
	.byte	15,0,0,23
	.byte	'Os_JumpBufType',0,35,156,1,3
	.word	14124
	.byte	23
	.byte	'Os_StackTraceType',0,35,174,1,18
	.word	1366
	.byte	10,35,175,1,9,8,11
	.byte	'sp',0
	.word	1366
	.byte	4,2,35,0,11
	.byte	'ctx',0
	.word	1366
	.byte	4,2,35,4,0,23
	.byte	'Os_StackValueType',0,35,175,1,63
	.word	14184
	.byte	23
	.byte	'Os_StackSizeType',0,35,176,1,27
	.word	14184
	.byte	26,1,1,3
	.word	14269
	.byte	23
	.byte	'Os_VoidVoidFunctionType',0,35,179,1,16
	.word	14272
	.byte	23
	.byte	'ApplicationType',0,35,193,1,23
	.word	138
	.byte	27
	.byte	'Os_ApplicationConfigurationType_s',0,35,198,1,16,2,11
	.byte	'app_id',0
	.word	138
	.byte	1,2,35,0,11
	.byte	'access',0
	.word	138
	.byte	1,2,35,1,0,23
	.byte	'Os_ApplicationConfigurationType',0,35,201,1,3
	.word	14335
	.byte	23
	.byte	'Os_CoreStateType',0,35,203,1,16
	.word	1366
	.byte	23
	.byte	'AreaIdType',0,35,204,1,16
	.word	855
	.byte	23
	.byte	'Os_PeripheralAddressType',0,35,212,1,22
	.word	1366
	.byte	23
	.byte	'TickType',0,35,221,1,22
	.word	1366
	.byte	23
	.byte	'Os_StopwatchTickType',0,35,225,1,22
	.word	1366
	.byte	23
	.byte	'Os_Lockable',0,35,234,1,18
	.word	1382
	.byte	23
	.byte	'CoreIdType',0,35,236,1,16
	.word	855
	.byte	23
	.byte	'SpinlockIdType',0,35,237,1,16
	.word	855
	.byte	24,35,239,1,9,4,25
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,25
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,23
	.byte	'TryToGetSpinlockType',0,35,239,1,74
	.word	14642
	.byte	24,35,174,2,9,4,25
	.byte	'APPLICATION_ACCESSIBLE',0,0,25
	.byte	'APPLICATION_RESTARTING',0,1,25
	.byte	'APPLICATION_TERMINATED',0,2,0,23
	.byte	'ApplicationStateType',0,35,174,2,92
	.word	14735
	.byte	28
	.byte	'void',0,3
	.word	14847
	.byte	29,1,1,30
	.word	138
	.byte	30
	.word	14853
	.byte	0,3
	.word	14858
	.byte	23
	.byte	'Os_FunctionEntryType',0,35,183,2,16
	.word	14872
	.byte	27
	.byte	'Os_MeterInfoType_s',0,35,193,2,16,48,11
	.byte	'elapsed',0
	.word	1366
	.byte	4,2,35,0,11
	.byte	'previous',0
	.word	1366
	.byte	4,2,35,4,11
	.byte	'max',0
	.word	1366
	.byte	4,2,35,8,11
	.byte	'cumulative',0
	.word	1366
	.byte	4,2,35,12,11
	.byte	'stackbase',0
	.word	14184
	.byte	8,2,35,16,11
	.byte	'stackusage',0
	.word	14184
	.byte	8,2,35,24,11
	.byte	'stackmax',0
	.word	14184
	.byte	8,2,35,32,11
	.byte	'stackbudget',0
	.word	14184
	.byte	8,2,35,40,0,23
	.byte	'Os_MeterInfoType',0,35,202,2,3
	.word	14907
	.byte	3
	.word	14907
	.byte	23
	.byte	'Os_MeterInfoRefType',0,35,203,2,50
	.word	15105
	.byte	23
	.byte	'EventMaskType',0,35,206,2,15
	.word	138
	.byte	23
	.byte	'Os_imaskType',0,35,211,2,16
	.word	1366
	.byte	27
	.byte	'Os_ISRDynType_s',0,35,213,2,16,48,11
	.byte	'meter',0
	.word	14907
	.byte	48,2,35,0,0,23
	.byte	'Os_ISRDynType',0,35,215,2,3
	.word	15184
	.byte	3
	.word	15184
	.byte	9
	.word	15245
	.byte	27
	.byte	'Os_ISRType_s',0,35,216,2,16,24,11
	.byte	'entry_function',0
	.word	14277
	.byte	4,2,35,0,11
	.byte	'dynamic',0
	.word	15250
	.byte	4,2,35,4,11
	.byte	'imask',0
	.word	1366
	.byte	4,2,35,8,11
	.byte	'stackbudget',0
	.word	14184
	.byte	8,2,35,12,11
	.byte	'access',0
	.word	138
	.byte	1,2,35,20,11
	.byte	'application',0
	.word	138
	.byte	1,2,35,21,0,23
	.byte	'Os_ISRType',0,35,223,2,3
	.word	15255
	.byte	3
	.word	14269
	.byte	9
	.word	15255
	.byte	3
	.word	15414
	.byte	23
	.byte	'ISRType',0,35,224,2,46
	.word	15419
	.byte	23
	.byte	'Os_bitmask',0,35,239,2,22
	.word	1366
	.byte	23
	.byte	'Os_pset0Type',0,35,240,2,20
	.word	1366
	.byte	23
	.byte	'Os_pset1Type',0,35,241,2,20
	.word	1366
	.byte	23
	.byte	'Os_pset2Type',0,35,242,2,20
	.word	1366
	.byte	13,35,243,2,9,4,11
	.byte	'p0',0
	.word	1366
	.byte	4,2,35,0,11
	.byte	'p1',0
	.word	1366
	.byte	4,2,35,0,11
	.byte	'p2',0
	.word	1366
	.byte	4,2,35,0,0,23
	.byte	'Os_psetType',0,35,247,2,3
	.word	15527
	.byte	13,35,249,2,9,4,11
	.byte	't0',0
	.word	1366
	.byte	4,2,35,0,11
	.byte	't1',0
	.word	1366
	.byte	4,2,35,0,11
	.byte	't2',0
	.word	1366
	.byte	4,2,35,0,0,23
	.byte	'Os_tpmaskType',0,35,253,2,3
	.word	15591
	.byte	23
	.byte	'Os_ActivationCountType',0,35,254,2,23
	.word	138
	.byte	27
	.byte	'Os_TaskDynType_s',0,35,128,3,16,120,11
	.byte	'terminate_jump_buf',0
	.word	14133
	.byte	68,2,35,0,11
	.byte	'meter',0
	.word	14907
	.byte	48,2,35,68,11
	.byte	'activation_count',0
	.word	138
	.byte	1,2,35,116,0,23
	.byte	'Os_TaskDynType',0,35,132,3,3
	.word	15689
	.byte	14,68
	.word	14102
	.byte	15,0,0,3
	.word	15689
	.byte	9
	.word	15815
	.byte	27
	.byte	'Os_TaskType_s',0,35,134,3,16,40,11
	.byte	'dynamic',0
	.word	15820
	.byte	4,2,35,0,11
	.byte	'entry_function',0
	.word	14277
	.byte	4,2,35,4,11
	.byte	'pset',0
	.word	15527
	.byte	4,2,35,8,11
	.byte	'base_tpmask',0
	.word	15591
	.byte	4,2,35,12,11
	.byte	'tpmask',0
	.word	15591
	.byte	4,2,35,16,11
	.byte	'core_id',0
	.word	855
	.byte	2,2,35,20,11
	.byte	'index',0
	.word	1366
	.byte	4,2,35,24,11
	.byte	'stackbudget',0
	.word	14184
	.byte	8,2,35,28,11
	.byte	'activation_count',0
	.word	138
	.byte	1,2,35,36,11
	.byte	'access',0
	.word	138
	.byte	1,2,35,37,11
	.byte	'application',0
	.word	138
	.byte	1,2,35,38,0,23
	.byte	'Os_TaskType',0,35,146,3,3
	.word	15825
	.byte	9
	.word	15825
	.byte	3
	.word	16075
	.byte	23
	.byte	'TaskType',0,35,147,3,47
	.word	16080
	.byte	31
	.byte	'Os_TaskStateType',0,35,155,3,6,4,25
	.byte	'SUSPENDED',0,0,25
	.byte	'READY',0,1,25
	.byte	'WAITING',0,2,25
	.byte	'RUNNING',0,3,0,23
	.byte	'TaskStateType',0,35,156,3,31
	.word	16103
	.byte	13,35,167,3,3,4,11
	.byte	'tpmask',0
	.word	15591
	.byte	4,2,35,0,0,27
	.byte	'Os_ResourceDynType_s',0,35,166,3,16,4,11
	.byte	'saved_priority',0
	.word	16190
	.byte	4,2,35,0,0,23
	.byte	'Os_ResourceDynType',0,35,170,3,3
	.word	16213
	.byte	3
	.word	16213
	.byte	9
	.word	16293
	.byte	27
	.byte	'Os_ResourceType_s',0,35,171,3,16,12,11
	.byte	'dynamic',0
	.word	16298
	.byte	4,2,35,0,11
	.byte	'tpmask',0
	.word	15591
	.byte	4,2,35,4,11
	.byte	'access',0
	.word	138
	.byte	1,2,35,8,0,23
	.byte	'Os_ResourceType',0,35,175,3,3
	.word	16303
	.byte	10,35,181,3,9,12,11
	.byte	'maxallowedvalue',0
	.word	1366
	.byte	4,2,35,0,11
	.byte	'ticksperbase',0
	.word	1366
	.byte	4,2,35,4,11
	.byte	'mincycle',0
	.word	1366
	.byte	4,2,35,8,0,23
	.byte	'AlarmBaseType',0,35,185,3,3
	.word	16402
	.byte	10,35,206,3,9,8,11
	.byte	'Running',0
	.word	138
	.byte	1,2,35,0,11
	.byte	'Pending',0
	.word	138
	.byte	1,2,35,1,11
	.byte	'Delay',0
	.word	1366
	.byte	4,2,35,4,0,23
	.byte	'Os_CounterStatusType',0,35,210,3,3
	.word	16497
	.byte	32
	.word	138
	.byte	1,1,3
	.word	16583
	.byte	23
	.byte	'Os_CounterIncrAdvType',0,35,217,3,22
	.word	16590
	.byte	27
	.byte	's_swd',0,35,222,3,12,4,11
	.byte	'count',0
	.word	1366
	.byte	4,2,35,0,0,13,35,221,3,3,4,11
	.byte	'sw',0
	.word	16626
	.byte	4,2,35,0,0,27
	.byte	'Os_CounterDynType_s',0,35,220,3,16,4,11
	.byte	'type_dependent',0
	.word	16654
	.byte	4,2,35,0,0,23
	.byte	'Os_CounterDynType',0,35,226,3,3
	.word	16673
	.byte	3
	.word	16673
	.byte	9
	.word	16751
	.byte	27
	.byte	'Os_CounterType_s',0,35,227,3,16,28,11
	.byte	'dynamic',0
	.word	16756
	.byte	4,2,35,0,11
	.byte	'advincr',0
	.word	16595
	.byte	4,2,35,4,11
	.byte	'base',0
	.word	16402
	.byte	12,2,35,8,11
	.byte	'core',0
	.word	14853
	.byte	4,2,35,20,11
	.byte	'access',0
	.word	138
	.byte	1,2,35,24,11
	.byte	'application',0
	.word	138
	.byte	1,2,35,25,0,23
	.byte	'Os_CounterType',0,35,234,3,3
	.word	16761
	.byte	3
	.word	16583
	.byte	9
	.word	16761
	.byte	3
	.word	16913
	.byte	23
	.byte	'CounterType',0,35,235,3,52
	.word	16918
	.byte	31
	.byte	'Os_ScheduleTableStatusType',0,35,240,3,6,4,25
	.byte	'SCHEDULETABLE_STOPPED',0,0,25
	.byte	'SCHEDULETABLE_NEXT',0,1,25
	.byte	'SCHEDULETABLE_WAITING',0,2,25
	.byte	'SCHEDULETABLE_RUNNING',0,3,25
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,23
	.byte	'ScheduleTableStatusType',0,35,241,3,41
	.word	16944
	.byte	9
	.word	.L574-.L160
	.byte	3
	.word	17144
	.byte	23
	.byte	'ScheduleTableType',0,35,128,4,58
	.word	17149
	.byte	27
	.byte	'Os_ScheduleTableDynType_s',0,35,130,4,16,16,11
	.byte	'match',0
	.word	1366
	.byte	4,2,35,0,11
	.byte	'next',0
	.word	17154
	.byte	4,2,35,4,11
	.byte	'state',0
	.word	16944
	.byte	4,2,35,8,11
	.byte	'config',0
	.word	855
	.byte	2,2,35,12,0,3
	.word	17181
	.byte	9
	.word	17274
.L574:
	.byte	27
	.byte	'Os_ScheduleTableType_s',0,35,247,3,16,16,11
	.byte	'dynamic',0
	.word	17279
	.byte	4,2,35,0,11
	.byte	'counter',0
	.word	16923
	.byte	4,2,35,4,11
	.byte	'repeat',0
	.word	138
	.byte	1,2,35,8,11
	.byte	'config',0
	.word	855
	.byte	2,2,35,10,11
	.byte	'initial',0
	.word	138
	.byte	1,2,35,12,11
	.byte	'access',0
	.word	138
	.byte	1,2,35,13,11
	.byte	'application',0
	.word	138
	.byte	1,2,35,14,0,23
	.byte	'Os_ScheduleTableType',0,35,255,3,3
	.word	17284
	.byte	9
	.word	17284
	.byte	3
	.word	17464
	.byte	9
	.word	16761
	.byte	3
	.word	17474
	.byte	12
	.word	14577
	.byte	12
	.word	15527
	.byte	12
	.word	15424
	.byte	12
	.word	16085
	.byte	12
	.word	15591
	.byte	12
	.word	138
	.byte	12
	.word	16085
	.byte	27
	.byte	'Os_ControlledCoreType_s',0,35,251,6,16,112,11
	.byte	'TrapInfo',0
	.word	14013
	.byte	8,2,35,0,11
	.byte	'lock_taskaccess',0
	.word	17484
	.byte	4,2,35,8,11
	.byte	'ReadyTasks',0
	.word	17489
	.byte	4,2,35,12,11
	.byte	'RunningISR',0
	.word	17494
	.byte	4,2,35,16,11
	.byte	'RunningTask',0
	.word	17499
	.byte	4,2,35,20,11
	.byte	'RunningTPMask',0
	.word	17504
	.byte	4,2,35,24,11
	.byte	'CurrentMeteredObject',0
	.word	15110
	.byte	4,2,35,28,11
	.byte	'IdleMeter',0
	.word	14907
	.byte	48,2,35,32,11
	.byte	'AppAccess',0
	.word	138
	.byte	1,2,35,80,11
	.byte	'AppOverride',0
	.word	17509
	.byte	1,2,35,81,11
	.byte	'GetStackValueAdjust',0
	.word	14184
	.byte	8,2,35,84,11
	.byte	'InErrorHook',0
	.word	138
	.byte	1,2,35,92,11
	.byte	'ChainTaskRef',0
	.word	17514
	.byte	4,2,35,96,11
	.byte	'GetStackUsageAdjust',0
	.word	14184
	.byte	8,2,35,100,11
	.byte	'InProtectionHook',0
	.word	138
	.byte	1,2,35,108,11
	.byte	'CoreIsActive',0
	.word	138
	.byte	1,2,35,109,11
	.byte	'InShutdownHook',0
	.word	138
	.byte	1,2,35,110,0,23
	.byte	'Os_ControlledCoreType',0,35,141,7,3
	.word	17519
	.byte	3
	.word	1366
	.byte	9
	.word	15255
	.byte	3
	.word	17975
	.byte	9
	.word	15825
	.byte	3
	.word	17985
	.byte	3
	.word	14907
	.byte	27
	.byte	'Os_AnyCoreType_s',0,35,151,7,16,96,11
	.byte	'DisableAllImask',0
	.word	1366
	.byte	4,2,35,0,11
	.byte	'SuspendAllImask',0
	.word	1366
	.byte	4,2,35,4,11
	.byte	'SuspendOSImask',0
	.word	1366
	.byte	4,2,35,8,11
	.byte	'DisableAllCount',0
	.word	1366
	.byte	4,2,35,12,11
	.byte	'SuspendAllCount',0
	.word	1366
	.byte	4,2,35,16,11
	.byte	'SuspendOSCount',0
	.word	1366
	.byte	4,2,35,20,11
	.byte	'RestartJumpBuf',0
	.word	14133
	.byte	68,2,35,24,11
	.byte	'Restartable',0
	.word	138
	.byte	1,2,35,92,0,23
	.byte	'Os_AnyCoreType',0,35,160,7,3
	.word	18000
	.byte	23
	.byte	'Can_TxObjPriorityClassType',0,36,219,3,16
	.word	1366
	.byte	27
	.byte	'Can_TxHwObjectConfigType',0,36,231,3,16,8,11
	.byte	'MsgObjId',0
	.word	138
	.byte	1,2,35,0,11
	.byte	'HwControllerId',0
	.word	138
	.byte	1,2,35,1,11
	.byte	'TxObjPriorityClass',0
	.word	1366
	.byte	4,2,35,4,0,23
	.byte	'Can_TxHwObjectConfigType',0,36,252,3,3
	.word	18277
	.byte	27
	.byte	'Can_RxHwObjectConfigType',0,36,129,4,16,12,11
	.byte	'MaskRef',0
	.word	1366
	.byte	4,2,35,0,11
	.byte	'MsgId',0
	.word	1366
	.byte	4,2,35,4,11
	.byte	'MsgObjId',0
	.word	138
	.byte	1,2,35,8,11
	.byte	'HwControllerId',0
	.word	138
	.byte	1,2,35,9,0,23
	.byte	'Can_RxHwObjectConfigType',0,36,147,4,3
	.word	18413
	.byte	14,4
	.word	138
	.byte	15,3,0,27
	.byte	'Can_ControllerMOMapConfigType',0,36,181,4,16,4,11
	.byte	'ControllerMOMap',0
	.word	18553
	.byte	4,2,35,0,0,23
	.byte	'Can_ControllerMOMapConfigType',0,36,184,4,3
	.word	18562
	.byte	27
	.byte	'Can_NPCRValueType',0,36,188,4,16,2,11
	.byte	'Can_NPCRValue',0
	.word	855
	.byte	2,2,35,0,0,23
	.byte	'Can_NPCRValueType',0,36,191,4,3
	.word	18663
	.byte	27
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,36,194,4,16,8,11
	.byte	'CanControllerBaudrate',0
	.word	1366
	.byte	4,2,35,0,11
	.byte	'CanControllerBaudrateCfg',0
	.word	855
	.byte	2,2,35,4,0,23
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,36,198,4,3
	.word	18738
	.byte	9
	.word	18738
	.byte	3
	.word	18903
	.byte	27
	.byte	'Can_BaudrateConfigPtrType',0,36,201,4,16,4,11
	.byte	'Can_kBaudrateConfigPtr',0
	.word	18908
	.byte	4,2,35,0,0,23
	.byte	'Can_BaudrateConfigPtrType',0,36,204,4,3
	.word	18913
	.byte	27
	.byte	'Can_EventHandlingType',0,36,226,4,16,4,11
	.byte	'CanEventType',0
	.word	18553
	.byte	4,2,35,0,0,23
	.byte	'Can_EventHandlingType',0,36,229,4,3
	.word	19013
	.byte	23
	.byte	'Rte_TransformerErrorCode',0,37,130,1,15
	.word	138
	.byte	23
	.byte	'Rte_TransformerClass',0,37,131,1,15
	.word	138
	.byte	10,37,168,1,9,12,11
	.byte	'in',0
	.word	14853
	.byte	4,2,35,0,11
	.byte	'out',0
	.word	14853
	.byte	4,2,35,4,11
	.byte	'used',0
	.word	855
	.byte	2,2,35,8,11
	.byte	'lost_data',0
	.word	138
	.byte	1,2,35,10,0,23
	.byte	'Rte_QDynType',0,37,173,1,3
	.word	19159
	.byte	24,37,175,1,9,4,25
	.byte	'RTE_DRA',0,0,25
	.byte	'RTE_WOWP',0,1,25
	.byte	'RTE_TASK',0,2,25
	.byte	'RTE_ARE',0,3,25
	.byte	'RTE_EV',0,4,25
	.byte	'RTE_MSI',0,5,0,23
	.byte	'Rte_NotificationType',0,37,182,1,3
	.word	19246
	.byte	3
	.word	19159
	.byte	27
	.byte	'Rte_QCmnType',0,37,184,1,16,24,11
	.byte	'dynamic',0
	.word	19344
	.byte	4,2,35,0,11
	.byte	'copy',0
	.word	138
	.byte	1,2,35,4,11
	.byte	'queue_size',0
	.word	855
	.byte	2,2,35,6,11
	.byte	'element_size',0
	.word	855
	.byte	2,2,35,8,11
	.byte	'buffer_start',0
	.word	14853
	.byte	4,2,35,12,11
	.byte	'buffer_end',0
	.word	14853
	.byte	4,2,35,16,11
	.byte	'notification_type',0
	.word	19246
	.byte	4,2,35,20,0,23
	.byte	'Rte_QCmnType',0,37,192,1,3
	.word	19349
	.byte	23
	.byte	'Rte_AlarmRefType',0,37,224,1,32
	.word	1366
	.byte	23
	.byte	'Rte_AlarmIndexType',0,37,226,1,32
	.word	855
	.byte	14,128,8
	.word	138
	.byte	15,255,7,0,23
	.byte	'Impl_NVM_DstPtrType_1024',0,38,50,15
	.word	19587
	.byte	23
	.byte	'CanIf_u32_impl',0,38,69,16
	.word	1366
	.byte	23
	.byte	'CanIf_u16_impl',0,38,71,16
	.word	855
	.byte	23
	.byte	'CanIf_u8_impl',0,38,73,15
	.word	138
	.byte	23
	.byte	'CanIf_ControllerModeType_Enum_impl',0,38,88,15
	.word	138
	.byte	23
	.byte	'CanIf_PduModeType_Enum_impl',0,38,90,15
	.word	138
	.byte	10,38,92,9,2,11
	.byte	'DeviceMode',0
	.word	138
	.byte	1,2,35,0,11
	.byte	'ChannelMode',0
	.word	138
	.byte	1,2,35,1,0,23
	.byte	'CanIf_ControllerStateType_struct_impl',0,38,95,3
	.word	19778
	.byte	23
	.byte	'CanIf_NotifStatusType_Enum_impl',0,38,100,15
	.word	138
	.byte	23
	.byte	'CanSM_boolean_Impl',0,38,120,15
	.word	138
	.byte	23
	.byte	'CanSM_u8_Impl',0,38,123,15
	.word	138
	.byte	23
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,38,128,1,15
	.word	138
	.byte	23
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,38,132,1,15
	.word	138
	.byte	23
	.byte	'CanSM_u16_Impl',0,38,136,1,16
	.word	855
	.byte	23
	.byte	'CanSM_TimerStateType_Enum_impl',0,38,138,1,15
	.word	138
	.byte	10,38,140,1,9,4,11
	.byte	'cntTick_u16',0
	.word	855
	.byte	2,2,35,0,11
	.byte	'stTimer',0
	.word	138
	.byte	1,2,35,2,0,23
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,38,143,1,3
	.word	20119
	.byte	23
	.byte	'Com_impl_u16',0,38,154,1,16
	.word	855
	.byte	23
	.byte	'Com_impl_u8',0,38,157,1,15
	.word	138
	.byte	23
	.byte	'ComM_uint32_Impl',0,38,173,1,16
	.word	1366
	.byte	23
	.byte	'ComM_uint16_Impl',0,38,175,1,16
	.word	855
	.byte	23
	.byte	'ComM_uint8_Impl',0,38,177,1,15
	.word	138
	.byte	23
	.byte	'ComM_bool_Impl',0,38,179,1,15
	.word	138
	.byte	10,38,181,1,9,24,11
	.byte	'ChannelState_e',0
	.word	1366
	.byte	4,2,35,0,11
	.byte	'LightTimeoutCtr_u32',0
	.word	1366
	.byte	4,2,35,4,11
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	855
	.byte	2,2,35,8,11
	.byte	'ChannelMode_u8',0
	.word	138
	.byte	1,2,35,10,11
	.byte	'BusSmMode_u8',0
	.word	138
	.byte	1,2,35,11,11
	.byte	'UserRequestCtr_u8',0
	.word	138
	.byte	1,2,35,12,11
	.byte	'PassiveRequestState_u8',0
	.word	138
	.byte	1,2,35,13,11
	.byte	'PncRequestCtr_u8',0
	.word	138
	.byte	1,2,35,14,11
	.byte	'InhibitionReqStatus_u8',0
	.word	138
	.byte	1,2,35,15,11
	.byte	'NmNetworkRequestStatus_b',0
	.word	138
	.byte	1,2,35,16,11
	.byte	'DiagnosticRequestState_b',0
	.word	138
	.byte	1,2,35,17,11
	.byte	'CommunicationAllowed_b',0
	.word	138
	.byte	1,2,35,18,11
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	138
	.byte	1,2,35,19,11
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	138
	.byte	1,2,35,20,11
	.byte	'NmNetworkModeStatus_b',0
	.word	138
	.byte	1,2,35,21,0,23
	.byte	'ComM_ChannelStruct_Impl',0,38,197,1,3
	.word	20351
	.byte	10,38,206,1,9,10,11
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	855
	.byte	2,2,35,0,11
	.byte	'LimitToNoComCtr_u16',0
	.word	855
	.byte	2,2,35,2,11
	.byte	'RequestedUserMode_t',0
	.word	138
	.byte	1,2,35,4,11
	.byte	'IndicatedUserMode_t',0
	.word	138
	.byte	1,2,35,5,11
	.byte	'numChannelsInFullCom_u8',0
	.word	138
	.byte	1,2,35,6,11
	.byte	'numChannelsInSilentCom_u8',0
	.word	138
	.byte	1,2,35,7,11
	.byte	'numChannelsInNoCom_u8',0
	.word	138
	.byte	1,2,35,8,0,23
	.byte	'ComM_UserStruct_Impl',0,38,214,1,3
	.word	20855
	.byte	23
	.byte	'Dcm_IOOperationResponseType',0,38,252,1,15
	.word	138
	.byte	23
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	38,138,2,15
	.word	138
	.byte	23
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,38,146,2,15
	.word	138
	.byte	23
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,38,150,2,15
	.word	138
	.byte	23
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,38,154,2,15
	.word	138
	.byte	23
	.byte	'Dem_DTCFormatType',0,38,160,2,15
	.word	138
	.byte	23
	.byte	'Dem_DTCOriginType',0,38,162,2,15
	.word	138
	.byte	23
	.byte	'Dem_EventIdType',0,38,168,2,16
	.word	855
	.byte	23
	.byte	'Dem_EventStatusType',0,38,170,2,15
	.word	138
	.byte	23
	.byte	'Dem_InitMonitorReasonType',0,38,176,2,15
	.word	138
	.byte	23
	.byte	'Dem_OperationCycleIdType',0,38,179,2,15
	.word	138
	.byte	23
	.byte	'Dem_UdsStatusByteType',0,38,185,2,15
	.word	138
	.byte	23
	.byte	'NvM_BlockIdType',0,38,215,2,16
	.word	855
	.byte	23
	.byte	'NvM_RequestResultType',0,38,225,2,15
	.word	138
	.byte	23
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,38,243,3,34
	.word	19598
	.byte	14,128,8
	.word	138
	.byte	15,255,7,0,23
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,38,246,3,34
	.word	19598
	.byte	23
	.byte	'Dem_DTCGroupIdType',0,39,49,15
	.word	138
	.byte	23
	.byte	'Dem_DtcIdType',0,39,50,16
	.word	855
	.byte	23
	.byte	'Dem_ClientIdType',0,39,53,15
	.word	138
	.byte	23
	.byte	'Dem_DtcCodeType',0,39,55,16
	.word	1366
	.byte	23
	.byte	'Dem_boolean_least',0,39,60,17
	.word	138
	.byte	23
	.byte	'Dem_EventCategoryType',0,39,62,15
	.word	138
	.byte	23
	.byte	'Dem_DTCSeverityType',0,39,217,1,15
	.word	138
	.byte	23
	.byte	'Dem_DTCGroupType',0,39,133,2,16
	.word	1366
	.byte	23
	.byte	'Dem_DTCTranslationFormatType',0,39,161,2,15
	.word	138
	.byte	23
	.byte	'Dem_ReturnGetSeverityOfDTCType',0,39,178,2,15
	.word	138
	.byte	23
	.byte	'Dem_ReturnGetFunctionalUnitOfDTCType',0,39,191,2,15
	.word	138
	.byte	23
	.byte	'Dem_DebugDataType',0,39,131,3,16
	.word	1366
	.byte	23
	.byte	'Dem_DTCKindType',0,39,145,3,16
	.word	138
	.byte	23
	.byte	'Dem_TriggerType',0,39,167,3,15
	.word	138
	.byte	23
	.byte	'Dem_EnCoList',0,40,31,15
	.word	138
	.byte	23
	.byte	'Dem_OperationCycleList',0,41,23,15
	.word	138
	.byte	23
	.byte	'Dem_StoCoList',0,42,32,15
	.word	138
	.byte	23
	.byte	'Rte_TaskRefType',0,43,184,1,32
	.word	16085
	.byte	23
	.byte	'Rte_EventRefType',0,43,185,1,32
	.word	138
	.byte	23
	.byte	'Rte_EventType',0,43,186,1,32
	.word	1366
	.byte	23
	.byte	'Rte_REActCounterType',0,43,252,1,15
	.word	138
	.byte	3
	.word	138
	.byte	23
	.byte	'Rte_REActCounterRefType',0,43,253,1,58
	.word	22525
	.byte	10,43,255,1,9,8,11
	.byte	'task',0
	.word	22421
	.byte	4,2,35,0,11
	.byte	'acnt',0
	.word	22530
	.byte	4,2,35,4,0,23
	.byte	'Rte_REContainerType',0,43,130,2,3
	.word	22563
	.byte	9
	.word	15825
	.byte	3
	.word	22627
	.byte	3
	.word	138
	.byte	9
	.word	22563
	.byte	3
	.word	22642
	.byte	23
	.byte	'Rte_REContainerRefType',0,43,132,2,60
	.word	22647
	.byte	23
	.byte	'Rte_MSICounterType',0,43,149,2,16
	.word	855
	.byte	3
	.word	855
	.byte	23
	.byte	'Rte_MSICounterRefType',0,43,150,2,56
	.word	22712
	.byte	23
	.byte	'Rte_MSIPendingFlagType',0,43,152,2,17
	.word	138
	.byte	3
	.word	138
	.byte	23
	.byte	'Rte_MSIPendingFlagRefType',0,43,153,2,60
	.word	22780
	.byte	10,43,163,2,9,24,11
	.byte	'counter',0
	.word	22717
	.byte	4,2,35,0,11
	.byte	'incCounter',0
	.word	138
	.byte	1,2,35,4,11
	.byte	'pending',0
	.word	22785
	.byte	4,2,35,8,11
	.byte	'osTask',0
	.word	22421
	.byte	4,2,35,12,11
	.byte	'acnt',0
	.word	22530
	.byte	4,2,35,16,11
	.byte	'osEvent',0
	.word	138
	.byte	1,2,35,20,11
	.byte	'MSIInit',0
	.word	855
	.byte	2,2,35,22,0,23
	.byte	'Rte_MSITableEntry',0,43,172,2,3
	.word	22820
	.byte	3
	.word	855
	.byte	3
	.word	138
	.byte	23
	.byte	'Rte_TaskArrayIndex',0,43,179,2,16
	.word	138
	.byte	23
	.byte	'Rte_NrWaitingTasks',0,43,180,2,16
	.word	138
	.byte	10,43,182,2,9,4,11
	.byte	'pending',0
	.word	138
	.byte	1,2,35,0,11
	.byte	'count',0
	.word	138
	.byte	1,2,35,1,11
	.byte	'firstWaitingTask',0
	.word	138
	.byte	1,2,35,2,0,23
	.byte	'Rte_WaitableDatum',0,43,186,2,3
	.word	23038
	.byte	3
	.word	23038
	.byte	10,43,226,2,9,12,11
	.byte	'event_id',0
	.word	1366
	.byte	4,2,35,0,11
	.byte	'wd',0
	.word	23130
	.byte	4,2,35,4,11
	.byte	'timeout',0
	.word	1366
	.byte	4,2,35,8,0,23
	.byte	'Rte_WOWP_NotificationType',0,43,230,2,3
	.word	23135
	.byte	9
	.word	23135
	.byte	3
	.word	23224
	.byte	23
	.byte	'Rte_WOWP_NotificationRefType',0,43,232,2,66
	.word	23229
	.byte	23
	.byte	'Rte_ARE_NotificationType',0,43,234,2,29
	.word	22563
	.byte	27
	.byte	'Rte_QTaskType',0,43,243,2,16,28,11
	.byte	'cmn',0
	.word	19349
	.byte	24,2,35,0,11
	.byte	'task',0
	.word	22421
	.byte	4,2,35,24,0,23
	.byte	'Rte_QTaskType',0,43,246,2,3
	.word	23306
	.byte	27
	.byte	'Rte_QREType',0,43,250,2,16,28,11
	.byte	'cmn',0
	.word	19349
	.byte	24,2,35,0,11
	.byte	're',0
	.word	22652
	.byte	4,2,35,24,0,23
	.byte	'Rte_QREType',0,43,253,2,3
	.word	23377
	.byte	9
	.word	22563
	.byte	3
	.word	23442
	.byte	27
	.byte	'Rte_QWWPType',0,43,129,3,16,28,11
	.byte	'cmn',0
	.word	19349
	.byte	24,2,35,0,11
	.byte	'wwp',0
	.word	23234
	.byte	4,2,35,24,0,23
	.byte	'Rte_QWWPType',0,43,132,3,3
	.word	23452
	.byte	9
	.word	23135
	.byte	3
	.word	23520
	.byte	27
	.byte	'Rte_QEvType',0,43,136,3,16,36,11
	.byte	'cmn',0
	.word	19349
	.byte	24,2,35,0,11
	.byte	'task',0
	.word	22421
	.byte	4,2,35,24,11
	.byte	'mask',0
	.word	138
	.byte	1,2,35,28,11
	.byte	'acnt',0
	.word	22530
	.byte	4,2,35,32,0,23
	.byte	'Rte_QEvType',0,43,141,3,3
	.word	23530
	.byte	27
	.byte	'Rte_QMSIType',0,43,145,3,16,48,11
	.byte	'cmn',0
	.word	19349
	.byte	24,2,35,0,11
	.byte	'task',0
	.word	22421
	.byte	4,2,35,24,11
	.byte	'mask',0
	.word	138
	.byte	1,2,35,28,11
	.byte	'acnt',0
	.word	22530
	.byte	4,2,35,32,11
	.byte	'msiCounter',0
	.word	22717
	.byte	4,2,35,36,11
	.byte	'msiPending',0
	.word	22785
	.byte	4,2,35,40,11
	.byte	'msiLimit',0
	.word	855
	.byte	2,2,35,44,0,23
	.byte	'Rte_QMSIType',0,43,153,3,3
	.word	23625
	.byte	23
	.byte	'Dem_EvtStateType',0,44,151,1,15
	.word	138
	.byte	23
	.byte	'Dem_DtcStateType',0,45,47,15
	.word	138
	.byte	23
	.byte	'rba_BswSrv_uint64',0,5,66,28
	.word	13409
	.byte	10,7,47,9,12,11
	.byte	'DtcCode',0
	.word	1366
	.byte	4,2,35,0,11
	.byte	'Severity',0
	.word	138
	.byte	1,2,35,4,11
	.byte	'Kind',0
	.word	138
	.byte	1,2,35,5,11
	.byte	'DtcCode_Is_Index',0
	.word	138
	.byte	1,2,35,6,11
	.byte	'Func_Unit',0
	.word	138
	.byte	1,2,35,7,11
	.byte	'Nv_Storage',0
	.word	138
	.byte	1,2,35,8,0,23
	.byte	'Dem_Cfg_DtcType',0,7,55,3
	.word	23857
	.byte	14,60
	.word	23857
	.byte	15,4,0,9
	.word	24001
	.byte	33
	.byte	'Dem_Cfg_Dtc',0,7,59,30
	.word	24010
	.byte	1,1,23
	.byte	'Dem_EventIdIterator',0,8,27,22
	.word	2745
	.byte	23
	.byte	'Dem_MapDtcIdToEventIdType',0,8,126,25
	.word	855
	.byte	14,10
	.word	855
	.byte	15,4,0,9
	.word	24099
	.byte	33
	.byte	'Dem_MapDtcIdToEventId',0,8,139,1,41
	.word	24108
	.byte	1,1,14,12
	.word	855
	.byte	15,5,0,9
	.word	24146
	.byte	33
	.byte	'Dem_MapEventIdToDtcId',0,8,140,1,41
	.word	24155
	.byte	1,1,23
	.byte	'Dem_DtcIdIterator',0,8,197,1,22
	.word	2745
	.byte	23
	.byte	'Dem_DtcGroupIdIterator',0,8,230,1,21
	.word	2745
	.byte	23
	.byte	'Dem_EventIdListIterator',0,8,174,2,3
	.word	3036
	.byte	10,8,213,2,9,4,11
	.byte	'it',0
	.word	855
	.byte	2,2,35,0,11
	.byte	'end',0
	.word	855
	.byte	2,2,35,2,0,23
	.byte	'Dem_DtcIdListIterator',0,8,216,2,3
	.word	24285
	.byte	24,46,31,9,4,25
	.byte	'MEMIF_JOB_OK',0,0,25
	.byte	'MEMIF_JOB_FAILED',0,1,25
	.byte	'MEMIF_JOB_PENDING',0,2,25
	.byte	'MEMIF_JOB_CANCELED',0,3,25
	.byte	'MEMIF_BLOCK_INCONSISTENT',0,4,25
	.byte	'MEMIF_BLOCK_INVALID',0,5,0,23
	.byte	'MemIf_JobResultType',0,46,39,2
	.word	24348
	.byte	24,47,49,9,4,25
	.byte	'NVM_PRV_ACTIVITY_NOT_INIT',0,0,25
	.byte	'NVM_PRV_ACTIVITY_IDLE',0,1,25
	.byte	'NVM_PRV_ACTIVITY_ARBITRATE',0,2,25
	.byte	'NVM_PRV_ACTIVITY_JOB_START',0,3,25
	.byte	'NVM_PRV_ACTIVITY_POLL_RESULT',0,4,25
	.byte	'NVM_PRV_ACTIVITY_JOB_COMPLETE',0,5,25
	.byte	'NVM_PRV_ACTIVITY_RESULT_EVAL',0,6,0,23
	.byte	'NvM_Prv_Activities_ten',0,47,58,3
	.word	24506
	.byte	24,47,104,9,4,25
	.byte	'NvM_Prv_idJob_Idle_e',0,0,25
	.byte	'NvM_Prv_idJob_Read_e',0,1,25
	.byte	'NvM_Prv_idJob_Write_e',0,2,25
	.byte	'NvM_Prv_idJob_Erase_e',0,3,25
	.byte	'NvM_Prv_idJob_Restore_e',0,4,25
	.byte	'NvM_Prv_idJob_Maintain_e',0,5,25
	.byte	'NvM_Prv_idJob_Validate_e',0,6,25
	.byte	'NvM_Prv_idJob_Invalidate_e',0,7,25
	.byte	'NvM_Prv_idJob_ReadIdConfigForReadAll_e',0,8,25
	.byte	'NvM_Prv_idJob_InvalidateForFirstInitAll_e',0,9,25
	.byte	'NvM_Prv_idJob_RestoreForImplicitRecovery_e',0,10,25
	.byte	'NvM_Prv_idJob_InvalidateForRemoveNonResistant_e',0,11,25
	.byte	'NvM_Prv_idJob_Invalid_e',0,12,25
	.byte	'NvM_Prv_idJob_Count_e',0,13,0,23
	.byte	'NvM_Prv_idJob_ten',0,47,115,3
	.word	24747
	.byte	23
	.byte	'NvM_Prv_ServiceBit_tuo',0,47,168,1,16
	.word	855
	.byte	23
	.byte	'NvM_Prv_idService_tuo',0,47,173,1,15
	.word	138
	.byte	23
	.byte	'NvM_Prv_idQueue_tuo',0,47,206,1,15
	.word	138
	.byte	10,47,210,1,9,12,11
	.byte	'idService_uo',0
	.word	138
	.byte	1,2,35,0,11
	.byte	'idBlock_uo',0
	.word	855
	.byte	2,2,35,2,11
	.byte	'ServiceBit_uo',0
	.word	855
	.byte	2,2,35,4,11
	.byte	'BlockData_pv',0
	.word	14853
	.byte	4,2,35,8,0,23
	.byte	'NvM_Prv_QueueEntry_tst',0,47,225,1,3
	.word	25304
	.byte	10,47,227,1,9,20,11
	.byte	'idJob_en',0
	.word	24747
	.byte	4,2,35,0,11
	.byte	'idBlock_uo',0
	.word	855
	.byte	2,2,35,4,11
	.byte	'RamBlock_pu8',0
	.word	155
	.byte	4,2,35,8,11
	.byte	'idxDataset_u8',0
	.word	138
	.byte	1,2,35,12,11
	.byte	'Result_en',0
	.word	24348
	.byte	4,2,35,16,0,23
	.byte	'NvM_Prv_JobData_tst',0,47,240,1,3
	.word	25430
	.byte	23
	.byte	'Dem_EvMemOccurrenceCounterType',0,20,90,21
	.word	138
	.byte	23
	.byte	'Dem_EvMemAgingCounterType',0,20,99,21
	.word	138
	.byte	23
	.byte	'Dem_EvMemHdrType',0,20,141,1,4
	.word	6601
	.byte	23
	.byte	'Dem_EvMemEventMemoryType',0,20,213,1,4
	.word	6631
	.byte	14,5
	.word	138
	.byte	15,4,0,14,10
	.word	855
	.byte	15,4,0,10,48,9,9,18,11
	.byte	'OperationCycleStates',0
	.word	138
	.byte	1,2,35,0,11
	.byte	'OperationCycleQualified',0
	.word	138
	.byte	1,2,35,1,11
	.byte	'Overflow',0
	.word	25701
	.byte	5,2,35,2,11
	.byte	'DtcIdsByOccurrenceTime',0
	.word	25710
	.byte	10,2,35,8,0,23
	.byte	'Dem_GenericNvDataType',0,48,24,4
	.word	25719
	.byte	23
	.byte	'Dem_NvmBlockIdType',0,49,14,34
	.word	138
	.byte	13,49,16,9,20,11
	.byte	'evMemData',0
	.word	6631
	.byte	20,2,35,0,11
	.byte	'genericNvData',0
	.word	25719
	.byte	18,2,35,0,0,23
	.byte	'Dem_NvMStorageBufferData',0,49,37,3
	.word	25895
	.byte	23
	.byte	'Dem_NvmBlockStatusType',0,49,59,15
	.word	138
	.byte	23
	.byte	'Dem_NvmResultType',0,49,78,31
	.word	138
	.byte	3
	.word	138
	.byte	34
	.word	138
	.byte	1,1,30
	.word	26033
	.byte	0,3
	.word	26038
	.byte	23
	.byte	'Dem_EvtClearAllowedFncType',0,13,12,26
	.word	26051
	.byte	34
	.word	138
	.byte	1,1,30
	.word	138
	.byte	0,3
	.word	26091
	.byte	23
	.byte	'Dem_InitMForEAllowedFncType',0,14,38,27
	.word	26104
	.byte	10,14,46,9,4,11
	.byte	'state',0
	.word	138
	.byte	1,2,35,0,11
	.byte	'debounceLevel',0
	.word	5307
	.byte	2,2,35,2,0,23
	.byte	'Dem_EvtState',0,14,50,3
	.word	26145
	.byte	33
	.byte	'Dem_EvtIsAnyInitMonitoringRequestedMask',0,14,151,1,15
	.word	1366
	.byte	1,1,14,24
	.word	26145
	.byte	15,5,0,33
	.byte	'Dem_AllEventsState',0,14,152,1,1
	.word	26261
	.byte	1,1,33
	.byte	'Dem_GlobalInitMonitoringCounter',0,14,157,1,15
	.word	855
	.byte	1,1,9
	.word	14847
	.byte	3
	.word	26343
	.byte	34
	.word	2745
	.byte	1,1,30
	.word	855
	.byte	30
	.word	26033
	.byte	30
	.word	26348
	.byte	30
	.word	855
	.byte	0,3
	.word	26353
	.byte	23
	.byte	'Dem_DebFilter',0,50,12,23
	.word	26381
	.byte	2
	.byte	'long int',0,4,5,3
	.word	26408
	.byte	29,1,1,30
	.word	26348
	.byte	30
	.word	855
	.byte	30
	.word	26420
	.byte	30
	.word	26420
	.byte	0,3
	.word	26425
	.byte	23
	.byte	'Dem_DebGetLimits',0,50,13,23
	.word	26449
	.byte	29,1,1,30
	.word	855
	.byte	30
	.word	26348
	.byte	30
	.word	855
	.byte	0,3
	.word	26479
	.byte	23
	.byte	'Dem_DebCyclic',0,50,14,16
	.word	26498
	.byte	23
	.byte	'Dem_DebouncedActionType',0,50,35,21
	.word	2745
	.byte	13,51,37,9,4,11
	.byte	'EnforceAlignment',0
	.word	1366
	.byte	4,2,35,0,11
	.byte	'Buffer',0
	.word	18553
	.byte	4,2,35,0,0,23
	.byte	'Dem_EvBuffEnvDataAlignedType',0,51,47,3
	.word	26557
	.byte	10,51,49,9,16,11
	.byte	'envData',0
	.word	26557
	.byte	4,2,35,0,11
	.byte	'eventType',0
	.word	138
	.byte	1,2,35,4,11
	.byte	'eventId',0
	.word	855
	.byte	2,2,35,6,11
	.byte	'debug0',0
	.word	1366
	.byte	4,2,35,8,11
	.byte	'debug1',0
	.word	1366
	.byte	4,2,35,12,0,23
	.byte	'Dem_EvBuffEvent',0,51,75,2
	.word	26642
	.byte	10,23,29,9,1,11
	.byte	'state',0
	.word	138
	.byte	1,2,35,0,0,23
	.byte	'Dem_DtcState',0,23,31,3
	.word	26757
.L532:
	.byte	14,5
	.word	26757
	.byte	15,4,0,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L161:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32
	.byte	13,58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,11,1,0,0,8,46
	.byte	1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,38,0,73,19,0,0,10,19,1,58,15,59,15,57,15,11,15,0
	.byte	0,11,13,0,3,8,73,19,11,15,56,9,0,0,12,53,0,73,19,0,0,13,23,1,58,15,59,15,57,15,11,15,0,0,14,1,1,11,15
	.byte	73,19,0,0,15,33,0,47,15,0,0,16,46,1,49,19,0,0,17,5,0,49,19,0,0,18,29,1,49,19,0,0,19,11,0,49,19,0,0,20
	.byte	46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,21,11,1,49,19,0,0,22,21,0,54,15,0,0,23,22
	.byte	0,3,8,58,15,59,15,57,15,73,19,0,0,24,4,1,58,15,59,15,57,15,11,15,0,0,25,40,0,3,8,28,13,0,0,26,21,0,54
	.byte	15,39,12,0,0,27,19,1,3,8,58,15,59,15,57,15,11,15,0,0,28,59,0,3,8,0,0,29,21,1,54,15,39,12,0,0,30,5,0,73
	.byte	19,0,0,31,4,1,3,8,58,15,59,15,57,15,11,15,0,0,32,21,0,73,19,54,15,39,12,0,0,33,52,0,3,8,58,15,59,15,57
	.byte	15,73,19,63,12,60,12,0,0,34,21,1,73,19,54,15,39,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L162:
	.word	.L576-.L575
.L575:
	.half	3
	.word	.L578-.L577
.L577:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits32.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_BitArray.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_Lib.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTC_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_ISO14229Byte.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\enco\\Dem_EnableCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_ByteOrderUtils.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientBaseHandling.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientClearMachine.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvTrigger.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\deb\\Dem_Deb.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemTypes.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemAging.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMem.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Dem.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Det\\api\\Det.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientHandlingTypes.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_NodeId.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\api\\Dem_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_EnableCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_OperationCycle.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_StorageCondition.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Intl.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\MemIf\\api\\MemIf_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\NvM\\api\\NvM_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_GenericNvData.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\deb\\Dem_DebBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuffEvent.h',0,0,0,0,0
.L578:
.L576:
	.sdecl	'.debug_info',debug,cluster('Dem_GetTranslationType')
	.sect	'.debug_info'
.L163:
	.word	201
	.half	3
	.word	.L164
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L166,.L165
	.byte	2
	.word	.L159
	.byte	3
	.byte	'Dem_GetTranslationType',0,1,161,1,30
	.word	.L225
	.byte	1,1,1
	.word	.L144,.L226,.L143
	.byte	4
	.word	.L144,.L226
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetTranslationType')
	.sect	'.debug_abbrev'
.L164:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetTranslationType')
	.sect	'.debug_line'
.L165:
	.word	.L580-.L579
.L579:
	.half	3
	.word	.L582-.L581
.L581:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.c',0,0,0,0,0
.L582:
	.byte	5,11,7,0,5,2
	.word	.L144
	.byte	3,162,1,1,5,4,9
	.half	.L583-.L144
	.byte	1,5,1,9
	.half	.L59-.L583
	.byte	3,1,1,7,9
	.half	.L167-.L59
	.byte	0,1,1
.L580:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetTranslationType')
	.sect	'.debug_ranges'
.L166:
	.word	-1,.L144,0,.L167-.L144,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetDTCStatusAvailabilityMask')
	.sect	'.debug_info'
.L168:
	.word	238
	.half	3
	.word	.L169
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L171,.L170
	.byte	2
	.word	.L159
	.byte	3
	.byte	'Dem_GetDTCStatusAvailabilityMask',0,1,167,1,16
	.word	.L225
	.byte	1,1,1
	.word	.L146,.L227,.L145
	.byte	4
	.byte	'DTCStatusMask',0,1,167,1,56
	.word	.L228,.L229
	.byte	5
	.word	.L146,.L227
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetDTCStatusAvailabilityMask')
	.sect	'.debug_abbrev'
.L169:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetDTCStatusAvailabilityMask')
	.sect	'.debug_line'
.L170:
	.word	.L585-.L584
.L584:
	.half	3
	.word	.L587-.L586
.L586:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.c',0,0,0,0,0
.L587:
	.byte	5,21,7,0,5,2
	.word	.L146
	.byte	3,168,1,1,5,19,9
	.half	.L588-.L146
	.byte	1,5,11,9
	.half	.L589-.L588
	.byte	3,1,1,5,4,9
	.half	.L590-.L589
	.byte	1,5,1,9
	.half	.L60-.L590
	.byte	3,1,1,7,9
	.half	.L172-.L60
	.byte	0,1,1
.L585:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetDTCStatusAvailabilityMask')
	.sect	'.debug_ranges'
.L171:
	.word	-1,.L146,0,.L172-.L146,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetSeverityOfDTC')
	.sect	'.debug_info'
.L173:
	.word	498
	.half	3
	.word	.L174
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L176,.L175
	.byte	2
	.word	.L159
	.byte	3
	.byte	'Dem_GetSeverityOfDTC',0,1,174,1,32
	.word	.L225
	.byte	1,1,1
	.word	.L148,.L230,.L147
	.byte	4
	.byte	'DTC',0,1,174,1,60
	.word	.L231,.L232
	.byte	4
	.byte	'DTCSeverity',0,1,174,1,86
	.word	.L233,.L234
	.byte	5
	.word	.L148,.L230
	.byte	6
	.byte	'dtcId',0,1,176,1,18
	.word	.L235,.L236
	.byte	7
	.word	.L237,.L238,.L239
	.byte	8
	.word	.L240,.L241
	.byte	9
	.word	.L242,.L238,.L239
	.byte	7
	.word	.L243,.L244,.L245
	.byte	8
	.word	.L246,.L247
	.byte	10
	.word	.L248,.L244,.L245
	.byte	0,7
	.word	.L249,.L245,.L64
	.byte	8
	.word	.L250,.L251
	.byte	9
	.word	.L252,.L245,.L64
	.byte	7
	.word	.L253,.L254,.L66
	.byte	8
	.word	.L255,.L256
	.byte	8
	.word	.L257,.L258
	.byte	9
	.word	.L259,.L254,.L66
	.byte	7
	.word	.L260,.L254,.L65
	.byte	8
	.word	.L261,.L262
	.byte	8
	.word	.L263,.L264
	.byte	10
	.word	.L265,.L254,.L65
	.byte	0,0,0,0,0,0,0,7
	.word	.L266,.L72,.L73
	.byte	8
	.word	.L267,.L268
	.byte	10
	.word	.L269,.L72,.L73
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetSeverityOfDTC')
	.sect	'.debug_abbrev'
.L174:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17
	.byte	1,18,1,0,0,10,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetSeverityOfDTC')
	.sect	'.debug_line'
.L175:
	.word	.L592-.L591
.L591:
	.half	3
	.word	.L594-.L593
.L593:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTC_DataStructures.h',0,0,0,0,0
.L594:
	.byte	5,32,7,0,5,2
	.word	.L148
	.byte	3,173,1,1,5,47,9
	.half	.L546-.L148
	.byte	3,2,1,4,2,5,13,9
	.half	.L238-.L546
	.byte	3,93,1,4,3,5,21,9
	.half	.L244-.L238
	.byte	3,13,1,5,12,9
	.half	.L595-.L244
	.byte	1,5,28,7,9
	.half	.L596-.L595
	.byte	1,5,21,9
	.half	.L597-.L596
	.byte	1,5,4,9
	.half	.L61-.L597
	.byte	1,4,2,5,13,9
	.half	.L63-.L61
	.byte	3,114,1,5,35,7,9
	.half	.L245-.L63
	.byte	3,109,1,5,51,9
	.half	.L598-.L245
	.byte	1,5,58,9
	.half	.L599-.L598
	.byte	1,5,66,9
	.half	.L600-.L599
	.byte	1,4,4,5,28,9
	.half	.L254-.L600
	.byte	3,69,1,5,47,9
	.half	.L601-.L254
	.byte	1,5,5,9
	.half	.L602-.L601
	.byte	1,5,73,9
	.half	.L65-.L602
	.byte	3,4,1,5,5,9
	.half	.L603-.L65
	.byte	1,4,2,9
	.half	.L66-.L603
	.byte	3,55,1,5,13,9
	.half	.L67-.L66
	.byte	3,20,1,5,5,9
	.half	.L64-.L67
	.byte	3,127,1,4,1,5,9,9
	.half	.L69-.L64
	.byte	3,38,1,5,14,7,9
	.half	.L239-.L69
	.byte	3,2,1,5,7,9
	.half	.L547-.L239
	.byte	1,4,5,5,20,9
	.half	.L72-.L547
	.byte	3,147,127,1,5,9,9
	.half	.L604-.L72
	.byte	1,5,20,9
	.half	.L605-.L604
	.byte	1,5,26,9
	.half	.L606-.L605
	.byte	1,5,2,9
	.half	.L607-.L606
	.byte	1,4,1,5,17,9
	.half	.L73-.L607
	.byte	3,240,0,1,5,11,9
	.half	.L608-.L73
	.byte	3,1,1,5,4,9
	.half	.L548-.L608
	.byte	1,5,1,9
	.half	.L71-.L548
	.byte	3,4,1,7,9
	.half	.L177-.L71
	.byte	0,1,1
.L592:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetSeverityOfDTC')
	.sect	'.debug_ranges'
.L176:
	.word	-1,.L148,0,.L177-.L148,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetFunctionalUnitOfDTC')
	.sect	'.debug_info'
.L178:
	.word	510
	.half	3
	.word	.L179
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L181,.L180
	.byte	2
	.word	.L159
	.byte	3
	.byte	'Dem_GetFunctionalUnitOfDTC',0,1,191,1,38
	.word	.L225
	.byte	1,1,1
	.word	.L150,.L270,.L149
	.byte	4
	.byte	'DTC',0,1,191,1,73
	.word	.L231,.L271
	.byte	4
	.byte	'DTCFunctionalUnit',0,1,191,1,85
	.word	.L228,.L272
	.byte	5
	.word	.L150,.L270
	.byte	6
	.byte	'dtcId',0,1,193,1,18
	.word	.L235,.L273
	.byte	7
	.word	.L237,.L274,.L275
	.byte	8
	.word	.L240,.L276
	.byte	9
	.word	.L242,.L274,.L275
	.byte	7
	.word	.L243,.L277,.L278
	.byte	8
	.word	.L246,.L279
	.byte	10
	.word	.L248,.L277,.L278
	.byte	0,7
	.word	.L249,.L278,.L78
	.byte	8
	.word	.L250,.L280
	.byte	9
	.word	.L252,.L278,.L78
	.byte	7
	.word	.L253,.L281,.L80
	.byte	8
	.word	.L255,.L282
	.byte	8
	.word	.L257,.L283
	.byte	9
	.word	.L259,.L281,.L80
	.byte	7
	.word	.L260,.L281,.L79
	.byte	8
	.word	.L261,.L284
	.byte	8
	.word	.L263,.L285
	.byte	10
	.word	.L265,.L281,.L79
	.byte	0,0,0,0,0,0,0,7
	.word	.L286,.L86,.L87
	.byte	8
	.word	.L287,.L288
	.byte	10
	.word	.L289,.L86,.L87
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetFunctionalUnitOfDTC')
	.sect	'.debug_abbrev'
.L179:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17
	.byte	1,18,1,0,0,10,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetFunctionalUnitOfDTC')
	.sect	'.debug_line'
.L180:
	.word	.L610-.L609
.L609:
	.half	3
	.word	.L612-.L611
.L611:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTC_DataStructures.h',0,0,0,0,0
.L612:
	.byte	5,38,7,0,5,2
	.word	.L150
	.byte	3,190,1,1,5,47,9
	.half	.L549-.L150
	.byte	3,2,1,4,2,5,13,9
	.half	.L274-.L549
	.byte	3,76,1,4,3,5,21,9
	.half	.L277-.L274
	.byte	3,13,1,5,12,9
	.half	.L613-.L277
	.byte	1,5,28,7,9
	.half	.L614-.L613
	.byte	1,5,21,9
	.half	.L615-.L614
	.byte	1,5,4,9
	.half	.L75-.L615
	.byte	1,4,2,5,13,9
	.half	.L77-.L75
	.byte	3,114,1,5,35,7,9
	.half	.L278-.L77
	.byte	3,109,1,5,51,9
	.half	.L616-.L278
	.byte	1,5,58,9
	.half	.L617-.L616
	.byte	1,5,66,9
	.half	.L618-.L617
	.byte	1,4,4,5,28,9
	.half	.L281-.L618
	.byte	3,69,1,5,47,9
	.half	.L619-.L281
	.byte	1,5,5,9
	.half	.L620-.L619
	.byte	1,5,73,9
	.half	.L79-.L620
	.byte	3,4,1,5,5,9
	.half	.L621-.L79
	.byte	1,4,2,9
	.half	.L80-.L621
	.byte	3,55,1,5,13,9
	.half	.L81-.L80
	.byte	3,20,1,5,5,9
	.half	.L78-.L81
	.byte	3,127,1,4,1,5,9,9
	.half	.L83-.L78
	.byte	3,55,1,5,14,7,9
	.half	.L275-.L83
	.byte	3,2,1,5,7,9
	.half	.L550-.L275
	.byte	1,4,5,5,20,9
	.half	.L86-.L550
	.byte	3,142,127,1,5,9,9
	.half	.L622-.L86
	.byte	1,5,20,9
	.half	.L623-.L622
	.byte	1,5,26,9
	.half	.L624-.L623
	.byte	1,5,2,9
	.half	.L625-.L624
	.byte	1,4,1,5,23,9
	.half	.L87-.L625
	.byte	3,245,0,1,5,11,9
	.half	.L626-.L87
	.byte	3,1,1,5,4,9
	.half	.L551-.L626
	.byte	1,5,1,9
	.half	.L85-.L551
	.byte	3,1,1,7,9
	.half	.L182-.L85
	.byte	0,1,1
.L610:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetFunctionalUnitOfDTC')
	.sect	'.debug_ranges'
.L181:
	.word	-1,.L150,0,.L182-.L150,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetDTCOfEvent')
	.sect	'.debug_info'
.L183:
	.word	588
	.half	3
	.word	.L184
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L186,.L185
	.byte	2
	.word	.L159
	.byte	3
	.byte	'Dem_GetDTCOfEvent',0,1,102,16
	.word	.L225
	.byte	1,1,1
	.word	.L24,.L290,.L140
	.byte	4
	.byte	'EventId',0,1,102,50
	.word	.L235,.L291
	.byte	4
	.byte	'DTCFormat',0,1,102,77
	.word	.L225,.L292
	.byte	4
	.byte	'DTCOfEvent',0,1,102,96
	.word	.L293,.L294
	.byte	5
	.word	.L24,.L290
	.byte	6
	.byte	'dtcId',0,1,104,18
	.word	.L235,.L295
	.byte	7
	.word	.L296,.L26,.L297
	.byte	8
	.word	.L298,.L299
	.byte	9
	.word	.L300,.L26,.L297
	.byte	0,7
	.word	.L301,.L33,.L302
	.byte	8
	.word	.L303,.L304
	.byte	10
	.word	.L305,.L33,.L302
	.byte	7
	.word	.L253,.L306,.L35
	.byte	8
	.word	.L255,.L307
	.byte	8
	.word	.L257,.L308
	.byte	10
	.word	.L259,.L306,.L35
	.byte	7
	.word	.L260,.L306,.L34
	.byte	8
	.word	.L261,.L309
	.byte	8
	.word	.L263,.L310
	.byte	9
	.word	.L265,.L306,.L34
	.byte	0,0,0,0,0,7
	.word	.L311,.L41,.L43
	.byte	8
	.word	.L312,.L313
	.byte	9
	.word	.L314,.L41,.L43
	.byte	0,7
	.word	.L315,.L44,.L46
	.byte	8
	.word	.L316,.L317
	.byte	9
	.word	.L318,.L44,.L46
	.byte	0,7
	.word	.L319,.L48,.L320
	.byte	8
	.word	.L321,.L322
	.byte	10
	.word	.L323,.L48,.L320
	.byte	7
	.word	.L324,.L48,.L49
	.byte	8
	.word	.L325,.L326
	.byte	9
	.word	.L327,.L48,.L49
	.byte	0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetDTCOfEvent')
	.sect	'.debug_abbrev'
.L184:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetDTCOfEvent')
	.sect	'.debug_line'
.L185:
	.word	.L628-.L627
.L627:
	.half	3
	.word	.L630-.L629
.L629:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTC_DataStructures.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0,0
.L630:
	.byte	4,2,5,26,7,0,5,2
	.word	.L26
	.byte	3,21,1,5,12,9
	.half	.L631-.L26
	.byte	1,5,38,7,9
	.half	.L632-.L631
	.byte	1,5,26,9
	.half	.L633-.L632
	.byte	1,5,4,9
	.half	.L27-.L633
	.byte	1,4,1,9
	.half	.L29-.L27
	.byte	3,212,0,1,7,9
	.half	.L297-.L29
	.byte	1,4,3,5,33,9
	.half	.L33-.L297
	.byte	3,140,4,1,5,51,9
	.half	.L634-.L33
	.byte	1,5,60,9
	.half	.L635-.L634
	.byte	1,5,68,9
	.half	.L636-.L635
	.byte	1,4,4,5,28,9
	.half	.L306-.L636
	.byte	3,200,123,1,5,47,9
	.half	.L637-.L306
	.byte	1,5,5,9
	.half	.L638-.L637
	.byte	1,5,73,9
	.half	.L34-.L638
	.byte	3,4,1,5,5,9
	.half	.L639-.L34
	.byte	1,4,3,5,3,9
	.half	.L35-.L639
	.byte	3,180,4,1,4,1,5,4,9
	.half	.L36-.L35
	.byte	3,244,123,1,7,9
	.half	.L302-.L36
	.byte	1,9
	.half	.L40-.L302
	.byte	3,1,1,7,9
	.half	.L640-.L40
	.byte	1,4,2,5,12,9
	.half	.L41-.L640
	.byte	3,41,1,5,33,9
	.half	.L641-.L41
	.byte	1,5,38,9
	.half	.L642-.L641
	.byte	1,5,4,9
	.half	.L643-.L642
	.byte	1,4,1,5,9,9
	.half	.L43-.L643
	.byte	3,89,1,5,14,7,9
	.half	.L644-.L43
	.byte	3,2,1,5,7,9
	.half	.L645-.L644
	.byte	1,4,2,5,32,9
	.half	.L44-.L645
	.byte	3,49,1,5,4,9
	.half	.L543-.L44
	.byte	1,4,1,9
	.half	.L46-.L543
	.byte	3,84,1,4,5,5,20,7,9
	.half	.L48-.L46
	.byte	3,114,1,5,9,9
	.half	.L544-.L48
	.byte	1,5,20,9
	.half	.L646-.L544
	.byte	1,5,26,9
	.half	.L647-.L646
	.byte	1,5,2,9
	.half	.L648-.L647
	.byte	1,4,6,5,9,9
	.half	.L49-.L648
	.byte	3,138,1,1,4,1,5,20,9
	.half	.L50-.L49
	.byte	3,134,127,1,5,15,9
	.half	.L320-.L50
	.byte	3,1,1,5,8,9
	.half	.L649-.L320
	.byte	1,5,9,9
	.half	.L47-.L649
	.byte	3,2,1,5,15,7,9
	.half	.L650-.L47
	.byte	3,8,1,5,8,9
	.half	.L651-.L650
	.byte	1,5,9,9
	.half	.L52-.L651
	.byte	3,5,1,5,15,7,9
	.half	.L652-.L52
	.byte	3,8,1,5,8,9
	.half	.L653-.L652
	.byte	1,9
	.half	.L56-.L653
	.byte	3,8,1,5,15,9
	.half	.L541-.L56
	.byte	3,1,1,5,8,9
	.half	.L654-.L541
	.byte	1,5,1,9
	.half	.L31-.L654
	.byte	3,2,1,7,9
	.half	.L187-.L31
	.byte	0,1,1
.L628:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetDTCOfEvent')
	.sect	'.debug_ranges'
.L186:
	.word	-1,.L24,0,.L187-.L24,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_SetDTCSuppression')
	.sect	'.debug_info'
.L188:
	.word	271
	.half	3
	.word	.L189
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L191,.L190
	.byte	2
	.word	.L159
	.byte	3
	.byte	'Dem_SetDTCSuppression',0,1,204,1,16
	.word	.L225
	.byte	1,1,1
	.word	.L152,.L328,.L151
	.byte	4
	.byte	'DTC',0,1,204,1,46
	.word	.L231,.L329
	.byte	4
	.byte	'DTCFormat',0,1,204,1,69
	.word	.L225,.L330
	.byte	4
	.byte	'SuppressionStatus',0,1,204,1,88
	.word	.L225,.L331
	.byte	5
	.word	.L152,.L328
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_SetDTCSuppression')
	.sect	'.debug_abbrev'
.L189:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_SetDTCSuppression')
	.sect	'.debug_line'
.L190:
	.word	.L656-.L655
.L655:
	.half	3
	.word	.L658-.L657
.L657:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.c',0,0,0,0,0
.L658:
	.byte	5,9,7,0,5,2
	.word	.L152
	.byte	3,243,1,1,5,2,9
	.half	.L659-.L152
	.byte	1,5,1,9
	.half	.L89-.L659
	.byte	3,2,1,7,9
	.half	.L192-.L89
	.byte	0,1,1
.L656:
	.sdecl	'.debug_ranges',debug,cluster('Dem_SetDTCSuppression')
	.sect	'.debug_ranges'
.L191:
	.word	-1,.L152,0,.L192-.L152,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetDtcFaultDetectionCounter')
	.sect	'.debug_info'
.L193:
	.word	322
	.half	3
	.word	.L194
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L196,.L195
	.byte	2
	.word	.L159
	.byte	3
	.byte	'Dem_GetDtcFaultDetectionCounter',0,1,156,2,16
	.word	.L225
	.byte	1,1,1
	.word	.L156,.L332,.L155
	.byte	4
	.byte	'dtcCode',0,1,156,2,64
	.word	.L231,.L333
	.byte	4
	.byte	'FaultDetectionCounter',0,1,156,2,80
	.word	.L334,.L335
	.byte	5
	.word	.L156,.L332
	.byte	6
	.byte	'dtcId',0,1,158,2,19
	.word	.L235,.L336
	.byte	7
	.word	.L243,.L337,.L338
	.byte	8
	.word	.L246,.L339
	.byte	9
	.word	.L248,.L337,.L338
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetDtcFaultDetectionCounter')
	.sect	'.debug_abbrev'
.L194:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetDtcFaultDetectionCounter')
	.sect	'.debug_line'
.L195:
	.word	.L661-.L660
.L660:
	.half	3
	.word	.L663-.L662
.L662:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0,0
.L663:
	.byte	5,16,7,0,5,2
	.word	.L156
	.byte	3,155,2,1,5,5,9
	.half	.L557-.L156
	.byte	3,4,1,5,38,7,9
	.half	.L664-.L557
	.byte	3,2,1,4,2,5,21,9
	.half	.L337-.L664
	.byte	3,248,126,1,5,12,9
	.half	.L665-.L337
	.byte	1,5,28,7,9
	.half	.L666-.L665
	.byte	1,5,21,9
	.half	.L667-.L666
	.byte	1,5,4,9
	.half	.L113-.L667
	.byte	1,4,1,5,9,9
	.half	.L115-.L113
	.byte	3,138,1,1,5,68,7,9
	.half	.L338-.L115
	.byte	3,2,1,5,36,9
	.half	.L558-.L338
	.byte	1,5,20,9
	.half	.L668-.L558
	.byte	3,1,1,5,13,9
	.half	.L669-.L668
	.byte	1,5,12,9
	.half	.L112-.L669
	.byte	3,4,1,5,5,9
	.half	.L670-.L112
	.byte	1,5,1,9
	.half	.L117-.L670
	.byte	3,1,1,7,9
	.half	.L197-.L117
	.byte	0,1,1
.L661:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetDtcFaultDetectionCounter')
	.sect	'.debug_ranges'
.L196:
	.word	-1,.L156,0,.L197-.L156,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetDTCOfEvent_GeneralEvtInfo')
	.sect	'.debug_info'
.L198:
	.word	279
	.half	3
	.word	.L199
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L201,.L200
	.byte	2
	.word	.L159
	.byte	3
	.byte	'Dem_GetDTCOfEvent_GeneralEvtInfo',0,1,155,1,16
	.word	.L225
	.byte	1,1,1
	.word	.L142,.L340,.L141
	.byte	4
	.byte	'EventId',0,1,155,1,65
	.word	.L235,.L341
	.byte	4
	.byte	'DTCFormat',0,1,155,1,92
	.word	.L225,.L342
	.byte	4
	.byte	'DTCOfEvent',0,1,155,1,111
	.word	.L293,.L343
	.byte	5
	.word	.L142,.L340
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetDTCOfEvent_GeneralEvtInfo')
	.sect	'.debug_abbrev'
.L199:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetDTCOfEvent_GeneralEvtInfo')
	.sect	'.debug_line'
.L200:
	.word	.L672-.L671
.L671:
	.half	3
	.word	.L674-.L673
.L673:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.c',0,0,0,0,0
.L674:
	.byte	5,50,7,0,5,2
	.word	.L142
	.byte	3,156,1,1,5,5,9
	.half	.L545-.L142
	.byte	1,5,1,9
	.half	.L58-.L545
	.byte	3,2,1,7,9
	.half	.L202-.L58
	.byte	0,1,1
.L672:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetDTCOfEvent_GeneralEvtInfo')
	.sect	'.debug_ranges'
.L201:
	.word	-1,.L142,0,.L202-.L142,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_DtcIdFromDtcCode')
	.sect	'.debug_info'
.L203:
	.word	490
	.half	3
	.word	.L204
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L206,.L205
	.byte	2
	.word	.L159
	.byte	3
	.byte	'Dem_DtcIdFromDtcCode',0,1,84,15
	.word	.L235
	.byte	1,1,1
	.word	.L139,.L344,.L138
	.byte	4
	.byte	'dtcCode',0,1,84,53
	.word	.L231,.L345
	.byte	5
	.word	.L139,.L344
	.byte	6
	.byte	'dtcId',0,1,86,20
	.word	.L346,.L347
	.byte	7
	.word	.L348,.L349,.L350
	.byte	8
	.word	.L351,.L352
	.byte	9
	.word	.L353,.L349,.L350
	.byte	0,7
	.word	.L354,.L355,.L14
	.byte	8
	.word	.L356,.L357
	.byte	9
	.word	.L358,.L355,.L14
	.byte	0,7
	.word	.L319,.L14,.L359
	.byte	8
	.word	.L321,.L360
	.byte	10
	.word	.L323,.L14,.L359
	.byte	7
	.word	.L324,.L14,.L15
	.byte	8
	.word	.L325,.L361
	.byte	9
	.word	.L327,.L14,.L15
	.byte	0,0,0,7
	.word	.L354,.L362,.L18
	.byte	8
	.word	.L356,.L357
	.byte	9
	.word	.L358,.L362,.L18
	.byte	0,7
	.word	.L363,.L364,.L11
	.byte	8
	.word	.L365,.L366
	.byte	9
	.word	.L367,.L364,.L11
	.byte	0,7
	.word	.L368,.L369,.L370
	.byte	8
	.word	.L371,.L372
	.byte	9
	.word	.L373,.L369,.L370
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_DtcIdFromDtcCode')
	.sect	'.debug_abbrev'
.L204:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_DtcIdFromDtcCode')
	.sect	'.debug_line'
.L205:
	.word	.L676-.L675
.L675:
	.half	3
	.word	.L678-.L677
.L677:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTC_DataStructures.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0,0
.L678:
	.byte	5,15,7,0,5,2
	.word	.L139
	.byte	3,211,0,1,5,29,9
	.half	.L533-.L139
	.byte	3,4,1,4,2,5,12,9
	.half	.L349-.L533
	.byte	3,244,0,1,5,10,9
	.half	.L679-.L349
	.byte	1,4,1,5,36,9
	.half	.L350-.L679
	.byte	3,141,127,1,5,48,9
	.half	.L12-.L350
	.byte	3,3,1,4,2,5,27,9
	.half	.L355-.L12
	.byte	3,255,0,1,5,11,9
	.half	.L680-.L355
	.byte	1,5,4,9
	.half	.L681-.L680
	.byte	1,4,3,5,20,9
	.half	.L14-.L681
	.byte	3,139,127,1,5,9,9
	.half	.L682-.L14
	.byte	1,5,20,9
	.half	.L683-.L682
	.byte	1,5,26,9
	.half	.L684-.L683
	.byte	1,5,2,9
	.half	.L685-.L684
	.byte	1,4,4,5,9,9
	.half	.L15-.L685
	.byte	3,138,1,1,4,1,5,3,9
	.half	.L16-.L15
	.byte	3,236,126,1,5,37,7,9
	.half	.L359-.L16
	.byte	3,2,1,4,2,5,27,9
	.half	.L362-.L359
	.byte	3,253,0,1,5,11,9
	.half	.L686-.L362
	.byte	1,5,4,9
	.half	.L687-.L686
	.byte	1,4,1,9
	.half	.L18-.L687
	.byte	3,131,127,1,5,27,9
	.half	.L17-.L18
	.byte	3,124,1,4,2,5,6,9
	.half	.L364-.L17
	.byte	3,252,0,1,5,9,9
	.half	.L688-.L364
	.byte	1,4,1,5,30,9
	.half	.L11-.L688
	.byte	3,131,127,1,4,2,5,23,9
	.half	.L369-.L11
	.byte	3,248,0,1,5,18,9
	.half	.L689-.L369
	.byte	1,5,12,9
	.half	.L690-.L689
	.byte	1,5,31,7,9
	.half	.L691-.L690
	.byte	1,5,23,9
	.half	.L692-.L691
	.byte	1,5,4,9
	.half	.L20-.L692
	.byte	1,4,1,5,36,9
	.half	.L22-.L20
	.byte	3,136,127,1,5,9,7,9
	.half	.L370-.L22
	.byte	3,8,1,5,2,9
	.half	.L693-.L370
	.byte	1,5,1,9
	.half	.L19-.L693
	.byte	3,1,1,7,9
	.half	.L207-.L19
	.byte	0,1,1
.L676:
	.sdecl	'.debug_ranges',debug,cluster('Dem_DtcIdFromDtcCode')
	.sect	'.debug_ranges'
.L206:
	.word	-1,.L139,0,.L207-.L139,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_DtcSetDTCSetting')
	.sect	'.debug_info'
.L208:
	.word	1114
	.half	3
	.word	.L209
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L211,.L210
	.byte	2
	.word	.L159
	.byte	3
	.byte	'Dem_DtcSetDTCSetting',0,1,176,2,6,1,1,1
	.word	.L158,.L374,.L157
	.byte	4
	.byte	'dtcId',0,1,176,2,42
	.word	.L235,.L375
	.byte	4
	.byte	'setBit',0,1,176,2,67
	.word	.L225,.L376
	.byte	5
	.word	.L158,.L374
	.byte	6
	.byte	'eventIt',0,1,178,2,29
	.word	.L377,.L378
	.byte	7
	.word	.L379,.L380,.L121
	.byte	8
	.word	.L381,.L382
	.byte	8
	.word	.L383,.L384
	.byte	8
	.word	.L385,.L386
	.byte	9
	.word	.L387,.L380,.L121
	.byte	7
	.word	.L388,.L389,.L390
	.byte	8
	.word	.L391,.L392
	.byte	8
	.word	.L393,.L394
	.byte	9
	.word	.L395,.L389,.L390
	.byte	6
	.byte	'bit2shift',0,2,38,11
	.word	.L225,.L396
	.byte	0,0,7
	.word	.L397,.L120,.L121
	.byte	8
	.word	.L398,.L399
	.byte	8
	.word	.L400,.L401
	.byte	9
	.word	.L402,.L120,.L121
	.byte	6
	.byte	'bit2shift',0,2,44,11
	.word	.L225,.L403
	.byte	0,0,0,0,7
	.word	.L404,.L405,.L406
	.byte	8
	.word	.L407,.L408
	.byte	8
	.word	.L409,.L410
	.byte	9
	.word	.L411,.L405,.L406
	.byte	7
	.word	.L243,.L405,.L412
	.byte	8
	.word	.L246,.L413
	.byte	10
	.word	.L248,.L405,.L412
	.byte	0,0,0,7
	.word	.L414,.L128,.L129
	.byte	8
	.word	.L415,.L416
	.byte	10
	.word	.L417,.L128,.L129
	.byte	0,7
	.word	.L414,.L418,.L130
	.byte	8
	.word	.L415,.L416
	.byte	10
	.word	.L417,.L418,.L130
	.byte	0,7
	.word	.L419,.L420,.L421
	.byte	8
	.word	.L422,.L423
	.byte	8
	.word	.L424,.L425
	.byte	9
	.word	.L426,.L420,.L421
	.byte	6
	.byte	'oldReason',0,3,243,3,31
	.word	.L225,.L427
	.byte	7
	.word	.L428,.L429,.L132
	.byte	8
	.word	.L430,.L431
	.byte	8
	.word	.L432,.L433
	.byte	8
	.word	.L434,.L435
	.byte	9
	.word	.L436,.L429,.L132
	.byte	6
	.byte	'bit2shift',0,2,71,11
	.word	.L225,.L437
	.byte	0,0,7
	.word	.L438,.L439,.L134
	.byte	8
	.word	.L440,.L441
	.byte	8
	.word	.L442,.L443
	.byte	8
	.word	.L444,.L445
	.byte	8
	.word	.L446,.L447
	.byte	9
	.word	.L448,.L439,.L134
	.byte	6
	.byte	'bit2shift',0,2,85,11
	.word	.L225,.L449
	.byte	7
	.word	.L450,.L451,.L452
	.byte	8
	.word	.L453,.L454
	.byte	8
	.word	.L455,.L456
	.byte	8
	.word	.L457,.L458
	.byte	9
	.word	.L459,.L451,.L452
	.byte	6
	.byte	'bit2shift',0,2,79,11
	.word	.L225,.L460
	.byte	0,0,0,0,7
	.word	.L461,.L134,.L462
	.byte	10
	.word	.L463,.L134,.L462
	.byte	0,7
	.word	.L464,.L465,.L421
	.byte	8
	.word	.L466,.L467
	.byte	9
	.word	.L468,.L465,.L421
	.byte	7
	.word	.L469,.L470,.L421
	.byte	8
	.word	.L471,.L472
	.byte	8
	.word	.L473,.L474
	.byte	9
	.word	.L475,.L470,.L421
	.byte	6
	.byte	'bit2shift',0,4,38,12
	.word	.L231,.L476
	.byte	0,0,0,0,0,0,7
	.word	.L477,.L478,.L127
	.byte	8
	.word	.L479,.L480
	.byte	10
	.word	.L481,.L478,.L127
	.byte	0,7
	.word	.L482,.L483,.L135
	.byte	8
	.word	.L484,.L485
	.byte	10
	.word	.L486,.L483,.L135
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_DtcSetDTCSetting')
	.sect	'.debug_abbrev'
.L209:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,10,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_DtcSetDTCSetting')
	.sect	'.debug_line'
.L210:
	.word	.L695-.L694
.L694:
	.half	3
	.word	.L697-.L696
.L696:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits32.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0,0
.L697:
	.byte	5,6,7,0,5,2
	.word	.L158
	.byte	3,175,2,1,5,33,9
	.half	.L119-.L158
	.byte	3,6,1,5,49,9
	.half	.L698-.L119
	.byte	1,5,64,9
	.half	.L699-.L698
	.byte	1,4,2,5,5,9
	.half	.L380-.L699
	.byte	3,252,125,1,5,21,7,9
	.half	.L389-.L380
	.byte	3,116,1,5,6,9
	.half	.L563-.L389
	.byte	3,1,1,5,36,9
	.half	.L700-.L563
	.byte	1,5,13,9
	.half	.L564-.L700
	.byte	1,5,53,9
	.half	.L390-.L564
	.byte	3,13,1,5,21,9
	.half	.L120-.L390
	.byte	3,120,1,5,6,9
	.half	.L565-.L120
	.byte	3,1,1,5,47,9
	.half	.L701-.L565
	.byte	1,5,26,9
	.half	.L566-.L701
	.byte	1,5,13,9
	.half	.L702-.L566
	.byte	1,4,1,5,10,9
	.half	.L121-.L702
	.byte	3,139,2,1,5,51,7,9
	.half	.L703-.L121
	.byte	3,2,1,4,5,5,21,9
	.half	.L405-.L703
	.byte	3,224,126,1,5,12,9
	.half	.L704-.L405
	.byte	1,5,28,7,9
	.half	.L705-.L704
	.byte	1,5,21,9
	.half	.L706-.L705
	.byte	1,5,4,9
	.half	.L123-.L706
	.byte	1,5,9,9
	.half	.L125-.L123
	.byte	3,154,1,1,5,5,7,9
	.half	.L412-.L125
	.byte	3,2,1,5,14,9
	.half	.L126-.L412
	.byte	3,3,1,5,35,9
	.half	.L707-.L126
	.byte	1,5,11,9
	.half	.L708-.L707
	.byte	1,5,44,9
	.half	.L709-.L708
	.byte	3,1,1,5,12,9
	.half	.L710-.L709
	.byte	1,4,1,5,57,9
	.half	.L406-.L710
	.byte	3,1,1,4,5,5,4,9
	.half	.L128-.L406
	.byte	3,18,1,4,1,5,71,9
	.half	.L129-.L128
	.byte	3,114,1,4,5,5,33,9
	.half	.L418-.L129
	.byte	3,14,1,5,29,9
	.half	.L711-.L418
	.byte	1,5,4,9
	.half	.L712-.L711
	.byte	1,4,1,5,82,9
	.half	.L130-.L712
	.byte	3,114,1,4,3,5,92,9
	.half	.L420-.L130
	.byte	3,180,1,1,5,110,9
	.half	.L713-.L420
	.byte	1,5,119,9
	.half	.L714-.L713
	.byte	1,4,2,5,21,9
	.half	.L429-.L714
	.byte	3,212,124,1,5,19,9
	.half	.L567-.L429
	.byte	3,1,1,5,41,9
	.half	.L715-.L567
	.byte	3,1,1,5,19,9
	.half	.L568-.L715
	.byte	1,5,5,9
	.half	.L716-.L568
	.byte	3,1,1,4,3,5,9,9
	.half	.L132-.L716
	.byte	3,172,3,1,5,41,7,9
	.half	.L717-.L132
	.byte	1,5,73,7,9
	.half	.L133-.L717
	.byte	3,2,1,5,106,9
	.half	.L718-.L133
	.byte	1,4,2,5,21,9
	.half	.L439-.L718
	.byte	3,221,124,1,9
	.half	.L451-.L439
	.byte	3,122,1,5,6,9
	.half	.L570-.L451
	.byte	3,1,1,5,57,9
	.half	.L719-.L570
	.byte	1,5,77,9
	.half	.L571-.L719
	.byte	1,5,83,9
	.half	.L720-.L571
	.byte	1,5,25,9
	.half	.L721-.L720
	.byte	1,5,12,9
	.half	.L722-.L721
	.byte	1,5,6,9
	.half	.L452-.L722
	.byte	3,7,1,5,57,9
	.half	.L723-.L452
	.byte	1,5,35,9
	.half	.L569-.L723
	.byte	1,5,78,9
	.half	.L724-.L569
	.byte	1,5,12,9
	.half	.L725-.L724
	.byte	1,4,3,5,5,9
	.half	.L134-.L725
	.byte	3,142,3,1,5,36,9
	.half	.L726-.L134
	.byte	1,5,34,9
	.half	.L462-.L726
	.byte	3,22,1,5,107,9
	.half	.L465-.L462
	.byte	3,110,1,4,4,5,22,9
	.half	.L470-.L465
	.byte	3,189,124,1,5,6,9
	.half	.L572-.L470
	.byte	3,1,1,5,37,9
	.half	.L727-.L572
	.byte	1,5,13,9
	.half	.L573-.L727
	.byte	1,4,1,5,46,9
	.half	.L421-.L573
	.byte	3,149,2,1,4,5,5,7,9
	.half	.L478-.L421
	.byte	3,12,1,5,12,9
	.half	.L728-.L478
	.byte	1,4,1,5,49,9
	.half	.L127-.L728
	.byte	3,115,1,4,5,5,34,9
	.half	.L483-.L127
	.byte	3,8,1,5,43,9
	.half	.L729-.L483
	.byte	1,5,39,9
	.half	.L730-.L729
	.byte	1,5,4,9
	.half	.L731-.L730
	.byte	1,4,1,5,57,9
	.half	.L135-.L731
	.byte	3,120,1,5,1,7,9
	.half	.L122-.L135
	.byte	3,7,1,7,9
	.half	.L212-.L122
	.byte	0,1,1
.L695:
	.sdecl	'.debug_ranges',debug,cluster('Dem_DtcSetDTCSetting')
	.sect	'.debug_ranges'
.L211:
	.word	-1,.L158,0,.L212-.L158,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_IsEventEnabledByDtcSetting')
	.sect	'.debug_info'
.L213:
	.word	429
	.half	3
	.word	.L214
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L216,.L215
	.byte	2
	.word	.L159
	.byte	3
	.byte	'Dem_IsEventEnabledByDtcSetting',0,1,62,19
	.word	.L225
	.byte	1,1,1
	.word	.L137,.L487,.L136
	.byte	4
	.byte	'EventId',0,1,62,66
	.word	.L235,.L488
	.byte	5
	.word	.L137,.L487
	.byte	6
	.word	.L311,.L137,.L2
	.byte	7
	.word	.L312,.L489
	.byte	8
	.word	.L314,.L137,.L2
	.byte	0,6
	.word	.L315,.L490,.L4
	.byte	7
	.word	.L316,.L491
	.byte	8
	.word	.L318,.L490,.L4
	.byte	0,6
	.word	.L492,.L4,.L7
	.byte	7
	.word	.L493,.L494
	.byte	9
	.word	.L495,.L4,.L7
	.byte	6
	.word	.L253,.L496,.L6
	.byte	7
	.word	.L255,.L497
	.byte	7
	.word	.L257,.L498
	.byte	9
	.word	.L259,.L496,.L6
	.byte	6
	.word	.L260,.L496,.L5
	.byte	7
	.word	.L261,.L499
	.byte	7
	.word	.L263,.L500
	.byte	8
	.word	.L265,.L496,.L5
	.byte	0,0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_IsEventEnabledByDtcSetting')
	.sect	'.debug_abbrev'
.L214:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	29,1,49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,9,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_IsEventEnabledByDtcSetting')
	.sect	'.debug_line'
.L215:
	.word	.L733-.L732
.L732:
	.half	3
	.word	.L735-.L734
.L734:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0,0
.L735:
	.byte	4,2,5,12,7,0,5,2
	.word	.L137
	.byte	3,147,1,1,5,33,9
	.half	.L736-.L137
	.byte	1,5,38,9
	.half	.L737-.L736
	.byte	1,5,4,9
	.half	.L738-.L737
	.byte	1,4,1,5,5,9
	.half	.L2-.L738
	.byte	3,172,127,1,4,2,5,32,7,9
	.half	.L490-.L2
	.byte	3,224,0,1,5,4,9
	.half	.L739-.L490
	.byte	1,4,3,5,35,9
	.half	.L4-.L739
	.byte	3,135,1,1,5,51,9
	.half	.L740-.L4
	.byte	1,5,58,9
	.half	.L741-.L740
	.byte	1,5,66,9
	.half	.L742-.L741
	.byte	1,4,4,5,28,9
	.half	.L496-.L742
	.byte	3,151,126,1,5,47,9
	.half	.L743-.L496
	.byte	1,5,5,9
	.half	.L744-.L743
	.byte	1,5,73,9
	.half	.L5-.L744
	.byte	3,4,1,5,5,9
	.half	.L745-.L5
	.byte	1,4,3,5,10,9
	.half	.L6-.L745
	.byte	3,229,1,1,5,2,9
	.half	.L746-.L6
	.byte	1,4,1,5,13,9
	.half	.L7-.L746
	.byte	3,155,126,1,5,24,7,9
	.half	.L747-.L7
	.byte	3,7,1,5,17,9
	.half	.L748-.L747
	.byte	1,5,12,9
	.half	.L3-.L748
	.byte	3,4,1,5,5,9
	.half	.L749-.L3
	.byte	1,5,1,9
	.half	.L9-.L749
	.byte	3,1,1,7,9
	.half	.L217-.L9
	.byte	0,1,1
.L733:
	.sdecl	'.debug_ranges',debug,cluster('Dem_IsEventEnabledByDtcSetting')
	.sect	'.debug_ranges'
.L216:
	.word	-1,.L137,0,.L217-.L137,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_DtcFaultDetectionRetrieve')
	.sect	'.debug_info'
.L218:
	.word	757
	.half	3
	.word	.L219
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L221,.L220
	.byte	2
	.word	.L159
	.byte	3
	.byte	'Dem_DtcFaultDetectionRetrieve',0,1,255,1,7
	.word	.L501
	.byte	1,1,1
	.word	.L154,.L502,.L153
	.byte	4
	.byte	'dtcId',0,1,255,1,52
	.word	.L235,.L503
	.byte	5
	.word	.L154,.L502
	.byte	6
	.byte	'eventIt',0,1,129,2,26
	.word	.L377,.L504
	.byte	6
	.byte	'eventId',0,1,130,2,18
	.word	.L235,.L505
	.byte	6
	.byte	'faultDetectionCtrVal',0,1,131,2,8
	.word	.L501,.L506
	.byte	6
	.byte	'maxFaultDetectionCtrVal',0,1,132,2,8
	.word	.L501,.L507
	.byte	6
	.byte	'returnValue',0,1,133,2,8
	.word	.L501,.L508
	.byte	7
	.word	.L237,.L509,.L510
	.byte	8
	.word	.L240,.L511
	.byte	9
	.word	.L242,.L509,.L510
	.byte	7
	.word	.L243,.L512,.L513
	.byte	8
	.word	.L246,.L514
	.byte	10
	.word	.L248,.L512,.L513
	.byte	0,7
	.word	.L249,.L513,.L93
	.byte	8
	.word	.L250,.L515
	.byte	9
	.word	.L252,.L513,.L93
	.byte	7
	.word	.L253,.L516,.L95
	.byte	8
	.word	.L255,.L517
	.byte	8
	.word	.L257,.L518
	.byte	9
	.word	.L259,.L516,.L95
	.byte	7
	.word	.L260,.L516,.L94
	.byte	8
	.word	.L261,.L519
	.byte	8
	.word	.L263,.L520
	.byte	10
	.word	.L265,.L516,.L94
	.byte	0,0,0,0,0,0,0,7
	.word	.L404,.L521,.L522
	.byte	8
	.word	.L407,.L523
	.byte	8
	.word	.L409,.L524
	.byte	9
	.word	.L411,.L521,.L522
	.byte	7
	.word	.L243,.L521,.L525
	.byte	8
	.word	.L246,.L514
	.byte	10
	.word	.L248,.L521,.L525
	.byte	0,0,0,7
	.word	.L414,.L526,.L106
	.byte	8
	.word	.L415,.L527
	.byte	10
	.word	.L417,.L526,.L106
	.byte	0,7
	.word	.L477,.L528,.L104
	.byte	8
	.word	.L479,.L529
	.byte	10
	.word	.L481,.L528,.L104
	.byte	0,7
	.word	.L482,.L530,.L110
	.byte	8
	.word	.L484,.L531
	.byte	10
	.word	.L486,.L530,.L110
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_DtcFaultDetectionRetrieve')
	.sect	'.debug_abbrev'
.L219:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17
	.byte	1,18,1,0,0,10,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_DtcFaultDetectionRetrieve')
	.sect	'.debug_line'
.L220:
	.word	.L751-.L750
.L750:
	.half	3
	.word	.L753-.L752
.L752:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0,0
.L753:
	.byte	5,7,7,0,5,2
	.word	.L154
	.byte	3,254,1,1,5,29,9
	.half	.L554-.L154
	.byte	3,4,1,5,28,9
	.half	.L754-.L554
	.byte	1,5,32,9
	.half	.L755-.L754
	.byte	3,1,1,5,20,9
	.half	.L555-.L755
	.byte	3,1,1,4,2,5,13,9
	.half	.L509-.L555
	.byte	3,136,127,1,4,3,5,21,9
	.half	.L512-.L509
	.byte	3,13,1,5,12,9
	.half	.L756-.L512
	.byte	1,5,28,7,9
	.half	.L757-.L756
	.byte	1,5,21,9
	.half	.L758-.L757
	.byte	1,5,4,9
	.half	.L90-.L758
	.byte	1,4,2,5,13,9
	.half	.L92-.L90
	.byte	3,114,1,5,35,7,9
	.half	.L513-.L92
	.byte	3,109,1,5,51,9
	.half	.L759-.L513
	.byte	1,5,58,9
	.half	.L760-.L759
	.byte	1,5,66,9
	.half	.L761-.L760
	.byte	1,4,4,5,28,9
	.half	.L516-.L761
	.byte	3,69,1,5,47,9
	.half	.L762-.L516
	.byte	1,5,5,9
	.half	.L763-.L762
	.byte	1,5,73,9
	.half	.L94-.L763
	.byte	3,4,1,5,5,9
	.half	.L764-.L94
	.byte	1,4,2,9
	.half	.L95-.L764
	.byte	3,55,1,5,13,9
	.half	.L96-.L95
	.byte	3,20,1,5,5,9
	.half	.L93-.L96
	.byte	3,127,1,4,1,5,2,9
	.half	.L98-.L93
	.byte	3,251,0,1,5,45,7,9
	.half	.L510-.L98
	.byte	3,2,1,4,3,5,21,9
	.half	.L521-.L510
	.byte	3,145,127,1,5,12,9
	.half	.L765-.L521
	.byte	1,5,28,7,9
	.half	.L766-.L765
	.byte	1,5,21,9
	.half	.L767-.L766
	.byte	1,5,4,9
	.half	.L100-.L767
	.byte	1,5,9,9
	.half	.L102-.L100
	.byte	3,154,1,1,5,5,7,9
	.half	.L525-.L102
	.byte	3,2,1,5,14,9
	.half	.L103-.L525
	.byte	3,3,1,5,35,9
	.half	.L768-.L103
	.byte	1,5,11,9
	.half	.L769-.L768
	.byte	1,5,44,9
	.half	.L770-.L769
	.byte	3,1,1,5,12,9
	.half	.L771-.L770
	.byte	1,4,1,5,45,9
	.half	.L522-.L771
	.byte	3,80,1,5,46,9
	.half	.L105-.L522
	.byte	3,3,1,4,3,5,33,9
	.half	.L526-.L105
	.byte	3,192,0,1,5,29,9
	.half	.L772-.L526
	.byte	1,5,4,9
	.half	.L773-.L772
	.byte	1,4,1,5,47,9
	.half	.L106-.L773
	.byte	3,65,1,5,4,9
	.half	.L774-.L106
	.byte	1,5,8,7,9
	.half	.L108-.L774
	.byte	3,2,1,5,35,9
	.half	.L109-.L108
	.byte	3,1,1,5,34,9
	.half	.L107-.L109
	.byte	3,122,1,4,3,5,7,9
	.half	.L528-.L107
	.byte	3,61,1,5,12,9
	.half	.L775-.L528
	.byte	1,4,1,5,37,9
	.half	.L104-.L775
	.byte	3,66,1,4,3,5,34,9
	.half	.L530-.L104
	.byte	3,57,1,5,43,9
	.half	.L776-.L530
	.byte	1,5,39,9
	.half	.L777-.L776
	.byte	1,5,4,9
	.half	.L778-.L777
	.byte	1,4,1,5,45,9
	.half	.L110-.L778
	.byte	3,71,1,5,2,7,9
	.half	.L99-.L110
	.byte	3,12,1,5,1,9
	.half	.L111-.L99
	.byte	3,1,1,7,9
	.half	.L222-.L111
	.byte	0,1,1
.L751:
	.sdecl	'.debug_ranges',debug,cluster('Dem_DtcFaultDetectionRetrieve')
	.sect	'.debug_ranges'
.L221:
	.word	-1,.L154,0,.L222-.L154,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_AllDTCsState')
	.sect	'.debug_info'
.L223:
	.word	168
	.half	3
	.word	.L224
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L159
	.byte	3
	.byte	'Dem_AllDTCsState',0,27,23,5
	.word	.L532
	.byte	1,5,3
	.word	Dem_AllDTCsState
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_AllDTCsState')
	.sect	'.debug_abbrev'
.L224:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_DtcFaultDetectionRetrieve')
	.sect	'.debug_loc'
.L153:
	.word	-1,.L154,0,.L552-.L154
	.half	2
	.byte	138,0
	.word	.L552-.L154,.L502-.L154
	.half	2
	.byte	138,16
	.word	.L502-.L154,.L502-.L154
	.half	2
	.byte	138,0
	.word	0,0
.L520:
	.word	0,0
.L518:
	.word	0,0
.L511:
	.word	0,0
.L515:
	.word	0,0
.L503:
	.word	-1,.L154,0,.L553-.L154
	.half	1
	.byte	84
	.word	.L554-.L154,.L502-.L154
	.half	1
	.byte	89
	.word	0,0
.L524:
	.word	0,0
.L505:
	.word	0,0
.L504:
	.word	-1,.L154,0,.L502-.L154
	.half	2
	.byte	145,112
	.word	0,0
.L506:
	.word	-1,.L154,0,.L502-.L154
	.half	2
	.byte	145,120
	.word	0,0
.L514:
	.word	0,0
.L523:
	.word	0,0
.L531:
	.word	0,0
.L529:
	.word	0,0
.L527:
	.word	0,0
.L507:
	.word	-1,.L154,.L555-.L154,.L502-.L154
	.half	1
	.byte	88
	.word	0,0
.L508:
	.word	-1,.L154,.L509-.L154,.L502-.L154
	.half	1
	.byte	90
	.word	.L556-.L154,.L502-.L154
	.half	1
	.byte	82
	.word	0,0
.L519:
	.word	0,0
.L517:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_DtcIdFromDtcCode')
	.sect	'.debug_loc'
.L138:
	.word	-1,.L139,0,.L533-.L139
	.half	2
	.byte	138,0
	.word	.L533-.L139,.L344-.L139
	.half	2
	.byte	138,8
	.word	.L344-.L139,.L344-.L139
	.half	2
	.byte	138,0
	.word	0,0
.L345:
	.word	-1,.L139,0,.L344-.L139
	.half	1
	.byte	84
	.word	0,0
.L347:
	.word	-1,.L139,0,.L344-.L139
	.half	2
	.byte	145,120
	.word	0,0
.L360:
	.word	0,0
.L361:
	.word	0,0
.L352:
	.word	0,0
.L372:
	.word	0,0
.L366:
	.word	0,0
.L357:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_DtcSetDTCSetting')
	.sect	'.debug_loc'
.L157:
	.word	-1,.L158,0,.L560-.L158
	.half	2
	.byte	138,0
	.word	.L560-.L158,.L374-.L158
	.half	2
	.byte	138,8
	.word	.L374-.L158,.L374-.L158
	.half	2
	.byte	138,0
	.word	0,0
.L423:
	.word	0,0
.L396:
	.word	-1,.L158,.L563-.L158,.L564-.L158
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L476:
	.word	-1,.L158,.L572-.L158,.L573-.L158
	.half	1
	.byte	95
	.word	0,0
.L403:
	.word	-1,.L158,.L565-.L158,.L566-.L158
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L437:
	.word	-1,.L158,.L567-.L158,.L568-.L158
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L460:
	.word	-1,.L158,.L570-.L158,.L571-.L158
	.half	1
	.byte	82
	.word	0,0
.L449:
	.word	-1,.L158,.L451-.L158,.L569-.L158
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L394:
	.word	0,0
.L474:
	.word	0,0
.L401:
	.word	0,0
.L384:
	.word	0,0
.L433:
	.word	0,0
.L456:
	.word	0,0
.L443:
	.word	0,0
.L392:
	.word	0,0
.L472:
	.word	0,0
.L399:
	.word	0,0
.L382:
	.word	0,0
.L375:
	.word	-1,.L158,0,.L561-.L158
	.half	1
	.byte	84
	.word	.L119-.L158,.L128-.L158
	.half	1
	.byte	95
	.word	0,0
.L410:
	.word	0,0
.L378:
	.word	-1,.L158,0,.L374-.L158
	.half	2
	.byte	145,120
	.word	0,0
.L413:
	.word	0,0
.L408:
	.word	0,0
.L485:
	.word	0,0
.L480:
	.word	0,0
.L416:
	.word	0,0
.L425:
	.word	0,0
.L447:
	.word	0,0
.L435:
	.word	0,0
.L458:
	.word	0,0
.L445:
	.word	0,0
.L427:
	.word	0,0
.L467:
	.word	0,0
.L376:
	.word	-1,.L158,0,.L562-.L158
	.half	1
	.byte	85
	.word	0,0
.L431:
	.word	0,0
.L454:
	.word	0,0
.L441:
	.word	0,0
.L386:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetDTCOfEvent')
	.sect	'.debug_loc'
.L292:
	.word	-1,.L24,.L26-.L24,.L534-.L24
	.half	1
	.byte	85
	.word	.L33-.L24,.L537-.L24
	.half	1
	.byte	85
	.word	.L41-.L24,.L540-.L24
	.half	1
	.byte	85
	.word	0,0
.L294:
	.word	-1,.L24,.L26-.L24,.L535-.L24
	.half	1
	.byte	100
	.word	.L33-.L24,.L538-.L24
	.half	1
	.byte	100
	.word	.L41-.L24,.L541-.L24
	.half	1
	.byte	100
	.word	0,0
.L140:
	.word	-1,.L24,0,.L290-.L24
	.half	2
	.byte	138,0
	.word	0,0
.L291:
	.word	-1,.L24,.L26-.L24,.L536-.L24
	.half	1
	.byte	84
	.word	.L33-.L24,.L539-.L24
	.half	1
	.byte	84
	.word	.L41-.L24,.L542-.L24
	.half	1
	.byte	84
	.word	0,0
.L304:
	.word	0,0
.L310:
	.word	0,0
.L308:
	.word	0,0
.L299:
	.word	0,0
.L295:
	.word	-1,.L24,.L543-.L24,.L544-.L24
	.half	1
	.byte	95
	.word	.L47-.L24,.L31-.L24
	.half	1
	.byte	95
	.word	0,0
.L322:
	.word	0,0
.L313:
	.word	0,0
.L317:
	.word	0,0
.L326:
	.word	0,0
.L309:
	.word	0,0
.L307:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetDTCOfEvent_GeneralEvtInfo')
	.sect	'.debug_loc'
.L342:
	.word	-1,.L142,0,.L545-.L142
	.half	1
	.byte	85
	.word	0,0
.L343:
	.word	-1,.L142,0,.L545-.L142
	.half	1
	.byte	100
	.word	0,0
.L141:
	.word	-1,.L142,0,.L340-.L142
	.half	2
	.byte	138,0
	.word	0,0
.L341:
	.word	-1,.L142,0,.L545-.L142
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetDTCStatusAvailabilityMask')
	.sect	'.debug_loc'
.L229:
	.word	-1,.L146,0,.L227-.L146
	.half	1
	.byte	100
	.word	0,0
.L145:
	.word	-1,.L146,0,.L227-.L146
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetDtcFaultDetectionCounter')
	.sect	'.debug_loc'
.L155:
	.word	-1,.L156,0,.L332-.L156
	.half	2
	.byte	138,0
	.word	0,0
.L335:
	.word	-1,.L156,0,.L337-.L156
	.half	1
	.byte	100
	.word	.L557-.L156,.L332-.L156
	.half	1
	.byte	111
	.word	0,0
.L333:
	.word	-1,.L156,0,.L337-.L156
	.half	1
	.byte	84
	.word	0,0
.L336:
	.word	-1,.L156,.L337-.L156,.L558-.L156
	.half	1
	.byte	82
	.word	.L559-.L156,.L558-.L156
	.half	1
	.byte	84
	.word	0,0
.L339:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetFunctionalUnitOfDTC')
	.sect	'.debug_loc'
.L271:
	.word	-1,.L150,0,.L274-.L150
	.half	1
	.byte	84
	.word	0,0
.L272:
	.word	-1,.L150,0,.L274-.L150
	.half	1
	.byte	100
	.word	.L549-.L150,.L270-.L150
	.half	1
	.byte	108
	.word	0,0
.L149:
	.word	-1,.L150,0,.L270-.L150
	.half	2
	.byte	138,0
	.word	0,0
.L285:
	.word	0,0
.L283:
	.word	0,0
.L276:
	.word	0,0
.L280:
	.word	0,0
.L273:
	.word	-1,.L150,.L274-.L150,.L550-.L150
	.half	1
	.byte	82
	.word	.L86-.L150,.L551-.L150
	.half	1
	.byte	82
	.word	0,0
.L279:
	.word	0,0
.L288:
	.word	0,0
.L284:
	.word	0,0
.L282:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetSeverityOfDTC')
	.sect	'.debug_loc'
.L232:
	.word	-1,.L148,0,.L238-.L148
	.half	1
	.byte	84
	.word	0,0
.L234:
	.word	-1,.L148,0,.L238-.L148
	.half	1
	.byte	100
	.word	.L546-.L148,.L230-.L148
	.half	1
	.byte	108
	.word	0,0
.L147:
	.word	-1,.L148,0,.L230-.L148
	.half	2
	.byte	138,0
	.word	0,0
.L264:
	.word	0,0
.L258:
	.word	0,0
.L241:
	.word	0,0
.L251:
	.word	0,0
.L236:
	.word	-1,.L148,.L238-.L148,.L547-.L148
	.half	1
	.byte	82
	.word	.L72-.L148,.L548-.L148
	.half	1
	.byte	82
	.word	0,0
.L247:
	.word	0,0
.L268:
	.word	0,0
.L262:
	.word	0,0
.L256:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetTranslationType')
	.sect	'.debug_loc'
.L143:
	.word	-1,.L144,0,.L226-.L144
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_IsEventEnabledByDtcSetting')
	.sect	'.debug_loc'
.L136:
	.word	-1,.L137,0,.L487-.L137
	.half	2
	.byte	138,0
	.word	0,0
.L488:
	.word	-1,.L137,0,.L487-.L137
	.half	1
	.byte	84
	.word	0,0
.L500:
	.word	0,0
.L498:
	.word	0,0
.L494:
	.word	0,0
.L489:
	.word	0,0
.L491:
	.word	0,0
.L499:
	.word	0,0
.L497:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_SetDTCSuppression')
	.sect	'.debug_loc'
.L329:
	.word	-1,.L152,0,.L328-.L152
	.half	1
	.byte	84
	.word	0,0
.L330:
	.word	-1,.L152,0,.L328-.L152
	.half	1
	.byte	85
	.word	0,0
.L151:
	.word	-1,.L152,0,.L328-.L152
	.half	2
	.byte	138,0
	.word	0,0
.L331:
	.word	-1,.L152,0,.L328-.L152
	.half	1
	.byte	86
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L779:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Dem_IsEventEnabledByDtcSetting')
	.sect	'.debug_frame'
	.word	24
	.word	.L779,.L137,.L487-.L137
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_DtcIdFromDtcCode')
	.sect	'.debug_frame'
	.word	48
	.word	.L779,.L139,.L344-.L139
	.byte	8,18,8,19,8,20,8,21,8,22,8,23,4
	.word	(.L533-.L139)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L344-.L533)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_GetDTCOfEvent')
	.sect	'.debug_frame'
	.word	12
	.word	.L779,.L24,.L290-.L24
	.sdecl	'.debug_frame',debug,cluster('Dem_GetDTCOfEvent_GeneralEvtInfo')
	.sect	'.debug_frame'
	.word	12
	.word	.L779,.L142,.L340-.L142
	.sdecl	'.debug_frame',debug,cluster('Dem_GetTranslationType')
	.sect	'.debug_frame'
	.word	24
	.word	.L779,.L144,.L226-.L144
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Dem_GetDTCStatusAvailabilityMask')
	.sect	'.debug_frame'
	.word	24
	.word	.L779,.L146,.L227-.L146
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_GetSeverityOfDTC')
	.sect	'.debug_frame'
	.word	12
	.word	.L779,.L148,.L230-.L148
	.sdecl	'.debug_frame',debug,cluster('Dem_GetFunctionalUnitOfDTC')
	.sect	'.debug_frame'
	.word	12
	.word	.L779,.L150,.L270-.L150
	.sdecl	'.debug_frame',debug,cluster('Dem_SetDTCSuppression')
	.sect	'.debug_frame'
	.word	24
	.word	.L779,.L152,.L328-.L152
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Dem_DtcFaultDetectionRetrieve')
	.sect	'.debug_frame'
	.word	36
	.word	.L779,.L154,.L502-.L154
	.byte	4
	.word	(.L552-.L154)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L502-.L552)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_GetDtcFaultDetectionCounter')
	.sect	'.debug_frame'
	.word	12
	.word	.L779,.L156,.L332-.L156
	.sdecl	'.debug_frame',debug,cluster('Dem_DtcSetDTCSetting')
	.sect	'.debug_frame'
	.word	36
	.word	.L779,.L158,.L374-.L158
	.byte	4
	.word	(.L560-.L158)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L374-.L560)/2
	.byte	19,0,8,26,0,0

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   323  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   324  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   325  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.c	   326  #include "Dem_Cfg_MemMap.h"

	; Module end
