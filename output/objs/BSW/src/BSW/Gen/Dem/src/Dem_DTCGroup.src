	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc15652a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Dem\\src\\Dem_DTCGroup.src BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCGroup.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCGroup.c'

	
$TC16X
	
	.sdecl	'.text.Dem_DTCGroup.Dem_DtcGroupIdFromDtcGroupCode',code,cluster('Dem_DtcGroupIdFromDtcGroupCode')
	.sect	'.text.Dem_DTCGroup.Dem_DtcGroupIdFromDtcGroupCode'
	.align	2
	
	.global	Dem_DtcGroupIdFromDtcGroupCode

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	     1  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	     2  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	     3  #include "Dem_Dcm.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	     4  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	     5  #include "Dem_DTCGroup.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	     6  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	     7  #include "Dem_DTCs.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	     8  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	     9  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    10  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    11  DEM_ARRAY_DEFINE_CONST(Dem_DtcGroupParam, Dem_AllDTCGroupsParam, DEM_DTCGROUPID_ARRAYLENGTH, DEM_CFG_DTCGROUPPARAMS);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    12  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    13  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    14  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    15  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    16  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    17  DemControlDtcGroupType Dem_DtcGroupDisabledFlag = FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    18  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    19  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    20  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    21  /*-- DTC GROUP CODE-------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    22  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    23  DEM_INLINE void Dem_DtcGroupApplyDTCSetting(Dem_DTCGroupType DTCGroup, uint8 groupId, boolean newDtcSettingState)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    24  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    25      Dem_DtcIdListIterator dtcIt;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    26      Dem_boolean_least AnyDTCSettingDisabled = FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    27      Dem_DtcIdType LockCounter = 0;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    28  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    29      if (DTCGroup != DEM_DTC_GROUP_EMISSION_REL_DTCS)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    30      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    31          DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    32  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    33          for (Dem_DtcIdListIteratorNewFromDtcGroup(&dtcIt, groupId); Dem_DtcIdListIteratorIsValid(&dtcIt);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    34                  Dem_DtcIdListIteratorNext(&dtcIt))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    35          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    36              Dem_DtcSetDTCSetting(Dem_DtcIdListIteratorCurrent(&dtcIt), newDtcSettingState);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    37  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    38              /* Increment Lock and check if Lock for 'DEM_NUMBER_OF_DTCS_TO_PROCESS_PER_LOCK' DTCs are completed */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    39              LockCounter++;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    40              if (LockCounter >= DEM_NUMBER_OF_DTCS_TO_PROCESS_PER_LOCK)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    41              {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    42                  DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    43                  /*Resetting the counter to zero*/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    44                  LockCounter = 0;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    45                  DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    46              }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    47          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    48          DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    49          Dem_SetDtcGroupSettingFlag(newDtcSettingState);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    50      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    51      else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    52      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    53          Dem_DtcIdIterator dtcId = DEM_DTCIDITERATOR_NEW();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    54          /*
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    55           * looping through all DTCs and if DTCKind configured as DEM_DTC_KIND_EMISSION_REL_DTCS(OBD-relevant DTCs) shall be enabled or disabled.
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    56           * DTCgroup iterator function shall not be considered here because zeroth index is considered as INVALID
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    57           * and DEM_DTC_GROUP_EMISSION_REL_DTCS(0x000000) is not from configuration.
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    58           */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    59  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    60          DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    61  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    62          for (Dem_DtcIdIteratorNew(&dtcId); Dem_DtcIdIteratorIsValid(&dtcId); Dem_DtcIdIteratorNext(&dtcId))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    63          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    64              if (Dem_Cfg_Dtc_GetKind(Dem_DtcIdIteratorCurrent(&dtcId)) == DEM_DTC_KIND_EMISSION_REL_DTCS)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    65              {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    66                  Dem_DtcSetDTCSetting(Dem_DtcIdIteratorCurrent(&dtcId), newDtcSettingState);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    67  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    68                  /* Increment Lock and check if Lock for 'DEM_NUMBER_OF_DTCS_TO_PROCESS_PER_LOCK' DTCs are completed */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    69                  LockCounter++;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    70                  if (LockCounter >= DEM_NUMBER_OF_DTCS_TO_PROCESS_PER_LOCK)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    71                  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    72                      DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    73                      /*Resetting the counter to zero*/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    74                      LockCounter = 0;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    75                      DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    76                  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    77              }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    78  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    79              if ((!AnyDTCSettingDisabled) && (!Dem_DtcIsDTCSettingEnabled(Dem_DtcIdIteratorCurrent(&dtcId))))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    80              {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    81                  AnyDTCSettingDisabled = TRUE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    82              }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    83          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    84          DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    85          Dem_SetDtcGroupSettingFlag(AnyDTCSettingDisabled);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    86      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    87  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    88  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    89  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    90  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    91  Dem_DTCGroupIdType Dem_DtcGroupIdFromDtcGroupCode (Dem_DTCGroupType dtcGrpCode)
; Function Dem_DtcGroupIdFromDtcGroupCode
.L87:
Dem_DtcGroupIdFromDtcGroupCode:	.type	func
	sub.a	a10,#8
.L310:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    92  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    93     Dem_DtcGroupIdIterator dtcGroupId;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    94  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    95     for (Dem_DtcGroupIdIteratorNew(&dtcGroupId);
	lea	a15,[a10]0
.L270:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
	mov	d15,#1
.L458:
	st.w	[a15],d15
.L271:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    96          Dem_DtcGroupIdIteratorIsValid(&dtcGroupId);
	j	.L2

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    97          Dem_DtcGroupIdIteratorNext(&dtcGroupId))
.L3:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    98     {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    99        if (Dem_DtcGroupGetCode(Dem_DtcGroupIdIteratorCurrent(&dtcGroupId)) == dtcGrpCode)
	lea	a15,[a10]0
.L276:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
	ld.w	d15,[a15]
.L459:
	extr.u	d15,d15,#0,#8
.L460:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);      (inlined)
	j	.L4

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }      (inlined)
.L4:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     1  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     2  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     3  #ifndef DEM_DTCGROUP_H
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     4  #define DEM_DTCGROUP_H
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     5  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     6  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     7  #include "Dem_ClientBaseHandling.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     8  #include "Dem_ClientClearMachine.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     9  #include "Dem_Types.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    10  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    11  #include "Dem_Cfg_DTCs.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    12  #include "Dem_Cfg_DTC_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    13  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    14  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    15  #include "Dem_Cfg_DtcId.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    16  #include "Dem_Clear.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    17  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    18  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    19  #define DEM_DTCGROUPS_INIT(CODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    20  {   (CODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    21  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    22  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    23  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    24  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    25  	Dem_DTCGroupType dtcGroupCode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    26  } Dem_DtcGroupParam;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    27  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    28  typedef boolean DemControlDtcGroupType;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    29  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    30  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    31  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    32  extern DemControlDtcGroupType Dem_DtcGroupDisabledFlag;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    33  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    34  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    35  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    36  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    37  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    38  DEM_ARRAY_DECLARE_CONST(Dem_DtcGroupParam, Dem_AllDTCGroupsParam, DEM_DTCGROUPID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    39  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    41  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    42  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    43  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    44  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    45  Dem_DTCGroupIdType Dem_DtcGroupIdFromDtcGroupCode (Dem_DTCGroupType dtcGrpCode);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    46  void Dem_DtcsClearDtcInGroup(uint8 GroupId, Dem_DTCOriginType DTCOrigin, Dem_ClientClearMachineType *Dem_ClientClearMachinePtr);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    47  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    48  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    49  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    50  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    51  DEM_INLINE Dem_DTCGroupType Dem_DtcGroupGetCode (Dem_DTCGroupIdType dtcGroupId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    52  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    53  	return Dem_AllDTCGroupsParam[dtcGroupId].dtcGroupCode;
	movh.a	a15,#@his(Dem_AllDTCGroupsParam)
	lea	a15,[a15]@los(Dem_AllDTCGroupsParam)
.L461:
	addsc.a	a15,a15,d15,#2
.L462:
	ld.w	d15,[a15]
.L463:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    53  	return Dem_AllDTCGroupsParam[dtcGroupId].dtcGroupCode;      (inlined)
	j	.L5

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    54  }      (inlined)
.L5:
	jne	d15,d4,.L6
.L464:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   100        {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   101           return Dem_DtcGroupIdIteratorCurrent(&dtcGroupId);
	lea	a15,[a10]0
.L284:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
	ld.w	d15,[a15]
.L465:
	extr.u	d2,d15,#0,#8
.L466:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);      (inlined)
	j	.L7

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }      (inlined)
.L7:
	j	.L8
.L6:
	lea	a15,[a10]0
.L286:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
	ld.w	d15,[a15]
.L467:
	add	d15,#1
	st.w	[a15],d15
.L2:
	lea	a15,[a10]0
.L291:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
	ld.w	d15,[a15]
.L468:
	mov	d0,#1
.L469:
	ge.u	d15,d0,d15
.L470:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);      (inlined)
	j	.L9

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }      (inlined)
.L9:
	jne	d15,#0,.L3
.L471:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   102        }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   103     }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   104     return DEM_DTCGROUPID_INVALID;
	mov	d2,#0
.L472:
	j	.L10

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   105  }
.L10:
.L8:
	ret
.L266:
	
__Dem_DtcGroupIdFromDtcGroupCode_function_end:
	.size	Dem_DtcGroupIdFromDtcGroupCode,__Dem_DtcGroupIdFromDtcGroupCode_function_end-Dem_DtcGroupIdFromDtcGroupCode
.L112:
	; End of function
	
	.sdecl	'.text.Dem_DTCGroup.Dem_EnableDTCSetting',code,cluster('Dem_EnableDTCSetting')
	.sect	'.text.Dem_DTCGroup.Dem_EnableDTCSetting'
	.align	2
	
	.global	Dem_EnableDTCSetting

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   106  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   107  Dem_ReturnControlDTCSettingType Dem_EnableDTCSetting (Dem_DTCGroupType DTCGroup, Dem_DTCKindType DTCKind)
; Function Dem_EnableDTCSetting
.L89:
Dem_EnableDTCSetting:	.type	func
	sub.a	a10,#8
.L311:
	mov	d15,d4
.L313:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   108  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   109  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   110  	Dem_DTCGroupIdType DtcGroupId = Dem_DtcGroupIdFromDtcGroupCode(DTCGroup);
	mov	d4,d15
	call	Dem_DtcGroupIdFromDtcGroupCode
.L312:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   111  	DEM_UNUSED_PARAM(DTCKind);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   112  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   113  	/* Validate the DTCGroupcode when OBD project is enabled or Disabled */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   114  	if(DTCGroup != DEM_DTC_GROUP_EMISSION_REL_DTCS)
	jeq	d15,#0,.L11
.L226:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
	mov	d0,#1
.L403:
	ge.u	d0,d0,d2
.L404:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);      (inlined)
	j	.L12

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }      (inlined)
.L12:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   115  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   116  		if(!Dem_DtcGroupIdIsValid(DtcGroupId))
	jne	d0,#0,.L13
.L405:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   117  		{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   118  			return DEM_CONTROL_DTC_WRONG_DTCGROUP;
	mov	d2,#2
.L315:
	j	.L14
.L13:
.L11:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   119  		}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   120  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   121  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   122  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   123  #if(DEM_CFG_OBD == DEM_CFG_OBD_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   124  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   125  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   126  		if(DTCGroup == DEM_DTC_GROUP_EMISSION_REL_DTCS)
	jne	d15,#0,.L15
.L406:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   127  		{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   128  			return DEM_CONTROL_DTC_WRONG_DTCGROUP;
	mov	d2,#2
.L316:
	j	.L16
.L15:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   129  		}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   130  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   131  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   132  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   133  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   134  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   135  	Dem_DtcGroupApplyDTCSetting(DTCGroup, DtcGroupId, DEM_DTC_SETTING_ENABLED);
	mov	d8,d2
.L407:
	mov	d9,#0
.L228:
	mov	d11,#0
.L317:
	mov	d10,#0
.L318:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    29      if (DTCGroup != DEM_DTC_GROUP_EMISSION_REL_DTCS)      (inlined)
	jeq	d15,#0,.L17
.L408:
	lea	a15,[a10]0
.L235:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
	mov	d0,#1
.L409:
	ge.u	d15,d0,d2
.L314:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);      (inlined)
	j	.L18

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }      (inlined)
.L18:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   359  	if (!(Dem_DtcGroupIdIsValid(dtcGroup)))      (inlined)
	jne	d15,#0,.L19
.L410:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   315  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   316     it->it = &Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   317     it->end = &Dem_MapDtcIdToEventId[dtcid].mappingTable[Dem_MapDtcIdToEventId[dtcid].length];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   318  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   319  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   320  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   321  DEM_INLINE Dem_boolean_least Dem_EventIdListIteratorIsValid(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   322  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   324  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   326  DEM_INLINE void Dem_EventIdListIteratorNext(Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   327  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   328     (it->it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   329  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   331  DEM_INLINE Dem_EventIdType Dem_EventIdListIteratorCurrent(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   333     return (Dem_EventIdType)(*(it->it));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   337  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   338  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   339  /* ITERATOR for lists of DtcIds: loop over all Dtcs assigned to a dtcGroup */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   340  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   341  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   342  	Dem_DtcIdType it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   343  	Dem_DtcIdType end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   344  } Dem_DtcIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   345  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   346  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   347  	Dem_DtcIdType dtcStartIndex;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   348  	Dem_DtcIdType dtcEndIndex;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   349  } Dem_DtcGroupIdMapToDtcIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   350  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   351  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   352  extern const Dem_DtcGroupIdMapToDtcIdType Dem_DtcGroupIdMapToDtcId[DEM_DTCGROUPID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   353  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   354  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   355  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   357  DEM_INLINE void Dem_DtcIdListIteratorNewFromDtcGroup(Dem_DtcIdListIterator *it, Dem_DTCGroupIdType dtcGroup)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   358  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   359  	if (!(Dem_DtcGroupIdIsValid(dtcGroup)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   360  	{
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   361  		DEM_DET(DEM_DET_APIID_DTCGROUPIDIDLISTITERATOR,0);
	mov	d4,#54
	mov	d5,#0
	mov	d6,#197
	mov	d7,#0
	call	Det_ReportError

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   359  	if (!(Dem_DtcGroupIdIsValid(dtcGroup)))      (inlined)
.L19:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   362  	}
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   363  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   364  	it->it = Dem_DtcGroupIdMapToDtcId[dtcGroup].dtcStartIndex;
	movh.a	a2,#@his(Dem_DtcGroupIdMapToDtcId)
	lea	a2,[a2]@los(Dem_DtcGroupIdMapToDtcId)
.L411:
	addsc.a	a2,a2,d8,#2
.L412:
	ld.hu	d0,[a2]0
.L413:
	st.h	[a15],d0
.L414:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   365  	it->end = Dem_DtcGroupIdMapToDtcId[dtcGroup].dtcEndIndex;
	ld.hu	d15,[a2]2
.L415:
	st.h	[a10]2,d15
.L236:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    33          for (Dem_DtcIdListIteratorNewFromDtcGroup(&dtcIt, groupId); Dem_DtcIdListIteratorIsValid(&dtcIt);      (inlined)
	j	.L20

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    34                  Dem_DtcIdListIteratorNext(&dtcIt))      (inlined)
.L21:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   366  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   367  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   368  DEM_INLINE Dem_boolean_least Dem_DtcIdListIteratorIsValid(const Dem_DtcIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   369  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   370     return (it->it <= it->end);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   371  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   372  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   373  DEM_INLINE void Dem_DtcIdListIteratorNext(Dem_DtcIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   374  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   375     (it->it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   376  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   377  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   378  DEM_INLINE Dem_DtcIdType Dem_DtcIdListIteratorCurrent(const Dem_DtcIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   379  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   380     return (it->it);
	ld.hu	d4,[a10]0
.L416:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   380     return (it->it);      (inlined)
	j	.L22

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   381  }      (inlined)
.L22:
	mov	d5,d9
	call	Dem_DtcSetDTCSetting
.L417:
	add	d10,#1
.L418:
	seln	d10,d10,d10,#0

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    40              if (LockCounter >= DEM_NUMBER_OF_DTCS_TO_PROCESS_PER_LOCK)      (inlined)
.L23:
	lea	a15,[a10]0
.L240:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   315  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   316     it->it = &Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   317     it->end = &Dem_MapDtcIdToEventId[dtcid].mappingTable[Dem_MapDtcIdToEventId[dtcid].length];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   318  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   319  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   320  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   321  DEM_INLINE Dem_boolean_least Dem_EventIdListIteratorIsValid(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   322  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   324  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   326  DEM_INLINE void Dem_EventIdListIteratorNext(Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   327  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   328     (it->it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   329  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   331  DEM_INLINE Dem_EventIdType Dem_EventIdListIteratorCurrent(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   333     return (Dem_EventIdType)(*(it->it));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   337  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   338  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   339  /* ITERATOR for lists of DtcIds: loop over all Dtcs assigned to a dtcGroup */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   340  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   341  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   342  	Dem_DtcIdType it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   343  	Dem_DtcIdType end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   344  } Dem_DtcIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   345  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   346  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   347  	Dem_DtcIdType dtcStartIndex;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   348  	Dem_DtcIdType dtcEndIndex;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   349  } Dem_DtcGroupIdMapToDtcIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   350  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   351  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   352  extern const Dem_DtcGroupIdMapToDtcIdType Dem_DtcGroupIdMapToDtcId[DEM_DTCGROUPID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   353  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   354  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   355  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   357  DEM_INLINE void Dem_DtcIdListIteratorNewFromDtcGroup(Dem_DtcIdListIterator *it, Dem_DTCGroupIdType dtcGroup)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   358  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   359  	if (!(Dem_DtcGroupIdIsValid(dtcGroup)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   360  	{
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   361  		DEM_DET(DEM_DET_APIID_DTCGROUPIDIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   362  	}
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   363  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   364  	it->it = Dem_DtcGroupIdMapToDtcId[dtcGroup].dtcStartIndex;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   365  	it->end = Dem_DtcGroupIdMapToDtcId[dtcGroup].dtcEndIndex;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   366  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   367  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   368  DEM_INLINE Dem_boolean_least Dem_DtcIdListIteratorIsValid(const Dem_DtcIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   369  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   370     return (it->it <= it->end);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   371  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   372  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   373  DEM_INLINE void Dem_DtcIdListIteratorNext(Dem_DtcIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   374  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   375     (it->it)++;
	ld.hu	d15,[a10]0
.L419:
	add	d15,#1
	st.h	[a15],d15

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    33          for (Dem_DtcIdListIteratorNewFromDtcGroup(&dtcIt, groupId); Dem_DtcIdListIteratorIsValid(&dtcIt);      (inlined)
.L20:
	ld.hu	d15,[a10]0
.L420:
	ld.hu	d0,[a10]2
.L421:
	ge.u	d15,d0,d15
.L422:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   370     return (it->it <= it->end);      (inlined)
	j	.L24

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   371  }      (inlined)
.L24:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    33          for (Dem_DtcIdListIteratorNewFromDtcGroup(&dtcIt, groupId); Dem_DtcIdListIteratorIsValid(&dtcIt);      (inlined)
	jne	d15,#0,.L21
.L243:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     1  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     2  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     3  #ifndef DEM_DTCGROUP_H
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     4  #define DEM_DTCGROUP_H
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     5  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     6  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     7  #include "Dem_ClientBaseHandling.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     8  #include "Dem_ClientClearMachine.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     9  #include "Dem_Types.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    10  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    11  #include "Dem_Cfg_DTCs.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    12  #include "Dem_Cfg_DTC_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    13  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    14  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    15  #include "Dem_Cfg_DtcId.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    16  #include "Dem_Clear.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    17  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    18  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    19  #define DEM_DTCGROUPS_INIT(CODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    20  {   (CODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    21  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    22  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    23  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    24  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    25  	Dem_DTCGroupType dtcGroupCode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    26  } Dem_DtcGroupParam;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    27  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    28  typedef boolean DemControlDtcGroupType;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    29  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    30  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    31  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    32  extern DemControlDtcGroupType Dem_DtcGroupDisabledFlag;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    33  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    34  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    35  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    36  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    37  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    38  DEM_ARRAY_DECLARE_CONST(Dem_DtcGroupParam, Dem_AllDTCGroupsParam, DEM_DTCGROUPID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    39  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    41  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    42  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    43  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    44  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    45  Dem_DTCGroupIdType Dem_DtcGroupIdFromDtcGroupCode (Dem_DTCGroupType dtcGrpCode);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    46  void Dem_DtcsClearDtcInGroup(uint8 GroupId, Dem_DTCOriginType DTCOrigin, Dem_ClientClearMachineType *Dem_ClientClearMachinePtr);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    47  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    48  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    49  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    50  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    51  DEM_INLINE Dem_DTCGroupType Dem_DtcGroupGetCode (Dem_DTCGroupIdType dtcGroupId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    52  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    53  	return Dem_AllDTCGroupsParam[dtcGroupId].dtcGroupCode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    54  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    55  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    56  DEM_INLINE void Dem_SetDtcGroupSettingFlag(Dem_boolean_least DtcGroupDisabled)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    57  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    58      Dem_DtcGroupDisabledFlag = DtcGroupDisabled;
	movh.a	a15,#@his(Dem_DtcGroupDisabledFlag)
	lea	a15,[a15]@los(Dem_DtcGroupDisabledFlag)
.L423:
	st.b	[a15],d9
.L244:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    48          DEM_EXITLOCK_MON();      (inlined)
	j	.L25

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    29      if (DTCGroup != DEM_DTC_GROUP_EMISSION_REL_DTCS)      (inlined)
.L17:
	mov	d15,#1
.L319:
	st.w	[a10]4,d15
.L424:
	lea	a15,[a10]4
.L247:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
	mov	d0,#1
.L425:
	st.w	[a15],d0
.L248:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    62          for (Dem_DtcIdIteratorNew(&dtcId); Dem_DtcIdIteratorIsValid(&dtcId); Dem_DtcIdIteratorNext(&dtcId))      (inlined)
	j	.L26
.L27:
	lea	a15,[a10]4
.L250:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
	ld.w	d0,[a15]
.L426:
	extr.u	d15,d0,#0,#16
.L427:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);      (inlined)
	j	.L28

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }      (inlined)
.L28:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));      (inlined)
.L29:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     2  /********************************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     3  /*                                                                                                                  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     4  /* TOOL-GENERATED SOURCECODE, DO NOT CHANGE                                                                         */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     5  /*                                                                                                                  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     6  /********************************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     7  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     8  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     9  #ifndef DEM_CFG_DTC_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    10  #define DEM_CFG_DTC_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    12  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    13  #include "Dem_Cfg_DTCs.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    14  #include "Dem_Prv_Det.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    15  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    17  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    18  /*
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    19  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    20  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    21  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    22  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    23  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    24  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    26  #include "Dem_Lib.h"  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    27  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    28  /*
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    29  #define DEM_CFG_STOREWAITINGFORMONITORINGEVENT  FALSE
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    30  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING_OFF  STD_OFF
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    31  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING_ON   STD_ON
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    32  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING      DEM_CFG_DTCFILTER_EXTERNALPROCESSING_OFF
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    33  #define DEM_CFG_DTCSTATUS_AVAILABILITYMASK     0xFFu
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    34  #define DEM_CFG_DTC_TRANSLATION_TYPE           DEM_DTC_TRANSLATION_SAEJ1939_73
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    35  #define DEM_CFG_DTCSTATEMANGER_DTCS_PER_CYCLE   5u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    36  #define DEM_DTC_BP_STATE_SUPPRESSED             0u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    37  #define DEM_DTC_BP_GROUP_DTCSETTING_DISABLED    1u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    38  #define DEM_DTC_GROUP_DemGroupOfDTC_0_DTCS           0xFA0u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    39  #define DEM_DTC_GROUP_DemGroupOfDTC_1_DTCS           0x1388u  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    40  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    41  /* --------------------------------------------------- */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    42  /* DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED    */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    43  /* --------------------------------------------------- */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    44  // #define DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED   FALSE
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    45  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    47  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    48  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    49  	Dem_DtcCodeType DtcCode;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    50  	Dem_DTCSeverityType Severity;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    51  	Dem_DTCKindType Kind;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    52  	boolean DtcCode_Is_Index;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    53  	uint8 Func_Unit;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    54  	boolean Nv_Storage;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    55  } Dem_Cfg_DtcType;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    56  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    57  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    58  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    59  extern const Dem_Cfg_DtcType Dem_Cfg_Dtc[5];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    62  LOCAL_INLINE Dem_DTCKindType Dem_Cfg_Dtc_GetKind(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    65  	return Dem_Cfg_Dtc[indx].Kind;
	mul	d15,d15,#12
.L428:
	movh.a	a15,#@his(Dem_Cfg_Dtc)
	lea	a15,[a15]@los(Dem_Cfg_Dtc)
.L429:
	addsc.a	a15,a15,d15,#0
.L430:
	ld.bu	d15,[a15]5
.L431:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    65  	return Dem_Cfg_Dtc[indx].Kind;      (inlined)
	j	.L30

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    66  }      (inlined)
.L30:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    64              if (Dem_Cfg_Dtc_GetKind(Dem_DtcIdIteratorCurrent(&dtcId)) == DEM_DTC_KIND_EMISSION_REL_DTCS)      (inlined)
	jne	d15,#2,.L31
.L432:
	lea	a15,[a10]4
.L253:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
	ld.w	d15,[a15]
.L433:
	extr.u	d4,d15,#0,#16
.L434:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);      (inlined)
	j	.L32

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }      (inlined)
.L32:
	mov	d5,d9
	call	Dem_DtcSetDTCSetting
.L435:
	add	d10,#1
.L436:
	seln	d10,d10,d10,#0

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    70                  if (LockCounter >= DEM_NUMBER_OF_DTCS_TO_PROCESS_PER_LOCK)      (inlined)
.L33:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    64              if (Dem_Cfg_Dtc_GetKind(Dem_DtcIdIteratorCurrent(&dtcId)) == DEM_DTC_KIND_EMISSION_REL_DTCS)      (inlined)
.L31:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    79              if ((!AnyDTCSettingDisabled) && (!Dem_DtcIsDTCSettingEnabled(Dem_DtcIdIteratorCurrent(&dtcId))))      (inlined)
	jne	d11,#0,.L34
.L437:
	lea	a15,[a10]4
.L254:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
	ld.w	d15,[a15]
.L438:
	extr.u	d15,d15,#0,#16
.L439:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);      (inlined)
	j	.L35

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }      (inlined)
.L35:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     1  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     2  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     3  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     4  #ifndef DEM_DTCS_H
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     5  #define DEM_DTCS_H
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     6  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     7  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     8  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     9  #include "Dem_Types.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    10  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    11  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    12  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    13  #include "Dem_Cfg_DtcId.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    14  #include "Dem_Cfg_DTC_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    15  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    16  #include "Dem_Mapping.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    17  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    18  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    19  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    20  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    21  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    22  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    23  #include "Dem_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    24  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    25  #define DEM_DTC_SETTING_ENABLED     FALSE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    26  #define DEM_DTC_SETTING_DISABLED    TRUE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    27  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    28  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    29  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    30  	Dem_DtcStateType state;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    31  } Dem_DtcState;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    32  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    33  /******************************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    34  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    35  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    36  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    37  #define DEM_DTCS_NVSTORAGE_BP    2u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    38  #define DEM_DTCS_ALTERNATIVEDTC_FLAG_BP    3u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    39  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    40  #define DEM_DTCS_SEVERITYMASK    0xE0u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    41  #define DEM_DTCS_KINDMASK        0x03u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    42  #define DEM_DTCS_NVSTORAGEMASK   ((uint8)(1u<<DEM_DTCS_NVSTORAGE_BP))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    43  #define DEM_DTCS_ALTERNATIVEDTC_FLAG   ((uint8)(1u<<DEM_DTCS_ALTERNATIVEDTC_FLAG_BP))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    44  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    45  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    46  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    47  #define DEM_DTCS_INIT8(KIND, SEVERITY, NVSTORAGE, FUNC_UNIT, INDEXOF_ALTERNATIVE_DTCID) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    48  {   ((KIND) & (DEM_DTCS_KINDMASK))|((SEVERITY) & (DEM_DTCS_SEVERITYMASK)) | ((uint8)(((NVSTORAGE) & (0x01u)) << DEM_DTCS_NVSTORAGE_BP)) | ((uint8)((DEM_BOOL2BIT(INDEXOF_ALTERNATIVE_DTCID) & (0x01u)) << DEM_DTCS_ALTERNATIVEDTC_FLAG_BP)) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    49      ,(FUNC_UNIT) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    50  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    51  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    52  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    53  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    54  #define DEM_DTCS_INIT16(OBDCODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    55  {   (OBDCODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    56  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    57  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    58  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    59  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    60  #define DEM_DTCS_INIT32(CODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    61  {   (CODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    62  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    63  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    64  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    65  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    66  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    67     uint8 kind_severity_storage;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    68     uint8 Functional_Unit;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    69  } Dem_DtcParam8;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    70  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    71  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    72  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    73  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    74     uint16 ObdCode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    75  } Dem_DtcParam16;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    76  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    77  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    78  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    79  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    80     Dem_DtcCodeType code;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    81  } Dem_DtcParam32;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    82  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    83  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    84      Dem_DtcCodeType AltDtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    85      Dem_DtcCodeType Dtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    86  }Dem_DtcAltParam;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    87  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    88  /******************************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    89  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    90  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    91  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    92      DEM_ARRAY_DECLARE(Dem_DtcState, Dem_AllDTCsState, DEM_DTCID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    93  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    94  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    96  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    97  #define DEM_START_SEC_RAM_INIT
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    98  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    99  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   100      #if(DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   101      extern boolean Dem_AlternativeDTCEnabled;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   102      #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   103  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   104  #define DEM_STOP_SEC_RAM_INIT
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   105  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   106  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   107  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   108  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   109  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   110      #if (DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   111      DEM_ARRAY_DECLARE_CONST(Dem_DtcAltParam, Dem_AllAlternativeDTCsParam, DEM_ALTERNATIVE_DTCCODE_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   112      #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   113  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   114  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   115  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   116  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   117  /********DTC SUPPRESSION************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   118  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressed (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   119  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   120  #if (DEM_CFG_SUPPRESSION != DEM_NO_SUPPRESSION)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   121      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   122  #else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   123      DEM_UNUSED_PARAM(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   124      return FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   126  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   127  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   128  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressedDirectly (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   129  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   130  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   131      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED_DIRECTLY);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   132  #else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   133      DEM_UNUSED_PARAM(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   134      return FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   135  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   136  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   137  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   138  DEM_INLINE Dem_boolean_least Dem_DtcIsSupported (Dem_DtcIdType dtcID)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   139  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   141              && (!Dem_DtcIsSuppressed(dtcID))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   142      );
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   143  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   144  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   145  #if ((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   146  DEM_INLINE void Dem_DtcHandleEventSuppression (Dem_DtcIdType dtcId, Dem_boolean_least eventUnsuppressed)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   147  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   148      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   149  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   150      if (!Dem_DtcIsSuppressedDirectly(dtcId))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   151      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   152          Dem_EventIdListIterator it;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   153  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   154          if (!eventUnsuppressed)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   155          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   156              for (Dem_EventIdListIteratorNewFromDtcId(&it, dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   157                      Dem_EventIdListIteratorIsValid(&it);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   158                      Dem_EventIdListIteratorNext(&it))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   159              {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   160                  if ( !Dem_EvtIsSuppressed(Dem_EventIdListIteratorCurrent(&it)) )
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   161                  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   162                      eventUnsuppressed = TRUE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   163                      break;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   164                  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   165              }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   166          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   167  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   168          DEM_DTCSTATE_OVERWRITEBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED, !eventUnsuppressed);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   169      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   170  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   171  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   172  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   173  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   174  DEM_INLINE void Dem_DtcSuppressionApply (Dem_DtcIdType dtcId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   175  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   176  	DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   177  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   178  	DEM_DTCSTATE_OVERWRITEBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED_DIRECTLY, setBit);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   179  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   180  	if (setBit)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   181  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   182  	    DEM_DTCSTATE_SETBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   183  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   184  	else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   185  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   186  # if (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   187  	    Dem_DtcHandleEventSuppression (dtcId, FALSE);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   188  # else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   189  	    DEM_DTCSTATE_CLEARBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   190  # endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   191  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   192  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   193  	DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   194  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   195  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   196  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   197  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   198  DEM_INLINE Dem_boolean_least Dem_IsEventMemoryEntryExistForDTC (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   199  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   200  	uint8 DtcStatusByte = Dem_DtcStatusByteRetrieve(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   201  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   202  	/**
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   203  	 * Checking, whether TestFailed or TestFailedSLC bit is set
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   204  	 * (To make sure that corresponding DTC already processed and available in Event memory)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   205  	 */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   206  	if(Dem_ISO14229ByteIsTestFailed(DtcStatusByte) || Dem_ISO14229ByteIsTestFailedSLC(DtcStatusByte))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   207  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   208  		return TRUE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   209  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   210  	else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   211  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   212  		return FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   213  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   214  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   215  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   216  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   217  /***********************************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   218  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   219  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   220  /*-- DTC CODE ----------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   221  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   222  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   223  DEM_INLINE Dem_DtcCodeType Dem_GetDtcCode (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   224  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   225  #if (DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   226      if(Dem_Cfg_Dtc_GetDtcCode_Is_Index(dtcId))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   227      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   228          if (Dem_AlternativeDTCEnabled)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   229          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   230              return Dem_AllAlternativeDTCsParam[Dem_Cfg_Dtc_GetDtcCode(dtcId)].AltDtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   231          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   232          else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   233          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   234              return Dem_AllAlternativeDTCsParam[Dem_Cfg_Dtc_GetDtcCode(dtcId)].Dtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   235          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   236      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   237      else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   238  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   239      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   240          return Dem_Cfg_Dtc_GetDtcCode(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   241      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   242  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   243  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   244  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   245  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   246  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   247  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   248  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   249  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   250  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   251  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   252  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   253  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   254  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   255  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   256  Dem_DtcIdType Dem_DtcIdFromDtcCode (Dem_DtcCodeType dtcCode);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   257  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   258  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   259  /* Duplicate of Dem_GetDTCOfEvent to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   260  Std_ReturnType Dem_GetDTCOfEvent_GeneralEvtInfo(Dem_EventIdType EventId, Dem_DTCFormatType DTCFormat, uint32* DTCOfEvent);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   261  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   262  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   263  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   264  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   265  DEM_INLINE Dem_boolean_least Dem_EventUsesOrigin (Dem_EventIdType eventId, Dem_DTCOriginType origin)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   266  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   267  	if (   ((origin == DEM_DTC_ORIGIN_PRIMARY_MEMORY) && Dem_EvtParam_GetEventIsStoredInPrimary(eventId))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   268  			|| ((origin == DEM_DTC_ORIGIN_SECONDARY_MEMORY) && Dem_EvtParam_GetEventIsStoredInSecondary(eventId))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   269  			|| ((origin == DEM_DTC_ORIGIN_MIRROR_MEMORY) && Dem_EvtParam_GetEventIsStoredInMirror(eventId))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   270  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   271  #if (DEM_CFG_OBD != DEM_CFG_OBD_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   272  			|| ((origin == DEM_DTC_ORIGIN_PERMANENT_MEMORY) && (Dem_Cfg_Dtc_GetKind(Dem_DtcIdFromEventId(eventId)) == DEM_DTC_KIND_EMISSION_REL_DTCS))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   273  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   274  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   275  	)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   276  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   277  		return TRUE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   278  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   279  	return FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   280  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   281  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   282  DEM_INLINE Dem_boolean_least Dem_DtcUsesOrigin (Dem_DtcIdType dtcId, Dem_DTCOriginType origin)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   283  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   284      Dem_EventIdType eventId = Dem_DtcIdGetFirstEventId(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   285      return Dem_EventUsesOrigin(eventId, origin);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   286  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   287  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   288  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   289  /*************************Enable & DiableDTCGroup****************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   290  void Dem_DtcSetDTCSetting (Dem_DtcIdType dtcId, Dem_boolean_least setBit);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   291  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   292  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   293  DEM_INLINE Dem_boolean_least Dem_DtcIsDTCSettingEnabled(Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   294  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   295  	return (!(DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_GROUP_DTCSETTING_DISABLED)));
	movh.a	a15,#@his(Dem_AllDTCsState)
	lea	a15,[a15]@los(Dem_AllDTCsState)
.L440:
	addsc.a	a15,a15,d15,#0
.L441:
	ld.bu	d15,[a15]
.L442:
	mov	d0,#1
.L256:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L443:
	and	d15,#1
.L444:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L36

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L36:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L445:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L37

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L37:
	eq	d15,d15,#0
.L446:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   295  	return (!(DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_GROUP_DTCSETTING_DISABLED)));      (inlined)
	j	.L38

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   296  }      (inlined)
.L38:
	cmovn	d11,d15,#1

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    79              if ((!AnyDTCSettingDisabled) && (!Dem_DtcIsDTCSettingEnabled(Dem_DtcIdIteratorCurrent(&dtcId))))      (inlined)
.L39:
.L34:
	lea	a15,[a10]4
.L261:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
	ld.w	d15,[a15]
.L447:
	add	d15,#1
	st.w	[a15],d15

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    62          for (Dem_DtcIdIteratorNew(&dtcId); Dem_DtcIdIteratorIsValid(&dtcId); Dem_DtcIdIteratorNext(&dtcId))      (inlined)
.L26:
	lea	a15,[a10]4
.L263:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
	mov	d0,#0
.L448:
	ld.w	d15,[a15]
.L449:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));      (inlined)
	jeq	d15,#0,.L40
.L450:
	ge.u	d15,d15,#5
.L451:
	cmovn	d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));      (inlined)
.L41:
.L40:
	j	.L42

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }      (inlined)
.L42:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    62          for (Dem_DtcIdIteratorNew(&dtcId); Dem_DtcIdIteratorIsValid(&dtcId); Dem_DtcIdIteratorNext(&dtcId))      (inlined)
	jne	d0,#0,.L27
.L264:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     1  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     2  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     3  #ifndef DEM_DTCGROUP_H
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     4  #define DEM_DTCGROUP_H
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     5  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     6  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     7  #include "Dem_ClientBaseHandling.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     8  #include "Dem_ClientClearMachine.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     9  #include "Dem_Types.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    10  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    11  #include "Dem_Cfg_DTCs.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    12  #include "Dem_Cfg_DTC_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    13  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    14  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    15  #include "Dem_Cfg_DtcId.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    16  #include "Dem_Clear.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    17  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    18  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    19  #define DEM_DTCGROUPS_INIT(CODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    20  {   (CODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    21  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    22  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    23  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    24  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    25  	Dem_DTCGroupType dtcGroupCode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    26  } Dem_DtcGroupParam;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    27  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    28  typedef boolean DemControlDtcGroupType;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    29  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    30  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    31  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    32  extern DemControlDtcGroupType Dem_DtcGroupDisabledFlag;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    33  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    34  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    35  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    36  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    37  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    38  DEM_ARRAY_DECLARE_CONST(Dem_DtcGroupParam, Dem_AllDTCGroupsParam, DEM_DTCGROUPID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    39  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    41  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    42  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    43  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    44  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    45  Dem_DTCGroupIdType Dem_DtcGroupIdFromDtcGroupCode (Dem_DTCGroupType dtcGrpCode);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    46  void Dem_DtcsClearDtcInGroup(uint8 GroupId, Dem_DTCOriginType DTCOrigin, Dem_ClientClearMachineType *Dem_ClientClearMachinePtr);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    47  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    48  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    49  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    50  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    51  DEM_INLINE Dem_DTCGroupType Dem_DtcGroupGetCode (Dem_DTCGroupIdType dtcGroupId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    52  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    53  	return Dem_AllDTCGroupsParam[dtcGroupId].dtcGroupCode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    54  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    55  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    56  DEM_INLINE void Dem_SetDtcGroupSettingFlag(Dem_boolean_least DtcGroupDisabled)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    57  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    58      Dem_DtcGroupDisabledFlag = DtcGroupDisabled;
	movh.a	a15,#@his(Dem_DtcGroupDisabledFlag)
	lea	a15,[a15]@los(Dem_DtcGroupDisabledFlag)
.L452:
	st.b	[a15],d11

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    51      else      (inlined)
.L25:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   136  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   137  	return DEM_CONTROL_DTC_SETTING_OK;
	mov	d2,#0
.L453:
	j	.L43

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   138  }
.L43:
.L16:
.L14:
	ret
.L222:
	
__Dem_EnableDTCSetting_function_end:
	.size	Dem_EnableDTCSetting,__Dem_EnableDTCSetting_function_end-Dem_EnableDTCSetting
.L107:
	; End of function
	
	.sdecl	'.text.Dem_DTCGroup.Dem_DisableDTCSetting',code,cluster('Dem_DisableDTCSetting')
	.sect	'.text.Dem_DTCGroup.Dem_DisableDTCSetting'
	.align	2
	
	.global	Dem_DisableDTCSetting

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   139  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   140  Dem_ReturnControlDTCSettingType Dem_DisableDTCSetting (Dem_DTCGroupType DTCGroup, Dem_DTCKindType DTCKind)
; Function Dem_DisableDTCSetting
.L91:
Dem_DisableDTCSetting:	.type	func
	sub.a	a10,#8
.L320:
	mov	d15,d4
.L322:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   141  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   142  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   143  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   144  	Dem_DTCGroupIdType DtcGroupId = Dem_DtcGroupIdFromDtcGroupCode(DTCGroup);
	mov	d4,d15
	call	Dem_DtcGroupIdFromDtcGroupCode
.L321:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   145  	DEM_UNUSED_PARAM(DTCKind);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   146  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   147  	/* Validate the DTCGroupcode when OBD project is enabled or Disabled */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   148  	if(DTCGroup != DEM_DTC_GROUP_EMISSION_REL_DTCS)
	jeq	d15,#0,.L44
.L129:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
	mov	d0,#1
.L348:
	ge.u	d0,d0,d2
.L349:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);      (inlined)
	j	.L45

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }      (inlined)
.L45:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   149  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   150  		if(!Dem_DtcGroupIdIsValid(DtcGroupId))
	jne	d0,#0,.L46
.L350:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   151  		{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   152  			return DEM_CONTROL_DTC_WRONG_DTCGROUP;
	mov	d2,#2
.L324:
	j	.L47
.L46:
.L44:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   153  		}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   154  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   155  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   156  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   157  #if(DEM_CFG_OBD == DEM_CFG_OBD_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   158  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   159  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   160  		if(DTCGroup == DEM_DTC_GROUP_EMISSION_REL_DTCS)
	jne	d15,#0,.L48
.L351:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   161  		{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   162  			return DEM_CONTROL_DTC_WRONG_DTCGROUP;
	mov	d2,#2
.L325:
	j	.L49
.L48:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   163  		}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   164  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   165  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   166  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   167  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   168  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   169  	Dem_DtcGroupApplyDTCSetting(DTCGroup, DtcGroupId, DEM_DTC_SETTING_DISABLED);
	mov	d8,d2
.L352:
	mov	d9,#1
.L134:
	mov	d11,#0
.L326:
	mov	d10,#0
.L327:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    29      if (DTCGroup != DEM_DTC_GROUP_EMISSION_REL_DTCS)      (inlined)
	jeq	d15,#0,.L50
.L353:
	lea	a15,[a10]0
.L148:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
	mov	d0,#1
.L354:
	ge.u	d15,d0,d2
.L323:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);      (inlined)
	j	.L51

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }      (inlined)
.L51:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   359  	if (!(Dem_DtcGroupIdIsValid(dtcGroup)))      (inlined)
	jne	d15,#0,.L52
.L355:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   315  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   316     it->it = &Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   317     it->end = &Dem_MapDtcIdToEventId[dtcid].mappingTable[Dem_MapDtcIdToEventId[dtcid].length];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   318  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   319  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   320  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   321  DEM_INLINE Dem_boolean_least Dem_EventIdListIteratorIsValid(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   322  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   324  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   326  DEM_INLINE void Dem_EventIdListIteratorNext(Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   327  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   328     (it->it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   329  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   331  DEM_INLINE Dem_EventIdType Dem_EventIdListIteratorCurrent(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   333     return (Dem_EventIdType)(*(it->it));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   337  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   338  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   339  /* ITERATOR for lists of DtcIds: loop over all Dtcs assigned to a dtcGroup */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   340  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   341  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   342  	Dem_DtcIdType it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   343  	Dem_DtcIdType end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   344  } Dem_DtcIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   345  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   346  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   347  	Dem_DtcIdType dtcStartIndex;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   348  	Dem_DtcIdType dtcEndIndex;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   349  } Dem_DtcGroupIdMapToDtcIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   350  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   351  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   352  extern const Dem_DtcGroupIdMapToDtcIdType Dem_DtcGroupIdMapToDtcId[DEM_DTCGROUPID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   353  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   354  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   355  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   357  DEM_INLINE void Dem_DtcIdListIteratorNewFromDtcGroup(Dem_DtcIdListIterator *it, Dem_DTCGroupIdType dtcGroup)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   358  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   359  	if (!(Dem_DtcGroupIdIsValid(dtcGroup)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   360  	{
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   361  		DEM_DET(DEM_DET_APIID_DTCGROUPIDIDLISTITERATOR,0);
	mov	d4,#54
	mov	d5,#0
	mov	d6,#197
	mov	d7,#0
	call	Det_ReportError

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   359  	if (!(Dem_DtcGroupIdIsValid(dtcGroup)))      (inlined)
.L52:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   362  	}
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   363  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   364  	it->it = Dem_DtcGroupIdMapToDtcId[dtcGroup].dtcStartIndex;
	movh.a	a2,#@his(Dem_DtcGroupIdMapToDtcId)
	lea	a2,[a2]@los(Dem_DtcGroupIdMapToDtcId)
.L356:
	addsc.a	a2,a2,d8,#2
.L357:
	ld.hu	d0,[a2]0
.L358:
	st.h	[a15],d0
.L359:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   365  	it->end = Dem_DtcGroupIdMapToDtcId[dtcGroup].dtcEndIndex;
	ld.hu	d15,[a2]2
.L360:
	st.h	[a10]2,d15
.L149:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    33          for (Dem_DtcIdListIteratorNewFromDtcGroup(&dtcIt, groupId); Dem_DtcIdListIteratorIsValid(&dtcIt);      (inlined)
	j	.L53

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    34                  Dem_DtcIdListIteratorNext(&dtcIt))      (inlined)
.L54:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   366  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   367  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   368  DEM_INLINE Dem_boolean_least Dem_DtcIdListIteratorIsValid(const Dem_DtcIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   369  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   370     return (it->it <= it->end);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   371  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   372  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   373  DEM_INLINE void Dem_DtcIdListIteratorNext(Dem_DtcIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   374  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   375     (it->it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   376  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   377  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   378  DEM_INLINE Dem_DtcIdType Dem_DtcIdListIteratorCurrent(const Dem_DtcIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   379  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   380     return (it->it);
	ld.hu	d4,[a10]0
.L361:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   380     return (it->it);      (inlined)
	j	.L55

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   381  }      (inlined)
.L55:
	mov	d5,d9
	call	Dem_DtcSetDTCSetting
.L362:
	add	d10,#1
.L363:
	seln	d10,d10,d10,#0

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    40              if (LockCounter >= DEM_NUMBER_OF_DTCS_TO_PROCESS_PER_LOCK)      (inlined)
.L56:
	lea	a15,[a10]0
.L160:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   315  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   316     it->it = &Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   317     it->end = &Dem_MapDtcIdToEventId[dtcid].mappingTable[Dem_MapDtcIdToEventId[dtcid].length];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   318  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   319  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   320  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   321  DEM_INLINE Dem_boolean_least Dem_EventIdListIteratorIsValid(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   322  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   324  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   326  DEM_INLINE void Dem_EventIdListIteratorNext(Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   327  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   328     (it->it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   329  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   331  DEM_INLINE Dem_EventIdType Dem_EventIdListIteratorCurrent(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   333     return (Dem_EventIdType)(*(it->it));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   337  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   338  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   339  /* ITERATOR for lists of DtcIds: loop over all Dtcs assigned to a dtcGroup */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   340  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   341  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   342  	Dem_DtcIdType it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   343  	Dem_DtcIdType end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   344  } Dem_DtcIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   345  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   346  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   347  	Dem_DtcIdType dtcStartIndex;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   348  	Dem_DtcIdType dtcEndIndex;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   349  } Dem_DtcGroupIdMapToDtcIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   350  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   351  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   352  extern const Dem_DtcGroupIdMapToDtcIdType Dem_DtcGroupIdMapToDtcId[DEM_DTCGROUPID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   353  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   354  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   355  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   357  DEM_INLINE void Dem_DtcIdListIteratorNewFromDtcGroup(Dem_DtcIdListIterator *it, Dem_DTCGroupIdType dtcGroup)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   358  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   359  	if (!(Dem_DtcGroupIdIsValid(dtcGroup)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   360  	{
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   361  		DEM_DET(DEM_DET_APIID_DTCGROUPIDIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   362  	}
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   363  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   364  	it->it = Dem_DtcGroupIdMapToDtcId[dtcGroup].dtcStartIndex;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   365  	it->end = Dem_DtcGroupIdMapToDtcId[dtcGroup].dtcEndIndex;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   366  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   367  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   368  DEM_INLINE Dem_boolean_least Dem_DtcIdListIteratorIsValid(const Dem_DtcIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   369  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   370     return (it->it <= it->end);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   371  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   372  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   373  DEM_INLINE void Dem_DtcIdListIteratorNext(Dem_DtcIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   374  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   375     (it->it)++;
	ld.hu	d15,[a10]0
.L364:
	add	d15,#1
	st.h	[a15],d15

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    33          for (Dem_DtcIdListIteratorNewFromDtcGroup(&dtcIt, groupId); Dem_DtcIdListIteratorIsValid(&dtcIt);      (inlined)
.L53:
	ld.hu	d15,[a10]0
.L365:
	ld.hu	d0,[a10]2
.L366:
	ge.u	d15,d0,d15
.L367:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   370     return (it->it <= it->end);      (inlined)
	j	.L57

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   371  }      (inlined)
.L57:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    33          for (Dem_DtcIdListIteratorNewFromDtcGroup(&dtcIt, groupId); Dem_DtcIdListIteratorIsValid(&dtcIt);      (inlined)
	jne	d15,#0,.L54
.L169:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     1  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     2  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     3  #ifndef DEM_DTCGROUP_H
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     4  #define DEM_DTCGROUP_H
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     5  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     6  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     7  #include "Dem_ClientBaseHandling.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     8  #include "Dem_ClientClearMachine.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     9  #include "Dem_Types.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    10  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    11  #include "Dem_Cfg_DTCs.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    12  #include "Dem_Cfg_DTC_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    13  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    14  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    15  #include "Dem_Cfg_DtcId.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    16  #include "Dem_Clear.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    17  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    18  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    19  #define DEM_DTCGROUPS_INIT(CODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    20  {   (CODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    21  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    22  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    23  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    24  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    25  	Dem_DTCGroupType dtcGroupCode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    26  } Dem_DtcGroupParam;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    27  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    28  typedef boolean DemControlDtcGroupType;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    29  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    30  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    31  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    32  extern DemControlDtcGroupType Dem_DtcGroupDisabledFlag;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    33  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    34  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    35  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    36  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    37  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    38  DEM_ARRAY_DECLARE_CONST(Dem_DtcGroupParam, Dem_AllDTCGroupsParam, DEM_DTCGROUPID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    39  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    41  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    42  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    43  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    44  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    45  Dem_DTCGroupIdType Dem_DtcGroupIdFromDtcGroupCode (Dem_DTCGroupType dtcGrpCode);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    46  void Dem_DtcsClearDtcInGroup(uint8 GroupId, Dem_DTCOriginType DTCOrigin, Dem_ClientClearMachineType *Dem_ClientClearMachinePtr);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    47  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    48  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    49  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    50  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    51  DEM_INLINE Dem_DTCGroupType Dem_DtcGroupGetCode (Dem_DTCGroupIdType dtcGroupId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    52  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    53  	return Dem_AllDTCGroupsParam[dtcGroupId].dtcGroupCode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    54  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    55  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    56  DEM_INLINE void Dem_SetDtcGroupSettingFlag(Dem_boolean_least DtcGroupDisabled)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    57  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    58      Dem_DtcGroupDisabledFlag = DtcGroupDisabled;
	movh.a	a15,#@his(Dem_DtcGroupDisabledFlag)
	lea	a15,[a15]@los(Dem_DtcGroupDisabledFlag)
.L368:
	st.b	[a15],d9
.L170:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    48          DEM_EXITLOCK_MON();      (inlined)
	j	.L58

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    29      if (DTCGroup != DEM_DTC_GROUP_EMISSION_REL_DTCS)      (inlined)
.L50:
	mov	d15,#1
.L328:
	st.w	[a10]4,d15
.L369:
	lea	a15,[a10]4
.L178:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
	mov	d0,#1
.L370:
	st.w	[a15],d0
.L179:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    62          for (Dem_DtcIdIteratorNew(&dtcId); Dem_DtcIdIteratorIsValid(&dtcId); Dem_DtcIdIteratorNext(&dtcId))      (inlined)
	j	.L59
.L60:
	lea	a15,[a10]4
.L184:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
	ld.w	d0,[a15]
.L371:
	extr.u	d15,d0,#0,#16
.L372:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);      (inlined)
	j	.L61

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }      (inlined)
.L61:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));      (inlined)
.L62:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     2  /********************************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     3  /*                                                                                                                  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     4  /* TOOL-GENERATED SOURCECODE, DO NOT CHANGE                                                                         */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     5  /*                                                                                                                  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     6  /********************************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     7  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     8  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     9  #ifndef DEM_CFG_DTC_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    10  #define DEM_CFG_DTC_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    12  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    13  #include "Dem_Cfg_DTCs.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    14  #include "Dem_Prv_Det.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    15  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    17  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    18  /*
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    19  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    20  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    21  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    22  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    23  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    24  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    26  #include "Dem_Lib.h"  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    27  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    28  /*
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    29  #define DEM_CFG_STOREWAITINGFORMONITORINGEVENT  FALSE
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    30  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING_OFF  STD_OFF
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    31  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING_ON   STD_ON
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    32  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING      DEM_CFG_DTCFILTER_EXTERNALPROCESSING_OFF
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    33  #define DEM_CFG_DTCSTATUS_AVAILABILITYMASK     0xFFu
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    34  #define DEM_CFG_DTC_TRANSLATION_TYPE           DEM_DTC_TRANSLATION_SAEJ1939_73
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    35  #define DEM_CFG_DTCSTATEMANGER_DTCS_PER_CYCLE   5u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    36  #define DEM_DTC_BP_STATE_SUPPRESSED             0u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    37  #define DEM_DTC_BP_GROUP_DTCSETTING_DISABLED    1u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    38  #define DEM_DTC_GROUP_DemGroupOfDTC_0_DTCS           0xFA0u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    39  #define DEM_DTC_GROUP_DemGroupOfDTC_1_DTCS           0x1388u  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    40  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    41  /* --------------------------------------------------- */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    42  /* DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED    */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    43  /* --------------------------------------------------- */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    44  // #define DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED   FALSE
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    45  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    47  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    48  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    49  	Dem_DtcCodeType DtcCode;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    50  	Dem_DTCSeverityType Severity;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    51  	Dem_DTCKindType Kind;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    52  	boolean DtcCode_Is_Index;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    53  	uint8 Func_Unit;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    54  	boolean Nv_Storage;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    55  } Dem_Cfg_DtcType;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    56  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    57  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    58  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    59  extern const Dem_Cfg_DtcType Dem_Cfg_Dtc[5];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    62  LOCAL_INLINE Dem_DTCKindType Dem_Cfg_Dtc_GetKind(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    65  	return Dem_Cfg_Dtc[indx].Kind;
	mul	d15,d15,#12
.L373:
	movh.a	a15,#@his(Dem_Cfg_Dtc)
	lea	a15,[a15]@los(Dem_Cfg_Dtc)
.L374:
	addsc.a	a15,a15,d15,#0
.L375:
	ld.bu	d15,[a15]5
.L376:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    65  	return Dem_Cfg_Dtc[indx].Kind;      (inlined)
	j	.L63

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    66  }      (inlined)
.L63:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    64              if (Dem_Cfg_Dtc_GetKind(Dem_DtcIdIteratorCurrent(&dtcId)) == DEM_DTC_KIND_EMISSION_REL_DTCS)      (inlined)
	jne	d15,#2,.L64
.L377:
	lea	a15,[a10]4
.L192:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
	ld.w	d15,[a15]
.L378:
	extr.u	d4,d15,#0,#16
.L379:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);      (inlined)
	j	.L65

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }      (inlined)
.L65:
	mov	d5,d9
	call	Dem_DtcSetDTCSetting
.L380:
	add	d10,#1
.L381:
	seln	d10,d10,d10,#0

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    70                  if (LockCounter >= DEM_NUMBER_OF_DTCS_TO_PROCESS_PER_LOCK)      (inlined)
.L66:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    64              if (Dem_Cfg_Dtc_GetKind(Dem_DtcIdIteratorCurrent(&dtcId)) == DEM_DTC_KIND_EMISSION_REL_DTCS)      (inlined)
.L64:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    79              if ((!AnyDTCSettingDisabled) && (!Dem_DtcIsDTCSettingEnabled(Dem_DtcIdIteratorCurrent(&dtcId))))      (inlined)
	jne	d11,#0,.L67
.L382:
	lea	a15,[a10]4
.L193:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
	ld.w	d15,[a15]
.L383:
	extr.u	d15,d15,#0,#16
.L384:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);      (inlined)
	j	.L68

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }      (inlined)
.L68:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     1  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     2  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     3  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     4  #ifndef DEM_DTCS_H
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     5  #define DEM_DTCS_H
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     6  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     7  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     8  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     9  #include "Dem_Types.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    10  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    11  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    12  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    13  #include "Dem_Cfg_DtcId.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    14  #include "Dem_Cfg_DTC_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    15  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    16  #include "Dem_Mapping.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    17  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    18  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    19  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    20  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    21  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    22  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    23  #include "Dem_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    24  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    25  #define DEM_DTC_SETTING_ENABLED     FALSE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    26  #define DEM_DTC_SETTING_DISABLED    TRUE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    27  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    28  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    29  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    30  	Dem_DtcStateType state;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    31  } Dem_DtcState;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    32  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    33  /******************************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    34  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    35  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    36  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    37  #define DEM_DTCS_NVSTORAGE_BP    2u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    38  #define DEM_DTCS_ALTERNATIVEDTC_FLAG_BP    3u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    39  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    40  #define DEM_DTCS_SEVERITYMASK    0xE0u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    41  #define DEM_DTCS_KINDMASK        0x03u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    42  #define DEM_DTCS_NVSTORAGEMASK   ((uint8)(1u<<DEM_DTCS_NVSTORAGE_BP))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    43  #define DEM_DTCS_ALTERNATIVEDTC_FLAG   ((uint8)(1u<<DEM_DTCS_ALTERNATIVEDTC_FLAG_BP))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    44  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    45  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    46  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    47  #define DEM_DTCS_INIT8(KIND, SEVERITY, NVSTORAGE, FUNC_UNIT, INDEXOF_ALTERNATIVE_DTCID) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    48  {   ((KIND) & (DEM_DTCS_KINDMASK))|((SEVERITY) & (DEM_DTCS_SEVERITYMASK)) | ((uint8)(((NVSTORAGE) & (0x01u)) << DEM_DTCS_NVSTORAGE_BP)) | ((uint8)((DEM_BOOL2BIT(INDEXOF_ALTERNATIVE_DTCID) & (0x01u)) << DEM_DTCS_ALTERNATIVEDTC_FLAG_BP)) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    49      ,(FUNC_UNIT) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    50  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    51  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    52  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    53  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    54  #define DEM_DTCS_INIT16(OBDCODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    55  {   (OBDCODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    56  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    57  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    58  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    59  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    60  #define DEM_DTCS_INIT32(CODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    61  {   (CODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    62  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    63  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    64  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    65  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    66  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    67     uint8 kind_severity_storage;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    68     uint8 Functional_Unit;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    69  } Dem_DtcParam8;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    70  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    71  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    72  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    73  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    74     uint16 ObdCode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    75  } Dem_DtcParam16;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    76  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    77  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    78  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    79  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    80     Dem_DtcCodeType code;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    81  } Dem_DtcParam32;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    82  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    83  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    84      Dem_DtcCodeType AltDtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    85      Dem_DtcCodeType Dtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    86  }Dem_DtcAltParam;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    87  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    88  /******************************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    89  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    90  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    91  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    92      DEM_ARRAY_DECLARE(Dem_DtcState, Dem_AllDTCsState, DEM_DTCID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    93  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    94  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    96  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    97  #define DEM_START_SEC_RAM_INIT
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    98  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    99  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   100      #if(DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   101      extern boolean Dem_AlternativeDTCEnabled;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   102      #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   103  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   104  #define DEM_STOP_SEC_RAM_INIT
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   105  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   106  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   107  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   108  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   109  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   110      #if (DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   111      DEM_ARRAY_DECLARE_CONST(Dem_DtcAltParam, Dem_AllAlternativeDTCsParam, DEM_ALTERNATIVE_DTCCODE_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   112      #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   113  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   114  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   115  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   116  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   117  /********DTC SUPPRESSION************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   118  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressed (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   119  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   120  #if (DEM_CFG_SUPPRESSION != DEM_NO_SUPPRESSION)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   121      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   122  #else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   123      DEM_UNUSED_PARAM(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   124      return FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   126  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   127  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   128  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressedDirectly (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   129  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   130  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   131      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED_DIRECTLY);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   132  #else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   133      DEM_UNUSED_PARAM(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   134      return FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   135  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   136  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   137  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   138  DEM_INLINE Dem_boolean_least Dem_DtcIsSupported (Dem_DtcIdType dtcID)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   139  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   141              && (!Dem_DtcIsSuppressed(dtcID))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   142      );
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   143  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   144  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   145  #if ((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   146  DEM_INLINE void Dem_DtcHandleEventSuppression (Dem_DtcIdType dtcId, Dem_boolean_least eventUnsuppressed)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   147  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   148      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   149  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   150      if (!Dem_DtcIsSuppressedDirectly(dtcId))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   151      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   152          Dem_EventIdListIterator it;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   153  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   154          if (!eventUnsuppressed)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   155          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   156              for (Dem_EventIdListIteratorNewFromDtcId(&it, dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   157                      Dem_EventIdListIteratorIsValid(&it);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   158                      Dem_EventIdListIteratorNext(&it))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   159              {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   160                  if ( !Dem_EvtIsSuppressed(Dem_EventIdListIteratorCurrent(&it)) )
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   161                  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   162                      eventUnsuppressed = TRUE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   163                      break;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   164                  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   165              }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   166          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   167  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   168          DEM_DTCSTATE_OVERWRITEBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED, !eventUnsuppressed);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   169      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   170  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   171  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   172  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   173  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   174  DEM_INLINE void Dem_DtcSuppressionApply (Dem_DtcIdType dtcId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   175  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   176  	DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   177  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   178  	DEM_DTCSTATE_OVERWRITEBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED_DIRECTLY, setBit);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   179  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   180  	if (setBit)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   181  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   182  	    DEM_DTCSTATE_SETBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   183  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   184  	else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   185  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   186  # if (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   187  	    Dem_DtcHandleEventSuppression (dtcId, FALSE);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   188  # else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   189  	    DEM_DTCSTATE_CLEARBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   190  # endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   191  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   192  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   193  	DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   194  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   195  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   196  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   197  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   198  DEM_INLINE Dem_boolean_least Dem_IsEventMemoryEntryExistForDTC (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   199  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   200  	uint8 DtcStatusByte = Dem_DtcStatusByteRetrieve(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   201  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   202  	/**
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   203  	 * Checking, whether TestFailed or TestFailedSLC bit is set
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   204  	 * (To make sure that corresponding DTC already processed and available in Event memory)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   205  	 */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   206  	if(Dem_ISO14229ByteIsTestFailed(DtcStatusByte) || Dem_ISO14229ByteIsTestFailedSLC(DtcStatusByte))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   207  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   208  		return TRUE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   209  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   210  	else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   211  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   212  		return FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   213  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   214  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   215  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   216  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   217  /***********************************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   218  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   219  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   220  /*-- DTC CODE ----------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   221  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   222  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   223  DEM_INLINE Dem_DtcCodeType Dem_GetDtcCode (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   224  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   225  #if (DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   226      if(Dem_Cfg_Dtc_GetDtcCode_Is_Index(dtcId))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   227      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   228          if (Dem_AlternativeDTCEnabled)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   229          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   230              return Dem_AllAlternativeDTCsParam[Dem_Cfg_Dtc_GetDtcCode(dtcId)].AltDtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   231          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   232          else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   233          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   234              return Dem_AllAlternativeDTCsParam[Dem_Cfg_Dtc_GetDtcCode(dtcId)].Dtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   235          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   236      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   237      else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   238  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   239      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   240          return Dem_Cfg_Dtc_GetDtcCode(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   241      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   242  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   243  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   244  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   245  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   246  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   247  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   248  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   249  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   250  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   251  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   252  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   253  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   254  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   255  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   256  Dem_DtcIdType Dem_DtcIdFromDtcCode (Dem_DtcCodeType dtcCode);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   257  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   258  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   259  /* Duplicate of Dem_GetDTCOfEvent to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   260  Std_ReturnType Dem_GetDTCOfEvent_GeneralEvtInfo(Dem_EventIdType EventId, Dem_DTCFormatType DTCFormat, uint32* DTCOfEvent);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   261  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   262  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   263  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   264  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   265  DEM_INLINE Dem_boolean_least Dem_EventUsesOrigin (Dem_EventIdType eventId, Dem_DTCOriginType origin)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   266  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   267  	if (   ((origin == DEM_DTC_ORIGIN_PRIMARY_MEMORY) && Dem_EvtParam_GetEventIsStoredInPrimary(eventId))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   268  			|| ((origin == DEM_DTC_ORIGIN_SECONDARY_MEMORY) && Dem_EvtParam_GetEventIsStoredInSecondary(eventId))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   269  			|| ((origin == DEM_DTC_ORIGIN_MIRROR_MEMORY) && Dem_EvtParam_GetEventIsStoredInMirror(eventId))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   270  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   271  #if (DEM_CFG_OBD != DEM_CFG_OBD_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   272  			|| ((origin == DEM_DTC_ORIGIN_PERMANENT_MEMORY) && (Dem_Cfg_Dtc_GetKind(Dem_DtcIdFromEventId(eventId)) == DEM_DTC_KIND_EMISSION_REL_DTCS))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   273  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   274  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   275  	)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   276  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   277  		return TRUE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   278  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   279  	return FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   280  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   281  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   282  DEM_INLINE Dem_boolean_least Dem_DtcUsesOrigin (Dem_DtcIdType dtcId, Dem_DTCOriginType origin)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   283  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   284      Dem_EventIdType eventId = Dem_DtcIdGetFirstEventId(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   285      return Dem_EventUsesOrigin(eventId, origin);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   286  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   287  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   288  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   289  /*************************Enable & DiableDTCGroup****************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   290  void Dem_DtcSetDTCSetting (Dem_DtcIdType dtcId, Dem_boolean_least setBit);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   291  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   292  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   293  DEM_INLINE Dem_boolean_least Dem_DtcIsDTCSettingEnabled(Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   294  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   295  	return (!(DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_GROUP_DTCSETTING_DISABLED)));
	movh.a	a15,#@his(Dem_AllDTCsState)
	lea	a15,[a15]@los(Dem_AllDTCsState)
.L385:
	addsc.a	a15,a15,d15,#0
.L386:
	ld.bu	d15,[a15]
.L387:
	mov	d0,#1
.L199:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L388:
	and	d15,#1
.L389:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L69

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L69:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L390:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L70

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L70:
	eq	d15,d15,#0
.L391:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   295  	return (!(DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_GROUP_DTCSETTING_DISABLED)));      (inlined)
	j	.L71

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   296  }      (inlined)
.L71:
	cmovn	d11,d15,#1

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    79              if ((!AnyDTCSettingDisabled) && (!Dem_DtcIsDTCSettingEnabled(Dem_DtcIdIteratorCurrent(&dtcId))))      (inlined)
.L72:
.L67:
	lea	a15,[a10]4
.L212:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
	ld.w	d15,[a15]
.L392:
	add	d15,#1
	st.w	[a15],d15

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    62          for (Dem_DtcIdIteratorNew(&dtcId); Dem_DtcIdIteratorIsValid(&dtcId); Dem_DtcIdIteratorNext(&dtcId))      (inlined)
.L59:
	lea	a15,[a10]4
.L217:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
	mov	d0,#0
.L393:
	ld.w	d15,[a15]
.L394:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));      (inlined)
	jeq	d15,#0,.L73
.L395:
	ge.u	d15,d15,#5
.L396:
	cmovn	d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));      (inlined)
.L74:
.L73:
	j	.L75

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }      (inlined)
.L75:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    62          for (Dem_DtcIdIteratorNew(&dtcId); Dem_DtcIdIteratorIsValid(&dtcId); Dem_DtcIdIteratorNext(&dtcId))      (inlined)
	jne	d0,#0,.L60
.L218:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     1  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     2  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     3  #ifndef DEM_DTCGROUP_H
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     4  #define DEM_DTCGROUP_H
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     5  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     6  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     7  #include "Dem_ClientBaseHandling.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     8  #include "Dem_ClientClearMachine.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	     9  #include "Dem_Types.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    10  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    11  #include "Dem_Cfg_DTCs.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    12  #include "Dem_Cfg_DTC_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    13  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    14  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    15  #include "Dem_Cfg_DtcId.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    16  #include "Dem_Clear.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    17  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    18  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    19  #define DEM_DTCGROUPS_INIT(CODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    20  {   (CODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    21  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    22  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    23  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    24  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    25  	Dem_DTCGroupType dtcGroupCode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    26  } Dem_DtcGroupParam;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    27  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    28  typedef boolean DemControlDtcGroupType;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    29  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    30  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    31  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    32  extern DemControlDtcGroupType Dem_DtcGroupDisabledFlag;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    33  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    34  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    35  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    36  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    37  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    38  DEM_ARRAY_DECLARE_CONST(Dem_DtcGroupParam, Dem_AllDTCGroupsParam, DEM_DTCGROUPID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    39  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    41  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    42  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    43  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    44  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    45  Dem_DTCGroupIdType Dem_DtcGroupIdFromDtcGroupCode (Dem_DTCGroupType dtcGrpCode);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    46  void Dem_DtcsClearDtcInGroup(uint8 GroupId, Dem_DTCOriginType DTCOrigin, Dem_ClientClearMachineType *Dem_ClientClearMachinePtr);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    47  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    48  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    49  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    50  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    51  DEM_INLINE Dem_DTCGroupType Dem_DtcGroupGetCode (Dem_DTCGroupIdType dtcGroupId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    52  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    53  	return Dem_AllDTCGroupsParam[dtcGroupId].dtcGroupCode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    54  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    55  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    56  DEM_INLINE void Dem_SetDtcGroupSettingFlag(Dem_boolean_least DtcGroupDisabled)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    57  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.h	    58      Dem_DtcGroupDisabledFlag = DtcGroupDisabled;
	movh.a	a15,#@his(Dem_DtcGroupDisabledFlag)
	lea	a15,[a15]@los(Dem_DtcGroupDisabledFlag)
.L397:
	st.b	[a15],d11

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	    51      else      (inlined)
.L58:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   170  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   171  	return DEM_CONTROL_DTC_SETTING_OK;
	mov	d2,#0
.L398:
	j	.L76

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   172  }
.L76:
.L49:
.L47:
	ret
.L123:
	
__Dem_DisableDTCSetting_function_end:
	.size	Dem_DisableDTCSetting,__Dem_DisableDTCSetting_function_end-Dem_DisableDTCSetting
.L102:
	; End of function
	
	.sdecl	'.text.Dem_DTCGroup.Dem_DtcsClearDtcInGroup',code,cluster('Dem_DtcsClearDtcInGroup')
	.sect	'.text.Dem_DTCGroup.Dem_DtcsClearDtcInGroup'
	.align	2
	
	.global	Dem_DtcsClearDtcInGroup

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   173  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   174  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   175  void Dem_DtcsClearDtcInGroup(uint8 GroupId, Dem_DTCOriginType DTCOrigin, Dem_ClientClearMachineType *Dem_ClientClearMachinePtr)
; Function Dem_DtcsClearDtcInGroup
.L93:
Dem_DtcsClearDtcInGroup:	.type	func
	mov	e8,d5,d4
	mov.aa	a15,a4
.L331:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   176  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   177      Dem_DtcIdType dtcId;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   178  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   179      /* Check whether the Clear is requested newly */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   180      if (Dem_ClientClearMachinePtr->IsNewClearRequest)
	ld.bu	d15,[a15]2
.L477:
	jeq	d15,#0,.L77
.L478:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   181      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   182          Dem_DtcIdListIteratorNewFromDtcGroup(&(Dem_ClientClearMachinePtr->DtcIt), GroupId);
	mov.aa	a12,a15
	add.a	a12,#6
.L301:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
	mov	d15,#1
.L332:
	ge.u	d15,d15,d8
.L333:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);      (inlined)
	j	.L78

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }      (inlined)
.L78:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   359  	if (!(Dem_DtcGroupIdIsValid(dtcGroup)))      (inlined)
	jne	d15,#0,.L79
.L479:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   315  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   316     it->it = &Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   317     it->end = &Dem_MapDtcIdToEventId[dtcid].mappingTable[Dem_MapDtcIdToEventId[dtcid].length];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   318  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   319  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   320  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   321  DEM_INLINE Dem_boolean_least Dem_EventIdListIteratorIsValid(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   322  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   324  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   326  DEM_INLINE void Dem_EventIdListIteratorNext(Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   327  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   328     (it->it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   329  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   331  DEM_INLINE Dem_EventIdType Dem_EventIdListIteratorCurrent(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   333     return (Dem_EventIdType)(*(it->it));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   337  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   338  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   339  /* ITERATOR for lists of DtcIds: loop over all Dtcs assigned to a dtcGroup */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   340  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   341  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   342  	Dem_DtcIdType it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   343  	Dem_DtcIdType end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   344  } Dem_DtcIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   345  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   346  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   347  	Dem_DtcIdType dtcStartIndex;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   348  	Dem_DtcIdType dtcEndIndex;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   349  } Dem_DtcGroupIdMapToDtcIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   350  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   351  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   352  extern const Dem_DtcGroupIdMapToDtcIdType Dem_DtcGroupIdMapToDtcId[DEM_DTCGROUPID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   353  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   354  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   355  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   357  DEM_INLINE void Dem_DtcIdListIteratorNewFromDtcGroup(Dem_DtcIdListIterator *it, Dem_DTCGroupIdType dtcGroup)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   358  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   359  	if (!(Dem_DtcGroupIdIsValid(dtcGroup)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   360  	{
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   361  		DEM_DET(DEM_DET_APIID_DTCGROUPIDIDLISTITERATOR,0);
	mov	d4,#54
.L330:
	mov	d5,#0
.L329:
	mov	d6,#197
	mov	d7,#0
	call	Det_ReportError

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   359  	if (!(Dem_DtcGroupIdIsValid(dtcGroup)))      (inlined)
.L79:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   362  	}
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   363  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   364  	it->it = Dem_DtcGroupIdMapToDtcId[dtcGroup].dtcStartIndex;
	movh.a	a2,#@his(Dem_DtcGroupIdMapToDtcId)
	lea	a2,[a2]@los(Dem_DtcGroupIdMapToDtcId)
.L334:
	addsc.a	a2,a2,d8,#2
.L335:
	ld.hu	d15,[a2]0
.L480:
	st.h	[a12],d15
.L481:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   365  	it->end = Dem_DtcGroupIdMapToDtcId[dtcGroup].dtcEndIndex;
	ld.hu	d15,[a2]2
.L482:
	st.h	[a15]8,d15
.L77:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   183      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   184  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   185      while (Dem_DtcIdListIteratorIsValid(&(Dem_ClientClearMachinePtr->DtcIt)))
	j	.L80
.L81:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   315  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   316     it->it = &Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   317     it->end = &Dem_MapDtcIdToEventId[dtcid].mappingTable[Dem_MapDtcIdToEventId[dtcid].length];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   318  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   319  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   320  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   321  DEM_INLINE Dem_boolean_least Dem_EventIdListIteratorIsValid(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   322  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   324  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   326  DEM_INLINE void Dem_EventIdListIteratorNext(Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   327  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   328     (it->it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   329  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   331  DEM_INLINE Dem_EventIdType Dem_EventIdListIteratorCurrent(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   333     return (Dem_EventIdType)(*(it->it));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   337  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   338  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   339  /* ITERATOR for lists of DtcIds: loop over all Dtcs assigned to a dtcGroup */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   340  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   341  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   342  	Dem_DtcIdType it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   343  	Dem_DtcIdType end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   344  } Dem_DtcIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   345  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   346  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   347  	Dem_DtcIdType dtcStartIndex;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   348  	Dem_DtcIdType dtcEndIndex;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   349  } Dem_DtcGroupIdMapToDtcIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   350  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   351  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   352  extern const Dem_DtcGroupIdMapToDtcIdType Dem_DtcGroupIdMapToDtcId[DEM_DTCGROUPID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   353  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   354  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   355  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   357  DEM_INLINE void Dem_DtcIdListIteratorNewFromDtcGroup(Dem_DtcIdListIterator *it, Dem_DTCGroupIdType dtcGroup)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   358  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   359  	if (!(Dem_DtcGroupIdIsValid(dtcGroup)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   360  	{
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   361  		DEM_DET(DEM_DET_APIID_DTCGROUPIDIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   362  	}
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   363  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   364  	it->it = Dem_DtcGroupIdMapToDtcId[dtcGroup].dtcStartIndex;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   365  	it->end = Dem_DtcGroupIdMapToDtcId[dtcGroup].dtcEndIndex;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   366  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   367  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   368  DEM_INLINE Dem_boolean_least Dem_DtcIdListIteratorIsValid(const Dem_DtcIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   369  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   370     return (it->it <= it->end);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   371  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   372  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   373  DEM_INLINE void Dem_DtcIdListIteratorNext(Dem_DtcIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   374  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   375     (it->it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   376  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   377  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   378  DEM_INLINE Dem_DtcIdType Dem_DtcIdListIteratorCurrent(const Dem_DtcIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   379  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   380     return (it->it);
	ld.hu	d4,[a15]6
.L483:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   380     return (it->it);      (inlined)
	j	.L82

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   381  }      (inlined)
.L82:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   186      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   187          dtcId = Dem_DtcIdListIteratorCurrent(&(Dem_ClientClearMachinePtr->DtcIt));
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   188          Dem_ClearSingleDTC(dtcId, DTCOrigin, Dem_ClientClearMachinePtr);
	mov	d5,d9
.L336:
	mov.aa	a4,a15
.L338:
	call	Dem_ClearSingleDTC
.L337:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   189          /* Check whether the number of events processed reached the Max limit */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   190          if (Dem_ClientClearMachinePtr->IsClearInterrupted)
	ld.bu	d15,[a15]3
.L484:
	jeq	d15,#0,.L83
.L485:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   191          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   192              return;
	j	.L84
.L83:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   193          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   194          Dem_DtcIdListIteratorNext(&(Dem_ClientClearMachinePtr->DtcIt));
	mov.aa	a2,a15
	add.a	a2,#6
.L306:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   315  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   316     it->it = &Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   317     it->end = &Dem_MapDtcIdToEventId[dtcid].mappingTable[Dem_MapDtcIdToEventId[dtcid].length];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   318  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   319  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   320  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   321  DEM_INLINE Dem_boolean_least Dem_EventIdListIteratorIsValid(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   322  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   324  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   326  DEM_INLINE void Dem_EventIdListIteratorNext(Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   327  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   328     (it->it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   329  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   331  DEM_INLINE Dem_EventIdType Dem_EventIdListIteratorCurrent(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   333     return (Dem_EventIdType)(*(it->it));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   337  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   338  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   339  /* ITERATOR for lists of DtcIds: loop over all Dtcs assigned to a dtcGroup */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   340  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   341  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   342  	Dem_DtcIdType it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   343  	Dem_DtcIdType end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   344  } Dem_DtcIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   345  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   346  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   347  	Dem_DtcIdType dtcStartIndex;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   348  	Dem_DtcIdType dtcEndIndex;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   349  } Dem_DtcGroupIdMapToDtcIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   350  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   351  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   352  extern const Dem_DtcGroupIdMapToDtcIdType Dem_DtcGroupIdMapToDtcId[DEM_DTCGROUPID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   353  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   354  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   355  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   357  DEM_INLINE void Dem_DtcIdListIteratorNewFromDtcGroup(Dem_DtcIdListIterator *it, Dem_DTCGroupIdType dtcGroup)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   358  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   359  	if (!(Dem_DtcGroupIdIsValid(dtcGroup)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   360  	{
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   361  		DEM_DET(DEM_DET_APIID_DTCGROUPIDIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   362  	}
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   363  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   364  	it->it = Dem_DtcGroupIdMapToDtcId[dtcGroup].dtcStartIndex;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   365  	it->end = Dem_DtcGroupIdMapToDtcId[dtcGroup].dtcEndIndex;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   366  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   367  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   368  DEM_INLINE Dem_boolean_least Dem_DtcIdListIteratorIsValid(const Dem_DtcIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   369  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   370     return (it->it <= it->end);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   371  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   372  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   373  DEM_INLINE void Dem_DtcIdListIteratorNext(Dem_DtcIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   374  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   375     (it->it)++;
	ld.hu	d15,[a15]6
.L486:
	add	d15,#1
	st.h	[a2],d15
.L80:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   315  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   316     it->it = &Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   317     it->end = &Dem_MapDtcIdToEventId[dtcid].mappingTable[Dem_MapDtcIdToEventId[dtcid].length];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   318  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   319  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   320  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   321  DEM_INLINE Dem_boolean_least Dem_EventIdListIteratorIsValid(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   322  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   324  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   326  DEM_INLINE void Dem_EventIdListIteratorNext(Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   327  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   328     (it->it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   329  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   331  DEM_INLINE Dem_EventIdType Dem_EventIdListIteratorCurrent(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   333     return (Dem_EventIdType)(*(it->it));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   337  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   338  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   339  /* ITERATOR for lists of DtcIds: loop over all Dtcs assigned to a dtcGroup */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   340  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   341  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   342  	Dem_DtcIdType it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   343  	Dem_DtcIdType end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   344  } Dem_DtcIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   345  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   346  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   347  	Dem_DtcIdType dtcStartIndex;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   348  	Dem_DtcIdType dtcEndIndex;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   349  } Dem_DtcGroupIdMapToDtcIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   350  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   351  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   352  extern const Dem_DtcGroupIdMapToDtcIdType Dem_DtcGroupIdMapToDtcId[DEM_DTCGROUPID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   353  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   354  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   355  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   357  DEM_INLINE void Dem_DtcIdListIteratorNewFromDtcGroup(Dem_DtcIdListIterator *it, Dem_DTCGroupIdType dtcGroup)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   358  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   359  	if (!(Dem_DtcGroupIdIsValid(dtcGroup)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   360  	{
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   361  		DEM_DET(DEM_DET_APIID_DTCGROUPIDIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   362  	}
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   363  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   364  	it->it = Dem_DtcGroupIdMapToDtcId[dtcGroup].dtcStartIndex;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   365  	it->end = Dem_DtcGroupIdMapToDtcId[dtcGroup].dtcEndIndex;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   366  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   367  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   368  DEM_INLINE Dem_boolean_least Dem_DtcIdListIteratorIsValid(const Dem_DtcIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   369  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   370     return (it->it <= it->end);
	ld.hu	d15,[a15]6
.L487:
	ld.hu	d0,[a15]8
.L488:
	ge.u	d15,d0,d15
.L489:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   370     return (it->it <= it->end);      (inlined)
	j	.L85

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   371  }      (inlined)
.L85:
	jne	d15,#0,.L81

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   195      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   196  }
.L84:
	ret
.L295:
	
__Dem_DtcsClearDtcInGroup_function_end:
	.size	Dem_DtcsClearDtcInGroup,__Dem_DtcsClearDtcInGroup_function_end-Dem_DtcsClearDtcInGroup
.L117:
	; End of function
	
	.sdecl	'.rodata.Dem_DTCGroup.Dem_AllDTCGroupsParam',data,rom,cluster('Dem_AllDTCGroupsParam')
	.sect	'.rodata.Dem_DTCGroup.Dem_AllDTCGroupsParam'
	.global	Dem_AllDTCGroupsParam
	.align	4
Dem_AllDTCGroupsParam:	.type	object
	.size	Dem_AllDTCGroupsParam,8
	.space	4
	.word	16777215
	.sdecl	'.data.Dem_DTCGroup.Dem_DtcGroupDisabledFlag',data,cluster('Dem_DtcGroupDisabledFlag')
	.sect	'.data.Dem_DTCGroup.Dem_DtcGroupDisabledFlag'
	.global	Dem_DtcGroupDisabledFlag
Dem_DtcGroupDisabledFlag:	.type	object
	.size	Dem_DtcGroupDisabledFlag,1
	.space	1
	.calls	'Dem_EnableDTCSetting','Dem_DtcGroupIdFromDtcGroupCode'
	.calls	'Dem_EnableDTCSetting','Det_ReportError'
	.calls	'Dem_EnableDTCSetting','Dem_DtcSetDTCSetting'
	.calls	'Dem_DisableDTCSetting','Dem_DtcGroupIdFromDtcGroupCode'
	.calls	'Dem_DisableDTCSetting','Det_ReportError'
	.calls	'Dem_DisableDTCSetting','Dem_DtcSetDTCSetting'
	.calls	'Dem_DtcsClearDtcInGroup','Det_ReportError'
	.calls	'Dem_DtcsClearDtcInGroup','Dem_ClearSingleDTC'
	.calls	'Dem_DtcGroupIdFromDtcGroupCode','',8
	.calls	'Dem_EnableDTCSetting','',8
	.calls	'Dem_DisableDTCSetting','',8
	.extern	Det_ReportError
	.extern	Dem_DtcGroupIdMapToDtcId
	.extern	Dem_Cfg_Dtc
	.extern	Dem_ClearSingleDTC
	.extern	Dem_AllDTCsState
	.extern	Dem_DtcSetDTCSetting
	.calls	'Dem_DtcsClearDtcInGroup','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L95:
	.word	23727
	.half	3
	.word	.L96
	.byte	4
.L94:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCGroup.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L97
.L124:
	.byte	2
	.byte	'unsigned int',0,4,7,3
	.byte	'rba_BswSrv_ByteOrderSwap32',0,3,1,125,21
	.word	142
	.byte	1,1,4
	.byte	'Input_u32',0,1,125,55
	.word	142
	.byte	5,0
.L145:
	.byte	2
	.byte	'unsigned short int',0,2,7,3
	.byte	'rba_BswSrv_ByteOrderSwap16',0,3,1,150,1,21
	.word	216
	.byte	1,1,4
	.byte	'Input_u16',0,1,150,1,55
	.word	216
	.byte	5,0
.L122:
	.byte	2
	.byte	'unsigned char',0,1,8,3
	.byte	'Dem_LibGetParamUI8',0,3,2,36,18
	.word	298
	.byte	1,1,4
	.byte	'parameter',0,2,36,44
	.word	298
	.byte	5,0,3
	.byte	'Dem_LibGetParamBool',0,3,2,41,20
	.word	298
	.byte	1,1,4
	.byte	'parameter',0,2,41,49
	.word	298
	.byte	5,0,6
	.word	216
	.byte	7
	.word	416
	.byte	8
	.byte	'Dem_ClientResultType_setResult',0,3,3,27,17,1,1,4
	.byte	'result',0,3,27,79
	.word	421
	.byte	4
	.byte	'request',0,3,27,109
	.word	216
	.byte	4
	.byte	'newResult',0,3,27,133,1
	.word	298
	.byte	5,0,6
	.word	216
	.byte	7
	.word	516
	.byte	8
	.byte	'Dem_ClientRequestType_setRequest',0,3,3,65,17,1,1,4
	.byte	'request',0,3,65,82
	.word	521
	.byte	4
	.byte	'newRequest',0,3,65,97
	.word	298
	.byte	5,0,7
	.word	142
	.byte	8
	.byte	'Dem_ClientSelectionType_invalidateSelectionResult',0,3,3,151,1,17,1,1,4
	.byte	'selection',0,3,151,1,93
	.word	603
	.byte	5,0,3
	.byte	'Dem_ClientSelectionType_getTypeOfSelection',0,3,3,168,1,18
	.word	298
	.byte	1,1,4
	.byte	'selection',0,3,168,1,86
	.word	142
	.byte	5,0,3
	.byte	'Dem_isDtcIdValid',0,3,4,152,1,30
	.word	298
	.byte	1,1,4
	.byte	'id',0,4,152,1,62
	.word	216
	.byte	5,0,3
	.byte	'Dem_DtcIdFromEventId',0,3,4,158,1,27
	.word	216
	.byte	1,1,4
	.byte	'id',0,4,158,1,65
	.word	216
	.byte	5,0,3
	.byte	'Dem_DtcIdGetEventId',0,3,4,166,1,28
	.word	216
	.byte	1,1,4
	.byte	'dtcid',0,4,166,1,63
	.word	216
	.byte	5,0,3
	.byte	'Dem_DtcIdGetFirstEventId',0,3,4,174,1,28
	.word	216
	.byte	1,1,4
	.byte	'dtcid',0,4,174,1,68
	.word	216
	.byte	9,5,0,0
.L175:
	.byte	2
	.byte	'unsigned long int',0,4,7,7
	.word	958
.L177:
	.byte	8
	.byte	'Dem_DtcIdIteratorNew',0,3,4,202,1,17,1,1
.L180:
	.byte	4
	.byte	'it',0,4,202,1,57
	.word	979
.L182:
	.byte	5,0,10
	.word	958
	.byte	7
	.word	1027
.L216:
	.byte	3
	.byte	'Dem_DtcIdIteratorIsValid',0,3,4,207,1,30
	.word	298
	.byte	1,1
.L219:
	.byte	4
	.byte	'it',0,4,207,1,80
	.word	1032
.L221:
	.byte	5,0
.L211:
	.byte	8
	.byte	'Dem_DtcIdIteratorNext',0,3,4,212,1,17,1,1
.L213:
	.byte	4
	.byte	'it',0,4,212,1,58
	.word	979
.L215:
	.byte	5,0
.L183:
	.byte	3
	.byte	'Dem_DtcIdIteratorCurrent',0,3,4,217,1,26
	.word	216
	.byte	1,1
.L185:
	.byte	4
	.byte	'it',0,4,217,1,76
	.word	1032
.L187:
	.byte	5,0,7
	.word	958
.L269:
	.byte	8
	.byte	'Dem_DtcGroupIdIteratorNew',0,3,4,232,1,17,1,1
.L272:
	.byte	4
	.byte	'it',0,4,232,1,67
	.word	1183
.L274:
	.byte	5,0,10
	.word	958
	.byte	7
	.word	1236
.L290:
	.byte	3
	.byte	'Dem_DtcGroupIdIteratorIsValid',0,3,4,237,1,30
	.word	298
	.byte	1,1
.L292:
	.byte	4
	.byte	'it',0,4,237,1,90
	.word	1241
.L294:
	.byte	5,0
.L285:
	.byte	8
	.byte	'Dem_DtcGroupIdIteratorNext',0,3,4,242,1,17,1,1
.L287:
	.byte	4
	.byte	'it',0,4,242,1,68
	.word	1183
.L289:
	.byte	5,0
.L275:
	.byte	3
	.byte	'Dem_DtcGroupIdIteratorCurrent',0,3,4,247,1,31
	.word	298
	.byte	1,1
.L277:
	.byte	4
	.byte	'it',0,4,247,1,91
	.word	1241
.L279:
	.byte	5,0
.L128:
	.byte	3
	.byte	'Dem_DtcGroupIdIsValid',0,3,4,252,1,30
	.word	298
	.byte	1,1
.L130:
	.byte	4
	.byte	'dtcGroupID',0,4,252,1,72
	.word	298
.L132:
	.byte	5,0,10
	.word	216
	.byte	7
	.word	1463
	.byte	11,4,171,2,9,8,12
	.byte	'it',0
	.word	1468
	.byte	4,2,35,0,12
	.byte	'end',0
	.word	1468
	.byte	4,2,35,4,0,7
	.word	1473
	.byte	8
	.byte	'Dem_EventIdListIteratorNewFromDtcId',0,3,4,177,2,17,1,1,4
	.byte	'it',0,4,177,2,78
	.word	1505
	.byte	4
	.byte	'dtcid',0,4,177,2,96
	.word	216
	.byte	9,5,0,0,10
	.word	1473
	.byte	7
	.word	1585
	.byte	3
	.byte	'Dem_EventIdListIteratorIsValid',0,3,4,193,2,30
	.word	298
	.byte	1,1,4
	.byte	'it',0,4,193,2,92
	.word	1590
	.byte	5,0,8
	.byte	'Dem_EventIdListIteratorNext',0,3,4,198,2,17,1,1,4
	.byte	'it',0,4,198,2,70
	.word	1505
	.byte	5,0,3
	.byte	'Dem_EventIdListIteratorCurrent',0,3,4,203,2,28
	.word	216
	.byte	1,1,4
	.byte	'it',0,4,203,2,90
	.word	1590
	.byte	5,0
.L142:
	.byte	11,4,213,2,9,4,12
	.byte	'it',0
	.word	216
	.byte	2,2,35,0,12
	.byte	'end',0
	.word	216
	.byte	2,2,35,2,0,7
	.word	1759
.L147:
	.byte	8
	.byte	'Dem_DtcIdListIteratorNewFromDtcGroup',0,3,4,229,2,17,1,1
.L150:
	.byte	4
	.byte	'it',0,4,229,2,77
	.word	1791
.L152:
	.byte	4
	.byte	'dtcGroup',0,4,229,2,100
	.word	298
.L154:
	.byte	9,5,0,0,10
	.word	1759
	.byte	7
	.word	1875
.L164:
	.byte	3
	.byte	'Dem_DtcIdListIteratorIsValid',0,3,4,240,2,30
	.word	298
	.byte	1,1
.L165:
	.byte	4
	.byte	'it',0,4,240,2,88
	.word	1880
.L167:
	.byte	5,0
.L159:
	.byte	8
	.byte	'Dem_DtcIdListIteratorNext',0,3,4,245,2,17,1,1
.L161:
	.byte	4
	.byte	'it',0,4,245,2,66
	.word	1791
.L163:
	.byte	5,0
.L155:
	.byte	3
	.byte	'Dem_DtcIdListIteratorCurrent',0,3,4,250,2,26
	.word	216
	.byte	1,1
.L156:
	.byte	4
	.byte	'it',0,4,250,2,84
	.word	1880
.L158:
	.byte	5,0
.L188:
	.byte	3
	.byte	'Dem_Cfg_Dtc_GetKind',0,3,5,62,30
	.word	298
	.byte	1,1
.L189:
	.byte	4
	.byte	'indx',0,5,62,64
	.word	216
.L191:
	.byte	5,0,3
	.byte	'Dem_Cfg_Dtc_GetDtcCode',0,3,5,99,30
	.word	142
	.byte	1,1,4
	.byte	'indx',0,5,99,67
	.word	216
	.byte	5,0,7
	.word	298
	.byte	8
	.byte	'rba_DiagLib_Bit8SetBit',0,3,6,36,19,1,1,4
	.byte	'buffer',0,6,36,49
	.word	2138
	.byte	4
	.byte	'bit_position',0,6,36,63
	.word	298
	.byte	5,0,8
	.byte	'rba_DiagLib_Bit8ClearBit',0,3,6,42,19,1,1,4
	.byte	'buffer',0,6,42,51
	.word	2138
	.byte	4
	.byte	'bit_position',0,6,42,65
	.word	298
	.byte	5,0,8
	.byte	'rba_DiagLib_Bit8OverwriteBit',0,3,6,48,19,1,1,4
	.byte	'buffer',0,6,48,55
	.word	2138
	.byte	4
	.byte	'bit_position',0,6,48,69
	.word	298
	.byte	4
	.byte	'will_bit_be_set',0,6,48,91
	.word	298
	.byte	9,5,5,0,0
.L205:
	.byte	3
	.byte	'rba_DiagLib_Bit8GetSingleBit',0,3,6,60,20
	.word	298
	.byte	1,1
.L206:
	.byte	4
	.byte	'value',0,6,60,55
	.word	298
.L208:
	.byte	4
	.byte	'bit_position',0,6,60,68
	.word	298
.L210:
	.byte	5,0
.L198:
	.byte	3
	.byte	'rba_DiagLib_Bit8IsBitSet',0,3,6,64,22
	.word	298
	.byte	1,1
.L200:
	.byte	4
	.byte	'value',0,6,64,53
	.word	298
.L202:
	.byte	4
	.byte	'bit_position',0,6,64,66
	.word	298
.L204:
	.byte	9,5,0,0,3
	.byte	'rba_DiagLib_Bit8GetBits',0,3,6,69,20
	.word	298
	.byte	1,1,4
	.byte	'value',0,6,69,50
	.word	298
	.byte	4
	.byte	'bit_position',0,6,69,63
	.word	298
	.byte	4
	.byte	'number_of_bits',0,6,69,83
	.word	298
	.byte	5,0,8
	.byte	'rba_DiagLib_Bit8ClearBits',0,3,6,77,19,1,1,4
	.byte	'value',0,6,77,52
	.word	2138
	.byte	4
	.byte	'bit_position',0,6,77,65
	.word	298
	.byte	4
	.byte	'number_of_bits',0,6,77,85
	.word	298
	.byte	5,0,8
	.byte	'rba_DiagLib_Bit8OverwriteBits',0,3,6,83,19,1,1,4
	.byte	'value',0,6,83,56
	.word	2138
	.byte	4
	.byte	'bit_position',0,6,83,69
	.word	298
	.byte	4
	.byte	'number_of_bits',0,6,83,89
	.word	298
	.byte	4
	.byte	'newValue',0,6,83,111
	.word	298
	.byte	9,5,0,0,7
	.word	216
	.byte	8
	.byte	'rba_DiagLib_Bit16SetBit',0,3,7,36,19,1,1,4
	.byte	'buffer',0,7,36,51
	.word	2838
	.byte	4
	.byte	'bit_position',0,7,36,65
	.word	298
	.byte	5,0,8
	.byte	'rba_DiagLib_Bit16ClearBit',0,3,7,42,19,1,1,4
	.byte	'buffer',0,7,42,53
	.word	2838
	.byte	4
	.byte	'bit_position',0,7,42,67
	.word	298
	.byte	5,0,3
	.byte	'rba_DiagLib_Bit16GetSingleBit',0,3,7,60,21
	.word	216
	.byte	1,1,4
	.byte	'value',0,7,60,58
	.word	216
	.byte	4
	.byte	'bit_position',0,7,60,71
	.word	298
	.byte	5,0,3
	.byte	'rba_DiagLib_Bit16IsBitSet',0,3,7,65,22
	.word	298
	.byte	1,1,4
	.byte	'value',0,7,65,55
	.word	216
	.byte	4
	.byte	'bit_position',0,7,65,68
	.word	298
	.byte	9,5,0,0,3
	.byte	'rba_DiagLib_Bit16GetBits',0,3,7,70,21
	.word	216
	.byte	1,1,4
	.byte	'value',0,7,70,53
	.word	216
	.byte	4
	.byte	'bit_position',0,7,70,66
	.word	298
	.byte	4
	.byte	'number_of_bits',0,7,70,86
	.word	298
	.byte	5,0,8
	.byte	'rba_DiagLib_Bit16ClearBits',0,3,7,78,19,1,1,4
	.byte	'value',0,7,78,54
	.word	2838
	.byte	4
	.byte	'bit_position',0,7,78,67
	.word	298
	.byte	4
	.byte	'number_of_bits',0,7,78,87
	.word	298
	.byte	5,0,7
	.word	142
	.byte	8
	.byte	'rba_DiagLib_Bit32SetBit',0,3,8,36,19,1,1,4
	.byte	'buffer',0,8,36,51
	.word	3327
	.byte	4
	.byte	'bit_position',0,8,36,65
	.word	298
	.byte	5,0,8
	.byte	'rba_DiagLib_Bit32ClearBit',0,3,8,42,19,1,1,4
	.byte	'buffer',0,8,42,53
	.word	3327
	.byte	4
	.byte	'bit_position',0,8,42,67
	.word	298
	.byte	5,0,3
	.byte	'rba_DiagLib_Bit32GetSingleBit',0,3,8,60,21
	.word	142
	.byte	1,1,4
	.byte	'value',0,8,60,58
	.word	142
	.byte	4
	.byte	'bit_position',0,8,60,71
	.word	298
	.byte	5,0,3
	.byte	'rba_DiagLib_Bit32IsBitSet',0,3,8,65,22
	.word	298
	.byte	1,1,4
	.byte	'value',0,8,65,55
	.word	142
	.byte	4
	.byte	'bit_position',0,8,65,68
	.word	298
	.byte	9,5,0,0,8
	.byte	'rba_DiagLib_Bit32ClearBits',0,3,8,78,19,1,1,4
	.byte	'value',0,8,78,54
	.word	3327
	.byte	4
	.byte	'bit_position',0,8,78,67
	.word	298
	.byte	4
	.byte	'number_of_bits',0,8,78,87
	.word	298
	.byte	5,0,3
	.byte	'Dem_NvMGetNvMBlocKId',0,3,9,49,28
	.word	216
	.byte	1,1,4
	.byte	'id',0,9,49,68
	.word	298
	.byte	5,0,8
	.byte	'Dem_NvMStartClear',0,3,9,138,1,17,1,1,5,0,8
	.byte	'Dem_ClientClearMachine_SetMachineActiveClient',0,3,10,53,17,1,1,4
	.byte	'ClientId',0,10,53,80
	.word	298
	.byte	5,0,8
	.byte	'Dem_ClientClearMachine_SetMachineState',0,3,10,68,17,1,1,4
	.byte	'state',0,10,68,62
	.word	298
	.byte	5,0,3
	.byte	'Dem_ClientClearMachine_isClearDtcGroupAllDtcsSelected',0,3,10,78,20
	.word	298
	.byte	1,1,4
	.byte	'ClientId',0,10,78,91
	.word	298
	.byte	9,5,5,5,5,0,0
.L280:
	.byte	3
	.byte	'Dem_DtcGroupGetCode',0,3,11,51,29
	.word	142
	.byte	1,1
.L281:
	.byte	4
	.byte	'dtcGroupId',0,11,51,69
	.word	298
.L283:
	.byte	5,0
.L168:
	.byte	8
	.byte	'Dem_SetDtcGroupSettingFlag',0,3,11,56,17,1,1
.L171:
	.byte	4
	.byte	'DtcGroupDisabled',0,11,56,62
	.word	298
.L173:
	.byte	5,0,8
	.byte	'Dem_BitArraySetBit',0,3,12,33,17,1,1,4
	.byte	'buffer',0,12,33,36
	.word	3327
	.byte	4
	.byte	'bit_position',0,12,33,75
	.word	142
	.byte	5,0,8
	.byte	'Dem_BitArrayClearBit',0,3,12,46,17,1,1,4
	.byte	'buffer',0,12,46,38
	.word	3327
	.byte	4
	.byte	'bit_position',0,12,46,77
	.word	142
	.byte	5,0,8
	.byte	'Dem_BitArrayOverwriteBit',0,3,12,61,17,1,1,4
	.byte	'buffer',0,12,61,42
	.word	3327
	.byte	4
	.byte	'bit_position',0,12,62,25
	.word	142
	.byte	4
	.byte	'will_bit_be_set',0,12,62,57
	.word	298
	.byte	9,5,5,0,0,10
	.word	142
	.byte	7
	.word	4356
	.byte	3
	.byte	'Dem_BitArrayIsBitSet',0,3,12,75,30
	.word	298
	.byte	1,1,4
	.byte	'buffer',0,12,75,51
	.word	4361
	.byte	4
	.byte	'bit_position',0,12,75,95
	.word	142
	.byte	5,0,3
	.byte	'Dem_EnCoAreAllFulfilled',0,3,13,32,30
	.word	298
	.byte	1,1,4
	.byte	'enableConditionList',0,13,32,68
	.word	298
	.byte	5,0,3
	.byte	'rba_DiagLib_ByteOrderUtils_SwapByteOrderS',0,3,14,36,21
	.word	216
	.byte	1,1,4
	.byte	'val',0,14,36,70
	.word	216
	.byte	9,5,0,0,3
	.byte	'rba_DiagLib_ByteOrderUtils_SwapByteOrderL',0,3,14,41,21
	.word	142
	.byte	1,1,4
	.byte	'val',0,14,41,70
	.word	142
	.byte	9,5,0,0,3
	.byte	'Dem_EvtParam_GetStoreTestFailedToNextOC',0,3,15,55,22
	.word	298
	.byte	1,1,4
	.byte	'indx',0,15,55,78
	.word	216
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetEventIsStoredInPrimary',0,3,15,75,22
	.word	298
	.byte	1,1,4
	.byte	'indx',0,15,75,77
	.word	216
	.byte	9,5,0,0,3
	.byte	'Dem_EvtParam_GetEventIsStoredInSecondary',0,3,15,82,22
	.word	298
	.byte	1,1,4
	.byte	'indx',0,15,82,79
	.word	216
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetEventIsStoredInMirror',0,3,15,89,22
	.word	298
	.byte	1,1,4
	.byte	'indx',0,15,89,76
	.word	216
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetAgingAllowed',0,3,15,95,22
	.word	298
	.byte	1,1,4
	.byte	'indx',0,15,95,67
	.word	216
	.byte	9,5,0,0,3
	.byte	'Dem_EvtParam_GetOperationCycleID',0,3,15,122,20
	.word	298
	.byte	1,1,4
	.byte	'indx',0,15,122,69
	.word	216
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetAgingCycleID',0,3,15,129,1,20
	.word	298
	.byte	1,1,4
	.byte	'indx',0,15,129,1,65
	.word	216
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetFailureCycleID',0,3,15,136,1,20
	.word	298
	.byte	1,1,4
	.byte	'indx',0,15,136,1,67
	.word	216
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetDebounceMethodIndex',0,3,15,149,1,20
	.word	298
	.byte	1,1,4
	.byte	'indx',0,15,149,1,72
	.word	216
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetDebounceParamSettingIndex',0,3,15,155,1,21
	.word	216
	.byte	1,1,4
	.byte	'indx',0,15,155,1,79
	.word	216
	.byte	9,5,0,0,3
	.byte	'Dem_EvtParam_GetAgingThreshold',0,3,15,168,1,20
	.word	298
	.byte	1,1,4
	.byte	'indx',0,15,168,1,67
	.word	216
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetEnableConditions',0,3,15,208,1,27
	.word	298
	.byte	1,1,4
	.byte	'indx',0,15,208,1,76
	.word	216
	.byte	5,0,2
	.byte	'short int',0,2,5,3
	.byte	'Dem_EvtGetDebounceLevel',0,3,16,193,1,19
	.word	5391
	.byte	1,1,4
	.byte	'EventId',0,16,193,1,60
	.word	216
	.byte	5,0,3
	.byte	'Dem_EvtGetLastReportedEvent',0,3,16,219,1,32
	.word	298
	.byte	1,1,4
	.byte	'EventId',0,16,219,1,77
	.word	216
	.byte	5,0,8
	.byte	'Dem_EvtIncreaseGlobalInitMonitoringCounter',0,3,16,227,3,17,1,1,5,0,8
	.byte	'Dem_EvtSetAnyInitMonitoring',0,3,16,233,3,17,1,1,4
	.byte	'reason',0,16,233,3,72
	.word	298
	.byte	9,5,0,0,3
	.byte	'Dem_EvtIsSuppressed',0,3,16,244,4,30
	.word	298
	.byte	1,1,4
	.byte	'EventId',0,16,244,4,67
	.word	216
	.byte	9,5,0,0,7
	.word	298
	.byte	8
	.byte	'Dem_EnvSetTrigger',0,3,17,17,17,1,1,4
	.byte	'trigger',0,17,17,52
	.word	5680
	.byte	4
	.byte	'trigger2set',0,17,17,77
	.word	298
	.byte	5,0,3
	.byte	'Dem_EnvIsAnyTriggerSet',0,3,17,22,30
	.word	298
	.byte	1,1,4
	.byte	'trigger2test',0,17,22,69
	.word	298
	.byte	5,0,3
	.byte	'Dem_DebHandleDebounceAction__processBits',0,3,18,101,30
	.word	298
	.byte	1,1,4
	.byte	'EventId',0,18,101,87
	.word	216
	.byte	4
	.byte	'debAction',0,18,101,120
	.word	958
	.byte	5,0,3
	.byte	'Dem_EvMemIsMemIdValid',0,3,19,103,30
	.word	298
	.byte	1,1,4
	.byte	'MemId',0,19,103,65
	.word	958
	.byte	5,0,3
	.byte	'Dem_EvMemIsEventMemLocIdValid',0,3,19,112,30
	.word	298
	.byte	1,1,4
	.byte	'LocId',0,19,112,73
	.word	958
	.byte	5,0,11,20,133,1,3,4,12
	.byte	'Status',0
	.word	216
	.byte	2,2,35,0,12
	.byte	'EventId',0
	.word	216
	.byte	2,2,35,2,0,13,20,131,1,9,4,12
	.byte	'Data',0
	.word	5999
	.byte	4,2,35,0,0,14,7
	.word	298
	.byte	15,6,0,11,20,144,1,9,20,12
	.byte	'Hdr',0
	.word	6039
	.byte	4,2,35,0,12
	.byte	'Data',0
	.word	6060
	.byte	7,2,35,4,12
	.byte	'FailureCounter',0
	.word	298
	.byte	1,2,35,11,12
	.byte	'FreezeFrameCounter',0
	.word	298
	.byte	1,2,35,12,12
	.byte	'AgingCounter',0
	.word	298
	.byte	1,2,35,13,12
	.byte	'OccurrenceCounter',0
	.word	298
	.byte	1,2,35,14,12
	.byte	'Trigger',0
	.word	298
	.byte	1,2,35,15,12
	.byte	'TimeId',0
	.word	142
	.byte	4,2,35,16,0,10
	.word	6069
	.byte	7
	.word	6237
	.byte	3
	.byte	'Dem_EvMemGetEventMemStatusByPtr',0,3,19,134,1,25
	.word	958
	.byte	1,1,4
	.byte	'EventMemory',0,19,134,1,89
	.word	6242
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemStatus',0,3,19,139,1,25
	.word	958
	.byte	1,1,4
	.byte	'LocId',0,19,139,1,65
	.word	958
	.byte	9,5,0,0,3
	.byte	'Dem_EvMemGetEventMemEventIdByPtr',0,3,19,152,1,28
	.word	216
	.byte	1,1,4
	.byte	'EventMemory',0,19,152,1,93
	.word	6242
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemTimeIdByPtr',0,3,19,170,1,19
	.word	142
	.byte	1,1,4
	.byte	'EventMemory',0,19,170,1,83
	.word	6242
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemDtcStatusByPtr',0,3,19,188,1,18
	.word	298
	.byte	1,1,4
	.byte	'EventMemory',0,19,188,1,85
	.word	6242
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemFailureCounterByPtr',0,3,19,216,1,24
	.word	958
	.byte	1,1,4
	.byte	'EventMemory',0,19,216,1,96
	.word	6242
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemOccurrenceCounterByPtr',0,3,19,233,1,25
	.word	958
	.byte	1,1,4
	.byte	'EventMemory',0,19,233,1,100
	.word	6242
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemAgingCounterByPtr',0,3,19,133,2,25
	.word	958
	.byte	1,1,4
	.byte	'EventMemory',0,19,133,2,95
	.word	6242
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemAgingCounter',0,3,19,144,2,25
	.word	958
	.byte	1,1,4
	.byte	'LocId',0,19,144,2,71
	.word	958
	.byte	9,5,0,0,8
	.byte	'Dem_EvMemSetEventMemAgingCounter',0,3,19,150,2,17,1,1,4
	.byte	'LocId',0,19,150,2,63
	.word	958
	.byte	4
	.byte	'AgingCounter',0,19,150,2,83
	.word	958
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr',0,3,19,161,2,25
	.word	958
	.byte	1,1,4
	.byte	'EventMemory',0,19,161,2,103
	.word	6242
	.byte	5,0,2
	.byte	'char',0,1,6,3
	.byte	'Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr',0,3,19,213,2,18
	.word	7028
	.byte	1,1,4
	.byte	'EventMemory',0,19,213,2,92
	.word	6242
	.byte	5,0,3
	.byte	'Dem_EvMemGetMaxFdcSinceLastClearByPtr',0,3,19,224,2,18
	.word	7028
	.byte	1,1,4
	.byte	'EventMemory',0,19,224,2,88
	.word	6242
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemFreezeFrameCounterByPtr',0,3,19,238,3,25
	.word	958
	.byte	1,1,4
	.byte	'EventMemory',0,19,238,3,101
	.word	6242
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemTriggerByPtr',0,3,19,141,4,28
	.word	298
	.byte	1,1,4
	.byte	'EventMemory',0,19,141,4,93
	.word	6242
	.byte	5,0,7
	.word	6069
	.byte	3
	.byte	'Dem_EvMemGetEventMemDataByPtr',0,3,19,170,4,19
	.word	2138
	.byte	1,1,4
	.byte	'EventMemory',0,19,170,4,75
	.word	7333
	.byte	5,0,3
	.byte	'Dem_EvMemIsStored',0,3,19,206,4,30
	.word	298
	.byte	1,1,4
	.byte	'Status',0,19,206,4,61
	.word	958
	.byte	5,0,3
	.byte	'Dem_EvMemIsEmpty',0,3,19,211,4,30
	.word	298
	.byte	1,1,4
	.byte	'Status',0,19,211,4,60
	.word	958
	.byte	5,0,3
	.byte	'Dem_EvMemSetToEmpty',0,3,19,226,4,25
	.word	958
	.byte	1,1,5,0,3
	.byte	'Dem_EvMemGetShadowVisibility',0,3,19,242,4,30
	.word	298
	.byte	1,1,5,0,3
	.byte	'Dem_EvMemGetEventMemStartLocId',0,3,19,131,5,25
	.word	958
	.byte	1,1,4
	.byte	'MemId',0,19,131,5,69
	.word	958
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemEndLocId',0,3,19,143,5,25
	.word	958
	.byte	1,1,4
	.byte	'MemId',0,19,143,5,67
	.word	958
	.byte	5,0,7
	.word	958
	.byte	8
	.byte	'Dem_EvMemEventMemoryIteratorNew',0,3,19,179,5,17,1,1,4
	.byte	'MemId',0,19,179,5,63
	.word	7693
	.byte	5,0,10
	.word	958
	.byte	7
	.word	7755
	.byte	3
	.byte	'Dem_EvMemEventMemoryIteratorIsValid',0,3,19,184,5,30
	.word	298
	.byte	1,1,4
	.byte	'MemId',0,19,184,5,86
	.word	7760
	.byte	5,0,8
	.byte	'Dem_EvMemEventMemoryIteratorNext',0,3,19,189,5,17,1,1,4
	.byte	'MemId',0,19,189,5,64
	.word	7693
	.byte	5,0,3
	.byte	'Dem_EvMemIsEdgeTrigger',0,3,19,247,5,30
	.word	298
	.byte	1,1,4
	.byte	'StatusOld',0,19,247,5,66
	.word	958
	.byte	4
	.byte	'StatusNew',0,19,247,5,90
	.word	958
	.byte	4
	.byte	'Trigger',0,19,247,5,114
	.word	958
	.byte	5,0,3
	.byte	'Dem_EvMemGetRamStsMask',0,3,19,154,7,25
	.word	958
	.byte	1,1,4
	.byte	'EventId',0,19,154,7,64
	.word	216
	.byte	9,5,0,0,3
	.byte	'Dem_EvMemGetCurrentAgingCycleCounterInt',0,3,21,20,25
	.word	958
	.byte	1,1,4
	.byte	'EventId',0,21,20,81
	.word	216
	.byte	5,0,3
	.byte	'Dem_EvMemIsAged',0,3,21,61,30
	.word	298
	.byte	1,1,4
	.byte	'EventId',0,21,61,62
	.word	216
	.byte	4
	.byte	'LocId',0,21,61,84
	.word	958
	.byte	4
	.byte	'StatusNew',0,21,61,104
	.word	958
	.byte	5,0,3
	.byte	'Dem_EvMemGetMemIdForDTCOrigin',0,3,22,150,1,25
	.word	958
	.byte	1,1,4
	.byte	'DTCOrigin',0,22,150,1,73
	.word	298
	.byte	5,0,3
	.byte	'Dem_EvMemGetMemIdForEvent',0,3,22,222,1,25
	.word	958
	.byte	1,1,4
	.byte	'EventId',0,22,222,1,67
	.word	216
	.byte	9,5,0,0,3
	.byte	'Dem_DtcIsSuppressed',0,3,23,118,30
	.word	298
	.byte	1,1,4
	.byte	'dtcId',0,23,118,65
	.word	216
	.byte	9,5,0,0,3
	.byte	'Dem_DtcIsSuppressedDirectly',0,3,23,128,1,30
	.word	298
	.byte	1,1,4
	.byte	'dtcId',0,23,128,1,73
	.word	216
	.byte	5,0,3
	.byte	'Dem_EventUsesOrigin',0,3,23,137,2,30
	.word	298
	.byte	1,1,4
	.byte	'eventId',0,23,137,2,67
	.word	216
	.byte	4
	.byte	'origin',0,23,137,2,94
	.word	298
	.byte	9,5,5,5,0,0
.L194:
	.byte	3
	.byte	'Dem_DtcIsDTCSettingEnabled',0,3,23,165,2,30
	.word	298
	.byte	1,1
.L195:
	.byte	4
	.byte	'dtcId',0,23,165,2,71
	.word	216
.L197:
	.byte	9,5,0,0
.L133:
	.byte	8
	.byte	'Dem_DtcGroupApplyDTCSetting',0,3,24,23,17,1,1
.L135:
	.byte	4
	.byte	'DTCGroup',0,24,23,62
	.word	142
.L137:
	.byte	4
	.byte	'groupId',0,24,23,78
	.word	298
.L139:
	.byte	4
	.byte	'newDtcSettingState',0,24,23,95
	.word	298
.L141:
	.byte	9
.L174:
	.byte	5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,16
	.byte	'Det_ReportError',0,25,112,16
	.word	298
	.byte	1,1,1,1,4
	.byte	'ModuleId',0,25,112,39
	.word	216
	.byte	4
	.byte	'InstanceId',0,25,112,55
	.word	298
	.byte	4
	.byte	'ApiId',0,25,112,73
	.word	298
	.byte	4
	.byte	'ErrorId',0,25,112,86
	.word	298
	.byte	0,17
	.word	158
	.byte	18
	.word	196
	.byte	5,0,17
	.word	238
	.byte	18
	.word	277
	.byte	5,0,17
	.word	315
	.byte	18
	.word	345
	.byte	5,0,17
	.word	365
	.byte	18
	.word	396
	.byte	5,0,17
	.word	426
	.byte	18
	.word	464
	.byte	18
	.word	479
	.byte	18
	.word	495
	.byte	5,0,17
	.word	526
	.byte	18
	.word	566
	.byte	18
	.word	582
	.byte	5,0,17
	.word	608
	.byte	18
	.word	666
	.byte	5,0,17
	.word	687
	.byte	18
	.word	742
	.byte	5,0,17
	.word	763
	.byte	18
	.word	792
	.byte	5,0,17
	.word	806
	.byte	18
	.word	839
	.byte	5,0,17
	.word	853
	.byte	18
	.word	885
	.byte	5,0,17
	.word	902
	.byte	18
	.word	939
	.byte	9,19
	.word	853
	.byte	18
	.word	885
	.byte	20
	.word	900
	.byte	0,5,0,0,17
	.word	984
	.byte	18
	.word	1013
	.byte	5,0,17
	.word	1037
	.byte	18
	.word	1074
	.byte	5,0,17
	.word	1088
	.byte	18
	.word	1118
	.byte	5,0,17
	.word	1132
	.byte	18
	.word	1169
	.byte	5,0,17
	.word	1188
	.byte	18
	.word	1222
	.byte	5,0,17
	.word	1246
	.byte	18
	.word	1288
	.byte	5,0,17
	.word	1302
	.byte	18
	.word	1337
	.byte	5,0,17
	.word	1351
	.byte	18
	.word	1393
	.byte	5,0,17
	.word	1407
	.byte	18
	.word	1441
	.byte	5,0,17
	.word	1510
	.byte	18
	.word	1554
	.byte	18
	.word	1566
	.byte	9,19
	.word	763
	.byte	18
	.word	792
	.byte	20
	.word	804
	.byte	0,5,0,0,17
	.word	1595
	.byte	18
	.word	1638
	.byte	5,0,17
	.word	1652
	.byte	18
	.word	1688
	.byte	5,0,17
	.word	1702
	.byte	18
	.word	1745
	.byte	5,0,17
	.word	1796
	.byte	18
	.word	1841
	.byte	18
	.word	1853
	.byte	9,19
	.word	1407
	.byte	18
	.word	1441
	.byte	20
	.word	1461
	.byte	0,5,0,0,17
	.word	1885
	.byte	18
	.word	1926
	.byte	5,0,17
	.word	1940
	.byte	18
	.word	1974
	.byte	5,0,17
	.word	1988
	.byte	18
	.word	2029
	.byte	5,0,17
	.word	2043
	.byte	18
	.word	2074
	.byte	5,0,17
	.word	2089
	.byte	18
	.word	2123
	.byte	5,0,17
	.word	2143
	.byte	18
	.word	2173
	.byte	18
	.word	2188
	.byte	5,0,17
	.word	2211
	.byte	18
	.word	2243
	.byte	18
	.word	2258
	.byte	5,0,17
	.word	2281
	.byte	18
	.word	2317
	.byte	18
	.word	2332
	.byte	18
	.word	2353
	.byte	9,19
	.word	2143
	.byte	18
	.word	2173
	.byte	18
	.word	2188
	.byte	20
	.word	2209
	.byte	0,5,19
	.word	2211
	.byte	18
	.word	2243
	.byte	18
	.word	2258
	.byte	20
	.word	2279
	.byte	0,5,0,0,17
	.word	2382
	.byte	18
	.word	2422
	.byte	18
	.word	2436
	.byte	5,0,17
	.word	2459
	.byte	18
	.word	2495
	.byte	18
	.word	2509
	.byte	9,19
	.word	2382
	.byte	18
	.word	2422
	.byte	18
	.word	2436
	.byte	20
	.word	2457
	.byte	0,5,0,0,17
	.word	2534
	.byte	18
	.word	2569
	.byte	18
	.word	2583
	.byte	18
	.word	2604
	.byte	5,0,17
	.word	2629
	.byte	18
	.word	2662
	.byte	18
	.word	2676
	.byte	18
	.word	2697
	.byte	5,0,17
	.word	2722
	.byte	18
	.word	2759
	.byte	18
	.word	2773
	.byte	18
	.word	2794
	.byte	18
	.word	2817
	.byte	9,19
	.word	2629
	.byte	18
	.word	2662
	.byte	18
	.word	2676
	.byte	18
	.word	2697
	.byte	20
	.word	2720
	.byte	0,5,0,0,17
	.word	2843
	.byte	18
	.word	2874
	.byte	18
	.word	2889
	.byte	5,0,17
	.word	2912
	.byte	18
	.word	2945
	.byte	18
	.word	2960
	.byte	5,0,17
	.word	2983
	.byte	18
	.word	3024
	.byte	18
	.word	3038
	.byte	5,0,17
	.word	3061
	.byte	18
	.word	3098
	.byte	18
	.word	3112
	.byte	9,19
	.word	2983
	.byte	18
	.word	3024
	.byte	18
	.word	3038
	.byte	20
	.word	3059
	.byte	0,5,0,0,17
	.word	3137
	.byte	18
	.word	3173
	.byte	18
	.word	3187
	.byte	18
	.word	3208
	.byte	5,0,17
	.word	3233
	.byte	18
	.word	3267
	.byte	18
	.word	3281
	.byte	18
	.word	3302
	.byte	5,0,17
	.word	3332
	.byte	18
	.word	3363
	.byte	18
	.word	3378
	.byte	5,0,17
	.word	3401
	.byte	18
	.word	3434
	.byte	18
	.word	3449
	.byte	5,0,17
	.word	3472
	.byte	18
	.word	3513
	.byte	18
	.word	3527
	.byte	5,0,17
	.word	3550
	.byte	18
	.word	3587
	.byte	18
	.word	3601
	.byte	9,19
	.word	3472
	.byte	18
	.word	3513
	.byte	18
	.word	3527
	.byte	20
	.word	3548
	.byte	0,5,0,0,17
	.word	3626
	.byte	18
	.word	3660
	.byte	18
	.word	3674
	.byte	18
	.word	3695
	.byte	5,0,17
	.word	3720
	.byte	18
	.word	3752
	.byte	5,0,17
	.word	3765
	.byte	5,0,17
	.word	3793
	.byte	18
	.word	3846
	.byte	5,0,17
	.word	3865
	.byte	18
	.word	3911
	.byte	5,0,17
	.word	3927
	.byte	18
	.word	3992
	.byte	9,19
	.word	315
	.byte	18
	.word	345
	.byte	20
	.word	363
	.byte	0,5,19
	.word	315
	.byte	18
	.word	345
	.byte	20
	.word	363
	.byte	0,5,19
	.word	687
	.byte	18
	.word	742
	.byte	20
	.word	761
	.byte	0,5,19
	.word	426
	.byte	18
	.word	464
	.byte	18
	.word	479
	.byte	18
	.word	495
	.byte	20
	.word	514
	.byte	0,5,0,0,11,10,20,9,24,12
	.byte	'activeClient',0
	.word	298
	.byte	1,2,35,0,12
	.byte	'machine_state',0
	.word	298
	.byte	1,2,35,1,12
	.byte	'IsNewClearRequest',0
	.word	298
	.byte	1,2,35,2,12
	.byte	'IsClearInterrupted',0
	.word	298
	.byte	1,2,35,3,12
	.byte	'NumberOfEventsProcessed',0
	.word	216
	.byte	2,2,35,4,12
	.byte	'DtcIt',0
	.word	1759
	.byte	4,2,35,6,12
	.byte	'EvtIt',0
	.word	958
	.byte	4,2,35,12,12
	.byte	'EvtListIt',0
	.word	1473
	.byte	8,2,35,16,0
.L298:
	.byte	7
	.word	9837
	.byte	17
	.word	4016
	.byte	18
	.word	4047
	.byte	5,0,17
	.word	4068
	.byte	18
	.word	4102
	.byte	5,0,17
	.word	4129
	.byte	18
	.word	4155
	.byte	18
	.word	4170
	.byte	5,0,17
	.word	4193
	.byte	18
	.word	4221
	.byte	18
	.word	4236
	.byte	5,0,17
	.word	4259
	.byte	18
	.word	4291
	.byte	18
	.word	4306
	.byte	18
	.word	4327
	.byte	9,19
	.word	4129
	.byte	18
	.word	4155
	.byte	18
	.word	4170
	.byte	20
	.word	4191
	.byte	0,5,19
	.word	4193
	.byte	18
	.word	4221
	.byte	18
	.word	4236
	.byte	20
	.word	4257
	.byte	0,5,0,0,17
	.word	4366
	.byte	18
	.word	4398
	.byte	18
	.word	4413
	.byte	5,0,17
	.word	4436
	.byte	18
	.word	4471
	.byte	5,0,17
	.word	4501
	.byte	18
	.word	4554
	.byte	9,19
	.word	238
	.byte	18
	.word	277
	.byte	20
	.word	296
	.byte	0,5,0,0,17
	.word	4570
	.byte	18
	.word	4623
	.byte	9,19
	.word	158
	.byte	18
	.word	196
	.byte	20
	.word	214
	.byte	0,5,0,0,17
	.word	4639
	.byte	18
	.word	4690
	.byte	5,0,17
	.word	4705
	.byte	18
	.word	4755
	.byte	9,19
	.word	3061
	.byte	18
	.word	3098
	.byte	18
	.word	3112
	.byte	21
	.word	3133
	.byte	19
	.word	2983
	.byte	18
	.word	3024
	.byte	18
	.word	3038
	.byte	20
	.word	3059
	.byte	0,20
	.word	3134
	.byte	0,0,5,0,0,17
	.word	4772
	.byte	18
	.word	4824
	.byte	5,0,17
	.word	4839
	.byte	18
	.word	4888
	.byte	5,0,17
	.word	4903
	.byte	18
	.word	4943
	.byte	9,19
	.word	3061
	.byte	18
	.word	3098
	.byte	18
	.word	3112
	.byte	21
	.word	3133
	.byte	19
	.word	2983
	.byte	18
	.word	3024
	.byte	18
	.word	3038
	.byte	20
	.word	3059
	.byte	0,20
	.word	3134
	.byte	0,0,5,0,0,17
	.word	4960
	.byte	18
	.word	5004
	.byte	5,0,17
	.word	5019
	.byte	18
	.word	5060
	.byte	5,0,17
	.word	5076
	.byte	18
	.word	5119
	.byte	5,0,17
	.word	5135
	.byte	18
	.word	5183
	.byte	5,0,17
	.word	5199
	.byte	18
	.word	5253
	.byte	9,19
	.word	3137
	.byte	18
	.word	3173
	.byte	18
	.word	3187
	.byte	18
	.word	3208
	.byte	20
	.word	3231
	.byte	0,5,0,0,17
	.word	5271
	.byte	18
	.word	5314
	.byte	5,0,17
	.word	5330
	.byte	18
	.word	5375
	.byte	5,0,17
	.word	5404
	.byte	18
	.word	5440
	.byte	5,0,17
	.word	5459
	.byte	18
	.word	5499
	.byte	5,0,17
	.word	5518
	.byte	5,0,17
	.word	5571
	.byte	18
	.word	5607
	.byte	9,19
	.word	3332
	.byte	18
	.word	3363
	.byte	18
	.word	3378
	.byte	20
	.word	3399
	.byte	0,5,0,0,17
	.word	5627
	.byte	18
	.word	5659
	.byte	9,19
	.word	2459
	.byte	18
	.word	2495
	.byte	18
	.word	2509
	.byte	21
	.word	2530
	.byte	19
	.word	2382
	.byte	18
	.word	2422
	.byte	18
	.word	2436
	.byte	20
	.word	2457
	.byte	0,20
	.word	2531
	.byte	0,0,5,0,0,22
	.byte	'Dem_ClearSingleDTC',0,26,19,6,1,1,1,1,4
	.byte	'dtcId',0,26,19,39
	.word	216
	.byte	4
	.byte	'DTCOrigin',0,26,19,64
	.word	298
	.byte	4
	.byte	'Dem_ClientClearMachinePtr',0,26,19,103
	.word	10025
	.byte	0,17
	.word	5685
	.byte	18
	.word	5710
	.byte	18
	.word	5726
	.byte	5,0,17
	.word	5748
	.byte	18
	.word	5782
	.byte	5,0,17
	.word	5805
	.byte	18
	.word	5857
	.byte	18
	.word	5873
	.byte	5,0,17
	.word	5893
	.byte	18
	.word	5926
	.byte	5,0,17
	.word	5942
	.byte	18
	.word	5983
	.byte	5,0,17
	.word	6247
	.byte	18
	.word	6291
	.byte	5,0,17
	.word	6314
	.byte	18
	.word	6353
	.byte	9,19
	.word	6247
	.byte	18
	.word	6291
	.byte	20
	.word	6312
	.byte	0,5,0,0,17
	.word	6372
	.byte	18
	.word	6417
	.byte	5,0,17
	.word	6440
	.byte	18
	.word	6484
	.byte	5,0,17
	.word	6507
	.byte	18
	.word	6554
	.byte	5,0,17
	.word	6577
	.byte	18
	.word	6629
	.byte	5,0,17
	.word	6652
	.byte	18
	.word	6707
	.byte	5,0,17
	.word	6730
	.byte	18
	.word	6780
	.byte	5,0,17
	.word	6803
	.byte	18
	.word	6848
	.byte	9,19
	.word	6730
	.byte	18
	.word	6780
	.byte	20
	.word	6801
	.byte	0,5,0,0,17
	.word	6867
	.byte	18
	.word	6908
	.byte	18
	.word	6923
	.byte	5,0,17
	.word	6947
	.byte	18
	.word	7005
	.byte	5,0,17
	.word	7036
	.byte	18
	.word	7090
	.byte	5,0,17
	.word	7113
	.byte	18
	.word	7163
	.byte	5,0,17
	.word	7186
	.byte	18
	.word	7242
	.byte	5,0,17
	.word	7265
	.byte	18
	.word	7310
	.byte	5,0,17
	.word	7338
	.byte	18
	.word	7380
	.byte	5,0,17
	.word	7403
	.byte	18
	.word	7433
	.byte	5,0,17
	.word	7451
	.byte	18
	.word	7480
	.byte	5,0,17
	.word	7498
	.byte	5,0,17
	.word	7532
	.byte	5,0,17
	.word	7575
	.byte	18
	.word	7618
	.byte	5,0,17
	.word	7635
	.byte	18
	.word	7676
	.byte	5,0,17
	.word	7698
	.byte	18
	.word	7738
	.byte	5,0,17
	.word	7765
	.byte	18
	.word	7813
	.byte	5,0,17
	.word	7830
	.byte	18
	.word	7871
	.byte	5,0,17
	.word	7888
	.byte	18
	.word	7923
	.byte	18
	.word	7942
	.byte	18
	.word	7961
	.byte	5,0,17
	.word	7980
	.byte	18
	.word	8015
	.byte	9,19
	.word	4639
	.byte	18
	.word	4690
	.byte	20
	.word	4703
	.byte	0,5,0,0,17
	.word	8036
	.byte	18
	.word	8087
	.byte	5,0,17
	.word	8105
	.byte	18
	.word	8132
	.byte	18
	.word	8148
	.byte	18
	.word	8162
	.byte	5,0,17
	.word	8182
	.byte	18
	.word	8224
	.byte	5,0,17
	.word	8245
	.byte	18
	.word	8283
	.byte	9,19
	.word	4705
	.byte	18
	.word	4755
	.byte	21
	.word	4768
	.byte	19
	.word	3061
	.byte	18
	.word	3098
	.byte	18
	.word	3112
	.byte	21
	.word	3133
	.byte	19
	.word	2983
	.byte	18
	.word	3024
	.byte	18
	.word	3038
	.byte	20
	.word	3059
	.byte	0,20
	.word	3134
	.byte	0,0,20
	.word	4769
	.byte	0,0,5,0,0,17
	.word	8304
	.byte	18
	.word	8335
	.byte	9,19
	.word	2459
	.byte	18
	.word	2495
	.byte	18
	.word	2509
	.byte	21
	.word	2530
	.byte	19
	.word	2382
	.byte	18
	.word	2422
	.byte	18
	.word	2436
	.byte	20
	.word	2457
	.byte	0,20
	.word	2531
	.byte	0,0,5,0,0,17
	.word	8353
	.byte	18
	.word	8393
	.byte	5,0,17
	.word	8410
	.byte	18
	.word	8442
	.byte	18
	.word	8459
	.byte	9,19
	.word	4772
	.byte	18
	.word	4824
	.byte	20
	.word	4837
	.byte	0,5,19
	.word	4839
	.byte	18
	.word	4888
	.byte	20
	.word	4901
	.byte	0,5,19
	.word	4705
	.byte	18
	.word	4755
	.byte	21
	.word	4768
	.byte	19
	.word	3061
	.byte	18
	.word	3098
	.byte	18
	.word	3112
	.byte	21
	.word	3133
	.byte	19
	.word	2983
	.byte	18
	.word	3024
	.byte	18
	.word	3038
	.byte	20
	.word	3059
	.byte	0,20
	.word	3134
	.byte	0,0,20
	.word	4769
	.byte	0,0,5,0,0,22
	.byte	'Dem_DtcSetDTCSetting',0,23,162,2,6,1,1,1,1,4
	.byte	'dtcId',0,23,162,2,42
	.word	216
	.byte	4
	.byte	'setBit',0,23,162,2,67
	.word	298
	.byte	0,17
	.word	8481
	.byte	18
	.word	8520
	.byte	9,19
	.word	2459
	.byte	18
	.word	2495
	.byte	18
	.word	2509
	.byte	21
	.word	2530
	.byte	19
	.word	2382
	.byte	18
	.word	2422
	.byte	18
	.word	2436
	.byte	20
	.word	2457
	.byte	0,20
	.word	2531
	.byte	0,0,5,0,0,17
	.word	8539
	.byte	18
	.word	8574
	.byte	18
	.word	8591
	.byte	18
	.word	8607
	.byte	9,9,19
	.word	1132
	.byte	18
	.word	1169
	.byte	20
	.word	1181
	.byte	0,19
	.word	1132
	.byte	18
	.word	1169
	.byte	20
	.word	1181
	.byte	0,19
	.word	1132
	.byte	18
	.word	1169
	.byte	20
	.word	1181
	.byte	0,19
	.word	984
	.byte	18
	.word	1013
	.byte	20
	.word	1025
	.byte	0,19
	.word	4068
	.byte	18
	.word	4102
	.byte	20
	.word	4127
	.byte	0,19
	.word	1088
	.byte	18
	.word	1118
	.byte	20
	.word	1130
	.byte	0,19
	.word	2043
	.byte	18
	.word	2074
	.byte	20
	.word	2087
	.byte	0,19
	.word	8481
	.byte	18
	.word	8520
	.byte	21
	.word	8535
	.byte	19
	.word	2459
	.byte	18
	.word	2495
	.byte	18
	.word	2509
	.byte	21
	.word	2530
	.byte	19
	.word	2382
	.byte	18
	.word	2422
	.byte	18
	.word	2436
	.byte	20
	.word	2457
	.byte	0,20
	.word	2531
	.byte	0,0,20
	.word	8536
	.byte	0,0,19
	.word	1037
	.byte	18
	.word	1074
	.byte	20
	.word	1086
	.byte	0,0,19
	.word	1988
	.byte	18
	.word	2029
	.byte	20
	.word	2041
	.byte	0,5,5,5,5,19
	.word	4068
	.byte	18
	.word	4102
	.byte	20
	.word	4127
	.byte	0,5,5,5,19
	.word	1940
	.byte	18
	.word	1974
	.byte	20
	.word	1986
	.byte	0,5,5,19
	.word	1885
	.byte	18
	.word	1926
	.byte	20
	.word	1938
	.byte	0,5,5,5,5,19
	.word	1796
	.byte	18
	.word	1841
	.byte	18
	.word	1853
	.byte	21
	.word	1871
	.byte	19
	.word	1407
	.byte	18
	.word	1441
	.byte	20
	.word	1461
	.byte	0,20
	.word	1872
	.byte	0,0,5,0,0,23,1,7
	.word	11986
	.byte	24
	.byte	'__codeptr',0,24,1,1
	.word	11988
	.byte	24
	.byte	'sint8',0,27,76,25
	.word	7028
	.byte	24
	.byte	'uint8',0,27,81,25
	.word	298
	.byte	24
	.byte	'sint16',0,27,86,25
	.word	5391
	.byte	24
	.byte	'uint16',0,27,91,25
	.word	216
	.byte	2
	.byte	'int',0,4,5,24
	.byte	'sint32',0,27,96,24
	.word	12069
	.byte	24
	.byte	'uint32',0,27,106,24
	.word	142
	.byte	2
	.byte	'unsigned long long int',0,8,7,24
	.byte	'uint64',0,27,111,30
	.word	12106
	.byte	24
	.byte	'boolean',0,27,127,25
	.word	298
	.byte	24
	.byte	'uint8_least',0,27,137,1,25
	.word	958
	.byte	24
	.byte	'uint16_least',0,27,147,1,25
	.word	958
	.byte	24
	.byte	'StatusType',0,28,191,1,27
	.word	298
	.byte	24
	.byte	'Std_ReturnType',0,28,199,1,15
	.word	298
	.byte	11,28,206,1,9,8,12
	.byte	'vendorID',0
	.word	216
	.byte	2,2,35,0,12
	.byte	'moduleID',0
	.word	216
	.byte	2,2,35,2,12
	.byte	'sw_major_version',0
	.word	298
	.byte	1,2,35,4,12
	.byte	'sw_minor_version',0
	.word	298
	.byte	1,2,35,5,12
	.byte	'sw_patch_version',0
	.word	298
	.byte	1,2,35,6,0,24
	.byte	'Std_VersionInfoType',0,28,213,1,3
	.word	12250
	.byte	24
	.byte	'Dem_ClientRequestType',0,29,46,16
	.word	216
	.byte	24
	.byte	'Dem_ClientResultType',0,29,47,16
	.word	216
	.byte	24
	.byte	'Dem_ClientSelectionType',0,29,48,16
	.word	142
	.byte	24
	.byte	'Dem_ClientPriorityType',0,29,50,15
	.word	298
	.byte	24
	.byte	'Dem_ComponentIdType',0,30,20,15
	.word	298
	.byte	24
	.byte	'PduIdType',0,31,22,19
	.word	216
	.byte	24
	.byte	'PduLengthType',0,31,26,19
	.word	216
	.byte	25,32,113,9,4,26
	.byte	'TP_DATACONF',0,0,26
	.byte	'TP_DATARETRY',0,1,26
	.byte	'TP_CONFPENDING',0,2,0,24
	.byte	'TpDataStateType',0,32,118,3
	.word	12590
	.byte	24
	.byte	'Can_IdType',0,33,32,16
	.word	142
	.byte	24
	.byte	'Can_HwHandleType',0,33,43,16
	.word	216
	.byte	11,34,93,9,8,12
	.byte	'Class',0
	.word	298
	.byte	1,2,35,0,12
	.byte	'TIN',0
	.word	298
	.byte	1,2,35,1,12
	.byte	'ReturnAddress',0
	.word	142
	.byte	4,2,35,4,0,24
	.byte	'OsTrapInfoType',0,34,97,3
	.word	12710
	.byte	14,68
	.word	142
	.byte	15,16,0,11,34,154,1,9,68,12
	.byte	'store',0
	.word	12790
	.byte	68,2,35,0,0,14,68
	.word	12799
	.byte	15,0,0,24
	.byte	'Os_JumpBufType',0,34,156,1,3
	.word	12821
	.byte	24
	.byte	'Os_StackTraceType',0,34,174,1,18
	.word	142
	.byte	11,34,175,1,9,8,12
	.byte	'sp',0
	.word	142
	.byte	4,2,35,0,12
	.byte	'ctx',0
	.word	142
	.byte	4,2,35,4,0,24
	.byte	'Os_StackValueType',0,34,175,1,63
	.word	12881
	.byte	24
	.byte	'Os_StackSizeType',0,34,176,1,27
	.word	12881
	.byte	27,1,1,7
	.word	12966
	.byte	24
	.byte	'Os_VoidVoidFunctionType',0,34,179,1,16
	.word	12969
	.byte	24
	.byte	'ApplicationType',0,34,193,1,23
	.word	298
	.byte	28
	.byte	'Os_ApplicationConfigurationType_s',0,34,198,1,16,2,12
	.byte	'app_id',0
	.word	298
	.byte	1,2,35,0,12
	.byte	'access',0
	.word	298
	.byte	1,2,35,1,0,24
	.byte	'Os_ApplicationConfigurationType',0,34,201,1,3
	.word	13032
	.byte	24
	.byte	'Os_CoreStateType',0,34,203,1,16
	.word	142
	.byte	24
	.byte	'AreaIdType',0,34,204,1,16
	.word	216
	.byte	24
	.byte	'Os_PeripheralAddressType',0,34,212,1,22
	.word	142
	.byte	24
	.byte	'TickType',0,34,221,1,22
	.word	142
	.byte	24
	.byte	'Os_StopwatchTickType',0,34,225,1,22
	.word	142
	.byte	24
	.byte	'Os_Lockable',0,34,234,1,18
	.word	3327
	.byte	24
	.byte	'CoreIdType',0,34,236,1,16
	.word	216
	.byte	24
	.byte	'SpinlockIdType',0,34,237,1,16
	.word	216
	.byte	25,34,239,1,9,4,26
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,26
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,24
	.byte	'TryToGetSpinlockType',0,34,239,1,74
	.word	13339
	.byte	25,34,174,2,9,4,26
	.byte	'APPLICATION_ACCESSIBLE',0,0,26
	.byte	'APPLICATION_RESTARTING',0,1,26
	.byte	'APPLICATION_TERMINATED',0,2,0,24
	.byte	'ApplicationStateType',0,34,174,2,92
	.word	13432
	.byte	29
	.byte	'void',0,7
	.word	13544
	.byte	30,1,1,31
	.word	298
	.byte	31
	.word	13550
	.byte	0,7
	.word	13555
	.byte	24
	.byte	'Os_FunctionEntryType',0,34,183,2,16
	.word	13569
	.byte	28
	.byte	'Os_MeterInfoType_s',0,34,193,2,16,48,12
	.byte	'elapsed',0
	.word	142
	.byte	4,2,35,0,12
	.byte	'previous',0
	.word	142
	.byte	4,2,35,4,12
	.byte	'max',0
	.word	142
	.byte	4,2,35,8,12
	.byte	'cumulative',0
	.word	142
	.byte	4,2,35,12,12
	.byte	'stackbase',0
	.word	12881
	.byte	8,2,35,16,12
	.byte	'stackusage',0
	.word	12881
	.byte	8,2,35,24,12
	.byte	'stackmax',0
	.word	12881
	.byte	8,2,35,32,12
	.byte	'stackbudget',0
	.word	12881
	.byte	8,2,35,40,0,24
	.byte	'Os_MeterInfoType',0,34,202,2,3
	.word	13604
	.byte	7
	.word	13604
	.byte	24
	.byte	'Os_MeterInfoRefType',0,34,203,2,50
	.word	13802
	.byte	24
	.byte	'EventMaskType',0,34,206,2,15
	.word	298
	.byte	24
	.byte	'Os_imaskType',0,34,211,2,16
	.word	142
	.byte	28
	.byte	'Os_ISRDynType_s',0,34,213,2,16,48,12
	.byte	'meter',0
	.word	13604
	.byte	48,2,35,0,0,24
	.byte	'Os_ISRDynType',0,34,215,2,3
	.word	13881
	.byte	7
	.word	13881
	.byte	10
	.word	13942
	.byte	28
	.byte	'Os_ISRType_s',0,34,216,2,16,24,12
	.byte	'entry_function',0
	.word	12974
	.byte	4,2,35,0,12
	.byte	'dynamic',0
	.word	13947
	.byte	4,2,35,4,12
	.byte	'imask',0
	.word	142
	.byte	4,2,35,8,12
	.byte	'stackbudget',0
	.word	12881
	.byte	8,2,35,12,12
	.byte	'access',0
	.word	298
	.byte	1,2,35,20,12
	.byte	'application',0
	.word	298
	.byte	1,2,35,21,0,24
	.byte	'Os_ISRType',0,34,223,2,3
	.word	13952
	.byte	7
	.word	12966
	.byte	10
	.word	13952
	.byte	7
	.word	14111
	.byte	24
	.byte	'ISRType',0,34,224,2,46
	.word	14116
	.byte	24
	.byte	'Os_bitmask',0,34,239,2,22
	.word	142
	.byte	24
	.byte	'Os_pset0Type',0,34,240,2,20
	.word	142
	.byte	24
	.byte	'Os_pset1Type',0,34,241,2,20
	.word	142
	.byte	24
	.byte	'Os_pset2Type',0,34,242,2,20
	.word	142
	.byte	13,34,243,2,9,4,12
	.byte	'p0',0
	.word	142
	.byte	4,2,35,0,12
	.byte	'p1',0
	.word	142
	.byte	4,2,35,0,12
	.byte	'p2',0
	.word	142
	.byte	4,2,35,0,0,24
	.byte	'Os_psetType',0,34,247,2,3
	.word	14224
	.byte	13,34,249,2,9,4,12
	.byte	't0',0
	.word	142
	.byte	4,2,35,0,12
	.byte	't1',0
	.word	142
	.byte	4,2,35,0,12
	.byte	't2',0
	.word	142
	.byte	4,2,35,0,0,24
	.byte	'Os_tpmaskType',0,34,253,2,3
	.word	14288
	.byte	24
	.byte	'Os_ActivationCountType',0,34,254,2,23
	.word	298
	.byte	28
	.byte	'Os_TaskDynType_s',0,34,128,3,16,120,12
	.byte	'terminate_jump_buf',0
	.word	12830
	.byte	68,2,35,0,12
	.byte	'meter',0
	.word	13604
	.byte	48,2,35,68,12
	.byte	'activation_count',0
	.word	298
	.byte	1,2,35,116,0,24
	.byte	'Os_TaskDynType',0,34,132,3,3
	.word	14386
	.byte	14,68
	.word	12799
	.byte	15,0,0,7
	.word	14386
	.byte	10
	.word	14512
	.byte	28
	.byte	'Os_TaskType_s',0,34,134,3,16,40,12
	.byte	'dynamic',0
	.word	14517
	.byte	4,2,35,0,12
	.byte	'entry_function',0
	.word	12974
	.byte	4,2,35,4,12
	.byte	'pset',0
	.word	14224
	.byte	4,2,35,8,12
	.byte	'base_tpmask',0
	.word	14288
	.byte	4,2,35,12,12
	.byte	'tpmask',0
	.word	14288
	.byte	4,2,35,16,12
	.byte	'core_id',0
	.word	216
	.byte	2,2,35,20,12
	.byte	'index',0
	.word	142
	.byte	4,2,35,24,12
	.byte	'stackbudget',0
	.word	12881
	.byte	8,2,35,28,12
	.byte	'activation_count',0
	.word	298
	.byte	1,2,35,36,12
	.byte	'access',0
	.word	298
	.byte	1,2,35,37,12
	.byte	'application',0
	.word	298
	.byte	1,2,35,38,0,24
	.byte	'Os_TaskType',0,34,146,3,3
	.word	14522
	.byte	10
	.word	14522
	.byte	7
	.word	14772
	.byte	24
	.byte	'TaskType',0,34,147,3,47
	.word	14777
	.byte	32
	.byte	'Os_TaskStateType',0,34,155,3,6,4,26
	.byte	'SUSPENDED',0,0,26
	.byte	'READY',0,1,26
	.byte	'WAITING',0,2,26
	.byte	'RUNNING',0,3,0,24
	.byte	'TaskStateType',0,34,156,3,31
	.word	14800
	.byte	13,34,167,3,3,4,12
	.byte	'tpmask',0
	.word	14288
	.byte	4,2,35,0,0,28
	.byte	'Os_ResourceDynType_s',0,34,166,3,16,4,12
	.byte	'saved_priority',0
	.word	14887
	.byte	4,2,35,0,0,24
	.byte	'Os_ResourceDynType',0,34,170,3,3
	.word	14910
	.byte	7
	.word	14910
	.byte	10
	.word	14990
	.byte	28
	.byte	'Os_ResourceType_s',0,34,171,3,16,12,12
	.byte	'dynamic',0
	.word	14995
	.byte	4,2,35,0,12
	.byte	'tpmask',0
	.word	14288
	.byte	4,2,35,4,12
	.byte	'access',0
	.word	298
	.byte	1,2,35,8,0,24
	.byte	'Os_ResourceType',0,34,175,3,3
	.word	15000
	.byte	11,34,181,3,9,12,12
	.byte	'maxallowedvalue',0
	.word	142
	.byte	4,2,35,0,12
	.byte	'ticksperbase',0
	.word	142
	.byte	4,2,35,4,12
	.byte	'mincycle',0
	.word	142
	.byte	4,2,35,8,0,24
	.byte	'AlarmBaseType',0,34,185,3,3
	.word	15099
	.byte	11,34,206,3,9,8,12
	.byte	'Running',0
	.word	298
	.byte	1,2,35,0,12
	.byte	'Pending',0
	.word	298
	.byte	1,2,35,1,12
	.byte	'Delay',0
	.word	142
	.byte	4,2,35,4,0,24
	.byte	'Os_CounterStatusType',0,34,210,3,3
	.word	15194
	.byte	33
	.word	298
	.byte	1,1,7
	.word	15280
	.byte	24
	.byte	'Os_CounterIncrAdvType',0,34,217,3,22
	.word	15287
	.byte	28
	.byte	's_swd',0,34,222,3,12,4,12
	.byte	'count',0
	.word	142
	.byte	4,2,35,0,0,13,34,221,3,3,4,12
	.byte	'sw',0
	.word	15323
	.byte	4,2,35,0,0,28
	.byte	'Os_CounterDynType_s',0,34,220,3,16,4,12
	.byte	'type_dependent',0
	.word	15351
	.byte	4,2,35,0,0,24
	.byte	'Os_CounterDynType',0,34,226,3,3
	.word	15370
	.byte	7
	.word	15370
	.byte	10
	.word	15448
	.byte	28
	.byte	'Os_CounterType_s',0,34,227,3,16,28,12
	.byte	'dynamic',0
	.word	15453
	.byte	4,2,35,0,12
	.byte	'advincr',0
	.word	15292
	.byte	4,2,35,4,12
	.byte	'base',0
	.word	15099
	.byte	12,2,35,8,12
	.byte	'core',0
	.word	13550
	.byte	4,2,35,20,12
	.byte	'access',0
	.word	298
	.byte	1,2,35,24,12
	.byte	'application',0
	.word	298
	.byte	1,2,35,25,0,24
	.byte	'Os_CounterType',0,34,234,3,3
	.word	15458
	.byte	7
	.word	15280
	.byte	10
	.word	15458
	.byte	7
	.word	15610
	.byte	24
	.byte	'CounterType',0,34,235,3,52
	.word	15615
	.byte	32
	.byte	'Os_ScheduleTableStatusType',0,34,240,3,6,4,26
	.byte	'SCHEDULETABLE_STOPPED',0,0,26
	.byte	'SCHEDULETABLE_NEXT',0,1,26
	.byte	'SCHEDULETABLE_WAITING',0,2,26
	.byte	'SCHEDULETABLE_RUNNING',0,3,26
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,24
	.byte	'ScheduleTableStatusType',0,34,241,3,41
	.word	15641
	.byte	10
	.word	.L339-.L95
	.byte	7
	.word	15841
	.byte	24
	.byte	'ScheduleTableType',0,34,128,4,58
	.word	15846
	.byte	28
	.byte	'Os_ScheduleTableDynType_s',0,34,130,4,16,16,12
	.byte	'match',0
	.word	142
	.byte	4,2,35,0,12
	.byte	'next',0
	.word	15851
	.byte	4,2,35,4,12
	.byte	'state',0
	.word	15641
	.byte	4,2,35,8,12
	.byte	'config',0
	.word	216
	.byte	2,2,35,12,0,7
	.word	15878
	.byte	10
	.word	15971
.L339:
	.byte	28
	.byte	'Os_ScheduleTableType_s',0,34,247,3,16,16,12
	.byte	'dynamic',0
	.word	15976
	.byte	4,2,35,0,12
	.byte	'counter',0
	.word	15620
	.byte	4,2,35,4,12
	.byte	'repeat',0
	.word	298
	.byte	1,2,35,8,12
	.byte	'config',0
	.word	216
	.byte	2,2,35,10,12
	.byte	'initial',0
	.word	298
	.byte	1,2,35,12,12
	.byte	'access',0
	.word	298
	.byte	1,2,35,13,12
	.byte	'application',0
	.word	298
	.byte	1,2,35,14,0,24
	.byte	'Os_ScheduleTableType',0,34,255,3,3
	.word	15981
	.byte	10
	.word	15981
	.byte	7
	.word	16161
	.byte	10
	.word	15458
	.byte	7
	.word	16171
	.byte	6
	.word	13274
	.byte	6
	.word	14224
	.byte	6
	.word	14121
	.byte	6
	.word	14782
	.byte	6
	.word	14288
	.byte	6
	.word	298
	.byte	6
	.word	14782
	.byte	28
	.byte	'Os_ControlledCoreType_s',0,34,251,6,16,112,12
	.byte	'TrapInfo',0
	.word	12710
	.byte	8,2,35,0,12
	.byte	'lock_taskaccess',0
	.word	16181
	.byte	4,2,35,8,12
	.byte	'ReadyTasks',0
	.word	16186
	.byte	4,2,35,12,12
	.byte	'RunningISR',0
	.word	16191
	.byte	4,2,35,16,12
	.byte	'RunningTask',0
	.word	16196
	.byte	4,2,35,20,12
	.byte	'RunningTPMask',0
	.word	16201
	.byte	4,2,35,24,12
	.byte	'CurrentMeteredObject',0
	.word	13807
	.byte	4,2,35,28,12
	.byte	'IdleMeter',0
	.word	13604
	.byte	48,2,35,32,12
	.byte	'AppAccess',0
	.word	298
	.byte	1,2,35,80,12
	.byte	'AppOverride',0
	.word	16206
	.byte	1,2,35,81,12
	.byte	'GetStackValueAdjust',0
	.word	12881
	.byte	8,2,35,84,12
	.byte	'InErrorHook',0
	.word	298
	.byte	1,2,35,92,12
	.byte	'ChainTaskRef',0
	.word	16211
	.byte	4,2,35,96,12
	.byte	'GetStackUsageAdjust',0
	.word	12881
	.byte	8,2,35,100,12
	.byte	'InProtectionHook',0
	.word	298
	.byte	1,2,35,108,12
	.byte	'CoreIsActive',0
	.word	298
	.byte	1,2,35,109,12
	.byte	'InShutdownHook',0
	.word	298
	.byte	1,2,35,110,0,24
	.byte	'Os_ControlledCoreType',0,34,141,7,3
	.word	16216
	.byte	7
	.word	142
	.byte	10
	.word	13952
	.byte	7
	.word	16672
	.byte	10
	.word	14522
	.byte	7
	.word	16682
	.byte	7
	.word	13604
	.byte	28
	.byte	'Os_AnyCoreType_s',0,34,151,7,16,96,12
	.byte	'DisableAllImask',0
	.word	142
	.byte	4,2,35,0,12
	.byte	'SuspendAllImask',0
	.word	142
	.byte	4,2,35,4,12
	.byte	'SuspendOSImask',0
	.word	142
	.byte	4,2,35,8,12
	.byte	'DisableAllCount',0
	.word	142
	.byte	4,2,35,12,12
	.byte	'SuspendAllCount',0
	.word	142
	.byte	4,2,35,16,12
	.byte	'SuspendOSCount',0
	.word	142
	.byte	4,2,35,20,12
	.byte	'RestartJumpBuf',0
	.word	12830
	.byte	68,2,35,24,12
	.byte	'Restartable',0
	.word	298
	.byte	1,2,35,92,0,24
	.byte	'Os_AnyCoreType',0,34,160,7,3
	.word	16697
	.byte	24
	.byte	'Can_TxObjPriorityClassType',0,35,219,3,16
	.word	142
	.byte	28
	.byte	'Can_TxHwObjectConfigType',0,35,231,3,16,8,12
	.byte	'MsgObjId',0
	.word	298
	.byte	1,2,35,0,12
	.byte	'HwControllerId',0
	.word	298
	.byte	1,2,35,1,12
	.byte	'TxObjPriorityClass',0
	.word	142
	.byte	4,2,35,4,0,24
	.byte	'Can_TxHwObjectConfigType',0,35,252,3,3
	.word	16974
	.byte	28
	.byte	'Can_RxHwObjectConfigType',0,35,129,4,16,12,12
	.byte	'MaskRef',0
	.word	142
	.byte	4,2,35,0,12
	.byte	'MsgId',0
	.word	142
	.byte	4,2,35,4,12
	.byte	'MsgObjId',0
	.word	298
	.byte	1,2,35,8,12
	.byte	'HwControllerId',0
	.word	298
	.byte	1,2,35,9,0,24
	.byte	'Can_RxHwObjectConfigType',0,35,147,4,3
	.word	17110
	.byte	14,4
	.word	298
	.byte	15,3,0,28
	.byte	'Can_ControllerMOMapConfigType',0,35,181,4,16,4,12
	.byte	'ControllerMOMap',0
	.word	17250
	.byte	4,2,35,0,0,24
	.byte	'Can_ControllerMOMapConfigType',0,35,184,4,3
	.word	17259
	.byte	28
	.byte	'Can_NPCRValueType',0,35,188,4,16,2,12
	.byte	'Can_NPCRValue',0
	.word	216
	.byte	2,2,35,0,0,24
	.byte	'Can_NPCRValueType',0,35,191,4,3
	.word	17360
	.byte	28
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,35,194,4,16,8,12
	.byte	'CanControllerBaudrate',0
	.word	142
	.byte	4,2,35,0,12
	.byte	'CanControllerBaudrateCfg',0
	.word	216
	.byte	2,2,35,4,0,24
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,35,198,4,3
	.word	17435
	.byte	10
	.word	17435
	.byte	7
	.word	17600
	.byte	28
	.byte	'Can_BaudrateConfigPtrType',0,35,201,4,16,4,12
	.byte	'Can_kBaudrateConfigPtr',0
	.word	17605
	.byte	4,2,35,0,0,24
	.byte	'Can_BaudrateConfigPtrType',0,35,204,4,3
	.word	17610
	.byte	28
	.byte	'Can_EventHandlingType',0,35,226,4,16,4,12
	.byte	'CanEventType',0
	.word	17250
	.byte	4,2,35,0,0,24
	.byte	'Can_EventHandlingType',0,35,229,4,3
	.word	17710
	.byte	24
	.byte	'Rte_TransformerErrorCode',0,36,130,1,15
	.word	298
	.byte	24
	.byte	'Rte_TransformerClass',0,36,131,1,15
	.word	298
	.byte	11,36,168,1,9,12,12
	.byte	'in',0
	.word	13550
	.byte	4,2,35,0,12
	.byte	'out',0
	.word	13550
	.byte	4,2,35,4,12
	.byte	'used',0
	.word	216
	.byte	2,2,35,8,12
	.byte	'lost_data',0
	.word	298
	.byte	1,2,35,10,0,24
	.byte	'Rte_QDynType',0,36,173,1,3
	.word	17856
	.byte	25,36,175,1,9,4,26
	.byte	'RTE_DRA',0,0,26
	.byte	'RTE_WOWP',0,1,26
	.byte	'RTE_TASK',0,2,26
	.byte	'RTE_ARE',0,3,26
	.byte	'RTE_EV',0,4,26
	.byte	'RTE_MSI',0,5,0,24
	.byte	'Rte_NotificationType',0,36,182,1,3
	.word	17943
	.byte	14,128,8
	.word	298
	.byte	15,255,7,0,24
	.byte	'Impl_NVM_DstPtrType_1024',0,37,50,15
	.word	18041
	.byte	24
	.byte	'CanIf_u32_impl',0,37,69,16
	.word	142
	.byte	24
	.byte	'CanIf_u16_impl',0,37,71,16
	.word	216
	.byte	24
	.byte	'CanIf_u8_impl',0,37,73,15
	.word	298
	.byte	24
	.byte	'CanIf_ControllerModeType_Enum_impl',0,37,88,15
	.word	298
	.byte	24
	.byte	'CanIf_PduModeType_Enum_impl',0,37,90,15
	.word	298
	.byte	11,37,92,9,2,12
	.byte	'DeviceMode',0
	.word	298
	.byte	1,2,35,0,12
	.byte	'ChannelMode',0
	.word	298
	.byte	1,2,35,1,0,24
	.byte	'CanIf_ControllerStateType_struct_impl',0,37,95,3
	.word	18232
	.byte	24
	.byte	'CanIf_NotifStatusType_Enum_impl',0,37,100,15
	.word	298
	.byte	24
	.byte	'CanSM_boolean_Impl',0,37,120,15
	.word	298
	.byte	24
	.byte	'CanSM_u8_Impl',0,37,123,15
	.word	298
	.byte	24
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,37,128,1,15
	.word	298
	.byte	24
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,37,132,1,15
	.word	298
	.byte	24
	.byte	'CanSM_u16_Impl',0,37,136,1,16
	.word	216
	.byte	24
	.byte	'CanSM_TimerStateType_Enum_impl',0,37,138,1,15
	.word	298
	.byte	11,37,140,1,9,4,12
	.byte	'cntTick_u16',0
	.word	216
	.byte	2,2,35,0,12
	.byte	'stTimer',0
	.word	298
	.byte	1,2,35,2,0,24
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,37,143,1,3
	.word	18573
	.byte	24
	.byte	'Com_impl_u16',0,37,154,1,16
	.word	216
	.byte	24
	.byte	'Com_impl_u8',0,37,157,1,15
	.word	298
	.byte	24
	.byte	'ComM_uint32_Impl',0,37,173,1,16
	.word	142
	.byte	24
	.byte	'ComM_uint16_Impl',0,37,175,1,16
	.word	216
	.byte	24
	.byte	'ComM_uint8_Impl',0,37,177,1,15
	.word	298
	.byte	24
	.byte	'ComM_bool_Impl',0,37,179,1,15
	.word	298
	.byte	11,37,181,1,9,24,12
	.byte	'ChannelState_e',0
	.word	142
	.byte	4,2,35,0,12
	.byte	'LightTimeoutCtr_u32',0
	.word	142
	.byte	4,2,35,4,12
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	216
	.byte	2,2,35,8,12
	.byte	'ChannelMode_u8',0
	.word	298
	.byte	1,2,35,10,12
	.byte	'BusSmMode_u8',0
	.word	298
	.byte	1,2,35,11,12
	.byte	'UserRequestCtr_u8',0
	.word	298
	.byte	1,2,35,12,12
	.byte	'PassiveRequestState_u8',0
	.word	298
	.byte	1,2,35,13,12
	.byte	'PncRequestCtr_u8',0
	.word	298
	.byte	1,2,35,14,12
	.byte	'InhibitionReqStatus_u8',0
	.word	298
	.byte	1,2,35,15,12
	.byte	'NmNetworkRequestStatus_b',0
	.word	298
	.byte	1,2,35,16,12
	.byte	'DiagnosticRequestState_b',0
	.word	298
	.byte	1,2,35,17,12
	.byte	'CommunicationAllowed_b',0
	.word	298
	.byte	1,2,35,18,12
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	298
	.byte	1,2,35,19,12
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	298
	.byte	1,2,35,20,12
	.byte	'NmNetworkModeStatus_b',0
	.word	298
	.byte	1,2,35,21,0,24
	.byte	'ComM_ChannelStruct_Impl',0,37,197,1,3
	.word	18805
	.byte	11,37,206,1,9,10,12
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	216
	.byte	2,2,35,0,12
	.byte	'LimitToNoComCtr_u16',0
	.word	216
	.byte	2,2,35,2,12
	.byte	'RequestedUserMode_t',0
	.word	298
	.byte	1,2,35,4,12
	.byte	'IndicatedUserMode_t',0
	.word	298
	.byte	1,2,35,5,12
	.byte	'numChannelsInFullCom_u8',0
	.word	298
	.byte	1,2,35,6,12
	.byte	'numChannelsInSilentCom_u8',0
	.word	298
	.byte	1,2,35,7,12
	.byte	'numChannelsInNoCom_u8',0
	.word	298
	.byte	1,2,35,8,0,24
	.byte	'ComM_UserStruct_Impl',0,37,214,1,3
	.word	19309
	.byte	24
	.byte	'Dcm_IOOperationResponseType',0,37,252,1,15
	.word	298
	.byte	24
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	37,138,2,15
	.word	298
	.byte	24
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,37,146,2,15
	.word	298
	.byte	24
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,37,150,2,15
	.word	298
	.byte	24
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,37,154,2,15
	.word	298
	.byte	24
	.byte	'Dem_DTCFormatType',0,37,160,2,15
	.word	298
	.byte	24
	.byte	'Dem_DTCOriginType',0,37,162,2,15
	.word	298
	.byte	24
	.byte	'Dem_EventIdType',0,37,168,2,16
	.word	216
	.byte	24
	.byte	'Dem_EventStatusType',0,37,170,2,15
	.word	298
	.byte	24
	.byte	'Dem_InitMonitorReasonType',0,37,176,2,15
	.word	298
	.byte	24
	.byte	'Dem_OperationCycleIdType',0,37,179,2,15
	.word	298
	.byte	24
	.byte	'NvM_BlockIdType',0,37,215,2,16
	.word	216
	.byte	24
	.byte	'NvM_RequestResultType',0,37,225,2,15
	.word	298
	.byte	24
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,37,243,3,34
	.word	18052
	.byte	14,128,8
	.word	298
	.byte	15,255,7,0,24
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,37,246,3,34
	.word	18052
	.byte	24
	.byte	'Dem_DTCGroupIdType',0,38,49,15
	.word	298
	.byte	24
	.byte	'Dem_DtcIdType',0,38,50,16
	.word	216
	.byte	24
	.byte	'Dem_ClientIdType',0,38,53,15
	.word	298
	.byte	24
	.byte	'Dem_DtcCodeType',0,38,55,16
	.word	142
	.byte	24
	.byte	'Dem_boolean_least',0,38,60,17
	.word	298
	.byte	24
	.byte	'Dem_EventCategoryType',0,38,62,15
	.word	298
	.byte	24
	.byte	'Dem_ReturnControlDTCSettingType',0,38,84,15
	.word	298
	.byte	24
	.byte	'Dem_DTCSeverityType',0,38,217,1,15
	.word	298
	.byte	24
	.byte	'Dem_DTCGroupType',0,38,133,2,16
	.word	142
	.byte	24
	.byte	'Dem_DebugDataType',0,38,131,3,16
	.word	142
	.byte	24
	.byte	'Dem_DTCKindType',0,38,145,3,16
	.word	298
	.byte	24
	.byte	'Dem_TriggerType',0,38,167,3,15
	.word	298
	.byte	24
	.byte	'rba_BswSrv_uint64',0,1,66,28
	.word	12106
	.byte	24
	.byte	'Dem_EventIdIterator',0,4,27,22
	.word	958
	.byte	24
	.byte	'Dem_DtcIdIterator',0,4,197,1,22
	.word	958
	.byte	24
	.byte	'Dem_DtcGroupIdIterator',0,4,230,1,21
	.word	958
	.byte	24
	.byte	'Dem_EventIdListIterator',0,4,174,2,3
	.word	1473
	.byte	24
	.byte	'Dem_DtcIdListIterator',0,4,216,2,3
	.word	1759
	.byte	11,4,218,2,9,4,12
	.byte	'dtcStartIndex',0
	.word	216
	.byte	2,2,35,0,12
	.byte	'dtcEndIndex',0
	.word	216
	.byte	2,2,35,2,0,24
	.byte	'Dem_DtcGroupIdMapToDtcIdType',0,4,221,2,3
	.word	20863
	.byte	14,8
	.word	20863
	.byte	15,1,0,10
	.word	20952
	.byte	34
	.byte	'Dem_DtcGroupIdMapToDtcId',0,4,224,2,43
	.word	20961
	.byte	1,1,25,39,31,9,4,26
	.byte	'MEMIF_JOB_OK',0,0,26
	.byte	'MEMIF_JOB_FAILED',0,1,26
	.byte	'MEMIF_JOB_PENDING',0,2,26
	.byte	'MEMIF_JOB_CANCELED',0,3,26
	.byte	'MEMIF_BLOCK_INCONSISTENT',0,4,26
	.byte	'MEMIF_BLOCK_INVALID',0,5,0,24
	.byte	'MemIf_JobResultType',0,39,39,2
	.word	21002
	.byte	25,40,49,9,4,26
	.byte	'NVM_PRV_ACTIVITY_NOT_INIT',0,0,26
	.byte	'NVM_PRV_ACTIVITY_IDLE',0,1,26
	.byte	'NVM_PRV_ACTIVITY_ARBITRATE',0,2,26
	.byte	'NVM_PRV_ACTIVITY_JOB_START',0,3,26
	.byte	'NVM_PRV_ACTIVITY_POLL_RESULT',0,4,26
	.byte	'NVM_PRV_ACTIVITY_JOB_COMPLETE',0,5,26
	.byte	'NVM_PRV_ACTIVITY_RESULT_EVAL',0,6,0,24
	.byte	'NvM_Prv_Activities_ten',0,40,58,3
	.word	21160
	.byte	25,40,104,9,4,26
	.byte	'NvM_Prv_idJob_Idle_e',0,0,26
	.byte	'NvM_Prv_idJob_Read_e',0,1,26
	.byte	'NvM_Prv_idJob_Write_e',0,2,26
	.byte	'NvM_Prv_idJob_Erase_e',0,3,26
	.byte	'NvM_Prv_idJob_Restore_e',0,4,26
	.byte	'NvM_Prv_idJob_Maintain_e',0,5,26
	.byte	'NvM_Prv_idJob_Validate_e',0,6,26
	.byte	'NvM_Prv_idJob_Invalidate_e',0,7,26
	.byte	'NvM_Prv_idJob_ReadIdConfigForReadAll_e',0,8,26
	.byte	'NvM_Prv_idJob_InvalidateForFirstInitAll_e',0,9,26
	.byte	'NvM_Prv_idJob_RestoreForImplicitRecovery_e',0,10,26
	.byte	'NvM_Prv_idJob_InvalidateForRemoveNonResistant_e',0,11,26
	.byte	'NvM_Prv_idJob_Invalid_e',0,12,26
	.byte	'NvM_Prv_idJob_Count_e',0,13,0,24
	.byte	'NvM_Prv_idJob_ten',0,40,115,3
	.word	21401
	.byte	24
	.byte	'NvM_Prv_ServiceBit_tuo',0,40,168,1,16
	.word	216
	.byte	24
	.byte	'NvM_Prv_idService_tuo',0,40,173,1,15
	.word	298
	.byte	24
	.byte	'NvM_Prv_idQueue_tuo',0,40,206,1,15
	.word	298
	.byte	11,40,210,1,9,12,12
	.byte	'idService_uo',0
	.word	298
	.byte	1,2,35,0,12
	.byte	'idBlock_uo',0
	.word	216
	.byte	2,2,35,2,12
	.byte	'ServiceBit_uo',0
	.word	216
	.byte	2,2,35,4,12
	.byte	'BlockData_pv',0
	.word	13550
	.byte	4,2,35,8,0,24
	.byte	'NvM_Prv_QueueEntry_tst',0,40,225,1,3
	.word	21958
	.byte	11,40,227,1,9,20,12
	.byte	'idJob_en',0
	.word	21401
	.byte	4,2,35,0,12
	.byte	'idBlock_uo',0
	.word	216
	.byte	2,2,35,4,12
	.byte	'RamBlock_pu8',0
	.word	2138
	.byte	4,2,35,8,12
	.byte	'idxDataset_u8',0
	.word	298
	.byte	1,2,35,12,12
	.byte	'Result_en',0
	.word	21002
	.byte	4,2,35,16,0,24
	.byte	'NvM_Prv_JobData_tst',0,40,240,1,3
	.word	22084
	.byte	24
	.byte	'Dem_EvtStateType',0,41,151,1,15
	.word	298
	.byte	24
	.byte	'Dem_DtcStateType',0,42,47,15
	.word	298
	.byte	11,5,47,9,12,12
	.byte	'DtcCode',0
	.word	142
	.byte	4,2,35,0,12
	.byte	'Severity',0
	.word	298
	.byte	1,2,35,4,12
	.byte	'Kind',0
	.word	298
	.byte	1,2,35,5,12
	.byte	'DtcCode_Is_Index',0
	.word	298
	.byte	1,2,35,6,12
	.byte	'Func_Unit',0
	.word	298
	.byte	1,2,35,7,12
	.byte	'Nv_Storage',0
	.word	298
	.byte	1,2,35,8,0,24
	.byte	'Dem_Cfg_DtcType',0,5,55,3
	.word	22273
	.byte	14,60
	.word	22273
	.byte	15,4,0,10
	.word	22417
	.byte	34
	.byte	'Dem_Cfg_Dtc',0,5,59,30
	.word	22426
	.byte	1,1,24
	.byte	'Dem_EvMemOccurrenceCounterType',0,20,90,21
	.word	298
	.byte	24
	.byte	'Dem_EvMemAgingCounterType',0,20,99,21
	.word	298
	.byte	24
	.byte	'Dem_EvMemHdrType',0,20,141,1,4
	.word	6039
	.byte	24
	.byte	'Dem_EvMemEventMemoryType',0,20,213,1,4
	.word	6069
	.byte	24
	.byte	'Dem_OperationCycleList',0,43,23,15
	.word	298
	.byte	14,5
	.word	298
	.byte	15,4,0,14,10
	.word	216
	.byte	15,4,0,11,44,9,9,18,12
	.byte	'OperationCycleStates',0
	.word	298
	.byte	1,2,35,0,12
	.byte	'OperationCycleQualified',0
	.word	298
	.byte	1,2,35,1,12
	.byte	'Overflow',0
	.word	22617
	.byte	5,2,35,2,12
	.byte	'DtcIdsByOccurrenceTime',0
	.word	22626
	.byte	10,2,35,8,0,24
	.byte	'Dem_GenericNvDataType',0,44,24,4
	.word	22635
	.byte	24
	.byte	'Dem_NvmBlockIdType',0,45,14,34
	.word	298
	.byte	13,45,16,9,20,12
	.byte	'evMemData',0
	.word	6069
	.byte	20,2,35,0,12
	.byte	'genericNvData',0
	.word	22635
	.byte	18,2,35,0,0,24
	.byte	'Dem_NvMStorageBufferData',0,45,37,3
	.word	22811
	.byte	24
	.byte	'Dem_NvmBlockStatusType',0,45,59,15
	.word	298
	.byte	24
	.byte	'Dem_NvmResultType',0,45,78,31
	.word	298
	.byte	24
	.byte	'Dem_ClientClearMachineType',0,10,37,3
	.word	9837
	.byte	11,11,23,9,4,12
	.byte	'dtcGroupCode',0
	.word	142
	.byte	4,2,35,0,0,24
	.byte	'Dem_DtcGroupParam',0,11,26,3
	.word	22984
	.byte	24
	.byte	'DemControlDtcGroupType',0,11,28,17
	.word	298
	.byte	14,8
	.word	22984
	.byte	15,1,0
.L309:
	.byte	10
	.word	23069
	.byte	24
	.byte	'Dem_EnCoList',0,46,31,15
	.word	298
	.byte	24
	.byte	'Dem_StoCoList',0,47,32,15
	.word	298
	.byte	7
	.word	298
	.byte	35
	.word	298
	.byte	1,1,31
	.word	23126
	.byte	0,7
	.word	23131
	.byte	24
	.byte	'Dem_EvtClearAllowedFncType',0,15,12,26
	.word	23144
	.byte	35
	.word	298
	.byte	1,1,31
	.word	298
	.byte	0,7
	.word	23184
	.byte	24
	.byte	'Dem_InitMForEAllowedFncType',0,16,38,27
	.word	23197
	.byte	10
	.word	13544
	.byte	7
	.word	23238
	.byte	35
	.word	958
	.byte	1,1,31
	.word	216
	.byte	31
	.word	23126
	.byte	31
	.word	23243
	.byte	31
	.word	216
	.byte	0,7
	.word	23248
	.byte	24
	.byte	'Dem_DebFilter',0,48,12,23
	.word	23276
	.byte	2
	.byte	'long int',0,4,5,7
	.word	23303
	.byte	30,1,1,31
	.word	23243
	.byte	31
	.word	216
	.byte	31
	.word	23315
	.byte	31
	.word	23315
	.byte	0,7
	.word	23320
	.byte	24
	.byte	'Dem_DebGetLimits',0,48,13,23
	.word	23344
	.byte	30,1,1,31
	.word	216
	.byte	31
	.word	23243
	.byte	31
	.word	216
	.byte	0,7
	.word	23374
	.byte	24
	.byte	'Dem_DebCyclic',0,48,14,16
	.word	23393
	.byte	24
	.byte	'Dem_DebouncedActionType',0,48,35,21
	.word	958
	.byte	13,49,37,9,4,12
	.byte	'EnforceAlignment',0
	.word	142
	.byte	4,2,35,0,12
	.byte	'Buffer',0
	.word	17250
	.byte	4,2,35,0,0,24
	.byte	'Dem_EvBuffEnvDataAlignedType',0,49,47,3
	.word	23452
	.byte	11,49,49,9,16,12
	.byte	'envData',0
	.word	23452
	.byte	4,2,35,0,12
	.byte	'eventType',0
	.word	298
	.byte	1,2,35,4,12
	.byte	'eventId',0
	.word	216
	.byte	2,2,35,6,12
	.byte	'debug0',0
	.word	142
	.byte	4,2,35,8,12
	.byte	'debug1',0
	.word	142
	.byte	4,2,35,12,0,24
	.byte	'Dem_EvBuffEvent',0,49,75,2
	.word	23537
	.byte	11,23,29,9,1,12
	.byte	'state',0
	.word	298
	.byte	1,2,35,0,0,24
	.byte	'Dem_DtcState',0,23,31,3
	.word	23652
	.byte	14,5
	.word	23652
	.byte	15,4,0,34
	.byte	'Dem_AllDTCsState',0,23,92,5
	.word	23694
	.byte	1,1,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L96:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,46,1,3,8,32,13,58,15,59,15
	.byte	57,15,73,19,54,15,39,12,0,0,4,5,0,3,8,58,15,59,15,57,15,73,19,0,0,5,11,0,0,0,6,53,0,73,19,0,0,7,15,0,73
	.byte	19,0,0,8,46,1,3,8,32,13,58,15,59,15,57,15,54,15,39,12,0,0,9,11,1,0,0,10,38,0,73,19,0,0,11,19,1,58,15,59
	.byte	15,57,15,11,15,0,0,12,13,0,3,8,73,19,11,15,56,9,0,0,13,23,1,58,15,59,15,57,15,11,15,0,0,14,1,1,11,15,73
	.byte	19,0,0,15,33,0,47,15,0,0,16,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,17,46,1,49,19
	.byte	0,0,18,5,0,49,19,0,0,19,29,1,49,19,0,0,20,11,0,49,19,0,0,21,11,1,49,19,0,0,22,46,1,3,8,58,15,59,15,57
	.byte	15,54,15,39,12,63,12,60,12,0,0,23,21,0,54,15,0,0,24,22,0,3,8,58,15,59,15,57,15,73,19,0,0,25,4,1,58,15
	.byte	59,15,57,15,11,15,0,0,26,40,0,3,8,28,13,0,0,27,21,0,54,15,39,12,0,0,28,19,1,3,8,58,15,59,15,57,15,11,15
	.byte	0,0,29,59,0,3,8,0,0,30,21,1,54,15,39,12,0,0,31,5,0,73,19,0,0,32,4,1,3,8,58,15,59,15,57,15,11,15,0,0,33
	.byte	21,0,73,19,54,15,39,12,0,0,34,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,35,21,1,73,19,54,15,39
	.byte	12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L97:
	.word	.L341-.L340
.L340:
	.half	3
	.word	.L343-.L342
.L342:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_Lib.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientBaseHandling.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTC_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits32.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientClearMachine.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCGroup.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_BitArray.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\enco\\Dem_EnableCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_ByteOrderUtils.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvTrigger.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\deb\\Dem_Deb.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemTypes.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemAging.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMem.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCGroup.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Det\\api\\Det.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCStatusByte.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientHandlingTypes.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_NodeId.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\api\\Dem_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\MemIf\\api\\MemIf_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\NvM\\api\\NvM_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_OperationCycle.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_GenericNvData.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_EnableCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_StorageCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\deb\\Dem_DebBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuffEvent.h',0,0,0,0,0
.L343:
.L341:
	.sdecl	'.debug_info',debug,cluster('Dem_DisableDTCSetting')
	.sect	'.debug_info'
.L98:
	.word	1113
	.half	3
	.word	.L99
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCGroup.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L101,.L100
	.byte	2
	.word	.L94
	.byte	3
	.byte	'Dem_DisableDTCSetting',0,1,140,1,33
	.word	.L122
	.byte	1,1,1
	.word	.L91,.L123,.L90
	.byte	4
	.byte	'DTCGroup',0,1,140,1,73
	.word	.L124,.L125
	.byte	4
	.byte	'DTCKind',0,1,140,1,99
	.word	.L122,.L126
	.byte	5
	.word	.L91,.L123
	.byte	6
	.byte	'DtcGroupId',0,1,144,1,21
	.word	.L122,.L127
	.byte	7
	.word	.L128,.L129,.L45
	.byte	8
	.word	.L130,.L131
	.byte	9
	.word	.L132,.L129,.L45
	.byte	0,7
	.word	.L133,.L134,.L58
	.byte	8
	.word	.L135,.L136
	.byte	8
	.word	.L137,.L138
	.byte	8
	.word	.L139,.L140
	.byte	10
	.word	.L141,.L134,.L58
	.byte	6
	.byte	'dtcIt',0,1,25,27
	.word	.L142,.L143
	.byte	6
	.byte	'AnyDTCSettingDisabled',0,1,26,23
	.word	.L122,.L144
	.byte	6
	.byte	'LockCounter',0,1,27,19
	.word	.L145,.L146
	.byte	7
	.word	.L147,.L148,.L149
	.byte	8
	.word	.L150,.L151
	.byte	8
	.word	.L152,.L153
	.byte	10
	.word	.L154,.L148,.L149
	.byte	7
	.word	.L128,.L148,.L51
	.byte	8
	.word	.L130,.L131
	.byte	9
	.word	.L132,.L148,.L51
	.byte	0,0,0,7
	.word	.L155,.L54,.L55
	.byte	8
	.word	.L156,.L157
	.byte	9
	.word	.L158,.L54,.L55
	.byte	0,7
	.word	.L159,.L160,.L53
	.byte	8
	.word	.L161,.L162
	.byte	9
	.word	.L163,.L160,.L53
	.byte	0,7
	.word	.L164,.L53,.L57
	.byte	8
	.word	.L165,.L166
	.byte	9
	.word	.L167,.L53,.L57
	.byte	0,7
	.word	.L168,.L169,.L170
	.byte	8
	.word	.L171,.L172
	.byte	9
	.word	.L173,.L169,.L170
	.byte	0,10
	.word	.L174,.L50,.L58
	.byte	6
	.byte	'dtcId',0,1,53,27
	.word	.L175,.L176
	.byte	7
	.word	.L177,.L178,.L179
	.byte	8
	.word	.L180,.L181
	.byte	9
	.word	.L182,.L178,.L179
	.byte	0,7
	.word	.L183,.L184,.L62
	.byte	8
	.word	.L185,.L186
	.byte	9
	.word	.L187,.L184,.L62
	.byte	0,7
	.word	.L188,.L62,.L63
	.byte	8
	.word	.L189,.L190
	.byte	9
	.word	.L191,.L62,.L63
	.byte	0,7
	.word	.L183,.L192,.L65
	.byte	8
	.word	.L185,.L186
	.byte	9
	.word	.L187,.L192,.L65
	.byte	0,7
	.word	.L183,.L193,.L68
	.byte	8
	.word	.L185,.L186
	.byte	9
	.word	.L187,.L193,.L68
	.byte	0,7
	.word	.L194,.L68,.L71
	.byte	8
	.word	.L195,.L196
	.byte	10
	.word	.L197,.L68,.L71
	.byte	7
	.word	.L198,.L199,.L70
	.byte	8
	.word	.L200,.L201
	.byte	8
	.word	.L202,.L203
	.byte	10
	.word	.L204,.L199,.L70
	.byte	7
	.word	.L205,.L199,.L69
	.byte	8
	.word	.L206,.L207
	.byte	8
	.word	.L208,.L209
	.byte	9
	.word	.L210,.L199,.L69
	.byte	0,0,0,0,0,7
	.word	.L211,.L212,.L59
	.byte	8
	.word	.L213,.L214
	.byte	9
	.word	.L215,.L212,.L59
	.byte	0,7
	.word	.L216,.L217,.L218
	.byte	8
	.word	.L219,.L220
	.byte	9
	.word	.L221,.L217,.L218
	.byte	0,7
	.word	.L168,.L218,.L58
	.byte	8
	.word	.L171,.L172
	.byte	9
	.word	.L173,.L218,.L58
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_DisableDTCSetting')
	.sect	'.debug_abbrev'
.L99:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_DisableDTCSetting')
	.sect	'.debug_line'
.L100:
	.word	.L345-.L344
.L344:
	.half	3
	.word	.L347-.L346
.L346:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCGroup.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCGroup.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTC_DataStructures.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0,0
.L347:
	.byte	5,33,7,0,5,2
	.word	.L91
	.byte	3,139,1,1,5,65,9
	.half	.L322-.L91
	.byte	3,4,1,5,2,9
	.half	.L321-.L322
	.byte	3,4,1,4,2,5,26,7,9
	.half	.L129-.L321
	.byte	3,237,0,1,5,23,9
	.half	.L348-.L129
	.byte	1,5,4,9
	.half	.L349-.L348
	.byte	1,4,1,5,7,9
	.half	.L45-.L349
	.byte	3,149,127,1,5,11,7,9
	.half	.L350-.L45
	.byte	3,2,1,5,4,9
	.half	.L324-.L350
	.byte	1,5,3,9
	.half	.L44-.L324
	.byte	3,8,1,5,11,7,9
	.half	.L351-.L44
	.byte	3,2,1,5,4,9
	.half	.L325-.L351
	.byte	1,5,40,9
	.half	.L48-.L325
	.byte	3,7,1,5,52,9
	.half	.L352-.L48
	.byte	1,5,45,9
	.half	.L134-.L352
	.byte	3,241,126,1,5,31,9
	.half	.L326-.L134
	.byte	3,1,1,5,5,9
	.half	.L327-.L326
	.byte	3,2,1,5,52,7,9
	.half	.L353-.L327
	.byte	3,4,1,4,2,5,26,9
	.half	.L148-.L353
	.byte	3,224,1,1,5,23,9
	.half	.L354-.L148
	.byte	1,5,4,9
	.half	.L323-.L354
	.byte	1,5,7,9
	.half	.L51-.L323
	.byte	3,230,0,1,5,3,7,9
	.half	.L355-.L51
	.byte	3,2,1,5,11,9
	.half	.L52-.L355
	.byte	3,3,1,5,35,9
	.half	.L356-.L52
	.byte	1,5,45,9
	.half	.L357-.L356
	.byte	1,5,9,9
	.half	.L358-.L357
	.byte	1,5,46,9
	.half	.L359-.L358
	.byte	3,1,1,5,10,9
	.half	.L360-.L359
	.byte	1,4,1,5,105,9
	.half	.L149-.L360
	.byte	3,180,125,1,4,2,5,14,9
	.half	.L54-.L149
	.byte	3,219,2,1,5,4,9
	.half	.L361-.L54
	.byte	1,4,1,5,72,9
	.half	.L55-.L361
	.byte	3,168,125,1,5,24,9
	.half	.L362-.L55
	.byte	3,3,1,5,29,9
	.half	.L363-.L362
	.byte	3,5,1,5,44,9
	.half	.L56-.L363
	.byte	3,118,1,4,2,5,7,9
	.half	.L160-.L56
	.byte	3,213,2,1,5,12,9
	.half	.L364-.L160
	.byte	1,5,14,9
	.half	.L53-.L364
	.byte	3,123,1,5,24,9
	.half	.L365-.L53
	.byte	1,5,19,9
	.half	.L366-.L365
	.byte	1,5,4,9
	.half	.L367-.L366
	.byte	1,4,1,5,105,9
	.half	.L57-.L367
	.byte	3,175,125,1,4,3,5,5,7,9
	.half	.L169-.L57
	.byte	3,25,1,5,30,9
	.half	.L368-.L169
	.byte	1,4,1,5,27,9
	.half	.L170-.L368
	.byte	3,118,1,5,35,9
	.half	.L50-.L170
	.byte	3,5,1,5,33,9
	.half	.L328-.L50
	.byte	1,5,36,9
	.half	.L369-.L328
	.byte	3,9,1,4,2,5,12,9
	.half	.L178-.L369
	.byte	3,142,1,1,5,10,9
	.half	.L370-.L178
	.byte	1,4,1,5,76,9
	.half	.L179-.L370
	.byte	3,242,126,1,5,63,9
	.half	.L60-.L179
	.byte	3,2,1,4,2,5,27,9
	.half	.L184-.L60
	.byte	3,155,1,1,5,11,9
	.half	.L371-.L184
	.byte	1,5,4,9
	.half	.L372-.L371
	.byte	1,4,4,5,20,9
	.half	.L62-.L372
	.byte	3,230,126,1,5,9,9
	.half	.L373-.L62
	.byte	1,5,20,9
	.half	.L374-.L373
	.byte	1,5,26,9
	.half	.L375-.L374
	.byte	1,5,2,9
	.half	.L376-.L375
	.byte	1,4,1,5,13,9
	.half	.L63-.L376
	.byte	3,127,1,5,64,7,9
	.half	.L377-.L63
	.byte	3,2,1,4,2,5,27,9
	.half	.L192-.L377
	.byte	3,153,1,1,5,11,9
	.half	.L378-.L192
	.byte	1,5,4,9
	.half	.L379-.L378
	.byte	1,4,1,5,72,9
	.half	.L65-.L379
	.byte	3,231,126,1,5,28,9
	.half	.L380-.L65
	.byte	3,3,1,5,33,9
	.half	.L381-.L380
	.byte	3,5,1,5,19,9
	.half	.L64-.L381
	.byte	3,5,1,5,100,7,9
	.half	.L382-.L64
	.byte	1,4,2,5,27,9
	.half	.L193-.L382
	.byte	3,140,1,1,5,11,9
	.half	.L383-.L193
	.byte	1,5,4,9
	.half	.L384-.L383
	.byte	1,4,5,5,35,9
	.half	.L68-.L384
	.byte	3,204,0,1,5,51,9
	.half	.L385-.L68
	.byte	1,5,58,9
	.half	.L386-.L385
	.byte	1,5,66,9
	.half	.L387-.L386
	.byte	1,4,6,5,28,9
	.half	.L199-.L387
	.byte	3,151,126,1,5,47,9
	.half	.L388-.L199
	.byte	1,5,5,9
	.half	.L389-.L388
	.byte	1,5,73,9
	.half	.L69-.L389
	.byte	3,4,1,5,5,9
	.half	.L390-.L69
	.byte	1,4,5,5,10,9
	.half	.L70-.L390
	.byte	3,229,1,1,5,2,9
	.half	.L391-.L70
	.byte	1,4,1,5,39,9
	.half	.L71-.L391
	.byte	3,170,126,1,5,101,9
	.half	.L67-.L71
	.byte	3,109,1,4,2,5,6,9
	.half	.L212-.L67
	.byte	3,152,1,1,5,9,9
	.half	.L392-.L212
	.byte	1,4,1,5,70,9
	.half	.L59-.L392
	.byte	3,232,126,1,4,2,5,23,9
	.half	.L217-.L59
	.byte	3,147,1,1,5,18,9
	.half	.L393-.L217
	.byte	1,5,12,9
	.half	.L394-.L393
	.byte	1,5,31,7,9
	.half	.L395-.L394
	.byte	1,5,23,9
	.half	.L396-.L395
	.byte	1,5,4,9
	.half	.L73-.L396
	.byte	1,4,1,5,76,9
	.half	.L75-.L73
	.byte	3,237,126,1,4,3,5,5,7,9
	.half	.L218-.L75
	.byte	3,124,1,5,30,9
	.half	.L397-.L218
	.byte	1,4,1,5,9,9
	.half	.L58-.L397
	.byte	3,241,0,1,5,2,9
	.half	.L398-.L58
	.byte	1,5,1,9
	.half	.L47-.L398
	.byte	3,1,1,7,9
	.half	.L102-.L47
	.byte	0,1,1
.L345:
	.sdecl	'.debug_ranges',debug,cluster('Dem_DisableDTCSetting')
	.sect	'.debug_ranges'
.L101:
	.word	-1,.L91,0,.L102-.L91,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_EnableDTCSetting')
	.sect	'.debug_info'
.L103:
	.word	1108
	.half	3
	.word	.L104
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCGroup.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L106,.L105
	.byte	2
	.word	.L94
	.byte	3
	.byte	'Dem_EnableDTCSetting',0,1,107,33
	.word	.L122
	.byte	1,1,1
	.word	.L89,.L222,.L88
	.byte	4
	.byte	'DTCGroup',0,1,107,72
	.word	.L124,.L223
	.byte	4
	.byte	'DTCKind',0,1,107,98
	.word	.L122,.L224
	.byte	5
	.word	.L89,.L222
	.byte	6
	.byte	'DtcGroupId',0,1,110,21
	.word	.L122,.L225
	.byte	7
	.word	.L128,.L226,.L12
	.byte	8
	.word	.L130,.L227
	.byte	9
	.word	.L132,.L226,.L12
	.byte	0,7
	.word	.L133,.L228,.L25
	.byte	8
	.word	.L135,.L229
	.byte	8
	.word	.L137,.L230
	.byte	8
	.word	.L139,.L231
	.byte	10
	.word	.L141,.L228,.L25
	.byte	6
	.byte	'dtcIt',0,1,25,27
	.word	.L142,.L232
	.byte	6
	.byte	'AnyDTCSettingDisabled',0,1,26,23
	.word	.L122,.L233
	.byte	6
	.byte	'LockCounter',0,1,27,19
	.word	.L145,.L234
	.byte	7
	.word	.L147,.L235,.L236
	.byte	8
	.word	.L150,.L237
	.byte	8
	.word	.L152,.L238
	.byte	10
	.word	.L154,.L235,.L236
	.byte	7
	.word	.L128,.L235,.L18
	.byte	8
	.word	.L130,.L227
	.byte	9
	.word	.L132,.L235,.L18
	.byte	0,0,0,7
	.word	.L155,.L21,.L22
	.byte	8
	.word	.L156,.L239
	.byte	9
	.word	.L158,.L21,.L22
	.byte	0,7
	.word	.L159,.L240,.L20
	.byte	8
	.word	.L161,.L241
	.byte	9
	.word	.L163,.L240,.L20
	.byte	0,7
	.word	.L164,.L20,.L24
	.byte	8
	.word	.L165,.L242
	.byte	9
	.word	.L167,.L20,.L24
	.byte	0,7
	.word	.L168,.L243,.L244
	.byte	8
	.word	.L171,.L245
	.byte	9
	.word	.L173,.L243,.L244
	.byte	0,10
	.word	.L174,.L17,.L25
	.byte	6
	.byte	'dtcId',0,1,53,27
	.word	.L175,.L246
	.byte	7
	.word	.L177,.L247,.L248
	.byte	8
	.word	.L180,.L249
	.byte	9
	.word	.L182,.L247,.L248
	.byte	0,7
	.word	.L183,.L250,.L29
	.byte	8
	.word	.L185,.L251
	.byte	9
	.word	.L187,.L250,.L29
	.byte	0,7
	.word	.L188,.L29,.L30
	.byte	8
	.word	.L189,.L252
	.byte	9
	.word	.L191,.L29,.L30
	.byte	0,7
	.word	.L183,.L253,.L32
	.byte	8
	.word	.L185,.L251
	.byte	9
	.word	.L187,.L253,.L32
	.byte	0,7
	.word	.L183,.L254,.L35
	.byte	8
	.word	.L185,.L251
	.byte	9
	.word	.L187,.L254,.L35
	.byte	0,7
	.word	.L194,.L35,.L38
	.byte	8
	.word	.L195,.L255
	.byte	10
	.word	.L197,.L35,.L38
	.byte	7
	.word	.L198,.L256,.L37
	.byte	8
	.word	.L200,.L257
	.byte	8
	.word	.L202,.L258
	.byte	10
	.word	.L204,.L256,.L37
	.byte	7
	.word	.L205,.L256,.L36
	.byte	8
	.word	.L206,.L259
	.byte	8
	.word	.L208,.L260
	.byte	9
	.word	.L210,.L256,.L36
	.byte	0,0,0,0,0,7
	.word	.L211,.L261,.L26
	.byte	8
	.word	.L213,.L262
	.byte	9
	.word	.L215,.L261,.L26
	.byte	0,7
	.word	.L216,.L263,.L264
	.byte	8
	.word	.L219,.L265
	.byte	9
	.word	.L221,.L263,.L264
	.byte	0,7
	.word	.L168,.L264,.L25
	.byte	8
	.word	.L171,.L245
	.byte	9
	.word	.L173,.L264,.L25
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EnableDTCSetting')
	.sect	'.debug_abbrev'
.L104:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_EnableDTCSetting')
	.sect	'.debug_line'
.L105:
	.word	.L400-.L399
.L399:
	.half	3
	.word	.L402-.L401
.L401:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCGroup.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCGroup.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTC_DataStructures.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0,0
.L402:
	.byte	5,33,7,0,5,2
	.word	.L89
	.byte	3,234,0,1,5,65,9
	.half	.L313-.L89
	.byte	3,3,1,5,2,9
	.half	.L312-.L313
	.byte	3,4,1,4,2,5,26,7,9
	.half	.L226-.L312
	.byte	3,143,1,1,5,23,9
	.half	.L403-.L226
	.byte	1,5,4,9
	.half	.L404-.L403
	.byte	1,4,1,5,7,9
	.half	.L12-.L404
	.byte	3,243,126,1,5,11,7,9
	.half	.L405-.L12
	.byte	3,2,1,5,4,9
	.half	.L315-.L405
	.byte	1,5,3,9
	.half	.L11-.L315
	.byte	3,8,1,5,11,7,9
	.half	.L406-.L11
	.byte	3,2,1,5,4,9
	.half	.L316-.L406
	.byte	1,5,40,9
	.half	.L15-.L316
	.byte	3,7,1,5,52,9
	.half	.L407-.L15
	.byte	1,5,45,9
	.half	.L228-.L407
	.byte	3,147,127,1,5,31,9
	.half	.L317-.L228
	.byte	3,1,1,5,5,9
	.half	.L318-.L317
	.byte	3,2,1,5,52,7,9
	.half	.L408-.L318
	.byte	3,4,1,4,2,5,26,9
	.half	.L235-.L408
	.byte	3,224,1,1,5,23,9
	.half	.L409-.L235
	.byte	1,5,4,9
	.half	.L314-.L409
	.byte	1,5,7,9
	.half	.L18-.L314
	.byte	3,230,0,1,5,3,7,9
	.half	.L410-.L18
	.byte	3,2,1,5,11,9
	.half	.L19-.L410
	.byte	3,3,1,5,35,9
	.half	.L411-.L19
	.byte	1,5,45,9
	.half	.L412-.L411
	.byte	1,5,9,9
	.half	.L413-.L412
	.byte	1,5,46,9
	.half	.L414-.L413
	.byte	3,1,1,5,10,9
	.half	.L415-.L414
	.byte	1,4,1,5,105,9
	.half	.L236-.L415
	.byte	3,180,125,1,4,2,5,14,9
	.half	.L21-.L236
	.byte	3,219,2,1,5,4,9
	.half	.L416-.L21
	.byte	1,4,1,5,72,9
	.half	.L22-.L416
	.byte	3,168,125,1,5,24,9
	.half	.L417-.L22
	.byte	3,3,1,5,29,9
	.half	.L418-.L417
	.byte	3,5,1,5,44,9
	.half	.L23-.L418
	.byte	3,118,1,4,2,5,7,9
	.half	.L240-.L23
	.byte	3,213,2,1,5,12,9
	.half	.L419-.L240
	.byte	1,5,14,9
	.half	.L20-.L419
	.byte	3,123,1,5,24,9
	.half	.L420-.L20
	.byte	1,5,19,9
	.half	.L421-.L420
	.byte	1,5,4,9
	.half	.L422-.L421
	.byte	1,4,1,5,105,9
	.half	.L24-.L422
	.byte	3,175,125,1,4,3,5,5,7,9
	.half	.L243-.L24
	.byte	3,25,1,5,30,9
	.half	.L423-.L243
	.byte	1,4,1,5,27,9
	.half	.L244-.L423
	.byte	3,118,1,5,35,9
	.half	.L17-.L244
	.byte	3,5,1,5,33,9
	.half	.L319-.L17
	.byte	1,5,36,9
	.half	.L424-.L319
	.byte	3,9,1,4,2,5,12,9
	.half	.L247-.L424
	.byte	3,142,1,1,5,10,9
	.half	.L425-.L247
	.byte	1,4,1,5,76,9
	.half	.L248-.L425
	.byte	3,242,126,1,5,63,9
	.half	.L27-.L248
	.byte	3,2,1,4,2,5,27,9
	.half	.L250-.L27
	.byte	3,155,1,1,5,11,9
	.half	.L426-.L250
	.byte	1,5,4,9
	.half	.L427-.L426
	.byte	1,4,4,5,20,9
	.half	.L29-.L427
	.byte	3,230,126,1,5,9,9
	.half	.L428-.L29
	.byte	1,5,20,9
	.half	.L429-.L428
	.byte	1,5,26,9
	.half	.L430-.L429
	.byte	1,5,2,9
	.half	.L431-.L430
	.byte	1,4,1,5,13,9
	.half	.L30-.L431
	.byte	3,127,1,5,64,7,9
	.half	.L432-.L30
	.byte	3,2,1,4,2,5,27,9
	.half	.L253-.L432
	.byte	3,153,1,1,5,11,9
	.half	.L433-.L253
	.byte	1,5,4,9
	.half	.L434-.L433
	.byte	1,4,1,5,72,9
	.half	.L32-.L434
	.byte	3,231,126,1,5,28,9
	.half	.L435-.L32
	.byte	3,3,1,5,33,9
	.half	.L436-.L435
	.byte	3,5,1,5,19,9
	.half	.L31-.L436
	.byte	3,5,1,5,100,7,9
	.half	.L437-.L31
	.byte	1,4,2,5,27,9
	.half	.L254-.L437
	.byte	3,140,1,1,5,11,9
	.half	.L438-.L254
	.byte	1,5,4,9
	.half	.L439-.L438
	.byte	1,4,5,5,35,9
	.half	.L35-.L439
	.byte	3,204,0,1,5,51,9
	.half	.L440-.L35
	.byte	1,5,58,9
	.half	.L441-.L440
	.byte	1,5,66,9
	.half	.L442-.L441
	.byte	1,4,6,5,28,9
	.half	.L256-.L442
	.byte	3,151,126,1,5,47,9
	.half	.L443-.L256
	.byte	1,5,5,9
	.half	.L444-.L443
	.byte	1,5,73,9
	.half	.L36-.L444
	.byte	3,4,1,5,5,9
	.half	.L445-.L36
	.byte	1,4,5,5,10,9
	.half	.L37-.L445
	.byte	3,229,1,1,5,2,9
	.half	.L446-.L37
	.byte	1,4,1,5,39,9
	.half	.L38-.L446
	.byte	3,170,126,1,5,101,9
	.half	.L34-.L38
	.byte	3,109,1,4,2,5,6,9
	.half	.L261-.L34
	.byte	3,152,1,1,5,9,9
	.half	.L447-.L261
	.byte	1,4,1,5,70,9
	.half	.L26-.L447
	.byte	3,232,126,1,4,2,5,23,9
	.half	.L263-.L26
	.byte	3,147,1,1,5,18,9
	.half	.L448-.L263
	.byte	1,5,12,9
	.half	.L449-.L448
	.byte	1,5,31,7,9
	.half	.L450-.L449
	.byte	1,5,23,9
	.half	.L451-.L450
	.byte	1,5,4,9
	.half	.L40-.L451
	.byte	1,4,1,5,76,9
	.half	.L42-.L40
	.byte	3,237,126,1,4,3,5,5,7,9
	.half	.L264-.L42
	.byte	3,124,1,5,30,9
	.half	.L452-.L264
	.byte	1,4,1,5,9,9
	.half	.L25-.L452
	.byte	3,207,0,1,5,2,9
	.half	.L453-.L25
	.byte	1,5,1,9
	.half	.L14-.L453
	.byte	3,1,1,7,9
	.half	.L107-.L14
	.byte	0,1,1
.L400:
	.sdecl	'.debug_ranges',debug,cluster('Dem_EnableDTCSetting')
	.sect	'.debug_ranges'
.L106:
	.word	-1,.L89,0,.L107-.L89,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_DtcGroupIdFromDtcGroupCode')
	.sect	'.debug_info'
.L108:
	.word	475
	.half	3
	.word	.L109
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCGroup.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L111,.L110
	.byte	2
	.word	.L94
	.byte	3
	.byte	'Dem_DtcGroupIdFromDtcGroupCode',0,1,91,20
	.word	.L122
	.byte	1,1,1
	.word	.L87,.L266,.L86
	.byte	4
	.byte	'dtcGrpCode',0,1,91,69
	.word	.L124,.L267
	.byte	5
	.word	.L87,.L266
	.byte	6
	.byte	'dtcGroupId',0,1,93,27
	.word	.L175,.L268
	.byte	7
	.word	.L269,.L270,.L271
	.byte	8
	.word	.L272,.L273
	.byte	9
	.word	.L274,.L270,.L271
	.byte	0,7
	.word	.L275,.L276,.L4
	.byte	8
	.word	.L277,.L278
	.byte	9
	.word	.L279,.L276,.L4
	.byte	0,7
	.word	.L280,.L4,.L5
	.byte	8
	.word	.L281,.L282
	.byte	9
	.word	.L283,.L4,.L5
	.byte	0,7
	.word	.L275,.L284,.L7
	.byte	8
	.word	.L277,.L278
	.byte	9
	.word	.L279,.L284,.L7
	.byte	0,7
	.word	.L285,.L286,.L2
	.byte	8
	.word	.L287,.L288
	.byte	9
	.word	.L289,.L286,.L2
	.byte	0,7
	.word	.L290,.L291,.L9
	.byte	8
	.word	.L292,.L293
	.byte	9
	.word	.L294,.L291,.L9
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_DtcGroupIdFromDtcGroupCode')
	.sect	'.debug_abbrev'
.L109:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_DtcGroupIdFromDtcGroupCode')
	.sect	'.debug_line'
.L110:
	.word	.L455-.L454
.L454:
	.half	3
	.word	.L457-.L456
.L456:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCGroup.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCGroup.h',0,0,0,0,0
.L457:
	.byte	5,20,7,0,5,2
	.word	.L87
	.byte	3,218,0,1,5,36,9
	.half	.L310-.L87
	.byte	3,4,1,4,2,5,12,9
	.half	.L270-.L310
	.byte	3,139,1,1,5,10,9
	.half	.L458-.L270
	.byte	1,4,1,5,51,9
	.half	.L271-.L458
	.byte	3,246,126,1,5,62,9
	.half	.L3-.L271
	.byte	3,3,1,4,2,5,32,9
	.half	.L276-.L3
	.byte	3,150,1,1,5,11,9
	.half	.L459-.L276
	.byte	1,5,4,9
	.half	.L460-.L459
	.byte	1,4,3,5,9,9
	.half	.L4-.L460
	.byte	3,188,126,1,5,30,9
	.half	.L461-.L4
	.byte	1,5,42,9
	.half	.L462-.L461
	.byte	1,5,2,9
	.half	.L463-.L462
	.byte	1,4,1,5,7,9
	.half	.L5-.L463
	.byte	3,46,1,5,48,7,9
	.half	.L464-.L5
	.byte	3,2,1,4,2,5,32,9
	.half	.L284-.L464
	.byte	3,148,1,1,5,11,9
	.half	.L465-.L284
	.byte	1,5,4,9
	.half	.L466-.L465
	.byte	1,4,1,5,10,9
	.half	.L7-.L466
	.byte	3,236,126,1,5,37,9
	.half	.L6-.L7
	.byte	3,124,1,4,2,5,6,9
	.half	.L286-.L6
	.byte	3,147,1,1,5,9,9
	.half	.L467-.L286
	.byte	1,4,1,5,40,9
	.half	.L2-.L467
	.byte	3,236,126,1,4,2,5,12,9
	.half	.L291-.L2
	.byte	3,143,1,1,5,19,9
	.half	.L468-.L291
	.byte	1,5,16,9
	.half	.L469-.L468
	.byte	1,5,4,9
	.half	.L470-.L469
	.byte	1,4,1,5,51,9
	.half	.L9-.L470
	.byte	3,241,126,1,5,11,7,9
	.half	.L471-.L9
	.byte	3,8,1,5,4,9
	.half	.L472-.L471
	.byte	1,5,1,9
	.half	.L8-.L472
	.byte	3,1,1,7,9
	.half	.L112-.L8
	.byte	0,1,1
.L455:
	.sdecl	'.debug_ranges',debug,cluster('Dem_DtcGroupIdFromDtcGroupCode')
	.sect	'.debug_ranges'
.L111:
	.word	-1,.L87,0,.L112-.L87,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_DtcsClearDtcInGroup')
	.sect	'.debug_info'
.L113:
	.word	495
	.half	3
	.word	.L114
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCGroup.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L116,.L115
	.byte	2
	.word	.L94
	.byte	3
	.byte	'Dem_DtcsClearDtcInGroup',0,1,175,1,6,1,1,1
	.word	.L93,.L295,.L92
	.byte	4
	.byte	'GroupId',0,1,175,1,36
	.word	.L122,.L296
	.byte	4
	.byte	'DTCOrigin',0,1,175,1,63
	.word	.L122,.L297
	.byte	4
	.byte	'Dem_ClientClearMachinePtr',0,1,175,1,102
	.word	.L298,.L299
	.byte	5
	.word	.L93,.L295
	.byte	6
	.byte	'dtcId',0,1,177,1,19
	.word	.L145,.L300
	.byte	7
	.word	.L147,.L301,.L77
	.byte	8
	.word	.L150,.L302
	.byte	8
	.word	.L152,.L303
	.byte	9
	.word	.L154,.L301,.L77
	.byte	7
	.word	.L128,.L301,.L78
	.byte	8
	.word	.L130,.L304
	.byte	10
	.word	.L132,.L301,.L78
	.byte	0,0,0,7
	.word	.L155,.L81,.L82
	.byte	8
	.word	.L156,.L305
	.byte	10
	.word	.L158,.L81,.L82
	.byte	0,7
	.word	.L159,.L306,.L80
	.byte	8
	.word	.L161,.L307
	.byte	10
	.word	.L163,.L306,.L80
	.byte	0,7
	.word	.L164,.L80,.L85
	.byte	8
	.word	.L165,.L308
	.byte	10
	.word	.L167,.L80,.L85
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_DtcsClearDtcInGroup')
	.sect	'.debug_abbrev'
.L114:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,10,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_DtcsClearDtcInGroup')
	.sect	'.debug_line'
.L115:
	.word	.L474-.L473
.L473:
	.half	3
	.word	.L476-.L475
.L475:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCGroup.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0,0
.L476:
	.byte	5,6,7,0,5,2
	.word	.L93
	.byte	3,174,1,1,5,34,9
	.half	.L331-.L93
	.byte	3,5,1,5,5,9
	.half	.L477-.L331
	.byte	1,5,73,7,9
	.half	.L478-.L477
	.byte	3,2,1,4,2,5,26,9
	.half	.L301-.L478
	.byte	3,203,0,1,5,23,9
	.half	.L332-.L301
	.byte	1,5,4,9
	.half	.L333-.L332
	.byte	1,5,7,9
	.half	.L78-.L333
	.byte	3,230,0,1,5,3,7,9
	.half	.L479-.L78
	.byte	3,2,1,5,11,9
	.half	.L79-.L479
	.byte	3,3,1,5,35,9
	.half	.L334-.L79
	.byte	1,5,45,9
	.half	.L335-.L334
	.byte	1,5,9,9
	.half	.L480-.L335
	.byte	1,5,46,9
	.half	.L481-.L480
	.byte	3,1,1,5,10,9
	.half	.L482-.L481
	.byte	1,4,1,5,77,9
	.half	.L77-.L482
	.byte	3,204,126,1,4,2,5,14,9
	.half	.L81-.L77
	.byte	3,195,1,1,5,4,9
	.half	.L483-.L81
	.byte	1,4,1,5,46,9
	.half	.L82-.L483
	.byte	3,192,126,1,5,38,9
	.half	.L337-.L82
	.byte	3,2,1,5,9,9
	.half	.L484-.L337
	.byte	1,5,13,7,9
	.half	.L485-.L484
	.byte	3,2,1,5,62,9
	.half	.L83-.L485
	.byte	3,2,1,4,2,5,7,9
	.half	.L306-.L83
	.byte	3,181,1,1,5,12,9
	.half	.L486-.L306
	.byte	1,5,14,9
	.half	.L80-.L486
	.byte	3,123,1,5,24,9
	.half	.L487-.L80
	.byte	1,5,19,9
	.half	.L488-.L487
	.byte	1,5,4,9
	.half	.L489-.L488
	.byte	1,4,1,5,77,9
	.half	.L85-.L489
	.byte	3,199,126,1,5,1,7,9
	.half	.L84-.L85
	.byte	3,11,1,7,9
	.half	.L117-.L84
	.byte	0,1,1
.L474:
	.sdecl	'.debug_ranges',debug,cluster('Dem_DtcsClearDtcInGroup')
	.sect	'.debug_ranges'
.L116:
	.word	-1,.L93,0,.L117-.L93,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_DtcGroupDisabledFlag')
	.sect	'.debug_info'
.L118:
	.word	180
	.half	3
	.word	.L119
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCGroup.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L94
	.byte	3
	.byte	'Dem_DtcGroupDisabledFlag',0,24,17,24
	.word	.L122
	.byte	1,5,3
	.word	Dem_DtcGroupDisabledFlag
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_DtcGroupDisabledFlag')
	.sect	'.debug_abbrev'
.L119:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_AllDTCGroupsParam')
	.sect	'.debug_info'
.L120:
	.word	177
	.half	3
	.word	.L121
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCGroup.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L94
	.byte	3
	.byte	'Dem_AllDTCGroupsParam',0,24,11,1
	.word	.L309
	.byte	1,5,3
	.word	Dem_AllDTCGroupsParam
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_AllDTCGroupsParam')
	.sect	'.debug_abbrev'
.L121:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_DisableDTCSetting')
	.sect	'.debug_loc'
.L144:
	.word	-1,.L91,.L326-.L91,.L47-.L91
	.half	1
	.byte	91
	.word	0,0
.L136:
	.word	0,0
.L125:
	.word	-1,.L91,0,.L321-.L91
	.half	1
	.byte	84
	.word	.L322-.L91,.L323-.L91
	.half	1
	.byte	95
	.word	.L50-.L91,.L328-.L91
	.half	1
	.byte	95
	.word	0,0
.L126:
	.word	-1,.L91,0,.L321-.L91
	.half	1
	.byte	85
	.word	0,0
.L90:
	.word	-1,.L91,0,.L320-.L91
	.half	2
	.byte	138,0
	.word	.L320-.L91,.L123-.L91
	.half	2
	.byte	138,8
	.word	.L123-.L91,.L123-.L91
	.half	2
	.byte	138,0
	.word	0,0
.L172:
	.word	0,0
.L127:
	.word	-1,.L91,.L321-.L91,.L324-.L91
	.half	1
	.byte	82
	.word	.L44-.L91,.L325-.L91
	.half	1
	.byte	82
	.word	.L48-.L91,.L52-.L91
	.half	1
	.byte	82
	.word	.L50-.L91,.L60-.L91
	.half	1
	.byte	82
	.word	0,0
.L146:
	.word	-1,.L91,.L327-.L91,.L47-.L91
	.half	1
	.byte	90
	.word	0,0
.L209:
	.word	0,0
.L203:
	.word	0,0
.L153:
	.word	0,0
.L131:
	.word	0,0
.L176:
	.word	-1,.L91,0,.L123-.L91
	.half	2
	.byte	145,124
	.word	0,0
.L196:
	.word	0,0
.L143:
	.word	-1,.L91,0,.L123-.L91
	.half	2
	.byte	145,120
	.word	0,0
.L138:
	.word	0,0
.L190:
	.word	0,0
.L181:
	.word	0,0
.L220:
	.word	0,0
.L214:
	.word	0,0
.L186:
	.word	0,0
.L151:
	.word	0,0
.L166:
	.word	0,0
.L162:
	.word	0,0
.L157:
	.word	0,0
.L140:
	.word	0,0
.L207:
	.word	0,0
.L201:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_DtcGroupIdFromDtcGroupCode')
	.sect	'.debug_loc'
.L86:
	.word	-1,.L87,0,.L310-.L87
	.half	2
	.byte	138,0
	.word	.L310-.L87,.L266-.L87
	.half	2
	.byte	138,8
	.word	.L266-.L87,.L266-.L87
	.half	2
	.byte	138,0
	.word	0,0
.L282:
	.word	0,0
.L268:
	.word	-1,.L87,0,.L266-.L87
	.half	2
	.byte	145,120
	.word	0,0
.L267:
	.word	-1,.L87,0,.L266-.L87
	.half	1
	.byte	84
	.word	0,0
.L273:
	.word	0,0
.L293:
	.word	0,0
.L288:
	.word	0,0
.L278:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_DtcsClearDtcInGroup')
	.sect	'.debug_loc'
.L297:
	.word	-1,.L93,0,.L329-.L93
	.half	1
	.byte	85
	.word	.L82-.L93,.L336-.L93
	.half	1
	.byte	89
	.word	.L336-.L93,.L337-.L93
	.half	1
	.byte	85
	.word	0,0
.L299:
	.word	-1,.L93,0,.L79-.L93
	.half	1
	.byte	100
	.word	.L331-.L93,.L295-.L93
	.half	1
	.byte	111
	.word	.L338-.L93,.L337-.L93
	.half	1
	.byte	100
	.word	0,0
.L92:
	.word	-1,.L93,0,.L295-.L93
	.half	2
	.byte	138,0
	.word	0,0
.L296:
	.word	-1,.L93,0,.L330-.L93
	.half	1
	.byte	84
	.word	.L332-.L93,.L333-.L93
	.half	1
	.byte	88
	.word	.L334-.L93,.L335-.L93
	.half	1
	.byte	88
	.word	0,0
.L303:
	.word	0,0
.L304:
	.word	0,0
.L300:
	.word	0,0
.L302:
	.word	0,0
.L308:
	.word	0,0
.L307:
	.word	0,0
.L305:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_EnableDTCSetting')
	.sect	'.debug_loc'
.L233:
	.word	-1,.L89,.L317-.L89,.L14-.L89
	.half	1
	.byte	91
	.word	0,0
.L229:
	.word	0,0
.L223:
	.word	-1,.L89,0,.L312-.L89
	.half	1
	.byte	84
	.word	.L313-.L89,.L314-.L89
	.half	1
	.byte	95
	.word	.L17-.L89,.L319-.L89
	.half	1
	.byte	95
	.word	0,0
.L224:
	.word	-1,.L89,0,.L312-.L89
	.half	1
	.byte	85
	.word	0,0
.L88:
	.word	-1,.L89,0,.L311-.L89
	.half	2
	.byte	138,0
	.word	.L311-.L89,.L222-.L89
	.half	2
	.byte	138,8
	.word	.L222-.L89,.L222-.L89
	.half	2
	.byte	138,0
	.word	0,0
.L245:
	.word	0,0
.L225:
	.word	-1,.L89,.L312-.L89,.L315-.L89
	.half	1
	.byte	82
	.word	.L11-.L89,.L316-.L89
	.half	1
	.byte	82
	.word	.L15-.L89,.L19-.L89
	.half	1
	.byte	82
	.word	.L17-.L89,.L27-.L89
	.half	1
	.byte	82
	.word	0,0
.L234:
	.word	-1,.L89,.L318-.L89,.L14-.L89
	.half	1
	.byte	90
	.word	0,0
.L260:
	.word	0,0
.L258:
	.word	0,0
.L238:
	.word	0,0
.L227:
	.word	0,0
.L246:
	.word	-1,.L89,0,.L222-.L89
	.half	2
	.byte	145,124
	.word	0,0
.L255:
	.word	0,0
.L232:
	.word	-1,.L89,0,.L222-.L89
	.half	2
	.byte	145,120
	.word	0,0
.L230:
	.word	0,0
.L252:
	.word	0,0
.L249:
	.word	0,0
.L265:
	.word	0,0
.L262:
	.word	0,0
.L251:
	.word	0,0
.L237:
	.word	0,0
.L242:
	.word	0,0
.L241:
	.word	0,0
.L239:
	.word	0,0
.L231:
	.word	0,0
.L259:
	.word	0,0
.L257:
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L490:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Dem_DtcGroupIdFromDtcGroupCode')
	.sect	'.debug_frame'
	.word	48
	.word	.L490,.L87,.L266-.L87
	.byte	8,18,8,19,8,20,8,21,8,22,8,23,4
	.word	(.L310-.L87)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L266-.L310)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_EnableDTCSetting')
	.sect	'.debug_frame'
	.word	36
	.word	.L490,.L89,.L222-.L89
	.byte	4
	.word	(.L311-.L89)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L222-.L311)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_DisableDTCSetting')
	.sect	'.debug_frame'
	.word	36
	.word	.L490,.L91,.L123-.L91
	.byte	4
	.word	(.L320-.L91)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L123-.L320)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_DtcsClearDtcInGroup')
	.sect	'.debug_frame'
	.word	12
	.word	.L490,.L93,.L295-.L93

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   197  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCGroup.c	   198  #include "Dem_Cfg_MemMap.h"

	; Module end
