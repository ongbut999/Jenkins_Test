	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc16352a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Dem\\src\\Dem_Clear.src BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_Clear.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_Clear.c'

	
$TC16X
	
	.sdecl	'.text.Dem_Clear.Dem_ClearDTCBody',code,cluster('Dem_ClearDTCBody')
	.sect	'.text.Dem_Clear.Dem_ClearDTCBody'
	.align	2
	

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	     1  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	     2  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	     3  #include "Dem_Dcm.h"
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	     4  #include "Rte_Dem.h"
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	     5  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	     6  #include "Dem_Clear.h"
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	     7  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	     8  #include "Dem_ClientBaseHandling.h"
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	     9  #include "Dem_ClientClearMachine.h"
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    10  #include "Dem_ClientRequestDispatcher.h"
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    11  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    12  #include "Dem_EventRecheck.h"
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    13  #include "Dem_StorageCondition.h"
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    14  #include "Dem_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    15  #include "Dem_DTCs.h"
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    16  #include "Dem_DTCGroup.h"
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    17  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    18  #include "Dem_Obd.h"
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    19  #include "Dem_EventStatus.h"
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    20  #include "Dem_EvMemGen.h"
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    21  #include "Dem_Cfg_ExtPrototypes.h"
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    22  #include "Dem_Prv_J1939Dcm.h"
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    23  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    24  #define DEM_START_SEC_RAM_INIT
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    25  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    26  static Std_ReturnType Dem_ClearResult = DEM_CLEAR_PENDING;
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    27  #define DEM_STOP_SEC_RAM_INIT
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    29  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    30  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    31  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    32  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    33  static Std_ReturnType Dem_ClearDTCBody(Dem_ClientSelectionType Selection, Dem_DTCOriginType DTCOrigin)
; Function Dem_ClearDTCBody
.L112:
Dem_ClearDTCBody:	.type	func
	mov	d8,d5
.L420:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    34  {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    35  #if(DEM_CFG_CLEAR_DTC_LIMITATION == DEM_CFG_CLEAR_DTC_LIMITATION_ALL_SUPPORTED_DTCS)
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    36      Dem_DtcIdType dtcId;
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    37      Dem_DTCGroupIdType DTCGroupId;
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    38  #endif
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    39  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    40      /* Initialization */
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    41      Dem_ClientClearMachine.IsClearInterrupted = FALSE;
	movh.a	a4,#@his(Dem_ClientClearMachine)
	lea	a4,[a4]@los(Dem_ClientClearMachine)
.L641:
	mov.aa	a15,a4
	add.a	a15,#3
.L642:
	mov	d0,#0
.L643:
	st.b	[a15],d0
.L644:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    42      Dem_ClientClearMachine.NumberOfEventsProcessed = 0;
	mov	d15,#0
.L645:
	st.h	[a4]4,d15
.L381:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     3  #ifndef DEM_CLIENTBASEHANDLING_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     4  #define DEM_CLIENTBASEHANDLING_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     6  #include "Dem_ClientHandlingTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     7  #include "Dem_Client.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     8  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    11  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    12  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    14  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    15  /*********  MASKS : Dem_ClientRequestType, Dem_ClientResultType & Dem_ClientSelectionType *********/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    17  #define DEM_CLIENT_TYPE_MASK     0xFFu
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    19  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    20  /****************  MASKS : Dem_ClientRequestType & Dem_ClientResultType ***************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    22  #define DEM_CLIENT_REQUEST_RESULT_IDMASK       0xFF00u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    23  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    24  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    25  /****************  Dem_ClientResultType  **********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    27  DEM_INLINE void Dem_ClientResultType_setResult(volatile Dem_ClientResultType *result, Dem_ClientRequestType request, Std_ReturnType newResult)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    28  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    29      Dem_ClientResultType tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    31      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientResultType)) >= 2u), DEM_CLIENTRSULTTYPE_SHALL_BE_UINT16);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    33      tempResult = (request & DEM_CLIENT_REQUEST_RESULT_IDMASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    34      tempResult |= newResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    35      *result = tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    36  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    38  DEM_INLINE Std_ReturnType Dem_ClientResultType_getResult(Dem_ClientResultType result)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    39  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    40      return ((Std_ReturnType)(result & DEM_CLIENT_TYPE_MASK));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    41  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    42  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    43  DEM_INLINE void Dem_ClientResultType_confirmCancel(volatile Dem_ClientResultType *result, Dem_ClientRequestType request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    44  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    45      Dem_ClientResultType tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    46  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    47      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientResultType)) >= 2u), DEM_CLIENTRSULTTYPE_SHALL_BE_UINT16);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    49      tempResult = (request & DEM_CLIENT_REQUEST_RESULT_IDMASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    50      tempResult |= DEM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    51      *result = tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    52  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    54  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    55  /****************  Dem_ClientRequestType  *********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    57  #define DEM_CLIENT_REQUEST_TYPE_CANCEL_MASK     0x01u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    59  DEM_INLINE boolean Dem_ClientRequestType_isRequestInProgress(Dem_ClientIdType clientId)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    60  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    61      return ((Dem_Clients[clientId].request & DEM_CLIENT_REQUEST_RESULT_IDMASK)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    62              != (Dem_Clients[clientId].result & DEM_CLIENT_REQUEST_RESULT_IDMASK));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    63  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    65  DEM_INLINE void Dem_ClientRequestType_setRequest(volatile Dem_ClientRequestType *request, uint8 newRequest)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    67      Dem_ClientRequestType tempRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    68  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    69      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientRequestType) >= 2u)), DEM_CLIENTREQUESTTYPE_SHALL_BE_UINT16);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    71      tempRequest = *request;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    72      tempRequest += 0x0100u;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    73      tempRequest = (tempRequest & DEM_CLIENT_REQUEST_RESULT_IDMASK) | newRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    74      *request = tempRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    75  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    76  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    78  DEM_INLINE void Dem_ClientRequestType_cancelRequest(volatile Dem_ClientRequestType *request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    79  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    80      Dem_ClientRequestType_setRequest(request,1);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    81  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    82  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    84  DEM_INLINE uint8 Dem_ClientRequestType_getMachineIndex(Dem_ClientRequestType request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    85  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    86      uint8 machineIndex;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    87      machineIndex = (((uint8)(request & DEM_CLIENT_TYPE_MASK)) >> 1u);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    88      return machineIndex;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    89  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    91  DEM_INLINE boolean Dem_ClientRequestType_isCancelRequested(Dem_ClientRequestType request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    92  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    93      return ((request & DEM_CLIENT_REQUEST_TYPE_CANCEL_MASK) == 1u);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    94  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    95  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    96  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    97  /****************  Dem_ClientSelectionType  *******************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    98  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    99  #define DEM_CLIENT_SELECTION_DTCINDEXMASK                0xFFFFu
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   100  #define DEM_CLIENT_INVALIDATE_SELECTION_IDMASK           0x00FFFFFFu
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   101  #define DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE  16u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   102  #define DEM_CLIENT_SELECTION_TYPE_BITPOS_RESULT          24u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   104  DEM_INLINE uint16 Dem_ClientSelectionType_getSelectionDtcIndex (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   105  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   106      return ((uint16)(selection & DEM_CLIENT_SELECTION_DTCINDEXMASK));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   107  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   108  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   109  DEM_INLINE void Dem_ClientSelectionType_setSelection (Dem_ClientSelectionType *selection, uint16 dtcId, uint8 typeOfSelection, Std_ReturnType selectionResult)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   110  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   111      Dem_ClientSelectionType tempSelection;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   113      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientSelectionType) >= 4u)), DEM_CLIENTSELECTIONTYPE_SHALL_BE_UINT32);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   115      tempSelection = (((uint32)dtcId) | (((uint32)typeOfSelection) << DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) | (((uint32)selectionResult) << DEM_CLIENT_SELECTION_TYPE_BITPOS_RESULT));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   116      *selection = tempSelection;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   117  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   119  DEM_INLINE boolean Dem_ClientSelectionType_isSelectionSingleDTC (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   120  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   121      uint8 tempSelectionType;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   122      tempSelectionType = (uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) & DEM_CLIENT_TYPE_MASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   124      return (tempSelectionType == DEM_CLIENT_SELECTION_TYPE_SINGLE_DTC);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   127  DEM_INLINE boolean Dem_ClientSelectionType_isSelectionDTCGroupAll (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   128  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   129      uint8 tempSelectionType;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   130      tempSelectionType = (uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) & DEM_CLIENT_TYPE_MASK);
	sh	d0,d4,#-16
.L646:
	extr.u	d0,d0,#0,#8
.L421:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   131  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   132      return (tempSelectionType == DEM_CLIENT_SELECTION_TYPE_ALL_DTCS);
	eq	d15,d0,#1
.L647:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   132      return (tempSelectionType == DEM_CLIENT_SELECTION_TYPE_ALL_DTCS);      (inlined)
	j	.L2

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   133  }      (inlined)
.L2:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    43  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    44      if (Dem_ClientSelectionType_isSelectionDTCGroupAll(Selection))
	jeq	d15,#0,.L3
.L648:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    45      { /* clear all DTCs */
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    46  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    47          Dem_ClearAllDTCs(DTCOrigin, &Dem_ClientClearMachine);
	mov	d4,d8
.L419:
	call	Dem_ClearAllDTCs
.L422:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    48  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    49          if (!Dem_ClientClearMachine.IsClearInterrupted)
	ld.bu	d15,[a15]
.L649:
	jne	d15,#0,.L4
.L387:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   141     if (DtcOrigin == DEM_DTC_ORIGIN_PRIMARY_MEMORY)      (inlined)
	jne	d8,#1,.L5
.L650:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     3  #ifndef DEM_EVMEMGEN_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     4  #define DEM_EVMEMGEN_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     6  #include "Dem_EvMemGenTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     7  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     8  #include "Dem_EvMemBase.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     9  #include "Dem_DTCs.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    10  #include "Dem_GenericNvData.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    11  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    13  #define DEM_EVMEMGEN_MEMORY_BASE   Dem_GenericNvData
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    15  #if DEM_CFG_EVMEMGENERIC_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    16     #define DEM_EVMEMGEN_GET(OBJ)      (OBJ)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    17     #define DEM_EVMEMGEN_SET(OBJ,VAL)  (OBJ) = (VAL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    18     #define DEM_EVMEMGEN_CLEAROBJ(OBJ) DEM_EVMEM_CLEAROBJ(OBJ)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    19  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    20     #define DEM_EVMEMGEN_GET(OBJ)      0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    21     #define DEM_EVMEMGEN_SET(OBJ,VAL)  do {} while (0)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    22     #define DEM_EVMEMGEN_CLEAROBJ(OBJ) do {} while (0)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    23  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    25  /* -------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    26     service Dem_GetDTCByOccurrenceTime
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    27     -------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    28   */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    30  /* Get stored DtcId by occurrence */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    31  DEM_INLINE Dem_DtcIdType Dem_EvMemGenGetDtcIdByOccIndex(uint32 OccIndex)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    33  #if DEM_CFG_EVMEMGENERIC_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    34      return DEM_EVMEMGEN_GET(DEM_EVMEMGEN_MEMORY_BASE.DtcIdsByOccurrenceTime[OccIndex]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    35  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    36      DEM_UNUSED_PARAM(OccIndex);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    37      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    41  /* Set stored DtcId by occurrence */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    42  DEM_INLINE void Dem_EvMemGenSetDtcByOccIndex(Dem_DtcIdType DtcId,uint32 OccIndex)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    43  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    44  #if DEM_CFG_EVMEMGENERIC_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    45      DEM_EVMEMGEN_SET(DEM_EVMEMGEN_MEMORY_BASE.DtcIdsByOccurrenceTime[OccIndex],DtcId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    46  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    47      DEM_UNUSED_PARAM(DtcId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    48      DEM_UNUSED_PARAM(OccIndex);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    49  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    50  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    52  /* Translates MemId to DtcOrigin  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    53  DEM_INLINE Dem_DTCOriginType Dem_EvMemGenGetDtcOrginFromMemId(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    54  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    55     Dem_DTCOriginType DtcOrigin = DEM_DTC_ORIGIN_PRIMARY_MEMORY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    57     if (Dem_LibGetParamBool(DEM_CFG_EVMEM_SECONDARY_MEMORY_SUPPORTED))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    58     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    59        if (MemId == DEM_CFG_EVMEM_MEMID_SECONDARY)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    60        {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    61           DtcOrigin = DEM_DTC_ORIGIN_SECONDARY_MEMORY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    62        }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    63     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    65     if (Dem_LibGetParamBool(DEM_CFG_EVMEM_MIRROR_MEMORY_SUPPORTED))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    66     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    67  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    68        if (MemId == DEM_CFG_EVMEM_MEMID_MIRROR)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    69        {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    70           DtcOrigin = DEM_DTC_ORIGIN_MIRROR_MEMORY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    71        }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    72     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    74     return DtcOrigin;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    76  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    78  /* Report event prototype function */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    79  DEM_INLINE void Dem_EvMemGenReportEvent(Dem_EventIdType EventId, uint32 FirstOccIndex, uint32 RecntOccIndex)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    80  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    81     Dem_DtcIdType DtcId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    82  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    83     /* get the DtcId of the reported event */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    84     DtcId = Dem_DtcIdFromEventId (EventId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    85     /* Is the DtcId valid ? */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    86     if (Dem_isDtcIdValid (DtcId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    87     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    88        /* Is stored DtcId of First Entry is invalid ? */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    89        /* HINT: the initial value is zero and therefore invalid! */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    90        if (!Dem_isDtcIdValid(Dem_EvMemGenGetDtcIdByOccIndex(FirstOccIndex)))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    91        {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    92           /* replace first entry */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    93           Dem_EvMemGenSetDtcByOccIndex(DtcId,FirstOccIndex);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    94           /* notify to store in NVM */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    95           Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_DEM_GENERIC_NV_DATA);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    96        }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    97        /* Is stored DtcId of Most Recent Entry is not yet stored ? */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    98        if (Dem_EvMemGenGetDtcIdByOccIndex(RecntOccIndex) != DtcId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    99        {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   100           /* replace most recent entry */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   101           Dem_EvMemGenSetDtcByOccIndex(DtcId,RecntOccIndex);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   102           /* notify to store in NVM */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   103           Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_DEM_GENERIC_NV_DATA);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   104        }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   105     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   108  /* report function to report failed events */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   109  DEM_INLINE void Dem_EvMemGenReportFailedEvent(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   110  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   111  	if(!Dem_GetEvMemLockInternal())
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   112  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   113  	    /* service Dem_GetDTCByOccurrenceTime has implicit origin DEM_DTC_ORIGIN_PRIMARY_MEMORY */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   114  	    if ( Dem_EvtParam_GetEventIsStoredInPrimary(EventId) )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   115  	    {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   116  	        /* call prototype function with first and recent FAILED indices */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   117  	        /* This call needs to be locked to avoid a simultaneous access in the Dem_Main task */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   118  	        DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   119  	        Dem_EvMemGenReportEvent(EventId,DEM_FIRST_FAILED_DTC,DEM_MOST_RECENT_FAILED_DTC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   120  	        DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   121  	    }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   122  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   123  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   124  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   125  /* report function to report confirmed events */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   126  DEM_INLINE void Dem_EvMemGenReportConfirmedEvent(Dem_EventIdType EventId, uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   127  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   128     /* service Dem_GetDTCByOccurrenceTime has implicit origin DEM_DTC_ORIGIN_PRIMARY_MEMORY */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   129     if (MemId == DEM_CFG_EVMEM_MEMID_PRIMARY)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   130     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   131        /* call prototype function with first and recent CONFIRMED indices */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   132        Dem_EvMemGenReportEvent(EventId,DEM_FIRST_DET_CONFIRMED_DTC,DEM_MOST_REC_DET_CONFIRMED_DTC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   133     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   134  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   136  /* clears the DTC Occurrence Entries */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   137  DEM_INLINE void Dem_EvMemGenClearDtcByOccurrenceTime(Dem_DTCOriginType DtcOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   138  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   139     DEM_UNUSED_PARAM(DtcOrigin);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   141     if (DtcOrigin == DEM_DTC_ORIGIN_PRIMARY_MEMORY)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   142     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   143         /* This call needs to be locked to avoid a simultaneous access in SetEventStatus context */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   144        DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   145        DEM_EVMEMGEN_CLEAROBJ(DEM_EVMEMGEN_MEMORY_BASE.DtcIdsByOccurrenceTime);
	movh.a	a15,#@his(Dem_GenericNvData)
	lea	a15,[a15]@los(Dem_GenericNvData)
	lea	a4,[a15]8
	mov	d4,#0
	mov	d5,#10
.L392:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     3  #ifndef RBA_DIAGLIB_MEMUTILS_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     4  #define RBA_DIAGLIB_MEMUTILS_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     7  #include "rba_BswSrv.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     9  #define RBA_DIAGLIB_MEMCPY(xDest_p, xSrc_pc, numBytes_u32)                  rba_DiagLib_MemUtils_MemCpy((uint8*)(xDest_p),(const uint8*)(xSrc_pc),(uint32)(numBytes_u32))
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    10  #define RBA_DIAGLIB_MEMSET(xDest_p, xPattern_u32, numBytes_u32)             rba_DiagLib_MemUtils_MemSet((uint8*)(xDest_p),(sint32)(xPattern_u32),(uint32)(numBytes_u32))
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    11  #define RBA_DIAGLIB_MEMCMP(xSrc1_pc, xSrc2_pc, numBytes_u32)                rba_DiagLib_MemUtils_MemCmp((const uint8*)(xSrc1_pc),(const uint8*)(xSrc2_pc),(uint32)(numBytes_u32))
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    12  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    13  #define RBA_DIAGLIB_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    14  #include "rba_DiagLib_MemMap.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    15  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    16  /**
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    17   * Utility functions for MEMCPY, MEMSET, MEMCOMP.
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    18   */
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    19  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    20  LOCAL_INLINE void rba_DiagLib_MemUtils_MemCpy(uint8* xDest_p, const uint8* xSrc_pc, uint32 numBytes_s32)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    21  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    22      /* MR12 DIR 1.1 VIOLATION: Function rba_BswSrv_MemCopy converts argument 1 and 2 to pointer to void, function has no side effects */
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    23      (void) rba_BswSrv_MemCopy(xDest_p, xSrc_pc, numBytes_s32);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    26  LOCAL_INLINE void rba_DiagLib_MemUtils_MemSet(uint8* xDest_pv, sint32 xPattern_u32, uint32 numBytes_s32)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    28      /* MR12 DIR 1.1 VIOLATION: Function rba_BswSrv_MemSet converts argument 1 to pointer to void, function has no side effects */
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    29      (void) rba_BswSrv_MemSet(xDest_pv, xPattern_u32, numBytes_s32);
	call	rba_BswSrv_MemSet
.L393:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   146        DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   147        /* notify to store in NVM */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   148        Dem_NvMClearBlockByWrite(DEM_NVM_ID_DEM_GENERIC_NV_DATA);
	mov	d0,#0
.L402:

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     1   
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     4  #ifndef DEM_NVM_H
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     5  #define DEM_NVM_H
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     7  #include "NvM.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     8  #include "Dem_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     9  #include "Dem_Nvm_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    10  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    11  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    12  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    13  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    16  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    17  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    19  DEM_ARRAY_DECLARE(Dem_NvMBlockStatusDoubleBufferType, Dem_NvMBlockStatusDoubleBuffer, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    20  DEM_ARRAY_DECLARE(Dem_NvMStorageBufferType, Dem_NvMStorageBuffer, DEM_NVM_CFG_NUM_STORAGEBUFFER);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    22  extern Dem_EraseAllStatusType Dem_EraseAllNvMDataStatus;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    23  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    24  DEM_ARRAY_DECLARE(Dem_NvmHashIdType, Dem_HashIdInNvm, DEM_NVM_HASH_ID_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    25  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    26  extern boolean Dem_NvMAnyClearFailed;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    27  #if(DEM_CFG_TRIGGER_TO_STORE_NVM_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    28  extern boolean Dem_NvMImmediateStorageRequested;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    29  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    31  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    32  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    35  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    36  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    38  DEM_ARRAY_DECLARE_CONST(NvM_BlockIdType, Dem_NvMBlockMap2NvmId, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    39  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdExtendedType, Dem_NvmBlockIdExtended, DEM_NVM_CFG_NUM_BLOCKS_EXTENDED);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    40  DEM_ARRAY_DECLARE_CONST(Dem_NvmCopyFunction, DemCopyFctPtrTable, DEM_NVM_CFG_COPYFCT_NUM);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    41  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    42  DEM_ARRAY_DECLARE_CONST(Dem_NvmHashIdType, Dem_HashIdInRom, DEM_NVM_HASH_ID_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    43  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    45  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    46  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    49  DEM_INLINE NvM_BlockIdType Dem_NvMGetNvMBlocKId(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    50  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    51      return Dem_NvMBlockMap2NvmId[id];
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    52  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    54  DEM_INLINE Dem_NvmResultType Dem_NvmGetStatus (Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    55  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    56      NvM_RequestResultType result;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    57      if (NvM_GetErrorStatus (Dem_NvMGetNvMBlocKId(id), &result) == E_NOT_OK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    58      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    59          return DEM_NVM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    60      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    61  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    62      switch (result)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    63      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    64          case NVM_REQ_CANCELED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    65              return DEM_NVM_CANCELED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    66  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    67          case NVM_REQ_OK:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    68          case NVM_REQ_REDUNDANCY_FAILED:     /* Driver could trigger correction of the damaged part of the redundant block; data is read correctly nevertheless */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    69          case NVM_REQ_RESTORED_FROM_ROM:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    70              return DEM_NVM_SUCCESS;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    72          case NVM_REQ_PENDING:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    73              return DEM_NVM_PENDING;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    75          case NVM_REQ_NV_INVALIDATED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    76              return DEM_NVM_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    78          case NVM_REQ_INTEGRITY_FAILED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    79              return DEM_NVM_INTEGRITY_FAILED;    /* NVM_REQ_INTEGRITY_FAILED: description in NVM-doc: Indicates that the latest read operation did not find any valid data for this block on the persistent media. */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    80  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    81          case NVM_REQ_BLOCK_SKIPPED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    82              return DEM_NVM_BLOCK_SKIPPED;       /* NVM_REQ_BLOCK_SKIPPED: if readall would be skipped, it is treated as failure for DEM, because all NVM data has to be available
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    83                                                 at init (ErrorQueue is flushed and event status / eventMemory content needs to be available)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    84                                                 This is ensured as the checks during init are checked to be DEM_NVM_SUCCESS. All other states are handled as error */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    86          default:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    87              /*   NVM_REQ_NOT_OK: Indicates that the latest operation failed due to an unexpected event.  */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    88              return DEM_NVM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    89      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    90  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    92  DEM_INLINE void Dem_NvMWriteBlockOnShutdown(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    93  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    94      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_SHUTDOWN] = DEM_NVM_STATUSBITMASK_SHUTDOWN;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    95  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    97  DEM_INLINE void Dem_NvMWriteBlockImmediate(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    98  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    99      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_IMMEDIATE] = DEM_NVM_STATUSBITMASK_IMMEDIATE;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   100  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   102  DEM_INLINE void Dem_NvMClearBlockByWrite(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   103  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   104      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_CLEAR] = DEM_NVM_STATUSBITMASK_CLEAR;
	movh.a	a15,#@his(Dem_NvMBlockStatusDoubleBuffer)
	lea	a15,[a15]@los(Dem_NvMBlockStatusDoubleBuffer)
.L651:
	mul	d15,d0,#5
	addsc.a	a15,a15,d15,#0
.L652:
	mov	d15,#8
.L653:
	st.b	[a15]3,d15

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   141     if (DtcOrigin == DEM_DTC_ORIGIN_PRIMARY_MEMORY)      (inlined)
.L5:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   149     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   150  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   152  /* ------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   153    Service to get the Last failed and Last Confirmed DTCs
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   154     -----------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   155   */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   156  /* Get the Last Failed DTC */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   157  DEM_INLINE Dem_DtcIdType Dem_EvMemGenGetLastFailedDtcFromGenNvData(void)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   159  	return Dem_EvMemGenGetDtcIdByOccIndex(DEM_MOST_RECENT_FAILED_DTC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   162  /* Get the Last Confirmed DTCs */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   163  DEM_INLINE Dem_DtcIdType Dem_EvMemGenGetLastConfirmedDtcFromGenNvData(void)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   164  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   165  	return Dem_EvMemGenGetDtcIdByOccIndex(DEM_MOST_REC_DET_CONFIRMED_DTC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   166  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   167  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   168  /* -------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   169     service Dem_GetEventMemoryOverflow
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   170     -------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   171   */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   173  /* sets the memory overflow indicator */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   174  DEM_INLINE void Dem_EvMemGenSetOverflow(Dem_DTCOriginType DtcOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   176  #if DEM_CFG_EVMEMGENERIC_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   177      DEM_EVMEMGEN_SET(DEM_EVMEMGEN_MEMORY_BASE.Overflow[DtcOrigin],TRUE);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   179      DEM_UNUSED_PARAM(DtcOrigin);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   183  /* gets the overflow indicator */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   184  DEM_INLINE boolean Dem_EvMemGenIsOverflow(Dem_DTCOriginType DtcOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   185  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   186  #if DEM_CFG_EVMEMGENERIC_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   187      return (boolean)DEM_EVMEMGEN_GET(DEM_EVMEMGEN_MEMORY_BASE.Overflow[DtcOrigin]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   189      DEM_UNUSED_PARAM(DtcOrigin);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   190      return (boolean)0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   191  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   194  /* reports overflow indication */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   195  DEM_INLINE void Dem_EvMemGenReportEventMemoryOverflowByOrigin(Dem_DTCOriginType DtcOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   196  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   197     if (!Dem_EvMemGenIsOverflow(DtcOrigin))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   198     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   199        Dem_EvMemGenSetOverflow(DtcOrigin);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   200        Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_DEM_GENERIC_NV_DATA);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   201     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   204  /* clears the memory overflow indicator */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   205  DEM_INLINE void Dem_EvMemGenClearOverflow(Dem_DTCOriginType DtcOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   207  #if DEM_CFG_EVMEMGENERIC_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   208      DEM_EVMEMGEN_SET(DEM_EVMEMGEN_MEMORY_BASE.Overflow[DtcOrigin],FALSE);
	movh.a	a15,#@his(Dem_GenericNvData)
	lea	a15,[a15]@los(Dem_GenericNvData)
	addsc.a	a15,a15,d8,#0
	mov	d15,#0
	st.b	[a15]2,d15
.L654:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   209      Dem_NvMClearBlockByWrite(DEM_NVM_ID_DEM_GENERIC_NV_DATA);
	mov	d15,#0
.L411:

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     1   
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     4  #ifndef DEM_NVM_H
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     5  #define DEM_NVM_H
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     7  #include "NvM.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     8  #include "Dem_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     9  #include "Dem_Nvm_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    10  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    11  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    12  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    13  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    16  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    17  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    19  DEM_ARRAY_DECLARE(Dem_NvMBlockStatusDoubleBufferType, Dem_NvMBlockStatusDoubleBuffer, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    20  DEM_ARRAY_DECLARE(Dem_NvMStorageBufferType, Dem_NvMStorageBuffer, DEM_NVM_CFG_NUM_STORAGEBUFFER);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    22  extern Dem_EraseAllStatusType Dem_EraseAllNvMDataStatus;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    23  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    24  DEM_ARRAY_DECLARE(Dem_NvmHashIdType, Dem_HashIdInNvm, DEM_NVM_HASH_ID_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    25  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    26  extern boolean Dem_NvMAnyClearFailed;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    27  #if(DEM_CFG_TRIGGER_TO_STORE_NVM_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    28  extern boolean Dem_NvMImmediateStorageRequested;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    29  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    31  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    32  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    35  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    36  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    38  DEM_ARRAY_DECLARE_CONST(NvM_BlockIdType, Dem_NvMBlockMap2NvmId, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    39  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdExtendedType, Dem_NvmBlockIdExtended, DEM_NVM_CFG_NUM_BLOCKS_EXTENDED);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    40  DEM_ARRAY_DECLARE_CONST(Dem_NvmCopyFunction, DemCopyFctPtrTable, DEM_NVM_CFG_COPYFCT_NUM);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    41  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    42  DEM_ARRAY_DECLARE_CONST(Dem_NvmHashIdType, Dem_HashIdInRom, DEM_NVM_HASH_ID_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    43  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    45  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    46  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    49  DEM_INLINE NvM_BlockIdType Dem_NvMGetNvMBlocKId(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    50  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    51      return Dem_NvMBlockMap2NvmId[id];
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    52  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    54  DEM_INLINE Dem_NvmResultType Dem_NvmGetStatus (Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    55  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    56      NvM_RequestResultType result;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    57      if (NvM_GetErrorStatus (Dem_NvMGetNvMBlocKId(id), &result) == E_NOT_OK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    58      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    59          return DEM_NVM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    60      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    61  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    62      switch (result)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    63      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    64          case NVM_REQ_CANCELED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    65              return DEM_NVM_CANCELED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    66  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    67          case NVM_REQ_OK:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    68          case NVM_REQ_REDUNDANCY_FAILED:     /* Driver could trigger correction of the damaged part of the redundant block; data is read correctly nevertheless */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    69          case NVM_REQ_RESTORED_FROM_ROM:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    70              return DEM_NVM_SUCCESS;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    72          case NVM_REQ_PENDING:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    73              return DEM_NVM_PENDING;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    75          case NVM_REQ_NV_INVALIDATED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    76              return DEM_NVM_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    78          case NVM_REQ_INTEGRITY_FAILED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    79              return DEM_NVM_INTEGRITY_FAILED;    /* NVM_REQ_INTEGRITY_FAILED: description in NVM-doc: Indicates that the latest read operation did not find any valid data for this block on the persistent media. */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    80  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    81          case NVM_REQ_BLOCK_SKIPPED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    82              return DEM_NVM_BLOCK_SKIPPED;       /* NVM_REQ_BLOCK_SKIPPED: if readall would be skipped, it is treated as failure for DEM, because all NVM data has to be available
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    83                                                 at init (ErrorQueue is flushed and event status / eventMemory content needs to be available)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    84                                                 This is ensured as the checks during init are checked to be DEM_NVM_SUCCESS. All other states are handled as error */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    86          default:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    87              /*   NVM_REQ_NOT_OK: Indicates that the latest operation failed due to an unexpected event.  */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    88              return DEM_NVM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    89      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    90  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    92  DEM_INLINE void Dem_NvMWriteBlockOnShutdown(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    93  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    94      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_SHUTDOWN] = DEM_NVM_STATUSBITMASK_SHUTDOWN;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    95  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    97  DEM_INLINE void Dem_NvMWriteBlockImmediate(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    98  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    99      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_IMMEDIATE] = DEM_NVM_STATUSBITMASK_IMMEDIATE;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   100  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   102  DEM_INLINE void Dem_NvMClearBlockByWrite(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   103  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   104      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_CLEAR] = DEM_NVM_STATUSBITMASK_CLEAR;
	movh.a	a15,#@his(Dem_NvMBlockStatusDoubleBuffer)
	lea	a15,[a15]@los(Dem_NvMBlockStatusDoubleBuffer)
.L655:
	mul	d15,d15,#5
	addsc.a	a15,a15,d15,#0
.L656:
	mov	d15,#8
.L657:
	st.b	[a15]3,d15
.L407:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    50          {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    51              Dem_EvMemGenClearDtcByOccurrenceTime(DTCOrigin);
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    52              Dem_EvMemGenClearOverflow(DTCOrigin);
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    53  #if (DEM_CFG_OBD != DEM_CFG_OBD_OFF)
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    54              rba_DemObdBasic_Clear(DTCOrigin);
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    55  #endif
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    56              return DEM_CLEAR_OK;
	mov	d2,#0
.L658:
	j	.L6
.L4:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    57          }
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    58          return DEM_CLEAR_PENDING;
	mov	d2,#4
.L659:
	j	.L7
.L3:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    59      }
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    60  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    61  #if(DEM_CFG_CLEAR_DTC_LIMITATION == DEM_CFG_CLEAR_DTC_LIMITATION_ALL_SUPPORTED_DTCS)
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    62  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    63      if (Dem_ClientSelectionType_isSelectionDTCGroup(Selection))
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    64      {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    65          DTCGroupId = (uint8)Dem_ClientSelectionType_getSelectionDtcIndex (Selection);
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    66          /* Clear All DTCs which belongs to DTCGroup */
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    67          Dem_DtcsClearDtcInGroup(DTCGroupId, DTCOrigin, &Dem_ClientClearMachine);
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    68          if (!Dem_ClientClearMachine.IsClearInterrupted)
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    69          {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    70              return DEM_CLEAR_OK;
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    71          }
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    72          return DEM_CLEAR_PENDING;
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    73      }
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    74      else if (Dem_ClientSelectionType_isSelectionSingleDTC(Selection))
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    75      { /* clear single DTC */
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    76          dtcId = Dem_ClientSelectionType_getSelectionDtcIndex (Selection);
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    77  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    78          Dem_ClearSingleDTC(dtcId, DTCOrigin, &Dem_ClientClearMachine);
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    79  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    80          if (!Dem_ClientClearMachine.IsClearInterrupted)
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    81          {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    82              return DEM_CLEAR_OK;
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    83          }
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    84          return DEM_CLEAR_PENDING;
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    85      }
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    86      else
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    87      {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    88          return DEM_CLEAR_WRONG_DTC; /** Ideally the code shall not reach here */
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    89      }
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    90  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    91  #else
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    92      return DEM_CLEAR_FAILED;
	mov	d2,#3
.L660:
	j	.L8

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    93  #endif
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    94  }
.L8:
.L7:
.L6:
	ret
.L377:
	
__Dem_ClearDTCBody_function_end:
	.size	Dem_ClearDTCBody,__Dem_ClearDTCBody_function_end-Dem_ClearDTCBody
.L167:
	; End of function
	
	.sdecl	'.text.Dem_Clear.Dem_ClearMainFunction',code,cluster('Dem_ClearMainFunction')
	.sect	'.text.Dem_Clear.Dem_ClearMainFunction'
	.align	2
	
	.global	Dem_ClearMainFunction

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    95  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    96  void Dem_ClearMainFunction(void)
; Function Dem_ClearMainFunction
.L114:
Dem_ClearMainFunction:	.type	func

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     3  #ifndef DEM_CLIENTCLEARMACHINE_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     4  #define DEM_CLIENTCLEARMACHINE_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     6  #include "Dem_ClientHandlingTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     7  #include "Dem_ClientBaseHandling.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     8  #include "Dem_Client.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     9  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    10  #include "Dem_Mapping.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    11  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    12  #include "Dem_Cfg_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    14  /******************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    15  /****************  Machine States  ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    16  #define DEM_CLEAR_DTC_MACHINE_STATE_IDLE            0x00u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    17  #define DEM_CLEAR_DTC_MACHINE_STATE_EXEC            0x01u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    18  #define DEM_CLEAR_DTC_MACHINE_STATE_WAITINGFORNVM   0x02u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    20  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    22    uint8                           activeClient;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    23    uint8                           machine_state;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    24    /* Boolean variable to indicate the clear is requested newly and the iterators has to be initialized */
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    25    boolean                         IsNewClearRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    26    /* Boolean variable to indicate the limit to procees the events per cycle has reached */
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    27    boolean                         IsClearInterrupted;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    28    /* Variable to indicate the no of events cleared in a cycle */
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    29    uint16                          NumberOfEventsProcessed;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    30    /* Iterators */
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    31    Dem_DtcIdListIterator           DtcIt;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    32    Dem_EventIdIterator             EvtIt;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    33    Dem_EventIdListIterator         EvtListIt;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    34  #if(DEM_CFG_J1939DCM_CLEAR_SUPPORT != DEM_CFG_J1939DCM_OFF)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    35    Dem_DtcIdListIterator2          DtcIt2;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    36  #endif
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    37  } Dem_ClientClearMachineType;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    38  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    39  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    40  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    41  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    42  extern Dem_ClientClearMachineType Dem_ClientClearMachine;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    44  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    45  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    46  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    47  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    48  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    49  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    50  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    51  /****************  Dem_ClientClearMachine  *************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    53  DEM_INLINE void Dem_ClientClearMachine_SetMachineActiveClient(Dem_ClientIdType ClientId)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    54  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    55      Dem_ClientClearMachine.activeClient = ClientId;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    56  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    57  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    58  DEM_INLINE boolean Dem_ClientClearMachine_isProcessingClient(Dem_ClientIdType ClientId)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    59  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    60      return (Dem_ClientClearMachine.activeClient == ClientId);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    61  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    63  DEM_INLINE uint8 Dem_ClientClearMachine_GetMachineActiveClient(void)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    64  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    65      return Dem_ClientClearMachine.activeClient;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    66  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    67  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    68  DEM_INLINE void Dem_ClientClearMachine_SetMachineState(uint8 state)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    69  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    70      Dem_ClientClearMachine.machine_state = state;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    71  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    73  DEM_INLINE uint8 Dem_ClientClearMachine_GetMachineState(void)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    74  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    75      return Dem_ClientClearMachine.machine_state;
	movh.a	a12,#@his(Dem_ClientClearMachine)
	lea	a12,[a12]@los(Dem_ClientClearMachine)
.L528:
	mov.aa	a13,a12
	add.a	a13,#1
	ld.bu	d15,[a13]
.L529:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    75      return Dem_ClientClearMachine.machine_state;      (inlined)
	j	.L9

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    76  }      (inlined)
.L9:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    97  {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    98      Dem_ClientRequestType tempRequest;
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	    99      Dem_ClientIdType tempClientId;
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   100  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   101      if (Dem_ClientClearMachine_GetMachineState() != DEM_CLEAR_DTC_MACHINE_STATE_IDLE)
	jeq	d15,#0,.L10
.L241:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     3  #ifndef DEM_CLIENTCLEARMACHINE_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     4  #define DEM_CLIENTCLEARMACHINE_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     6  #include "Dem_ClientHandlingTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     7  #include "Dem_ClientBaseHandling.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     8  #include "Dem_Client.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     9  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    10  #include "Dem_Mapping.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    11  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    12  #include "Dem_Cfg_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    14  /******************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    15  /****************  Machine States  ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    16  #define DEM_CLEAR_DTC_MACHINE_STATE_IDLE            0x00u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    17  #define DEM_CLEAR_DTC_MACHINE_STATE_EXEC            0x01u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    18  #define DEM_CLEAR_DTC_MACHINE_STATE_WAITINGFORNVM   0x02u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    20  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    22    uint8                           activeClient;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    23    uint8                           machine_state;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    24    /* Boolean variable to indicate the clear is requested newly and the iterators has to be initialized */
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    25    boolean                         IsNewClearRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    26    /* Boolean variable to indicate the limit to procees the events per cycle has reached */
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    27    boolean                         IsClearInterrupted;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    28    /* Variable to indicate the no of events cleared in a cycle */
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    29    uint16                          NumberOfEventsProcessed;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    30    /* Iterators */
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    31    Dem_DtcIdListIterator           DtcIt;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    32    Dem_EventIdIterator             EvtIt;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    33    Dem_EventIdListIterator         EvtListIt;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    34  #if(DEM_CFG_J1939DCM_CLEAR_SUPPORT != DEM_CFG_J1939DCM_OFF)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    35    Dem_DtcIdListIterator2          DtcIt2;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    36  #endif
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    37  } Dem_ClientClearMachineType;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    38  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    39  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    40  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    41  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    42  extern Dem_ClientClearMachineType Dem_ClientClearMachine;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    44  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    45  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    46  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    47  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    48  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    49  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    50  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    51  /****************  Dem_ClientClearMachine  *************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    53  DEM_INLINE void Dem_ClientClearMachine_SetMachineActiveClient(Dem_ClientIdType ClientId)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    54  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    55      Dem_ClientClearMachine.activeClient = ClientId;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    56  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    57  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    58  DEM_INLINE boolean Dem_ClientClearMachine_isProcessingClient(Dem_ClientIdType ClientId)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    59  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    60      return (Dem_ClientClearMachine.activeClient == ClientId);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    61  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    63  DEM_INLINE uint8 Dem_ClientClearMachine_GetMachineActiveClient(void)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    64  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    65      return Dem_ClientClearMachine.activeClient;
	ld.bu	d8,[a12]
.L423:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    65      return Dem_ClientClearMachine.activeClient;      (inlined)
	j	.L11

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    66  }      (inlined)
.L11:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   102      {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   103          tempClientId = Dem_ClientClearMachine_GetMachineActiveClient();
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   104          tempRequest = Dem_Client_getClient(tempClientId)->request;
	mov	d4,d8
	call	Dem_Client_getClient
.L530:
	ld.hu	d9,[a2]8
.L244:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     3  #ifndef DEM_CLIENTBASEHANDLING_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     4  #define DEM_CLIENTBASEHANDLING_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     6  #include "Dem_ClientHandlingTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     7  #include "Dem_Client.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     8  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    11  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    12  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    14  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    15  /*********  MASKS : Dem_ClientRequestType, Dem_ClientResultType & Dem_ClientSelectionType *********/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    17  #define DEM_CLIENT_TYPE_MASK     0xFFu
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    19  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    20  /****************  MASKS : Dem_ClientRequestType & Dem_ClientResultType ***************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    22  #define DEM_CLIENT_REQUEST_RESULT_IDMASK       0xFF00u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    23  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    24  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    25  /****************  Dem_ClientResultType  **********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    27  DEM_INLINE void Dem_ClientResultType_setResult(volatile Dem_ClientResultType *result, Dem_ClientRequestType request, Std_ReturnType newResult)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    28  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    29      Dem_ClientResultType tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    31      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientResultType)) >= 2u), DEM_CLIENTRSULTTYPE_SHALL_BE_UINT16);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    33      tempResult = (request & DEM_CLIENT_REQUEST_RESULT_IDMASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    34      tempResult |= newResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    35      *result = tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    36  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    38  DEM_INLINE Std_ReturnType Dem_ClientResultType_getResult(Dem_ClientResultType result)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    39  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    40      return ((Std_ReturnType)(result & DEM_CLIENT_TYPE_MASK));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    41  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    42  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    43  DEM_INLINE void Dem_ClientResultType_confirmCancel(volatile Dem_ClientResultType *result, Dem_ClientRequestType request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    44  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    45      Dem_ClientResultType tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    46  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    47      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientResultType)) >= 2u), DEM_CLIENTRSULTTYPE_SHALL_BE_UINT16);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    49      tempResult = (request & DEM_CLIENT_REQUEST_RESULT_IDMASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    50      tempResult |= DEM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    51      *result = tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    52  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    54  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    55  /****************  Dem_ClientRequestType  *********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    57  #define DEM_CLIENT_REQUEST_TYPE_CANCEL_MASK     0x01u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    59  DEM_INLINE boolean Dem_ClientRequestType_isRequestInProgress(Dem_ClientIdType clientId)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    60  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    61      return ((Dem_Clients[clientId].request & DEM_CLIENT_REQUEST_RESULT_IDMASK)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    62              != (Dem_Clients[clientId].result & DEM_CLIENT_REQUEST_RESULT_IDMASK));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    63  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    65  DEM_INLINE void Dem_ClientRequestType_setRequest(volatile Dem_ClientRequestType *request, uint8 newRequest)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    67      Dem_ClientRequestType tempRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    68  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    69      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientRequestType) >= 2u)), DEM_CLIENTREQUESTTYPE_SHALL_BE_UINT16);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    71      tempRequest = *request;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    72      tempRequest += 0x0100u;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    73      tempRequest = (tempRequest & DEM_CLIENT_REQUEST_RESULT_IDMASK) | newRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    74      *request = tempRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    75  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    76  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    78  DEM_INLINE void Dem_ClientRequestType_cancelRequest(volatile Dem_ClientRequestType *request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    79  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    80      Dem_ClientRequestType_setRequest(request,1);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    81  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    82  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    84  DEM_INLINE uint8 Dem_ClientRequestType_getMachineIndex(Dem_ClientRequestType request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    85  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    86      uint8 machineIndex;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    87      machineIndex = (((uint8)(request & DEM_CLIENT_TYPE_MASK)) >> 1u);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    88      return machineIndex;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    89  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    91  DEM_INLINE boolean Dem_ClientRequestType_isCancelRequested(Dem_ClientRequestType request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    92  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    93      return ((request & DEM_CLIENT_REQUEST_TYPE_CANCEL_MASK) == 1u);
	and	d15,d9,#1
	ne	d0,d15,#0
.L531:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    93      return ((request & DEM_CLIENT_REQUEST_TYPE_CANCEL_MASK) == 1u);      (inlined)
	j	.L12

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    94  }      (inlined)
.L12:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   105          /* process state machine */
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   106          if (!Dem_ClientRequestType_isCancelRequested(tempRequest))
	jne	d0,#0,.L13
.L248:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     3  #ifndef DEM_CLIENTCLEARMACHINE_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     4  #define DEM_CLIENTCLEARMACHINE_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     6  #include "Dem_ClientHandlingTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     7  #include "Dem_ClientBaseHandling.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     8  #include "Dem_Client.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     9  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    10  #include "Dem_Mapping.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    11  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    12  #include "Dem_Cfg_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    14  /******************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    15  /****************  Machine States  ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    16  #define DEM_CLEAR_DTC_MACHINE_STATE_IDLE            0x00u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    17  #define DEM_CLEAR_DTC_MACHINE_STATE_EXEC            0x01u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    18  #define DEM_CLEAR_DTC_MACHINE_STATE_WAITINGFORNVM   0x02u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    20  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    22    uint8                           activeClient;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    23    uint8                           machine_state;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    24    /* Boolean variable to indicate the clear is requested newly and the iterators has to be initialized */
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    25    boolean                         IsNewClearRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    26    /* Boolean variable to indicate the limit to procees the events per cycle has reached */
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    27    boolean                         IsClearInterrupted;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    28    /* Variable to indicate the no of events cleared in a cycle */
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    29    uint16                          NumberOfEventsProcessed;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    30    /* Iterators */
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    31    Dem_DtcIdListIterator           DtcIt;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    32    Dem_EventIdIterator             EvtIt;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    33    Dem_EventIdListIterator         EvtListIt;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    34  #if(DEM_CFG_J1939DCM_CLEAR_SUPPORT != DEM_CFG_J1939DCM_OFF)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    35    Dem_DtcIdListIterator2          DtcIt2;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    36  #endif
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    37  } Dem_ClientClearMachineType;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    38  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    39  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    40  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    41  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    42  extern Dem_ClientClearMachineType Dem_ClientClearMachine;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    44  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    45  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    46  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    47  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    48  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    49  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    50  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    51  /****************  Dem_ClientClearMachine  *************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    53  DEM_INLINE void Dem_ClientClearMachine_SetMachineActiveClient(Dem_ClientIdType ClientId)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    54  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    55      Dem_ClientClearMachine.activeClient = ClientId;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    56  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    57  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    58  DEM_INLINE boolean Dem_ClientClearMachine_isProcessingClient(Dem_ClientIdType ClientId)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    59  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    60      return (Dem_ClientClearMachine.activeClient == ClientId);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    61  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    63  DEM_INLINE uint8 Dem_ClientClearMachine_GetMachineActiveClient(void)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    64  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    65      return Dem_ClientClearMachine.activeClient;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    66  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    67  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    68  DEM_INLINE void Dem_ClientClearMachine_SetMachineState(uint8 state)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    69  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    70      Dem_ClientClearMachine.machine_state = state;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    71  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    73  DEM_INLINE uint8 Dem_ClientClearMachine_GetMachineState(void)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    74  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    75      return Dem_ClientClearMachine.machine_state;
	ld.bu	d0,[a13]
.L532:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    75      return Dem_ClientClearMachine.machine_state;      (inlined)
	j	.L14

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    76  }      (inlined)
.L14:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   107          {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   108              if (Dem_ClientClearMachine_GetMachineState() == DEM_CLEAR_DTC_MACHINE_STATE_EXEC)
	jne	d0,#1,.L15
.L533:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   109              {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   110  #if(DEM_CFG_J1939DCM_CLEAR_SUPPORT != DEM_CFG_J1939DCM_OFF)
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   111                  if (tempClientId == DEM_CLIENTID_J1939)
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   112                  {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   113                      Dem_ClearResult = Dem_J1939DcmClearDTCBody(Dem_Client_getClient(tempClientId)->J1939DTCTypeFilter,
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   114                              Dem_Client_getClient(tempClientId)->J1939node);
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   115                  }
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   116                  else
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   117  #endif
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   118                  {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   119                      if (Dem_ClientClearMachine.IsNewClearRequest)
	mov.aa	a14,a12
	add.a	a14,#2
	ld.bu	d15,[a14]
.L534:
	jeq	d15,#0,.L16
.L535:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   120                      {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   121                          /* Callback function to notify when ClearDTC is triggered */
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   122                          Dem_ClearDtcNotificationStartCallbacks(Dem_Client_getClient(tempClientId)->DTC,
	mov	d4,d8
	call	Dem_Client_getClient
.L536:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   123                                                                 Dem_Client_getClient(tempClientId)->DTCFormat,
	mov	d4,d8
	call	Dem_Client_getClient
.L537:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   124                                                                 Dem_Client_getClient(tempClientId)->DTCOrigin);
	mov	d4,d8
	call	Dem_Client_getClient
.L16:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   125                      }
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   126  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   127                      Dem_ClearResult = Dem_ClearDTCBody(Dem_Client_getClient(tempClientId)->selection,
	mov	d4,d8
	call	Dem_Client_getClient
.L538:
	ld.w	d15,[a2]12
.L539:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   128                              Dem_Client_getClient(tempClientId)->DTCOrigin);
	mov	d4,d8
	call	Dem_Client_getClient
.L540:
	ld.bu	d5,[a2]5
.L541:
	movh.a	a15,#@his(Dem_ClearResult)
	lea	a15,[a15]@los(Dem_ClearResult)
.L542:
	mov	d4,d15
	call	Dem_ClearDTCBody
.L543:
	st.b	[a15],d2
.L544:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   129                  }
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   130  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   131                  Dem_ClientClearMachine.IsNewClearRequest = FALSE;
	mov	d0,#0
.L545:
	st.b	[a14],d0
.L546:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   132  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   133                  if (Dem_ClearResult != DEM_CLEAR_PENDING)
	ld.bu	d15,[a15]
.L547:
	jeq	d15,#4,.L17
.L548:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   134                  {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   135                      Dem_ClientClearMachine_SetClientRequest(tempClientId, DEM_CLEAR_DTC_MACHINE_STATE_WAITINGFORNVM);
	mov	d10,#2
.L250:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     3  #ifndef DEM_CLIENTCLEARMACHINE_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     4  #define DEM_CLIENTCLEARMACHINE_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     6  #include "Dem_ClientHandlingTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     7  #include "Dem_ClientBaseHandling.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     8  #include "Dem_Client.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     9  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    10  #include "Dem_Mapping.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    11  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    12  #include "Dem_Cfg_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    14  /******************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    15  /****************  Machine States  ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    16  #define DEM_CLEAR_DTC_MACHINE_STATE_IDLE            0x00u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    17  #define DEM_CLEAR_DTC_MACHINE_STATE_EXEC            0x01u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    18  #define DEM_CLEAR_DTC_MACHINE_STATE_WAITINGFORNVM   0x02u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    20  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    22    uint8                           activeClient;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    23    uint8                           machine_state;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    24    /* Boolean variable to indicate the clear is requested newly and the iterators has to be initialized */
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    25    boolean                         IsNewClearRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    26    /* Boolean variable to indicate the limit to procees the events per cycle has reached */
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    27    boolean                         IsClearInterrupted;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    28    /* Variable to indicate the no of events cleared in a cycle */
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    29    uint16                          NumberOfEventsProcessed;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    30    /* Iterators */
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    31    Dem_DtcIdListIterator           DtcIt;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    32    Dem_EventIdIterator             EvtIt;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    33    Dem_EventIdListIterator         EvtListIt;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    34  #if(DEM_CFG_J1939DCM_CLEAR_SUPPORT != DEM_CFG_J1939DCM_OFF)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    35    Dem_DtcIdListIterator2          DtcIt2;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    36  #endif
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    37  } Dem_ClientClearMachineType;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    38  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    39  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    40  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    41  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    42  extern Dem_ClientClearMachineType Dem_ClientClearMachine;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    44  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    45  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    46  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    47  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    48  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    49  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    50  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    51  /****************  Dem_ClientClearMachine  *************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    53  DEM_INLINE void Dem_ClientClearMachine_SetMachineActiveClient(Dem_ClientIdType ClientId)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    54  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    55      Dem_ClientClearMachine.activeClient = ClientId;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    56  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    57  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    58  DEM_INLINE boolean Dem_ClientClearMachine_isProcessingClient(Dem_ClientIdType ClientId)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    59  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    60      return (Dem_ClientClearMachine.activeClient == ClientId);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    61  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    63  DEM_INLINE uint8 Dem_ClientClearMachine_GetMachineActiveClient(void)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    64  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    65      return Dem_ClientClearMachine.activeClient;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    66  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    67  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    68  DEM_INLINE void Dem_ClientClearMachine_SetMachineState(uint8 state)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    69  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    70      Dem_ClientClearMachine.machine_state = state;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    71  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    73  DEM_INLINE uint8 Dem_ClientClearMachine_GetMachineState(void)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    74  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    75      return Dem_ClientClearMachine.machine_state;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    76  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    78  DEM_INLINE boolean Dem_ClientClearMachine_isClearDtcGroupAllDtcsSelected(Dem_ClientIdType ClientId)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    79  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    80  boolean status = TRUE;
	mov	d0,#1
.L262:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     3  #ifndef DEM_LIB_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     4  #define DEM_LIB_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     6  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     7  #include "Dem_Prv_Det.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     8  #include "rba_DiagLib_MemUtils.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     9  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    11  /* Macro for static assertion Check */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    12  /* either array length is (2*1)-1->valid or (2*0)-1->invalid*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    13  #define DEM_STATIC_ASSERT(COND,MSG) typedef uint8 Dem_static_assertion_##MSG[(2*(((COND)!=(FALSE))?1:0))-1]
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    15  /* mapping of memset and memcpy */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    16  #define DEM_MEMCPY  RBA_DIAGLIB_MEMCPY
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    17  #define DEM_MEMSET  RBA_DIAGLIB_MEMSET
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    19  /* Defines */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    20  #define DEM_MAXSINT16   0x7FFF
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    22  #if (DEM_CFG_BUILDTARGET != DEM_CFG_BUILDTARGET_DEMTESTSUITE)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    23      #define DEM_ASSERT_RANGECHECK(CONDITION) do {} while (0)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    24  #else
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    25      #include "DemTest_Stub4RangeCheck.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    27      #define DEM_ASSERT_RANGECHECK(CONDITION) DEM_assertValueInRange(CONDITION)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    28  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    30  // these functions are necessary to avoid compiler warnings of the kind "statement is always FALSE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    31  DEM_INLINE uint16 Dem_LibGetParamUI16( uint16 parameter )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    33      return parameter;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    36  DEM_INLINE uint8 Dem_LibGetParamUI8( uint8 parameter )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    38      return parameter;
	mov	d1,#2

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    38      return parameter;      (inlined)
	j	.L18

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    39  }      (inlined)
.L18:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    81  #if(DEM_CFG_J1939DCM != DEM_CFG_J1939DCM_OFF)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    82  if (ClientId != DEM_CLIENTID_J1939)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    84  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    85      if ((Dem_LibGetParamUI8(DEM_CFG_CLEAR_DTC_LIMITATION)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    86              == Dem_LibGetParamUI8(DEM_CFG_CLEAR_DTC_LIMITATION_ONLY_CLEAR_ALL_DTCS))
	mov	d2,#2
.L264:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    38      return parameter;      (inlined)
	j	.L19

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    39  }      (inlined)
.L19:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    85      if ((Dem_LibGetParamUI8(DEM_CFG_CLEAR_DTC_LIMITATION)      (inlined)
	jne	d1,d2,.L20
.L549:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    87              && (Dem_ClientSelectionType_getTypeOfSelection(Dem_Clients[ClientId].selection)
	sha	d15,d8,#4
.L550:
	movh.a	a15,#@his(Dem_Clients)
	lea	a15,[a15]@los(Dem_Clients)
.L551:
	addsc.a	a15,a15,d15,#0
.L552:
	ld.w	d15,[a15]12
.L266:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     3  #ifndef DEM_CLIENTBASEHANDLING_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     4  #define DEM_CLIENTBASEHANDLING_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     6  #include "Dem_ClientHandlingTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     7  #include "Dem_Client.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     8  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    11  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    12  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    14  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    15  /*********  MASKS : Dem_ClientRequestType, Dem_ClientResultType & Dem_ClientSelectionType *********/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    17  #define DEM_CLIENT_TYPE_MASK     0xFFu
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    19  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    20  /****************  MASKS : Dem_ClientRequestType & Dem_ClientResultType ***************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    22  #define DEM_CLIENT_REQUEST_RESULT_IDMASK       0xFF00u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    23  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    24  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    25  /****************  Dem_ClientResultType  **********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    27  DEM_INLINE void Dem_ClientResultType_setResult(volatile Dem_ClientResultType *result, Dem_ClientRequestType request, Std_ReturnType newResult)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    28  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    29      Dem_ClientResultType tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    31      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientResultType)) >= 2u), DEM_CLIENTRSULTTYPE_SHALL_BE_UINT16);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    33      tempResult = (request & DEM_CLIENT_REQUEST_RESULT_IDMASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    34      tempResult |= newResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    35      *result = tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    36  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    38  DEM_INLINE Std_ReturnType Dem_ClientResultType_getResult(Dem_ClientResultType result)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    39  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    40      return ((Std_ReturnType)(result & DEM_CLIENT_TYPE_MASK));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    41  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    42  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    43  DEM_INLINE void Dem_ClientResultType_confirmCancel(volatile Dem_ClientResultType *result, Dem_ClientRequestType request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    44  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    45      Dem_ClientResultType tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    46  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    47      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientResultType)) >= 2u), DEM_CLIENTRSULTTYPE_SHALL_BE_UINT16);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    49      tempResult = (request & DEM_CLIENT_REQUEST_RESULT_IDMASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    50      tempResult |= DEM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    51      *result = tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    52  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    54  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    55  /****************  Dem_ClientRequestType  *********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    57  #define DEM_CLIENT_REQUEST_TYPE_CANCEL_MASK     0x01u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    59  DEM_INLINE boolean Dem_ClientRequestType_isRequestInProgress(Dem_ClientIdType clientId)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    60  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    61      return ((Dem_Clients[clientId].request & DEM_CLIENT_REQUEST_RESULT_IDMASK)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    62              != (Dem_Clients[clientId].result & DEM_CLIENT_REQUEST_RESULT_IDMASK));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    63  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    65  DEM_INLINE void Dem_ClientRequestType_setRequest(volatile Dem_ClientRequestType *request, uint8 newRequest)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    67      Dem_ClientRequestType tempRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    68  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    69      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientRequestType) >= 2u)), DEM_CLIENTREQUESTTYPE_SHALL_BE_UINT16);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    71      tempRequest = *request;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    72      tempRequest += 0x0100u;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    73      tempRequest = (tempRequest & DEM_CLIENT_REQUEST_RESULT_IDMASK) | newRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    74      *request = tempRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    75  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    76  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    78  DEM_INLINE void Dem_ClientRequestType_cancelRequest(volatile Dem_ClientRequestType *request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    79  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    80      Dem_ClientRequestType_setRequest(request,1);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    81  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    82  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    84  DEM_INLINE uint8 Dem_ClientRequestType_getMachineIndex(Dem_ClientRequestType request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    85  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    86      uint8 machineIndex;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    87      machineIndex = (((uint8)(request & DEM_CLIENT_TYPE_MASK)) >> 1u);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    88      return machineIndex;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    89  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    91  DEM_INLINE boolean Dem_ClientRequestType_isCancelRequested(Dem_ClientRequestType request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    92  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    93      return ((request & DEM_CLIENT_REQUEST_TYPE_CANCEL_MASK) == 1u);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    94  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    95  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    96  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    97  /****************  Dem_ClientSelectionType  *******************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    98  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    99  #define DEM_CLIENT_SELECTION_DTCINDEXMASK                0xFFFFu
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   100  #define DEM_CLIENT_INVALIDATE_SELECTION_IDMASK           0x00FFFFFFu
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   101  #define DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE  16u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   102  #define DEM_CLIENT_SELECTION_TYPE_BITPOS_RESULT          24u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   104  DEM_INLINE uint16 Dem_ClientSelectionType_getSelectionDtcIndex (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   105  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   106      return ((uint16)(selection & DEM_CLIENT_SELECTION_DTCINDEXMASK));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   107  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   108  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   109  DEM_INLINE void Dem_ClientSelectionType_setSelection (Dem_ClientSelectionType *selection, uint16 dtcId, uint8 typeOfSelection, Std_ReturnType selectionResult)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   110  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   111      Dem_ClientSelectionType tempSelection;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   113      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientSelectionType) >= 4u)), DEM_CLIENTSELECTIONTYPE_SHALL_BE_UINT32);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   115      tempSelection = (((uint32)dtcId) | (((uint32)typeOfSelection) << DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) | (((uint32)selectionResult) << DEM_CLIENT_SELECTION_TYPE_BITPOS_RESULT));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   116      *selection = tempSelection;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   117  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   119  DEM_INLINE boolean Dem_ClientSelectionType_isSelectionSingleDTC (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   120  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   121      uint8 tempSelectionType;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   122      tempSelectionType = (uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) & DEM_CLIENT_TYPE_MASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   124      return (tempSelectionType == DEM_CLIENT_SELECTION_TYPE_SINGLE_DTC);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   127  DEM_INLINE boolean Dem_ClientSelectionType_isSelectionDTCGroupAll (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   128  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   129      uint8 tempSelectionType;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   130      tempSelectionType = (uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) & DEM_CLIENT_TYPE_MASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   131  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   132      return (tempSelectionType == DEM_CLIENT_SELECTION_TYPE_ALL_DTCS);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   133  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   135  DEM_INLINE boolean Dem_ClientSelectionType_isSelectionDTCGroup (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   136  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   137      uint8 tempSelectionType;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   138      tempSelectionType = (uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) & DEM_CLIENT_TYPE_MASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   139  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   140      return (tempSelectionType == DEM_CLIENT_SELECTION_TYPE_GROUP_DTC);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   141  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   143  DEM_INLINE boolean Dem_ClientSelectionType_isSelectionPending (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   145      uint8 tempSelectionResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   146      tempSelectionResult = (uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_RESULT) & DEM_CLIENT_TYPE_MASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   148      return (tempSelectionResult == DEM_PENDING);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   151  DEM_INLINE void Dem_ClientSelectionType_invalidateSelectionResult (Dem_ClientSelectionType *selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   152  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   153      Std_ReturnType tempresult = DEM_PENDING;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   154      Dem_ClientSelectionType tempSelection;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   156      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientSelectionType) >= 4u)), DEM_CLIENTSELECTIONTYPE_SHALL_BE_UINT32);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   158      tempSelection = (*selection & DEM_CLIENT_INVALIDATE_SELECTION_IDMASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   159      tempSelection |= (((uint32)tempresult) << DEM_CLIENT_SELECTION_TYPE_BITPOS_RESULT);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   160      *selection = tempSelection;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   163  DEM_INLINE Std_ReturnType Dem_ClientSelectionType_getSelectionResult (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   164  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   165      return ((Std_ReturnType)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_RESULT) & DEM_CLIENT_TYPE_MASK));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   166  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   167  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   168  DEM_INLINE uint8 Dem_ClientSelectionType_getTypeOfSelection (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   169  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   170      return ((uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) & DEM_CLIENT_TYPE_MASK));
	sh	d15,d15,#-16
.L553:
	extr.u	d15,d15,#0,#8
.L554:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   170      return ((uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) & DEM_CLIENT_TYPE_MASK));      (inlined)
	j	.L21

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   171  }      (inlined)
.L21:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    88                      != DEM_CLIENT_SELECTION_TYPE_ALL_DTCS))      (inlined)
	jeq	d15,#1,.L22
.L555:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    88                      != DEM_CLIENT_SELECTION_TYPE_ALL_DTCS))
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    89      {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    90          Dem_ClientResultType_setResult(&Dem_Clients[ClientId].result, Dem_Clients[ClientId].request, DEM_WRONG_DTC);
	ld.hu	d15,[a15]8
.L556:
	lea	a15,[a15]10
.L557:
	mov	d0,#1
.L271:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     3  #ifndef DEM_CLIENTBASEHANDLING_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     4  #define DEM_CLIENTBASEHANDLING_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     6  #include "Dem_ClientHandlingTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     7  #include "Dem_Client.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     8  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    11  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    12  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    14  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    15  /*********  MASKS : Dem_ClientRequestType, Dem_ClientResultType & Dem_ClientSelectionType *********/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    17  #define DEM_CLIENT_TYPE_MASK     0xFFu
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    19  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    20  /****************  MASKS : Dem_ClientRequestType & Dem_ClientResultType ***************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    22  #define DEM_CLIENT_REQUEST_RESULT_IDMASK       0xFF00u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    23  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    24  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    25  /****************  Dem_ClientResultType  **********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    27  DEM_INLINE void Dem_ClientResultType_setResult(volatile Dem_ClientResultType *result, Dem_ClientRequestType request, Std_ReturnType newResult)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    28  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    29      Dem_ClientResultType tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    31      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientResultType)) >= 2u), DEM_CLIENTRSULTTYPE_SHALL_BE_UINT16);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    33      tempResult = (request & DEM_CLIENT_REQUEST_RESULT_IDMASK);
	mov.u	d1,#65280
.L425:
	and	d15,d1
.L427:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    34      tempResult |= newResult;
	or	d0,d15
.L426:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    35      *result = tempResult;
	st.h	[a15],d0
.L272:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    91          status = FALSE;
	mov	d0,#0

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    85      if ((Dem_LibGetParamUI8(DEM_CFG_CLEAR_DTC_LIMITATION)      (inlined)
.L22:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    88                      != DEM_CLIENT_SELECTION_TYPE_ALL_DTCS))      (inlined)
.L20:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    94  return status;      (inlined)
	j	.L23

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    95  }      (inlined)
.L23:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    99  if (Dem_ClientClearMachine_isClearDtcGroupAllDtcsSelected(ClientId))      (inlined)
	jeq	d0,#0,.L24
.L257:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   101      if (state == DEM_CLEAR_DTC_MACHINE_STATE_IDLE)      (inlined)
	jne	d10,#0,.L25
.L558:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    92      }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    94  return status;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    95  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    97  DEM_INLINE void Dem_ClientClearMachine_SetClientRequest(Dem_ClientIdType ClientId, uint8 state)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    98  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    99  if (Dem_ClientClearMachine_isClearDtcGroupAllDtcsSelected(ClientId))
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   100  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   101      if (state == DEM_CLEAR_DTC_MACHINE_STATE_IDLE)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   102      {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   103          Dem_ClientSelectionType_invalidateSelectionResult(&Dem_Client_getClient(ClientId)->selection);
	mov	d4,d8
	call	Dem_Client_getClient
.L428:
	lea	a15,[a2]12
.L282:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     3  #ifndef DEM_CLIENTBASEHANDLING_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     4  #define DEM_CLIENTBASEHANDLING_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     6  #include "Dem_ClientHandlingTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     7  #include "Dem_Client.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     8  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    11  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    12  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    14  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    15  /*********  MASKS : Dem_ClientRequestType, Dem_ClientResultType & Dem_ClientSelectionType *********/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    17  #define DEM_CLIENT_TYPE_MASK     0xFFu
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    19  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    20  /****************  MASKS : Dem_ClientRequestType & Dem_ClientResultType ***************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    22  #define DEM_CLIENT_REQUEST_RESULT_IDMASK       0xFF00u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    23  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    24  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    25  /****************  Dem_ClientResultType  **********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    27  DEM_INLINE void Dem_ClientResultType_setResult(volatile Dem_ClientResultType *result, Dem_ClientRequestType request, Std_ReturnType newResult)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    28  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    29      Dem_ClientResultType tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    31      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientResultType)) >= 2u), DEM_CLIENTRSULTTYPE_SHALL_BE_UINT16);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    33      tempResult = (request & DEM_CLIENT_REQUEST_RESULT_IDMASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    34      tempResult |= newResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    35      *result = tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    36  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    38  DEM_INLINE Std_ReturnType Dem_ClientResultType_getResult(Dem_ClientResultType result)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    39  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    40      return ((Std_ReturnType)(result & DEM_CLIENT_TYPE_MASK));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    41  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    42  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    43  DEM_INLINE void Dem_ClientResultType_confirmCancel(volatile Dem_ClientResultType *result, Dem_ClientRequestType request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    44  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    45      Dem_ClientResultType tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    46  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    47      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientResultType)) >= 2u), DEM_CLIENTRSULTTYPE_SHALL_BE_UINT16);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    49      tempResult = (request & DEM_CLIENT_REQUEST_RESULT_IDMASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    50      tempResult |= DEM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    51      *result = tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    52  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    54  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    55  /****************  Dem_ClientRequestType  *********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    57  #define DEM_CLIENT_REQUEST_TYPE_CANCEL_MASK     0x01u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    59  DEM_INLINE boolean Dem_ClientRequestType_isRequestInProgress(Dem_ClientIdType clientId)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    60  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    61      return ((Dem_Clients[clientId].request & DEM_CLIENT_REQUEST_RESULT_IDMASK)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    62              != (Dem_Clients[clientId].result & DEM_CLIENT_REQUEST_RESULT_IDMASK));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    63  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    65  DEM_INLINE void Dem_ClientRequestType_setRequest(volatile Dem_ClientRequestType *request, uint8 newRequest)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    67      Dem_ClientRequestType tempRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    68  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    69      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientRequestType) >= 2u)), DEM_CLIENTREQUESTTYPE_SHALL_BE_UINT16);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    71      tempRequest = *request;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    72      tempRequest += 0x0100u;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    73      tempRequest = (tempRequest & DEM_CLIENT_REQUEST_RESULT_IDMASK) | newRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    74      *request = tempRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    75  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    76  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    78  DEM_INLINE void Dem_ClientRequestType_cancelRequest(volatile Dem_ClientRequestType *request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    79  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    80      Dem_ClientRequestType_setRequest(request,1);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    81  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    82  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    84  DEM_INLINE uint8 Dem_ClientRequestType_getMachineIndex(Dem_ClientRequestType request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    85  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    86      uint8 machineIndex;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    87      machineIndex = (((uint8)(request & DEM_CLIENT_TYPE_MASK)) >> 1u);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    88      return machineIndex;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    89  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    91  DEM_INLINE boolean Dem_ClientRequestType_isCancelRequested(Dem_ClientRequestType request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    92  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    93      return ((request & DEM_CLIENT_REQUEST_TYPE_CANCEL_MASK) == 1u);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    94  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    95  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    96  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    97  /****************  Dem_ClientSelectionType  *******************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    98  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    99  #define DEM_CLIENT_SELECTION_DTCINDEXMASK                0xFFFFu
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   100  #define DEM_CLIENT_INVALIDATE_SELECTION_IDMASK           0x00FFFFFFu
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   101  #define DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE  16u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   102  #define DEM_CLIENT_SELECTION_TYPE_BITPOS_RESULT          24u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   104  DEM_INLINE uint16 Dem_ClientSelectionType_getSelectionDtcIndex (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   105  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   106      return ((uint16)(selection & DEM_CLIENT_SELECTION_DTCINDEXMASK));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   107  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   108  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   109  DEM_INLINE void Dem_ClientSelectionType_setSelection (Dem_ClientSelectionType *selection, uint16 dtcId, uint8 typeOfSelection, Std_ReturnType selectionResult)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   110  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   111      Dem_ClientSelectionType tempSelection;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   113      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientSelectionType) >= 4u)), DEM_CLIENTSELECTIONTYPE_SHALL_BE_UINT32);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   115      tempSelection = (((uint32)dtcId) | (((uint32)typeOfSelection) << DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) | (((uint32)selectionResult) << DEM_CLIENT_SELECTION_TYPE_BITPOS_RESULT));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   116      *selection = tempSelection;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   117  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   119  DEM_INLINE boolean Dem_ClientSelectionType_isSelectionSingleDTC (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   120  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   121      uint8 tempSelectionType;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   122      tempSelectionType = (uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) & DEM_CLIENT_TYPE_MASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   124      return (tempSelectionType == DEM_CLIENT_SELECTION_TYPE_SINGLE_DTC);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   127  DEM_INLINE boolean Dem_ClientSelectionType_isSelectionDTCGroupAll (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   128  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   129      uint8 tempSelectionType;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   130      tempSelectionType = (uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) & DEM_CLIENT_TYPE_MASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   131  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   132      return (tempSelectionType == DEM_CLIENT_SELECTION_TYPE_ALL_DTCS);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   133  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   135  DEM_INLINE boolean Dem_ClientSelectionType_isSelectionDTCGroup (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   136  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   137      uint8 tempSelectionType;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   138      tempSelectionType = (uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) & DEM_CLIENT_TYPE_MASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   139  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   140      return (tempSelectionType == DEM_CLIENT_SELECTION_TYPE_GROUP_DTC);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   141  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   143  DEM_INLINE boolean Dem_ClientSelectionType_isSelectionPending (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   145      uint8 tempSelectionResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   146      tempSelectionResult = (uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_RESULT) & DEM_CLIENT_TYPE_MASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   148      return (tempSelectionResult == DEM_PENDING);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   151  DEM_INLINE void Dem_ClientSelectionType_invalidateSelectionResult (Dem_ClientSelectionType *selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   152  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   153      Std_ReturnType tempresult = DEM_PENDING;
	mov	d15,#4
.L429:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   154      Dem_ClientSelectionType tempSelection;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   156      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientSelectionType) >= 4u)), DEM_CLIENTSELECTIONTYPE_SHALL_BE_UINT32);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   158      tempSelection = (*selection & DEM_CLIENT_INVALIDATE_SELECTION_IDMASK);
	ld.w	d0,[a15]
.L559:
	insert	d0,d0,#0,#24,#8
.L431:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   159      tempSelection |= (((uint32)tempresult) << DEM_CLIENT_SELECTION_TYPE_BITPOS_RESULT);
	sh	d15,d15,#24
.L430:
	or	d0,d15
.L560:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   160      *selection = tempSelection;
	st.w	[a15],d0
.L283:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   104          Dem_ClientClearMachine_SetMachineActiveClient(DEM_CLIENTID_INVALID);
	mov	d15,#0
.L290:
	st.b	[a12],d15
.L291:
	st.b	[a13],d10
.L296:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   103          Dem_ClientSelectionType_invalidateSelectionResult(&Dem_Client_getClient(ClientId)->selection);      (inlined)
	j	.L26

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   101      if (state == DEM_CLEAR_DTC_MACHINE_STATE_IDLE)      (inlined)
.L25:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   107      else if (state == DEM_CLEAR_DTC_MACHINE_STATE_EXEC)      (inlined)
	jne	d10,#1,.L27
.L561:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   105          Dem_ClientClearMachine_SetMachineState(state);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   106      }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   107      else if (state == DEM_CLEAR_DTC_MACHINE_STATE_EXEC)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   108      {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   109          Dem_ClientClearMachine.IsNewClearRequest = TRUE;
	mov	d15,#1
.L562:
	st.b	[a14],d15
.L300:
	st.b	[a12],d8
.L301:

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     1   
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     4  #ifndef DEM_NVM_H
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     5  #define DEM_NVM_H
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     7  #include "NvM.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     8  #include "Dem_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     9  #include "Dem_Nvm_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    10  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    11  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    12  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    13  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    16  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    17  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    19  DEM_ARRAY_DECLARE(Dem_NvMBlockStatusDoubleBufferType, Dem_NvMBlockStatusDoubleBuffer, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    20  DEM_ARRAY_DECLARE(Dem_NvMStorageBufferType, Dem_NvMStorageBuffer, DEM_NVM_CFG_NUM_STORAGEBUFFER);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    22  extern Dem_EraseAllStatusType Dem_EraseAllNvMDataStatus;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    23  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    24  DEM_ARRAY_DECLARE(Dem_NvmHashIdType, Dem_HashIdInNvm, DEM_NVM_HASH_ID_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    25  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    26  extern boolean Dem_NvMAnyClearFailed;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    27  #if(DEM_CFG_TRIGGER_TO_STORE_NVM_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    28  extern boolean Dem_NvMImmediateStorageRequested;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    29  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    31  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    32  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    35  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    36  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    38  DEM_ARRAY_DECLARE_CONST(NvM_BlockIdType, Dem_NvMBlockMap2NvmId, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    39  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdExtendedType, Dem_NvmBlockIdExtended, DEM_NVM_CFG_NUM_BLOCKS_EXTENDED);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    40  DEM_ARRAY_DECLARE_CONST(Dem_NvmCopyFunction, DemCopyFctPtrTable, DEM_NVM_CFG_COPYFCT_NUM);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    41  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    42  DEM_ARRAY_DECLARE_CONST(Dem_NvmHashIdType, Dem_HashIdInRom, DEM_NVM_HASH_ID_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    43  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    45  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    46  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    49  DEM_INLINE NvM_BlockIdType Dem_NvMGetNvMBlocKId(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    50  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    51      return Dem_NvMBlockMap2NvmId[id];
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    52  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    54  DEM_INLINE Dem_NvmResultType Dem_NvmGetStatus (Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    55  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    56      NvM_RequestResultType result;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    57      if (NvM_GetErrorStatus (Dem_NvMGetNvMBlocKId(id), &result) == E_NOT_OK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    58      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    59          return DEM_NVM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    60      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    61  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    62      switch (result)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    63      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    64          case NVM_REQ_CANCELED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    65              return DEM_NVM_CANCELED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    66  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    67          case NVM_REQ_OK:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    68          case NVM_REQ_REDUNDANCY_FAILED:     /* Driver could trigger correction of the damaged part of the redundant block; data is read correctly nevertheless */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    69          case NVM_REQ_RESTORED_FROM_ROM:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    70              return DEM_NVM_SUCCESS;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    72          case NVM_REQ_PENDING:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    73              return DEM_NVM_PENDING;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    75          case NVM_REQ_NV_INVALIDATED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    76              return DEM_NVM_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    78          case NVM_REQ_INTEGRITY_FAILED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    79              return DEM_NVM_INTEGRITY_FAILED;    /* NVM_REQ_INTEGRITY_FAILED: description in NVM-doc: Indicates that the latest read operation did not find any valid data for this block on the persistent media. */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    80  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    81          case NVM_REQ_BLOCK_SKIPPED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    82              return DEM_NVM_BLOCK_SKIPPED;       /* NVM_REQ_BLOCK_SKIPPED: if readall would be skipped, it is treated as failure for DEM, because all NVM data has to be available
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    83                                                 at init (ErrorQueue is flushed and event status / eventMemory content needs to be available)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    84                                                 This is ensured as the checks during init are checked to be DEM_NVM_SUCCESS. All other states are handled as error */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    86          default:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    87              /*   NVM_REQ_NOT_OK: Indicates that the latest operation failed due to an unexpected event.  */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    88              return DEM_NVM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    89      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    90  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    92  DEM_INLINE void Dem_NvMWriteBlockOnShutdown(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    93  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    94      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_SHUTDOWN] = DEM_NVM_STATUSBITMASK_SHUTDOWN;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    95  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    97  DEM_INLINE void Dem_NvMWriteBlockImmediate(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    98  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    99      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_IMMEDIATE] = DEM_NVM_STATUSBITMASK_IMMEDIATE;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   100  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   102  DEM_INLINE void Dem_NvMClearBlockByWrite(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   103  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   104      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_CLEAR] = DEM_NVM_STATUSBITMASK_CLEAR;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   105  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   107  DEM_INLINE void Dem_NvMClearBlockByInvalidate(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   108  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   109      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_CLEAR] = DEM_NVM_STATUSBITMASK_INVALIDATE;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   110  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   112  DEM_INLINE void Dem_NvMExcludeBlockFromStatemachine(Dem_NvmBlockIdType id, boolean exclude)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   113  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   114      if(exclude)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   115      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   116          Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_EXCLUDE] = DEM_NVM_STATUSBITMASK_EXCLUDE;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   117      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   118      else
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   119      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   120          Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_EXCLUDE] = DEM_NVM_STATUSBITMASK_NONE;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   121      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   122  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   124  void Dem_NvMInit(void);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   125  void Dem_NvMMainFunction(void);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   126  void Dem_NvMShutdown(void);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   127  boolean Dem_NvMIsClearPending(void);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   128  boolean Dem_NvMIsImmediatePending(void);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   129  boolean Dem_NvMIsBlockClearPending( Dem_NvmBlockIdType demNvMId);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   130  boolean Dem_NvMIsBlockAllowedToBeExcluded(Dem_NvmBlockIdType id);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   131  boolean Dem_NvMIsBlockExcluded( Dem_NvmBlockIdType demNvMId);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   132  void Dem_NvMNormalMemCopy(void* Dest_pv, const void* Src_pcv, uint32 numBytes_s32);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   134  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED != DEM_CFG_ERASE_ALL_OFF)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   135  Dem_HashIdCheckResultType Dem_NvmIsHashIDChanged(void);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   136  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   138  DEM_INLINE void Dem_NvMStartClear(void)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   139  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   140      Dem_NvMAnyClearFailed = FALSE;
	movh.a	a15,#@his(Dem_NvMAnyClearFailed)
	lea	a15,[a15]@los(Dem_NvMAnyClearFailed)
.L563:
	mov	d15,#0
.L564:
	st.b	[a15],d15
.L303:
	st.b	[a13],d10
.L305:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   109          Dem_ClientClearMachine.IsNewClearRequest = TRUE;      (inlined)
	j	.L28

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   107      else if (state == DEM_CLEAR_DTC_MACHINE_STATE_EXEC)      (inlined)
.L27:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   114      else if (state == DEM_CLEAR_DTC_MACHINE_STATE_WAITINGFORNVM)      (inlined)
	jne	d10,#2,.L29
.L306:
	st.b	[a13],d10
.L307:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   116          Dem_ClientClearMachine_SetMachineState(state);      (inlined)
	j	.L30

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   114      else if (state == DEM_CLEAR_DTC_MACHINE_STATE_WAITINGFORNVM)      (inlined)
.L29:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   118      else      (inlined)
.L30:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   114      else if (state == DEM_CLEAR_DTC_MACHINE_STATE_WAITINGFORNVM)      (inlined)
.L28:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   107      else if (state == DEM_CLEAR_DTC_MACHINE_STATE_EXEC)      (inlined)
.L26:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    99  if (Dem_ClientClearMachine_isClearDtcGroupAllDtcsSelected(ClientId))      (inlined)
.L24:
.L17:
.L15:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     3  #ifndef DEM_CLIENTCLEARMACHINE_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     4  #define DEM_CLIENTCLEARMACHINE_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     6  #include "Dem_ClientHandlingTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     7  #include "Dem_ClientBaseHandling.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     8  #include "Dem_Client.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     9  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    10  #include "Dem_Mapping.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    11  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    12  #include "Dem_Cfg_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    14  /******************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    15  /****************  Machine States  ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    16  #define DEM_CLEAR_DTC_MACHINE_STATE_IDLE            0x00u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    17  #define DEM_CLEAR_DTC_MACHINE_STATE_EXEC            0x01u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    18  #define DEM_CLEAR_DTC_MACHINE_STATE_WAITINGFORNVM   0x02u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    20  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    22    uint8                           activeClient;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    23    uint8                           machine_state;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    24    /* Boolean variable to indicate the clear is requested newly and the iterators has to be initialized */
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    25    boolean                         IsNewClearRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    26    /* Boolean variable to indicate the limit to procees the events per cycle has reached */
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    27    boolean                         IsClearInterrupted;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    28    /* Variable to indicate the no of events cleared in a cycle */
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    29    uint16                          NumberOfEventsProcessed;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    30    /* Iterators */
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    31    Dem_DtcIdListIterator           DtcIt;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    32    Dem_EventIdIterator             EvtIt;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    33    Dem_EventIdListIterator         EvtListIt;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    34  #if(DEM_CFG_J1939DCM_CLEAR_SUPPORT != DEM_CFG_J1939DCM_OFF)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    35    Dem_DtcIdListIterator2          DtcIt2;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    36  #endif
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    37  } Dem_ClientClearMachineType;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    38  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    39  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    40  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    41  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    42  extern Dem_ClientClearMachineType Dem_ClientClearMachine;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    44  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    45  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    46  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    47  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    48  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    49  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    50  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    51  /****************  Dem_ClientClearMachine  *************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    53  DEM_INLINE void Dem_ClientClearMachine_SetMachineActiveClient(Dem_ClientIdType ClientId)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    54  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    55      Dem_ClientClearMachine.activeClient = ClientId;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    56  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    57  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    58  DEM_INLINE boolean Dem_ClientClearMachine_isProcessingClient(Dem_ClientIdType ClientId)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    59  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    60      return (Dem_ClientClearMachine.activeClient == ClientId);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    61  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    63  DEM_INLINE uint8 Dem_ClientClearMachine_GetMachineActiveClient(void)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    64  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    65      return Dem_ClientClearMachine.activeClient;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    66  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    67  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    68  DEM_INLINE void Dem_ClientClearMachine_SetMachineState(uint8 state)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    69  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    70      Dem_ClientClearMachine.machine_state = state;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    71  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    73  DEM_INLINE uint8 Dem_ClientClearMachine_GetMachineState(void)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    74  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    75      return Dem_ClientClearMachine.machine_state;
	ld.bu	d15,[a13]
.L565:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    75      return Dem_ClientClearMachine.machine_state;      (inlined)
	j	.L31

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    76  }      (inlined)
.L31:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   136                  }
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   137              }
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   138              /* Step 2 - Sync to NVM-Storage (optional) */
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   139              if (Dem_ClientClearMachine_GetMachineState() == DEM_CLEAR_DTC_MACHINE_STATE_WAITINGFORNVM)
	jne	d15,#2,.L32
.L566:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   140              {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   141                  /* Remark:
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   142                   * Synchronization with NVM and delivering of error information requires that the NVM block status NVM_REQ_INTEGRITY_FAILED
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   143                   * is not mapped to DEM_NVM_FAILED in the wrapper function Dem_NvmGetStatus. */
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   144                  if (((DEM_CFG_CLEAR_DTC_BEHAVIOR == DEM_CFG_CLEAR_DTC_BEHAVIOR_NONVOLATILE_FINISH)
	mov	d15,#0
.L567:
	jeq	d15,#0,.L33
.L568:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   145                          && (Dem_ClearResult == DEM_CLEAR_OK) && Dem_NvMIsClearPending())
	movh.a	a15,#@his(Dem_ClearResult)
	lea	a15,[a15]@los(Dem_ClearResult)
	ld.bu	d15,[a15]
.L569:
	jne	d15,#0,.L34
.L570:
	call	Dem_NvMIsClearPending
	jeq	d2,#0,.L35
	j	.L36
.L35:
.L34:
.L33:
	movh.a	a14,#@his(Dem_ClearResult)
	lea	a14,[a14]@los(Dem_ClearResult)
.L571:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   146  #if (DEM_CFG_TRIGGERMONITORINITBEFORECLEAROK == TRUE)
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   147                          || Dem_EvtIsAnyInitMonitoringRequestedClear()
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   148  #endif
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   149                          )
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   150                  {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   151                      /* Do not change state --> NVM storage pending */
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   152                  }
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   153                  else
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   154                  {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   155                      if ((DEM_CFG_CLEAR_DTC_BEHAVIOR == DEM_CFG_CLEAR_DTC_BEHAVIOR_NONVOLATILE_FINISH)
	mov	d15,#0
.L572:
	jeq	d15,#0,.L37
.L309:

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     1   
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     4  #ifndef DEM_NVM_H
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     5  #define DEM_NVM_H
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     7  #include "NvM.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     8  #include "Dem_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     9  #include "Dem_Nvm_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    10  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    11  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    12  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    13  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    16  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    17  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    19  DEM_ARRAY_DECLARE(Dem_NvMBlockStatusDoubleBufferType, Dem_NvMBlockStatusDoubleBuffer, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    20  DEM_ARRAY_DECLARE(Dem_NvMStorageBufferType, Dem_NvMStorageBuffer, DEM_NVM_CFG_NUM_STORAGEBUFFER);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    22  extern Dem_EraseAllStatusType Dem_EraseAllNvMDataStatus;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    23  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    24  DEM_ARRAY_DECLARE(Dem_NvmHashIdType, Dem_HashIdInNvm, DEM_NVM_HASH_ID_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    25  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    26  extern boolean Dem_NvMAnyClearFailed;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    27  #if(DEM_CFG_TRIGGER_TO_STORE_NVM_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    28  extern boolean Dem_NvMImmediateStorageRequested;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    29  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    31  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    32  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    35  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    36  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    38  DEM_ARRAY_DECLARE_CONST(NvM_BlockIdType, Dem_NvMBlockMap2NvmId, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    39  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdExtendedType, Dem_NvmBlockIdExtended, DEM_NVM_CFG_NUM_BLOCKS_EXTENDED);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    40  DEM_ARRAY_DECLARE_CONST(Dem_NvmCopyFunction, DemCopyFctPtrTable, DEM_NVM_CFG_COPYFCT_NUM);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    41  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    42  DEM_ARRAY_DECLARE_CONST(Dem_NvmHashIdType, Dem_HashIdInRom, DEM_NVM_HASH_ID_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    43  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    45  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    46  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    49  DEM_INLINE NvM_BlockIdType Dem_NvMGetNvMBlocKId(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    50  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    51      return Dem_NvMBlockMap2NvmId[id];
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    52  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    54  DEM_INLINE Dem_NvmResultType Dem_NvmGetStatus (Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    55  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    56      NvM_RequestResultType result;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    57      if (NvM_GetErrorStatus (Dem_NvMGetNvMBlocKId(id), &result) == E_NOT_OK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    58      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    59          return DEM_NVM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    60      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    61  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    62      switch (result)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    63      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    64          case NVM_REQ_CANCELED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    65              return DEM_NVM_CANCELED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    66  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    67          case NVM_REQ_OK:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    68          case NVM_REQ_REDUNDANCY_FAILED:     /* Driver could trigger correction of the damaged part of the redundant block; data is read correctly nevertheless */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    69          case NVM_REQ_RESTORED_FROM_ROM:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    70              return DEM_NVM_SUCCESS;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    72          case NVM_REQ_PENDING:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    73              return DEM_NVM_PENDING;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    75          case NVM_REQ_NV_INVALIDATED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    76              return DEM_NVM_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    78          case NVM_REQ_INTEGRITY_FAILED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    79              return DEM_NVM_INTEGRITY_FAILED;    /* NVM_REQ_INTEGRITY_FAILED: description in NVM-doc: Indicates that the latest read operation did not find any valid data for this block on the persistent media. */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    80  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    81          case NVM_REQ_BLOCK_SKIPPED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    82              return DEM_NVM_BLOCK_SKIPPED;       /* NVM_REQ_BLOCK_SKIPPED: if readall would be skipped, it is treated as failure for DEM, because all NVM data has to be available
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    83                                                 at init (ErrorQueue is flushed and event status / eventMemory content needs to be available)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    84                                                 This is ensured as the checks during init are checked to be DEM_NVM_SUCCESS. All other states are handled as error */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    86          default:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    87              /*   NVM_REQ_NOT_OK: Indicates that the latest operation failed due to an unexpected event.  */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    88              return DEM_NVM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    89      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    90  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    92  DEM_INLINE void Dem_NvMWriteBlockOnShutdown(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    93  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    94      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_SHUTDOWN] = DEM_NVM_STATUSBITMASK_SHUTDOWN;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    95  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    97  DEM_INLINE void Dem_NvMWriteBlockImmediate(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    98  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    99      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_IMMEDIATE] = DEM_NVM_STATUSBITMASK_IMMEDIATE;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   100  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   102  DEM_INLINE void Dem_NvMClearBlockByWrite(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   103  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   104      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_CLEAR] = DEM_NVM_STATUSBITMASK_CLEAR;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   105  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   107  DEM_INLINE void Dem_NvMClearBlockByInvalidate(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   108  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   109      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_CLEAR] = DEM_NVM_STATUSBITMASK_INVALIDATE;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   110  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   112  DEM_INLINE void Dem_NvMExcludeBlockFromStatemachine(Dem_NvmBlockIdType id, boolean exclude)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   113  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   114      if(exclude)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   115      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   116          Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_EXCLUDE] = DEM_NVM_STATUSBITMASK_EXCLUDE;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   117      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   118      else
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   119      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   120          Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_EXCLUDE] = DEM_NVM_STATUSBITMASK_NONE;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   121      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   122  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   124  void Dem_NvMInit(void);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   125  void Dem_NvMMainFunction(void);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   126  void Dem_NvMShutdown(void);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   127  boolean Dem_NvMIsClearPending(void);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   128  boolean Dem_NvMIsImmediatePending(void);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   129  boolean Dem_NvMIsBlockClearPending( Dem_NvmBlockIdType demNvMId);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   130  boolean Dem_NvMIsBlockAllowedToBeExcluded(Dem_NvmBlockIdType id);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   131  boolean Dem_NvMIsBlockExcluded( Dem_NvmBlockIdType demNvMId);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   132  void Dem_NvMNormalMemCopy(void* Dest_pv, const void* Src_pcv, uint32 numBytes_s32);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   134  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED != DEM_CFG_ERASE_ALL_OFF)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   135  Dem_HashIdCheckResultType Dem_NvmIsHashIDChanged(void);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   136  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   138  DEM_INLINE void Dem_NvMStartClear(void)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   139  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   140      Dem_NvMAnyClearFailed = FALSE;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   141  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   143  DEM_INLINE boolean Dem_NvMIsClearFailed(void)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   145      return Dem_NvMAnyClearFailed;
	movh.a	a15,#@his(Dem_NvMAnyClearFailed)
	lea	a15,[a15]@los(Dem_NvMAnyClearFailed)
	ld.bu	d15,[a15]
.L573:

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   145      return Dem_NvMAnyClearFailed;      (inlined)
	j	.L38

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   146  }      (inlined)
.L38:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   156                              && (Dem_NvMIsClearFailed()))
	jeq	d15,#0,.L39
.L574:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   157                      {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   158                          Dem_ClearResult = DEM_CLEAR_MEMORY_ERROR;
	mov	d15,#6
.L575:
	st.b	[a14],d15
.L39:
.L37:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     3  #ifndef DEM_CLIENTCLEARMACHINE_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     4  #define DEM_CLIENTCLEARMACHINE_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     6  #include "Dem_ClientHandlingTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     7  #include "Dem_ClientBaseHandling.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     8  #include "Dem_Client.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     9  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    10  #include "Dem_Mapping.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    11  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    12  #include "Dem_Cfg_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    14  /******************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    15  /****************  Machine States  ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    16  #define DEM_CLEAR_DTC_MACHINE_STATE_IDLE            0x00u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    17  #define DEM_CLEAR_DTC_MACHINE_STATE_EXEC            0x01u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    18  #define DEM_CLEAR_DTC_MACHINE_STATE_WAITINGFORNVM   0x02u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    20  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    22    uint8                           activeClient;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    23    uint8                           machine_state;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    24    /* Boolean variable to indicate the clear is requested newly and the iterators has to be initialized */
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    25    boolean                         IsNewClearRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    26    /* Boolean variable to indicate the limit to procees the events per cycle has reached */
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    27    boolean                         IsClearInterrupted;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    28    /* Variable to indicate the no of events cleared in a cycle */
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    29    uint16                          NumberOfEventsProcessed;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    30    /* Iterators */
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    31    Dem_DtcIdListIterator           DtcIt;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    32    Dem_EventIdIterator             EvtIt;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    33    Dem_EventIdListIterator         EvtListIt;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    34  #if(DEM_CFG_J1939DCM_CLEAR_SUPPORT != DEM_CFG_J1939DCM_OFF)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    35    Dem_DtcIdListIterator2          DtcIt2;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    36  #endif
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    37  } Dem_ClientClearMachineType;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    38  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    39  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    40  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    41  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    42  extern Dem_ClientClearMachineType Dem_ClientClearMachine;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    44  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    45  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    46  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    47  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    48  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    49  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    50  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    51  /****************  Dem_ClientClearMachine  *************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    53  DEM_INLINE void Dem_ClientClearMachine_SetMachineActiveClient(Dem_ClientIdType ClientId)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    54  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    55      Dem_ClientClearMachine.activeClient = ClientId;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    56  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    57  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    58  DEM_INLINE boolean Dem_ClientClearMachine_isProcessingClient(Dem_ClientIdType ClientId)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    59  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    60      return (Dem_ClientClearMachine.activeClient == ClientId);
	ld.bu	d15,[a12]
.L576:
	eq	d15,d15,#2
.L577:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    60      return (Dem_ClientClearMachine.activeClient == ClientId);      (inlined)
	j	.L40

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    61  }      (inlined)
.L40:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   159                      }
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   160  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   161                      if (!Dem_ClientClearMachine_isProcessingClient(DEM_CLIENTID_J1939))
	jne	d15,#0,.L41
.L578:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   162                      {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   163                          /* Callback function to notify when ClearDTC is finished */
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   164                          Dem_ClearDtcNotificationFinishCallbacks(Dem_Client_getClient(tempClientId)->DTC,
	mov	d4,d8
	call	Dem_Client_getClient
.L579:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   165                                                                  Dem_Client_getClient(tempClientId)->DTCFormat,
	mov	d4,d8
	call	Dem_Client_getClient
.L580:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   166                                                                  Dem_Client_getClient(tempClientId)->DTCOrigin);
	mov	d4,d8
	call	Dem_Client_getClient
.L41:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   167                      }
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   168                      Dem_ClientResultType_setResult(&Dem_Client_getClient(tempClientId)->result, tempRequest,
	mov	d4,d8
	call	Dem_Client_getClient
.L581:
	lea	a15,[a2]10
.L582:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   169                              Dem_ClearResult);
	ld.bu	d15,[a14]
.L315:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     3  #ifndef DEM_CLIENTBASEHANDLING_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     4  #define DEM_CLIENTBASEHANDLING_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     6  #include "Dem_ClientHandlingTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     7  #include "Dem_Client.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     8  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    11  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    12  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    14  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    15  /*********  MASKS : Dem_ClientRequestType, Dem_ClientResultType & Dem_ClientSelectionType *********/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    17  #define DEM_CLIENT_TYPE_MASK     0xFFu
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    19  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    20  /****************  MASKS : Dem_ClientRequestType & Dem_ClientResultType ***************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    22  #define DEM_CLIENT_REQUEST_RESULT_IDMASK       0xFF00u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    23  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    24  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    25  /****************  Dem_ClientResultType  **********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    27  DEM_INLINE void Dem_ClientResultType_setResult(volatile Dem_ClientResultType *result, Dem_ClientRequestType request, Std_ReturnType newResult)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    28  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    29      Dem_ClientResultType tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    31      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientResultType)) >= 2u), DEM_CLIENTRSULTTYPE_SHALL_BE_UINT16);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    33      tempResult = (request & DEM_CLIENT_REQUEST_RESULT_IDMASK);
	mov.u	d2,#65280
.L432:
	and	d9,d2
.L424:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    34      tempResult |= newResult;
	or	d9,d15
.L583:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    35      *result = tempResult;
	st.h	[a15],d9
.L316:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   170                      Dem_ClientClearMachine_SetClientRequest(tempClientId, DEM_CLEAR_DTC_MACHINE_STATE_IDLE);
	mov	d9,#0
.L318:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     3  #ifndef DEM_CLIENTCLEARMACHINE_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     4  #define DEM_CLIENTCLEARMACHINE_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     6  #include "Dem_ClientHandlingTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     7  #include "Dem_ClientBaseHandling.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     8  #include "Dem_Client.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     9  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    10  #include "Dem_Mapping.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    11  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    12  #include "Dem_Cfg_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    14  /******************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    15  /****************  Machine States  ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    16  #define DEM_CLEAR_DTC_MACHINE_STATE_IDLE            0x00u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    17  #define DEM_CLEAR_DTC_MACHINE_STATE_EXEC            0x01u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    18  #define DEM_CLEAR_DTC_MACHINE_STATE_WAITINGFORNVM   0x02u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    20  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    22    uint8                           activeClient;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    23    uint8                           machine_state;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    24    /* Boolean variable to indicate the clear is requested newly and the iterators has to be initialized */
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    25    boolean                         IsNewClearRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    26    /* Boolean variable to indicate the limit to procees the events per cycle has reached */
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    27    boolean                         IsClearInterrupted;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    28    /* Variable to indicate the no of events cleared in a cycle */
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    29    uint16                          NumberOfEventsProcessed;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    30    /* Iterators */
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    31    Dem_DtcIdListIterator           DtcIt;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    32    Dem_EventIdIterator             EvtIt;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    33    Dem_EventIdListIterator         EvtListIt;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    34  #if(DEM_CFG_J1939DCM_CLEAR_SUPPORT != DEM_CFG_J1939DCM_OFF)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    35    Dem_DtcIdListIterator2          DtcIt2;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    36  #endif
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    37  } Dem_ClientClearMachineType;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    38  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    39  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    40  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    41  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    42  extern Dem_ClientClearMachineType Dem_ClientClearMachine;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    44  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    45  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    46  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    47  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    48  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    49  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    50  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    51  /****************  Dem_ClientClearMachine  *************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    53  DEM_INLINE void Dem_ClientClearMachine_SetMachineActiveClient(Dem_ClientIdType ClientId)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    54  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    55      Dem_ClientClearMachine.activeClient = ClientId;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    56  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    57  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    58  DEM_INLINE boolean Dem_ClientClearMachine_isProcessingClient(Dem_ClientIdType ClientId)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    59  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    60      return (Dem_ClientClearMachine.activeClient == ClientId);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    61  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    63  DEM_INLINE uint8 Dem_ClientClearMachine_GetMachineActiveClient(void)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    64  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    65      return Dem_ClientClearMachine.activeClient;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    66  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    67  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    68  DEM_INLINE void Dem_ClientClearMachine_SetMachineState(uint8 state)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    69  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    70      Dem_ClientClearMachine.machine_state = state;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    71  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    73  DEM_INLINE uint8 Dem_ClientClearMachine_GetMachineState(void)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    74  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    75      return Dem_ClientClearMachine.machine_state;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    76  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    78  DEM_INLINE boolean Dem_ClientClearMachine_isClearDtcGroupAllDtcsSelected(Dem_ClientIdType ClientId)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    79  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    80  boolean status = TRUE;
	mov	d0,#1
.L320:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     3  #ifndef DEM_LIB_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     4  #define DEM_LIB_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     6  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     7  #include "Dem_Prv_Det.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     8  #include "rba_DiagLib_MemUtils.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     9  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    11  /* Macro for static assertion Check */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    12  /* either array length is (2*1)-1->valid or (2*0)-1->invalid*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    13  #define DEM_STATIC_ASSERT(COND,MSG) typedef uint8 Dem_static_assertion_##MSG[(2*(((COND)!=(FALSE))?1:0))-1]
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    15  /* mapping of memset and memcpy */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    16  #define DEM_MEMCPY  RBA_DIAGLIB_MEMCPY
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    17  #define DEM_MEMSET  RBA_DIAGLIB_MEMSET
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    19  /* Defines */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    20  #define DEM_MAXSINT16   0x7FFF
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    22  #if (DEM_CFG_BUILDTARGET != DEM_CFG_BUILDTARGET_DEMTESTSUITE)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    23      #define DEM_ASSERT_RANGECHECK(CONDITION) do {} while (0)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    24  #else
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    25      #include "DemTest_Stub4RangeCheck.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    27      #define DEM_ASSERT_RANGECHECK(CONDITION) DEM_assertValueInRange(CONDITION)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    28  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    30  // these functions are necessary to avoid compiler warnings of the kind "statement is always FALSE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    31  DEM_INLINE uint16 Dem_LibGetParamUI16( uint16 parameter )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    33      return parameter;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    36  DEM_INLINE uint8 Dem_LibGetParamUI8( uint8 parameter )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    38      return parameter;
	mov	d15,#2

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    38      return parameter;      (inlined)
	j	.L42

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    39  }      (inlined)
.L42:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    81  #if(DEM_CFG_J1939DCM != DEM_CFG_J1939DCM_OFF)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    82  if (ClientId != DEM_CLIENTID_J1939)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    84  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    85      if ((Dem_LibGetParamUI8(DEM_CFG_CLEAR_DTC_LIMITATION)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    86              == Dem_LibGetParamUI8(DEM_CFG_CLEAR_DTC_LIMITATION_ONLY_CLEAR_ALL_DTCS))
	mov	d1,#2
.L321:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    38      return parameter;      (inlined)
	j	.L43

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    39  }      (inlined)
.L43:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    85      if ((Dem_LibGetParamUI8(DEM_CFG_CLEAR_DTC_LIMITATION)      (inlined)
	jne	d15,d1,.L44
.L584:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    87              && (Dem_ClientSelectionType_getTypeOfSelection(Dem_Clients[ClientId].selection)
	sha	d15,d8,#4
.L585:
	movh.a	a15,#@his(Dem_Clients)
	lea	a15,[a15]@los(Dem_Clients)
.L586:
	addsc.a	a15,a15,d15,#0
.L587:
	ld.w	d15,[a15]12
.L322:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     3  #ifndef DEM_CLIENTBASEHANDLING_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     4  #define DEM_CLIENTBASEHANDLING_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     6  #include "Dem_ClientHandlingTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     7  #include "Dem_Client.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     8  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    11  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    12  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    14  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    15  /*********  MASKS : Dem_ClientRequestType, Dem_ClientResultType & Dem_ClientSelectionType *********/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    17  #define DEM_CLIENT_TYPE_MASK     0xFFu
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    19  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    20  /****************  MASKS : Dem_ClientRequestType & Dem_ClientResultType ***************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    22  #define DEM_CLIENT_REQUEST_RESULT_IDMASK       0xFF00u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    23  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    24  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    25  /****************  Dem_ClientResultType  **********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    27  DEM_INLINE void Dem_ClientResultType_setResult(volatile Dem_ClientResultType *result, Dem_ClientRequestType request, Std_ReturnType newResult)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    28  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    29      Dem_ClientResultType tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    31      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientResultType)) >= 2u), DEM_CLIENTRSULTTYPE_SHALL_BE_UINT16);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    33      tempResult = (request & DEM_CLIENT_REQUEST_RESULT_IDMASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    34      tempResult |= newResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    35      *result = tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    36  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    38  DEM_INLINE Std_ReturnType Dem_ClientResultType_getResult(Dem_ClientResultType result)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    39  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    40      return ((Std_ReturnType)(result & DEM_CLIENT_TYPE_MASK));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    41  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    42  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    43  DEM_INLINE void Dem_ClientResultType_confirmCancel(volatile Dem_ClientResultType *result, Dem_ClientRequestType request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    44  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    45      Dem_ClientResultType tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    46  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    47      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientResultType)) >= 2u), DEM_CLIENTRSULTTYPE_SHALL_BE_UINT16);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    49      tempResult = (request & DEM_CLIENT_REQUEST_RESULT_IDMASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    50      tempResult |= DEM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    51      *result = tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    52  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    54  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    55  /****************  Dem_ClientRequestType  *********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    57  #define DEM_CLIENT_REQUEST_TYPE_CANCEL_MASK     0x01u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    59  DEM_INLINE boolean Dem_ClientRequestType_isRequestInProgress(Dem_ClientIdType clientId)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    60  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    61      return ((Dem_Clients[clientId].request & DEM_CLIENT_REQUEST_RESULT_IDMASK)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    62              != (Dem_Clients[clientId].result & DEM_CLIENT_REQUEST_RESULT_IDMASK));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    63  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    65  DEM_INLINE void Dem_ClientRequestType_setRequest(volatile Dem_ClientRequestType *request, uint8 newRequest)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    67      Dem_ClientRequestType tempRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    68  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    69      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientRequestType) >= 2u)), DEM_CLIENTREQUESTTYPE_SHALL_BE_UINT16);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    71      tempRequest = *request;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    72      tempRequest += 0x0100u;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    73      tempRequest = (tempRequest & DEM_CLIENT_REQUEST_RESULT_IDMASK) | newRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    74      *request = tempRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    75  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    76  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    78  DEM_INLINE void Dem_ClientRequestType_cancelRequest(volatile Dem_ClientRequestType *request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    79  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    80      Dem_ClientRequestType_setRequest(request,1);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    81  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    82  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    84  DEM_INLINE uint8 Dem_ClientRequestType_getMachineIndex(Dem_ClientRequestType request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    85  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    86      uint8 machineIndex;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    87      machineIndex = (((uint8)(request & DEM_CLIENT_TYPE_MASK)) >> 1u);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    88      return machineIndex;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    89  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    91  DEM_INLINE boolean Dem_ClientRequestType_isCancelRequested(Dem_ClientRequestType request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    92  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    93      return ((request & DEM_CLIENT_REQUEST_TYPE_CANCEL_MASK) == 1u);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    94  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    95  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    96  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    97  /****************  Dem_ClientSelectionType  *******************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    98  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    99  #define DEM_CLIENT_SELECTION_DTCINDEXMASK                0xFFFFu
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   100  #define DEM_CLIENT_INVALIDATE_SELECTION_IDMASK           0x00FFFFFFu
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   101  #define DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE  16u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   102  #define DEM_CLIENT_SELECTION_TYPE_BITPOS_RESULT          24u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   104  DEM_INLINE uint16 Dem_ClientSelectionType_getSelectionDtcIndex (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   105  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   106      return ((uint16)(selection & DEM_CLIENT_SELECTION_DTCINDEXMASK));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   107  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   108  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   109  DEM_INLINE void Dem_ClientSelectionType_setSelection (Dem_ClientSelectionType *selection, uint16 dtcId, uint8 typeOfSelection, Std_ReturnType selectionResult)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   110  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   111      Dem_ClientSelectionType tempSelection;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   113      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientSelectionType) >= 4u)), DEM_CLIENTSELECTIONTYPE_SHALL_BE_UINT32);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   115      tempSelection = (((uint32)dtcId) | (((uint32)typeOfSelection) << DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) | (((uint32)selectionResult) << DEM_CLIENT_SELECTION_TYPE_BITPOS_RESULT));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   116      *selection = tempSelection;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   117  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   119  DEM_INLINE boolean Dem_ClientSelectionType_isSelectionSingleDTC (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   120  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   121      uint8 tempSelectionType;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   122      tempSelectionType = (uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) & DEM_CLIENT_TYPE_MASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   124      return (tempSelectionType == DEM_CLIENT_SELECTION_TYPE_SINGLE_DTC);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   127  DEM_INLINE boolean Dem_ClientSelectionType_isSelectionDTCGroupAll (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   128  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   129      uint8 tempSelectionType;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   130      tempSelectionType = (uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) & DEM_CLIENT_TYPE_MASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   131  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   132      return (tempSelectionType == DEM_CLIENT_SELECTION_TYPE_ALL_DTCS);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   133  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   135  DEM_INLINE boolean Dem_ClientSelectionType_isSelectionDTCGroup (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   136  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   137      uint8 tempSelectionType;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   138      tempSelectionType = (uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) & DEM_CLIENT_TYPE_MASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   139  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   140      return (tempSelectionType == DEM_CLIENT_SELECTION_TYPE_GROUP_DTC);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   141  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   143  DEM_INLINE boolean Dem_ClientSelectionType_isSelectionPending (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   145      uint8 tempSelectionResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   146      tempSelectionResult = (uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_RESULT) & DEM_CLIENT_TYPE_MASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   148      return (tempSelectionResult == DEM_PENDING);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   151  DEM_INLINE void Dem_ClientSelectionType_invalidateSelectionResult (Dem_ClientSelectionType *selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   152  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   153      Std_ReturnType tempresult = DEM_PENDING;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   154      Dem_ClientSelectionType tempSelection;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   156      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientSelectionType) >= 4u)), DEM_CLIENTSELECTIONTYPE_SHALL_BE_UINT32);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   158      tempSelection = (*selection & DEM_CLIENT_INVALIDATE_SELECTION_IDMASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   159      tempSelection |= (((uint32)tempresult) << DEM_CLIENT_SELECTION_TYPE_BITPOS_RESULT);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   160      *selection = tempSelection;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   163  DEM_INLINE Std_ReturnType Dem_ClientSelectionType_getSelectionResult (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   164  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   165      return ((Std_ReturnType)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_RESULT) & DEM_CLIENT_TYPE_MASK));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   166  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   167  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   168  DEM_INLINE uint8 Dem_ClientSelectionType_getTypeOfSelection (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   169  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   170      return ((uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) & DEM_CLIENT_TYPE_MASK));
	sh	d15,d15,#-16
.L588:
	extr.u	d15,d15,#0,#8
.L589:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   170      return ((uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) & DEM_CLIENT_TYPE_MASK));      (inlined)
	j	.L45

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   171  }      (inlined)
.L45:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    88                      != DEM_CLIENT_SELECTION_TYPE_ALL_DTCS))      (inlined)
	jeq	d15,#1,.L46
.L590:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    88                      != DEM_CLIENT_SELECTION_TYPE_ALL_DTCS))
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    89      {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    90          Dem_ClientResultType_setResult(&Dem_Clients[ClientId].result, Dem_Clients[ClientId].request, DEM_WRONG_DTC);
	ld.hu	d15,[a15]8
.L591:
	lea	a15,[a15]10
.L592:
	mov	d0,#1
.L323:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     3  #ifndef DEM_CLIENTBASEHANDLING_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     4  #define DEM_CLIENTBASEHANDLING_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     6  #include "Dem_ClientHandlingTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     7  #include "Dem_Client.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     8  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    11  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    12  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    14  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    15  /*********  MASKS : Dem_ClientRequestType, Dem_ClientResultType & Dem_ClientSelectionType *********/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    17  #define DEM_CLIENT_TYPE_MASK     0xFFu
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    19  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    20  /****************  MASKS : Dem_ClientRequestType & Dem_ClientResultType ***************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    22  #define DEM_CLIENT_REQUEST_RESULT_IDMASK       0xFF00u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    23  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    24  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    25  /****************  Dem_ClientResultType  **********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    27  DEM_INLINE void Dem_ClientResultType_setResult(volatile Dem_ClientResultType *result, Dem_ClientRequestType request, Std_ReturnType newResult)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    28  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    29      Dem_ClientResultType tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    31      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientResultType)) >= 2u), DEM_CLIENTRSULTTYPE_SHALL_BE_UINT16);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    33      tempResult = (request & DEM_CLIENT_REQUEST_RESULT_IDMASK);
	and	d15,d2
.L434:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    34      tempResult |= newResult;
	or	d0,d15
.L433:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    35      *result = tempResult;
	st.h	[a15],d0
.L324:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    91          status = FALSE;
	mov	d0,#0

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    85      if ((Dem_LibGetParamUI8(DEM_CFG_CLEAR_DTC_LIMITATION)      (inlined)
.L46:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    88                      != DEM_CLIENT_SELECTION_TYPE_ALL_DTCS))      (inlined)
.L44:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    92      }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    94  return status;
	mov	d15,d0

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    94  return status;      (inlined)
	j	.L47

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    95  }      (inlined)
.L47:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    99  if (Dem_ClientClearMachine_isClearDtcGroupAllDtcsSelected(ClientId))      (inlined)
	jeq	d15,#0,.L48
.L593:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   101      if (state == DEM_CLEAR_DTC_MACHINE_STATE_IDLE)      (inlined)
	jne	d9,#0,.L49
.L594:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    95  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    97  DEM_INLINE void Dem_ClientClearMachine_SetClientRequest(Dem_ClientIdType ClientId, uint8 state)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    98  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    99  if (Dem_ClientClearMachine_isClearDtcGroupAllDtcsSelected(ClientId))
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   100  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   101      if (state == DEM_CLEAR_DTC_MACHINE_STATE_IDLE)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   102      {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   103          Dem_ClientSelectionType_invalidateSelectionResult(&Dem_Client_getClient(ClientId)->selection);
	mov	d4,d8
	call	Dem_Client_getClient
.L435:
	lea	a15,[a2]12
.L326:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     3  #ifndef DEM_CLIENTBASEHANDLING_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     4  #define DEM_CLIENTBASEHANDLING_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     6  #include "Dem_ClientHandlingTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     7  #include "Dem_Client.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     8  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    11  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    12  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    14  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    15  /*********  MASKS : Dem_ClientRequestType, Dem_ClientResultType & Dem_ClientSelectionType *********/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    17  #define DEM_CLIENT_TYPE_MASK     0xFFu
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    19  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    20  /****************  MASKS : Dem_ClientRequestType & Dem_ClientResultType ***************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    22  #define DEM_CLIENT_REQUEST_RESULT_IDMASK       0xFF00u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    23  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    24  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    25  /****************  Dem_ClientResultType  **********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    27  DEM_INLINE void Dem_ClientResultType_setResult(volatile Dem_ClientResultType *result, Dem_ClientRequestType request, Std_ReturnType newResult)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    28  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    29      Dem_ClientResultType tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    31      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientResultType)) >= 2u), DEM_CLIENTRSULTTYPE_SHALL_BE_UINT16);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    33      tempResult = (request & DEM_CLIENT_REQUEST_RESULT_IDMASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    34      tempResult |= newResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    35      *result = tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    36  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    38  DEM_INLINE Std_ReturnType Dem_ClientResultType_getResult(Dem_ClientResultType result)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    39  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    40      return ((Std_ReturnType)(result & DEM_CLIENT_TYPE_MASK));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    41  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    42  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    43  DEM_INLINE void Dem_ClientResultType_confirmCancel(volatile Dem_ClientResultType *result, Dem_ClientRequestType request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    44  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    45      Dem_ClientResultType tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    46  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    47      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientResultType)) >= 2u), DEM_CLIENTRSULTTYPE_SHALL_BE_UINT16);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    49      tempResult = (request & DEM_CLIENT_REQUEST_RESULT_IDMASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    50      tempResult |= DEM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    51      *result = tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    52  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    54  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    55  /****************  Dem_ClientRequestType  *********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    57  #define DEM_CLIENT_REQUEST_TYPE_CANCEL_MASK     0x01u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    59  DEM_INLINE boolean Dem_ClientRequestType_isRequestInProgress(Dem_ClientIdType clientId)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    60  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    61      return ((Dem_Clients[clientId].request & DEM_CLIENT_REQUEST_RESULT_IDMASK)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    62              != (Dem_Clients[clientId].result & DEM_CLIENT_REQUEST_RESULT_IDMASK));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    63  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    65  DEM_INLINE void Dem_ClientRequestType_setRequest(volatile Dem_ClientRequestType *request, uint8 newRequest)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    67      Dem_ClientRequestType tempRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    68  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    69      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientRequestType) >= 2u)), DEM_CLIENTREQUESTTYPE_SHALL_BE_UINT16);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    71      tempRequest = *request;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    72      tempRequest += 0x0100u;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    73      tempRequest = (tempRequest & DEM_CLIENT_REQUEST_RESULT_IDMASK) | newRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    74      *request = tempRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    75  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    76  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    78  DEM_INLINE void Dem_ClientRequestType_cancelRequest(volatile Dem_ClientRequestType *request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    79  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    80      Dem_ClientRequestType_setRequest(request,1);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    81  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    82  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    84  DEM_INLINE uint8 Dem_ClientRequestType_getMachineIndex(Dem_ClientRequestType request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    85  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    86      uint8 machineIndex;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    87      machineIndex = (((uint8)(request & DEM_CLIENT_TYPE_MASK)) >> 1u);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    88      return machineIndex;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    89  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    91  DEM_INLINE boolean Dem_ClientRequestType_isCancelRequested(Dem_ClientRequestType request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    92  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    93      return ((request & DEM_CLIENT_REQUEST_TYPE_CANCEL_MASK) == 1u);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    94  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    95  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    96  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    97  /****************  Dem_ClientSelectionType  *******************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    98  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    99  #define DEM_CLIENT_SELECTION_DTCINDEXMASK                0xFFFFu
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   100  #define DEM_CLIENT_INVALIDATE_SELECTION_IDMASK           0x00FFFFFFu
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   101  #define DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE  16u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   102  #define DEM_CLIENT_SELECTION_TYPE_BITPOS_RESULT          24u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   104  DEM_INLINE uint16 Dem_ClientSelectionType_getSelectionDtcIndex (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   105  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   106      return ((uint16)(selection & DEM_CLIENT_SELECTION_DTCINDEXMASK));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   107  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   108  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   109  DEM_INLINE void Dem_ClientSelectionType_setSelection (Dem_ClientSelectionType *selection, uint16 dtcId, uint8 typeOfSelection, Std_ReturnType selectionResult)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   110  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   111      Dem_ClientSelectionType tempSelection;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   113      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientSelectionType) >= 4u)), DEM_CLIENTSELECTIONTYPE_SHALL_BE_UINT32);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   115      tempSelection = (((uint32)dtcId) | (((uint32)typeOfSelection) << DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) | (((uint32)selectionResult) << DEM_CLIENT_SELECTION_TYPE_BITPOS_RESULT));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   116      *selection = tempSelection;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   117  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   119  DEM_INLINE boolean Dem_ClientSelectionType_isSelectionSingleDTC (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   120  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   121      uint8 tempSelectionType;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   122      tempSelectionType = (uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) & DEM_CLIENT_TYPE_MASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   124      return (tempSelectionType == DEM_CLIENT_SELECTION_TYPE_SINGLE_DTC);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   127  DEM_INLINE boolean Dem_ClientSelectionType_isSelectionDTCGroupAll (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   128  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   129      uint8 tempSelectionType;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   130      tempSelectionType = (uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) & DEM_CLIENT_TYPE_MASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   131  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   132      return (tempSelectionType == DEM_CLIENT_SELECTION_TYPE_ALL_DTCS);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   133  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   135  DEM_INLINE boolean Dem_ClientSelectionType_isSelectionDTCGroup (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   136  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   137      uint8 tempSelectionType;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   138      tempSelectionType = (uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) & DEM_CLIENT_TYPE_MASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   139  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   140      return (tempSelectionType == DEM_CLIENT_SELECTION_TYPE_GROUP_DTC);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   141  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   143  DEM_INLINE boolean Dem_ClientSelectionType_isSelectionPending (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   145      uint8 tempSelectionResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   146      tempSelectionResult = (uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_RESULT) & DEM_CLIENT_TYPE_MASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   148      return (tempSelectionResult == DEM_PENDING);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   151  DEM_INLINE void Dem_ClientSelectionType_invalidateSelectionResult (Dem_ClientSelectionType *selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   152  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   153      Std_ReturnType tempresult = DEM_PENDING;
	mov	d15,#4
.L436:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   154      Dem_ClientSelectionType tempSelection;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   156      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientSelectionType) >= 4u)), DEM_CLIENTSELECTIONTYPE_SHALL_BE_UINT32);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   158      tempSelection = (*selection & DEM_CLIENT_INVALIDATE_SELECTION_IDMASK);
	ld.w	d0,[a15]
.L595:
	insert	d0,d0,#0,#24,#8
.L438:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   159      tempSelection |= (((uint32)tempresult) << DEM_CLIENT_SELECTION_TYPE_BITPOS_RESULT);
	sh	d15,d15,#24
.L437:
	or	d0,d15
.L596:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   160      *selection = tempSelection;
	st.w	[a15],d0
.L327:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   104          Dem_ClientClearMachine_SetMachineActiveClient(DEM_CLIENTID_INVALID);
	mov	d15,#0
.L330:
	st.b	[a12],d15
.L331:
	st.b	[a13],d9
.L332:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   103          Dem_ClientSelectionType_invalidateSelectionResult(&Dem_Client_getClient(ClientId)->selection);      (inlined)
	j	.L50

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   101      if (state == DEM_CLEAR_DTC_MACHINE_STATE_IDLE)      (inlined)
.L49:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   107      else if (state == DEM_CLEAR_DTC_MACHINE_STATE_EXEC)      (inlined)
	jne	d9,#1,.L51
.L597:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   105          Dem_ClientClearMachine_SetMachineState(state);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   106      }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   107      else if (state == DEM_CLEAR_DTC_MACHINE_STATE_EXEC)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   108      {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   109          Dem_ClientClearMachine.IsNewClearRequest = TRUE;
	mov.aa	a15,a12
	add.a	a15,#2
.L598:
	mov	d15,#1
.L599:
	st.b	[a15],d15
.L333:
	st.b	[a12],d8
.L334:

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     1   
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     4  #ifndef DEM_NVM_H
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     5  #define DEM_NVM_H
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     7  #include "NvM.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     8  #include "Dem_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     9  #include "Dem_Nvm_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    10  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    11  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    12  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    13  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    16  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    17  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    19  DEM_ARRAY_DECLARE(Dem_NvMBlockStatusDoubleBufferType, Dem_NvMBlockStatusDoubleBuffer, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    20  DEM_ARRAY_DECLARE(Dem_NvMStorageBufferType, Dem_NvMStorageBuffer, DEM_NVM_CFG_NUM_STORAGEBUFFER);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    22  extern Dem_EraseAllStatusType Dem_EraseAllNvMDataStatus;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    23  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    24  DEM_ARRAY_DECLARE(Dem_NvmHashIdType, Dem_HashIdInNvm, DEM_NVM_HASH_ID_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    25  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    26  extern boolean Dem_NvMAnyClearFailed;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    27  #if(DEM_CFG_TRIGGER_TO_STORE_NVM_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    28  extern boolean Dem_NvMImmediateStorageRequested;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    29  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    31  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    32  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    35  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    36  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    38  DEM_ARRAY_DECLARE_CONST(NvM_BlockIdType, Dem_NvMBlockMap2NvmId, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    39  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdExtendedType, Dem_NvmBlockIdExtended, DEM_NVM_CFG_NUM_BLOCKS_EXTENDED);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    40  DEM_ARRAY_DECLARE_CONST(Dem_NvmCopyFunction, DemCopyFctPtrTable, DEM_NVM_CFG_COPYFCT_NUM);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    41  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    42  DEM_ARRAY_DECLARE_CONST(Dem_NvmHashIdType, Dem_HashIdInRom, DEM_NVM_HASH_ID_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    43  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    45  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    46  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    49  DEM_INLINE NvM_BlockIdType Dem_NvMGetNvMBlocKId(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    50  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    51      return Dem_NvMBlockMap2NvmId[id];
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    52  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    54  DEM_INLINE Dem_NvmResultType Dem_NvmGetStatus (Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    55  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    56      NvM_RequestResultType result;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    57      if (NvM_GetErrorStatus (Dem_NvMGetNvMBlocKId(id), &result) == E_NOT_OK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    58      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    59          return DEM_NVM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    60      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    61  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    62      switch (result)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    63      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    64          case NVM_REQ_CANCELED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    65              return DEM_NVM_CANCELED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    66  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    67          case NVM_REQ_OK:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    68          case NVM_REQ_REDUNDANCY_FAILED:     /* Driver could trigger correction of the damaged part of the redundant block; data is read correctly nevertheless */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    69          case NVM_REQ_RESTORED_FROM_ROM:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    70              return DEM_NVM_SUCCESS;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    72          case NVM_REQ_PENDING:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    73              return DEM_NVM_PENDING;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    75          case NVM_REQ_NV_INVALIDATED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    76              return DEM_NVM_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    78          case NVM_REQ_INTEGRITY_FAILED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    79              return DEM_NVM_INTEGRITY_FAILED;    /* NVM_REQ_INTEGRITY_FAILED: description in NVM-doc: Indicates that the latest read operation did not find any valid data for this block on the persistent media. */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    80  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    81          case NVM_REQ_BLOCK_SKIPPED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    82              return DEM_NVM_BLOCK_SKIPPED;       /* NVM_REQ_BLOCK_SKIPPED: if readall would be skipped, it is treated as failure for DEM, because all NVM data has to be available
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    83                                                 at init (ErrorQueue is flushed and event status / eventMemory content needs to be available)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    84                                                 This is ensured as the checks during init are checked to be DEM_NVM_SUCCESS. All other states are handled as error */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    86          default:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    87              /*   NVM_REQ_NOT_OK: Indicates that the latest operation failed due to an unexpected event.  */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    88              return DEM_NVM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    89      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    90  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    92  DEM_INLINE void Dem_NvMWriteBlockOnShutdown(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    93  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    94      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_SHUTDOWN] = DEM_NVM_STATUSBITMASK_SHUTDOWN;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    95  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    97  DEM_INLINE void Dem_NvMWriteBlockImmediate(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    98  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    99      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_IMMEDIATE] = DEM_NVM_STATUSBITMASK_IMMEDIATE;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   100  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   102  DEM_INLINE void Dem_NvMClearBlockByWrite(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   103  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   104      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_CLEAR] = DEM_NVM_STATUSBITMASK_CLEAR;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   105  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   107  DEM_INLINE void Dem_NvMClearBlockByInvalidate(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   108  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   109      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_CLEAR] = DEM_NVM_STATUSBITMASK_INVALIDATE;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   110  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   112  DEM_INLINE void Dem_NvMExcludeBlockFromStatemachine(Dem_NvmBlockIdType id, boolean exclude)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   113  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   114      if(exclude)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   115      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   116          Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_EXCLUDE] = DEM_NVM_STATUSBITMASK_EXCLUDE;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   117      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   118      else
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   119      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   120          Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_EXCLUDE] = DEM_NVM_STATUSBITMASK_NONE;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   121      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   122  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   124  void Dem_NvMInit(void);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   125  void Dem_NvMMainFunction(void);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   126  void Dem_NvMShutdown(void);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   127  boolean Dem_NvMIsClearPending(void);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   128  boolean Dem_NvMIsImmediatePending(void);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   129  boolean Dem_NvMIsBlockClearPending( Dem_NvmBlockIdType demNvMId);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   130  boolean Dem_NvMIsBlockAllowedToBeExcluded(Dem_NvmBlockIdType id);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   131  boolean Dem_NvMIsBlockExcluded( Dem_NvmBlockIdType demNvMId);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   132  void Dem_NvMNormalMemCopy(void* Dest_pv, const void* Src_pcv, uint32 numBytes_s32);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   134  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED != DEM_CFG_ERASE_ALL_OFF)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   135  Dem_HashIdCheckResultType Dem_NvmIsHashIDChanged(void);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   136  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   138  DEM_INLINE void Dem_NvMStartClear(void)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   139  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   140      Dem_NvMAnyClearFailed = FALSE;
	movh.a	a15,#@his(Dem_NvMAnyClearFailed)
	lea	a15,[a15]@los(Dem_NvMAnyClearFailed)
.L600:
	mov	d15,#0
.L601:
	st.b	[a15],d15
.L335:
	st.b	[a13],d9
.L336:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   109          Dem_ClientClearMachine.IsNewClearRequest = TRUE;      (inlined)
	j	.L52

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   107      else if (state == DEM_CLEAR_DTC_MACHINE_STATE_EXEC)      (inlined)
.L51:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   114      else if (state == DEM_CLEAR_DTC_MACHINE_STATE_WAITINGFORNVM)      (inlined)
	jne	d9,#2,.L53
.L337:
	st.b	[a13],d9
.L338:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   116          Dem_ClientClearMachine_SetMachineState(state);      (inlined)
	j	.L54

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   114      else if (state == DEM_CLEAR_DTC_MACHINE_STATE_WAITINGFORNVM)      (inlined)
.L53:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   118      else      (inlined)
.L54:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   114      else if (state == DEM_CLEAR_DTC_MACHINE_STATE_WAITINGFORNVM)      (inlined)
.L52:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   107      else if (state == DEM_CLEAR_DTC_MACHINE_STATE_EXEC)      (inlined)
.L50:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    99  if (Dem_ClientClearMachine_isClearDtcGroupAllDtcsSelected(ClientId))      (inlined)
.L48:
.L36:
.L32:
	j	.L55
.L13:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   171                  }
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   172              }
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   173          }
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   174          else
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   175          {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   176              Dem_ClientResultType_confirmCancel(&Dem_Client_getClient(tempClientId)->result, tempRequest);
	mov	d4,d8
	call	Dem_Client_getClient
.L602:
	lea	a15,[a2]10
.L340:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     3  #ifndef DEM_CLIENTBASEHANDLING_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     4  #define DEM_CLIENTBASEHANDLING_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     6  #include "Dem_ClientHandlingTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     7  #include "Dem_Client.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     8  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    11  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    12  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    14  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    15  /*********  MASKS : Dem_ClientRequestType, Dem_ClientResultType & Dem_ClientSelectionType *********/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    17  #define DEM_CLIENT_TYPE_MASK     0xFFu
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    19  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    20  /****************  MASKS : Dem_ClientRequestType & Dem_ClientResultType ***************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    22  #define DEM_CLIENT_REQUEST_RESULT_IDMASK       0xFF00u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    23  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    24  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    25  /****************  Dem_ClientResultType  **********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    27  DEM_INLINE void Dem_ClientResultType_setResult(volatile Dem_ClientResultType *result, Dem_ClientRequestType request, Std_ReturnType newResult)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    28  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    29      Dem_ClientResultType tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    31      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientResultType)) >= 2u), DEM_CLIENTRSULTTYPE_SHALL_BE_UINT16);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    33      tempResult = (request & DEM_CLIENT_REQUEST_RESULT_IDMASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    34      tempResult |= newResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    35      *result = tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    36  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    38  DEM_INLINE Std_ReturnType Dem_ClientResultType_getResult(Dem_ClientResultType result)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    39  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    40      return ((Std_ReturnType)(result & DEM_CLIENT_TYPE_MASK));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    41  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    42  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    43  DEM_INLINE void Dem_ClientResultType_confirmCancel(volatile Dem_ClientResultType *result, Dem_ClientRequestType request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    44  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    45      Dem_ClientResultType tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    46  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    47      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientResultType)) >= 2u), DEM_CLIENTRSULTTYPE_SHALL_BE_UINT16);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    49      tempResult = (request & DEM_CLIENT_REQUEST_RESULT_IDMASK);
	mov.u	d0,#65280
.L440:
	and	d9,d0
.L439:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    50      tempResult |= DEM_FAILED;
	or	d15,d9,#3
.L441:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    51      *result = tempResult;
	st.h	[a15],d15
.L341:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   177              Dem_ClientClearMachine_SetClientRequest(tempClientId, DEM_CLEAR_DTC_MACHINE_STATE_IDLE);
	mov	d9,#0
.L348:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     3  #ifndef DEM_CLIENTCLEARMACHINE_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     4  #define DEM_CLIENTCLEARMACHINE_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     6  #include "Dem_ClientHandlingTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     7  #include "Dem_ClientBaseHandling.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     8  #include "Dem_Client.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	     9  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    10  #include "Dem_Mapping.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    11  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    12  #include "Dem_Cfg_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    14  /******************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    15  /****************  Machine States  ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    16  #define DEM_CLEAR_DTC_MACHINE_STATE_IDLE            0x00u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    17  #define DEM_CLEAR_DTC_MACHINE_STATE_EXEC            0x01u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    18  #define DEM_CLEAR_DTC_MACHINE_STATE_WAITINGFORNVM   0x02u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    20  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    22    uint8                           activeClient;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    23    uint8                           machine_state;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    24    /* Boolean variable to indicate the clear is requested newly and the iterators has to be initialized */
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    25    boolean                         IsNewClearRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    26    /* Boolean variable to indicate the limit to procees the events per cycle has reached */
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    27    boolean                         IsClearInterrupted;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    28    /* Variable to indicate the no of events cleared in a cycle */
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    29    uint16                          NumberOfEventsProcessed;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    30    /* Iterators */
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    31    Dem_DtcIdListIterator           DtcIt;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    32    Dem_EventIdIterator             EvtIt;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    33    Dem_EventIdListIterator         EvtListIt;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    34  #if(DEM_CFG_J1939DCM_CLEAR_SUPPORT != DEM_CFG_J1939DCM_OFF)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    35    Dem_DtcIdListIterator2          DtcIt2;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    36  #endif
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    37  } Dem_ClientClearMachineType;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    38  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    39  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    40  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    41  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    42  extern Dem_ClientClearMachineType Dem_ClientClearMachine;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    44  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    45  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    46  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    47  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    48  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    49  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    50  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    51  /****************  Dem_ClientClearMachine  *************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    53  DEM_INLINE void Dem_ClientClearMachine_SetMachineActiveClient(Dem_ClientIdType ClientId)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    54  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    55      Dem_ClientClearMachine.activeClient = ClientId;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    56  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    57  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    58  DEM_INLINE boolean Dem_ClientClearMachine_isProcessingClient(Dem_ClientIdType ClientId)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    59  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    60      return (Dem_ClientClearMachine.activeClient == ClientId);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    61  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    63  DEM_INLINE uint8 Dem_ClientClearMachine_GetMachineActiveClient(void)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    64  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    65      return Dem_ClientClearMachine.activeClient;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    66  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    67  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    68  DEM_INLINE void Dem_ClientClearMachine_SetMachineState(uint8 state)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    69  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    70      Dem_ClientClearMachine.machine_state = state;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    71  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    73  DEM_INLINE uint8 Dem_ClientClearMachine_GetMachineState(void)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    74  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    75      return Dem_ClientClearMachine.machine_state;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    76  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    78  DEM_INLINE boolean Dem_ClientClearMachine_isClearDtcGroupAllDtcsSelected(Dem_ClientIdType ClientId)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    79  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    80  boolean status = TRUE;
	mov	d1,#1
.L351:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     3  #ifndef DEM_LIB_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     4  #define DEM_LIB_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     6  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     7  #include "Dem_Prv_Det.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     8  #include "rba_DiagLib_MemUtils.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     9  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    11  /* Macro for static assertion Check */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    12  /* either array length is (2*1)-1->valid or (2*0)-1->invalid*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    13  #define DEM_STATIC_ASSERT(COND,MSG) typedef uint8 Dem_static_assertion_##MSG[(2*(((COND)!=(FALSE))?1:0))-1]
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    15  /* mapping of memset and memcpy */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    16  #define DEM_MEMCPY  RBA_DIAGLIB_MEMCPY
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    17  #define DEM_MEMSET  RBA_DIAGLIB_MEMSET
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    19  /* Defines */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    20  #define DEM_MAXSINT16   0x7FFF
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    22  #if (DEM_CFG_BUILDTARGET != DEM_CFG_BUILDTARGET_DEMTESTSUITE)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    23      #define DEM_ASSERT_RANGECHECK(CONDITION) do {} while (0)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    24  #else
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    25      #include "DemTest_Stub4RangeCheck.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    27      #define DEM_ASSERT_RANGECHECK(CONDITION) DEM_assertValueInRange(CONDITION)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    28  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    30  // these functions are necessary to avoid compiler warnings of the kind "statement is always FALSE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    31  DEM_INLINE uint16 Dem_LibGetParamUI16( uint16 parameter )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    33      return parameter;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    36  DEM_INLINE uint8 Dem_LibGetParamUI8( uint8 parameter )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    38      return parameter;
	mov	d15,#2
.L442:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    38      return parameter;      (inlined)
	j	.L56

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    39  }      (inlined)
.L56:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    81  #if(DEM_CFG_J1939DCM != DEM_CFG_J1939DCM_OFF)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    82  if (ClientId != DEM_CLIENTID_J1939)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    84  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    85      if ((Dem_LibGetParamUI8(DEM_CFG_CLEAR_DTC_LIMITATION)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    86              == Dem_LibGetParamUI8(DEM_CFG_CLEAR_DTC_LIMITATION_ONLY_CLEAR_ALL_DTCS))
	mov	d2,#2
.L352:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    38      return parameter;      (inlined)
	j	.L57

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    39  }      (inlined)
.L57:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    85      if ((Dem_LibGetParamUI8(DEM_CFG_CLEAR_DTC_LIMITATION)      (inlined)
	jne	d15,d2,.L58
.L603:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    87              && (Dem_ClientSelectionType_getTypeOfSelection(Dem_Clients[ClientId].selection)
	sha	d15,d8,#4
.L604:
	movh.a	a15,#@his(Dem_Clients)
	lea	a15,[a15]@los(Dem_Clients)
.L605:
	addsc.a	a15,a15,d15,#0
.L606:
	ld.w	d15,[a15]12
.L353:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     3  #ifndef DEM_CLIENTBASEHANDLING_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     4  #define DEM_CLIENTBASEHANDLING_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     6  #include "Dem_ClientHandlingTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     7  #include "Dem_Client.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     8  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    11  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    12  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    14  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    15  /*********  MASKS : Dem_ClientRequestType, Dem_ClientResultType & Dem_ClientSelectionType *********/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    17  #define DEM_CLIENT_TYPE_MASK     0xFFu
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    19  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    20  /****************  MASKS : Dem_ClientRequestType & Dem_ClientResultType ***************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    22  #define DEM_CLIENT_REQUEST_RESULT_IDMASK       0xFF00u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    23  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    24  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    25  /****************  Dem_ClientResultType  **********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    27  DEM_INLINE void Dem_ClientResultType_setResult(volatile Dem_ClientResultType *result, Dem_ClientRequestType request, Std_ReturnType newResult)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    28  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    29      Dem_ClientResultType tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    31      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientResultType)) >= 2u), DEM_CLIENTRSULTTYPE_SHALL_BE_UINT16);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    33      tempResult = (request & DEM_CLIENT_REQUEST_RESULT_IDMASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    34      tempResult |= newResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    35      *result = tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    36  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    38  DEM_INLINE Std_ReturnType Dem_ClientResultType_getResult(Dem_ClientResultType result)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    39  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    40      return ((Std_ReturnType)(result & DEM_CLIENT_TYPE_MASK));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    41  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    42  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    43  DEM_INLINE void Dem_ClientResultType_confirmCancel(volatile Dem_ClientResultType *result, Dem_ClientRequestType request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    44  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    45      Dem_ClientResultType tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    46  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    47      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientResultType)) >= 2u), DEM_CLIENTRSULTTYPE_SHALL_BE_UINT16);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    49      tempResult = (request & DEM_CLIENT_REQUEST_RESULT_IDMASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    50      tempResult |= DEM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    51      *result = tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    52  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    54  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    55  /****************  Dem_ClientRequestType  *********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    57  #define DEM_CLIENT_REQUEST_TYPE_CANCEL_MASK     0x01u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    59  DEM_INLINE boolean Dem_ClientRequestType_isRequestInProgress(Dem_ClientIdType clientId)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    60  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    61      return ((Dem_Clients[clientId].request & DEM_CLIENT_REQUEST_RESULT_IDMASK)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    62              != (Dem_Clients[clientId].result & DEM_CLIENT_REQUEST_RESULT_IDMASK));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    63  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    65  DEM_INLINE void Dem_ClientRequestType_setRequest(volatile Dem_ClientRequestType *request, uint8 newRequest)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    67      Dem_ClientRequestType tempRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    68  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    69      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientRequestType) >= 2u)), DEM_CLIENTREQUESTTYPE_SHALL_BE_UINT16);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    71      tempRequest = *request;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    72      tempRequest += 0x0100u;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    73      tempRequest = (tempRequest & DEM_CLIENT_REQUEST_RESULT_IDMASK) | newRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    74      *request = tempRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    75  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    76  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    78  DEM_INLINE void Dem_ClientRequestType_cancelRequest(volatile Dem_ClientRequestType *request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    79  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    80      Dem_ClientRequestType_setRequest(request,1);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    81  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    82  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    84  DEM_INLINE uint8 Dem_ClientRequestType_getMachineIndex(Dem_ClientRequestType request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    85  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    86      uint8 machineIndex;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    87      machineIndex = (((uint8)(request & DEM_CLIENT_TYPE_MASK)) >> 1u);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    88      return machineIndex;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    89  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    91  DEM_INLINE boolean Dem_ClientRequestType_isCancelRequested(Dem_ClientRequestType request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    92  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    93      return ((request & DEM_CLIENT_REQUEST_TYPE_CANCEL_MASK) == 1u);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    94  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    95  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    96  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    97  /****************  Dem_ClientSelectionType  *******************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    98  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    99  #define DEM_CLIENT_SELECTION_DTCINDEXMASK                0xFFFFu
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   100  #define DEM_CLIENT_INVALIDATE_SELECTION_IDMASK           0x00FFFFFFu
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   101  #define DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE  16u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   102  #define DEM_CLIENT_SELECTION_TYPE_BITPOS_RESULT          24u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   104  DEM_INLINE uint16 Dem_ClientSelectionType_getSelectionDtcIndex (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   105  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   106      return ((uint16)(selection & DEM_CLIENT_SELECTION_DTCINDEXMASK));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   107  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   108  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   109  DEM_INLINE void Dem_ClientSelectionType_setSelection (Dem_ClientSelectionType *selection, uint16 dtcId, uint8 typeOfSelection, Std_ReturnType selectionResult)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   110  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   111      Dem_ClientSelectionType tempSelection;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   113      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientSelectionType) >= 4u)), DEM_CLIENTSELECTIONTYPE_SHALL_BE_UINT32);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   115      tempSelection = (((uint32)dtcId) | (((uint32)typeOfSelection) << DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) | (((uint32)selectionResult) << DEM_CLIENT_SELECTION_TYPE_BITPOS_RESULT));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   116      *selection = tempSelection;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   117  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   119  DEM_INLINE boolean Dem_ClientSelectionType_isSelectionSingleDTC (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   120  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   121      uint8 tempSelectionType;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   122      tempSelectionType = (uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) & DEM_CLIENT_TYPE_MASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   124      return (tempSelectionType == DEM_CLIENT_SELECTION_TYPE_SINGLE_DTC);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   127  DEM_INLINE boolean Dem_ClientSelectionType_isSelectionDTCGroupAll (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   128  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   129      uint8 tempSelectionType;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   130      tempSelectionType = (uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) & DEM_CLIENT_TYPE_MASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   131  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   132      return (tempSelectionType == DEM_CLIENT_SELECTION_TYPE_ALL_DTCS);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   133  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   135  DEM_INLINE boolean Dem_ClientSelectionType_isSelectionDTCGroup (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   136  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   137      uint8 tempSelectionType;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   138      tempSelectionType = (uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) & DEM_CLIENT_TYPE_MASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   139  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   140      return (tempSelectionType == DEM_CLIENT_SELECTION_TYPE_GROUP_DTC);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   141  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   143  DEM_INLINE boolean Dem_ClientSelectionType_isSelectionPending (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   145      uint8 tempSelectionResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   146      tempSelectionResult = (uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_RESULT) & DEM_CLIENT_TYPE_MASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   148      return (tempSelectionResult == DEM_PENDING);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   151  DEM_INLINE void Dem_ClientSelectionType_invalidateSelectionResult (Dem_ClientSelectionType *selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   152  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   153      Std_ReturnType tempresult = DEM_PENDING;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   154      Dem_ClientSelectionType tempSelection;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   156      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientSelectionType) >= 4u)), DEM_CLIENTSELECTIONTYPE_SHALL_BE_UINT32);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   158      tempSelection = (*selection & DEM_CLIENT_INVALIDATE_SELECTION_IDMASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   159      tempSelection |= (((uint32)tempresult) << DEM_CLIENT_SELECTION_TYPE_BITPOS_RESULT);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   160      *selection = tempSelection;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   163  DEM_INLINE Std_ReturnType Dem_ClientSelectionType_getSelectionResult (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   164  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   165      return ((Std_ReturnType)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_RESULT) & DEM_CLIENT_TYPE_MASK));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   166  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   167  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   168  DEM_INLINE uint8 Dem_ClientSelectionType_getTypeOfSelection (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   169  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   170      return ((uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) & DEM_CLIENT_TYPE_MASK));
	sh	d15,d15,#-16
.L607:
	extr.u	d15,d15,#0,#8
.L608:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   170      return ((uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) & DEM_CLIENT_TYPE_MASK));      (inlined)
	j	.L59

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   171  }      (inlined)
.L59:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    88                      != DEM_CLIENT_SELECTION_TYPE_ALL_DTCS))      (inlined)
	jeq	d15,#1,.L60
.L609:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    88                      != DEM_CLIENT_SELECTION_TYPE_ALL_DTCS))
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    89      {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    90          Dem_ClientResultType_setResult(&Dem_Clients[ClientId].result, Dem_Clients[ClientId].request, DEM_WRONG_DTC);
	ld.hu	d15,[a15]8
.L610:
	lea	a15,[a15]10
.L611:
	mov	d1,#1
.L354:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     3  #ifndef DEM_CLIENTBASEHANDLING_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     4  #define DEM_CLIENTBASEHANDLING_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     6  #include "Dem_ClientHandlingTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     7  #include "Dem_Client.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     8  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    11  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    12  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    14  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    15  /*********  MASKS : Dem_ClientRequestType, Dem_ClientResultType & Dem_ClientSelectionType *********/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    17  #define DEM_CLIENT_TYPE_MASK     0xFFu
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    19  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    20  /****************  MASKS : Dem_ClientRequestType & Dem_ClientResultType ***************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    22  #define DEM_CLIENT_REQUEST_RESULT_IDMASK       0xFF00u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    23  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    24  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    25  /****************  Dem_ClientResultType  **********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    27  DEM_INLINE void Dem_ClientResultType_setResult(volatile Dem_ClientResultType *result, Dem_ClientRequestType request, Std_ReturnType newResult)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    28  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    29      Dem_ClientResultType tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    31      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientResultType)) >= 2u), DEM_CLIENTRSULTTYPE_SHALL_BE_UINT16);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    33      tempResult = (request & DEM_CLIENT_REQUEST_RESULT_IDMASK);
	and	d0,d15
.L612:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    34      tempResult |= newResult;
	or	d0,d1
.L613:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    35      *result = tempResult;
	st.h	[a15],d0
.L355:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    91          status = FALSE;
	mov	d1,#0

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    85      if ((Dem_LibGetParamUI8(DEM_CFG_CLEAR_DTC_LIMITATION)      (inlined)
.L60:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    88                      != DEM_CLIENT_SELECTION_TYPE_ALL_DTCS))      (inlined)
.L58:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    94  return status;      (inlined)
	j	.L61

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    95  }      (inlined)
.L61:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    99  if (Dem_ClientClearMachine_isClearDtcGroupAllDtcsSelected(ClientId))      (inlined)
	jeq	d1,#0,.L62
.L349:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   101      if (state == DEM_CLEAR_DTC_MACHINE_STATE_IDLE)      (inlined)
	jne	d9,#0,.L63
.L614:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    92      }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    94  return status;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    95  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    97  DEM_INLINE void Dem_ClientClearMachine_SetClientRequest(Dem_ClientIdType ClientId, uint8 state)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    98  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    99  if (Dem_ClientClearMachine_isClearDtcGroupAllDtcsSelected(ClientId))
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   100  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   101      if (state == DEM_CLEAR_DTC_MACHINE_STATE_IDLE)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   102      {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   103          Dem_ClientSelectionType_invalidateSelectionResult(&Dem_Client_getClient(ClientId)->selection);
	mov	d4,d8
	call	Dem_Client_getClient
.L443:
	lea	a15,[a2]12
.L357:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     3  #ifndef DEM_CLIENTBASEHANDLING_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     4  #define DEM_CLIENTBASEHANDLING_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     6  #include "Dem_ClientHandlingTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     7  #include "Dem_Client.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     8  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    11  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    12  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    14  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    15  /*********  MASKS : Dem_ClientRequestType, Dem_ClientResultType & Dem_ClientSelectionType *********/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    17  #define DEM_CLIENT_TYPE_MASK     0xFFu
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    19  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    20  /****************  MASKS : Dem_ClientRequestType & Dem_ClientResultType ***************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    22  #define DEM_CLIENT_REQUEST_RESULT_IDMASK       0xFF00u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    23  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    24  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    25  /****************  Dem_ClientResultType  **********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    27  DEM_INLINE void Dem_ClientResultType_setResult(volatile Dem_ClientResultType *result, Dem_ClientRequestType request, Std_ReturnType newResult)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    28  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    29      Dem_ClientResultType tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    31      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientResultType)) >= 2u), DEM_CLIENTRSULTTYPE_SHALL_BE_UINT16);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    33      tempResult = (request & DEM_CLIENT_REQUEST_RESULT_IDMASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    34      tempResult |= newResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    35      *result = tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    36  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    38  DEM_INLINE Std_ReturnType Dem_ClientResultType_getResult(Dem_ClientResultType result)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    39  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    40      return ((Std_ReturnType)(result & DEM_CLIENT_TYPE_MASK));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    41  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    42  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    43  DEM_INLINE void Dem_ClientResultType_confirmCancel(volatile Dem_ClientResultType *result, Dem_ClientRequestType request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    44  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    45      Dem_ClientResultType tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    46  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    47      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientResultType)) >= 2u), DEM_CLIENTRSULTTYPE_SHALL_BE_UINT16);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    49      tempResult = (request & DEM_CLIENT_REQUEST_RESULT_IDMASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    50      tempResult |= DEM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    51      *result = tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    52  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    54  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    55  /****************  Dem_ClientRequestType  *********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    57  #define DEM_CLIENT_REQUEST_TYPE_CANCEL_MASK     0x01u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    59  DEM_INLINE boolean Dem_ClientRequestType_isRequestInProgress(Dem_ClientIdType clientId)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    60  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    61      return ((Dem_Clients[clientId].request & DEM_CLIENT_REQUEST_RESULT_IDMASK)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    62              != (Dem_Clients[clientId].result & DEM_CLIENT_REQUEST_RESULT_IDMASK));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    63  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    65  DEM_INLINE void Dem_ClientRequestType_setRequest(volatile Dem_ClientRequestType *request, uint8 newRequest)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    67      Dem_ClientRequestType tempRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    68  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    69      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientRequestType) >= 2u)), DEM_CLIENTREQUESTTYPE_SHALL_BE_UINT16);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    71      tempRequest = *request;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    72      tempRequest += 0x0100u;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    73      tempRequest = (tempRequest & DEM_CLIENT_REQUEST_RESULT_IDMASK) | newRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    74      *request = tempRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    75  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    76  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    78  DEM_INLINE void Dem_ClientRequestType_cancelRequest(volatile Dem_ClientRequestType *request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    79  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    80      Dem_ClientRequestType_setRequest(request,1);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    81  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    82  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    84  DEM_INLINE uint8 Dem_ClientRequestType_getMachineIndex(Dem_ClientRequestType request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    85  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    86      uint8 machineIndex;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    87      machineIndex = (((uint8)(request & DEM_CLIENT_TYPE_MASK)) >> 1u);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    88      return machineIndex;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    89  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    91  DEM_INLINE boolean Dem_ClientRequestType_isCancelRequested(Dem_ClientRequestType request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    92  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    93      return ((request & DEM_CLIENT_REQUEST_TYPE_CANCEL_MASK) == 1u);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    94  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    95  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    96  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    97  /****************  Dem_ClientSelectionType  *******************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    98  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    99  #define DEM_CLIENT_SELECTION_DTCINDEXMASK                0xFFFFu
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   100  #define DEM_CLIENT_INVALIDATE_SELECTION_IDMASK           0x00FFFFFFu
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   101  #define DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE  16u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   102  #define DEM_CLIENT_SELECTION_TYPE_BITPOS_RESULT          24u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   104  DEM_INLINE uint16 Dem_ClientSelectionType_getSelectionDtcIndex (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   105  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   106      return ((uint16)(selection & DEM_CLIENT_SELECTION_DTCINDEXMASK));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   107  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   108  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   109  DEM_INLINE void Dem_ClientSelectionType_setSelection (Dem_ClientSelectionType *selection, uint16 dtcId, uint8 typeOfSelection, Std_ReturnType selectionResult)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   110  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   111      Dem_ClientSelectionType tempSelection;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   113      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientSelectionType) >= 4u)), DEM_CLIENTSELECTIONTYPE_SHALL_BE_UINT32);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   115      tempSelection = (((uint32)dtcId) | (((uint32)typeOfSelection) << DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) | (((uint32)selectionResult) << DEM_CLIENT_SELECTION_TYPE_BITPOS_RESULT));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   116      *selection = tempSelection;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   117  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   119  DEM_INLINE boolean Dem_ClientSelectionType_isSelectionSingleDTC (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   120  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   121      uint8 tempSelectionType;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   122      tempSelectionType = (uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) & DEM_CLIENT_TYPE_MASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   124      return (tempSelectionType == DEM_CLIENT_SELECTION_TYPE_SINGLE_DTC);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   127  DEM_INLINE boolean Dem_ClientSelectionType_isSelectionDTCGroupAll (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   128  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   129      uint8 tempSelectionType;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   130      tempSelectionType = (uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) & DEM_CLIENT_TYPE_MASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   131  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   132      return (tempSelectionType == DEM_CLIENT_SELECTION_TYPE_ALL_DTCS);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   133  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   135  DEM_INLINE boolean Dem_ClientSelectionType_isSelectionDTCGroup (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   136  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   137      uint8 tempSelectionType;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   138      tempSelectionType = (uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) & DEM_CLIENT_TYPE_MASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   139  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   140      return (tempSelectionType == DEM_CLIENT_SELECTION_TYPE_GROUP_DTC);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   141  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   143  DEM_INLINE boolean Dem_ClientSelectionType_isSelectionPending (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   145      uint8 tempSelectionResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   146      tempSelectionResult = (uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_RESULT) & DEM_CLIENT_TYPE_MASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   148      return (tempSelectionResult == DEM_PENDING);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   151  DEM_INLINE void Dem_ClientSelectionType_invalidateSelectionResult (Dem_ClientSelectionType *selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   152  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   153      Std_ReturnType tempresult = DEM_PENDING;
	mov	d15,#4
.L444:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   154      Dem_ClientSelectionType tempSelection;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   156      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientSelectionType) >= 4u)), DEM_CLIENTSELECTIONTYPE_SHALL_BE_UINT32);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   158      tempSelection = (*selection & DEM_CLIENT_INVALIDATE_SELECTION_IDMASK);
	ld.w	d0,[a15]
.L615:
	insert	d0,d0,#0,#24,#8
.L446:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   159      tempSelection |= (((uint32)tempresult) << DEM_CLIENT_SELECTION_TYPE_BITPOS_RESULT);
	sh	d15,d15,#24
.L445:
	or	d0,d15
.L616:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   160      *selection = tempSelection;
	st.w	[a15],d0
.L358:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   104          Dem_ClientClearMachine_SetMachineActiveClient(DEM_CLIENTID_INVALID);
	mov	d15,#0
.L361:
	st.b	[a12],d15
.L362:
	st.b	[a13],d9
.L363:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   103          Dem_ClientSelectionType_invalidateSelectionResult(&Dem_Client_getClient(ClientId)->selection);      (inlined)
	j	.L64

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   101      if (state == DEM_CLEAR_DTC_MACHINE_STATE_IDLE)      (inlined)
.L63:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   107      else if (state == DEM_CLEAR_DTC_MACHINE_STATE_EXEC)      (inlined)
	jne	d9,#1,.L65
.L617:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   105          Dem_ClientClearMachine_SetMachineState(state);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   106      }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   107      else if (state == DEM_CLEAR_DTC_MACHINE_STATE_EXEC)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   108      {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   109          Dem_ClientClearMachine.IsNewClearRequest = TRUE;
	mov.aa	a15,a12
	add.a	a15,#2
.L618:
	mov	d15,#1
.L619:
	st.b	[a15],d15
.L364:
	st.b	[a12],d8
.L365:

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     1   
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     4  #ifndef DEM_NVM_H
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     5  #define DEM_NVM_H
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     7  #include "NvM.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     8  #include "Dem_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     9  #include "Dem_Nvm_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    10  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    11  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    12  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    13  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    16  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    17  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    19  DEM_ARRAY_DECLARE(Dem_NvMBlockStatusDoubleBufferType, Dem_NvMBlockStatusDoubleBuffer, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    20  DEM_ARRAY_DECLARE(Dem_NvMStorageBufferType, Dem_NvMStorageBuffer, DEM_NVM_CFG_NUM_STORAGEBUFFER);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    22  extern Dem_EraseAllStatusType Dem_EraseAllNvMDataStatus;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    23  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    24  DEM_ARRAY_DECLARE(Dem_NvmHashIdType, Dem_HashIdInNvm, DEM_NVM_HASH_ID_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    25  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    26  extern boolean Dem_NvMAnyClearFailed;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    27  #if(DEM_CFG_TRIGGER_TO_STORE_NVM_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    28  extern boolean Dem_NvMImmediateStorageRequested;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    29  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    31  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    32  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    35  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    36  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    38  DEM_ARRAY_DECLARE_CONST(NvM_BlockIdType, Dem_NvMBlockMap2NvmId, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    39  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdExtendedType, Dem_NvmBlockIdExtended, DEM_NVM_CFG_NUM_BLOCKS_EXTENDED);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    40  DEM_ARRAY_DECLARE_CONST(Dem_NvmCopyFunction, DemCopyFctPtrTable, DEM_NVM_CFG_COPYFCT_NUM);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    41  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    42  DEM_ARRAY_DECLARE_CONST(Dem_NvmHashIdType, Dem_HashIdInRom, DEM_NVM_HASH_ID_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    43  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    45  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    46  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    49  DEM_INLINE NvM_BlockIdType Dem_NvMGetNvMBlocKId(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    50  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    51      return Dem_NvMBlockMap2NvmId[id];
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    52  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    54  DEM_INLINE Dem_NvmResultType Dem_NvmGetStatus (Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    55  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    56      NvM_RequestResultType result;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    57      if (NvM_GetErrorStatus (Dem_NvMGetNvMBlocKId(id), &result) == E_NOT_OK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    58      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    59          return DEM_NVM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    60      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    61  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    62      switch (result)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    63      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    64          case NVM_REQ_CANCELED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    65              return DEM_NVM_CANCELED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    66  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    67          case NVM_REQ_OK:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    68          case NVM_REQ_REDUNDANCY_FAILED:     /* Driver could trigger correction of the damaged part of the redundant block; data is read correctly nevertheless */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    69          case NVM_REQ_RESTORED_FROM_ROM:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    70              return DEM_NVM_SUCCESS;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    72          case NVM_REQ_PENDING:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    73              return DEM_NVM_PENDING;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    75          case NVM_REQ_NV_INVALIDATED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    76              return DEM_NVM_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    78          case NVM_REQ_INTEGRITY_FAILED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    79              return DEM_NVM_INTEGRITY_FAILED;    /* NVM_REQ_INTEGRITY_FAILED: description in NVM-doc: Indicates that the latest read operation did not find any valid data for this block on the persistent media. */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    80  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    81          case NVM_REQ_BLOCK_SKIPPED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    82              return DEM_NVM_BLOCK_SKIPPED;       /* NVM_REQ_BLOCK_SKIPPED: if readall would be skipped, it is treated as failure for DEM, because all NVM data has to be available
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    83                                                 at init (ErrorQueue is flushed and event status / eventMemory content needs to be available)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    84                                                 This is ensured as the checks during init are checked to be DEM_NVM_SUCCESS. All other states are handled as error */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    86          default:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    87              /*   NVM_REQ_NOT_OK: Indicates that the latest operation failed due to an unexpected event.  */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    88              return DEM_NVM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    89      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    90  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    92  DEM_INLINE void Dem_NvMWriteBlockOnShutdown(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    93  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    94      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_SHUTDOWN] = DEM_NVM_STATUSBITMASK_SHUTDOWN;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    95  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    97  DEM_INLINE void Dem_NvMWriteBlockImmediate(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    98  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    99      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_IMMEDIATE] = DEM_NVM_STATUSBITMASK_IMMEDIATE;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   100  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   102  DEM_INLINE void Dem_NvMClearBlockByWrite(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   103  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   104      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_CLEAR] = DEM_NVM_STATUSBITMASK_CLEAR;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   105  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   107  DEM_INLINE void Dem_NvMClearBlockByInvalidate(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   108  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   109      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_CLEAR] = DEM_NVM_STATUSBITMASK_INVALIDATE;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   110  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   112  DEM_INLINE void Dem_NvMExcludeBlockFromStatemachine(Dem_NvmBlockIdType id, boolean exclude)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   113  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   114      if(exclude)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   115      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   116          Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_EXCLUDE] = DEM_NVM_STATUSBITMASK_EXCLUDE;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   117      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   118      else
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   119      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   120          Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_EXCLUDE] = DEM_NVM_STATUSBITMASK_NONE;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   121      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   122  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   124  void Dem_NvMInit(void);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   125  void Dem_NvMMainFunction(void);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   126  void Dem_NvMShutdown(void);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   127  boolean Dem_NvMIsClearPending(void);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   128  boolean Dem_NvMIsImmediatePending(void);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   129  boolean Dem_NvMIsBlockClearPending( Dem_NvmBlockIdType demNvMId);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   130  boolean Dem_NvMIsBlockAllowedToBeExcluded(Dem_NvmBlockIdType id);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   131  boolean Dem_NvMIsBlockExcluded( Dem_NvmBlockIdType demNvMId);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   132  void Dem_NvMNormalMemCopy(void* Dest_pv, const void* Src_pcv, uint32 numBytes_s32);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   134  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED != DEM_CFG_ERASE_ALL_OFF)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   135  Dem_HashIdCheckResultType Dem_NvmIsHashIDChanged(void);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   136  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   138  DEM_INLINE void Dem_NvMStartClear(void)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   139  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   140      Dem_NvMAnyClearFailed = FALSE;
	movh.a	a15,#@his(Dem_NvMAnyClearFailed)
	lea	a15,[a15]@los(Dem_NvMAnyClearFailed)
.L620:
	mov	d15,#0
.L621:
	st.b	[a15],d15
.L366:
	st.b	[a13],d9
.L367:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   109          Dem_ClientClearMachine.IsNewClearRequest = TRUE;      (inlined)
	j	.L66

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   107      else if (state == DEM_CLEAR_DTC_MACHINE_STATE_EXEC)      (inlined)
.L65:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   114      else if (state == DEM_CLEAR_DTC_MACHINE_STATE_WAITINGFORNVM)      (inlined)
	jne	d9,#2,.L67
.L368:
	st.b	[a13],d9
.L369:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   116          Dem_ClientClearMachine_SetMachineState(state);      (inlined)
	j	.L68

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   114      else if (state == DEM_CLEAR_DTC_MACHINE_STATE_WAITINGFORNVM)      (inlined)
.L67:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   118      else      (inlined)
.L68:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   114      else if (state == DEM_CLEAR_DTC_MACHINE_STATE_WAITINGFORNVM)      (inlined)
.L66:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	   107      else if (state == DEM_CLEAR_DTC_MACHINE_STATE_EXEC)      (inlined)
.L64:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientClearMachine.h	    99  if (Dem_ClientClearMachine_isClearDtcGroupAllDtcsSelected(ClientId))      (inlined)
.L62:
.L55:
.L10:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   178          }
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   179      }
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   180  }
	ret
.L235:
	
__Dem_ClearMainFunction_function_end:
	.size	Dem_ClearMainFunction,__Dem_ClearMainFunction_function_end-Dem_ClearMainFunction
.L152:
	; End of function
	
	.sdecl	'.text.Dem_Clear.Dem_DcmCheckClearParameter',code,cluster('Dem_DcmCheckClearParameter')
	.sect	'.text.Dem_Clear.Dem_DcmCheckClearParameter'
	.align	2
	
	.global	Dem_DcmCheckClearParameter

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   181  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   182  Dem_ReturnClearDTCType Dem_DcmCheckClearParameter (uint32 DTC, Dem_DTCFormatType DTCFormat, Dem_DTCOriginType DTCOrigin)
; Function Dem_DcmCheckClearParameter
.L116:
Dem_DcmCheckClearParameter:	.type	func
	sub.a	a10,#8
.L447:
	mov	e8,d5,d4
	st.b	[a10],d6
.L490:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   183  {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   184      Dem_DtcIdType dtcId;
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   185      Dem_DTCGroupIdType DTCGroupId;
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   186  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   187      if (!Dem_EvMemIsDtcOriginValid(&DTCOrigin))
	lea	a15,[a10]0
.L190:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     4  #ifndef DEM_EVMEMAPI_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     5  #define DEM_EVMEMAPI_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     7  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     8  #include "Dem_Cfg_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    10  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    11     Interface Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    12     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    13  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    15  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    16  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    17    /* DEM API write */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    18    Dem_DtcIdType            DtcId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    19    Dem_DTCOriginType        DTCOrigin;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    20    uint8                    ReqCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    21    /* DEM Main write */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    22    uint8                    DemCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    23    boolean                  IsValid;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    24    Dem_EvMemEventMemoryType EventMemory;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    25  } Dem_EvMemDTCRecordType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    27  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    28  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    29  extern Dem_EvMemDTCRecordType Dem_EvMemDTCRecord;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    30  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    31  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    32  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    33  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    35  /* Read Events From EvMem */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    37  void Dem_EvMemApiMainFunction(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    38  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    39  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    40  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    41  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    42  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    43     Inline Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    44     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    45  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    46  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    47  DEM_INLINE Dem_boolean_least Dem_EvMemIsDtcKindValid (Dem_DTCKindType DTCKind)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    48  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    49      return (DTCKind == DEM_DTC_KIND_ALL_DTCS);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    50  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    53  DEM_INLINE Dem_boolean_least Dem_EvMemIsDtcOriginValid (Dem_DTCOriginType  *DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    54  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    55      if(*DTCOrigin == DEM_DTC_ORIGIN_USERDEFINED_MEMORY)
	ld.bu	d15,[a15]
.L491:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    55      if(*DTCOrigin == DEM_DTC_ORIGIN_USERDEFINED_MEMORY)      (inlined)
	jne	d15,#0,.L69
.L492:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    56      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    57          *DTCOrigin = DEM_DTC_ORIGIN_SECONDARY_MEMORY;
	mov	d0,#4
.L493:
	st.b	[a15],d0

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    55      if(*DTCOrigin == DEM_DTC_ORIGIN_USERDEFINED_MEMORY)      (inlined)
.L69:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    58      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    59      return (
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    60                 (*DTCOrigin == DEM_DTC_ORIGIN_PRIMARY_MEMORY)
	ld.bu	d0,[a15]
.L494:
	eq	d15,d0,#1
.L495:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    59      return (      (inlined)
	j	.L70

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    68  }      (inlined)
.L70:
	jne	d15,#0,.L71
.L496:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   188      {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   189          return DEM_CLEAR_WRONG_DTCORIGIN;
	mov	d2,#2
.L497:
	j	.L72
.L71:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   190      }
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   191  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   192  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   193      if (   (DTCFormat != DEM_DTC_FORMAT_UDS)
	jeq	d9,#1,.L73
.L451:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   194          /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   195  #if (DEM_CFG_OBD != DEM_CFG_OBD_OFF)
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   196           && (DTCFormat != DEM_DTC_FORMAT_OBD)
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   197  #endif
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   198           /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   199          )
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   200      {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   201          return DEM_CLEAR_WRONG_DTC;
	mov	d2,#1
.L498:
	j	.L74
.L73:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   202      }
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   203  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   204      if (DTC == DEM_DTC_GROUP_ALL_DTCS)
	mov.u	d15,#65535
	addih	d15,d15,#255
.L452:
	jne	d15,d8,.L75
.L453:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   205      {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   206          return DEM_CLEAR_OK;
	mov	d2,#0
.L499:
	j	.L76
.L75:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     3  #ifndef DEM_LIB_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     4  #define DEM_LIB_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     6  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     7  #include "Dem_Prv_Det.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     8  #include "rba_DiagLib_MemUtils.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     9  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    11  /* Macro for static assertion Check */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    12  /* either array length is (2*1)-1->valid or (2*0)-1->invalid*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    13  #define DEM_STATIC_ASSERT(COND,MSG) typedef uint8 Dem_static_assertion_##MSG[(2*(((COND)!=(FALSE))?1:0))-1]
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    15  /* mapping of memset and memcpy */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    16  #define DEM_MEMCPY  RBA_DIAGLIB_MEMCPY
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    17  #define DEM_MEMSET  RBA_DIAGLIB_MEMSET
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    19  /* Defines */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    20  #define DEM_MAXSINT16   0x7FFF
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    22  #if (DEM_CFG_BUILDTARGET != DEM_CFG_BUILDTARGET_DEMTESTSUITE)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    23      #define DEM_ASSERT_RANGECHECK(CONDITION) do {} while (0)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    24  #else
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    25      #include "DemTest_Stub4RangeCheck.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    27      #define DEM_ASSERT_RANGECHECK(CONDITION) DEM_assertValueInRange(CONDITION)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    28  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    30  // these functions are necessary to avoid compiler warnings of the kind "statement is always FALSE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    31  DEM_INLINE uint16 Dem_LibGetParamUI16( uint16 parameter )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    33      return parameter;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    36  DEM_INLINE uint8 Dem_LibGetParamUI8( uint8 parameter )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    38      return parameter;
	mov	d15,#2

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    38      return parameter;      (inlined)
	j	.L77

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    39  }      (inlined)
.L77:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   207      }
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   208      else
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   209      {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   210  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   211          if ( Dem_LibGetParamUI8(DEM_CFG_CLEAR_DTC_LIMITATION) == Dem_LibGetParamUI8(DEM_CFG_CLEAR_DTC_LIMITATION_ONLY_CLEAR_ALL_DTCS) )
	mov	d0,#2
.L198:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    38      return parameter;      (inlined)
	j	.L78

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    39  }      (inlined)
.L78:
	jne	d15,d0,.L79
.L500:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   212          {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   213              DEM_DET(DEM_DET_APIID_CLEARDTC, DEM_E_WRONG_CONFIGURATION);
	mov	d4,#54
.L448:
	mov	d5,#0
.L449:
	mov	d6,#35
.L450:
	mov	d7,#16
	call	Det_ReportError
.L501:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   214              return DEM_CLEAR_WRONG_DTC;
	mov	d2,#1
.L502:
	j	.L80
.L79:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   215          }
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   216          else
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   217          {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   218              DTCGroupId = Dem_DtcGroupIdFromDtcGroupCode(DTC);
	mov	d4,d8
.L454:
	call	Dem_DtcGroupIdFromDtcGroupCode
.L455:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   219              if (DTCGroupId != DEM_DTCGROUPID_INVALID)
	jeq	d2,#0,.L81
.L503:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   220              {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   221                  return DEM_CLEAR_OK;
	mov	d2,#0
.L456:
	j	.L82
.L81:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   222              }
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   223              else
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   224              { /* clear single DTC */
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   225                  dtcId = Dem_DtcIdFromDtcCode(DTC);
	mov	d4,d8
.L457:
	call	Dem_DtcIdFromDtcCode
.L200:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     4  #ifndef DEM_DTCS_H
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     5  #define DEM_DTCS_H
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     8  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     9  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    10  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    11  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    12  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    13  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    14  #include "Dem_Cfg_DTC_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    15  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    16  #include "Dem_Mapping.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    17  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    18  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    19  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    20  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    22  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    23  #include "Dem_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    25  #define DEM_DTC_SETTING_ENABLED     FALSE
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    26  #define DEM_DTC_SETTING_DISABLED    TRUE
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    27  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    29  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    30  	Dem_DtcStateType state;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    31  } Dem_DtcState;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    33  /******************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    37  #define DEM_DTCS_NVSTORAGE_BP    2u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    38  #define DEM_DTCS_ALTERNATIVEDTC_FLAG_BP    3u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    40  #define DEM_DTCS_SEVERITYMASK    0xE0u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    41  #define DEM_DTCS_KINDMASK        0x03u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    42  #define DEM_DTCS_NVSTORAGEMASK   ((uint8)(1u<<DEM_DTCS_NVSTORAGE_BP))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    43  #define DEM_DTCS_ALTERNATIVEDTC_FLAG   ((uint8)(1u<<DEM_DTCS_ALTERNATIVEDTC_FLAG_BP))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    46  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    47  #define DEM_DTCS_INIT8(KIND, SEVERITY, NVSTORAGE, FUNC_UNIT, INDEXOF_ALTERNATIVE_DTCID) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    48  {   ((KIND) & (DEM_DTCS_KINDMASK))|((SEVERITY) & (DEM_DTCS_SEVERITYMASK)) | ((uint8)(((NVSTORAGE) & (0x01u)) << DEM_DTCS_NVSTORAGE_BP)) | ((uint8)((DEM_BOOL2BIT(INDEXOF_ALTERNATIVE_DTCID) & (0x01u)) << DEM_DTCS_ALTERNATIVEDTC_FLAG_BP)) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    49      ,(FUNC_UNIT) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    50  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    52  /* FC_VariationPoint_START */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    53  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    54  #define DEM_DTCS_INIT16(OBDCODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    55  {   (OBDCODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    56  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    57  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    58  /* FC_VariationPoint_END */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    60  #define DEM_DTCS_INIT32(CODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    61  {   (CODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    62  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    66  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    67     uint8 kind_severity_storage;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    68     uint8 Functional_Unit;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    69  } Dem_DtcParam8;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    71  /* FC_VariationPoint_START */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    72  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    73  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    74     uint16 ObdCode;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    75  } Dem_DtcParam16;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    76  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    77  /* FC_VariationPoint_END */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    78  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    79  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    80     Dem_DtcCodeType code;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    81  } Dem_DtcParam32;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    82  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    83  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    84      Dem_DtcCodeType AltDtccode;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    85      Dem_DtcCodeType Dtccode;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    86  }Dem_DtcAltParam;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    87  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    88  /******************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    89  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    90  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    92      DEM_ARRAY_DECLARE(Dem_DtcState, Dem_AllDTCsState, DEM_DTCID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    93  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    94  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    97  #define DEM_START_SEC_RAM_INIT
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    98  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   100      #if(DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   101      extern boolean Dem_AlternativeDTCEnabled;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   102      #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   104  #define DEM_STOP_SEC_RAM_INIT
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   105  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   107  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   108  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   110      #if (DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   111      DEM_ARRAY_DECLARE_CONST(Dem_DtcAltParam, Dem_AllAlternativeDTCsParam, DEM_ALTERNATIVE_DTCCODE_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   112      #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   114  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   115  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   117  /********DTC SUPPRESSION************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   118  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressed (Dem_DtcIdType dtcId)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   119  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   120  #if (DEM_CFG_SUPPRESSION != DEM_NO_SUPPRESSION)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   121      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   122  #else
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   123      DEM_UNUSED_PARAM(dtcId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   124      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   128  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressedDirectly (Dem_DtcIdType dtcId)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   130  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   131      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED_DIRECTLY);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   132  #else
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   133      DEM_UNUSED_PARAM(dtcId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   134      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   136  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   138  DEM_INLINE Dem_boolean_least Dem_DtcIsSupported (Dem_DtcIdType dtcID)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   139  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   141              && (!Dem_DtcIsSuppressed(dtcID))
	mov	d0,#0
.L206:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
	mov	d1,#0
.L504:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
	jeq	d2,#0,.L83
.L505:
	ge.u	d15,d2,#5
.L506:
	cmovn	d1,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
.L84:
.L83:
	j	.L85

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }      (inlined)
.L85:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)      (inlined)
	jeq	d1,#0,.L86
.L207:
	movh.a	a15,#@his(Dem_AllDTCsState)
	lea	a15,[a15]@los(Dem_AllDTCsState)
.L507:
	addsc.a	a15,a15,d2,#0
.L508:
	ld.bu	d15,[a15]
.L509:
	mov	d1,#0
.L216:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d1,#0
	sha	d15,d15,d1
.L510:
	and	d15,#1
.L511:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L87

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L87:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L512:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L88

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L88:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   121      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);      (inlined)
	j	.L89

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   126  }      (inlined)
.L89:
	cmovn	d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   141              && (!Dem_DtcIsSuppressed(dtcID))      (inlined)
.L90:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   142      );      (inlined)
.L86:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)      (inlined)
	j	.L91

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   143  }      (inlined)
.L91:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   226                  if ((!Dem_DtcIsSupported(dtcId)) || (DTCFormat == DEM_DTC_FORMAT_OBD))
	jeq	d0,#0,.L92
.L201:
	jne	d9,#0,.L93
.L92:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   227                  {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   228                      /* clear single OBD DTC is not allowed according to SAE-1979! */
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   229                      return DEM_CLEAR_WRONG_DTC;
	mov	d2,#1
.L458:
	j	.L94
.L93:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   230                  }
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   231                  return DEM_CLEAR_OK;
	mov	d2,#0
.L459:
	j	.L95

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   232              }
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   233          }
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   234      }
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   235  }
.L95:
.L94:
.L82:
.L80:
.L76:
.L74:
.L72:
	ret
.L181:
	
__Dem_DcmCheckClearParameter_function_end:
	.size	Dem_DcmCheckClearParameter,__Dem_DcmCheckClearParameter_function_end-Dem_DcmCheckClearParameter
.L137:
	; End of function
	
	.sdecl	'.text.Dem_Clear.Dem_Client_AreParametersAlreadyRequested',code,cluster('Dem_Client_AreParametersAlreadyRequested')
	.sect	'.text.Dem_Clear.Dem_Client_AreParametersAlreadyRequested'
	.align	2
	

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   236  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   237  static boolean Dem_Client_AreParametersAlreadyRequested(uint8 ClientId, uint32 DTC, Dem_DTCFormatType DTCFormat, Dem_DTCOriginType DTCOrigin)
; Function Dem_Client_AreParametersAlreadyRequested
.L118:
Dem_Client_AreParametersAlreadyRequested:	.type	func

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   238  {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   239      /* To Adapt to AR4.2 */
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   240      if (DTCOrigin == DEM_DTC_ORIGIN_USERDEFINED_MEMORY)
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   241      {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   242          DTCOrigin = DEM_DTC_ORIGIN_SECONDARY_MEMORY;
	sel	d7,d7,d7,#4
.L96:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   243      }
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   244  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   245      return ((Dem_Clients[ClientId].DTC == DTC) && (Dem_Clients[ClientId].DTCFormat == DTCFormat) && (Dem_Clients[ClientId].DTCOrigin == DTCOrigin));
	mov	d2,#0
.L665:
	movh.a	a15,#@his(Dem_Clients)
	lea	a15,[a15]@los(Dem_Clients)
.L666:
	sha	d4,#4
.L460:
	addsc.a	a15,a15,d4,#0
.L667:
	ld.w	d15,[a15]
.L668:
	jne	d15,d5,.L97
.L669:
	ld.bu	d15,[a15]4
.L670:
	jne	d15,d6,.L98
.L671:
	ld.bu	d15,[a15]5
.L672:
	eq	d15,d15,d7
.L673:
	cmov	d2,d15,#1
.L99:
.L98:
.L97:
	j	.L100

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   246  }
.L100:
	ret
.L412:
	
__Dem_Client_AreParametersAlreadyRequested_function_end:
	.size	Dem_Client_AreParametersAlreadyRequested,__Dem_Client_AreParametersAlreadyRequested_function_end-Dem_Client_AreParametersAlreadyRequested
.L172:
	; End of function
	
	.sdecl	'.text.Dem_Clear.Dem_ClearDTC',code,cluster('Dem_ClearDTC')
	.sect	'.text.Dem_Clear.Dem_ClearDTC'
	.align	2
	
	.global	Dem_ClearDTC

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   247  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   248  Dem_ReturnClearDTCType Dem_ClearDTC(uint32 DTC, Dem_DTCFormatType DTCFormat, Dem_DTCOriginType DTCOrigin)
; Function Dem_ClearDTC
.L120:
Dem_ClearDTC:	.type	func
	mov	e8,d5,d4
	mov	d10,d6
.L464:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   249  {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   250      Dem_ReturnClearDTCType returnSts = E_OK;
	mov	d11,#0
.L465:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   251      uint8 ClientId = DEM_CLIENTID_DCM;
	mov	d12,#1

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   252  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   253  	DEM_ENTRY_CONDITION_CHECK_DEM_INITIALIZED(DEM_DET_APIID_CLEARDTC,DEM_CLEAR_FAILED);
.L101:
.L102:
	movh.a	a15,#@his(Dem_OpMoState)
	lea	a15,[a15]@los(Dem_OpMoState)
	ld.bu	d15,[a15]
	jeq	d15,#2,.L103
	mov	d4,#54
.L461:
	mov	d5,#0
.L462:
	mov	d6,#35
.L463:
	mov	d7,#32
	call	Det_ReportError
	mov	d2,#3
	j	.L104
.L103:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   254  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   255      if (!Dem_Client_AreParametersAlreadyRequested(ClientId, DTC, DTCFormat, DTCOrigin))
	mov	e4,d8,d12
.L467:
	mov	e6,d10,d9
.L468:
	call	Dem_Client_AreParametersAlreadyRequested
.L517:
	jne	d2,#0,.L105
.L469:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   256      {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   257          /* return values are harmonized (same literal value) between Dem_ReturnClearDTCType and Std_ReturnType  */
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   258          returnSts = (Dem_ReturnClearDTCType) Dem_SelectDTC(ClientId, DTC, DTCFormat, DTCOrigin);
	mov	e4,d8,d12
.L470:
	mov	e6,d10,d9
.L471:
	call	Dem_SelectDTC
.L466:
	mov	d11,d2
.L105:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   259      }
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   260  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   261      if (returnSts == E_OK)
	jne	d11,#0,.L106
.L518:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   262      {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   263          /* return values are harmonized (same literal value) between Dem_ReturnClearDTCType and Std_ReturnType  */
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   264          returnSts = (Dem_ReturnClearDTCType)Dem_ClearDTC_4_3(ClientId);
	mov	d4,d12
.L473:
	call	Dem_ClearDTC_4_3
.L472:
	mov	d11,d2
.L106:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   265      }
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   266  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   267      return returnSts;
	mov	d2,d11
.L474:
	j	.L107

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   268  }
.L107:
.L104:
	ret
.L228:
	
__Dem_ClearDTC_function_end:
	.size	Dem_ClearDTC,__Dem_ClearDTC_function_end-Dem_ClearDTC
.L142:
	; End of function
	
	.sdecl	'.text.Dem_Clear.Dem_InvalidateSelectDTCParams',code,cluster('Dem_InvalidateSelectDTCParams')
	.sect	'.text.Dem_Clear.Dem_InvalidateSelectDTCParams'
	.align	2
	

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   269  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   270  static void Dem_InvalidateSelectDTCParams(void)
; Function Dem_InvalidateSelectDTCParams
.L122:
Dem_InvalidateSelectDTCParams:	.type	func

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   271  {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   272      Dem_ClientIdType clientId;
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   273      for (clientId = 1; clientId < DEM_CLIENTID_ARRAYLENGTH; clientId++)
	mov	d15,#1
.L475:
	j	.L108
.L109:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   274      {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   275          (void) Dem_SelectDTC(clientId, DEM_INVALID_DTC, DEM_INVALID_DTC_FORMAT, DEM_INVALID_DTC_ORIGIN_MEMORY);
	movh	d5,#43520
.L678:
	mov	d6,#255
.L679:
	mov	d7,#0
	mov	d4,d15
.L476:
	call	Dem_SelectDTC
.L477:
	add	d15,#1
.L108:
	jlt.u	d15,#3,.L109
.L680:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   276      }
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   277  }
	ret
.L417:
	
__Dem_InvalidateSelectDTCParams_function_end:
	.size	Dem_InvalidateSelectDTCParams,__Dem_InvalidateSelectDTCParams_function_end-Dem_InvalidateSelectDTCParams
.L177:
	; End of function
	
	.sdecl	'.text.Dem_Clear.Dem_ClearDtcInit',code,cluster('Dem_ClearDtcInit')
	.sect	'.text.Dem_Clear.Dem_ClearDtcInit'
	.align	2
	
	.global	Dem_ClearDtcInit

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   278  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   279  void Dem_ClearDtcInit(void)
; Function Dem_ClearDtcInit
.L124:
Dem_ClearDtcInit:	.type	func

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   280  {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   281      Dem_InvalidateSelectDTCParams();
	call	Dem_InvalidateSelectDTCParams
.L626:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   282      Dem_ClientSelectionType_invalidateSelectionResult(&Dem_Client_getClient(DEM_CLIENTID_DCM)->selection);
	mov	d4,#1
	call	Dem_Client_getClient
.L627:
	lea	a15,[a2]12
.L371:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     3  #ifndef DEM_CLIENTBASEHANDLING_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     4  #define DEM_CLIENTBASEHANDLING_H
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     6  #include "Dem_ClientHandlingTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     7  #include "Dem_Client.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     8  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    11  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    12  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    14  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    15  /*********  MASKS : Dem_ClientRequestType, Dem_ClientResultType & Dem_ClientSelectionType *********/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    17  #define DEM_CLIENT_TYPE_MASK     0xFFu
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    19  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    20  /****************  MASKS : Dem_ClientRequestType & Dem_ClientResultType ***************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    22  #define DEM_CLIENT_REQUEST_RESULT_IDMASK       0xFF00u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    23  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    24  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    25  /****************  Dem_ClientResultType  **********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    27  DEM_INLINE void Dem_ClientResultType_setResult(volatile Dem_ClientResultType *result, Dem_ClientRequestType request, Std_ReturnType newResult)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    28  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    29      Dem_ClientResultType tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    31      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientResultType)) >= 2u), DEM_CLIENTRSULTTYPE_SHALL_BE_UINT16);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    33      tempResult = (request & DEM_CLIENT_REQUEST_RESULT_IDMASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    34      tempResult |= newResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    35      *result = tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    36  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    38  DEM_INLINE Std_ReturnType Dem_ClientResultType_getResult(Dem_ClientResultType result)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    39  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    40      return ((Std_ReturnType)(result & DEM_CLIENT_TYPE_MASK));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    41  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    42  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    43  DEM_INLINE void Dem_ClientResultType_confirmCancel(volatile Dem_ClientResultType *result, Dem_ClientRequestType request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    44  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    45      Dem_ClientResultType tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    46  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    47      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientResultType)) >= 2u), DEM_CLIENTRSULTTYPE_SHALL_BE_UINT16);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    49      tempResult = (request & DEM_CLIENT_REQUEST_RESULT_IDMASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    50      tempResult |= DEM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    51      *result = tempResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    52  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    54  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    55  /****************  Dem_ClientRequestType  *********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    57  #define DEM_CLIENT_REQUEST_TYPE_CANCEL_MASK     0x01u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    59  DEM_INLINE boolean Dem_ClientRequestType_isRequestInProgress(Dem_ClientIdType clientId)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    60  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    61      return ((Dem_Clients[clientId].request & DEM_CLIENT_REQUEST_RESULT_IDMASK)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    62              != (Dem_Clients[clientId].result & DEM_CLIENT_REQUEST_RESULT_IDMASK));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    63  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    65  DEM_INLINE void Dem_ClientRequestType_setRequest(volatile Dem_ClientRequestType *request, uint8 newRequest)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    67      Dem_ClientRequestType tempRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    68  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    69      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientRequestType) >= 2u)), DEM_CLIENTREQUESTTYPE_SHALL_BE_UINT16);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    71      tempRequest = *request;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    72      tempRequest += 0x0100u;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    73      tempRequest = (tempRequest & DEM_CLIENT_REQUEST_RESULT_IDMASK) | newRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    74      *request = tempRequest;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    75  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    76  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    78  DEM_INLINE void Dem_ClientRequestType_cancelRequest(volatile Dem_ClientRequestType *request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    79  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    80      Dem_ClientRequestType_setRequest(request,1);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    81  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    82  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    84  DEM_INLINE uint8 Dem_ClientRequestType_getMachineIndex(Dem_ClientRequestType request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    85  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    86      uint8 machineIndex;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    87      machineIndex = (((uint8)(request & DEM_CLIENT_TYPE_MASK)) >> 1u);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    88      return machineIndex;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    89  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    91  DEM_INLINE boolean Dem_ClientRequestType_isCancelRequested(Dem_ClientRequestType request)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    92  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    93      return ((request & DEM_CLIENT_REQUEST_TYPE_CANCEL_MASK) == 1u);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    94  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    95  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    96  /**************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    97  /****************  Dem_ClientSelectionType  *******************************************************/
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    98  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	    99  #define DEM_CLIENT_SELECTION_DTCINDEXMASK                0xFFFFu
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   100  #define DEM_CLIENT_INVALIDATE_SELECTION_IDMASK           0x00FFFFFFu
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   101  #define DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE  16u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   102  #define DEM_CLIENT_SELECTION_TYPE_BITPOS_RESULT          24u
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   104  DEM_INLINE uint16 Dem_ClientSelectionType_getSelectionDtcIndex (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   105  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   106      return ((uint16)(selection & DEM_CLIENT_SELECTION_DTCINDEXMASK));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   107  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   108  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   109  DEM_INLINE void Dem_ClientSelectionType_setSelection (Dem_ClientSelectionType *selection, uint16 dtcId, uint8 typeOfSelection, Std_ReturnType selectionResult)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   110  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   111      Dem_ClientSelectionType tempSelection;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   113      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientSelectionType) >= 4u)), DEM_CLIENTSELECTIONTYPE_SHALL_BE_UINT32);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   115      tempSelection = (((uint32)dtcId) | (((uint32)typeOfSelection) << DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) | (((uint32)selectionResult) << DEM_CLIENT_SELECTION_TYPE_BITPOS_RESULT));
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   116      *selection = tempSelection;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   117  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   119  DEM_INLINE boolean Dem_ClientSelectionType_isSelectionSingleDTC (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   120  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   121      uint8 tempSelectionType;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   122      tempSelectionType = (uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) & DEM_CLIENT_TYPE_MASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   124      return (tempSelectionType == DEM_CLIENT_SELECTION_TYPE_SINGLE_DTC);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   127  DEM_INLINE boolean Dem_ClientSelectionType_isSelectionDTCGroupAll (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   128  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   129      uint8 tempSelectionType;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   130      tempSelectionType = (uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) & DEM_CLIENT_TYPE_MASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   131  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   132      return (tempSelectionType == DEM_CLIENT_SELECTION_TYPE_ALL_DTCS);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   133  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   135  DEM_INLINE boolean Dem_ClientSelectionType_isSelectionDTCGroup (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   136  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   137      uint8 tempSelectionType;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   138      tempSelectionType = (uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_SELECTION_TYPE) & DEM_CLIENT_TYPE_MASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   139  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   140      return (tempSelectionType == DEM_CLIENT_SELECTION_TYPE_GROUP_DTC);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   141  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   143  DEM_INLINE boolean Dem_ClientSelectionType_isSelectionPending (Dem_ClientSelectionType selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   145      uint8 tempSelectionResult;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   146      tempSelectionResult = (uint8)((selection >> DEM_CLIENT_SELECTION_TYPE_BITPOS_RESULT) & DEM_CLIENT_TYPE_MASK);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   148      return (tempSelectionResult == DEM_PENDING);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   151  DEM_INLINE void Dem_ClientSelectionType_invalidateSelectionResult (Dem_ClientSelectionType *selection)
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   152  {
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   153      Std_ReturnType tempresult = DEM_PENDING;
	mov	d15,#4
.L478:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   154      Dem_ClientSelectionType tempSelection;
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   156      DEM_STATIC_ASSERT(((DEM_SIZEOF_TYPE(Dem_ClientSelectionType) >= 4u)), DEM_CLIENTSELECTIONTYPE_SHALL_BE_UINT32);
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   158      tempSelection = (*selection & DEM_CLIENT_INVALIDATE_SELECTION_IDMASK);
	ld.w	d0,[a15]
.L628:
	insert	d0,d0,#0,#24,#8
.L480:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   159      tempSelection |= (((uint32)tempresult) << DEM_CLIENT_SELECTION_TYPE_BITPOS_RESULT);
	sh	d15,d15,#24
.L479:
	or	d0,d15
.L629:

; .\BSW\src\BSW\Gen\Dem\src\client\Dem_ClientBaseHandling.h	   160      *selection = tempSelection;
	st.w	[a15],d0
.L372:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   283  }
	ret
.L370:
	
__Dem_ClearDtcInit_function_end:
	.size	Dem_ClearDtcInit,__Dem_ClearDtcInit_function_end-Dem_ClearDtcInit
.L157:
	; End of function
	
	.sdecl	'.text.Dem_Clear.Dem_ClearIsInProgress',code,cluster('Dem_ClearIsInProgress')
	.sect	'.text.Dem_Clear.Dem_ClearIsInProgress'
	.align	2
	
	.global	Dem_ClearIsInProgress

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   284  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   285  boolean Dem_ClearIsInProgress (void)
; Function Dem_ClearIsInProgress
.L126:
Dem_ClearIsInProgress:	.type	func

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   286  {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   287      return (Dem_ClientClearMachine.machine_state == DEM_CLEAR_DTC_MACHINE_STATE_EXEC);
	movh.a	a15,#@his(Dem_ClientClearMachine)
	lea	a15,[a15]@los(Dem_ClientClearMachine)
.L634:
	ld.bu	d15,[a15]1
.L635:
	eq	d2,d15,#1
.L636:
	j	.L110

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   288  }
.L110:
	ret
.L376:
	
__Dem_ClearIsInProgress_function_end:
	.size	Dem_ClearIsInProgress,__Dem_ClearIsInProgress_function_end-Dem_ClearIsInProgress
.L162:
	; End of function
	
	.sdecl	'.text.Dem_Clear.Dem_DcmCancelOperation',code,cluster('Dem_DcmCancelOperation')
	.sect	'.text.Dem_Clear.Dem_DcmCancelOperation'
	.align	2
	
	.global	Dem_DcmCancelOperation

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   289  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   290  void Dem_DcmCancelOperation (void)
; Function Dem_DcmCancelOperation
.L128:
Dem_DcmCancelOperation:	.type	func

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   291  {
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   292      Dem_InvalidateSelectDTCParams();
	call	Dem_InvalidateSelectDTCParams
.L523:

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   293  }
	ret
.L234:
	
__Dem_DcmCancelOperation_function_end:
	.size	Dem_DcmCancelOperation,__Dem_DcmCancelOperation_function_end-Dem_DcmCancelOperation
.L147:
	; End of function
	
	.sdecl	'.data.Dem_Clear.Dem_ClearResult',data,cluster('Dem_ClearResult')
	.sect	'.data.Dem_Clear.Dem_ClearResult'
Dem_ClearResult:	.type	object
	.size	Dem_ClearResult,1
	.byte	4
	.calls	'Dem_ClearDTCBody','Dem_ClearAllDTCs'
	.calls	'Dem_ClearDTCBody','rba_BswSrv_MemSet'
	.calls	'Dem_ClearMainFunction','Dem_Client_getClient'
	.calls	'Dem_ClearMainFunction','Dem_ClearDTCBody'
	.calls	'Dem_ClearMainFunction','Dem_NvMIsClearPending'
	.calls	'Dem_DcmCheckClearParameter','Det_ReportError'
	.calls	'Dem_DcmCheckClearParameter','Dem_DtcGroupIdFromDtcGroupCode'
	.calls	'Dem_DcmCheckClearParameter','Dem_DtcIdFromDtcCode'
	.calls	'Dem_ClearDTC','Det_ReportError'
	.calls	'Dem_ClearDTC','Dem_Client_AreParametersAlreadyRequested'
	.calls	'Dem_ClearDTC','Dem_SelectDTC'
	.calls	'Dem_ClearDTC','Dem_ClearDTC_4_3'
	.calls	'Dem_InvalidateSelectDTCParams','Dem_SelectDTC'
	.calls	'Dem_ClearDtcInit','Dem_InvalidateSelectDTCParams'
	.calls	'Dem_ClearDtcInit','Dem_Client_getClient'
	.calls	'Dem_DcmCancelOperation','Dem_InvalidateSelectDTCParams'
	.calls	'Dem_ClearDTCBody','',0
	.calls	'Dem_ClearMainFunction','',0
	.calls	'Dem_DcmCheckClearParameter','',8
	.calls	'Dem_Client_AreParametersAlreadyRequested','',0
	.calls	'Dem_ClearDTC','',0
	.calls	'Dem_InvalidateSelectDTCParams','',0
	.calls	'Dem_ClearDtcInit','',0
	.calls	'Dem_ClearIsInProgress','',0
	.extern	Det_ReportError
	.extern	rba_BswSrv_MemSet
	.extern	Dem_Clients
	.extern	Dem_Client_getClient
	.extern	Dem_SelectDTC
	.extern	Dem_ClearDTC_4_3
	.extern	Dem_OpMoState
	.extern	Dem_GenericNvData
	.extern	Dem_NvMBlockStatusDoubleBuffer
	.extern	Dem_NvMAnyClearFailed
	.extern	Dem_NvMIsClearPending
	.extern	Dem_ClientClearMachine
	.extern	Dem_ClearAllDTCs
	.extern	Dem_AllDTCsState
	.extern	Dem_DtcIdFromDtcCode
	.extern	Dem_DtcGroupIdFromDtcGroupCode
	.calls	'Dem_DcmCancelOperation','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L130:
	.word	28578
	.half	3
	.word	.L131
	.byte	4
.L129:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_Clear.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L132
.L182:
	.byte	2
	.byte	'unsigned int',0,4,7,3
	.byte	'rba_BswSrv_ByteOrderSwap32',0,3,1,125,21
	.word	140
	.byte	1,1,4
	.byte	'Input_u32',0,1,125,55
	.word	140
	.byte	5,0
.L186:
	.byte	2
	.byte	'unsigned short int',0,2,7,3
	.byte	'rba_BswSrv_ByteOrderSwap16',0,3,1,150,1,21
	.word	214
	.byte	1,1,4
	.byte	'Input_u16',0,1,150,1,55
	.word	214
	.byte	5,0
.L180:
	.byte	2
	.byte	'unsigned char',0,1,8,6
	.word	296
	.byte	2
	.byte	'int',0,4,5
.L391:
	.byte	7
	.byte	'rba_DiagLib_MemUtils_MemSet',0,3,2,26,19,1,1
.L394:
	.byte	4
	.byte	'xDest_pv',0,2,26,54
	.word	313
.L396:
	.byte	4
	.byte	'xPattern_u32',0,2,26,71
	.word	318
.L398:
	.byte	4
	.byte	'numBytes_s32',0,2,26,92
	.word	140
.L400:
	.byte	5,0
.L194:
	.byte	3
	.byte	'Dem_LibGetParamUI8',0,3,3,36,18
	.word	296
	.byte	1,1
.L195:
	.byte	4
	.byte	'parameter',0,3,36,44
	.word	296
.L197:
	.byte	5,0,3
	.byte	'Dem_LibGetParamBool',0,3,3,41,20
	.word	296
	.byte	1,1,4
	.byte	'parameter',0,3,41,49
	.word	296
	.byte	5,0
.L205:
	.byte	3
	.byte	'Dem_isDtcIdValid',0,3,4,152,1,30
	.word	296
	.byte	1,1
.L208:
	.byte	4
	.byte	'id',0,4,152,1,62
	.word	214
.L210:
	.byte	5,0,3
	.byte	'Dem_DtcIdFromEventId',0,3,4,158,1,27
	.word	214
	.byte	1,1,4
	.byte	'id',0,4,158,1,65
	.word	214
	.byte	5,0,3
	.byte	'Dem_DtcIdGetEventId',0,3,4,166,1,28
	.word	214
	.byte	1,1,4
	.byte	'dtcid',0,4,166,1,63
	.word	214
	.byte	5,0,3
	.byte	'Dem_DtcIdGetFirstEventId',0,3,4,174,1,28
	.word	214
	.byte	1,1,4
	.byte	'dtcid',0,4,174,1,68
	.word	214
	.byte	8,5,0,0,3
	.byte	'Dem_DtcGroupIdIsValid',0,3,4,252,1,30
	.word	296
	.byte	1,1,4
	.byte	'dtcGroupID',0,4,252,1,72
	.word	296
	.byte	5,0,9
	.word	214
	.byte	6
	.word	773
	.byte	10,4,171,2,9,8,11
	.byte	'it',0
	.word	778
	.byte	4,2,35,0,11
	.byte	'end',0
	.word	778
	.byte	4,2,35,4,0,6
	.word	783
	.byte	7
	.byte	'Dem_EventIdListIteratorNewFromDtcId',0,3,4,177,2,17,1,1,4
	.byte	'it',0,4,177,2,78
	.word	815
	.byte	4
	.byte	'dtcid',0,4,177,2,96
	.word	214
	.byte	8,5,0,0,9
	.word	783
	.byte	6
	.word	895
	.byte	3
	.byte	'Dem_EventIdListIteratorIsValid',0,3,4,193,2,30
	.word	296
	.byte	1,1,4
	.byte	'it',0,4,193,2,92
	.word	900
	.byte	5,0,7
	.byte	'Dem_EventIdListIteratorNext',0,3,4,198,2,17,1,1,4
	.byte	'it',0,4,198,2,70
	.word	815
	.byte	5,0,3
	.byte	'Dem_EventIdListIteratorCurrent',0,3,4,203,2,28
	.word	214
	.byte	1,1,4
	.byte	'it',0,4,203,2,90
	.word	900
	.byte	5,0,12
	.word	214
	.byte	6
	.word	1069
.L270:
	.byte	7
	.byte	'Dem_ClientResultType_setResult',0,3,5,27,17,1,1
.L273:
	.byte	4
	.byte	'result',0,5,27,79
	.word	1074
.L275:
	.byte	4
	.byte	'request',0,5,27,109
	.word	214
.L277:
	.byte	4
	.byte	'newResult',0,5,27,133,1
	.word	296
.L279:
	.byte	5,0
.L339:
	.byte	7
	.byte	'Dem_ClientResultType_confirmCancel',0,3,5,43,17,1,1
.L342:
	.byte	4
	.byte	'result',0,5,43,83
	.word	1074
.L344:
	.byte	4
	.byte	'request',0,5,43,113
	.word	214
.L346:
	.byte	5,0,12
	.word	214
	.byte	6
	.word	1244
	.byte	7
	.byte	'Dem_ClientRequestType_setRequest',0,3,5,65,17,1,1,4
	.byte	'request',0,5,65,82
	.word	1249
	.byte	4
	.byte	'newRequest',0,5,65,97
	.word	296
	.byte	5,0
.L243:
	.byte	3
	.byte	'Dem_ClientRequestType_isCancelRequested',0,3,5,91,20
	.word	296
	.byte	1,1
.L245:
	.byte	4
	.byte	'request',0,5,91,82
	.word	214
.L247:
	.byte	5,0
.L380:
	.byte	3
	.byte	'Dem_ClientSelectionType_isSelectionDTCGroupAll',0,3,5,127,20
	.word	296
	.byte	1,1
.L382:
	.byte	4
	.byte	'selection',0,5,127,92
	.word	140
.L384:
	.byte	5,0,6
	.word	140
.L281:
	.byte	7
	.byte	'Dem_ClientSelectionType_invalidateSelectionResult',0,3,5,151,1,17,1,1
.L284:
	.byte	4
	.byte	'selection',0,5,151,1,93
	.word	1478
.L286:
	.byte	5,0
.L265:
	.byte	3
	.byte	'Dem_ClientSelectionType_getTypeOfSelection',0,3,5,168,1,18
	.word	296
	.byte	1,1
.L267:
	.byte	4
	.byte	'selection',0,5,168,1,86
	.word	140
.L269:
	.byte	5,0,3
	.byte	'Dem_Cfg_Dtc_GetDtcCode',0,3,6,99,30
	.word	140
	.byte	1,1,4
	.byte	'indx',0,6,99,67
	.word	214
	.byte	5,0,7
	.byte	'rba_DiagLib_Bit8SetBit',0,3,7,36,19,1,1,4
	.byte	'buffer',0,7,36,49
	.word	313
	.byte	4
	.byte	'bit_position',0,7,36,63
	.word	296
	.byte	5,0,7
	.byte	'rba_DiagLib_Bit8ClearBit',0,3,7,42,19,1,1,4
	.byte	'buffer',0,7,42,51
	.word	313
	.byte	4
	.byte	'bit_position',0,7,42,65
	.word	296
	.byte	5,0,7
	.byte	'rba_DiagLib_Bit8OverwriteBit',0,3,7,48,19,1,1,4
	.byte	'buffer',0,7,48,55
	.word	313
	.byte	4
	.byte	'bit_position',0,7,48,69
	.word	296
	.byte	4
	.byte	'will_bit_be_set',0,7,48,91
	.word	296
	.byte	8,5,5,0,0
.L222:
	.byte	3
	.byte	'rba_DiagLib_Bit8GetSingleBit',0,3,7,60,20
	.word	296
	.byte	1,1
.L223:
	.byte	4
	.byte	'value',0,7,60,55
	.word	296
.L225:
	.byte	4
	.byte	'bit_position',0,7,60,68
	.word	296
.L227:
	.byte	5,0
.L215:
	.byte	3
	.byte	'rba_DiagLib_Bit8IsBitSet',0,3,7,64,22
	.word	296
	.byte	1,1
.L217:
	.byte	4
	.byte	'value',0,7,64,53
	.word	296
.L219:
	.byte	4
	.byte	'bit_position',0,7,64,66
	.word	296
.L221:
	.byte	8,5,0,0,3
	.byte	'rba_DiagLib_Bit8GetBits',0,3,7,69,20
	.word	296
	.byte	1,1,4
	.byte	'value',0,7,69,50
	.word	296
	.byte	4
	.byte	'bit_position',0,7,69,63
	.word	296
	.byte	4
	.byte	'number_of_bits',0,7,69,83
	.word	296
	.byte	5,0,7
	.byte	'rba_DiagLib_Bit8ClearBits',0,3,7,77,19,1,1,4
	.byte	'value',0,7,77,52
	.word	313
	.byte	4
	.byte	'bit_position',0,7,77,65
	.word	296
	.byte	4
	.byte	'number_of_bits',0,7,77,85
	.word	296
	.byte	5,0,7
	.byte	'rba_DiagLib_Bit8OverwriteBits',0,3,7,83,19,1,1,4
	.byte	'value',0,7,83,56
	.word	313
	.byte	4
	.byte	'bit_position',0,7,83,69
	.word	296
	.byte	4
	.byte	'number_of_bits',0,7,83,89
	.word	296
	.byte	4
	.byte	'newValue',0,7,83,111
	.word	296
	.byte	8,5,0,0,6
	.word	214
	.byte	7
	.byte	'rba_DiagLib_Bit16SetBit',0,3,8,36,19,1,1,4
	.byte	'buffer',0,8,36,51
	.word	2382
	.byte	4
	.byte	'bit_position',0,8,36,65
	.word	296
	.byte	5,0,7
	.byte	'rba_DiagLib_Bit16ClearBit',0,3,8,42,19,1,1,4
	.byte	'buffer',0,8,42,53
	.word	2382
	.byte	4
	.byte	'bit_position',0,8,42,67
	.word	296
	.byte	5,0,3
	.byte	'rba_DiagLib_Bit16GetSingleBit',0,3,8,60,21
	.word	214
	.byte	1,1,4
	.byte	'value',0,8,60,58
	.word	214
	.byte	4
	.byte	'bit_position',0,8,60,71
	.word	296
	.byte	5,0,3
	.byte	'rba_DiagLib_Bit16IsBitSet',0,3,8,65,22
	.word	296
	.byte	1,1,4
	.byte	'value',0,8,65,55
	.word	214
	.byte	4
	.byte	'bit_position',0,8,65,68
	.word	296
	.byte	8,5,0,0,3
	.byte	'rba_DiagLib_Bit16GetBits',0,3,8,70,21
	.word	214
	.byte	1,1,4
	.byte	'value',0,8,70,53
	.word	214
	.byte	4
	.byte	'bit_position',0,8,70,66
	.word	296
	.byte	4
	.byte	'number_of_bits',0,8,70,86
	.word	296
	.byte	5,0,7
	.byte	'rba_DiagLib_Bit16ClearBits',0,3,8,78,19,1,1,4
	.byte	'value',0,8,78,54
	.word	2382
	.byte	4
	.byte	'bit_position',0,8,78,67
	.word	296
	.byte	4
	.byte	'number_of_bits',0,8,78,87
	.word	296
	.byte	5,0,6
	.word	140
	.byte	7
	.byte	'rba_DiagLib_Bit32SetBit',0,3,9,36,19,1,1,4
	.byte	'buffer',0,9,36,51
	.word	2871
	.byte	4
	.byte	'bit_position',0,9,36,65
	.word	296
	.byte	5,0,7
	.byte	'rba_DiagLib_Bit32ClearBit',0,3,9,42,19,1,1,4
	.byte	'buffer',0,9,42,53
	.word	2871
	.byte	4
	.byte	'bit_position',0,9,42,67
	.word	296
	.byte	5,0,3
	.byte	'rba_DiagLib_Bit32GetSingleBit',0,3,9,60,21
	.word	140
	.byte	1,1,4
	.byte	'value',0,9,60,58
	.word	140
	.byte	4
	.byte	'bit_position',0,9,60,71
	.word	296
	.byte	5,0,3
	.byte	'rba_DiagLib_Bit32IsBitSet',0,3,9,65,22
	.word	296
	.byte	1,1,4
	.byte	'value',0,9,65,55
	.word	140
	.byte	4
	.byte	'bit_position',0,9,65,68
	.word	296
	.byte	8,5,0,0,7
	.byte	'rba_DiagLib_Bit32ClearBits',0,3,9,78,19,1,1,4
	.byte	'value',0,9,78,54
	.word	2871
	.byte	4
	.byte	'bit_position',0,9,78,67
	.word	296
	.byte	4
	.byte	'number_of_bits',0,9,78,87
	.word	296
	.byte	5,0,3
	.byte	'Dem_NvMGetNvMBlocKId',0,3,10,49,28
	.word	214
	.byte	1,1,4
	.byte	'id',0,10,49,68
	.word	296
	.byte	5,0,3
	.byte	'Dem_NvmGetStatus',0,3,10,54,30
	.word	296
	.byte	1,1,4
	.byte	'id',0,10,54,67
	.word	296
	.byte	8,5,0,0,7
	.byte	'Dem_NvMWriteBlockOnShutdown',0,3,10,92,17,1,1,4
	.byte	'id',0,10,92,64
	.word	296
	.byte	5,0
.L401:
	.byte	7
	.byte	'Dem_NvMClearBlockByWrite',0,3,10,102,17,1,1
.L403:
	.byte	4
	.byte	'id',0,10,102,61
	.word	296
.L405:
	.byte	5,0,7
	.byte	'Dem_NvMClearBlockByInvalidate',0,3,10,107,17,1,1,4
	.byte	'id',0,10,107,66
	.word	296
	.byte	5,0
.L302:
	.byte	7
	.byte	'Dem_NvMStartClear',0,3,10,138,1,17,1,1
.L304:
	.byte	5,0
.L308:
	.byte	3
	.byte	'Dem_NvMIsClearFailed',0,3,10,143,1,20
	.word	296
	.byte	1,1
.L310:
	.byte	5,0,3
	.byte	'Dem_NvMIsInvalidateAllNVMBlocksRequested',0,3,10,167,1,30
	.word	296
	.byte	1,1,5,0
.L289:
	.byte	7
	.byte	'Dem_ClientClearMachine_SetMachineActiveClient',0,3,11,53,17,1,1
.L292:
	.byte	4
	.byte	'ClientId',0,11,53,80
	.word	296
.L294:
	.byte	5,0
.L311:
	.byte	3
	.byte	'Dem_ClientClearMachine_isProcessingClient',0,3,11,58,20
	.word	296
	.byte	1,1
.L312:
	.byte	4
	.byte	'ClientId',0,11,58,79
	.word	296
.L314:
	.byte	5,0
.L240:
	.byte	3
	.byte	'Dem_ClientClearMachine_GetMachineActiveClient',0,3,11,63,18
	.word	296
	.byte	1,1
.L242:
	.byte	5,0
.L295:
	.byte	7
	.byte	'Dem_ClientClearMachine_SetMachineState',0,3,11,68,17,1,1
.L297:
	.byte	4
	.byte	'state',0,11,68,62
	.word	296
.L299:
	.byte	5,0
.L238:
	.byte	3
	.byte	'Dem_ClientClearMachine_GetMachineState',0,3,11,73,18
	.word	296
	.byte	1,1
.L239:
	.byte	5,0
.L256:
	.byte	3
	.byte	'Dem_ClientClearMachine_isClearDtcGroupAllDtcsSelected',0,3,11,78,20
	.word	296
	.byte	1,1
.L258:
	.byte	4
	.byte	'ClientId',0,11,78,91
	.word	296
.L260:
	.byte	8,5,5,5,5,0,0
.L249:
	.byte	7
	.byte	'Dem_ClientClearMachine_SetClientRequest',0,3,11,97,17,1,1
.L251:
	.byte	4
	.byte	'ClientId',0,11,97,74
	.word	296
.L253:
	.byte	4
	.byte	'state',0,11,97,90
	.word	296
.L255:
	.byte	8,5,5,5,5,5,5,5,5,0,0,7
	.byte	'Dem_BitArraySetBit',0,3,12,33,17,1,1,4
	.byte	'buffer',0,12,33,36
	.word	2871
	.byte	4
	.byte	'bit_position',0,12,33,75
	.word	140
	.byte	5,0,7
	.byte	'Dem_BitArrayClearBit',0,3,12,46,17,1,1,4
	.byte	'buffer',0,12,46,38
	.word	2871
	.byte	4
	.byte	'bit_position',0,12,46,77
	.word	140
	.byte	5,0,7
	.byte	'Dem_BitArrayOverwriteBit',0,3,12,61,17,1,1,4
	.byte	'buffer',0,12,61,42
	.word	2871
	.byte	4
	.byte	'bit_position',0,12,62,25
	.word	140
	.byte	4
	.byte	'will_bit_be_set',0,12,62,57
	.word	296
	.byte	8,5,5,0,0,9
	.word	140
	.byte	6
	.word	4335
	.byte	3
	.byte	'Dem_BitArrayIsBitSet',0,3,12,75,30
	.word	296
	.byte	1,1,4
	.byte	'buffer',0,12,75,51
	.word	4340
	.byte	4
	.byte	'bit_position',0,12,75,95
	.word	140
	.byte	5,0,3
	.byte	'Dem_ISO14229ByteIsTestFailed',0,3,13,122,30
	.word	296
	.byte	1,1,4
	.byte	'self',0,13,122,66
	.word	296
	.byte	8,5,0,0,3
	.byte	'Dem_ISO14229ByteIsTestFailedTOC',0,3,13,129,1,30
	.word	296
	.byte	1,1,4
	.byte	'self',0,13,129,1,69
	.word	296
	.byte	8,5,0,0,3
	.byte	'Dem_ISO14229ByteIsTestCompleteTOC',0,3,13,157,1,30
	.word	296
	.byte	1,1,4
	.byte	'self',0,13,157,1,71
	.word	296
	.byte	8,5,0,0,3
	.byte	'Dem_ISO14229ByteIsPendingDTC',0,3,13,164,1,30
	.word	296
	.byte	1,1,4
	.byte	'self',0,13,164,1,66
	.word	296
	.byte	8,5,0,0,3
	.byte	'Dem_ISO14229ByteIsWarningIndicatorRequested',0,3,13,177,1,30
	.word	296
	.byte	1,1,4
	.byte	'self',0,13,177,1,81
	.word	296
	.byte	8,5,0,0,7
	.byte	'Dem_ISO14229ByteSetTestFailed',0,3,13,186,1,17,1,1,4
	.byte	'self',0,13,186,1,55
	.word	313
	.byte	4
	.byte	'setOrReset',0,13,186,1,79
	.word	296
	.byte	8,5,0,0,7
	.byte	'Dem_ISO14229ByteSetTestFailedTOC',0,3,13,193,1,17,1,1,4
	.byte	'self',0,13,193,1,58
	.word	313
	.byte	4
	.byte	'setOrReset',0,13,193,1,82
	.word	296
	.byte	8,5,0,0,7
	.byte	'Dem_ISO14229ByteSetTestFailedSLC',0,3,13,200,1,17,1,1,4
	.byte	'self',0,13,200,1,58
	.word	313
	.byte	4
	.byte	'setOrReset',0,13,200,1,82
	.word	296
	.byte	8,5,0,0,7
	.byte	'Dem_ISO14229ByteSetTestCompleteTOC',0,3,13,214,1,17,1,1,4
	.byte	'self',0,13,214,1,60
	.word	313
	.byte	4
	.byte	'setOrReset',0,13,214,1,84
	.word	296
	.byte	8,5,0,0,7
	.byte	'Dem_ISO14229ByteSetTestCompleteSLC',0,3,13,221,1,17,1,1,4
	.byte	'self',0,13,221,1,60
	.word	313
	.byte	4
	.byte	'setOrReset',0,13,221,1,84
	.word	296
	.byte	8,5,0,0,7
	.byte	'Dem_ISO14229ByteSetPendingDTC',0,3,13,228,1,17,1,1,4
	.byte	'self',0,13,228,1,55
	.word	313
	.byte	4
	.byte	'setOrReset',0,13,228,1,79
	.word	296
	.byte	8,5,0,0,7
	.byte	'Dem_ISO14229ByteSetConfirmedDTC',0,3,13,235,1,17,1,1,4
	.byte	'self',0,13,235,1,57
	.word	313
	.byte	4
	.byte	'setOrReset',0,13,235,1,81
	.word	296
	.byte	8,5,0,0,7
	.byte	'Dem_ISO14229ByteSetWarningIndicatorRequested',0,3,13,242,1,17,1,1,4
	.byte	'self',0,13,242,1,70
	.word	313
	.byte	4
	.byte	'setOrReset',0,13,242,1,94
	.word	296
	.byte	8,5,0,0,3
	.byte	'Dem_EnCoAreAllFulfilled',0,3,14,32,30
	.word	296
	.byte	1,1,4
	.byte	'enableConditionList',0,14,32,68
	.word	296
	.byte	5,0,3
	.byte	'rba_DiagLib_ByteOrderUtils_SwapByteOrderS',0,3,15,36,21
	.word	214
	.byte	1,1,4
	.byte	'val',0,15,36,70
	.word	214
	.byte	8,5,0,0,3
	.byte	'rba_DiagLib_ByteOrderUtils_SwapByteOrderL',0,3,15,41,21
	.word	140
	.byte	1,1,4
	.byte	'val',0,15,41,70
	.word	140
	.byte	8,5,0,0,3
	.byte	'Dem_EvtParam_GetStoreTestFailedToNextOC',0,3,16,55,22
	.word	296
	.byte	1,1,4
	.byte	'indx',0,16,55,78
	.word	214
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetEventIsStoredInPrimary',0,3,16,75,22
	.word	296
	.byte	1,1,4
	.byte	'indx',0,16,75,77
	.word	214
	.byte	8,5,0,0,3
	.byte	'Dem_EvtParam_GetEventIsStoredInSecondary',0,3,16,82,22
	.word	296
	.byte	1,1,4
	.byte	'indx',0,16,82,79
	.word	214
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetEventIsStoredInMirror',0,3,16,89,22
	.word	296
	.byte	1,1,4
	.byte	'indx',0,16,89,76
	.word	214
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetAgingAllowed',0,3,16,95,22
	.word	296
	.byte	1,1,4
	.byte	'indx',0,16,95,67
	.word	214
	.byte	8,5,0,0,3
	.byte	'Dem_EvtParam_GetOperationCycleID',0,3,16,122,20
	.word	296
	.byte	1,1,4
	.byte	'indx',0,16,122,69
	.word	214
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetAgingCycleID',0,3,16,129,1,20
	.word	296
	.byte	1,1,4
	.byte	'indx',0,16,129,1,65
	.word	214
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetFailureCycleID',0,3,16,136,1,20
	.word	296
	.byte	1,1,4
	.byte	'indx',0,16,136,1,67
	.word	214
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetDebounceMethodIndex',0,3,16,149,1,20
	.word	296
	.byte	1,1,4
	.byte	'indx',0,16,149,1,72
	.word	214
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetDebounceParamSettingIndex',0,3,16,155,1,21
	.word	214
	.byte	1,1,4
	.byte	'indx',0,16,155,1,79
	.word	214
	.byte	8,5,0,0,3
	.byte	'Dem_EvtParam_GetAgingThreshold',0,3,16,168,1,20
	.word	296
	.byte	1,1,4
	.byte	'indx',0,16,168,1,67
	.word	214
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetEnableConditions',0,3,16,208,1,27
	.word	296
	.byte	1,1,4
	.byte	'indx',0,16,208,1,76
	.word	214
	.byte	5,0,2
	.byte	'short int',0,2,5,3
	.byte	'Dem_EvtGetDebounceLevel',0,3,17,193,1,19
	.word	6327
	.byte	1,1,4
	.byte	'EventId',0,17,193,1,60
	.word	214
	.byte	5,0,3
	.byte	'Dem_EvtGetLastReportedEvent',0,3,17,219,1,32
	.word	296
	.byte	1,1,4
	.byte	'EventId',0,17,219,1,77
	.word	214
	.byte	5,0,7
	.byte	'Dem_EvtIncreaseGlobalInitMonitoringCounter',0,3,17,227,3,17,1,1,5,0,7
	.byte	'Dem_EvtSetAnyInitMonitoring',0,3,17,233,3,17,1,1,4
	.byte	'reason',0,17,233,3,72
	.word	296
	.byte	8,5,0,0,3
	.byte	'Dem_EvtIsSuppressed',0,3,17,244,4,30
	.word	296
	.byte	1,1,4
	.byte	'EventId',0,17,244,4,67
	.word	214
	.byte	8,5,0,0,6
	.word	296
	.byte	7
	.byte	'Dem_EnvSetTrigger',0,3,18,17,17,1,1,4
	.byte	'trigger',0,18,17,52
	.word	6616
	.byte	4
	.byte	'trigger2set',0,18,17,77
	.word	296
	.byte	5,0,3
	.byte	'Dem_EnvIsAnyTriggerSet',0,3,18,22,30
	.word	296
	.byte	1,1,4
	.byte	'trigger2test',0,18,22,69
	.word	296
	.byte	5,0,2
	.byte	'unsigned long int',0,4,7,3
	.byte	'Dem_DebHandleDebounceAction__processBits',0,3,19,101,30
	.word	296
	.byte	1,1,4
	.byte	'EventId',0,19,101,87
	.word	214
	.byte	4
	.byte	'debAction',0,19,101,120
	.word	6741
	.byte	5,0,3
	.byte	'Dem_EvMemIsMemIdValid',0,3,20,103,30
	.word	296
	.byte	1,1,4
	.byte	'MemId',0,20,103,65
	.word	6741
	.byte	5,0,3
	.byte	'Dem_EvMemIsEventMemLocIdValid',0,3,20,112,30
	.word	296
	.byte	1,1,4
	.byte	'LocId',0,20,112,73
	.word	6741
	.byte	5,0,10,21,133,1,3,4,11
	.byte	'Status',0
	.word	214
	.byte	2,2,35,0,11
	.byte	'EventId',0
	.word	214
	.byte	2,2,35,2,0,13,21,131,1,9,4,11
	.byte	'Data',0
	.word	6956
	.byte	4,2,35,0,0,14,7
	.word	296
	.byte	15,6,0,10,21,144,1,9,20,11
	.byte	'Hdr',0
	.word	6996
	.byte	4,2,35,0,11
	.byte	'Data',0
	.word	7017
	.byte	7,2,35,4,11
	.byte	'FailureCounter',0
	.word	296
	.byte	1,2,35,11,11
	.byte	'FreezeFrameCounter',0
	.word	296
	.byte	1,2,35,12,11
	.byte	'AgingCounter',0
	.word	296
	.byte	1,2,35,13,11
	.byte	'OccurrenceCounter',0
	.word	296
	.byte	1,2,35,14,11
	.byte	'Trigger',0
	.word	296
	.byte	1,2,35,15,11
	.byte	'TimeId',0
	.word	140
	.byte	4,2,35,16,0,9
	.word	7026
	.byte	6
	.word	7194
	.byte	3
	.byte	'Dem_EvMemGetEventMemStatusByPtr',0,3,20,134,1,25
	.word	6741
	.byte	1,1,4
	.byte	'EventMemory',0,20,134,1,89
	.word	7199
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemStatus',0,3,20,139,1,25
	.word	6741
	.byte	1,1,4
	.byte	'LocId',0,20,139,1,65
	.word	6741
	.byte	8,5,0,0,3
	.byte	'Dem_EvMemGetEventMemEventIdByPtr',0,3,20,152,1,28
	.word	214
	.byte	1,1,4
	.byte	'EventMemory',0,20,152,1,93
	.word	7199
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemTimeIdByPtr',0,3,20,170,1,19
	.word	140
	.byte	1,1,4
	.byte	'EventMemory',0,20,170,1,83
	.word	7199
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemDtcStatusByPtr',0,3,20,188,1,18
	.word	296
	.byte	1,1,4
	.byte	'EventMemory',0,20,188,1,85
	.word	7199
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemFailureCounterByPtr',0,3,20,216,1,24
	.word	6741
	.byte	1,1,4
	.byte	'EventMemory',0,20,216,1,96
	.word	7199
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemOccurrenceCounterByPtr',0,3,20,233,1,25
	.word	6741
	.byte	1,1,4
	.byte	'EventMemory',0,20,233,1,100
	.word	7199
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemAgingCounterByPtr',0,3,20,133,2,25
	.word	6741
	.byte	1,1,4
	.byte	'EventMemory',0,20,133,2,95
	.word	7199
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemAgingCounter',0,3,20,144,2,25
	.word	6741
	.byte	1,1,4
	.byte	'LocId',0,20,144,2,71
	.word	6741
	.byte	8,5,0,0,7
	.byte	'Dem_EvMemSetEventMemAgingCounter',0,3,20,150,2,17,1,1,4
	.byte	'LocId',0,20,150,2,63
	.word	6741
	.byte	4
	.byte	'AgingCounter',0,20,150,2,83
	.word	6741
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr',0,3,20,161,2,25
	.word	6741
	.byte	1,1,4
	.byte	'EventMemory',0,20,161,2,103
	.word	7199
	.byte	5,0,2
	.byte	'char',0,1,6,3
	.byte	'Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr',0,3,20,213,2,18
	.word	7985
	.byte	1,1,4
	.byte	'EventMemory',0,20,213,2,92
	.word	7199
	.byte	5,0,3
	.byte	'Dem_EvMemGetMaxFdcSinceLastClearByPtr',0,3,20,224,2,18
	.word	7985
	.byte	1,1,4
	.byte	'EventMemory',0,20,224,2,88
	.word	7199
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemFreezeFrameCounterByPtr',0,3,20,238,3,25
	.word	6741
	.byte	1,1,4
	.byte	'EventMemory',0,20,238,3,101
	.word	7199
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemTriggerByPtr',0,3,20,141,4,28
	.word	296
	.byte	1,1,4
	.byte	'EventMemory',0,20,141,4,93
	.word	7199
	.byte	5,0,6
	.word	7026
	.byte	3
	.byte	'Dem_EvMemGetEventMemDataByPtr',0,3,20,170,4,19
	.word	313
	.byte	1,1,4
	.byte	'EventMemory',0,20,170,4,75
	.word	8290
	.byte	5,0,3
	.byte	'Dem_EvMemIsStored',0,3,20,206,4,30
	.word	296
	.byte	1,1,4
	.byte	'Status',0,20,206,4,61
	.word	6741
	.byte	5,0,3
	.byte	'Dem_EvMemIsEmpty',0,3,20,211,4,30
	.word	296
	.byte	1,1,4
	.byte	'Status',0,20,211,4,60
	.word	6741
	.byte	5,0,3
	.byte	'Dem_EvMemSetToEmpty',0,3,20,226,4,25
	.word	6741
	.byte	1,1,5,0,3
	.byte	'Dem_EvMemGetShadowVisibility',0,3,20,242,4,30
	.word	296
	.byte	1,1,5,0,3
	.byte	'Dem_EvMemGetEventMemStartLocId',0,3,20,131,5,25
	.word	6741
	.byte	1,1,4
	.byte	'MemId',0,20,131,5,69
	.word	6741
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemEndLocId',0,3,20,143,5,25
	.word	6741
	.byte	1,1,4
	.byte	'MemId',0,20,143,5,67
	.word	6741
	.byte	5,0,6
	.word	6741
	.byte	7
	.byte	'Dem_EvMemEventMemoryIteratorNew',0,3,20,179,5,17,1,1,4
	.byte	'MemId',0,20,179,5,63
	.word	8650
	.byte	5,0,9
	.word	6741
	.byte	6
	.word	8712
	.byte	3
	.byte	'Dem_EvMemEventMemoryIteratorIsValid',0,3,20,184,5,30
	.word	296
	.byte	1,1,4
	.byte	'MemId',0,20,184,5,86
	.word	8717
	.byte	5,0,7
	.byte	'Dem_EvMemEventMemoryIteratorNext',0,3,20,189,5,17,1,1,4
	.byte	'MemId',0,20,189,5,64
	.word	8650
	.byte	5,0,3
	.byte	'Dem_EvMemIsEdgeTrigger',0,3,20,247,5,30
	.word	296
	.byte	1,1,4
	.byte	'StatusOld',0,20,247,5,66
	.word	6741
	.byte	4
	.byte	'StatusNew',0,20,247,5,90
	.word	6741
	.byte	4
	.byte	'Trigger',0,20,247,5,114
	.word	6741
	.byte	5,0,3
	.byte	'Dem_EvMemGetRamStsMask',0,3,20,154,7,25
	.word	6741
	.byte	1,1,4
	.byte	'EventId',0,20,154,7,64
	.word	214
	.byte	8,5,0,0,6
	.word	296
.L189:
	.byte	3
	.byte	'Dem_EvMemIsDtcOriginValid',0,3,22,53,30
	.word	296
	.byte	1,1
.L191:
	.byte	4
	.byte	'DTCOrigin',0,22,53,77
	.word	8993
.L193:
	.byte	5,0,3
	.byte	'Dem_EvMemGetCurrentAgingCycleCounterInt',0,3,23,20,25
	.word	6741
	.byte	1,1,4
	.byte	'EventId',0,23,20,81
	.word	214
	.byte	5,0,3
	.byte	'Dem_EvMemIsAged',0,3,23,61,30
	.word	296
	.byte	1,1,4
	.byte	'EventId',0,23,61,62
	.word	214
	.byte	4
	.byte	'LocId',0,23,61,84
	.word	6741
	.byte	4
	.byte	'StatusNew',0,23,61,104
	.word	6741
	.byte	5,0,3
	.byte	'Dem_EvMemGetMemIdForDTCOrigin',0,3,24,150,1,25
	.word	6741
	.byte	1,1,4
	.byte	'DTCOrigin',0,24,150,1,73
	.word	296
	.byte	5,0,3
	.byte	'Dem_EvMemGetMemIdForEvent',0,3,24,222,1,25
	.word	6741
	.byte	1,1,4
	.byte	'EventId',0,24,222,1,67
	.word	214
	.byte	8,5,0,0,3
	.byte	'Dem_GetEvMemLockInternal',0,3,24,137,2,20
	.word	296
	.byte	1,1,5,0
.L211:
	.byte	3
	.byte	'Dem_DtcIsSuppressed',0,3,25,118,30
	.word	296
	.byte	1,1
.L212:
	.byte	4
	.byte	'dtcId',0,25,118,65
	.word	214
.L214:
	.byte	8,5,0,0,3
	.byte	'Dem_DtcIsSuppressedDirectly',0,3,25,128,1,30
	.word	296
	.byte	1,1,4
	.byte	'dtcId',0,25,128,1,73
	.word	214
	.byte	5,0
.L199:
	.byte	3
	.byte	'Dem_DtcIsSupported',0,3,25,138,1,30
	.word	296
	.byte	1,1
.L202:
	.byte	4
	.byte	'dtcID',0,25,138,1,64
	.word	214
.L204:
	.byte	8,5,5,0,0,3
	.byte	'Dem_EventUsesOrigin',0,3,25,137,2,30
	.word	296
	.byte	1,1,4
	.byte	'eventId',0,25,137,2,67
	.word	214
	.byte	4
	.byte	'origin',0,25,137,2,94
	.word	296
	.byte	8,5,5,5,0,0,3
	.byte	'Dem_EvtGetIsoByte',0,3,26,42,34
	.word	296
	.byte	1,1,4
	.byte	'EventId',0,26,42,69
	.word	214
	.byte	5,0,3
	.byte	'Dem_EvMemGenGetDtcIdByOccIndex',0,3,27,31,26
	.word	214
	.byte	1,1,4
	.byte	'OccIndex',0,27,31,64
	.word	140
	.byte	5,0,7
	.byte	'Dem_EvMemGenSetDtcByOccIndex',0,3,27,42,17,1,1,4
	.byte	'DtcId',0,27,42,60
	.word	214
	.byte	4
	.byte	'OccIndex',0,27,42,73
	.word	140
	.byte	5,0,7
	.byte	'Dem_EvMemGenReportEvent',0,3,27,79,17,1,1,4
	.byte	'EventId',0,27,79,57
	.word	214
	.byte	4
	.byte	'FirstOccIndex',0,27,79,73
	.word	140
	.byte	4
	.byte	'RecntOccIndex',0,27,79,95
	.word	140
	.byte	8,5,5,5,5,5,5,5,5,5,0,0
.L386:
	.byte	7
	.byte	'Dem_EvMemGenClearDtcByOccurrenceTime',0,3,27,137,1,17,1,1
.L388:
	.byte	4
	.byte	'DtcOrigin',0,27,137,1,72
	.word	296
.L390:
	.byte	8,5,5,0,0,7
	.byte	'Dem_EvMemGenSetOverflow',0,3,27,174,1,17,1,1,4
	.byte	'DtcOrigin',0,27,174,1,59
	.word	296
	.byte	5,0,3
	.byte	'Dem_EvMemGenIsOverflow',0,3,27,184,1,20
	.word	296
	.byte	1,1,4
	.byte	'DtcOrigin',0,27,184,1,61
	.word	296
	.byte	5,0
.L406:
	.byte	7
	.byte	'Dem_EvMemGenClearOverflow',0,3,27,205,1,17,1,1
.L408:
	.byte	4
	.byte	'DtcOrigin',0,27,205,1,61
	.word	296
.L410:
	.byte	8,5,0,0,16
	.byte	'Det_ReportError',0,28,112,16
	.word	296
	.byte	1,1,1,1,4
	.byte	'ModuleId',0,28,112,39
	.word	214
	.byte	4
	.byte	'InstanceId',0,28,112,55
	.word	296
	.byte	4
	.byte	'ApiId',0,28,112,73
	.word	296
	.byte	4
	.byte	'ErrorId',0,28,112,86
	.word	296
	.byte	0,17
	.byte	'void',0,6
	.word	10200
	.byte	16
	.byte	'rba_BswSrv_MemSet',0,1,84,14
	.word	10206
	.byte	1,1,1,1,4
	.byte	'xDest_pv',0,1,84,38
	.word	10206
	.byte	4
	.byte	'xPattern_u32',0,1,84,55
	.word	318
	.byte	4
	.byte	'numBytes_u32',0,1,84,76
	.word	140
	.byte	0,18
	.word	156
	.byte	19
	.word	194
	.byte	5,0,18
	.word	236
	.byte	19
	.word	275
	.byte	5,0,18
	.word	325
	.byte	19
	.word	360
	.byte	19
	.word	377
	.byte	19
	.word	398
	.byte	5,0,18
	.word	421
	.byte	19
	.word	451
	.byte	5,0,18
	.word	471
	.byte	19
	.word	502
	.byte	5,0,18
	.word	522
	.byte	19
	.word	551
	.byte	5,0,18
	.word	565
	.byte	19
	.word	598
	.byte	5,0,18
	.word	612
	.byte	19
	.word	644
	.byte	5,0,18
	.word	661
	.byte	19
	.word	698
	.byte	8,20
	.word	612
	.byte	19
	.word	644
	.byte	21
	.word	659
	.byte	0,5,0,0,18
	.word	717
	.byte	19
	.word	751
	.byte	5,0,18
	.word	820
	.byte	19
	.word	864
	.byte	19
	.word	876
	.byte	8,20
	.word	522
	.byte	19
	.word	551
	.byte	21
	.word	563
	.byte	0,5,0,0,18
	.word	905
	.byte	19
	.word	948
	.byte	5,0,18
	.word	962
	.byte	19
	.word	998
	.byte	5,0,18
	.word	1012
	.byte	19
	.word	1055
	.byte	5,0,12
	.word	296
	.byte	12
	.word	214
	.byte	12
	.word	214
	.byte	10,29,16,9,16,11
	.byte	'DTC',0
	.word	140
	.byte	4,2,35,0,11
	.byte	'DTCFormat',0
	.word	296
	.byte	1,2,35,4,11
	.byte	'DTCOrigin',0
	.word	296
	.byte	1,2,35,5,11
	.byte	'client_state',0
	.word	10520
	.byte	1,2,35,6,11
	.byte	'request',0
	.word	10525
	.byte	2,2,35,8,11
	.byte	'result',0
	.word	10530
	.byte	2,2,35,10,11
	.byte	'selection',0
	.word	140
	.byte	4,2,35,12,0,6
	.word	10535
	.byte	16
	.byte	'Dem_Client_getClient',0,29,61,17
	.word	10666
	.byte	1,1,1,1,4
	.byte	'ClientId',0,29,61,56
	.word	296
	.byte	0,16
	.byte	'Dem_SelectDTC',0,29,62,16
	.word	296
	.byte	1,1,1,1,4
	.byte	'ClientId',0,29,62,36
	.word	296
	.byte	4
	.byte	'DTC',0,29,62,53
	.word	140
	.byte	4
	.byte	'DTCFormat',0,29,62,76
	.word	296
	.byte	4
	.byte	'DTCOrigin',0,29,62,105
	.word	296
	.byte	0,16
	.byte	'Dem_ClearDTC_4_3',0,29,63,16
	.word	296
	.byte	1,1,1,1,4
	.byte	'ClientId',0,29,63,39
	.word	296
	.byte	0,18
	.word	1079
	.byte	19
	.word	1117
	.byte	19
	.word	1132
	.byte	19
	.word	1148
	.byte	5,0,18
	.word	1169
	.byte	19
	.word	1211
	.byte	19
	.word	1226
	.byte	5,0,18
	.word	1254
	.byte	19
	.word	1294
	.byte	19
	.word	1310
	.byte	5,0,18
	.word	1331
	.byte	19
	.word	1382
	.byte	5,0,18
	.word	1400
	.byte	19
	.word	1458
	.byte	5,0,18
	.word	1483
	.byte	19
	.word	1541
	.byte	5,0,18
	.word	1562
	.byte	19
	.word	1617
	.byte	5,0,18
	.word	1638
	.byte	19
	.word	1672
	.byte	5,0,18
	.word	1687
	.byte	19
	.word	1717
	.byte	19
	.word	1732
	.byte	5,0,18
	.word	1755
	.byte	19
	.word	1787
	.byte	19
	.word	1802
	.byte	5,0,18
	.word	1825
	.byte	19
	.word	1861
	.byte	19
	.word	1876
	.byte	19
	.word	1897
	.byte	8,20
	.word	1687
	.byte	19
	.word	1717
	.byte	19
	.word	1732
	.byte	21
	.word	1753
	.byte	0,5,20
	.word	1755
	.byte	19
	.word	1787
	.byte	19
	.word	1802
	.byte	21
	.word	1823
	.byte	0,5,0,0,18
	.word	1926
	.byte	19
	.word	1966
	.byte	19
	.word	1980
	.byte	5,0,18
	.word	2003
	.byte	19
	.word	2039
	.byte	19
	.word	2053
	.byte	8,20
	.word	1926
	.byte	19
	.word	1966
	.byte	19
	.word	1980
	.byte	21
	.word	2001
	.byte	0,5,0,0,18
	.word	2078
	.byte	19
	.word	2113
	.byte	19
	.word	2127
	.byte	19
	.word	2148
	.byte	5,0,18
	.word	2173
	.byte	19
	.word	2206
	.byte	19
	.word	2220
	.byte	19
	.word	2241
	.byte	5,0,18
	.word	2266
	.byte	19
	.word	2303
	.byte	19
	.word	2317
	.byte	19
	.word	2338
	.byte	19
	.word	2361
	.byte	8,20
	.word	2173
	.byte	19
	.word	2206
	.byte	19
	.word	2220
	.byte	19
	.word	2241
	.byte	21
	.word	2264
	.byte	0,5,0,0,18
	.word	2387
	.byte	19
	.word	2418
	.byte	19
	.word	2433
	.byte	5,0,18
	.word	2456
	.byte	19
	.word	2489
	.byte	19
	.word	2504
	.byte	5,0,18
	.word	2527
	.byte	19
	.word	2568
	.byte	19
	.word	2582
	.byte	5,0,18
	.word	2605
	.byte	19
	.word	2642
	.byte	19
	.word	2656
	.byte	8,20
	.word	2527
	.byte	19
	.word	2568
	.byte	19
	.word	2582
	.byte	21
	.word	2603
	.byte	0,5,0,0,18
	.word	2681
	.byte	19
	.word	2717
	.byte	19
	.word	2731
	.byte	19
	.word	2752
	.byte	5,0,18
	.word	2777
	.byte	19
	.word	2811
	.byte	19
	.word	2825
	.byte	19
	.word	2846
	.byte	5,0,18
	.word	2876
	.byte	19
	.word	2907
	.byte	19
	.word	2922
	.byte	5,0,18
	.word	2945
	.byte	19
	.word	2978
	.byte	19
	.word	2993
	.byte	5,0,18
	.word	3016
	.byte	19
	.word	3057
	.byte	19
	.word	3071
	.byte	5,0,18
	.word	3094
	.byte	19
	.word	3131
	.byte	19
	.word	3145
	.byte	8,20
	.word	3016
	.byte	19
	.word	3057
	.byte	19
	.word	3071
	.byte	21
	.word	3092
	.byte	0,5,0,0,18
	.word	3170
	.byte	19
	.word	3204
	.byte	19
	.word	3218
	.byte	19
	.word	3239
	.byte	5,0,18
	.word	3264
	.byte	19
	.word	3296
	.byte	5,0,18
	.word	3309
	.byte	19
	.word	3337
	.byte	8,20
	.word	3264
	.byte	19
	.word	3296
	.byte	21
	.word	3307
	.byte	0,5,0,0,18
	.word	3352
	.byte	19
	.word	3387
	.byte	5,0,18
	.word	3400
	.byte	19
	.word	3432
	.byte	5,0,18
	.word	3445
	.byte	19
	.word	3482
	.byte	5,0,22
	.byte	'Dem_NvMIsClearPending',0,10,127,9
	.word	296
	.byte	1,1,1,1,18
	.word	3495
	.byte	5,0,18
	.word	3523
	.byte	5,0,18
	.word	3558
	.byte	5,0,18
	.word	3613
	.byte	19
	.word	3666
	.byte	5,0,18
	.word	3685
	.byte	19
	.word	3738
	.byte	5,0,18
	.word	3757
	.byte	5,0,18
	.word	3816
	.byte	19
	.word	3862
	.byte	5,0,18
	.word	3878
	.byte	5,0,18
	.word	3930
	.byte	19
	.word	3995
	.byte	8,20
	.word	421
	.byte	19
	.word	451
	.byte	21
	.word	469
	.byte	0,5,20
	.word	421
	.byte	19
	.word	451
	.byte	21
	.word	469
	.byte	0,5,20
	.word	1562
	.byte	19
	.word	1617
	.byte	21
	.word	1636
	.byte	0,5,20
	.word	1079
	.byte	19
	.word	1117
	.byte	19
	.word	1132
	.byte	19
	.word	1148
	.byte	21
	.word	1167
	.byte	0,5,0,0,18
	.word	4019
	.byte	19
	.word	4066
	.byte	19
	.word	4083
	.byte	8,20
	.word	3495
	.byte	21
	.word	3521
	.byte	0,5,20
	.word	3613
	.byte	19
	.word	3666
	.byte	21
	.word	3683
	.byte	0,5,20
	.word	3613
	.byte	19
	.word	3666
	.byte	21
	.word	3683
	.byte	0,5,20
	.word	3816
	.byte	19
	.word	3862
	.byte	21
	.word	3876
	.byte	0,5,20
	.word	3816
	.byte	19
	.word	3862
	.byte	21
	.word	3876
	.byte	0,5,20
	.word	3816
	.byte	19
	.word	3862
	.byte	21
	.word	3876
	.byte	0,5,20
	.word	1483
	.byte	19
	.word	1541
	.byte	21
	.word	1560
	.byte	0,5,20
	.word	3930
	.byte	19
	.word	3995
	.byte	23
	.word	4012
	.byte	20
	.word	421
	.byte	19
	.word	451
	.byte	21
	.word	469
	.byte	0,21
	.word	4013
	.byte	20
	.word	421
	.byte	19
	.word	451
	.byte	21
	.word	469
	.byte	0,21
	.word	4014
	.byte	20
	.word	1562
	.byte	19
	.word	1617
	.byte	21
	.word	1636
	.byte	0,21
	.word	4015
	.byte	20
	.word	1079
	.byte	19
	.word	1117
	.byte	19
	.word	1132
	.byte	19
	.word	1148
	.byte	21
	.word	1167
	.byte	0,21
	.word	4016
	.byte	0,0,5,0,0,18
	.word	4108
	.byte	19
	.word	4134
	.byte	19
	.word	4149
	.byte	5,0,18
	.word	4172
	.byte	19
	.word	4200
	.byte	19
	.word	4215
	.byte	5,0,18
	.word	4238
	.byte	19
	.word	4270
	.byte	19
	.word	4285
	.byte	19
	.word	4306
	.byte	8,20
	.word	4108
	.byte	19
	.word	4134
	.byte	19
	.word	4149
	.byte	21
	.word	4170
	.byte	0,5,20
	.word	4172
	.byte	19
	.word	4200
	.byte	19
	.word	4215
	.byte	21
	.word	4236
	.byte	0,5,0,0,18
	.word	4345
	.byte	19
	.word	4377
	.byte	19
	.word	4392
	.byte	5,0,18
	.word	4415
	.byte	19
	.word	4455
	.byte	8,20
	.word	2003
	.byte	19
	.word	2039
	.byte	19
	.word	2053
	.byte	23
	.word	2074
	.byte	20
	.word	1926
	.byte	19
	.word	1966
	.byte	19
	.word	1980
	.byte	21
	.word	2001
	.byte	0,21
	.word	2075
	.byte	0,0,5,0,0,18
	.word	4472
	.byte	19
	.word	4516
	.byte	8,20
	.word	2003
	.byte	19
	.word	2039
	.byte	19
	.word	2053
	.byte	23
	.word	2074
	.byte	20
	.word	1926
	.byte	19
	.word	1966
	.byte	19
	.word	1980
	.byte	21
	.word	2001
	.byte	0,21
	.word	2075
	.byte	0,0,5,0,0,18
	.word	4534
	.byte	19
	.word	4580
	.byte	8,20
	.word	2003
	.byte	19
	.word	2039
	.byte	19
	.word	2053
	.byte	23
	.word	2074
	.byte	20
	.word	1926
	.byte	19
	.word	1966
	.byte	19
	.word	1980
	.byte	21
	.word	2001
	.byte	0,21
	.word	2075
	.byte	0,0,5,0,0,18
	.word	4598
	.byte	19
	.word	4639
	.byte	8,20
	.word	2003
	.byte	19
	.word	2039
	.byte	19
	.word	2053
	.byte	23
	.word	2074
	.byte	20
	.word	1926
	.byte	19
	.word	1966
	.byte	19
	.word	1980
	.byte	21
	.word	2001
	.byte	0,21
	.word	2075
	.byte	0,0,5,0,0,18
	.word	4657
	.byte	19
	.word	4713
	.byte	8,20
	.word	2003
	.byte	19
	.word	2039
	.byte	19
	.word	2053
	.byte	23
	.word	2074
	.byte	20
	.word	1926
	.byte	19
	.word	1966
	.byte	19
	.word	1980
	.byte	21
	.word	2001
	.byte	0,21
	.word	2075
	.byte	0,0,5,0,0,18
	.word	4731
	.byte	19
	.word	4769
	.byte	19
	.word	4783
	.byte	8,20
	.word	1825
	.byte	19
	.word	1861
	.byte	19
	.word	1876
	.byte	19
	.word	1897
	.byte	23
	.word	1921
	.byte	20
	.word	1687
	.byte	19
	.word	1717
	.byte	19
	.word	1732
	.byte	21
	.word	1753
	.byte	0,21
	.word	1922
	.byte	20
	.word	1755
	.byte	19
	.word	1787
	.byte	19
	.word	1802
	.byte	21
	.word	1823
	.byte	0,21
	.word	1923
	.byte	0,0,5,0,0,18
	.word	4807
	.byte	19
	.word	4848
	.byte	19
	.word	4862
	.byte	8,20
	.word	1825
	.byte	19
	.word	1861
	.byte	19
	.word	1876
	.byte	19
	.word	1897
	.byte	23
	.word	1921
	.byte	20
	.word	1687
	.byte	19
	.word	1717
	.byte	19
	.word	1732
	.byte	21
	.word	1753
	.byte	0,21
	.word	1922
	.byte	20
	.word	1755
	.byte	19
	.word	1787
	.byte	19
	.word	1802
	.byte	21
	.word	1823
	.byte	0,21
	.word	1923
	.byte	0,0,5,0,0,18
	.word	4886
	.byte	19
	.word	4927
	.byte	19
	.word	4941
	.byte	8,20
	.word	1825
	.byte	19
	.word	1861
	.byte	19
	.word	1876
	.byte	19
	.word	1897
	.byte	23
	.word	1921
	.byte	20
	.word	1687
	.byte	19
	.word	1717
	.byte	19
	.word	1732
	.byte	21
	.word	1753
	.byte	0,21
	.word	1922
	.byte	20
	.word	1755
	.byte	19
	.word	1787
	.byte	19
	.word	1802
	.byte	21
	.word	1823
	.byte	0,21
	.word	1923
	.byte	0,0,5,0,0,18
	.word	4965
	.byte	19
	.word	5008
	.byte	19
	.word	5022
	.byte	8,20
	.word	1825
	.byte	19
	.word	1861
	.byte	19
	.word	1876
	.byte	19
	.word	1897
	.byte	23
	.word	1921
	.byte	20
	.word	1687
	.byte	19
	.word	1717
	.byte	19
	.word	1732
	.byte	21
	.word	1753
	.byte	0,21
	.word	1922
	.byte	20
	.word	1755
	.byte	19
	.word	1787
	.byte	19
	.word	1802
	.byte	21
	.word	1823
	.byte	0,21
	.word	1923
	.byte	0,0,5,0,0,18
	.word	5046
	.byte	19
	.word	5089
	.byte	19
	.word	5103
	.byte	8,20
	.word	1825
	.byte	19
	.word	1861
	.byte	19
	.word	1876
	.byte	19
	.word	1897
	.byte	23
	.word	1921
	.byte	20
	.word	1687
	.byte	19
	.word	1717
	.byte	19
	.word	1732
	.byte	21
	.word	1753
	.byte	0,21
	.word	1922
	.byte	20
	.word	1755
	.byte	19
	.word	1787
	.byte	19
	.word	1802
	.byte	21
	.word	1823
	.byte	0,21
	.word	1923
	.byte	0,0,5,0,0,18
	.word	5127
	.byte	19
	.word	5165
	.byte	19
	.word	5179
	.byte	8,20
	.word	1825
	.byte	19
	.word	1861
	.byte	19
	.word	1876
	.byte	19
	.word	1897
	.byte	23
	.word	1921
	.byte	20
	.word	1687
	.byte	19
	.word	1717
	.byte	19
	.word	1732
	.byte	21
	.word	1753
	.byte	0,21
	.word	1922
	.byte	20
	.word	1755
	.byte	19
	.word	1787
	.byte	19
	.word	1802
	.byte	21
	.word	1823
	.byte	0,21
	.word	1923
	.byte	0,0,5,0,0,18
	.word	5203
	.byte	19
	.word	5243
	.byte	19
	.word	5257
	.byte	8,20
	.word	1825
	.byte	19
	.word	1861
	.byte	19
	.word	1876
	.byte	19
	.word	1897
	.byte	23
	.word	1921
	.byte	20
	.word	1687
	.byte	19
	.word	1717
	.byte	19
	.word	1732
	.byte	21
	.word	1753
	.byte	0,21
	.word	1922
	.byte	20
	.word	1755
	.byte	19
	.word	1787
	.byte	19
	.word	1802
	.byte	21
	.word	1823
	.byte	0,21
	.word	1923
	.byte	0,0,5,0,0,18
	.word	5281
	.byte	19
	.word	5334
	.byte	19
	.word	5348
	.byte	8,20
	.word	1825
	.byte	19
	.word	1861
	.byte	19
	.word	1876
	.byte	19
	.word	1897
	.byte	23
	.word	1921
	.byte	20
	.word	1687
	.byte	19
	.word	1717
	.byte	19
	.word	1732
	.byte	21
	.word	1753
	.byte	0,21
	.word	1922
	.byte	20
	.word	1755
	.byte	19
	.word	1787
	.byte	19
	.word	1802
	.byte	21
	.word	1823
	.byte	0,21
	.word	1923
	.byte	0,0,5,0,0,18
	.word	5372
	.byte	19
	.word	5407
	.byte	5,0,18
	.word	5437
	.byte	19
	.word	5490
	.byte	8,20
	.word	236
	.byte	19
	.word	275
	.byte	21
	.word	294
	.byte	0,5,0,0,18
	.word	5506
	.byte	19
	.word	5559
	.byte	8,20
	.word	156
	.byte	19
	.word	194
	.byte	21
	.word	212
	.byte	0,5,0,0,18
	.word	5575
	.byte	19
	.word	5626
	.byte	5,0,18
	.word	5641
	.byte	19
	.word	5691
	.byte	8,20
	.word	2605
	.byte	19
	.word	2642
	.byte	19
	.word	2656
	.byte	23
	.word	2677
	.byte	20
	.word	2527
	.byte	19
	.word	2568
	.byte	19
	.word	2582
	.byte	21
	.word	2603
	.byte	0,21
	.word	2678
	.byte	0,0,5,0,0,18
	.word	5708
	.byte	19
	.word	5760
	.byte	5,0,18
	.word	5775
	.byte	19
	.word	5824
	.byte	5,0,18
	.word	5839
	.byte	19
	.word	5879
	.byte	8,20
	.word	2605
	.byte	19
	.word	2642
	.byte	19
	.word	2656
	.byte	23
	.word	2677
	.byte	20
	.word	2527
	.byte	19
	.word	2568
	.byte	19
	.word	2582
	.byte	21
	.word	2603
	.byte	0,21
	.word	2678
	.byte	0,0,5,0,0,18
	.word	5896
	.byte	19
	.word	5940
	.byte	5,0,18
	.word	5955
	.byte	19
	.word	5996
	.byte	5,0,18
	.word	6012
	.byte	19
	.word	6055
	.byte	5,0,18
	.word	6071
	.byte	19
	.word	6119
	.byte	5,0,18
	.word	6135
	.byte	19
	.word	6189
	.byte	8,20
	.word	2681
	.byte	19
	.word	2717
	.byte	19
	.word	2731
	.byte	19
	.word	2752
	.byte	21
	.word	2775
	.byte	0,5,0,0,18
	.word	6207
	.byte	19
	.word	6250
	.byte	5,0,18
	.word	6266
	.byte	19
	.word	6311
	.byte	5,0,18
	.word	6340
	.byte	19
	.word	6376
	.byte	5,0,18
	.word	6395
	.byte	19
	.word	6435
	.byte	5,0,18
	.word	6454
	.byte	5,0,18
	.word	6507
	.byte	19
	.word	6543
	.byte	8,20
	.word	2876
	.byte	19
	.word	2907
	.byte	19
	.word	2922
	.byte	21
	.word	2943
	.byte	0,5,0,0,18
	.word	6563
	.byte	19
	.word	6595
	.byte	8,20
	.word	2003
	.byte	19
	.word	2039
	.byte	19
	.word	2053
	.byte	23
	.word	2074
	.byte	20
	.word	1926
	.byte	19
	.word	1966
	.byte	19
	.word	1980
	.byte	21
	.word	2001
	.byte	0,21
	.word	2075
	.byte	0,0,5,0,0,18
	.word	6621
	.byte	19
	.word	6646
	.byte	19
	.word	6662
	.byte	5,0,18
	.word	6684
	.byte	19
	.word	6718
	.byte	5,0,18
	.word	6762
	.byte	19
	.word	6814
	.byte	19
	.word	6830
	.byte	5,0,10,4,213,2,9,4,11
	.byte	'it',0
	.word	214
	.byte	2,2,35,0,11
	.byte	'end',0
	.word	214
	.byte	2,2,35,2,0,10,11,20,9,24,11
	.byte	'activeClient',0
	.word	296
	.byte	1,2,35,0,11
	.byte	'machine_state',0
	.word	296
	.byte	1,2,35,1,11
	.byte	'IsNewClearRequest',0
	.word	296
	.byte	1,2,35,2,11
	.byte	'IsClearInterrupted',0
	.word	296
	.byte	1,2,35,3,11
	.byte	'NumberOfEventsProcessed',0
	.word	214
	.byte	2,2,35,4,11
	.byte	'DtcIt',0
	.word	13730
	.byte	4,2,35,6,11
	.byte	'EvtIt',0
	.word	6741
	.byte	4,2,35,12,11
	.byte	'EvtListIt',0
	.word	783
	.byte	8,2,35,16,0,6
	.word	13762
	.byte	24
	.byte	'Dem_ClearAllDTCs',0,30,18,6,1,1,1,1,4
	.byte	'DTCOrigin',0,30,18,41
	.word	296
	.byte	4
	.byte	'Dem_ClientClearMachinePtr',0,30,18,80
	.word	13950
	.byte	0,18
	.word	6850
	.byte	19
	.word	6883
	.byte	5,0,18
	.word	6899
	.byte	19
	.word	6940
	.byte	5,0,18
	.word	7204
	.byte	19
	.word	7248
	.byte	5,0,18
	.word	7271
	.byte	19
	.word	7310
	.byte	8,20
	.word	7204
	.byte	19
	.word	7248
	.byte	21
	.word	7269
	.byte	0,5,0,0,18
	.word	7329
	.byte	19
	.word	7374
	.byte	5,0,18
	.word	7397
	.byte	19
	.word	7441
	.byte	5,0,18
	.word	7464
	.byte	19
	.word	7511
	.byte	5,0,18
	.word	7534
	.byte	19
	.word	7586
	.byte	5,0,18
	.word	7609
	.byte	19
	.word	7664
	.byte	5,0,18
	.word	7687
	.byte	19
	.word	7737
	.byte	5,0,18
	.word	7760
	.byte	19
	.word	7805
	.byte	8,20
	.word	7687
	.byte	19
	.word	7737
	.byte	21
	.word	7758
	.byte	0,5,0,0,18
	.word	7824
	.byte	19
	.word	7865
	.byte	19
	.word	7880
	.byte	5,0,18
	.word	7904
	.byte	19
	.word	7962
	.byte	5,0,18
	.word	7993
	.byte	19
	.word	8047
	.byte	5,0,18
	.word	8070
	.byte	19
	.word	8120
	.byte	5,0,18
	.word	8143
	.byte	19
	.word	8199
	.byte	5,0,18
	.word	8222
	.byte	19
	.word	8267
	.byte	5,0,18
	.word	8295
	.byte	19
	.word	8337
	.byte	5,0,18
	.word	8360
	.byte	19
	.word	8390
	.byte	5,0,18
	.word	8408
	.byte	19
	.word	8437
	.byte	5,0,18
	.word	8455
	.byte	5,0,18
	.word	8489
	.byte	5,0,18
	.word	8532
	.byte	19
	.word	8575
	.byte	5,0,18
	.word	8592
	.byte	19
	.word	8633
	.byte	5,0,18
	.word	8655
	.byte	19
	.word	8695
	.byte	5,0,18
	.word	8722
	.byte	19
	.word	8770
	.byte	5,0,18
	.word	8787
	.byte	19
	.word	8828
	.byte	5,0,18
	.word	8845
	.byte	19
	.word	8880
	.byte	19
	.word	8899
	.byte	19
	.word	8918
	.byte	5,0,18
	.word	8937
	.byte	19
	.word	8972
	.byte	8,20
	.word	5575
	.byte	19
	.word	5626
	.byte	21
	.word	5639
	.byte	0,5,0,0,18
	.word	8998
	.byte	19
	.word	9035
	.byte	5,0,18
	.word	9055
	.byte	19
	.word	9106
	.byte	5,0,18
	.word	9124
	.byte	19
	.word	9151
	.byte	19
	.word	9167
	.byte	19
	.word	9181
	.byte	5,0,18
	.word	9201
	.byte	19
	.word	9243
	.byte	5,0,18
	.word	9264
	.byte	19
	.word	9302
	.byte	8,20
	.word	5641
	.byte	19
	.word	5691
	.byte	23
	.word	5704
	.byte	20
	.word	2605
	.byte	19
	.word	2642
	.byte	19
	.word	2656
	.byte	23
	.word	2677
	.byte	20
	.word	2527
	.byte	19
	.word	2568
	.byte	19
	.word	2582
	.byte	21
	.word	2603
	.byte	0,21
	.word	2678
	.byte	0,0,21
	.word	5705
	.byte	0,0,5,0,0,18
	.word	9323
	.byte	5,0,18
	.word	9362
	.byte	19
	.word	9393
	.byte	8,20
	.word	2003
	.byte	19
	.word	2039
	.byte	19
	.word	2053
	.byte	23
	.word	2074
	.byte	20
	.word	1926
	.byte	19
	.word	1966
	.byte	19
	.word	1980
	.byte	21
	.word	2001
	.byte	0,21
	.word	2075
	.byte	0,0,5,0,0,18
	.word	9411
	.byte	19
	.word	9451
	.byte	5,0,18
	.word	9468
	.byte	19
	.word	9499
	.byte	8,20
	.word	9362
	.byte	19
	.word	9393
	.byte	23
	.word	9407
	.byte	20
	.word	2003
	.byte	19
	.word	2039
	.byte	19
	.word	2053
	.byte	23
	.word	2074
	.byte	20
	.word	1926
	.byte	19
	.word	1966
	.byte	19
	.word	1980
	.byte	21
	.word	2001
	.byte	0,21
	.word	2075
	.byte	0,0,21
	.word	9408
	.byte	0,0,5,20
	.word	522
	.byte	19
	.word	551
	.byte	21
	.word	563
	.byte	0,5,0,0,16
	.byte	'Dem_DtcIdFromDtcCode',0,25,128,2,15
	.word	214
	.byte	1,1,1,1,4
	.byte	'dtcCode',0,25,128,2,53
	.word	140
	.byte	0,18
	.word	9519
	.byte	19
	.word	9551
	.byte	19
	.word	9568
	.byte	8,20
	.word	5708
	.byte	19
	.word	5760
	.byte	21
	.word	5773
	.byte	0,5,20
	.word	5775
	.byte	19
	.word	5824
	.byte	21
	.word	5837
	.byte	0,5,20
	.word	5641
	.byte	19
	.word	5691
	.byte	23
	.word	5704
	.byte	20
	.word	2605
	.byte	19
	.word	2642
	.byte	19
	.word	2656
	.byte	23
	.word	2677
	.byte	20
	.word	2527
	.byte	19
	.word	2568
	.byte	19
	.word	2582
	.byte	21
	.word	2603
	.byte	0,21
	.word	2678
	.byte	0,0,21
	.word	5705
	.byte	0,0,5,0,0,16
	.byte	'Dem_DtcGroupIdFromDtcGroupCode',0,31,45,20
	.word	296
	.byte	1,1,1,1,4
	.byte	'dtcGrpCode',0,31,45,69
	.word	140
	.byte	0,18
	.word	9590
	.byte	19
	.word	9619
	.byte	5,0,18
	.word	9637
	.byte	19
	.word	9679
	.byte	5,0,18
	.word	9698
	.byte	19
	.word	9734
	.byte	19
	.word	9748
	.byte	5,0,18
	.word	9767
	.byte	19
	.word	9798
	.byte	19
	.word	9814
	.byte	19
	.word	9836
	.byte	8,20
	.word	565
	.byte	19
	.word	598
	.byte	21
	.word	610
	.byte	0,5,20
	.word	9637
	.byte	19
	.word	9679
	.byte	21
	.word	9696
	.byte	0,5,20
	.word	9637
	.byte	19
	.word	9679
	.byte	21
	.word	9696
	.byte	0,5,20
	.word	3352
	.byte	19
	.word	3387
	.byte	21
	.word	3398
	.byte	0,5,20
	.word	3352
	.byte	19
	.word	3387
	.byte	21
	.word	3398
	.byte	0,5,20
	.word	9698
	.byte	19
	.word	9734
	.byte	19
	.word	9748
	.byte	21
	.word	9765
	.byte	0,5,20
	.word	9698
	.byte	19
	.word	9734
	.byte	19
	.word	9748
	.byte	21
	.word	9765
	.byte	0,5,20
	.word	522
	.byte	19
	.word	551
	.byte	21
	.word	563
	.byte	0,5,20
	.word	522
	.byte	19
	.word	551
	.byte	21
	.word	563
	.byte	0,5,0,0,18
	.word	9870
	.byte	19
	.word	9915
	.byte	8,20
	.word	3400
	.byte	19
	.word	3432
	.byte	21
	.word	3443
	.byte	0,5,20
	.word	325
	.byte	19
	.word	360
	.byte	19
	.word	377
	.byte	19
	.word	398
	.byte	21
	.word	419
	.byte	0,5,0,0,18
	.word	9939
	.byte	19
	.word	9971
	.byte	5,0,18
	.word	9992
	.byte	19
	.word	10027
	.byte	5,0,18
	.word	10048
	.byte	19
	.word	10082
	.byte	8,20
	.word	3400
	.byte	19
	.word	3432
	.byte	21
	.word	3443
	.byte	0,5,0,0,25,1,6
	.word	15340
	.byte	26
	.byte	'__codeptr',0,32,1,1
	.word	15342
	.byte	26
	.byte	'sint8',0,33,76,25
	.word	7985
	.byte	26
	.byte	'uint8',0,33,81,25
	.word	296
	.byte	26
	.byte	'sint16',0,33,86,25
	.word	6327
	.byte	26
	.byte	'uint16',0,33,91,25
	.word	214
	.byte	26
	.byte	'sint32',0,33,96,24
	.word	318
	.byte	26
	.byte	'uint32',0,33,106,24
	.word	140
	.byte	2
	.byte	'unsigned long long int',0,8,7,26
	.byte	'uint64',0,33,111,30
	.word	15453
	.byte	26
	.byte	'boolean',0,33,127,25
	.word	296
	.byte	26
	.byte	'uint8_least',0,33,137,1,25
	.word	6741
	.byte	26
	.byte	'uint16_least',0,33,147,1,25
	.word	6741
	.byte	26
	.byte	'StatusType',0,34,191,1,27
	.word	296
	.byte	26
	.byte	'Std_ReturnType',0,34,199,1,15
	.word	296
	.byte	10,34,206,1,9,8,11
	.byte	'vendorID',0
	.word	214
	.byte	2,2,35,0,11
	.byte	'moduleID',0
	.word	214
	.byte	2,2,35,2,11
	.byte	'sw_major_version',0
	.word	296
	.byte	1,2,35,4,11
	.byte	'sw_minor_version',0
	.word	296
	.byte	1,2,35,5,11
	.byte	'sw_patch_version',0
	.word	296
	.byte	1,2,35,6,0,26
	.byte	'Std_VersionInfoType',0,34,213,1,3
	.word	15597
	.byte	26
	.byte	'Dem_ClientRequestType',0,35,46,16
	.word	214
	.byte	26
	.byte	'Dem_ClientResultType',0,35,47,16
	.word	214
	.byte	26
	.byte	'Dem_ClientSelectionType',0,35,48,16
	.word	140
	.byte	26
	.byte	'Dem_ClientPriorityType',0,35,50,15
	.word	296
	.byte	26
	.byte	'Dem_ComponentIdType',0,36,20,15
	.word	296
	.byte	26
	.byte	'PduIdType',0,37,22,19
	.word	214
	.byte	26
	.byte	'PduLengthType',0,37,26,19
	.word	214
	.byte	27,38,113,9,4,28
	.byte	'TP_DATACONF',0,0,28
	.byte	'TP_DATARETRY',0,1,28
	.byte	'TP_CONFPENDING',0,2,0,26
	.byte	'TpDataStateType',0,38,118,3
	.word	15937
	.byte	26
	.byte	'Can_IdType',0,39,32,16
	.word	140
	.byte	26
	.byte	'Can_HwHandleType',0,39,43,16
	.word	214
	.byte	10,40,93,9,8,11
	.byte	'Class',0
	.word	296
	.byte	1,2,35,0,11
	.byte	'TIN',0
	.word	296
	.byte	1,2,35,1,11
	.byte	'ReturnAddress',0
	.word	140
	.byte	4,2,35,4,0,26
	.byte	'OsTrapInfoType',0,40,97,3
	.word	16057
	.byte	14,68
	.word	140
	.byte	15,16,0,10,40,154,1,9,68,11
	.byte	'store',0
	.word	16137
	.byte	68,2,35,0,0,14,68
	.word	16146
	.byte	15,0,0,26
	.byte	'Os_JumpBufType',0,40,156,1,3
	.word	16168
	.byte	26
	.byte	'Os_StackTraceType',0,40,174,1,18
	.word	140
	.byte	10,40,175,1,9,8,11
	.byte	'sp',0
	.word	140
	.byte	4,2,35,0,11
	.byte	'ctx',0
	.word	140
	.byte	4,2,35,4,0,26
	.byte	'Os_StackValueType',0,40,175,1,63
	.word	16228
	.byte	26
	.byte	'Os_StackSizeType',0,40,176,1,27
	.word	16228
	.byte	29,1,1,6
	.word	16313
	.byte	26
	.byte	'Os_VoidVoidFunctionType',0,40,179,1,16
	.word	16316
	.byte	26
	.byte	'ApplicationType',0,40,193,1,23
	.word	296
	.byte	30
	.byte	'Os_ApplicationConfigurationType_s',0,40,198,1,16,2,11
	.byte	'app_id',0
	.word	296
	.byte	1,2,35,0,11
	.byte	'access',0
	.word	296
	.byte	1,2,35,1,0,26
	.byte	'Os_ApplicationConfigurationType',0,40,201,1,3
	.word	16379
	.byte	26
	.byte	'Os_CoreStateType',0,40,203,1,16
	.word	140
	.byte	26
	.byte	'AreaIdType',0,40,204,1,16
	.word	214
	.byte	26
	.byte	'Os_PeripheralAddressType',0,40,212,1,22
	.word	140
	.byte	26
	.byte	'TickType',0,40,221,1,22
	.word	140
	.byte	26
	.byte	'Os_StopwatchTickType',0,40,225,1,22
	.word	140
	.byte	26
	.byte	'Os_Lockable',0,40,234,1,18
	.word	2871
	.byte	26
	.byte	'CoreIdType',0,40,236,1,16
	.word	214
	.byte	26
	.byte	'SpinlockIdType',0,40,237,1,16
	.word	214
	.byte	27,40,239,1,9,4,28
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,28
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,26
	.byte	'TryToGetSpinlockType',0,40,239,1,74
	.word	16686
	.byte	27,40,174,2,9,4,28
	.byte	'APPLICATION_ACCESSIBLE',0,0,28
	.byte	'APPLICATION_RESTARTING',0,1,28
	.byte	'APPLICATION_TERMINATED',0,2,0,26
	.byte	'ApplicationStateType',0,40,174,2,92
	.word	16779
	.byte	31,1,1,32
	.word	296
	.byte	32
	.word	10206
	.byte	0,6
	.word	16891
	.byte	26
	.byte	'Os_FunctionEntryType',0,40,183,2,16
	.word	16905
	.byte	30
	.byte	'Os_MeterInfoType_s',0,40,193,2,16,48,11
	.byte	'elapsed',0
	.word	140
	.byte	4,2,35,0,11
	.byte	'previous',0
	.word	140
	.byte	4,2,35,4,11
	.byte	'max',0
	.word	140
	.byte	4,2,35,8,11
	.byte	'cumulative',0
	.word	140
	.byte	4,2,35,12,11
	.byte	'stackbase',0
	.word	16228
	.byte	8,2,35,16,11
	.byte	'stackusage',0
	.word	16228
	.byte	8,2,35,24,11
	.byte	'stackmax',0
	.word	16228
	.byte	8,2,35,32,11
	.byte	'stackbudget',0
	.word	16228
	.byte	8,2,35,40,0,26
	.byte	'Os_MeterInfoType',0,40,202,2,3
	.word	16940
	.byte	6
	.word	16940
	.byte	26
	.byte	'Os_MeterInfoRefType',0,40,203,2,50
	.word	17138
	.byte	26
	.byte	'EventMaskType',0,40,206,2,15
	.word	296
	.byte	26
	.byte	'Os_imaskType',0,40,211,2,16
	.word	140
	.byte	30
	.byte	'Os_ISRDynType_s',0,40,213,2,16,48,11
	.byte	'meter',0
	.word	16940
	.byte	48,2,35,0,0,26
	.byte	'Os_ISRDynType',0,40,215,2,3
	.word	17217
	.byte	6
	.word	17217
	.byte	9
	.word	17278
	.byte	30
	.byte	'Os_ISRType_s',0,40,216,2,16,24,11
	.byte	'entry_function',0
	.word	16321
	.byte	4,2,35,0,11
	.byte	'dynamic',0
	.word	17283
	.byte	4,2,35,4,11
	.byte	'imask',0
	.word	140
	.byte	4,2,35,8,11
	.byte	'stackbudget',0
	.word	16228
	.byte	8,2,35,12,11
	.byte	'access',0
	.word	296
	.byte	1,2,35,20,11
	.byte	'application',0
	.word	296
	.byte	1,2,35,21,0,26
	.byte	'Os_ISRType',0,40,223,2,3
	.word	17288
	.byte	6
	.word	16313
	.byte	9
	.word	17288
	.byte	6
	.word	17447
	.byte	26
	.byte	'ISRType',0,40,224,2,46
	.word	17452
	.byte	26
	.byte	'Os_bitmask',0,40,239,2,22
	.word	140
	.byte	26
	.byte	'Os_pset0Type',0,40,240,2,20
	.word	140
	.byte	26
	.byte	'Os_pset1Type',0,40,241,2,20
	.word	140
	.byte	26
	.byte	'Os_pset2Type',0,40,242,2,20
	.word	140
	.byte	13,40,243,2,9,4,11
	.byte	'p0',0
	.word	140
	.byte	4,2,35,0,11
	.byte	'p1',0
	.word	140
	.byte	4,2,35,0,11
	.byte	'p2',0
	.word	140
	.byte	4,2,35,0,0,26
	.byte	'Os_psetType',0,40,247,2,3
	.word	17560
	.byte	13,40,249,2,9,4,11
	.byte	't0',0
	.word	140
	.byte	4,2,35,0,11
	.byte	't1',0
	.word	140
	.byte	4,2,35,0,11
	.byte	't2',0
	.word	140
	.byte	4,2,35,0,0,26
	.byte	'Os_tpmaskType',0,40,253,2,3
	.word	17624
	.byte	26
	.byte	'Os_ActivationCountType',0,40,254,2,23
	.word	296
	.byte	30
	.byte	'Os_TaskDynType_s',0,40,128,3,16,120,11
	.byte	'terminate_jump_buf',0
	.word	16177
	.byte	68,2,35,0,11
	.byte	'meter',0
	.word	16940
	.byte	48,2,35,68,11
	.byte	'activation_count',0
	.word	296
	.byte	1,2,35,116,0,26
	.byte	'Os_TaskDynType',0,40,132,3,3
	.word	17722
	.byte	14,68
	.word	16146
	.byte	15,0,0,6
	.word	17722
	.byte	9
	.word	17848
	.byte	30
	.byte	'Os_TaskType_s',0,40,134,3,16,40,11
	.byte	'dynamic',0
	.word	17853
	.byte	4,2,35,0,11
	.byte	'entry_function',0
	.word	16321
	.byte	4,2,35,4,11
	.byte	'pset',0
	.word	17560
	.byte	4,2,35,8,11
	.byte	'base_tpmask',0
	.word	17624
	.byte	4,2,35,12,11
	.byte	'tpmask',0
	.word	17624
	.byte	4,2,35,16,11
	.byte	'core_id',0
	.word	214
	.byte	2,2,35,20,11
	.byte	'index',0
	.word	140
	.byte	4,2,35,24,11
	.byte	'stackbudget',0
	.word	16228
	.byte	8,2,35,28,11
	.byte	'activation_count',0
	.word	296
	.byte	1,2,35,36,11
	.byte	'access',0
	.word	296
	.byte	1,2,35,37,11
	.byte	'application',0
	.word	296
	.byte	1,2,35,38,0,26
	.byte	'Os_TaskType',0,40,146,3,3
	.word	17858
	.byte	9
	.word	17858
	.byte	6
	.word	18108
	.byte	26
	.byte	'TaskType',0,40,147,3,47
	.word	18113
	.byte	33
	.byte	'Os_TaskStateType',0,40,155,3,6,4,28
	.byte	'SUSPENDED',0,0,28
	.byte	'READY',0,1,28
	.byte	'WAITING',0,2,28
	.byte	'RUNNING',0,3,0,26
	.byte	'TaskStateType',0,40,156,3,31
	.word	18136
	.byte	13,40,167,3,3,4,11
	.byte	'tpmask',0
	.word	17624
	.byte	4,2,35,0,0,30
	.byte	'Os_ResourceDynType_s',0,40,166,3,16,4,11
	.byte	'saved_priority',0
	.word	18223
	.byte	4,2,35,0,0,26
	.byte	'Os_ResourceDynType',0,40,170,3,3
	.word	18246
	.byte	6
	.word	18246
	.byte	9
	.word	18326
	.byte	30
	.byte	'Os_ResourceType_s',0,40,171,3,16,12,11
	.byte	'dynamic',0
	.word	18331
	.byte	4,2,35,0,11
	.byte	'tpmask',0
	.word	17624
	.byte	4,2,35,4,11
	.byte	'access',0
	.word	296
	.byte	1,2,35,8,0,26
	.byte	'Os_ResourceType',0,40,175,3,3
	.word	18336
	.byte	10,40,181,3,9,12,11
	.byte	'maxallowedvalue',0
	.word	140
	.byte	4,2,35,0,11
	.byte	'ticksperbase',0
	.word	140
	.byte	4,2,35,4,11
	.byte	'mincycle',0
	.word	140
	.byte	4,2,35,8,0,26
	.byte	'AlarmBaseType',0,40,185,3,3
	.word	18435
	.byte	10,40,206,3,9,8,11
	.byte	'Running',0
	.word	296
	.byte	1,2,35,0,11
	.byte	'Pending',0
	.word	296
	.byte	1,2,35,1,11
	.byte	'Delay',0
	.word	140
	.byte	4,2,35,4,0,26
	.byte	'Os_CounterStatusType',0,40,210,3,3
	.word	18530
	.byte	34
	.word	296
	.byte	1,1,6
	.word	18616
	.byte	26
	.byte	'Os_CounterIncrAdvType',0,40,217,3,22
	.word	18623
	.byte	30
	.byte	's_swd',0,40,222,3,12,4,11
	.byte	'count',0
	.word	140
	.byte	4,2,35,0,0,13,40,221,3,3,4,11
	.byte	'sw',0
	.word	18659
	.byte	4,2,35,0,0,30
	.byte	'Os_CounterDynType_s',0,40,220,3,16,4,11
	.byte	'type_dependent',0
	.word	18687
	.byte	4,2,35,0,0,26
	.byte	'Os_CounterDynType',0,40,226,3,3
	.word	18706
	.byte	6
	.word	18706
	.byte	9
	.word	18784
	.byte	30
	.byte	'Os_CounterType_s',0,40,227,3,16,28,11
	.byte	'dynamic',0
	.word	18789
	.byte	4,2,35,0,11
	.byte	'advincr',0
	.word	18628
	.byte	4,2,35,4,11
	.byte	'base',0
	.word	18435
	.byte	12,2,35,8,11
	.byte	'core',0
	.word	10206
	.byte	4,2,35,20,11
	.byte	'access',0
	.word	296
	.byte	1,2,35,24,11
	.byte	'application',0
	.word	296
	.byte	1,2,35,25,0,26
	.byte	'Os_CounterType',0,40,234,3,3
	.word	18794
	.byte	6
	.word	18616
	.byte	9
	.word	18794
	.byte	6
	.word	18946
	.byte	26
	.byte	'CounterType',0,40,235,3,52
	.word	18951
	.byte	33
	.byte	'Os_ScheduleTableStatusType',0,40,240,3,6,4,28
	.byte	'SCHEDULETABLE_STOPPED',0,0,28
	.byte	'SCHEDULETABLE_NEXT',0,1,28
	.byte	'SCHEDULETABLE_WAITING',0,2,28
	.byte	'SCHEDULETABLE_RUNNING',0,3,28
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,26
	.byte	'ScheduleTableStatusType',0,40,241,3,41
	.word	18977
	.byte	9
	.word	.L481-.L130
	.byte	6
	.word	19177
	.byte	26
	.byte	'ScheduleTableType',0,40,128,4,58
	.word	19182
	.byte	30
	.byte	'Os_ScheduleTableDynType_s',0,40,130,4,16,16,11
	.byte	'match',0
	.word	140
	.byte	4,2,35,0,11
	.byte	'next',0
	.word	19187
	.byte	4,2,35,4,11
	.byte	'state',0
	.word	18977
	.byte	4,2,35,8,11
	.byte	'config',0
	.word	214
	.byte	2,2,35,12,0,6
	.word	19214
	.byte	9
	.word	19307
.L481:
	.byte	30
	.byte	'Os_ScheduleTableType_s',0,40,247,3,16,16,11
	.byte	'dynamic',0
	.word	19312
	.byte	4,2,35,0,11
	.byte	'counter',0
	.word	18956
	.byte	4,2,35,4,11
	.byte	'repeat',0
	.word	296
	.byte	1,2,35,8,11
	.byte	'config',0
	.word	214
	.byte	2,2,35,10,11
	.byte	'initial',0
	.word	296
	.byte	1,2,35,12,11
	.byte	'access',0
	.word	296
	.byte	1,2,35,13,11
	.byte	'application',0
	.word	296
	.byte	1,2,35,14,0,26
	.byte	'Os_ScheduleTableType',0,40,255,3,3
	.word	19317
	.byte	9
	.word	19317
	.byte	6
	.word	19497
	.byte	9
	.word	18794
	.byte	6
	.word	19507
	.byte	12
	.word	16621
	.byte	12
	.word	17560
	.byte	12
	.word	17457
	.byte	12
	.word	18118
	.byte	12
	.word	17624
	.byte	12
	.word	296
	.byte	12
	.word	18118
	.byte	30
	.byte	'Os_ControlledCoreType_s',0,40,251,6,16,112,11
	.byte	'TrapInfo',0
	.word	16057
	.byte	8,2,35,0,11
	.byte	'lock_taskaccess',0
	.word	19517
	.byte	4,2,35,8,11
	.byte	'ReadyTasks',0
	.word	19522
	.byte	4,2,35,12,11
	.byte	'RunningISR',0
	.word	19527
	.byte	4,2,35,16,11
	.byte	'RunningTask',0
	.word	19532
	.byte	4,2,35,20,11
	.byte	'RunningTPMask',0
	.word	19537
	.byte	4,2,35,24,11
	.byte	'CurrentMeteredObject',0
	.word	17143
	.byte	4,2,35,28,11
	.byte	'IdleMeter',0
	.word	16940
	.byte	48,2,35,32,11
	.byte	'AppAccess',0
	.word	296
	.byte	1,2,35,80,11
	.byte	'AppOverride',0
	.word	19542
	.byte	1,2,35,81,11
	.byte	'GetStackValueAdjust',0
	.word	16228
	.byte	8,2,35,84,11
	.byte	'InErrorHook',0
	.word	296
	.byte	1,2,35,92,11
	.byte	'ChainTaskRef',0
	.word	19547
	.byte	4,2,35,96,11
	.byte	'GetStackUsageAdjust',0
	.word	16228
	.byte	8,2,35,100,11
	.byte	'InProtectionHook',0
	.word	296
	.byte	1,2,35,108,11
	.byte	'CoreIsActive',0
	.word	296
	.byte	1,2,35,109,11
	.byte	'InShutdownHook',0
	.word	296
	.byte	1,2,35,110,0,26
	.byte	'Os_ControlledCoreType',0,40,141,7,3
	.word	19552
	.byte	6
	.word	140
	.byte	9
	.word	17288
	.byte	6
	.word	20008
	.byte	9
	.word	17858
	.byte	6
	.word	20018
	.byte	6
	.word	16940
	.byte	30
	.byte	'Os_AnyCoreType_s',0,40,151,7,16,96,11
	.byte	'DisableAllImask',0
	.word	140
	.byte	4,2,35,0,11
	.byte	'SuspendAllImask',0
	.word	140
	.byte	4,2,35,4,11
	.byte	'SuspendOSImask',0
	.word	140
	.byte	4,2,35,8,11
	.byte	'DisableAllCount',0
	.word	140
	.byte	4,2,35,12,11
	.byte	'SuspendAllCount',0
	.word	140
	.byte	4,2,35,16,11
	.byte	'SuspendOSCount',0
	.word	140
	.byte	4,2,35,20,11
	.byte	'RestartJumpBuf',0
	.word	16177
	.byte	68,2,35,24,11
	.byte	'Restartable',0
	.word	296
	.byte	1,2,35,92,0,26
	.byte	'Os_AnyCoreType',0,40,160,7,3
	.word	20033
	.byte	26
	.byte	'Can_TxObjPriorityClassType',0,41,219,3,16
	.word	140
	.byte	30
	.byte	'Can_TxHwObjectConfigType',0,41,231,3,16,8,11
	.byte	'MsgObjId',0
	.word	296
	.byte	1,2,35,0,11
	.byte	'HwControllerId',0
	.word	296
	.byte	1,2,35,1,11
	.byte	'TxObjPriorityClass',0
	.word	140
	.byte	4,2,35,4,0,26
	.byte	'Can_TxHwObjectConfigType',0,41,252,3,3
	.word	20310
	.byte	30
	.byte	'Can_RxHwObjectConfigType',0,41,129,4,16,12,11
	.byte	'MaskRef',0
	.word	140
	.byte	4,2,35,0,11
	.byte	'MsgId',0
	.word	140
	.byte	4,2,35,4,11
	.byte	'MsgObjId',0
	.word	296
	.byte	1,2,35,8,11
	.byte	'HwControllerId',0
	.word	296
	.byte	1,2,35,9,0,26
	.byte	'Can_RxHwObjectConfigType',0,41,147,4,3
	.word	20446
	.byte	14,4
	.word	296
	.byte	15,3,0,30
	.byte	'Can_ControllerMOMapConfigType',0,41,181,4,16,4,11
	.byte	'ControllerMOMap',0
	.word	20586
	.byte	4,2,35,0,0,26
	.byte	'Can_ControllerMOMapConfigType',0,41,184,4,3
	.word	20595
	.byte	30
	.byte	'Can_NPCRValueType',0,41,188,4,16,2,11
	.byte	'Can_NPCRValue',0
	.word	214
	.byte	2,2,35,0,0,26
	.byte	'Can_NPCRValueType',0,41,191,4,3
	.word	20696
	.byte	30
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,41,194,4,16,8,11
	.byte	'CanControllerBaudrate',0
	.word	140
	.byte	4,2,35,0,11
	.byte	'CanControllerBaudrateCfg',0
	.word	214
	.byte	2,2,35,4,0,26
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,41,198,4,3
	.word	20771
	.byte	9
	.word	20771
	.byte	6
	.word	20936
	.byte	30
	.byte	'Can_BaudrateConfigPtrType',0,41,201,4,16,4,11
	.byte	'Can_kBaudrateConfigPtr',0
	.word	20941
	.byte	4,2,35,0,0,26
	.byte	'Can_BaudrateConfigPtrType',0,41,204,4,3
	.word	20946
	.byte	30
	.byte	'Can_EventHandlingType',0,41,226,4,16,4,11
	.byte	'CanEventType',0
	.word	20586
	.byte	4,2,35,0,0,26
	.byte	'Can_EventHandlingType',0,41,229,4,3
	.word	21046
	.byte	26
	.byte	'Rte_TransformerErrorCode',0,42,130,1,15
	.word	296
	.byte	26
	.byte	'Rte_TransformerClass',0,42,131,1,15
	.word	296
	.byte	10,42,168,1,9,12,11
	.byte	'in',0
	.word	10206
	.byte	4,2,35,0,11
	.byte	'out',0
	.word	10206
	.byte	4,2,35,4,11
	.byte	'used',0
	.word	214
	.byte	2,2,35,8,11
	.byte	'lost_data',0
	.word	296
	.byte	1,2,35,10,0,26
	.byte	'Rte_QDynType',0,42,173,1,3
	.word	21192
	.byte	27,42,175,1,9,4,28
	.byte	'RTE_DRA',0,0,28
	.byte	'RTE_WOWP',0,1,28
	.byte	'RTE_TASK',0,2,28
	.byte	'RTE_ARE',0,3,28
	.byte	'RTE_EV',0,4,28
	.byte	'RTE_MSI',0,5,0,26
	.byte	'Rte_NotificationType',0,42,182,1,3
	.word	21279
	.byte	6
	.word	21192
	.byte	30
	.byte	'Rte_QCmnType',0,42,184,1,16,24,11
	.byte	'dynamic',0
	.word	21377
	.byte	4,2,35,0,11
	.byte	'copy',0
	.word	296
	.byte	1,2,35,4,11
	.byte	'queue_size',0
	.word	214
	.byte	2,2,35,6,11
	.byte	'element_size',0
	.word	214
	.byte	2,2,35,8,11
	.byte	'buffer_start',0
	.word	10206
	.byte	4,2,35,12,11
	.byte	'buffer_end',0
	.word	10206
	.byte	4,2,35,16,11
	.byte	'notification_type',0
	.word	21279
	.byte	4,2,35,20,0,26
	.byte	'Rte_QCmnType',0,42,192,1,3
	.word	21382
	.byte	26
	.byte	'Rte_AlarmRefType',0,42,224,1,32
	.word	140
	.byte	26
	.byte	'Rte_AlarmIndexType',0,42,226,1,32
	.word	214
	.byte	14,128,8
	.word	296
	.byte	15,255,7,0,26
	.byte	'Impl_NVM_DstPtrType_1024',0,43,50,15
	.word	21620
	.byte	26
	.byte	'CanIf_u32_impl',0,43,69,16
	.word	140
	.byte	26
	.byte	'CanIf_u16_impl',0,43,71,16
	.word	214
	.byte	26
	.byte	'CanIf_u8_impl',0,43,73,15
	.word	296
	.byte	26
	.byte	'CanIf_ControllerModeType_Enum_impl',0,43,88,15
	.word	296
	.byte	26
	.byte	'CanIf_PduModeType_Enum_impl',0,43,90,15
	.word	296
	.byte	10,43,92,9,2,11
	.byte	'DeviceMode',0
	.word	296
	.byte	1,2,35,0,11
	.byte	'ChannelMode',0
	.word	296
	.byte	1,2,35,1,0,26
	.byte	'CanIf_ControllerStateType_struct_impl',0,43,95,3
	.word	21811
	.byte	26
	.byte	'CanIf_NotifStatusType_Enum_impl',0,43,100,15
	.word	296
	.byte	26
	.byte	'CanSM_boolean_Impl',0,43,120,15
	.word	296
	.byte	26
	.byte	'CanSM_u8_Impl',0,43,123,15
	.word	296
	.byte	26
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,43,128,1,15
	.word	296
	.byte	26
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,43,132,1,15
	.word	296
	.byte	26
	.byte	'CanSM_u16_Impl',0,43,136,1,16
	.word	214
	.byte	26
	.byte	'CanSM_TimerStateType_Enum_impl',0,43,138,1,15
	.word	296
	.byte	10,43,140,1,9,4,11
	.byte	'cntTick_u16',0
	.word	214
	.byte	2,2,35,0,11
	.byte	'stTimer',0
	.word	296
	.byte	1,2,35,2,0,26
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,43,143,1,3
	.word	22152
	.byte	26
	.byte	'Com_impl_u16',0,43,154,1,16
	.word	214
	.byte	26
	.byte	'Com_impl_u8',0,43,157,1,15
	.word	296
	.byte	26
	.byte	'ComM_uint32_Impl',0,43,173,1,16
	.word	140
	.byte	26
	.byte	'ComM_uint16_Impl',0,43,175,1,16
	.word	214
	.byte	26
	.byte	'ComM_uint8_Impl',0,43,177,1,15
	.word	296
	.byte	26
	.byte	'ComM_bool_Impl',0,43,179,1,15
	.word	296
	.byte	10,43,181,1,9,24,11
	.byte	'ChannelState_e',0
	.word	140
	.byte	4,2,35,0,11
	.byte	'LightTimeoutCtr_u32',0
	.word	140
	.byte	4,2,35,4,11
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	214
	.byte	2,2,35,8,11
	.byte	'ChannelMode_u8',0
	.word	296
	.byte	1,2,35,10,11
	.byte	'BusSmMode_u8',0
	.word	296
	.byte	1,2,35,11,11
	.byte	'UserRequestCtr_u8',0
	.word	296
	.byte	1,2,35,12,11
	.byte	'PassiveRequestState_u8',0
	.word	296
	.byte	1,2,35,13,11
	.byte	'PncRequestCtr_u8',0
	.word	296
	.byte	1,2,35,14,11
	.byte	'InhibitionReqStatus_u8',0
	.word	296
	.byte	1,2,35,15,11
	.byte	'NmNetworkRequestStatus_b',0
	.word	296
	.byte	1,2,35,16,11
	.byte	'DiagnosticRequestState_b',0
	.word	296
	.byte	1,2,35,17,11
	.byte	'CommunicationAllowed_b',0
	.word	296
	.byte	1,2,35,18,11
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	296
	.byte	1,2,35,19,11
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	296
	.byte	1,2,35,20,11
	.byte	'NmNetworkModeStatus_b',0
	.word	296
	.byte	1,2,35,21,0,26
	.byte	'ComM_ChannelStruct_Impl',0,43,197,1,3
	.word	22384
	.byte	10,43,206,1,9,10,11
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	214
	.byte	2,2,35,0,11
	.byte	'LimitToNoComCtr_u16',0
	.word	214
	.byte	2,2,35,2,11
	.byte	'RequestedUserMode_t',0
	.word	296
	.byte	1,2,35,4,11
	.byte	'IndicatedUserMode_t',0
	.word	296
	.byte	1,2,35,5,11
	.byte	'numChannelsInFullCom_u8',0
	.word	296
	.byte	1,2,35,6,11
	.byte	'numChannelsInSilentCom_u8',0
	.word	296
	.byte	1,2,35,7,11
	.byte	'numChannelsInNoCom_u8',0
	.word	296
	.byte	1,2,35,8,0,26
	.byte	'ComM_UserStruct_Impl',0,43,214,1,3
	.word	22888
	.byte	26
	.byte	'Dcm_IOOperationResponseType',0,43,252,1,15
	.word	296
	.byte	26
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	43,138,2,15
	.word	296
	.byte	26
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,43,146,2,15
	.word	296
	.byte	26
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,43,150,2,15
	.word	296
	.byte	26
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,43,154,2,15
	.word	296
	.byte	26
	.byte	'Dem_DTCFormatType',0,43,160,2,15
	.word	296
	.byte	26
	.byte	'Dem_DTCOriginType',0,43,162,2,15
	.word	296
	.byte	26
	.byte	'Dem_EventIdType',0,43,168,2,16
	.word	214
	.byte	26
	.byte	'Dem_EventStatusType',0,43,170,2,15
	.word	296
	.byte	26
	.byte	'Dem_InitMonitorReasonType',0,43,176,2,15
	.word	296
	.byte	26
	.byte	'Dem_OperationCycleIdType',0,43,179,2,15
	.word	296
	.byte	26
	.byte	'Dem_ReturnClearDTCType',0,43,183,2,15
	.word	296
	.byte	26
	.byte	'Dem_UdsStatusByteType',0,43,185,2,15
	.word	296
	.byte	26
	.byte	'NvM_BlockIdType',0,43,215,2,16
	.word	214
	.byte	26
	.byte	'NvM_RequestResultType',0,43,225,2,15
	.word	296
	.byte	26
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,43,243,3,34
	.word	21631
	.byte	14,128,8
	.word	296
	.byte	15,255,7,0,26
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,43,246,3,34
	.word	21631
	.byte	26
	.byte	'Dem_DTCGroupIdType',0,44,49,15
	.word	296
	.byte	26
	.byte	'Dem_DtcIdType',0,44,50,16
	.word	214
	.byte	26
	.byte	'Dem_ClientIdType',0,44,53,15
	.word	296
	.byte	26
	.byte	'Dem_DtcCodeType',0,44,55,16
	.word	140
	.byte	26
	.byte	'Dem_boolean_least',0,44,60,17
	.word	296
	.byte	26
	.byte	'Dem_EventCategoryType',0,44,62,15
	.word	296
	.byte	26
	.byte	'Dem_DTCSeverityType',0,44,217,1,15
	.word	296
	.byte	26
	.byte	'Dem_DTCGroupType',0,44,133,2,16
	.word	140
	.byte	26
	.byte	'Dem_DebugDataType',0,44,131,3,16
	.word	140
	.byte	26
	.byte	'Dem_DTCKindType',0,44,145,3,16
	.word	296
	.byte	26
	.byte	'Dem_TriggerType',0,44,167,3,15
	.word	296
	.byte	26
	.byte	'Rte_TaskRefType',0,45,184,1,32
	.word	18118
	.byte	26
	.byte	'Rte_EventRefType',0,45,185,1,32
	.word	296
	.byte	26
	.byte	'Rte_EventType',0,45,186,1,32
	.word	140
	.byte	26
	.byte	'Rte_REActCounterType',0,45,252,1,15
	.word	296
	.byte	6
	.word	296
	.byte	26
	.byte	'Rte_REActCounterRefType',0,45,253,1,58
	.word	24392
	.byte	10,45,255,1,9,8,11
	.byte	'task',0
	.word	24288
	.byte	4,2,35,0,11
	.byte	'acnt',0
	.word	24397
	.byte	4,2,35,4,0,26
	.byte	'Rte_REContainerType',0,45,130,2,3
	.word	24430
	.byte	9
	.word	17858
	.byte	6
	.word	24494
	.byte	6
	.word	296
	.byte	9
	.word	24430
	.byte	6
	.word	24509
	.byte	26
	.byte	'Rte_REContainerRefType',0,45,132,2,60
	.word	24514
	.byte	26
	.byte	'Rte_MSICounterType',0,45,149,2,16
	.word	214
	.byte	6
	.word	214
	.byte	26
	.byte	'Rte_MSICounterRefType',0,45,150,2,56
	.word	24579
	.byte	26
	.byte	'Rte_MSIPendingFlagType',0,45,152,2,17
	.word	296
	.byte	6
	.word	296
	.byte	26
	.byte	'Rte_MSIPendingFlagRefType',0,45,153,2,60
	.word	24647
	.byte	10,45,163,2,9,24,11
	.byte	'counter',0
	.word	24584
	.byte	4,2,35,0,11
	.byte	'incCounter',0
	.word	296
	.byte	1,2,35,4,11
	.byte	'pending',0
	.word	24652
	.byte	4,2,35,8,11
	.byte	'osTask',0
	.word	24288
	.byte	4,2,35,12,11
	.byte	'acnt',0
	.word	24397
	.byte	4,2,35,16,11
	.byte	'osEvent',0
	.word	296
	.byte	1,2,35,20,11
	.byte	'MSIInit',0
	.word	214
	.byte	2,2,35,22,0,26
	.byte	'Rte_MSITableEntry',0,45,172,2,3
	.word	24687
	.byte	6
	.word	214
	.byte	6
	.word	296
	.byte	26
	.byte	'Rte_TaskArrayIndex',0,45,179,2,16
	.word	296
	.byte	26
	.byte	'Rte_NrWaitingTasks',0,45,180,2,16
	.word	296
	.byte	10,45,182,2,9,4,11
	.byte	'pending',0
	.word	296
	.byte	1,2,35,0,11
	.byte	'count',0
	.word	296
	.byte	1,2,35,1,11
	.byte	'firstWaitingTask',0
	.word	296
	.byte	1,2,35,2,0,26
	.byte	'Rte_WaitableDatum',0,45,186,2,3
	.word	24905
	.byte	6
	.word	24905
	.byte	10,45,226,2,9,12,11
	.byte	'event_id',0
	.word	140
	.byte	4,2,35,0,11
	.byte	'wd',0
	.word	24997
	.byte	4,2,35,4,11
	.byte	'timeout',0
	.word	140
	.byte	4,2,35,8,0,26
	.byte	'Rte_WOWP_NotificationType',0,45,230,2,3
	.word	25002
	.byte	9
	.word	25002
	.byte	6
	.word	25091
	.byte	26
	.byte	'Rte_WOWP_NotificationRefType',0,45,232,2,66
	.word	25096
	.byte	26
	.byte	'Rte_ARE_NotificationType',0,45,234,2,29
	.word	24430
	.byte	30
	.byte	'Rte_QTaskType',0,45,243,2,16,28,11
	.byte	'cmn',0
	.word	21382
	.byte	24,2,35,0,11
	.byte	'task',0
	.word	24288
	.byte	4,2,35,24,0,26
	.byte	'Rte_QTaskType',0,45,246,2,3
	.word	25173
	.byte	30
	.byte	'Rte_QREType',0,45,250,2,16,28,11
	.byte	'cmn',0
	.word	21382
	.byte	24,2,35,0,11
	.byte	're',0
	.word	24519
	.byte	4,2,35,24,0,26
	.byte	'Rte_QREType',0,45,253,2,3
	.word	25244
	.byte	9
	.word	24430
	.byte	6
	.word	25309
	.byte	30
	.byte	'Rte_QWWPType',0,45,129,3,16,28,11
	.byte	'cmn',0
	.word	21382
	.byte	24,2,35,0,11
	.byte	'wwp',0
	.word	25101
	.byte	4,2,35,24,0,26
	.byte	'Rte_QWWPType',0,45,132,3,3
	.word	25319
	.byte	9
	.word	25002
	.byte	6
	.word	25387
	.byte	30
	.byte	'Rte_QEvType',0,45,136,3,16,36,11
	.byte	'cmn',0
	.word	21382
	.byte	24,2,35,0,11
	.byte	'task',0
	.word	24288
	.byte	4,2,35,24,11
	.byte	'mask',0
	.word	296
	.byte	1,2,35,28,11
	.byte	'acnt',0
	.word	24397
	.byte	4,2,35,32,0,26
	.byte	'Rte_QEvType',0,45,141,3,3
	.word	25397
	.byte	30
	.byte	'Rte_QMSIType',0,45,145,3,16,48,11
	.byte	'cmn',0
	.word	21382
	.byte	24,2,35,0,11
	.byte	'task',0
	.word	24288
	.byte	4,2,35,24,11
	.byte	'mask',0
	.word	296
	.byte	1,2,35,28,11
	.byte	'acnt',0
	.word	24397
	.byte	4,2,35,32,11
	.byte	'msiCounter',0
	.word	24584
	.byte	4,2,35,36,11
	.byte	'msiPending',0
	.word	24652
	.byte	4,2,35,40,11
	.byte	'msiLimit',0
	.word	214
	.byte	2,2,35,44,0,26
	.byte	'Rte_QMSIType',0,45,153,3,3
	.word	25492
	.byte	26
	.byte	'Dem_EvtStateType',0,46,151,1,15
	.word	296
	.byte	26
	.byte	'rba_BswSrv_uint64',0,1,66,28
	.word	15453
	.byte	26
	.byte	'Dem_EventIdIterator',0,4,27,22
	.word	6741
	.byte	26
	.byte	'Dem_DtcIdIterator',0,4,197,1,22
	.word	6741
	.byte	26
	.byte	'Dem_DtcGroupIdIterator',0,4,230,1,21
	.word	6741
	.byte	26
	.byte	'Dem_EventIdListIterator',0,4,174,2,3
	.word	783
	.byte	26
	.byte	'Dem_DtcIdListIterator',0,4,216,2,3
	.word	13730
	.byte	26
	.byte	'Dem_ClientType',0,29,29,3
	.word	10535
	.byte	14,48
	.word	10535
	.byte	15,2,0,35
	.byte	'Dem_Clients',0,29,40,1
	.word	25873
	.byte	1,1,27,47,31,9,4,28
	.byte	'MEMIF_JOB_OK',0,0,28
	.byte	'MEMIF_JOB_FAILED',0,1,28
	.byte	'MEMIF_JOB_PENDING',0,2,28
	.byte	'MEMIF_JOB_CANCELED',0,3,28
	.byte	'MEMIF_BLOCK_INCONSISTENT',0,4,28
	.byte	'MEMIF_BLOCK_INVALID',0,5,0,26
	.byte	'MemIf_JobResultType',0,47,39,2
	.word	25904
	.byte	27,48,49,9,4,28
	.byte	'NVM_PRV_ACTIVITY_NOT_INIT',0,0,28
	.byte	'NVM_PRV_ACTIVITY_IDLE',0,1,28
	.byte	'NVM_PRV_ACTIVITY_ARBITRATE',0,2,28
	.byte	'NVM_PRV_ACTIVITY_JOB_START',0,3,28
	.byte	'NVM_PRV_ACTIVITY_POLL_RESULT',0,4,28
	.byte	'NVM_PRV_ACTIVITY_JOB_COMPLETE',0,5,28
	.byte	'NVM_PRV_ACTIVITY_RESULT_EVAL',0,6,0,26
	.byte	'NvM_Prv_Activities_ten',0,48,58,3
	.word	26062
	.byte	27,48,104,9,4,28
	.byte	'NvM_Prv_idJob_Idle_e',0,0,28
	.byte	'NvM_Prv_idJob_Read_e',0,1,28
	.byte	'NvM_Prv_idJob_Write_e',0,2,28
	.byte	'NvM_Prv_idJob_Erase_e',0,3,28
	.byte	'NvM_Prv_idJob_Restore_e',0,4,28
	.byte	'NvM_Prv_idJob_Maintain_e',0,5,28
	.byte	'NvM_Prv_idJob_Validate_e',0,6,28
	.byte	'NvM_Prv_idJob_Invalidate_e',0,7,28
	.byte	'NvM_Prv_idJob_ReadIdConfigForReadAll_e',0,8,28
	.byte	'NvM_Prv_idJob_InvalidateForFirstInitAll_e',0,9,28
	.byte	'NvM_Prv_idJob_RestoreForImplicitRecovery_e',0,10,28
	.byte	'NvM_Prv_idJob_InvalidateForRemoveNonResistant_e',0,11,28
	.byte	'NvM_Prv_idJob_Invalid_e',0,12,28
	.byte	'NvM_Prv_idJob_Count_e',0,13,0,26
	.byte	'NvM_Prv_idJob_ten',0,48,115,3
	.word	26303
	.byte	26
	.byte	'NvM_Prv_ServiceBit_tuo',0,48,168,1,16
	.word	214
	.byte	26
	.byte	'NvM_Prv_idService_tuo',0,48,173,1,15
	.word	296
	.byte	26
	.byte	'NvM_Prv_idQueue_tuo',0,48,206,1,15
	.word	296
	.byte	10,48,210,1,9,12,11
	.byte	'idService_uo',0
	.word	296
	.byte	1,2,35,0,11
	.byte	'idBlock_uo',0
	.word	214
	.byte	2,2,35,2,11
	.byte	'ServiceBit_uo',0
	.word	214
	.byte	2,2,35,4,11
	.byte	'BlockData_pv',0
	.word	10206
	.byte	4,2,35,8,0,26
	.byte	'NvM_Prv_QueueEntry_tst',0,48,225,1,3
	.word	26860
	.byte	10,48,227,1,9,20,11
	.byte	'idJob_en',0
	.word	26303
	.byte	4,2,35,0,11
	.byte	'idBlock_uo',0
	.word	214
	.byte	2,2,35,4,11
	.byte	'RamBlock_pu8',0
	.word	313
	.byte	4,2,35,8,11
	.byte	'idxDataset_u8',0
	.word	296
	.byte	1,2,35,12,11
	.byte	'Result_en',0
	.word	25904
	.byte	4,2,35,16,0,26
	.byte	'NvM_Prv_JobData_tst',0,48,240,1,3
	.word	26986
	.byte	26
	.byte	'Dem_OpMoStateType',0,49,13,15
	.word	296
	.byte	35
	.byte	'Dem_OpMoState',0,49,31,26
	.word	296
	.byte	1,1,26
	.byte	'Dem_DtcStateType',0,50,47,15
	.word	296
	.byte	26
	.byte	'Dem_EvMemOccurrenceCounterType',0,21,90,21
	.word	296
	.byte	26
	.byte	'Dem_EvMemAgingCounterType',0,21,99,21
	.word	296
	.byte	26
	.byte	'Dem_EvMemHdrType',0,21,141,1,4
	.word	6996
	.byte	26
	.byte	'Dem_EvMemEventMemoryType',0,21,213,1,4
	.word	7026
	.byte	26
	.byte	'Dem_OperationCycleList',0,51,23,15
	.word	296
	.byte	14,5
	.word	296
	.byte	15,4,0,14,10
	.word	214
	.byte	15,4,0,10,52,9,9,18,11
	.byte	'OperationCycleStates',0
	.word	296
	.byte	1,2,35,0,11
	.byte	'OperationCycleQualified',0
	.word	296
	.byte	1,2,35,1,11
	.byte	'Overflow',0
	.word	27363
	.byte	5,2,35,2,11
	.byte	'DtcIdsByOccurrenceTime',0
	.word	27372
	.byte	10,2,35,8,0,26
	.byte	'Dem_GenericNvDataType',0,52,24,4
	.word	27381
	.byte	35
	.byte	'Dem_GenericNvData',0,52,28,30
	.word	27381
	.byte	1,1,26
	.byte	'Dem_NvmBlockIdType',0,53,14,34
	.word	296
	.byte	13,53,16,9,20,11
	.byte	'evMemData',0
	.word	7026
	.byte	20,2,35,0,11
	.byte	'genericNvData',0
	.word	27381
	.byte	18,2,35,0,0,26
	.byte	'Dem_NvMStorageBufferData',0,53,37,3
	.word	27585
	.byte	26
	.byte	'Dem_NvmBlockStatusType',0,53,59,15
	.word	296
	.byte	14,5
	.word	296
	.byte	15,4,0,26
	.byte	'Dem_NvMBlockStatusDoubleBufferType',0,53,70,32
	.word	27697
	.byte	26
	.byte	'Dem_NvmResultType',0,53,78,31
	.word	296
	.byte	14,35
	.word	27706
	.byte	15,6,0,35
	.byte	'Dem_NvMBlockStatusDoubleBuffer',0,10,19,1
	.word	27775
	.byte	1,1,14,5
	.word	296
	.byte	15,4,0,35
	.byte	'Dem_NvMAnyClearFailed',0,10,26,16
	.word	296
	.byte	1,1,26
	.byte	'Dem_ClientClearMachineType',0,11,37,3
	.word	13762
	.byte	35
	.byte	'Dem_ClientClearMachine',0,11,42,35
	.word	13762
	.byte	1,1,26
	.byte	'Dem_EnCoList',0,54,31,15
	.word	296
	.byte	26
	.byte	'Dem_StoCoList',0,55,32,15
	.word	296
	.byte	6
	.word	296
	.byte	36
	.word	296
	.byte	1,1,32
	.word	27977
	.byte	0,6
	.word	27982
	.byte	26
	.byte	'Dem_EvtClearAllowedFncType',0,16,12,26
	.word	27995
	.byte	36
	.word	296
	.byte	1,1,32
	.word	296
	.byte	0,6
	.word	28035
	.byte	26
	.byte	'Dem_InitMForEAllowedFncType',0,17,38,27
	.word	28048
	.byte	9
	.word	10200
	.byte	6
	.word	28089
	.byte	36
	.word	6741
	.byte	1,1,32
	.word	214
	.byte	32
	.word	27977
	.byte	32
	.word	28094
	.byte	32
	.word	214
	.byte	0,6
	.word	28099
	.byte	26
	.byte	'Dem_DebFilter',0,56,12,23
	.word	28127
	.byte	2
	.byte	'long int',0,4,5,6
	.word	28154
	.byte	31,1,1,32
	.word	28094
	.byte	32
	.word	214
	.byte	32
	.word	28166
	.byte	32
	.word	28166
	.byte	0,6
	.word	28171
	.byte	26
	.byte	'Dem_DebGetLimits',0,56,13,23
	.word	28195
	.byte	31,1,1,32
	.word	214
	.byte	32
	.word	28094
	.byte	32
	.word	214
	.byte	0,6
	.word	28225
	.byte	26
	.byte	'Dem_DebCyclic',0,56,14,16
	.word	28244
	.byte	26
	.byte	'Dem_DebouncedActionType',0,56,35,21
	.word	6741
	.byte	13,57,37,9,4,11
	.byte	'EnforceAlignment',0
	.word	140
	.byte	4,2,35,0,11
	.byte	'Buffer',0
	.word	20586
	.byte	4,2,35,0,0,26
	.byte	'Dem_EvBuffEnvDataAlignedType',0,57,47,3
	.word	28303
	.byte	10,57,49,9,16,11
	.byte	'envData',0
	.word	28303
	.byte	4,2,35,0,11
	.byte	'eventType',0
	.word	296
	.byte	1,2,35,4,11
	.byte	'eventId',0
	.word	214
	.byte	2,2,35,6,11
	.byte	'debug0',0
	.word	140
	.byte	4,2,35,8,11
	.byte	'debug1',0
	.word	140
	.byte	4,2,35,12,0,26
	.byte	'Dem_EvBuffEvent',0,57,75,2
	.word	28388
	.byte	10,25,29,9,1,11
	.byte	'state',0
	.word	296
	.byte	1,2,35,0,0,26
	.byte	'Dem_DtcState',0,25,31,3
	.word	28503
	.byte	14,5
	.word	28503
	.byte	15,4,0,35
	.byte	'Dem_AllDTCsState',0,25,92,5
	.word	28545
	.byte	1,1,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L131:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,46,1,3,8,32,13,58,15,59,15
	.byte	57,15,73,19,54,15,39,12,0,0,4,5,0,3,8,58,15,59,15,57,15,73,19,0,0,5,11,0,0,0,6,15,0,73,19,0,0,7,46,1,3
	.byte	8,32,13,58,15,59,15,57,15,54,15,39,12,0,0,8,11,1,0,0,9,38,0,73,19,0,0,10,19,1,58,15,59,15,57,15,11,15
	.byte	0,0,11,13,0,3,8,73,19,11,15,56,9,0,0,12,53,0,73,19,0,0,13,23,1,58,15,59,15,57,15,11,15,0,0,14,1,1,11,15
	.byte	73,19,0,0,15,33,0,47,15,0,0,16,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,17,59,0,3
	.byte	8,0,0,18,46,1,49,19,0,0,19,5,0,49,19,0,0,20,29,1,49,19,0,0,21,11,0,49,19,0,0,22,46,0,3,8,58,15,59,15,57
	.byte	15,73,19,54,15,39,12,63,12,60,12,0,0,23,11,1,49,19,0,0,24,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12
	.byte	60,12,0,0,25,21,0,54,15,0,0,26,22,0,3,8,58,15,59,15,57,15,73,19,0,0,27,4,1,58,15,59,15,57,15,11,15,0,0
	.byte	28,40,0,3,8,28,13,0,0,29,21,0,54,15,39,12,0,0,30,19,1,3,8,58,15,59,15,57,15,11,15,0,0,31,21,1,54,15,39
	.byte	12,0,0,32,5,0,73,19,0,0,33,4,1,3,8,58,15,59,15,57,15,11,15,0,0,34,21,0,73,19,54,15,39,12,0,0,35,52,0,3
	.byte	8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,36,21,1,73,19,54,15,39,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L132:
	.word	.L483-.L482
.L482:
	.half	3
	.word	.L485-.L484
.L484:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_MemUtils.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_Lib.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientBaseHandling.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTC_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits32.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientClearMachine.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_BitArray.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_ISO14229Byte.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\enco\\Dem_EnableCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_ByteOrderUtils.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvTrigger.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\deb\\Dem_Deb.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemTypes.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemAging.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMem.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemGen.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Det\\api\\Det.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_Client.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCStatusByte.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCGroup.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_Clear.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientHandlingTypes.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_NodeId.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\api\\Dem_Types.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Intl.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\MemIf\\api\\MemIf_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\NvM\\api\\NvM_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_Main.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_OperationCycle.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_GenericNvData.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_EnableCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_StorageCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\deb\\Dem_DebBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuffEvent.h',0,0,0,0,0
.L485:
.L483:
	.sdecl	'.debug_info',debug,cluster('Dem_DcmCheckClearParameter')
	.sect	'.debug_info'
.L133:
	.word	623
	.half	3
	.word	.L134
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_Clear.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L136,.L135
	.byte	2
	.word	.L129
	.byte	3
	.byte	'Dem_DcmCheckClearParameter',0,1,182,1,24
	.word	.L180
	.byte	1,1,1
	.word	.L116,.L181,.L115
	.byte	4
	.byte	'DTC',0,1,182,1,59
	.word	.L182,.L183
	.byte	4
	.byte	'DTCFormat',0,1,182,1,82
	.word	.L180,.L184
	.byte	4
	.byte	'DTCOrigin',0,1,182,1,111
	.word	.L180,.L185
	.byte	5
	.word	.L116,.L181
	.byte	6
	.byte	'dtcId',0,1,184,1,19
	.word	.L186,.L187
	.byte	6
	.byte	'DTCGroupId',0,1,185,1,24
	.word	.L180,.L188
	.byte	7
	.word	.L189,.L190,.L70
	.byte	8
	.word	.L191,.L192
	.byte	9
	.word	.L193,.L190,.L70
	.byte	0,7
	.word	.L194,.L75,.L77
	.byte	8
	.word	.L195,.L196
	.byte	9
	.word	.L197,.L75,.L77
	.byte	0,7
	.word	.L194,.L198,.L78
	.byte	8
	.word	.L195,.L196
	.byte	9
	.word	.L197,.L198,.L78
	.byte	0,7
	.word	.L199,.L200,.L201
	.byte	8
	.word	.L202,.L203
	.byte	10
	.word	.L204,.L200,.L201
	.byte	7
	.word	.L205,.L206,.L207
	.byte	8
	.word	.L208,.L209
	.byte	9
	.word	.L210,.L206,.L207
	.byte	0,7
	.word	.L211,.L207,.L86
	.byte	8
	.word	.L212,.L213
	.byte	10
	.word	.L214,.L207,.L86
	.byte	7
	.word	.L215,.L216,.L88
	.byte	8
	.word	.L217,.L218
	.byte	8
	.word	.L219,.L220
	.byte	10
	.word	.L221,.L216,.L88
	.byte	7
	.word	.L222,.L216,.L87
	.byte	8
	.word	.L223,.L224
	.byte	8
	.word	.L225,.L226
	.byte	9
	.word	.L227,.L216,.L87
	.byte	0,0,0,0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_DcmCheckClearParameter')
	.sect	'.debug_abbrev'
.L134:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_DcmCheckClearParameter')
	.sect	'.debug_line'
.L135:
	.word	.L487-.L486
.L486:
	.half	3
	.word	.L489-.L488
.L488:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_Clear.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_Lib.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0,0
.L489:
	.byte	5,24,7,0,5,2
	.word	.L116
	.byte	3,181,1,1,5,37,9
	.half	.L490-.L116
	.byte	3,5,1,4,2,5,8,9
	.half	.L190-.L490
	.byte	3,252,126,1,5,5,9
	.half	.L491-.L190
	.byte	1,5,22,7,9
	.half	.L492-.L491
	.byte	3,2,1,5,20,9
	.half	.L493-.L492
	.byte	1,5,17,9
	.half	.L69-.L493
	.byte	3,3,1,5,28,9
	.half	.L494-.L69
	.byte	1,5,5,9
	.half	.L495-.L494
	.byte	3,127,1,4,1,5,10,9
	.half	.L70-.L495
	.byte	3,128,1,1,5,16,7,9
	.half	.L496-.L70
	.byte	3,2,1,5,9,9
	.half	.L497-.L496
	.byte	1,5,5,9
	.half	.L71-.L497
	.byte	3,4,1,5,16,7,9
	.half	.L451-.L71
	.byte	3,8,1,5,9,9
	.half	.L498-.L451
	.byte	1,5,16,9
	.half	.L73-.L498
	.byte	3,3,1,5,5,9
	.half	.L452-.L73
	.byte	1,5,16,7,9
	.half	.L453-.L452
	.byte	3,2,1,5,9,9
	.half	.L499-.L453
	.byte	1,4,3,5,5,9
	.half	.L75-.L499
	.byte	3,216,126,1,4,1,5,85,9
	.half	.L77-.L75
	.byte	3,173,1,1,4,3,5,5,9
	.half	.L198-.L77
	.byte	3,211,126,1,4,1,5,9,9
	.half	.L78-.L198
	.byte	3,173,1,1,5,13,7,9
	.half	.L500-.L78
	.byte	3,2,1,5,20,9
	.half	.L501-.L500
	.byte	3,1,1,5,13,9
	.half	.L502-.L501
	.byte	1,5,57,9
	.half	.L79-.L502
	.byte	3,4,1,5,13,9
	.half	.L455-.L79
	.byte	3,1,1,5,24,7,9
	.half	.L503-.L455
	.byte	3,2,1,5,17,9
	.half	.L456-.L503
	.byte	1,5,46,9
	.half	.L81-.L456
	.byte	3,4,1,4,4,5,13,9
	.half	.L200-.L81
	.byte	3,172,127,1,4,5,5,21,9
	.half	.L206-.L200
	.byte	3,13,1,5,12,9
	.half	.L504-.L206
	.byte	1,5,28,7,9
	.half	.L505-.L504
	.byte	1,5,21,9
	.half	.L506-.L505
	.byte	1,5,4,9
	.half	.L83-.L506
	.byte	1,4,4,5,13,9
	.half	.L85-.L83
	.byte	3,114,1,5,35,7,9
	.half	.L207-.L85
	.byte	3,109,1,5,51,9
	.half	.L507-.L207
	.byte	1,5,58,9
	.half	.L508-.L507
	.byte	1,5,66,9
	.half	.L509-.L508
	.byte	1,4,6,5,28,9
	.half	.L216-.L509
	.byte	3,69,1,5,47,9
	.half	.L510-.L216
	.byte	1,5,5,9
	.half	.L511-.L510
	.byte	1,5,73,9
	.half	.L87-.L511
	.byte	3,4,1,5,5,9
	.half	.L512-.L87
	.byte	1,4,4,9
	.half	.L88-.L512
	.byte	3,55,1,5,13,9
	.half	.L89-.L88
	.byte	3,20,1,5,5,9
	.half	.L86-.L89
	.byte	3,127,1,4,1,5,23,9
	.half	.L91-.L86
	.byte	3,214,0,1,5,64,7,9
	.half	.L201-.L91
	.byte	1,5,28,7,9
	.half	.L92-.L201
	.byte	3,3,1,5,21,9
	.half	.L458-.L92
	.byte	1,5,24,9
	.half	.L93-.L458
	.byte	3,2,1,5,17,9
	.half	.L459-.L93
	.byte	1,5,1,9
	.half	.L72-.L459
	.byte	3,4,1,7,9
	.half	.L137-.L72
	.byte	0,1,1
.L487:
	.sdecl	'.debug_ranges',debug,cluster('Dem_DcmCheckClearParameter')
	.sect	'.debug_ranges'
.L136:
	.word	-1,.L116,0,.L137-.L116,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_ClearDTC')
	.sect	'.debug_info'
.L138:
	.word	302
	.half	3
	.word	.L139
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_Clear.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L141,.L140
	.byte	2
	.word	.L129
	.byte	3
	.byte	'Dem_ClearDTC',0,1,248,1,24
	.word	.L180
	.byte	1,1,1
	.word	.L120,.L228,.L119
	.byte	4
	.byte	'DTC',0,1,248,1,44
	.word	.L182,.L229
	.byte	4
	.byte	'DTCFormat',0,1,248,1,67
	.word	.L180,.L230
	.byte	4
	.byte	'DTCOrigin',0,1,248,1,96
	.word	.L180,.L231
	.byte	5
	.word	.L120,.L228
	.byte	6
	.byte	'returnSts',0,1,250,1,28
	.word	.L180,.L232
	.byte	6
	.byte	'ClientId',0,1,251,1,11
	.word	.L180,.L233
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_ClearDTC')
	.sect	'.debug_abbrev'
.L139:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_ClearDTC')
	.sect	'.debug_line'
.L140:
	.word	.L514-.L513
.L513:
	.half	3
	.word	.L516-.L515
.L515:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_Clear.c',0,0,0,0,0
.L516:
	.byte	5,24,7,0,5,2
	.word	.L120
	.byte	3,247,1,1,5,38,9
	.half	.L464-.L120
	.byte	3,2,1,5,20,9
	.half	.L465-.L464
	.byte	3,1,1,5,2,9
	.half	.L102-.L465
	.byte	3,2,1,5,77,9
	.half	.L103-.L102
	.byte	3,2,1,5,10,9
	.half	.L517-.L103
	.byte	1,5,86,7,9
	.half	.L469-.L517
	.byte	3,3,1,5,19,9
	.half	.L466-.L469
	.byte	1,5,5,9
	.half	.L105-.L466
	.byte	3,3,1,5,62,7,9
	.half	.L518-.L105
	.byte	3,3,1,5,19,9
	.half	.L472-.L518
	.byte	1,5,5,9
	.half	.L106-.L472
	.byte	3,3,1,5,1,9
	.half	.L104-.L106
	.byte	3,1,1,7,9
	.half	.L142-.L104
	.byte	0,1,1
.L514:
	.sdecl	'.debug_ranges',debug,cluster('Dem_ClearDTC')
	.sect	'.debug_ranges'
.L141:
	.word	-1,.L120,0,.L142-.L120,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_DcmCancelOperation')
	.sect	'.debug_info'
.L143:
	.word	199
	.half	3
	.word	.L144
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_Clear.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L146,.L145
	.byte	2
	.word	.L129
	.byte	3
	.byte	'Dem_DcmCancelOperation',0,1,162,2,6,1,1,1
	.word	.L128,.L234,.L127
	.byte	4
	.word	.L128,.L234
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_DcmCancelOperation')
	.sect	'.debug_abbrev'
.L144:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_DcmCancelOperation')
	.sect	'.debug_line'
.L145:
	.word	.L520-.L519
.L519:
	.half	3
	.word	.L522-.L521
.L521:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_Clear.c',0,0,0,0,0
.L522:
	.byte	5,34,7,0,5,2
	.word	.L128
	.byte	3,163,2,1,5,1,9
	.half	.L523-.L128
	.byte	3,1,1,7,9
	.half	.L147-.L523
	.byte	0,1,1
.L520:
	.sdecl	'.debug_ranges',debug,cluster('Dem_DcmCancelOperation')
	.sect	'.debug_ranges'
.L146:
	.word	-1,.L128,0,.L147-.L128,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_ClearMainFunction')
	.sect	'.debug_info'
.L148:
	.word	2350
	.half	3
	.word	.L149
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_Clear.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L151,.L150
	.byte	2
	.word	.L129
	.byte	3
	.byte	'Dem_ClearMainFunction',0,1,96,6,1,1,1
	.word	.L114,.L235,.L113
	.byte	4
	.word	.L114,.L235
	.byte	5
	.byte	'tempRequest',0,1,98,27
	.word	.L186,.L236
	.byte	5
	.byte	'tempClientId',0,1,99,22
	.word	.L180,.L237
	.byte	6
	.word	.L238,.L114,.L9
	.byte	7
	.word	.L239,.L114,.L9
	.byte	0,6
	.word	.L240,.L241,.L11
	.byte	7
	.word	.L242,.L241,.L11
	.byte	0,6
	.word	.L243,.L244,.L12
	.byte	8
	.word	.L245,.L246
	.byte	7
	.word	.L247,.L244,.L12
	.byte	0,6
	.word	.L238,.L248,.L14
	.byte	7
	.word	.L239,.L248,.L14
	.byte	0,6
	.word	.L249,.L250,.L15
	.byte	8
	.word	.L251,.L252
	.byte	8
	.word	.L253,.L254
	.byte	9
	.word	.L255,.L250,.L15
	.byte	6
	.word	.L256,.L250,.L257
	.byte	8
	.word	.L258,.L259
	.byte	9
	.word	.L260,.L250,.L257
	.byte	5
	.byte	'status',0,2,80,9
	.word	.L180,.L261
	.byte	6
	.word	.L194,.L262,.L18
	.byte	8
	.word	.L195,.L263
	.byte	7
	.word	.L197,.L262,.L18
	.byte	0,6
	.word	.L194,.L264,.L19
	.byte	8
	.word	.L195,.L263
	.byte	7
	.word	.L197,.L264,.L19
	.byte	0,6
	.word	.L265,.L266,.L21
	.byte	8
	.word	.L267,.L268
	.byte	7
	.word	.L269,.L266,.L21
	.byte	0,6
	.word	.L270,.L271,.L272
	.byte	8
	.word	.L273,.L274
	.byte	8
	.word	.L275,.L276
	.byte	8
	.word	.L277,.L278
	.byte	9
	.word	.L279,.L271,.L272
	.byte	5
	.byte	'tempResult',0,3,29,26
	.word	.L186,.L280
	.byte	0,0,0,0,6
	.word	.L281,.L282,.L283
	.byte	8
	.word	.L284,.L285
	.byte	9
	.word	.L286,.L282,.L283
	.byte	5
	.byte	'tempresult',0,3,153,1,20
	.word	.L180,.L287
	.byte	5
	.byte	'tempSelection',0,3,154,1,29
	.word	.L182,.L288
	.byte	0,0,6
	.word	.L289,.L290,.L291
	.byte	8
	.word	.L292,.L293
	.byte	7
	.word	.L294,.L290,.L291
	.byte	0,6
	.word	.L295,.L291,.L296
	.byte	8
	.word	.L297,.L298
	.byte	7
	.word	.L299,.L291,.L296
	.byte	0,6
	.word	.L289,.L300,.L301
	.byte	8
	.word	.L292,.L293
	.byte	7
	.word	.L294,.L300,.L301
	.byte	0,6
	.word	.L302,.L301,.L303
	.byte	7
	.word	.L304,.L301,.L303
	.byte	0,6
	.word	.L295,.L303,.L305
	.byte	8
	.word	.L297,.L298
	.byte	7
	.word	.L299,.L303,.L305
	.byte	0,6
	.word	.L295,.L306,.L307
	.byte	8
	.word	.L297,.L298
	.byte	7
	.word	.L299,.L306,.L307
	.byte	0,0,0,6
	.word	.L238,.L15,.L31
	.byte	7
	.word	.L239,.L15,.L31
	.byte	0,6
	.word	.L308,.L309,.L38
	.byte	7
	.word	.L310,.L309,.L38
	.byte	0,6
	.word	.L311,.L37,.L40
	.byte	8
	.word	.L312,.L313
	.byte	7
	.word	.L314,.L37,.L40
	.byte	0,6
	.word	.L270,.L315,.L316
	.byte	8
	.word	.L273,.L274
	.byte	8
	.word	.L275,.L276
	.byte	8
	.word	.L277,.L278
	.byte	9
	.word	.L279,.L315,.L316
	.byte	5
	.byte	'tempResult',0,3,29,26
	.word	.L186,.L317
	.byte	0,0,6
	.word	.L249,.L318,.L32
	.byte	8
	.word	.L251,.L252
	.byte	8
	.word	.L253,.L254
	.byte	9
	.word	.L255,.L318,.L32
	.byte	6
	.word	.L256,.L318,.L47
	.byte	8
	.word	.L258,.L259
	.byte	9
	.word	.L260,.L318,.L47
	.byte	5
	.byte	'status',0,2,80,9
	.word	.L180,.L319
	.byte	6
	.word	.L194,.L320,.L42
	.byte	8
	.word	.L195,.L263
	.byte	7
	.word	.L197,.L320,.L42
	.byte	0,6
	.word	.L194,.L321,.L43
	.byte	8
	.word	.L195,.L263
	.byte	7
	.word	.L197,.L321,.L43
	.byte	0,6
	.word	.L265,.L322,.L45
	.byte	8
	.word	.L267,.L268
	.byte	7
	.word	.L269,.L322,.L45
	.byte	0,6
	.word	.L270,.L323,.L324
	.byte	8
	.word	.L273,.L274
	.byte	8
	.word	.L275,.L276
	.byte	8
	.word	.L277,.L278
	.byte	9
	.word	.L279,.L323,.L324
	.byte	5
	.byte	'tempResult',0,3,29,26
	.word	.L186,.L325
	.byte	0,0,0,0,6
	.word	.L281,.L326,.L327
	.byte	8
	.word	.L284,.L285
	.byte	9
	.word	.L286,.L326,.L327
	.byte	5
	.byte	'tempresult',0,3,153,1,20
	.word	.L180,.L328
	.byte	5
	.byte	'tempSelection',0,3,154,1,29
	.word	.L182,.L329
	.byte	0,0,6
	.word	.L289,.L330,.L331
	.byte	8
	.word	.L292,.L293
	.byte	7
	.word	.L294,.L330,.L331
	.byte	0,6
	.word	.L295,.L331,.L332
	.byte	8
	.word	.L297,.L298
	.byte	7
	.word	.L299,.L331,.L332
	.byte	0,6
	.word	.L289,.L333,.L334
	.byte	8
	.word	.L292,.L293
	.byte	7
	.word	.L294,.L333,.L334
	.byte	0,6
	.word	.L302,.L334,.L335
	.byte	7
	.word	.L304,.L334,.L335
	.byte	0,6
	.word	.L295,.L335,.L336
	.byte	8
	.word	.L297,.L298
	.byte	7
	.word	.L299,.L335,.L336
	.byte	0,6
	.word	.L295,.L337,.L338
	.byte	8
	.word	.L297,.L298
	.byte	7
	.word	.L299,.L337,.L338
	.byte	0,0,0,6
	.word	.L339,.L340,.L341
	.byte	8
	.word	.L342,.L343
	.byte	8
	.word	.L344,.L345
	.byte	9
	.word	.L346,.L340,.L341
	.byte	5
	.byte	'tempResult',0,3,45,26
	.word	.L186,.L347
	.byte	0,0,6
	.word	.L249,.L348,.L10
	.byte	8
	.word	.L251,.L252
	.byte	8
	.word	.L253,.L254
	.byte	9
	.word	.L255,.L348,.L10
	.byte	6
	.word	.L256,.L348,.L349
	.byte	8
	.word	.L258,.L259
	.byte	9
	.word	.L260,.L348,.L349
	.byte	5
	.byte	'status',0,2,80,9
	.word	.L180,.L350
	.byte	6
	.word	.L194,.L351,.L56
	.byte	8
	.word	.L195,.L263
	.byte	7
	.word	.L197,.L351,.L56
	.byte	0,6
	.word	.L194,.L352,.L57
	.byte	8
	.word	.L195,.L263
	.byte	7
	.word	.L197,.L352,.L57
	.byte	0,6
	.word	.L265,.L353,.L59
	.byte	8
	.word	.L267,.L268
	.byte	7
	.word	.L269,.L353,.L59
	.byte	0,6
	.word	.L270,.L354,.L355
	.byte	8
	.word	.L273,.L274
	.byte	8
	.word	.L275,.L276
	.byte	8
	.word	.L277,.L278
	.byte	9
	.word	.L279,.L354,.L355
	.byte	5
	.byte	'tempResult',0,3,29,26
	.word	.L186,.L356
	.byte	0,0,0,0,6
	.word	.L281,.L357,.L358
	.byte	8
	.word	.L284,.L285
	.byte	9
	.word	.L286,.L357,.L358
	.byte	5
	.byte	'tempresult',0,3,153,1,20
	.word	.L180,.L359
	.byte	5
	.byte	'tempSelection',0,3,154,1,29
	.word	.L182,.L360
	.byte	0,0,6
	.word	.L289,.L361,.L362
	.byte	8
	.word	.L292,.L293
	.byte	7
	.word	.L294,.L361,.L362
	.byte	0,6
	.word	.L295,.L362,.L363
	.byte	8
	.word	.L297,.L298
	.byte	7
	.word	.L299,.L362,.L363
	.byte	0,6
	.word	.L289,.L364,.L365
	.byte	8
	.word	.L292,.L293
	.byte	7
	.word	.L294,.L364,.L365
	.byte	0,6
	.word	.L302,.L365,.L366
	.byte	7
	.word	.L304,.L365,.L366
	.byte	0,6
	.word	.L295,.L366,.L367
	.byte	8
	.word	.L297,.L298
	.byte	7
	.word	.L299,.L366,.L367
	.byte	0,6
	.word	.L295,.L368,.L369
	.byte	8
	.word	.L297,.L298
	.byte	7
	.word	.L299,.L368,.L369
	.byte	0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_ClearMainFunction')
	.sect	'.debug_abbrev'
.L149:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6,29,1
	.byte	49,16,17,1,18,1,0,0,7,11,0,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_ClearMainFunction')
	.sect	'.debug_line'
.L150:
	.word	.L525-.L524
.L524:
	.half	3
	.word	.L527-.L526
.L526:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_Clear.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientClearMachine.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientBaseHandling.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_Lib.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.h',0,0,0,0,0
.L527:
	.byte	4,2,5,12,7,0,5,2
	.word	.L114
	.byte	3,202,0,1,5,34,9
	.half	.L528-.L114
	.byte	1,5,5,9
	.half	.L529-.L528
	.byte	1,4,1,9
	.half	.L9-.L529
	.byte	3,26,1,4,2,5,34,7,9
	.half	.L241-.L9
	.byte	3,92,1,5,5,9
	.half	.L423-.L241
	.byte	1,4,1,5,44,9
	.half	.L11-.L423
	.byte	3,39,1,5,57,9
	.half	.L530-.L11
	.byte	1,4,3,5,22,9
	.half	.L244-.L530
	.byte	3,117,1,5,5,9
	.half	.L531-.L244
	.byte	1,4,1,5,14,9
	.half	.L12-.L531
	.byte	3,13,1,4,2,5,34,7,9
	.half	.L248-.L12
	.byte	3,97,1,5,5,9
	.half	.L532-.L248
	.byte	1,4,1,5,13,9
	.half	.L14-.L532
	.byte	3,33,1,5,47,7,9
	.half	.L533-.L14
	.byte	3,11,1,5,21,9
	.half	.L534-.L533
	.byte	1,5,85,7,9
	.half	.L535-.L534
	.byte	3,3,1,9
	.half	.L536-.L535
	.byte	3,1,1,9
	.half	.L537-.L536
	.byte	3,1,1,5,77,9
	.half	.L16-.L537
	.byte	3,3,1,5,90,9
	.half	.L538-.L16
	.byte	1,5,50,9
	.half	.L539-.L538
	.byte	3,1,1,5,63,9
	.half	.L540-.L539
	.byte	1,5,21,9
	.half	.L541-.L540
	.byte	3,127,1,5,63,9
	.half	.L542-.L541
	.byte	3,1,1,5,37,9
	.half	.L543-.L542
	.byte	3,127,1,5,60,9
	.half	.L544-.L543
	.byte	3,4,1,5,58,9
	.half	.L545-.L544
	.byte	1,5,21,9
	.half	.L546-.L545
	.byte	3,2,1,5,17,9
	.half	.L547-.L546
	.byte	1,5,75,7,9
	.half	.L548-.L547
	.byte	3,2,1,4,2,5,16,9
	.half	.L250-.L548
	.byte	3,73,1,4,4,5,5,9
	.half	.L262-.L250
	.byte	3,86,1,4,2,5,35,9
	.half	.L18-.L262
	.byte	3,48,1,4,4,5,5,9
	.half	.L264-.L18
	.byte	3,80,1,4,2,5,9,9
	.half	.L19-.L264
	.byte	3,47,1,5,72,7,9
	.half	.L549-.L19
	.byte	3,2,1,5,60,9
	.half	.L550-.L549
	.byte	1,5,71,9
	.half	.L551-.L550
	.byte	1,5,81,9
	.half	.L552-.L551
	.byte	1,4,3,5,32,9
	.half	.L266-.L552
	.byte	3,211,0,1,5,13,9
	.half	.L553-.L266
	.byte	1,5,5,9
	.half	.L554-.L553
	.byte	1,4,2,5,21,9
	.half	.L21-.L554
	.byte	3,174,127,1,5,92,7,9
	.half	.L555-.L21
	.byte	3,2,1,5,62,9
	.half	.L556-.L555
	.byte	1,5,102,9
	.half	.L557-.L556
	.byte	1,4,3,5,29,9
	.half	.L271-.L557
	.byte	3,71,1,5,27,9
	.half	.L425-.L271
	.byte	1,5,16,9
	.half	.L427-.L425
	.byte	3,1,1,5,13,9
	.half	.L426-.L427
	.byte	3,1,1,4,2,5,16,9
	.half	.L272-.L426
	.byte	3,56,1,5,1,9
	.half	.L20-.L272
	.byte	3,3,1,9
	.half	.L23-.L20
	.byte	3,5,1,5,5,7,9
	.half	.L257-.L23
	.byte	3,2,1,5,81,7,9
	.half	.L558-.L257
	.byte	3,2,1,5,90,9
	.half	.L428-.L558
	.byte	1,4,3,5,31,9
	.half	.L282-.L428
	.byte	3,50,1,5,22,9
	.half	.L429-.L282
	.byte	3,5,1,5,33,9
	.half	.L559-.L429
	.byte	1,5,44,9
	.half	.L431-.L559
	.byte	3,1,1,5,19,9
	.half	.L430-.L431
	.byte	1,5,16,9
	.half	.L560-.L430
	.byte	3,1,1,4,2,5,55,9
	.half	.L283-.L560
	.byte	3,72,1,5,41,9
	.half	.L290-.L283
	.byte	3,79,1,5,42,9
	.half	.L291-.L290
	.byte	3,15,1,5,90,9
	.half	.L296-.L291
	.byte	3,33,1,5,10,9
	.half	.L25-.L296
	.byte	3,4,1,5,52,7,9
	.half	.L561-.L25
	.byte	3,2,1,5,50,9
	.half	.L562-.L561
	.byte	1,5,41,9
	.half	.L300-.L562
	.byte	3,74,1,4,5,5,5,9
	.half	.L301-.L300
	.byte	3,213,0,1,5,29,9
	.half	.L563-.L301
	.byte	1,5,27,9
	.half	.L564-.L563
	.byte	1,4,2,5,42,9
	.half	.L303-.L564
	.byte	3,186,127,1,5,56,9
	.half	.L305-.L303
	.byte	3,39,1,5,10,9
	.half	.L27-.L305
	.byte	3,5,1,5,42,7,9
	.half	.L306-.L27
	.byte	3,84,1,5,54,9
	.half	.L307-.L306
	.byte	3,46,1,5,34,9
	.half	.L15-.L307
	.byte	3,87,1,5,5,9
	.half	.L565-.L15
	.byte	1,4,1,5,13,9
	.half	.L31-.L565
	.byte	3,192,0,1,5,50,7,9
	.half	.L566-.L31
	.byte	3,5,1,5,22,9
	.half	.L567-.L566
	.byte	1,5,29,7,9
	.half	.L568-.L567
	.byte	3,1,1,5,45,9
	.half	.L569-.L568
	.byte	1,5,86,7,9
	.half	.L570-.L569
	.byte	1,5,21,9
	.half	.L33-.L570
	.byte	3,110,1,5,53,9
	.half	.L571-.L33
	.byte	3,28,1,5,25,9
	.half	.L572-.L571
	.byte	1,4,5,5,12,7,9
	.half	.L309-.L572
	.byte	3,118,1,5,5,9
	.half	.L573-.L309
	.byte	1,4,1,5,53,9
	.half	.L38-.L573
	.byte	3,11,1,5,43,7,9
	.half	.L574-.L38
	.byte	3,2,1,5,41,9
	.half	.L575-.L574
	.byte	1,4,2,5,35,9
	.half	.L37-.L575
	.byte	3,158,127,1,5,49,9
	.half	.L576-.L37
	.byte	1,5,5,9
	.half	.L577-.L576
	.byte	1,4,1,5,26,9
	.half	.L40-.L577
	.byte	3,229,0,1,5,86,7,9
	.half	.L578-.L40
	.byte	3,3,1,9
	.half	.L579-.L578
	.byte	3,1,1,9
	.half	.L580-.L579
	.byte	3,1,1,5,74,9
	.half	.L41-.L580
	.byte	3,2,1,5,87,9
	.half	.L581-.L41
	.byte	1,5,29,9
	.half	.L582-.L581
	.byte	3,1,1,4,3,9
	.half	.L315-.L582
	.byte	3,248,126,1,5,27,9
	.half	.L432-.L315
	.byte	1,5,16,9
	.half	.L424-.L432
	.byte	3,1,1,5,13,9
	.half	.L583-.L424
	.byte	3,1,1,4,1,5,75,9
	.half	.L316-.L583
	.byte	3,135,1,1,4,2,5,16,9
	.half	.L318-.L316
	.byte	3,166,127,1,4,4,5,5,9
	.half	.L320-.L318
	.byte	3,86,1,4,2,5,35,9
	.half	.L42-.L320
	.byte	3,48,1,4,4,5,5,9
	.half	.L321-.L42
	.byte	3,80,1,4,2,5,9,9
	.half	.L43-.L321
	.byte	3,47,1,5,72,7,9
	.half	.L584-.L43
	.byte	3,2,1,5,60,9
	.half	.L585-.L584
	.byte	1,5,71,9
	.half	.L586-.L585
	.byte	1,5,81,9
	.half	.L587-.L586
	.byte	1,4,3,5,32,9
	.half	.L322-.L587
	.byte	3,211,0,1,5,13,9
	.half	.L588-.L322
	.byte	1,5,5,9
	.half	.L589-.L588
	.byte	1,4,2,5,21,9
	.half	.L45-.L589
	.byte	3,174,127,1,5,92,7,9
	.half	.L590-.L45
	.byte	3,2,1,5,62,9
	.half	.L591-.L590
	.byte	1,5,102,9
	.half	.L592-.L591
	.byte	1,4,3,5,27,9
	.half	.L323-.L592
	.byte	3,71,1,5,16,9
	.half	.L434-.L323
	.byte	3,1,1,5,13,9
	.half	.L433-.L434
	.byte	3,1,1,4,2,5,16,9
	.half	.L324-.L433
	.byte	3,56,1,5,1,9
	.half	.L44-.L324
	.byte	3,3,1,9
	.half	.L47-.L44
	.byte	3,5,1,5,5,7,9
	.half	.L593-.L47
	.byte	3,2,1,5,81,7,9
	.half	.L594-.L593
	.byte	3,2,1,5,90,9
	.half	.L435-.L594
	.byte	1,4,3,5,31,9
	.half	.L326-.L435
	.byte	3,50,1,5,22,9
	.half	.L436-.L326
	.byte	3,5,1,5,33,9
	.half	.L595-.L436
	.byte	1,5,44,9
	.half	.L438-.L595
	.byte	3,1,1,5,19,9
	.half	.L437-.L438
	.byte	1,5,16,9
	.half	.L596-.L437
	.byte	3,1,1,4,2,5,55,9
	.half	.L327-.L596
	.byte	3,72,1,5,41,9
	.half	.L330-.L327
	.byte	3,79,1,5,42,9
	.half	.L331-.L330
	.byte	3,15,1,5,90,9
	.half	.L332-.L331
	.byte	3,33,1,5,10,9
	.half	.L49-.L332
	.byte	3,4,1,5,31,7,9
	.half	.L597-.L49
	.byte	3,2,1,5,52,9
	.half	.L598-.L597
	.byte	1,5,50,9
	.half	.L599-.L598
	.byte	1,5,41,9
	.half	.L333-.L599
	.byte	3,74,1,4,5,5,5,9
	.half	.L334-.L333
	.byte	3,213,0,1,5,29,9
	.half	.L600-.L334
	.byte	1,5,27,9
	.half	.L601-.L600
	.byte	1,4,2,5,42,9
	.half	.L335-.L601
	.byte	3,186,127,1,5,56,9
	.half	.L336-.L335
	.byte	3,39,1,5,10,9
	.half	.L51-.L336
	.byte	3,5,1,5,42,7,9
	.half	.L337-.L51
	.byte	3,84,1,5,54,9
	.half	.L338-.L337
	.byte	3,46,1,4,1,5,13,9
	.half	.L32-.L338
	.byte	3,23,1,5,70,9
	.half	.L13-.L32
	.byte	3,37,1,5,83,9
	.half	.L602-.L13
	.byte	1,4,3,5,29,9
	.half	.L340-.L602
	.byte	3,129,127,1,5,27,9
	.half	.L440-.L340
	.byte	1,5,16,9
	.half	.L439-.L440
	.byte	3,1,1,5,13,9
	.half	.L441-.L439
	.byte	3,1,1,4,1,5,67,9
	.half	.L341-.L441
	.byte	3,254,0,1,4,2,5,16,9
	.half	.L348-.L341
	.byte	3,159,127,1,4,4,5,5,9
	.half	.L351-.L348
	.byte	3,86,1,4,2,5,35,9
	.half	.L56-.L351
	.byte	3,48,1,4,4,5,5,9
	.half	.L352-.L56
	.byte	3,80,1,4,2,5,9,9
	.half	.L57-.L352
	.byte	3,47,1,5,72,7,9
	.half	.L603-.L57
	.byte	3,2,1,5,60,9
	.half	.L604-.L603
	.byte	1,5,71,9
	.half	.L605-.L604
	.byte	1,5,81,9
	.half	.L606-.L605
	.byte	1,4,3,5,32,9
	.half	.L353-.L606
	.byte	3,211,0,1,5,13,9
	.half	.L607-.L353
	.byte	1,5,5,9
	.half	.L608-.L607
	.byte	1,4,2,5,21,9
	.half	.L59-.L608
	.byte	3,174,127,1,5,92,7,9
	.half	.L609-.L59
	.byte	3,2,1,5,62,9
	.half	.L610-.L609
	.byte	1,5,102,9
	.half	.L611-.L610
	.byte	1,4,3,5,27,9
	.half	.L354-.L611
	.byte	3,71,1,5,16,9
	.half	.L612-.L354
	.byte	3,1,1,5,13,9
	.half	.L613-.L612
	.byte	3,1,1,4,2,5,16,9
	.half	.L355-.L613
	.byte	3,56,1,5,1,9
	.half	.L58-.L355
	.byte	3,3,1,9
	.half	.L61-.L58
	.byte	3,5,1,5,5,7,9
	.half	.L349-.L61
	.byte	3,2,1,5,81,7,9
	.half	.L614-.L349
	.byte	3,2,1,5,90,9
	.half	.L443-.L614
	.byte	1,4,3,5,31,9
	.half	.L357-.L443
	.byte	3,50,1,5,22,9
	.half	.L444-.L357
	.byte	3,5,1,5,33,9
	.half	.L615-.L444
	.byte	1,5,44,9
	.half	.L446-.L615
	.byte	3,1,1,5,19,9
	.half	.L445-.L446
	.byte	1,5,16,9
	.half	.L616-.L445
	.byte	3,1,1,4,2,5,55,9
	.half	.L358-.L616
	.byte	3,72,1,5,41,9
	.half	.L361-.L358
	.byte	3,79,1,5,42,9
	.half	.L362-.L361
	.byte	3,15,1,5,90,9
	.half	.L363-.L362
	.byte	3,33,1,5,10,9
	.half	.L63-.L363
	.byte	3,4,1,5,31,7,9
	.half	.L617-.L63
	.byte	3,2,1,5,52,9
	.half	.L618-.L617
	.byte	1,5,50,9
	.half	.L619-.L618
	.byte	1,5,41,9
	.half	.L364-.L619
	.byte	3,74,1,4,5,5,5,9
	.half	.L365-.L364
	.byte	3,213,0,1,5,29,9
	.half	.L620-.L365
	.byte	1,5,27,9
	.half	.L621-.L620
	.byte	1,4,2,5,42,9
	.half	.L366-.L621
	.byte	3,186,127,1,5,56,9
	.half	.L367-.L366
	.byte	3,39,1,5,10,9
	.half	.L65-.L367
	.byte	3,5,1,5,42,7,9
	.half	.L368-.L65
	.byte	3,84,1,5,54,9
	.half	.L369-.L368
	.byte	3,46,1,4,1,5,1,9
	.half	.L10-.L369
	.byte	3,192,0,1,7,9
	.half	.L152-.L10
	.byte	0,1,1
.L525:
	.sdecl	'.debug_ranges',debug,cluster('Dem_ClearMainFunction')
	.sect	'.debug_ranges'
.L151:
	.word	-1,.L114,0,.L152-.L114,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_ClearDtcInit')
	.sect	'.debug_info'
.L153:
	.word	282
	.half	3
	.word	.L154
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_Clear.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L156,.L155
	.byte	2
	.word	.L129
	.byte	3
	.byte	'Dem_ClearDtcInit',0,1,151,2,6,1,1,1
	.word	.L124,.L370,.L123
	.byte	4
	.word	.L124,.L370
	.byte	5
	.word	.L281,.L371,.L372
	.byte	6
	.word	.L284,.L373
	.byte	7
	.word	.L286,.L371,.L372
	.byte	8
	.byte	'tempresult',0,2,153,1,20
	.word	.L180,.L374
	.byte	8
	.byte	'tempSelection',0,2,154,1,29
	.word	.L182,.L375
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_ClearDtcInit')
	.sect	'.debug_abbrev'
.L154:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,29,1,49,16,17,1,18,1,0,0,6,5,0,49,16,2,6,0,0,7,11
	.byte	1,49,16,17,1,18,1,0,0,8,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_ClearDtcInit')
	.sect	'.debug_line'
.L155:
	.word	.L623-.L622
.L622:
	.half	3
	.word	.L625-.L624
.L624:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_Clear.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientBaseHandling.h',0,0,0,0,0
.L625:
	.byte	5,34,7,0,5,2
	.word	.L124
	.byte	3,152,2,1,5,77,9
	.half	.L626-.L124
	.byte	3,1,1,5,94,9
	.half	.L627-.L626
	.byte	1,4,2,5,31,9
	.half	.L371-.L627
	.byte	3,255,126,1,5,22,9
	.half	.L478-.L371
	.byte	3,5,1,5,33,9
	.half	.L628-.L478
	.byte	1,5,44,9
	.half	.L480-.L628
	.byte	3,1,1,5,19,9
	.half	.L479-.L480
	.byte	1,5,16,9
	.half	.L629-.L479
	.byte	3,1,1,4,1,5,1,9
	.half	.L372-.L629
	.byte	3,251,0,1,7,9
	.half	.L157-.L372
	.byte	0,1,1
.L623:
	.sdecl	'.debug_ranges',debug,cluster('Dem_ClearDtcInit')
	.sect	'.debug_ranges'
.L156:
	.word	-1,.L124,0,.L157-.L124,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_ClearIsInProgress')
	.sect	'.debug_info'
.L158:
	.word	202
	.half	3
	.word	.L159
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_Clear.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L161,.L160
	.byte	2
	.word	.L129
	.byte	3
	.byte	'Dem_ClearIsInProgress',0,1,157,2,9
	.word	.L180
	.byte	1,1,1
	.word	.L126,.L376,.L125
	.byte	4
	.word	.L126,.L376
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_ClearIsInProgress')
	.sect	'.debug_abbrev'
.L159:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_ClearIsInProgress')
	.sect	'.debug_line'
.L160:
	.word	.L631-.L630
.L630:
	.half	3
	.word	.L633-.L632
.L632:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_Clear.c',0,0,0,0,0
.L633:
	.byte	5,13,7,0,5,2
	.word	.L126
	.byte	3,158,2,1,5,35,9
	.half	.L634-.L126
	.byte	1,5,50,9
	.half	.L635-.L634
	.byte	1,5,5,9
	.half	.L636-.L635
	.byte	1,5,1,9
	.half	.L110-.L636
	.byte	3,1,1,7,9
	.half	.L162-.L110
	.byte	0,1,1
.L631:
	.sdecl	'.debug_ranges',debug,cluster('Dem_ClearIsInProgress')
	.sect	'.debug_ranges'
.L161:
	.word	-1,.L126,0,.L162-.L126,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_ClearDTCBody')
	.sect	'.debug_info'
.L163:
	.word	508
	.half	3
	.word	.L164
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_Clear.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L166,.L165
	.byte	2
	.word	.L129
	.byte	3
	.byte	'Dem_ClearDTCBody',0,1,33,23
	.word	.L180
	.byte	1,1
	.word	.L112,.L377,.L111
	.byte	4
	.byte	'Selection',0,1,33,64
	.word	.L182,.L378
	.byte	4
	.byte	'DTCOrigin',0,1,33,93
	.word	.L180,.L379
	.byte	5
	.word	.L112,.L377
	.byte	6
	.word	.L380,.L381,.L2
	.byte	7
	.word	.L382,.L383
	.byte	8
	.word	.L384,.L381,.L2
	.byte	9
	.byte	'tempSelectionType',0,2,129,1,11
	.word	.L180,.L385
	.byte	0,0,6
	.word	.L386,.L387,.L5
	.byte	7
	.word	.L388,.L389
	.byte	8
	.word	.L390,.L387,.L5
	.byte	6
	.word	.L391,.L392,.L393
	.byte	7
	.word	.L394,.L395
	.byte	7
	.word	.L396,.L397
	.byte	7
	.word	.L398,.L399
	.byte	10
	.word	.L400,.L392,.L393
	.byte	0,6
	.word	.L401,.L402,.L5
	.byte	7
	.word	.L403,.L404
	.byte	10
	.word	.L405,.L402,.L5
	.byte	0,0,0,6
	.word	.L406,.L5,.L407
	.byte	7
	.word	.L408,.L409
	.byte	8
	.word	.L410,.L5,.L407
	.byte	6
	.word	.L401,.L411,.L407
	.byte	7
	.word	.L403,.L404
	.byte	10
	.word	.L405,.L411,.L407
	.byte	0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_ClearDTCBody')
	.sect	'.debug_abbrev'
.L164:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,17,1,18,1,0,0,9,52,0,3,8,58,15,59,15,57,15,73,16,2,6
	.byte	0,0,10,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_ClearDTCBody')
	.sect	'.debug_line'
.L165:
	.word	.L638-.L637
.L637:
	.half	3
	.word	.L640-.L639
.L639:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_Clear.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientBaseHandling.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemGen.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_MemUtils.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.h',0,0,0,0,0
.L640:
	.byte	5,23,7,0,5,2
	.word	.L112
	.byte	3,32,1,5,5,9
	.half	.L420-.L112
	.byte	3,8,1,5,27,9
	.half	.L641-.L420
	.byte	1,5,49,9
	.half	.L642-.L641
	.byte	1,5,47,9
	.half	.L643-.L642
	.byte	1,5,54,9
	.half	.L644-.L643
	.byte	3,1,1,5,52,9
	.half	.L645-.L644
	.byte	1,4,2,5,44,9
	.half	.L381-.L645
	.byte	3,216,0,1,5,25,9
	.half	.L646-.L381
	.byte	1,5,31,9
	.half	.L421-.L646
	.byte	3,2,1,5,5,9
	.half	.L647-.L421
	.byte	1,4,1,9
	.half	.L2-.L647
	.byte	3,168,127,1,5,38,7,9
	.half	.L648-.L2
	.byte	3,3,1,5,36,9
	.half	.L422-.L648
	.byte	3,2,1,5,14,9
	.half	.L649-.L422
	.byte	1,4,3,5,4,7,9
	.half	.L387-.L649
	.byte	3,220,0,1,5,7,7,9
	.half	.L650-.L387
	.byte	3,4,1,4,4,5,54,9
	.half	.L392-.L650
	.byte	3,140,127,1,4,3,5,32,9
	.half	.L393-.L392
	.byte	3,247,0,1,4,5,5,5,9
	.half	.L402-.L393
	.byte	3,84,1,5,35,9
	.half	.L651-.L402
	.byte	1,5,69,9
	.half	.L652-.L651
	.byte	1,5,67,9
	.half	.L653-.L652
	.byte	1,4,3,5,5,9
	.half	.L5-.L653
	.byte	3,232,0,1,5,30,9
	.half	.L654-.L5
	.byte	3,1,1,4,5,5,5,9
	.half	.L411-.L654
	.byte	3,151,127,1,5,35,9
	.half	.L655-.L411
	.byte	1,5,69,9
	.half	.L656-.L655
	.byte	1,5,67,9
	.half	.L657-.L656
	.byte	1,4,1,5,20,9
	.half	.L407-.L657
	.byte	3,80,1,5,13,9
	.half	.L658-.L407
	.byte	1,5,16,9
	.half	.L4-.L658
	.byte	3,2,1,5,9,9
	.half	.L659-.L4
	.byte	1,5,12,9
	.half	.L3-.L659
	.byte	3,34,1,5,5,9
	.half	.L660-.L3
	.byte	1,5,1,9
	.half	.L6-.L660
	.byte	3,2,1,7,9
	.half	.L167-.L6
	.byte	0,1,1
.L638:
	.sdecl	'.debug_ranges',debug,cluster('Dem_ClearDTCBody')
	.sect	'.debug_ranges'
.L166:
	.word	-1,.L112,0,.L167-.L112,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_Client_AreParametersAlreadyRequested')
	.sect	'.debug_info'
.L168:
	.word	306
	.half	3
	.word	.L169
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_Clear.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L171,.L170
	.byte	2
	.word	.L129
	.byte	3
	.byte	'Dem_Client_AreParametersAlreadyRequested',0,1,237,1,16
	.word	.L180
	.byte	1,1
	.word	.L118,.L412,.L117
	.byte	4
	.byte	'ClientId',0,1,237,1,63
	.word	.L180,.L413
	.byte	4
	.byte	'DTC',0,1,237,1,80
	.word	.L182,.L414
	.byte	4
	.byte	'DTCFormat',0,1,237,1,103
	.word	.L180,.L415
	.byte	4
	.byte	'DTCOrigin',0,1,237,1,132,1
	.word	.L180,.L416
	.byte	5
	.word	.L118,.L412
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_Client_AreParametersAlreadyRequested')
	.sect	'.debug_abbrev'
.L169:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_Client_AreParametersAlreadyRequested')
	.sect	'.debug_line'
.L170:
	.word	.L662-.L661
.L661:
	.half	3
	.word	.L664-.L663
.L663:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_Clear.c',0,0,0,0,0
.L664:
	.byte	5,19,7,0,5,2
	.word	.L118
	.byte	3,241,1,1,5,98,9
	.half	.L96-.L118
	.byte	3,3,1,5,14,9
	.half	.L665-.L96
	.byte	1,5,26,9
	.half	.L666-.L665
	.byte	1,5,25,9
	.half	.L460-.L666
	.byte	1,5,35,9
	.half	.L667-.L460
	.byte	1,5,13,9
	.half	.L668-.L667
	.byte	1,5,73,7,9
	.half	.L669-.L668
	.byte	1,5,84,9
	.half	.L670-.L669
	.byte	1,5,123,7,9
	.half	.L671-.L670
	.byte	1,5,134,1,9
	.half	.L672-.L671
	.byte	1,5,98,9
	.half	.L673-.L672
	.byte	1,5,5,9
	.half	.L97-.L673
	.byte	1,5,1,9
	.half	.L100-.L97
	.byte	3,1,1,7,9
	.half	.L172-.L100
	.byte	0,1,1
.L662:
	.sdecl	'.debug_ranges',debug,cluster('Dem_Client_AreParametersAlreadyRequested')
	.sect	'.debug_ranges'
.L171:
	.word	-1,.L118,0,.L172-.L118,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_InvalidateSelectDTCParams')
	.sect	'.debug_info'
.L173:
	.word	228
	.half	3
	.word	.L174
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_Clear.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L176,.L175
	.byte	2
	.word	.L129
	.byte	3
	.byte	'Dem_InvalidateSelectDTCParams',0,1,142,2,13,1,1
	.word	.L122,.L417,.L121
	.byte	4
	.word	.L122,.L417
	.byte	5
	.byte	'clientId',0,1,144,2,22
	.word	.L180,.L418
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_InvalidateSelectDTCParams')
	.sect	'.debug_abbrev'
.L174:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_InvalidateSelectDTCParams')
	.sect	'.debug_line'
.L175:
	.word	.L675-.L674
.L674:
	.half	3
	.word	.L677-.L676
.L676:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_Clear.c',0,0,0,0,0
.L677:
	.byte	5,19,7,0,5,2
	.word	.L122
	.byte	3,144,2,1,5,59,9
	.half	.L475-.L122
	.byte	1,5,40,9
	.half	.L109-.L475
	.byte	3,2,1,5,57,9
	.half	.L678-.L109
	.byte	1,5,81,9
	.half	.L679-.L678
	.byte	1,5,69,9
	.half	.L477-.L679
	.byte	3,126,1,5,59,9
	.half	.L108-.L477
	.byte	1,5,1,7,9
	.half	.L680-.L108
	.byte	3,4,1,7,9
	.half	.L177-.L680
	.byte	0,1,1
.L675:
	.sdecl	'.debug_ranges',debug,cluster('Dem_InvalidateSelectDTCParams')
	.sect	'.debug_ranges'
.L176:
	.word	-1,.L122,0,.L177-.L122,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_ClearResult')
	.sect	'.debug_info'
.L178:
	.word	168
	.half	3
	.word	.L179
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_Clear.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L129
	.byte	3
	.byte	'Dem_ClearResult',0,32,26,23
	.word	.L180
	.byte	5,3
	.word	Dem_ClearResult
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_ClearResult')
	.sect	'.debug_abbrev'
.L179:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_ClearDTC')
	.sect	'.debug_loc'
.L233:
	.word	-1,.L120,.L102-.L120,.L228-.L120
	.half	1
	.byte	92
	.word	.L473-.L120,.L472-.L120
	.half	1
	.byte	84
	.word	0,0
.L229:
	.word	-1,.L120,0,.L461-.L120
	.half	1
	.byte	84
	.word	.L103-.L120,.L467-.L120
	.half	1
	.byte	88
	.word	.L103-.L120,.L467-.L120
	.half	1
	.byte	84
	.word	.L469-.L120,.L470-.L120
	.half	1
	.byte	88
	.word	0,0
.L230:
	.word	-1,.L120,0,.L462-.L120
	.half	1
	.byte	85
	.word	.L103-.L120,.L467-.L120
	.half	1
	.byte	85
	.word	.L467-.L120,.L468-.L120
	.half	1
	.byte	89
	.word	.L470-.L120,.L471-.L120
	.half	1
	.byte	89
	.word	0,0
.L231:
	.word	-1,.L120,0,.L463-.L120
	.half	1
	.byte	86
	.word	.L464-.L120,.L228-.L120
	.half	1
	.byte	90
	.word	.L103-.L120,.L468-.L120
	.half	1
	.byte	86
	.word	0,0
.L119:
	.word	-1,.L120,0,.L228-.L120
	.half	2
	.byte	138,0
	.word	0,0
.L232:
	.word	-1,.L120,.L465-.L120,.L466-.L120
	.half	1
	.byte	91
	.word	.L466-.L120,.L105-.L120
	.half	1
	.byte	82
	.word	.L105-.L120,.L472-.L120
	.half	1
	.byte	91
	.word	.L472-.L120,.L106-.L120
	.half	1
	.byte	82
	.word	.L106-.L120,.L228-.L120
	.half	1
	.byte	91
	.word	.L474-.L120,.L104-.L120
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_ClearDTCBody')
	.sect	'.debug_loc'
.L379:
	.word	-1,.L112,0,.L419-.L112
	.half	1
	.byte	85
	.word	.L420-.L112,.L377-.L112
	.half	1
	.byte	88
	.word	.L419-.L112,.L422-.L112
	.half	1
	.byte	84
	.word	.L3-.L112,.L6-.L112
	.half	1
	.byte	85
	.word	0,0
.L111:
	.word	-1,.L112,0,.L377-.L112
	.half	2
	.byte	138,0
	.word	0,0
.L389:
	.word	0,0
.L409:
	.word	0,0
.L378:
	.word	-1,.L112,0,.L419-.L112
	.half	1
	.byte	84
	.word	.L3-.L112,.L6-.L112
	.half	1
	.byte	84
	.word	0,0
.L404:
	.word	0,0
.L399:
	.word	0,0
.L383:
	.word	0,0
.L385:
	.word	-1,.L112,.L421-.L112,.L422-.L112
	.half	5
	.byte	144,32,157,32,0
	.word	.L3-.L112,.L6-.L112
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L395:
	.word	0,0
.L397:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_ClearDtcInit')
	.sect	'.debug_loc'
.L123:
	.word	-1,.L124,0,.L370-.L124
	.half	2
	.byte	138,0
	.word	0,0
.L373:
	.word	0,0
.L375:
	.word	-1,.L124,.L480-.L124,.L370-.L124
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L374:
	.word	-1,.L124,.L478-.L124,.L479-.L124
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_ClearIsInProgress')
	.sect	'.debug_loc'
.L125:
	.word	-1,.L126,0,.L376-.L126
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_ClearMainFunction')
	.sect	'.debug_loc'
.L293:
	.word	0,0
.L313:
	.word	0,0
.L259:
	.word	0,0
.L252:
	.word	0,0
.L113:
	.word	-1,.L114,0,.L235-.L114
	.half	2
	.byte	138,0
	.word	0,0
.L278:
	.word	0,0
.L263:
	.word	0,0
.L276:
	.word	0,0
.L345:
	.word	0,0
.L246:
	.word	0,0
.L274:
	.word	0,0
.L343:
	.word	0,0
.L285:
	.word	0,0
.L268:
	.word	0,0
.L298:
	.word	0,0
.L254:
	.word	0,0
.L350:
	.word	-1,.L114,.L351-.L114,.L354-.L114
	.half	1
	.byte	81
	.word	.L58-.L114,.L443-.L114
	.half	1
	.byte	81
	.word	.L63-.L114,.L10-.L114
	.half	1
	.byte	81
	.word	0,0
.L261:
	.word	-1,.L114,.L262-.L114,.L271-.L114
	.half	5
	.byte	144,32,157,32,0
	.word	.L20-.L114,.L428-.L114
	.half	5
	.byte	144,32,157,32,0
	.word	.L25-.L114,.L15-.L114
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L319:
	.word	-1,.L114,.L320-.L114,.L323-.L114
	.half	5
	.byte	144,32,157,32,0
	.word	.L44-.L114,.L435-.L114
	.half	5
	.byte	144,32,157,32,0
	.word	.L49-.L114,.L32-.L114
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L237:
	.word	-1,.L114,.L423-.L114,.L10-.L114
	.half	1
	.byte	88
	.word	0,0
.L236:
	.word	-1,.L114,.L244-.L114,.L424-.L114
	.half	1
	.byte	89
	.word	.L13-.L114,.L439-.L114
	.half	1
	.byte	89
	.word	0,0
.L325:
	.word	-1,.L114,.L323-.L114,.L433-.L114
	.half	1
	.byte	95
	.word	.L434-.L114,.L44-.L114
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L356:
	.word	-1,.L114,.L354-.L114,.L58-.L114
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L317:
	.word	-1,.L114,.L432-.L114,.L318-.L114
	.half	1
	.byte	89
	.word	0,0
.L280:
	.word	-1,.L114,.L425-.L114,.L426-.L114
	.half	1
	.byte	95
	.word	.L427-.L114,.L20-.L114
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L347:
	.word	-1,.L114,.L440-.L114,.L441-.L114
	.half	1
	.byte	89
	.word	.L441-.L114,.L442-.L114
	.half	1
	.byte	95
	.word	0,0
.L288:
	.word	-1,.L114,.L431-.L114,.L25-.L114
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L360:
	.word	-1,.L114,.L446-.L114,.L63-.L114
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L329:
	.word	-1,.L114,.L438-.L114,.L49-.L114
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L287:
	.word	-1,.L114,.L429-.L114,.L430-.L114
	.half	1
	.byte	95
	.word	0,0
.L359:
	.word	-1,.L114,.L444-.L114,.L445-.L114
	.half	1
	.byte	95
	.word	0,0
.L328:
	.word	-1,.L114,.L436-.L114,.L437-.L114
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_Client_AreParametersAlreadyRequested')
	.sect	'.debug_loc'
.L413:
	.word	-1,.L118,0,.L460-.L118
	.half	1
	.byte	84
	.word	0,0
.L414:
	.word	-1,.L118,0,.L412-.L118
	.half	1
	.byte	85
	.word	0,0
.L415:
	.word	-1,.L118,0,.L412-.L118
	.half	1
	.byte	86
	.word	0,0
.L416:
	.word	-1,.L118,0,.L412-.L118
	.half	1
	.byte	87
	.word	0,0
.L117:
	.word	-1,.L118,0,.L412-.L118
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_DcmCancelOperation')
	.sect	'.debug_loc'
.L127:
	.word	-1,.L128,0,.L234-.L128
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_DcmCheckClearParameter')
	.sect	'.debug_loc'
.L183:
	.word	-1,.L116,0,.L448-.L116
	.half	1
	.byte	84
	.word	.L452-.L116,.L453-.L116
	.half	1
	.byte	88
	.word	.L79-.L116,.L454-.L116
	.half	1
	.byte	88
	.word	.L79-.L116,.L455-.L116
	.half	1
	.byte	84
	.word	.L81-.L116,.L457-.L116
	.half	1
	.byte	88
	.word	.L457-.L116,.L200-.L116
	.half	1
	.byte	84
	.word	0,0
.L184:
	.word	-1,.L116,0,.L449-.L116
	.half	1
	.byte	85
	.word	.L71-.L116,.L451-.L116
	.half	1
	.byte	89
	.word	.L79-.L116,.L455-.L116
	.half	1
	.byte	85
	.word	.L201-.L116,.L92-.L116
	.half	1
	.byte	89
	.word	0,0
.L188:
	.word	-1,.L116,.L455-.L116,.L456-.L116
	.half	1
	.byte	82
	.word	.L81-.L116,.L200-.L116
	.half	1
	.byte	82
	.word	0,0
.L192:
	.word	0,0
.L185:
	.word	-1,.L116,0,.L450-.L116
	.half	1
	.byte	86
	.word	0,.L181-.L116
	.half	2
	.byte	145,120
	.word	.L79-.L116,.L455-.L116
	.half	1
	.byte	86
	.word	0,0
.L115:
	.word	-1,.L116,0,.L447-.L116
	.half	2
	.byte	138,0
	.word	.L447-.L116,.L181-.L116
	.half	2
	.byte	138,8
	.word	.L181-.L116,.L181-.L116
	.half	2
	.byte	138,0
	.word	0,0
.L226:
	.word	0,0
.L220:
	.word	0,0
.L203:
	.word	0,0
.L213:
	.word	0,0
.L187:
	.word	-1,.L116,.L200-.L116,.L458-.L116
	.half	1
	.byte	82
	.word	.L93-.L116,.L459-.L116
	.half	1
	.byte	82
	.word	0,0
.L209:
	.word	0,0
.L196:
	.word	0,0
.L224:
	.word	0,0
.L218:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_InvalidateSelectDTCParams')
	.sect	'.debug_loc'
.L121:
	.word	-1,.L122,0,.L417-.L122
	.half	2
	.byte	138,0
	.word	0,0
.L418:
	.word	-1,.L122,.L475-.L122,.L417-.L122
	.half	1
	.byte	95
	.word	.L476-.L122,.L477-.L122
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L681:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Dem_ClearDTCBody')
	.sect	'.debug_frame'
	.word	12
	.word	.L681,.L112,.L377-.L112
	.sdecl	'.debug_frame',debug,cluster('Dem_ClearMainFunction')
	.sect	'.debug_frame'
	.word	12
	.word	.L681,.L114,.L235-.L114
	.sdecl	'.debug_frame',debug,cluster('Dem_DcmCheckClearParameter')
	.sect	'.debug_frame'
	.word	36
	.word	.L681,.L116,.L181-.L116
	.byte	4
	.word	(.L447-.L116)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L181-.L447)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_Client_AreParametersAlreadyRequested')
	.sect	'.debug_frame'
	.word	24
	.word	.L681,.L118,.L412-.L118
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Dem_ClearDTC')
	.sect	'.debug_frame'
	.word	12
	.word	.L681,.L120,.L228-.L120
	.sdecl	'.debug_frame',debug,cluster('Dem_InvalidateSelectDTCParams')
	.sect	'.debug_frame'
	.word	12
	.word	.L681,.L122,.L417-.L122
	.sdecl	'.debug_frame',debug,cluster('Dem_ClearDtcInit')
	.sect	'.debug_frame'
	.word	12
	.word	.L681,.L124,.L370-.L124
	.sdecl	'.debug_frame',debug,cluster('Dem_ClearIsInProgress')
	.sect	'.debug_frame'
	.word	24
	.word	.L681,.L126,.L376-.L126
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Dem_DcmCancelOperation')
	.sect	'.debug_frame'
	.word	12
	.word	.L681,.L128,.L234-.L128

; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   294  
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   295  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   296  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\main\Dem_Clear.c	   297  

	; Module end
