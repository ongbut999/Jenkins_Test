	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc15960a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Dem\\src\\Dem_EvMemApi.src BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c'

	
$TC16X
	
	.sdecl	'.text.Dem_EvMemApi.Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility',code,cluster('Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility')
	.sect	'.text.Dem_EvMemApi.Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility'
	.align	2
	
	.global	Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	     3  #include "Dem.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	     4  #include "Dem_Dcm.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	     5  #include "Rte_Dem.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	     6  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	     7  #include "Dem_EvMemApi.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	     8  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	     9  #include "Dem_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    10  #include "Dem_Lock.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    11  #include "Dem_EnvMain.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    12  #include "Dem_Mapping.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    13  #include "Dem_DTCs.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    14  #include "Dem_Obd.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    15  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    16  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    17  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    18  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    19  static Dem_DtcIdType DemDtcIdCopy;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    20  static uint32 DemDtcCodeCopy;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    21  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    22  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    23  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    24  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    25     Sync Functions DCM <-> DEM
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    26     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    27  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    28  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    29  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    30  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    31   Helper Function
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    32   ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    33   */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    34  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    35  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    36  uint16_least Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility(Dem_DtcIdType DtcId, Dem_DTCOriginType DTCOrigin, Dem_boolean_least ShadowEntriesVisible)
; Function Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility
.L302:
Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility:	.type	func

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    37  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    38  	if (DTCOrigin == DEM_DTC_ORIGIN_PRIMARY_MEMORY)
	jne	d5,#1,.L2
.L1441:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    39  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    40  		return Dem_EvMemGetEventMemoryLocIdOfDtcWithVisibility (DtcId, DEM_CFG_EVMEM_MEMID_PRIMARY, ShadowEntriesVisible);
	mov	d5,#0
.L943:
	call	Dem_EvMemGetEventMemoryLocIdOfDtcWithVisibility
.L944:
	j	.L3
.L2:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    41  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    42  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    43  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    44  	if (DTCOrigin == DEM_DTC_ORIGIN_SECONDARY_MEMORY)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    45  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    46  		return Dem_EvMemGetEventMemoryLocIdOfDtcWithVisibility (DtcId, DEM_CFG_EVMEM_MEMID_SECONDARY, ShadowEntriesVisible);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    47  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    48  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    49  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    50  #if (DEM_CFG_MAX_NUMBER_EVENT_ENTRY_MIRROR > 0)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    51  	if (DTCOrigin == DEM_DTC_ORIGIN_MIRROR_MEMORY)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    52  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    53  		return Dem_EvMemGetEventMemoryLocIdOfDtc (DtcId, DEM_CFG_EVMEM_MEMID_MIRROR);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    54  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    55  #elif DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    56  	if (DTCOrigin == DEM_DTC_ORIGIN_MIRROR_MEMORY)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    57  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    58  		return Dem_EvMemGetShadowMemoryLocIdOfDtc(DtcId, DEM_CFG_EVMEM_MEMID_SHADOW);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    59  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    60  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    61  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    62  	/* should never occur */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    63  	return DEM_EVMEM_INVALID_LOCID;
	mov.u	d2,#65535
.L1442:
	j	.L4

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    64  }
.L4:
.L3:
	ret
.L934:
	
__Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility_function_end:
	.size	Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility,__Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility_function_end-Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility
.L397:
	; End of function
	
	.sdecl	'.text.Dem_EvMemApi.Dem_EvMemReqSyncDataRecord',code,cluster('Dem_EvMemReqSyncDataRecord')
	.sect	'.text.Dem_EvMemApi.Dem_EvMemReqSyncDataRecord'
	.align	2
	

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    65  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    66  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    67  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    68  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    69   Sync Functions DCM <-> DEM
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    70   ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    71   */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    72  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    73  #if DEM_CFG_SERVICE_READDTCINFORMATION_SUBFUNC_0x04 || DEM_CFG_SERVICE_READDTCINFORMATION_SUBFUNC_0x06
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    74  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    75  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    76  Dem_EvMemDTCRecordType Dem_EvMemDTCRecord;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    77  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    78  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    79  DEM_INLINE void Dem_EvMemInvalidateSyncDataRecord(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    80  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    81  	DEM_ENTERLOCK_DCM();
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    82  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    83  	Dem_EvMemDTCRecord.DtcId = DEM_DTCID_INVALID;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    84  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    85      DEM_EXITLOCK_DCM();
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    86  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    87  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    88  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    89  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    90  static Dem_boolean_least Dem_EvMemReqSyncDataRecord(Dem_DtcIdType DtcId, Dem_DTCOriginType DTCOrigin)
; Function Dem_EvMemReqSyncDataRecord
.L304:
Dem_EvMemReqSyncDataRecord:	.type	func

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    91  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    92  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    93  	Dem_boolean_least returnStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    94  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    95  	DEM_ENTERLOCK_DCM();
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    96  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    97  	if ((Dem_EvMemDTCRecord.DtcId != DtcId) || (Dem_EvMemDTCRecord.DTCOrigin != DTCOrigin))
	movh.a	a15,#@his(Dem_EvMemDTCRecord)
	lea	a15,[a15]@los(Dem_EvMemDTCRecord)
.L1447:
	ld.hu	d15,[a15]0
.L1448:
	jne	d15,d4,.L5
.L1449:
	ld.bu	d15,[a15]2
.L1450:
	jeq	d15,d5,.L6
.L5:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    98  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	    99  		Dem_EvMemDTCRecord.DtcId = DtcId;
	st.h	[a15],d4
.L1451:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   100  		Dem_EvMemDTCRecord.DTCOrigin = DTCOrigin;
	st.b	[a15]2,d5
.L1452:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   101  		Dem_EvMemDTCRecord.ReqCounter++;
	mov.aa	a2,a15
	add.a	a2,#3
	ld.bu	d15,[a2]
.L1453:
	add	d15,#1
	st.b	[a2],d15
.L6:
	mov.aa	a2,a15
	add.a	a2,#3
.L1454:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   102  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   103  	returnStatus = (Dem_boolean_least)(Dem_EvMemDTCRecord.ReqCounter == Dem_EvMemDTCRecord.DemCounter);
	ld.bu	d0,[a2]
.L1455:
	ld.bu	d15,[a15]4
.L1456:
	eq	d2,d0,d15
.L945:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   104  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   105  	DEM_EXITLOCK_DCM();
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   106  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   107  	return returnStatus;
	j	.L7

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   108  }
.L7:
	ret
.L938:
	
__Dem_EvMemReqSyncDataRecord_function_end:
	.size	Dem_EvMemReqSyncDataRecord,__Dem_EvMemReqSyncDataRecord_function_end-Dem_EvMemReqSyncDataRecord
.L402:
	; End of function
	
	.sdecl	'.text.Dem_EvMemApi.Dem_EvMemApiMainFunction',code,cluster('Dem_EvMemApiMainFunction')
	.sect	'.text.Dem_EvMemApi.Dem_EvMemApiMainFunction'
	.align	2
	
	.global	Dem_EvMemApiMainFunction

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   109  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   110  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   111  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   112  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   113  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   114  void Dem_EvMemApiMainFunction(void)
; Function Dem_EvMemApiMainFunction
.L306:
Dem_EvMemApiMainFunction:	.type	func

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   115  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   116  #if DEM_CFG_SERVICE_READDTCINFORMATION_SUBFUNC_0x04 || DEM_CFG_SERVICE_READDTCINFORMATION_SUBFUNC_0x06
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   117  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   118  	uint16_least LocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   119  	Dem_DtcIdType DtcIdStored;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   120  	Dem_DTCOriginType DTCOriginStored;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   121  	uint8 ReqCounterStored;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   122  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   123  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   124  	DEM_ENTERLOCK_DCM();
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   125  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   126  	/* local copy of request parameters */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   127  	DtcIdStored = Dem_EvMemDTCRecord.DtcId;
	movh.a	a15,#@his(Dem_EvMemDTCRecord)
	lea	a15,[a15]@los(Dem_EvMemDTCRecord)
.L1423:
	ld.hu	d4,[a15]0
.L946:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   128  	DTCOriginStored = Dem_EvMemDTCRecord.DTCOrigin;
	ld.bu	d5,[a15]2
.L947:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   129  	ReqCounterStored = Dem_EvMemDTCRecord.ReqCounter;
	ld.bu	d8,[a15]3
.L948:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   130  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   131  	if (ReqCounterStored != Dem_EvMemDTCRecord.DemCounter)
	mov.aa	a13,a15
	add.a	a13,#4
	ld.bu	d15,[a13]
.L1424:
	jeq	d15,d8,.L8
.L1425:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   132  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   133  		Dem_EvMemDTCRecord.IsValid = FALSE;
	mov.aa	a12,a15
	add.a	a12,#5
.L1426:
	mov	d15,#0
.L1427:
	st.b	[a12],d15
.L926:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
	mov	d0,#0
.L1428:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
	jeq	d4,#0,.L9
.L1429:
	ge.u	d15,d4,#5
.L1430:
	cmovn	d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
.L10:
.L9:
	j	.L11

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }      (inlined)
.L11:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   134  		if (Dem_isDtcIdValid (DtcIdStored))
	jeq	d0,#0,.L12
.L927:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   541  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   542  DEM_INLINE void Dem_EvMemSetEventMemTrigger(uint16_least LocId, Dem_TriggerType Trigger)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   543  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   544     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   545     DEM_EVMEM_USEVAR(Trigger);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   546  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   547  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   548     Dem_EvMemEventMemory[LocId].Trigger = Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   549  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   550  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   551  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   552  /* --- Data --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   553  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is used to get address of element data and to fill the data block */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   554  DEM_INLINE uint8 *Dem_EvMemGetEventMemDataByPtr(Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   555  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   557  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   558  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   559  DEM_INLINE uint8 *Dem_EvMemGetEventMemData(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   560  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   561     return Dem_EvMemGetEventMemDataByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   562  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   563  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   564  DEM_INLINE uint16 Dem_EvMemGetEventMemDataSize(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   565  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   566     return DEM_SIZEOF_VAR(Dem_EvMemEventMemory[0].Data);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   567  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   568  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   569  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   570     Event Memory Status
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   571     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   572  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   573  /* the bits DEM_EVMEM_STSMASK_STORED and DEM_EVMEM_STSMASK_DELETED shall not be set at the same time */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   574  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   575  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedSLC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   576  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   577     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED)) == (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   578  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   579  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   580  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestCompleteTFC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   581  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   582      return ((Status & DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC) == DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   583  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   584  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   585  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedTFC (uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   586  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   587      return ((Status & DEM_EVMEM_STSMASK_TESTFAILED_TFC) == DEM_EVMEM_STSMASK_TESTFAILED_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   588  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   589  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   590  DEM_INLINE Dem_boolean_least Dem_EvMemIsStored(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   591  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   592     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   593  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   594  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   595  DEM_INLINE Dem_boolean_least Dem_EvMemIsEmpty(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   596  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   597     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   598  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   599  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   600  DEM_INLINE Dem_boolean_least Dem_EvMemIsDeleted(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   601  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   602     DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   603  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   604  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   605     return (Dem_boolean_least)((Status & DEM_EVMEM_STSMASK_DELETED) != 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   606  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   607     return FALSE;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   608  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   609  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   610  DEM_INLINE uint16_least Dem_EvMemSetToEmpty(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   611  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   612  	return 0u;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   613  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   614  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   615  DEM_INLINE uint16_least Dem_EvMemSetToDelete(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   616  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   617  	DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   618  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   619  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   620  	return (Status | DEM_EVMEM_STSMASK_DELETED) & (~DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   621  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   622      return Dem_EvMemSetToEmpty();
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   623  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   624  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   625  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   626  DEM_INLINE Dem_boolean_least Dem_EvMemGetShadowVisibility(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   627  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   628  	return DEM_CFG_EVMEM_SHADOW_ENTRIES_VISIBLE;
	mov	d6,#0

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   628  	return DEM_CFG_EVMEM_SHADOW_ENTRIES_VISIBLE;      (inlined)
	j	.L13

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   629  }      (inlined)
.L13:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   135  		{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   136  			LocId = Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility(DtcIdStored, DTCOriginStored, Dem_EvMemGetShadowVisibility());
	call	Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility
.L930:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
	lt.u	d15,d2,#5
.L1431:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);      (inlined)
	j	.L14

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }      (inlined)
.L14:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   137  			Dem_EvMemDTCRecord.IsValid = (boolean) Dem_EvMemIsEventMemLocIdValid (LocId);
	st.b	[a12],d15
.L1432:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   138  			if (Dem_EvMemDTCRecord.IsValid)
	jeq	d15,#0,.L15
.L1433:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   139  			{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   140  				Dem_EvMemDTCRecord.EventMemory = Dem_EvMemEventMemory[LocId];
	mul	d15,d2,#20
.L1434:
	movh.a	a2,#@his(Dem_EvMemEventMemory)
	lea	a2,[a2]@los(Dem_EvMemEventMemory)
.L1435:
	addsc.a	a2,a2,d15,#0
	lea	a2,[a2]0
.L1436:
	lea	a15,[a15]8
	mov.a	a4,#4
.L16:
	ld.w	d15,[a2+]
	st.w	[a15+],d15
	loop	a4,.L16
.L15:
.L12:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   141  			}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   142  		}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   143  		Dem_EvMemDTCRecord.DemCounter = ReqCounterStored;
	st.b	[a13],d8
.L8:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   144  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   145  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   146  	DEM_EXITLOCK_DCM();
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   147  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   148  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   149  }
	ret
.L921:
	
__Dem_EvMemApiMainFunction_function_end:
	.size	Dem_EvMemApiMainFunction,__Dem_EvMemApiMainFunction_function_end-Dem_EvMemApiMainFunction
.L392:
	; End of function
	
	.sdecl	'.text.Dem_EvMemApi.Dem_DisableDTCRecordUpdate',code,cluster('Dem_DisableDTCRecordUpdate')
	.sect	'.text.Dem_EvMemApi.Dem_DisableDTCRecordUpdate'
	.align	2
	
	.global	Dem_DisableDTCRecordUpdate

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   150  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   151  #if DEM_CFG_SERVICE_READDTCINFORMATION_SUBFUNC_0x04 || DEM_CFG_SERVICE_READDTCINFORMATION_SUBFUNC_0x06
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   152  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   153   Dem_DisableDTCRecordUpdate
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   154  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   155   Description:   Disables the event memory update of a specific DTC (only one at one time)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   156   Attributes:    Synchronous/Non Reentrant
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   157  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   158   DTC			Selects the DTC in UDS format, for which DTC record update shall be disabled.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   159   DTCOrigin		If the Dem supports more than one event memory,
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   160                  this parameter is used to select the source memory for which DTC record update shall be disabled.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   161   Return:        Status of the operation to disable the event memory update of a specific DTC.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   162   ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   163   */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   164  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   165  Dem_ReturnDisableDTCRecordUpdateType Dem_DisableDTCRecordUpdate(uint32 DTC,Dem_DTCOriginType DTCOrigin)
; Function Dem_DisableDTCRecordUpdate
.L308:
Dem_DisableDTCRecordUpdate:	.type	func
	movh.a	a15,#@his(Dem_EvMemDTCRecord)
	lea	a15,[a15]@los(Dem_EvMemDTCRecord)
.L1158:
	mov	d15,#0
.L1159:
	st.h	[a15],d15
.L627:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   166  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   167  	DEM_UNUSED_PARAM(DTC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   168  	DEM_UNUSED_PARAM(DTCOrigin);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   169  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   170      Dem_EvMemInvalidateSyncDataRecord ();
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   171  	return DEM_DISABLE_DTCRECUP_OK;
	mov	d2,#0
.L1160:
	j	.L17

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   172  }
.L17:
	ret
.L622:
	
__Dem_DisableDTCRecordUpdate_function_end:
	.size	Dem_DisableDTCRecordUpdate,__Dem_DisableDTCRecordUpdate_function_end-Dem_DisableDTCRecordUpdate
.L347:
	; End of function
	
	.sdecl	'.text.Dem_EvMemApi.Dem_EnableDTCRecordUpdate',code,cluster('Dem_EnableDTCRecordUpdate')
	.sect	'.text.Dem_EvMemApi.Dem_EnableDTCRecordUpdate'
	.align	2
	
	.global	Dem_EnableDTCRecordUpdate

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   173  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   174  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   175   Dem_EnableDTCRecordUpdate
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   176  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   177   Description:   Enables the DTC record update
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   178   Attributes:    Synchronous/Non Reentrant
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   179  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   180   Return:        E_OK:     Operation was successful
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   181   E_NOT_OK: Operation failed
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   182   ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   183   */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   184  Std_ReturnType Dem_EnableDTCRecordUpdate(void)
; Function Dem_EnableDTCRecordUpdate
.L310:
Dem_EnableDTCRecordUpdate:	.type	func

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   185  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   186  	return E_OK;
	mov	d2,#0
.L1165:
	j	.L18

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   187  }
.L18:
	ret
.L629:
	
__Dem_EnableDTCRecordUpdate_function_end:
	.size	Dem_EnableDTCRecordUpdate,__Dem_EnableDTCRecordUpdate_function_end-Dem_EnableDTCRecordUpdate
.L352:
	; End of function
	
	.sdecl	'.text.Dem_EvMemApi.Dem_GetExtendedDataRecordByDTC',code,cluster('Dem_GetExtendedDataRecordByDTC')
	.sect	'.text.Dem_EvMemApi.Dem_GetExtendedDataRecordByDTC'
	.align	2
	
	.global	Dem_GetExtendedDataRecordByDTC

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   188  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   189  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   190  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   191  #if DEM_CFG_SERVICE_READDTCINFORMATION_SUBFUNC_0x06
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   192  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   193   Dem_GetExtendedDataRecordByDTC
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   194  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   195   Description:        Gets extended data by DTC. The function stores the data in the provided DestBuffer.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   196   Attributes:         Asynchronous/Non Reentrant
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   197  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   198   DTC:                This is the DTC the 'Extended Data Record' is assigned to.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   199   DTCKind:            This parameter defines the requested DTC, either only OBD-relevant DTCs or all DTCs
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   200   DTCOrigin:          If the Dem supports more than one event memory, this parameter is used to select
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   201                       the source memory the DTCs shall be read from.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   202   ExtendedDataNumber: Identification/Number of requested extended data record.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   203                       The values 0xFE and 0xFF are not allowed. Valid values are from 0x01 to 0xEF.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   204   DestBuffer:         This parameter contains a byte pointer that points to the buffer, to which the extended data record shall be written to.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   205                       The format is raw hexadecimal values and contains no header-information.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   206   BufSize:            When the function is called this parameter contains the maximum number of data bytes that can be written to the buffer.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   207                       The function returns the actual number of written data bytes in this parameter.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   208   Return:             Status of the operation to retrieve extended data by DTC.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   209  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   210   ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   211   */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   212  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   213  Dem_ReturnGetExtendedDataRecordByDTCType Dem_GetExtendedDataRecordByDTC(uint32 DTC,
; Function Dem_GetExtendedDataRecordByDTC
.L312:
Dem_GetExtendedDataRecordByDTC:	.type	func
	sub.a	a10,#8
.L949:
	mov	d8,d4
.L955:
	st.b	[a10],d6
	mov	d9,d7
.L956:
	mov.aa	a12,a4
.L957:
	mov.aa	a13,a5
.L771:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     3  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     4  #ifndef DEM_EVMEMAPI_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     5  #define DEM_EVMEMAPI_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     6  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     7  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     8  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     9  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    10  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    11     Interface Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    12     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    13  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    14  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    15  typedef struct
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    16  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    17    /* DEM API write */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    18    Dem_DtcIdType            DtcId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    19    Dem_DTCOriginType        DTCOrigin;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    20    uint8                    ReqCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    21    /* DEM Main write */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    22    uint8                    DemCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    23    boolean                  IsValid;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    24    Dem_EvMemEventMemoryType EventMemory;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    25  } Dem_EvMemDTCRecordType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    26  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    29  extern Dem_EvMemDTCRecordType Dem_EvMemDTCRecord;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    30  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    31  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    32  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    33  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    34  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    35  /* Read Events From EvMem */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    36  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    37  void Dem_EvMemApiMainFunction(void);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    38  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    39  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    41  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    42  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    43     Inline Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    44     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    45  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    46  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    47  DEM_INLINE Dem_boolean_least Dem_EvMemIsDtcKindValid (Dem_DTCKindType DTCKind)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    48  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    49      return (DTCKind == DEM_DTC_KIND_ALL_DTCS);
	eq	d15,d5,#1
.L1278:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    49      return (DTCKind == DEM_DTC_KIND_ALL_DTCS);      (inlined)
	j	.L19

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    50  }      (inlined)
.L19:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   214  		Dem_DTCKindType DTCKind,
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   215  		Dem_DTCOriginType DTCOrigin,
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   216  		uint8 ExtendedDataNumber,
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   217  		uint8* DestBuffer,
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   218  		uint16* BufSize)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   219  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   220  	Dem_DtcIdType DtcId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   221  	Dem_EventIdType EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   222  	Dem_TriggerType Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   223  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   224  	if (!Dem_EvMemIsDtcKindValid (DTCKind))
	jne	d15,#0,.L20
.L1279:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   225  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   226  		DEM_DET(DEM_DET_APIID_GETEXTENDEDDATARECORDBYDTC, DEM_E_WRONG_CONFIGURATION);
	mov	d4,#54
.L951:
	mov	d5,#0
.L952:
	mov	d6,#32
.L953:
	mov	d7,#16
.L954:
	call	Det_ReportError
.L950:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   227  		return DEM_RECORD_WRONG_DTCKIND;
	mov	d2,#3
.L1280:
	j	.L21
.L20:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   228  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   229  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   230  	if (!Dem_EvMemIsDtcOriginValid (&DTCOrigin))
	lea	a15,[a10]0
.L773:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     3  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     4  #ifndef DEM_EVMEMAPI_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     5  #define DEM_EVMEMAPI_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     6  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     7  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     8  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     9  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    10  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    11     Interface Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    12     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    13  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    14  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    15  typedef struct
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    16  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    17    /* DEM API write */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    18    Dem_DtcIdType            DtcId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    19    Dem_DTCOriginType        DTCOrigin;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    20    uint8                    ReqCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    21    /* DEM Main write */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    22    uint8                    DemCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    23    boolean                  IsValid;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    24    Dem_EvMemEventMemoryType EventMemory;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    25  } Dem_EvMemDTCRecordType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    26  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    29  extern Dem_EvMemDTCRecordType Dem_EvMemDTCRecord;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    30  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    31  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    32  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    33  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    34  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    35  /* Read Events From EvMem */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    36  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    37  void Dem_EvMemApiMainFunction(void);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    38  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    39  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    41  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    42  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    43     Inline Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    44     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    45  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    46  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    47  DEM_INLINE Dem_boolean_least Dem_EvMemIsDtcKindValid (Dem_DTCKindType DTCKind)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    48  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    49      return (DTCKind == DEM_DTC_KIND_ALL_DTCS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    50  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    53  DEM_INLINE Dem_boolean_least Dem_EvMemIsDtcOriginValid (Dem_DTCOriginType  *DTCOrigin)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    54  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    55      if(*DTCOrigin == DEM_DTC_ORIGIN_USERDEFINED_MEMORY)
	ld.bu	d15,[a15]
.L1281:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    55      if(*DTCOrigin == DEM_DTC_ORIGIN_USERDEFINED_MEMORY)      (inlined)
	jne	d15,#0,.L22
.L1282:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    56      {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    57          *DTCOrigin = DEM_DTC_ORIGIN_SECONDARY_MEMORY;
	mov	d0,#4
.L1283:
	st.b	[a15],d0

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    55      if(*DTCOrigin == DEM_DTC_ORIGIN_USERDEFINED_MEMORY)      (inlined)
.L22:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    58      }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    59      return (
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    60                 (*DTCOrigin == DEM_DTC_ORIGIN_PRIMARY_MEMORY)
	ld.bu	d0,[a15]
.L1284:
	eq	d15,d0,#1
.L1285:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    59      return (      (inlined)
	j	.L23

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    68  }      (inlined)
.L23:
	jne	d15,#0,.L24
.L1286:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   231  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   232  		DEM_DET(DEM_DET_APIID_GETEXTENDEDDATARECORDBYDTC, DEM_E_WRONG_CONFIGURATION);
	mov	d4,#54
.L959:
	mov	d5,#0
.L960:
	mov	d6,#32
.L961:
	mov	d7,#16
.L962:
	call	Det_ReportError
.L958:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   233  		return DEM_RECORD_WRONG_DTCORIGIN;
	mov	d2,#2
.L1287:
	j	.L25
.L24:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   234  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   235  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   236  	if ((DestBuffer==NULL_PTR) || (BufSize==NULL_PTR))
	jz.a	a12,.L26
.L1288:
	jnz.a	a13,.L27
.L26:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   237  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   238  	    return DEM_RECORD_WRONG_BUFFERSIZE;
	mov	d2,#5
.L1289:
	j	.L28
.L27:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   239  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   240  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   241  	if(DTC != DemDtcCodeCopy)
	movh.a	a15,#@his(DemDtcCodeCopy)
	lea	a15,[a15]@los(DemDtcCodeCopy)
	ld.w	d15,[a15]
.L1290:
	jeq	d15,d8,.L29
.L1291:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   242  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   243  	    DemDtcIdCopy = Dem_DtcIdFromDtcCode (DTC);
	movh.a	a14,#@his(DemDtcIdCopy)
	lea	a14,[a14]@los(DemDtcIdCopy)
.L1292:
	mov	d4,d8
	call	Dem_DtcIdFromDtcCode
.L963:
	st.h	[a14],d2
.L1293:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   244  	    DemDtcCodeCopy = DTC;
	st.w	[a15],d8
.L29:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   245  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   246  	DtcId = DemDtcIdCopy;
	movh.a	a15,#@his(DemDtcIdCopy)
	lea	a15,[a15]@los(DemDtcIdCopy)
	ld.hu	d8,[a15]0
.L775:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     4  #ifndef DEM_DTCS_H
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     5  #define DEM_DTCS_H
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     8  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     9  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    10  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    11  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    12  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    13  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    14  #include "Dem_Cfg_DTC_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    15  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    16  #include "Dem_Mapping.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    17  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    18  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    19  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    20  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    22  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    23  #include "Dem_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    25  #define DEM_DTC_SETTING_ENABLED     FALSE
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    26  #define DEM_DTC_SETTING_DISABLED    TRUE
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    27  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    29  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    30  	Dem_DtcStateType state;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    31  } Dem_DtcState;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    33  /******************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    37  #define DEM_DTCS_NVSTORAGE_BP    2u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    38  #define DEM_DTCS_ALTERNATIVEDTC_FLAG_BP    3u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    40  #define DEM_DTCS_SEVERITYMASK    0xE0u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    41  #define DEM_DTCS_KINDMASK        0x03u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    42  #define DEM_DTCS_NVSTORAGEMASK   ((uint8)(1u<<DEM_DTCS_NVSTORAGE_BP))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    43  #define DEM_DTCS_ALTERNATIVEDTC_FLAG   ((uint8)(1u<<DEM_DTCS_ALTERNATIVEDTC_FLAG_BP))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    46  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    47  #define DEM_DTCS_INIT8(KIND, SEVERITY, NVSTORAGE, FUNC_UNIT, INDEXOF_ALTERNATIVE_DTCID) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    48  {   ((KIND) & (DEM_DTCS_KINDMASK))|((SEVERITY) & (DEM_DTCS_SEVERITYMASK)) | ((uint8)(((NVSTORAGE) & (0x01u)) << DEM_DTCS_NVSTORAGE_BP)) | ((uint8)((DEM_BOOL2BIT(INDEXOF_ALTERNATIVE_DTCID) & (0x01u)) << DEM_DTCS_ALTERNATIVEDTC_FLAG_BP)) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    49      ,(FUNC_UNIT) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    50  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    52  /* FC_VariationPoint_START */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    53  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    54  #define DEM_DTCS_INIT16(OBDCODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    55  {   (OBDCODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    56  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    57  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    58  /* FC_VariationPoint_END */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    60  #define DEM_DTCS_INIT32(CODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    61  {   (CODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    62  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    66  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    67     uint8 kind_severity_storage;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    68     uint8 Functional_Unit;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    69  } Dem_DtcParam8;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    71  /* FC_VariationPoint_START */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    72  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    73  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    74     uint16 ObdCode;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    75  } Dem_DtcParam16;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    76  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    77  /* FC_VariationPoint_END */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    78  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    79  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    80     Dem_DtcCodeType code;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    81  } Dem_DtcParam32;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    82  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    83  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    84      Dem_DtcCodeType AltDtccode;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    85      Dem_DtcCodeType Dtccode;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    86  }Dem_DtcAltParam;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    87  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    88  /******************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    89  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    90  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    92      DEM_ARRAY_DECLARE(Dem_DtcState, Dem_AllDTCsState, DEM_DTCID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    93  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    94  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    97  #define DEM_START_SEC_RAM_INIT
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    98  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   100      #if(DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   101      extern boolean Dem_AlternativeDTCEnabled;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   102      #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   104  #define DEM_STOP_SEC_RAM_INIT
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   105  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   107  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   108  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   110      #if (DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   111      DEM_ARRAY_DECLARE_CONST(Dem_DtcAltParam, Dem_AllAlternativeDTCsParam, DEM_ALTERNATIVE_DTCCODE_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   112      #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   114  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   115  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   117  /********DTC SUPPRESSION************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   118  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressed (Dem_DtcIdType dtcId)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   119  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   120  #if (DEM_CFG_SUPPRESSION != DEM_NO_SUPPRESSION)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   121      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   122  #else
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   123      DEM_UNUSED_PARAM(dtcId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   124      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   128  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressedDirectly (Dem_DtcIdType dtcId)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   130  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   131      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED_DIRECTLY);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   132  #else
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   133      DEM_UNUSED_PARAM(dtcId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   134      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   136  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   138  DEM_INLINE Dem_boolean_least Dem_DtcIsSupported (Dem_DtcIdType dtcID)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   139  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   141              && (!Dem_DtcIsSuppressed(dtcID))
	mov	d0,#0
.L778:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
	mov	d1,#0
.L1294:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
	jeq	d8,#0,.L30
.L1295:
	ge.u	d15,d8,#5
.L1296:
	cmovn	d1,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
.L31:
.L30:
	j	.L32

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }      (inlined)
.L32:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)      (inlined)
	jeq	d1,#0,.L33
.L779:
	movh.a	a15,#@his(Dem_AllDTCsState)
	lea	a15,[a15]@los(Dem_AllDTCsState)
.L1297:
	addsc.a	a15,a15,d8,#0
.L1298:
	ld.bu	d1,[a15]
.L1299:
	mov	d2,#0
.L782:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d2,#0
	sha	d1,d1,d2
.L1300:
	and	d15,d1,#1
.L1301:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L34

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L34:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L1302:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L35

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L35:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   121      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);      (inlined)
	j	.L36

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   126  }      (inlined)
.L36:
	cmovn	d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   141              && (!Dem_DtcIsSuppressed(dtcID))      (inlined)
.L37:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   142      );      (inlined)
.L33:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)      (inlined)
	j	.L38

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   143  }      (inlined)
.L38:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   247  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   248  	if (!Dem_DtcIsSupported (DtcId))
	jne	d0,#0,.L39
.L776:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   249  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   250  		DEM_DET(DEM_DET_APIID_GETEXTENDEDDATARECORDBYDTC, DEM_E_WRONG_CONFIGURATION);
	mov	d4,#54
	mov	d5,#0
	mov	d6,#32
	mov	d7,#16
	call	Det_ReportError
.L1303:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   251  		return DEM_RECORD_WRONG_DTC;
	mov	d2,#1
.L1304:
	j	.L40
.L39:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
	movh.a	a15,#@his(Dem_MapDtcIdToEventId)
	lea	a15,[a15]@los(Dem_MapDtcIdToEventId)
.L1305:
	addsc.a	a15,a15,d8,#1
	ld.hu	d4,[a15]0
.L1306:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];      (inlined)
	j	.L41

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }      (inlined)
.L41:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);      (inlined)
	j	.L42

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }      (inlined)
.L42:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   252  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   253  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   254  	EventId = Dem_DtcIdGetFirstEventId (DtcId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   255  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   256  	if (!Dem_EnvIsEDRNumberValid (EventId, ExtendedDataNumber, &Trigger))
	lea	a4,[a10]1
	mov	d5,d9
.L789:
	call	Dem_EnvIsEDRNumberValid
.L790:
	jne	d2,#0,.L43
.L1307:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   257  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   258  	    /* According to AR the Dcm should iterate from 0x01 to 0xEF to retrieve the extended data records
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   259  	     * for a DTC => do not trigger the Det unless it's out of the range of allowed record numbers */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   260  	    if ( (ExtendedDataNumber < 0x01) || (ExtendedDataNumber > 0xEF) )
	jeq	d9,#0,.L44
.L1308:
	mov	d15,#239
.L1309:
	jge.u	d15,d9,.L45
.L44:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   261  	    {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   262  	        DEM_DET(DEM_DET_APIID_GETEXTENDEDDATARECORDBYDTC, DEM_E_WRONG_CONFIGURATION);
	mov	d4,#54
	mov	d5,#0
	mov	d6,#32
	mov	d7,#16
	call	Det_ReportError
.L45:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   263  	    }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   264  		return DEM_RECORD_WRONG_NUMBER;
	mov	d2,#4
.L1310:
	j	.L46
.L43:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   265  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   266  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   267  	if (!Dem_EvMemReqSyncDataRecord (DtcId, DTCOrigin))
	ld.bu	d5,[a10]
	mov	d4,d8
.L964:
	call	Dem_EvMemReqSyncDataRecord
.L965:
	jne	d2,#0,.L47
.L1311:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   268  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   269  		return DEM_RECORD_PENDING;
	mov	d2,#6
.L1312:
	j	.L48
.L47:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   270  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   271  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   272  	if (!Dem_EvMemDTCRecord.IsValid)
	movh.a	a15,#@his(Dem_EvMemDTCRecord)
	lea	a15,[a15]@los(Dem_EvMemDTCRecord)
.L1313:
	ld.bu	d15,[a15]5
.L1314:
	jne	d15,#0,.L49
.L1315:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   273  	{ /* if DTC is defined but no record is stored, positive response and size 0 */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   274  		*BufSize = 0;
	mov	d15,#0
.L1316:
	st.h	[a13],d15
.L1317:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   275  		return DEM_RECORD_OK;
	mov	d2,#0
.L1318:
	j	.L50
.L49:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   276  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   277  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   278  	if (!Dem_EnvIsTriggerSet(Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemDTCRecord.EventMemory), Trigger))
	lea	a7,[a15]8
.L792:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
	ld.bu	d0,[a7]15
.L1319:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;      (inlined)
	j	.L51

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }      (inlined)
.L51:
	ld.bu	d15,[a10]1
.L794:

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	     3  #ifndef DEM_ENVTRIGGER_H
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	     4  #define DEM_ENVTRIGGER_H
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	     7  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	     8  {
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	     9  	/* In Parameter */
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    10  	Dem_TriggerType currentTrigger;
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    11  	Dem_TriggerType storedTrigger;
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    12  	/* Out Parameter */
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    13  	Dem_TriggerType matchingTrigger;
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    14  } Dem_EnvTriggerParamType;
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    17  DEM_INLINE void Dem_EnvSetTrigger(Dem_TriggerType* trigger, Dem_TriggerType trigger2set)
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    18  {
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    19  	*trigger = (*trigger) | trigger2set;
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    20  }
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    22  DEM_INLINE Dem_boolean_least Dem_EnvIsAnyTriggerSet(Dem_TriggerType trigger2test)
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    23  {
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    24  	return (Dem_boolean_least)(trigger2test != 0);
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    25  }
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    27  DEM_INLINE Dem_boolean_least Dem_EnvIsTriggerSet(Dem_TriggerType trigger, Dem_TriggerType trigger2test)
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    28  {
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    29  	return Dem_EnvIsAnyTriggerSet(trigger & trigger2test);
	and	d0,d15
.L798:
	ne	d15,d0,#0
.L1320:

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    24  	return (Dem_boolean_least)(trigger2test != 0);      (inlined)
	j	.L52

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    25  }      (inlined)
.L52:

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    29  	return Dem_EnvIsAnyTriggerSet(trigger & trigger2test);      (inlined)
	j	.L53

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    30  }      (inlined)
.L53:
	jne	d15,#0,.L54
.L795:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   279  	{ /* if DTC is defined but no record is stored, positive response and size 0 */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   280  		*BufSize = 0;
	mov	d15,#0
.L1321:
	st.h	[a13],d15
.L1322:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   281  		return DEM_RECORD_OK;
	mov	d2,#0
.L1323:
	j	.L55
.L54:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
	ld.hu	d4,[a7]2
.L1324:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;      (inlined)
	j	.L56

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }      (inlined)
.L56:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   541  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   542  DEM_INLINE void Dem_EvMemSetEventMemTrigger(uint16_least LocId, Dem_TriggerType Trigger)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   543  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   544     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   545     DEM_EVMEM_USEVAR(Trigger);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   546  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   547  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   548     Dem_EvMemEventMemory[LocId].Trigger = Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   549  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   550  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   551  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   552  /* --- Data --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   553  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is used to get address of element data and to fill the data block */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   554  DEM_INLINE uint8 *Dem_EvMemGetEventMemDataByPtr(Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   555  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;
	mov.aa	a6,a7
	add.a	a6,#4
.L1325:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;      (inlined)
	j	.L57

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   557  }      (inlined)
.L57:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   282  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   283  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   284  	/* Retrieve data */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   285  	return Dem_EnvRetrieveEDR (Dem_EvMemGetEventMemEventIdByPtr(&(Dem_EvMemDTCRecord.EventMemory)), ExtendedDataNumber, DestBuffer, BufSize, Dem_EvMemGetEventMemDataByPtr (&(Dem_EvMemDTCRecord.EventMemory)), &(Dem_EvMemDTCRecord.EventMemory));
	mov	d5,d9
.L966:
	mov.aa	a4,a12
.L968:
	mov.aa	a5,a13
.L969:
	call	Dem_EnvRetrieveEDR
.L967:
	j	.L58

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   286  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   287  }
.L58:
.L55:
.L50:
.L48:
.L46:
.L40:
.L28:
.L25:
.L21:
	ret
.L761:
	
__Dem_GetExtendedDataRecordByDTC_function_end:
	.size	Dem_GetExtendedDataRecordByDTC,__Dem_GetExtendedDataRecordByDTC_function_end-Dem_GetExtendedDataRecordByDTC
.L367:
	; End of function
	
	.sdecl	'.text.Dem_EvMemApi.Dem_GetSizeOfExtendedDataRecordByDTC',code,cluster('Dem_GetSizeOfExtendedDataRecordByDTC')
	.sect	'.text.Dem_EvMemApi.Dem_GetSizeOfExtendedDataRecordByDTC'
	.align	2
	
	.global	Dem_GetSizeOfExtendedDataRecordByDTC

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   288  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   289  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   290   Dem_GetSizeOfExtendedDataRecordByDTC
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   291  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   292   Description:        Gets the size of extended data by DTC.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   293   Attributes:         Asynchronous/Non Reentrant
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   294  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   295   DTC:                      This is the DTC the 'Extended Data Record' is assigned to.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   296   DTCKind:                  This parameter defines the requested DTC, either only OBD-relevant DTCs or all DTCs
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   297   DTCOrigin:                If the Dem supports more than one event memory, this parameter is used to select
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   298                             the source memory the DTCs shall be read from.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   299   ExtendedDataNumber:       Identification/Number of requested extended data record. Valid values are from 0x01 to 0xEF.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   300                             Additionally the values 0xFE and 0xFF are explicitly allowed to request the overall size of all OBD records / all records.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   301   SizeOfExtendedDataRecord: Pointer to Size of the requested data record
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   302   Return:                   Status of the operation to retrieve the size of extended data..
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   303  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   304   ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   305   */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   306  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   307  Dem_ReturnGetSizeOfExtendedDataRecordByDTCType Dem_GetSizeOfExtendedDataRecordByDTC(uint32 DTC,
; Function Dem_GetSizeOfExtendedDataRecordByDTC
.L314:
Dem_GetSizeOfExtendedDataRecordByDTC:	.type	func
	sub.a	a10,#8
.L970:
	mov	d8,d4
.L976:
	st.b	[a10],d6
	mov	d9,d7
.L978:
	mov.aa	a13,a4
.L811:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     3  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     4  #ifndef DEM_EVMEMAPI_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     5  #define DEM_EVMEMAPI_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     6  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     7  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     8  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     9  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    10  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    11     Interface Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    12     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    13  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    14  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    15  typedef struct
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    16  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    17    /* DEM API write */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    18    Dem_DtcIdType            DtcId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    19    Dem_DTCOriginType        DTCOrigin;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    20    uint8                    ReqCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    21    /* DEM Main write */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    22    uint8                    DemCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    23    boolean                  IsValid;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    24    Dem_EvMemEventMemoryType EventMemory;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    25  } Dem_EvMemDTCRecordType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    26  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    29  extern Dem_EvMemDTCRecordType Dem_EvMemDTCRecord;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    30  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    31  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    32  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    33  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    34  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    35  /* Read Events From EvMem */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    36  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    37  void Dem_EvMemApiMainFunction(void);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    38  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    39  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    41  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    42  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    43     Inline Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    44     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    45  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    46  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    47  DEM_INLINE Dem_boolean_least Dem_EvMemIsDtcKindValid (Dem_DTCKindType DTCKind)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    48  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    49      return (DTCKind == DEM_DTC_KIND_ALL_DTCS);
	eq	d15,d5,#1
.L1330:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    49      return (DTCKind == DEM_DTC_KIND_ALL_DTCS);      (inlined)
	j	.L59

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    50  }      (inlined)
.L59:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   308  		Dem_DTCKindType DTCKind,
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   309  		Dem_DTCOriginType DTCOrigin,
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   310  		uint8 ExtendedDataNumber,
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   311  		uint16* SizeOfExtendedDataRecord)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   312  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   313  	Dem_DtcIdType DtcId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   314  	Dem_EventIdType EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   315  	Dem_TriggerType Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   316  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   317  	if (!Dem_EvMemIsDtcKindValid (DTCKind))
	jne	d15,#0,.L60
.L1331:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   318  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   319  		DEM_DET(DEM_DET_APIID_GETSIZEOFEXTENDEDDATARECORDBYDTC, DEM_E_WRONG_CONFIGURATION);
	mov	d4,#54
.L971:
	mov	d5,#0
.L972:
	mov	d6,#33
.L973:
	mov	d7,#16
.L974:
	call	Det_ReportError
.L975:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   320  		return DEM_GET_SIZEOFEDRBYDTC_W_DTCKI;
	mov	d2,#3
.L1332:
	j	.L61
.L60:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   321  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   322  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   323  	if (!Dem_EvMemIsDtcOriginValid (&DTCOrigin))
	lea	a15,[a10]0
.L813:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     3  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     4  #ifndef DEM_EVMEMAPI_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     5  #define DEM_EVMEMAPI_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     6  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     7  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     8  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     9  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    10  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    11     Interface Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    12     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    13  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    14  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    15  typedef struct
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    16  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    17    /* DEM API write */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    18    Dem_DtcIdType            DtcId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    19    Dem_DTCOriginType        DTCOrigin;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    20    uint8                    ReqCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    21    /* DEM Main write */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    22    uint8                    DemCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    23    boolean                  IsValid;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    24    Dem_EvMemEventMemoryType EventMemory;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    25  } Dem_EvMemDTCRecordType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    26  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    29  extern Dem_EvMemDTCRecordType Dem_EvMemDTCRecord;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    30  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    31  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    32  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    33  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    34  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    35  /* Read Events From EvMem */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    36  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    37  void Dem_EvMemApiMainFunction(void);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    38  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    39  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    41  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    42  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    43     Inline Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    44     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    45  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    46  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    47  DEM_INLINE Dem_boolean_least Dem_EvMemIsDtcKindValid (Dem_DTCKindType DTCKind)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    48  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    49      return (DTCKind == DEM_DTC_KIND_ALL_DTCS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    50  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    53  DEM_INLINE Dem_boolean_least Dem_EvMemIsDtcOriginValid (Dem_DTCOriginType  *DTCOrigin)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    54  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    55      if(*DTCOrigin == DEM_DTC_ORIGIN_USERDEFINED_MEMORY)
	ld.bu	d15,[a15]
.L1333:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    55      if(*DTCOrigin == DEM_DTC_ORIGIN_USERDEFINED_MEMORY)      (inlined)
	jne	d15,#0,.L62
.L1334:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    56      {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    57          *DTCOrigin = DEM_DTC_ORIGIN_SECONDARY_MEMORY;
	mov	d0,#4
.L1335:
	st.b	[a15],d0

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    55      if(*DTCOrigin == DEM_DTC_ORIGIN_USERDEFINED_MEMORY)      (inlined)
.L62:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    58      }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    59      return (
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    60                 (*DTCOrigin == DEM_DTC_ORIGIN_PRIMARY_MEMORY)
	ld.bu	d0,[a15]
.L1336:
	eq	d15,d0,#1
.L1337:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    59      return (      (inlined)
	j	.L63

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    68  }      (inlined)
.L63:
	jne	d15,#0,.L64
.L1338:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   324  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   325  		DEM_DET(DEM_DET_APIID_GETSIZEOFEXTENDEDDATARECORDBYDTC, DEM_E_WRONG_CONFIGURATION);
	mov	d4,#54
.L979:
	mov	d5,#0
.L980:
	mov	d6,#33
.L981:
	mov	d7,#16
.L982:
	call	Det_ReportError
.L983:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   326  		return DEM_GET_SIZEOFEDRBYDTC_W_DTCOR;
	mov	d2,#2
.L1339:
	j	.L65
.L64:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   327  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   328  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   329  	if(DTC != DemDtcCodeCopy)
	movh.a	a15,#@his(DemDtcCodeCopy)
	lea	a15,[a15]@los(DemDtcCodeCopy)
	ld.w	d15,[a15]
.L1340:
	jeq	d15,d8,.L66
.L1341:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   330  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   331  	    DemDtcIdCopy = Dem_DtcIdFromDtcCode (DTC);
	movh.a	a12,#@his(DemDtcIdCopy)
	lea	a12,[a12]@los(DemDtcIdCopy)
.L1342:
	mov	d4,d8
	call	Dem_DtcIdFromDtcCode
.L984:
	st.h	[a12],d2
.L1343:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   332  	    DemDtcCodeCopy = DTC;
	st.w	[a15],d8
.L66:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   333  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   334  	DtcId = DemDtcIdCopy;
	movh.a	a15,#@his(DemDtcIdCopy)
	lea	a15,[a15]@los(DemDtcIdCopy)
	ld.hu	d0,[a15]0
.L815:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     4  #ifndef DEM_DTCS_H
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     5  #define DEM_DTCS_H
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     8  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     9  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    10  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    11  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    12  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    13  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    14  #include "Dem_Cfg_DTC_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    15  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    16  #include "Dem_Mapping.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    17  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    18  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    19  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    20  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    22  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    23  #include "Dem_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    25  #define DEM_DTC_SETTING_ENABLED     FALSE
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    26  #define DEM_DTC_SETTING_DISABLED    TRUE
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    27  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    29  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    30  	Dem_DtcStateType state;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    31  } Dem_DtcState;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    33  /******************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    37  #define DEM_DTCS_NVSTORAGE_BP    2u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    38  #define DEM_DTCS_ALTERNATIVEDTC_FLAG_BP    3u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    40  #define DEM_DTCS_SEVERITYMASK    0xE0u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    41  #define DEM_DTCS_KINDMASK        0x03u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    42  #define DEM_DTCS_NVSTORAGEMASK   ((uint8)(1u<<DEM_DTCS_NVSTORAGE_BP))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    43  #define DEM_DTCS_ALTERNATIVEDTC_FLAG   ((uint8)(1u<<DEM_DTCS_ALTERNATIVEDTC_FLAG_BP))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    46  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    47  #define DEM_DTCS_INIT8(KIND, SEVERITY, NVSTORAGE, FUNC_UNIT, INDEXOF_ALTERNATIVE_DTCID) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    48  {   ((KIND) & (DEM_DTCS_KINDMASK))|((SEVERITY) & (DEM_DTCS_SEVERITYMASK)) | ((uint8)(((NVSTORAGE) & (0x01u)) << DEM_DTCS_NVSTORAGE_BP)) | ((uint8)((DEM_BOOL2BIT(INDEXOF_ALTERNATIVE_DTCID) & (0x01u)) << DEM_DTCS_ALTERNATIVEDTC_FLAG_BP)) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    49      ,(FUNC_UNIT) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    50  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    52  /* FC_VariationPoint_START */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    53  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    54  #define DEM_DTCS_INIT16(OBDCODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    55  {   (OBDCODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    56  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    57  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    58  /* FC_VariationPoint_END */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    60  #define DEM_DTCS_INIT32(CODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    61  {   (CODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    62  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    66  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    67     uint8 kind_severity_storage;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    68     uint8 Functional_Unit;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    69  } Dem_DtcParam8;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    71  /* FC_VariationPoint_START */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    72  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    73  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    74     uint16 ObdCode;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    75  } Dem_DtcParam16;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    76  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    77  /* FC_VariationPoint_END */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    78  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    79  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    80     Dem_DtcCodeType code;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    81  } Dem_DtcParam32;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    82  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    83  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    84      Dem_DtcCodeType AltDtccode;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    85      Dem_DtcCodeType Dtccode;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    86  }Dem_DtcAltParam;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    87  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    88  /******************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    89  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    90  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    92      DEM_ARRAY_DECLARE(Dem_DtcState, Dem_AllDTCsState, DEM_DTCID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    93  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    94  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    97  #define DEM_START_SEC_RAM_INIT
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    98  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   100      #if(DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   101      extern boolean Dem_AlternativeDTCEnabled;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   102      #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   104  #define DEM_STOP_SEC_RAM_INIT
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   105  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   107  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   108  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   110      #if (DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   111      DEM_ARRAY_DECLARE_CONST(Dem_DtcAltParam, Dem_AllAlternativeDTCsParam, DEM_ALTERNATIVE_DTCCODE_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   112      #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   114  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   115  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   117  /********DTC SUPPRESSION************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   118  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressed (Dem_DtcIdType dtcId)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   119  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   120  #if (DEM_CFG_SUPPRESSION != DEM_NO_SUPPRESSION)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   121      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   122  #else
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   123      DEM_UNUSED_PARAM(dtcId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   124      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   128  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressedDirectly (Dem_DtcIdType dtcId)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   130  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   131      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED_DIRECTLY);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   132  #else
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   133      DEM_UNUSED_PARAM(dtcId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   134      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   136  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   138  DEM_INLINE Dem_boolean_least Dem_DtcIsSupported (Dem_DtcIdType dtcID)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   139  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   141              && (!Dem_DtcIsSuppressed(dtcID))
	mov	d1,#0
.L818:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
	mov	d2,#0
.L1344:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
	jeq	d0,#0,.L67
.L1345:
	ge.u	d15,d0,#5
.L1346:
	cmovn	d2,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
.L68:
.L67:
	j	.L69

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }      (inlined)
.L69:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)      (inlined)
	jeq	d2,#0,.L70
.L819:
	movh.a	a15,#@his(Dem_AllDTCsState)
	lea	a15,[a15]@los(Dem_AllDTCsState)
.L1347:
	addsc.a	a15,a15,d0,#0
.L1348:
	ld.bu	d15,[a15]
.L1349:
	mov	d2,#0
.L822:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d2,#0
	sha	d15,d15,d2
.L1350:
	and	d15,#1
.L1351:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L71

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L71:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L1352:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L72

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L72:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   121      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);      (inlined)
	j	.L73

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   126  }      (inlined)
.L73:
	cmovn	d1,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   141              && (!Dem_DtcIsSuppressed(dtcID))      (inlined)
.L74:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   142      );      (inlined)
.L70:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)      (inlined)
	j	.L75

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   143  }      (inlined)
.L75:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   335  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   336  	if (!Dem_DtcIsSupported (DtcId))
	jne	d1,#0,.L76
.L816:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   337  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   338  		DEM_DET(DEM_DET_APIID_GETSIZEOFEXTENDEDDATARECORDBYDTC, DEM_E_WRONG_CONFIGURATION);
	mov	d4,#54
	mov	d5,#0
	mov	d6,#33
	mov	d7,#16
	call	Det_ReportError
.L985:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   339  		return DEM_GET_SIZEOFEDRBYDTC_W_DTC;
	mov	d2,#1
.L1353:
	j	.L77
.L76:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
	movh.a	a15,#@his(Dem_MapDtcIdToEventId)
	lea	a15,[a15]@los(Dem_MapDtcIdToEventId)
.L1354:
	addsc.a	a15,a15,d0,#1
	ld.hu	d8,[a15]0
.L977:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];      (inlined)
	j	.L78

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }      (inlined)
.L78:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);      (inlined)
	j	.L79

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }      (inlined)
.L79:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   340  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   341  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   342  	EventId = Dem_DtcIdGetFirstEventId (DtcId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   343  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   344  	if ((!Dem_EnvIsEDRNumberValid (EventId, ExtendedDataNumber, &Trigger)) && (ExtendedDataNumber != 0xFF))
	lea	a4,[a10]1
.L829:
	mov	e4,d9,d8
.L830:
	call	Dem_EnvIsEDRNumberValid
.L986:
	jne	d2,#0,.L80
.L1355:
	mov	d15,#255
.L1356:
	jeq	d15,d9,.L81
.L1357:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   345  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   346  		DEM_DET(DEM_DET_APIID_GETSIZEOFEXTENDEDDATARECORDBYDTC, DEM_E_WRONG_CONFIGURATION);
	mov	d4,#54
	mov	d5,#0
	mov	d6,#33
	mov	d7,#16
	call	Det_ReportError
.L1358:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   347  		return DEM_GET_SIZEOFEDRBYDTC_W_RNUM;
	mov	d2,#4
.L1359:
	j	.L82
.L81:
.L80:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   348  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   349  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   350  	if (ExtendedDataNumber == 0xFF)
	mov	d15,#255
.L1360:
	jne	d15,d9,.L83
.L831:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   351  	{	/* retrieve data size of all records */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   352  		return Dem_EnvGetSizeOfED(EventId, SizeOfExtendedDataRecord);
	mov	d4,d8
.L832:
	mov.aa	a4,a13
.L987:
	call	Dem_EnvGetSizeOfED
.L988:
	j	.L84
.L83:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   353  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   354  	else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   355  	{	/* retrieve data size */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   356  	    return Dem_EnvGetSizeOfEDR (EventId, ExtendedDataNumber, SizeOfExtendedDataRecord);
	mov	e4,d9,d8
.L833:
	mov.aa	a4,a13
.L989:
	call	Dem_EnvGetSizeOfEDR
.L990:
	j	.L85

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   357  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   358  }
.L85:
.L84:
.L82:
.L77:
.L65:
.L61:
	ret
.L802:
	
__Dem_GetSizeOfExtendedDataRecordByDTC_function_end:
	.size	Dem_GetSizeOfExtendedDataRecordByDTC,__Dem_GetSizeOfExtendedDataRecordByDTC_function_end-Dem_GetSizeOfExtendedDataRecordByDTC
.L372:
	; End of function
	
	.sdecl	'.text.Dem_EvMemApi.Dem_GetFreezeFrameDataByDTC',code,cluster('Dem_GetFreezeFrameDataByDTC')
	.sect	'.text.Dem_EvMemApi.Dem_GetFreezeFrameDataByDTC'
	.align	2
	
	.global	Dem_GetFreezeFrameDataByDTC

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   359  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   360  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   361  #if DEM_CFG_SERVICE_READDTCINFORMATION_SUBFUNC_0x04
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   362  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   363   Dem_GetFreezeFrameDataByDTC
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   364  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   365   Description:        Gets freeze frame data by DTC. The function stores the data in the provided DestBuffer.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   366   Attributes:         Asynchronous/Non Reentrant
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   367  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   368   DTC:                This is the DTC the freeze frame is assigned to.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   369   DTCKind:            This parameter defines the requested DTC, either only OBD-relevant DTCs or all DTCs
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   370   DTCOrigin:          If the DEM supports more than one event memory, this parameter is used to select
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   371                       the source memory the DTCs shall be read from.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   372   RecordNumber:       This parameter is a unique identifier for a freeze frame record as defined in ISO 15031-5 and ISO 14229-1.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   373                       This record number is unique per DTC (relative addressing).
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   374                       The value 0xFF is not allowed. The value 0x00 indicates the DTC-specific OBD freeze frame.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   375   DestBuffer:         This parameter contains a byte pointer that points to the buffer, to which the freeze frame data record shall be written to.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   376                       The format is: {RecordNumber, NumOfDIDs, DID[1], data[1], ..., DID[N], data[N]}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   377   BufSize:            When the function is called this parameter contains the maximum number of data bytes that can be written to the buffer.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   378                       The function returns the actual number of written data bytes in this parameter.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   379   Return:             Status of the operation to retrieve freeze frame data by DTC.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   380  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   381   ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   382   */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   383  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   384  Dem_ReturnGetFreezeFrameDataByDTCType Dem_GetFreezeFrameDataByDTC(uint32 DTC,
; Function Dem_GetFreezeFrameDataByDTC
.L316:
Dem_GetFreezeFrameDataByDTC:	.type	func
	sub.a	a10,#8
.L991:
	mov	d8,d4
.L997:
	st.b	[a10],d6
	mov	d9,d7
.L998:
	mov.aa	a12,a4
.L1000:
	mov.aa	a13,a5
.L641:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     3  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     4  #ifndef DEM_EVMEMAPI_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     5  #define DEM_EVMEMAPI_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     6  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     7  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     8  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     9  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    10  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    11     Interface Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    12     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    13  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    14  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    15  typedef struct
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    16  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    17    /* DEM API write */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    18    Dem_DtcIdType            DtcId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    19    Dem_DTCOriginType        DTCOrigin;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    20    uint8                    ReqCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    21    /* DEM Main write */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    22    uint8                    DemCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    23    boolean                  IsValid;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    24    Dem_EvMemEventMemoryType EventMemory;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    25  } Dem_EvMemDTCRecordType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    26  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    29  extern Dem_EvMemDTCRecordType Dem_EvMemDTCRecord;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    30  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    31  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    32  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    33  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    34  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    35  /* Read Events From EvMem */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    36  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    37  void Dem_EvMemApiMainFunction(void);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    38  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    39  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    41  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    42  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    43     Inline Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    44     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    45  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    46  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    47  DEM_INLINE Dem_boolean_least Dem_EvMemIsDtcKindValid (Dem_DTCKindType DTCKind)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    48  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    49      return (DTCKind == DEM_DTC_KIND_ALL_DTCS);
	eq	d15,d5,#1
.L1170:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    49      return (DTCKind == DEM_DTC_KIND_ALL_DTCS);      (inlined)
	j	.L86

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    50  }      (inlined)
.L86:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   385  		Dem_DTCKindType DTCKind,
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   386  		Dem_DTCOriginType DTCOrigin,
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   387  		uint8 RecordNumber,
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   388  		uint8* DestBuffer,
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   389  		uint16* BufSize)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   390  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   391  	Dem_DtcIdType DtcId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   392  	uint8 RecordIndex;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   393  	Dem_EventIdType EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   394  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   395  	if (!Dem_EvMemIsDtcKindValid (DTCKind))
	jne	d15,#0,.L87
.L1171:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   396  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   397  		DEM_DET(DEM_DET_APIID_GETFREEZEFRAMEDATABYDTC, DEM_E_WRONG_CONFIGURATION);
	mov	d4,#54
.L993:
	mov	d5,#0
.L994:
	mov	d6,#29
.L995:
	mov	d7,#16
.L996:
	call	Det_ReportError
.L992:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   398  		return DEM_GET_FFDATABYDTC_WRONG_DTCKIND;
	mov	d2,#3
.L1172:
	j	.L88
.L87:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   399  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   400  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   401  	if (!Dem_EvMemIsDtcOriginValid (&DTCOrigin))
	lea	a15,[a10]0
.L646:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     3  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     4  #ifndef DEM_EVMEMAPI_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     5  #define DEM_EVMEMAPI_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     6  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     7  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     8  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     9  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    10  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    11     Interface Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    12     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    13  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    14  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    15  typedef struct
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    16  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    17    /* DEM API write */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    18    Dem_DtcIdType            DtcId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    19    Dem_DTCOriginType        DTCOrigin;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    20    uint8                    ReqCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    21    /* DEM Main write */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    22    uint8                    DemCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    23    boolean                  IsValid;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    24    Dem_EvMemEventMemoryType EventMemory;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    25  } Dem_EvMemDTCRecordType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    26  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    29  extern Dem_EvMemDTCRecordType Dem_EvMemDTCRecord;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    30  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    31  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    32  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    33  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    34  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    35  /* Read Events From EvMem */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    36  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    37  void Dem_EvMemApiMainFunction(void);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    38  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    39  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    41  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    42  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    43     Inline Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    44     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    45  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    46  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    47  DEM_INLINE Dem_boolean_least Dem_EvMemIsDtcKindValid (Dem_DTCKindType DTCKind)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    48  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    49      return (DTCKind == DEM_DTC_KIND_ALL_DTCS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    50  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    53  DEM_INLINE Dem_boolean_least Dem_EvMemIsDtcOriginValid (Dem_DTCOriginType  *DTCOrigin)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    54  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    55      if(*DTCOrigin == DEM_DTC_ORIGIN_USERDEFINED_MEMORY)
	ld.bu	d15,[a15]
.L1173:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    55      if(*DTCOrigin == DEM_DTC_ORIGIN_USERDEFINED_MEMORY)      (inlined)
	jne	d15,#0,.L89
.L1174:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    56      {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    57          *DTCOrigin = DEM_DTC_ORIGIN_SECONDARY_MEMORY;
	mov	d0,#4
.L1175:
	st.b	[a15],d0

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    55      if(*DTCOrigin == DEM_DTC_ORIGIN_USERDEFINED_MEMORY)      (inlined)
.L89:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    58      }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    59      return (
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    60                 (*DTCOrigin == DEM_DTC_ORIGIN_PRIMARY_MEMORY)
	ld.bu	d0,[a15]
.L1176:
	eq	d15,d0,#1
.L1177:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    59      return (      (inlined)
	j	.L90

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    68  }      (inlined)
.L90:
	jne	d15,#0,.L91
.L1178:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   402  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   403  		DEM_DET(DEM_DET_APIID_GETFREEZEFRAMEDATABYDTC, DEM_E_WRONG_CONFIGURATION);
	mov	d4,#54
.L1002:
	mov	d5,#0
.L1003:
	mov	d6,#29
.L1004:
	mov	d7,#16
.L1005:
	call	Det_ReportError
.L1001:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   404  		return DEM_GET_FFDATABYDTC_WRONG_DTCORIGIN;
	mov	d2,#2
.L1179:
	j	.L92
.L91:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   405  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   406  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   407  	if ((DestBuffer==NULL_PTR) || (BufSize==NULL_PTR))
	jz.a	a12,.L93
.L1180:
	jnz.a	a13,.L94
.L93:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   408  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   409  	    return DEM_GET_FFDATABYDTC_WRONG_BUFFERSIZE;
	mov	d2,#5
.L1181:
	j	.L95
.L94:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   410  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   411  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   412      if(DTC != DemDtcCodeCopy)
	movh.a	a15,#@his(DemDtcCodeCopy)
	lea	a15,[a15]@los(DemDtcCodeCopy)
	ld.w	d15,[a15]
.L1182:
	jeq	d15,d8,.L96
.L1183:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   413      {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   414          DemDtcIdCopy = Dem_DtcIdFromDtcCode (DTC);
	movh.a	a14,#@his(DemDtcIdCopy)
	lea	a14,[a14]@los(DemDtcIdCopy)
.L1184:
	mov	d4,d8
	call	Dem_DtcIdFromDtcCode
.L1006:
	st.h	[a14],d2
.L1185:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   415          DemDtcCodeCopy = DTC;
	st.w	[a15],d8
.L96:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   416      }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   417      DtcId = DemDtcIdCopy;
	movh.a	a15,#@his(DemDtcIdCopy)
	lea	a15,[a15]@los(DemDtcIdCopy)
	ld.hu	d4,[a15]0
.L651:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     4  #ifndef DEM_DTCS_H
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     5  #define DEM_DTCS_H
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     8  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     9  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    10  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    11  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    12  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    13  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    14  #include "Dem_Cfg_DTC_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    15  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    16  #include "Dem_Mapping.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    17  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    18  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    19  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    20  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    22  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    23  #include "Dem_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    25  #define DEM_DTC_SETTING_ENABLED     FALSE
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    26  #define DEM_DTC_SETTING_DISABLED    TRUE
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    27  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    29  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    30  	Dem_DtcStateType state;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    31  } Dem_DtcState;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    33  /******************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    37  #define DEM_DTCS_NVSTORAGE_BP    2u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    38  #define DEM_DTCS_ALTERNATIVEDTC_FLAG_BP    3u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    40  #define DEM_DTCS_SEVERITYMASK    0xE0u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    41  #define DEM_DTCS_KINDMASK        0x03u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    42  #define DEM_DTCS_NVSTORAGEMASK   ((uint8)(1u<<DEM_DTCS_NVSTORAGE_BP))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    43  #define DEM_DTCS_ALTERNATIVEDTC_FLAG   ((uint8)(1u<<DEM_DTCS_ALTERNATIVEDTC_FLAG_BP))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    46  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    47  #define DEM_DTCS_INIT8(KIND, SEVERITY, NVSTORAGE, FUNC_UNIT, INDEXOF_ALTERNATIVE_DTCID) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    48  {   ((KIND) & (DEM_DTCS_KINDMASK))|((SEVERITY) & (DEM_DTCS_SEVERITYMASK)) | ((uint8)(((NVSTORAGE) & (0x01u)) << DEM_DTCS_NVSTORAGE_BP)) | ((uint8)((DEM_BOOL2BIT(INDEXOF_ALTERNATIVE_DTCID) & (0x01u)) << DEM_DTCS_ALTERNATIVEDTC_FLAG_BP)) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    49      ,(FUNC_UNIT) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    50  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    52  /* FC_VariationPoint_START */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    53  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    54  #define DEM_DTCS_INIT16(OBDCODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    55  {   (OBDCODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    56  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    57  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    58  /* FC_VariationPoint_END */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    60  #define DEM_DTCS_INIT32(CODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    61  {   (CODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    62  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    66  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    67     uint8 kind_severity_storage;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    68     uint8 Functional_Unit;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    69  } Dem_DtcParam8;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    71  /* FC_VariationPoint_START */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    72  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    73  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    74     uint16 ObdCode;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    75  } Dem_DtcParam16;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    76  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    77  /* FC_VariationPoint_END */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    78  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    79  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    80     Dem_DtcCodeType code;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    81  } Dem_DtcParam32;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    82  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    83  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    84      Dem_DtcCodeType AltDtccode;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    85      Dem_DtcCodeType Dtccode;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    86  }Dem_DtcAltParam;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    87  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    88  /******************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    89  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    90  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    92      DEM_ARRAY_DECLARE(Dem_DtcState, Dem_AllDTCsState, DEM_DTCID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    93  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    94  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    97  #define DEM_START_SEC_RAM_INIT
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    98  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   100      #if(DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   101      extern boolean Dem_AlternativeDTCEnabled;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   102      #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   104  #define DEM_STOP_SEC_RAM_INIT
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   105  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   107  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   108  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   110      #if (DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   111      DEM_ARRAY_DECLARE_CONST(Dem_DtcAltParam, Dem_AllAlternativeDTCsParam, DEM_ALTERNATIVE_DTCCODE_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   112      #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   114  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   115  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   117  /********DTC SUPPRESSION************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   118  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressed (Dem_DtcIdType dtcId)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   119  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   120  #if (DEM_CFG_SUPPRESSION != DEM_NO_SUPPRESSION)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   121      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   122  #else
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   123      DEM_UNUSED_PARAM(dtcId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   124      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   128  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressedDirectly (Dem_DtcIdType dtcId)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   130  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   131      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED_DIRECTLY);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   132  #else
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   133      DEM_UNUSED_PARAM(dtcId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   134      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   136  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   138  DEM_INLINE Dem_boolean_least Dem_DtcIsSupported (Dem_DtcIdType dtcID)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   139  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   141              && (!Dem_DtcIsSuppressed(dtcID))
	mov	d0,#0
.L657:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
	mov	d1,#0
.L1186:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
	jeq	d4,#0,.L97
.L1187:
	ge.u	d15,d4,#5
.L1188:
	cmovn	d1,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
.L98:
.L97:
	j	.L99

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }      (inlined)
.L99:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)      (inlined)
	jeq	d1,#0,.L100
.L658:
	movh.a	a15,#@his(Dem_AllDTCsState)
	lea	a15,[a15]@los(Dem_AllDTCsState)
.L1189:
	addsc.a	a15,a15,d4,#0
.L1190:
	ld.bu	d15,[a15]
.L1191:
	mov	d1,#0
.L667:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d1,#0
	sha	d15,d15,d1
.L1192:
	and	d15,#1
.L1193:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L101

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L101:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L1194:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L102

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L102:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   121      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);      (inlined)
	j	.L103

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   126  }      (inlined)
.L103:
	cmovn	d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   141              && (!Dem_DtcIsSuppressed(dtcID))      (inlined)
.L104:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   142      );      (inlined)
.L100:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)      (inlined)
	j	.L105

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   143  }      (inlined)
.L105:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   418  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   419  	if (!Dem_DtcIsSupported (DtcId))
	jne	d0,#0,.L106
.L652:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   420  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   421  		DEM_DET(DEM_DET_APIID_GETFREEZEFRAMEDATABYDTC, DEM_E_WRONG_CONFIGURATION);
	mov	d4,#54
.L1007:
	mov	d5,#0
	mov	d6,#29
	mov	d7,#16
	call	Det_ReportError
.L1195:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   422  		return DEM_GET_FFDATABYDTC_WRONG_DTC;
	mov	d2,#1
.L1196:
	j	.L107
.L106:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
	movh.a	a15,#@his(Dem_MapDtcIdToEventId)
	lea	a15,[a15]@los(Dem_MapDtcIdToEventId)
.L1197:
	addsc.a	a15,a15,d4,#1
	ld.hu	d0,[a15]0
.L1009:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];      (inlined)
	j	.L108

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }      (inlined)
.L108:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);      (inlined)
	j	.L109

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }      (inlined)
.L109:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   423  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   424  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   425  	EventId = Dem_DtcIdGetFirstEventId (DtcId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   426  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   427  	if (RecordNumber == 0xFFu)
	mov	d15,#255
.L1198:
	jne	d15,d9,.L110
.L1199:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   428  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   429          DEM_DET(DEM_DET_APIID_GETFREEZEFRAMEDATABYDTC, DEM_E_WRONG_CONFIGURATION);
	mov	d4,#54
.L1008:
	mov	d5,#0
	mov	d6,#29
	mov	d7,#16
	call	Det_ReportError
.L1010:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   430          return DEM_GET_FFDATABYDTC_WRONG_RECORDNUMBER;
	mov	d2,#4
.L1200:
	j	.L111
.L110:

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     3  #ifndef DEM_ENVFFRECNUMERATION_H
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     4  #define DEM_ENVFFRECNUMERATION_H
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     8  #include "Dem_Cfg_EnvFFRecNumeration.h"
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     9  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    10  #include "Dem_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    11  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    13  #if (DEM_CFG_FFRECNUM == DEM_CFG_FFRECNUM_CALCULATED)
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    16  DEM_INLINE Dem_boolean_least Dem_EnvIsFFRecNumValid(Dem_EventIdType EventId, uint8 RecNumber)
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    17  {
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    18  	return ((RecNumber > 0) && (RecNumber <= Dem_EvtParam_GetMaxNumberFreezeFrameRecords(EventId)));
	mov	d1,#0
.L1201:

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    18  	return ((RecNumber > 0) && (RecNumber <= Dem_EvtParam_GetMaxNumberFreezeFrameRecords(EventId)));      (inlined)
	jeq	d9,#0,.L112

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   196  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L113:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    53  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    54  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    55  LOCAL_INLINE boolean Dem_EvtParam_GetStoreTestFailedToNextOC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    56  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    57  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    58  	return TRUE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    59  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    60  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    61  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    62  LOCAL_INLINE boolean Dem_EvtParam_GetRequestsWarningIndicator(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    65  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    68  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    69  LOCAL_INLINE Dem_EventCategoryType Dem_EvtParam_GetCategory(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    70  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    71  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    72  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    73  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    74  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    75  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInPrimary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    76  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    80  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    81  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    82  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInSecondary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    83  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    84  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    85  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    86  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    87  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    88  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    89  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInMirror(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    90  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    91  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    92  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    93  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    94  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    95  LOCAL_INLINE boolean Dem_EvtParam_GetAgingAllowed(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    96  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    97  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    98  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 1);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    99  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   100  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   101  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   102  LOCAL_INLINE boolean Dem_EvtParam_GetIsGlobalFDCCallbackConfigured(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   103  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   104  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   105  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   106  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   107  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   108  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   109  LOCAL_INLINE boolean Dem_EvtParam_GetTriggersDataChangedCallback(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   110  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   111  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   112  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   113  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   114  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   115  LOCAL_INLINE uint8 Dem_EvtParam_GetSignificance(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   116  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   117  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   118  	return (uint8)(RBA_DIAGLIB_GETSINGLEBIT16(Dem_EvtParam_16[indx].dataDataContainer_2, 2));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   119  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   120  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   121  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   122  LOCAL_INLINE uint8 Dem_EvtParam_GetOperationCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   123  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   124  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   125  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   126  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   127  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   128  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   129  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   130  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   131  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   132  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   133  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   134  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   135  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   136  LOCAL_INLINE uint8 Dem_EvtParam_GetFailureCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   137  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   138  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   139  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   140  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   141  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   142  LOCAL_INLINE boolean Dem_EvtParam_GetInitialSuppressionStatus(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   143  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   144  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   145  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 3);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   146  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   147  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   148  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   149  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceMethodIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   150  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   151  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   152  	return DEM_DEBMETH_IDX_ARCTRBASECLASS;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   153  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   154  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   155  LOCAL_INLINE uint16 Dem_EvtParam_GetDebounceParamSettingIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   156  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   157  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   158  	return (uint16)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 4, 3));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   159  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   160  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   161  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   162  LOCAL_INLINE uint8 Dem_EvtParam_GetBufferTimeSFB(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   163  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   164  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   165  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   166  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   167  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   168  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingThreshold(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   169  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   170  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   171  	return Dem_EvtParam_8[indx].dataDataContainer_1;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   172  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   173  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   174  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   175  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingThresholdForTFSLC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   176  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   177  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   178  	return 0u;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   179  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   180  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   181  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   182  LOCAL_INLINE uint8 Dem_EvtParam_GetFailureConfirmationThreshold(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   183  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   184  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   185  	return 1u;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   186  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   187  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   188  LOCAL_INLINE uint8 Dem_EvtParam_GetEventPriority(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   189  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   190  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   191  	return (uint8)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 7, 3));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   192  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   193  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   194  LOCAL_INLINE uint8 Dem_EvtParam_GetMaxNumberFreezeFrameRecords(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   195  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   196  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   197  	return (uint8)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 10, 2));
	movh.a	a15,#@his(Dem_EvtParam_16)
	lea	a15,[a15]@los(Dem_EvtParam_16)
.L1202:
	addsc.a	a15,a15,d0,#1
.L1203:
	ld.hu	d0,[a15]0
.L695:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     3  #ifndef RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     4  #define RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     9  #define RBA_DIAGLIB_ISBITSET16       rba_DiagLib_Bit16IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT16   rba_DiagLib_Bit16GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    11  #define RBA_DIAGLIB_GETBITS16        rba_DiagLib_Bit16GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT16   rba_DiagLib_Bit16OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS16  rba_DiagLib_Bit16OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    15  LOCAL_INLINE uint16 rba_DiagLib_Bit16Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    17      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    21  LOCAL_INLINE void rba_DiagLib_Bit16SetBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    26  LOCAL_INLINE void rba_DiagLib_Bit16ClearBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    28      *buffer &= ((uint16) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    31  LOCAL_INLINE void rba_DiagLib_Bit16MergeBitmask(uint16 *buffer, uint16 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    36  LOCAL_INLINE void rba_DiagLib_Bit16SetBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    38      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    39      *buffer |= ((uint16) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    42  LOCAL_INLINE void rba_DiagLib_Bit16ClearBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    44      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    45      *buffer &= ((uint16) (~((uint16) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    48  LOCAL_INLINE void rba_DiagLib_Bit16OverwriteBit(uint16 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    52          rba_DiagLib_Bit16SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    56          rba_DiagLib_Bit16ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    60  LOCAL_INLINE uint16 rba_DiagLib_Bit16GetSingleBit(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    62      return (uint16) ((value >> bit_position) & 1u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    64  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    65  LOCAL_INLINE boolean rba_DiagLib_Bit16IsBitSet(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    66  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    67      return (boolean) (rba_DiagLib_Bit16GetSingleBit(value, bit_position) != 0u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    68  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    69  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    70  LOCAL_INLINE uint16 rba_DiagLib_Bit16GetBits(uint16 value, uint8 bit_position, uint8 number_of_bits)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    71  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    72      uint16 bit2shift = 1;
	mov	d15,#1
.L1012:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    73      value = value >> bit_position;
	sha	d0,d0,#-10
.L1204:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    74      value = value % ((uint16) (bit2shift << number_of_bits));
	sha	d15,#2
.L1013:
	div.u	e2,d0,d15
.L1205:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    75      return value;      (inlined)
	j	.L114

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    76  }      (inlined)
.L114:
	extr.u	d15,d3,#0,#8
.L1206:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   197  	return (uint8)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 10, 2));      (inlined)
	j	.L115

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   198  }      (inlined)
.L115:

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    18  	return ((RecNumber > 0) && (RecNumber <= Dem_EvtParam_GetMaxNumberFreezeFrameRecords(EventId)));      (inlined)
	lt.u	d15,d15,d9
.L1207:
	cmovn	d1,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    18  	return ((RecNumber > 0) && (RecNumber <= Dem_EvtParam_GetMaxNumberFreezeFrameRecords(EventId)));      (inlined)
.L116:
.L112:
	j	.L117

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    19  }      (inlined)
.L117:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   431  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   432  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   433  	if (!Dem_EnvIsFFRecNumValid(EventId,RecordNumber))
	jne	d1,#0,.L118
.L688:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   434  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   435  		return DEM_GET_FFDATABYDTC_WRONG_RECORDNUMBER;
	mov	d2,#4
.L1208:
	j	.L119
.L118:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   436  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   437  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   438  	if (!Dem_EvMemReqSyncDataRecord (DtcId, DTCOrigin))
	ld.bu	d5,[a10]
	call	Dem_EvMemReqSyncDataRecord
.L1011:
	jne	d2,#0,.L120
.L1209:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   439  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   440  		return DEM_GET_FFDATABYDTC_PENDING;
	mov	d2,#6
.L1210:
	j	.L121
.L120:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   441  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   442  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   443  	if (!Dem_EvMemDTCRecord.IsValid)
	movh.a	a15,#@his(Dem_EvMemDTCRecord)
	lea	a15,[a15]@los(Dem_EvMemDTCRecord)
.L1211:
	ld.bu	d15,[a15]5
.L1212:
	jne	d15,#0,.L122
.L1213:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   444  	{ /* if DTC is defined but no record is stored, positive response and size 0 */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   445  		*BufSize = 0;
	mov	d15,#0
.L1214:
	st.h	[a13],d15
.L1215:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   446  		return DEM_GET_FFDATABYDTC_OK;
	mov	d2,#0
.L1216:
	j	.L123
.L122:

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     3  #ifndef DEM_ENVFFRECNUMERATION_H
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     4  #define DEM_ENVFFRECNUMERATION_H
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     8  #include "Dem_Cfg_EnvFFRecNumeration.h"
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     9  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    10  #include "Dem_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    11  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    13  #if (DEM_CFG_FFRECNUM == DEM_CFG_FFRECNUM_CALCULATED)
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    16  DEM_INLINE Dem_boolean_least Dem_EnvIsFFRecNumValid(Dem_EventIdType EventId, uint8 RecNumber)
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    17  {
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    18  	return ((RecNumber > 0) && (RecNumber <= Dem_EvtParam_GetMaxNumberFreezeFrameRecords(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    19  }
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    20  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    21  DEM_INLINE uint8 Dem_EnvGetIndexFromFFRecNum(Dem_EventIdType EventId, uint8 RecNumber)
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    22  {
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    23  	DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    24  	return (RecNumber - 1);
	add	d15,d9,#-1
	extr.u	d5,d15,#0,#8
.L1217:

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    24  	return (RecNumber - 1);      (inlined)
	j	.L124

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    25  }      (inlined)
.L124:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   447  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   448  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   449  	RecordIndex = Dem_EnvGetIndexFromFFRecNum (EventId, RecordNumber);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   450  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   451      if (! Dem_EnvIsFFRecNumStored(&Dem_EvMemDTCRecord.EventMemory, RecordNumber))
	lea	a7,[a15]8
.L707:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;      (inlined)
	j	.L125

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }      (inlined)
.L125:

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     3  #ifndef DEM_ENVFFRECNUMERATION_H
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     4  #define DEM_ENVFFRECNUMERATION_H
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     8  #include "Dem_Cfg_EnvFFRecNumeration.h"
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     9  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    10  #include "Dem_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    11  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    13  #if (DEM_CFG_FFRECNUM == DEM_CFG_FFRECNUM_CALCULATED)
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    16  DEM_INLINE Dem_boolean_least Dem_EnvIsFFRecNumValid(Dem_EventIdType EventId, uint8 RecNumber)
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    17  {
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    18  	return ((RecNumber > 0) && (RecNumber <= Dem_EvtParam_GetMaxNumberFreezeFrameRecords(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    19  }
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    20  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    21  DEM_INLINE uint8 Dem_EnvGetIndexFromFFRecNum(Dem_EventIdType EventId, uint8 RecNumber)
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    22  {
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    23  	DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    24  	return (RecNumber - 1);
	add	d9,#-1
.L999:
	extr.u	d0,d9,#0,#8
.L1218:

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    24  	return (RecNumber - 1);      (inlined)
	j	.L126

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    25  }      (inlined)
.L126:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
	ld.bu	d15,[a7]12
.L1219:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;      (inlined)
	j	.L127

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }      (inlined)
.L127:

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    25  }
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    27  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    28  DEM_INLINE uint8 Dem_EnvGetFFRecNumFromIndex(Dem_EventIdType EventId, uint8 idx)
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    29  {
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    30  	DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    31  	return (idx + 1);
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    32  }
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    34  DEM_INLINE Dem_TriggerType Dem_EnvGetFFRecordTrigger (uint8 RecNumber)
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    35  {
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    36      DEM_UNUSED_PARAM(RecNumber);
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    37      return 0;
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    38  }
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    40  DEM_INLINE void Dem_EnvGetFFRecordTriggerAndUpdate (uint8 RecNumber, Dem_TriggerType* Trigger, boolean* Update)
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    41  {
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    42      DEM_UNUSED_PARAM(RecNumber);
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    43      *Trigger = 0;
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    44      *Update = FALSE;
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    45  }
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    46  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    47  DEM_INLINE Dem_boolean_least Dem_EnvIsFFRecNumStored(const Dem_EvMemEventMemoryType *EventMemory, uint8 RecNumber)
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    48  {
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    49      Dem_EventIdType EventId;
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    51      EventId = Dem_EvMemGetEventMemEventIdByPtr(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    52      return (Dem_EnvGetIndexFromFFRecNum(EventId, RecNumber) < Dem_EvMemGetEventMemFreezeFrameCounterByPtr(EventMemory));
	lt.u	d15,d0,d15
.L1220:

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    52      return (Dem_EnvGetIndexFromFFRecNum(EventId, RecNumber) < Dem_EvMemGetEventMemFreezeFrameCounterByPtr(EventMemory));      (inlined)
	j	.L128

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    53  }      (inlined)
.L128:
	jne	d15,#0,.L129
.L1221:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   452      { /* if DTC is defined but no record is stored, positive response and size 0 */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   453          *BufSize = 0;
	mov	d15,#0
.L1222:
	st.h	[a13],d15
.L1223:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   454          return DEM_GET_FFDATABYDTC_OK;
	mov	d2,#0
.L1224:
	j	.L130
.L129:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
	ld.hu	d4,[a7]2
.L1225:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;      (inlined)
	j	.L131

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }      (inlined)
.L131:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   541  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   542  DEM_INLINE void Dem_EvMemSetEventMemTrigger(uint16_least LocId, Dem_TriggerType Trigger)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   543  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   544     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   545     DEM_EVMEM_USEVAR(Trigger);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   546  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   547  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   548     Dem_EvMemEventMemory[LocId].Trigger = Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   549  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   550  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   551  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   552  /* --- Data --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   553  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is used to get address of element data and to fill the data block */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   554  DEM_INLINE uint8 *Dem_EvMemGetEventMemDataByPtr(Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   555  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;
	mov.aa	a6,a7
	add.a	a6,#4
.L1226:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;      (inlined)
	j	.L132

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   557  }      (inlined)
.L132:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   455      }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   456  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   457      /* Retrieve data */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   458      return Dem_EnvRetrieveFF (Dem_EvMemGetEventMemEventIdByPtr(&(Dem_EvMemDTCRecord.EventMemory)), DestBuffer, BufSize, RecordIndex, Dem_EvMemGetEventMemDataByPtr (&(Dem_EvMemDTCRecord.EventMemory)), &(Dem_EvMemDTCRecord.EventMemory));
	mov.aa	a4,a12
.L1014:
	mov.aa	a5,a13
.L1016:
	call	Dem_EnvRetrieveFF
.L1015:
	j	.L133

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   459  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   460  }
.L133:
.L130:
.L123:
.L121:
.L119:
.L111:
.L107:
.L95:
.L92:
.L88:
	ret
.L630:
	
__Dem_GetFreezeFrameDataByDTC_function_end:
	.size	Dem_GetFreezeFrameDataByDTC,__Dem_GetFreezeFrameDataByDTC_function_end-Dem_GetFreezeFrameDataByDTC
.L357:
	; End of function
	
	.sdecl	'.text.Dem_EvMemApi.Dem_GetSizeOfFreezeFrameByDTC',code,cluster('Dem_GetSizeOfFreezeFrameByDTC')
	.sect	'.text.Dem_EvMemApi.Dem_GetSizeOfFreezeFrameByDTC'
	.align	2
	
	.global	Dem_GetSizeOfFreezeFrameByDTC

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   461  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   462  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   463   Dem_GetSizeOfFreezeFrameByDTC
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   464  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   465   Description:        Gets the size of freeze frame data by DTC.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   466   Attributes:         Asynchronous/Non Reentrant
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   467  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   468   DTC:                This is the DTC the freeze frame is assigned to.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   469   DTCKind:            This parameter defines the requested DTC, either only OBD-relevant DTCs or all DTCs
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   470   DTCOrigin:          If the DEM supports more than one event memory, this parameter is used to select
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   471                       the source memory the DTCs shall be read from.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   472   RecordNumber:       This parameter is a unique identifier for a freeze frame record as defined in ISO 15031-5 and ISO 14229-1.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   473                       This record number is unique per DTC (relative addressing).
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   474                       The value 0xFF is explicitly allowed to request the overall size.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   475   SizeOfFreezeFrame:  Number of bytes in the requested freeze frame record.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   476   Return:             Status of the operation to retrieve the size of freeze frame data.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   477  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   478   ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   479   */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   480  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   481  Dem_ReturnGetSizeOfFreezeFrameByDTCType Dem_GetSizeOfFreezeFrameByDTC(uint32 DTC,
; Function Dem_GetSizeOfFreezeFrameByDTC
.L318:
Dem_GetSizeOfFreezeFrameByDTC:	.type	func
	sub.a	a10,#8
.L1017:
	mov	d8,d4
.L1023:
	st.b	[a10],d6
	mov	d9,d7
.L1025:
	mov.aa	a13,a4
.L730:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     3  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     4  #ifndef DEM_EVMEMAPI_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     5  #define DEM_EVMEMAPI_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     6  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     7  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     8  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     9  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    10  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    11     Interface Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    12     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    13  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    14  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    15  typedef struct
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    16  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    17    /* DEM API write */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    18    Dem_DtcIdType            DtcId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    19    Dem_DTCOriginType        DTCOrigin;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    20    uint8                    ReqCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    21    /* DEM Main write */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    22    uint8                    DemCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    23    boolean                  IsValid;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    24    Dem_EvMemEventMemoryType EventMemory;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    25  } Dem_EvMemDTCRecordType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    26  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    29  extern Dem_EvMemDTCRecordType Dem_EvMemDTCRecord;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    30  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    31  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    32  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    33  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    34  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    35  /* Read Events From EvMem */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    36  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    37  void Dem_EvMemApiMainFunction(void);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    38  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    39  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    41  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    42  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    43     Inline Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    44     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    45  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    46  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    47  DEM_INLINE Dem_boolean_least Dem_EvMemIsDtcKindValid (Dem_DTCKindType DTCKind)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    48  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    49      return (DTCKind == DEM_DTC_KIND_ALL_DTCS);
	eq	d15,d5,#1
.L1231:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    49      return (DTCKind == DEM_DTC_KIND_ALL_DTCS);      (inlined)
	j	.L134

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    50  }      (inlined)
.L134:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   482  		Dem_DTCKindType DTCKind,
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   483  		Dem_DTCOriginType DTCOrigin,
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   484  		uint8 RecordNumber,
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   485  		uint16* SizeOfFreezeFrame)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   486  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   487  	Dem_DtcIdType DtcId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   488  	uint8  NoOfFreezeFrames;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   489  	Dem_EventIdType EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   490  	Dem_ReturnGetSizeOfFreezeFrameByDTCType ReturnSts;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   491  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   492  	if (!Dem_EvMemIsDtcKindValid (DTCKind))
	jne	d15,#0,.L135
.L1232:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   493  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   494  		DEM_DET(DEM_DET_APIID_GETSIZEOFFREEZEFRAMEBYDTC, DEM_E_WRONG_CONFIGURATION);
	mov	d4,#54
.L1018:
	mov	d5,#0
.L1019:
	mov	d6,#31
.L1020:
	mov	d7,#16
.L1021:
	call	Det_ReportError
.L1022:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   495  		return DEM_GET_SIZEOFFF_WRONG_DTCKIND;
	mov	d2,#3
.L1233:
	j	.L136
.L135:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   496  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   497  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   498  	if (!Dem_EvMemIsDtcOriginValid (&DTCOrigin))
	lea	a15,[a10]0
.L732:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     3  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     4  #ifndef DEM_EVMEMAPI_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     5  #define DEM_EVMEMAPI_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     6  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     7  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     8  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     9  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    10  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    11     Interface Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    12     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    13  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    14  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    15  typedef struct
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    16  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    17    /* DEM API write */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    18    Dem_DtcIdType            DtcId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    19    Dem_DTCOriginType        DTCOrigin;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    20    uint8                    ReqCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    21    /* DEM Main write */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    22    uint8                    DemCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    23    boolean                  IsValid;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    24    Dem_EvMemEventMemoryType EventMemory;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    25  } Dem_EvMemDTCRecordType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    26  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    29  extern Dem_EvMemDTCRecordType Dem_EvMemDTCRecord;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    30  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    31  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    32  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    33  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    34  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    35  /* Read Events From EvMem */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    36  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    37  void Dem_EvMemApiMainFunction(void);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    38  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    39  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    41  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    42  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    43     Inline Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    44     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    45  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    46  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    47  DEM_INLINE Dem_boolean_least Dem_EvMemIsDtcKindValid (Dem_DTCKindType DTCKind)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    48  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    49      return (DTCKind == DEM_DTC_KIND_ALL_DTCS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    50  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    53  DEM_INLINE Dem_boolean_least Dem_EvMemIsDtcOriginValid (Dem_DTCOriginType  *DTCOrigin)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    54  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    55      if(*DTCOrigin == DEM_DTC_ORIGIN_USERDEFINED_MEMORY)
	ld.bu	d15,[a15]
.L1234:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    55      if(*DTCOrigin == DEM_DTC_ORIGIN_USERDEFINED_MEMORY)      (inlined)
	jne	d15,#0,.L137
.L1235:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    56      {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    57          *DTCOrigin = DEM_DTC_ORIGIN_SECONDARY_MEMORY;
	mov	d0,#4
.L1236:
	st.b	[a15],d0

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    55      if(*DTCOrigin == DEM_DTC_ORIGIN_USERDEFINED_MEMORY)      (inlined)
.L137:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    58      }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    59      return (
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    60                 (*DTCOrigin == DEM_DTC_ORIGIN_PRIMARY_MEMORY)
	ld.bu	d0,[a15]
.L1237:
	eq	d15,d0,#1
.L1238:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    59      return (      (inlined)
	j	.L138

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    68  }      (inlined)
.L138:
	jne	d15,#0,.L139
.L1239:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   499  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   500  		DEM_DET(DEM_DET_APIID_GETSIZEOFFREEZEFRAMEBYDTC, DEM_E_WRONG_CONFIGURATION);
	mov	d4,#54
.L1026:
	mov	d5,#0
.L1027:
	mov	d6,#31
.L1028:
	mov	d7,#16
.L1029:
	call	Det_ReportError
.L1030:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   501  		return DEM_GET_SIZEOFFF_WRONG_DTCOR;
	mov	d2,#2
.L1240:
	j	.L140
.L139:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   502  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   503  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   504      if(DTC != DemDtcCodeCopy)
	movh.a	a15,#@his(DemDtcCodeCopy)
	lea	a15,[a15]@los(DemDtcCodeCopy)
	ld.w	d15,[a15]
.L1241:
	jeq	d15,d8,.L141
.L1242:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   505      {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   506          DemDtcIdCopy = Dem_DtcIdFromDtcCode (DTC);
	movh.a	a12,#@his(DemDtcIdCopy)
	lea	a12,[a12]@los(DemDtcIdCopy)
.L1243:
	mov	d4,d8
	call	Dem_DtcIdFromDtcCode
.L1031:
	st.h	[a12],d2
.L1244:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   507          DemDtcCodeCopy = DTC;
	st.w	[a15],d8
.L141:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   508      }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   509      DtcId = DemDtcIdCopy;
	movh.a	a15,#@his(DemDtcIdCopy)
	lea	a15,[a15]@los(DemDtcIdCopy)
	ld.hu	d0,[a15]0
.L734:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     4  #ifndef DEM_DTCS_H
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     5  #define DEM_DTCS_H
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     8  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     9  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    10  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    11  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    12  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    13  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    14  #include "Dem_Cfg_DTC_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    15  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    16  #include "Dem_Mapping.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    17  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    18  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    19  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    20  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    22  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    23  #include "Dem_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    25  #define DEM_DTC_SETTING_ENABLED     FALSE
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    26  #define DEM_DTC_SETTING_DISABLED    TRUE
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    27  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    29  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    30  	Dem_DtcStateType state;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    31  } Dem_DtcState;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    33  /******************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    37  #define DEM_DTCS_NVSTORAGE_BP    2u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    38  #define DEM_DTCS_ALTERNATIVEDTC_FLAG_BP    3u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    40  #define DEM_DTCS_SEVERITYMASK    0xE0u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    41  #define DEM_DTCS_KINDMASK        0x03u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    42  #define DEM_DTCS_NVSTORAGEMASK   ((uint8)(1u<<DEM_DTCS_NVSTORAGE_BP))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    43  #define DEM_DTCS_ALTERNATIVEDTC_FLAG   ((uint8)(1u<<DEM_DTCS_ALTERNATIVEDTC_FLAG_BP))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    46  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    47  #define DEM_DTCS_INIT8(KIND, SEVERITY, NVSTORAGE, FUNC_UNIT, INDEXOF_ALTERNATIVE_DTCID) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    48  {   ((KIND) & (DEM_DTCS_KINDMASK))|((SEVERITY) & (DEM_DTCS_SEVERITYMASK)) | ((uint8)(((NVSTORAGE) & (0x01u)) << DEM_DTCS_NVSTORAGE_BP)) | ((uint8)((DEM_BOOL2BIT(INDEXOF_ALTERNATIVE_DTCID) & (0x01u)) << DEM_DTCS_ALTERNATIVEDTC_FLAG_BP)) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    49      ,(FUNC_UNIT) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    50  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    52  /* FC_VariationPoint_START */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    53  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    54  #define DEM_DTCS_INIT16(OBDCODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    55  {   (OBDCODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    56  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    57  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    58  /* FC_VariationPoint_END */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    60  #define DEM_DTCS_INIT32(CODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    61  {   (CODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    62  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    66  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    67     uint8 kind_severity_storage;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    68     uint8 Functional_Unit;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    69  } Dem_DtcParam8;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    71  /* FC_VariationPoint_START */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    72  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    73  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    74     uint16 ObdCode;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    75  } Dem_DtcParam16;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    76  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    77  /* FC_VariationPoint_END */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    78  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    79  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    80     Dem_DtcCodeType code;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    81  } Dem_DtcParam32;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    82  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    83  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    84      Dem_DtcCodeType AltDtccode;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    85      Dem_DtcCodeType Dtccode;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    86  }Dem_DtcAltParam;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    87  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    88  /******************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    89  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    90  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    92      DEM_ARRAY_DECLARE(Dem_DtcState, Dem_AllDTCsState, DEM_DTCID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    93  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    94  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    97  #define DEM_START_SEC_RAM_INIT
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    98  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   100      #if(DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   101      extern boolean Dem_AlternativeDTCEnabled;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   102      #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   104  #define DEM_STOP_SEC_RAM_INIT
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   105  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   107  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   108  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   110      #if (DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   111      DEM_ARRAY_DECLARE_CONST(Dem_DtcAltParam, Dem_AllAlternativeDTCsParam, DEM_ALTERNATIVE_DTCCODE_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   112      #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   114  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   115  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   117  /********DTC SUPPRESSION************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   118  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressed (Dem_DtcIdType dtcId)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   119  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   120  #if (DEM_CFG_SUPPRESSION != DEM_NO_SUPPRESSION)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   121      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   122  #else
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   123      DEM_UNUSED_PARAM(dtcId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   124      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   128  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressedDirectly (Dem_DtcIdType dtcId)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   130  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   131      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED_DIRECTLY);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   132  #else
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   133      DEM_UNUSED_PARAM(dtcId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   134      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   136  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   138  DEM_INLINE Dem_boolean_least Dem_DtcIsSupported (Dem_DtcIdType dtcID)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   139  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   141              && (!Dem_DtcIsSuppressed(dtcID))
	mov	d1,#0
.L737:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
	mov	d2,#0
.L1245:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
	jeq	d0,#0,.L142
.L1246:
	ge.u	d15,d0,#5
.L1247:
	cmovn	d2,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
.L143:
.L142:
	j	.L144

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }      (inlined)
.L144:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)      (inlined)
	jeq	d2,#0,.L145
.L738:
	movh.a	a15,#@his(Dem_AllDTCsState)
	lea	a15,[a15]@los(Dem_AllDTCsState)
.L1248:
	addsc.a	a15,a15,d0,#0
.L1249:
	ld.bu	d15,[a15]
.L1250:
	mov	d2,#0
.L741:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d2,#0
	sha	d15,d15,d2
.L1251:
	and	d15,#1
.L1252:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L146

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L146:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L1253:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L147

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L147:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   121      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);      (inlined)
	j	.L148

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   126  }      (inlined)
.L148:
	cmovn	d1,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   141              && (!Dem_DtcIsSuppressed(dtcID))      (inlined)
.L149:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   142      );      (inlined)
.L145:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)      (inlined)
	j	.L150

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   143  }      (inlined)
.L150:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   510  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   511  	if (!Dem_DtcIsSupported (DtcId))
	jne	d1,#0,.L151
.L735:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   512  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   513  		DEM_DET(DEM_DET_APIID_GETSIZEOFFREEZEFRAMEBYDTC, DEM_E_WRONG_CONFIGURATION);
	mov	d4,#54
	mov	d5,#0
	mov	d6,#31
	mov	d7,#16
	call	Det_ReportError
.L1032:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   514  		return DEM_GET_SIZEOFFF_WRONG_DTC;
	mov	d2,#1
.L1254:
	j	.L152
.L151:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
	movh.a	a15,#@his(Dem_MapDtcIdToEventId)
	lea	a15,[a15]@los(Dem_MapDtcIdToEventId)
.L1255:
	addsc.a	a15,a15,d0,#1
	ld.hu	d8,[a15]0
.L1024:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];      (inlined)
	j	.L153

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }      (inlined)
.L153:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);      (inlined)
	j	.L154

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }      (inlined)
.L154:

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     3  #ifndef DEM_ENVFFRECNUMERATION_H
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     4  #define DEM_ENVFFRECNUMERATION_H
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     8  #include "Dem_Cfg_EnvFFRecNumeration.h"
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     9  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    10  #include "Dem_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    11  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    13  #if (DEM_CFG_FFRECNUM == DEM_CFG_FFRECNUM_CALCULATED)
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    16  DEM_INLINE Dem_boolean_least Dem_EnvIsFFRecNumValid(Dem_EventIdType EventId, uint8 RecNumber)
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    17  {
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    18  	return ((RecNumber > 0) && (RecNumber <= Dem_EvtParam_GetMaxNumberFreezeFrameRecords(EventId)));
	mov	d0,#0
.L1033:

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    18  	return ((RecNumber > 0) && (RecNumber <= Dem_EvtParam_GetMaxNumberFreezeFrameRecords(EventId)));      (inlined)
	jeq	d9,#0,.L155

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   196  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L156:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    53  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    54  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    55  LOCAL_INLINE boolean Dem_EvtParam_GetStoreTestFailedToNextOC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    56  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    57  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    58  	return TRUE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    59  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    60  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    61  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    62  LOCAL_INLINE boolean Dem_EvtParam_GetRequestsWarningIndicator(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    65  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    68  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    69  LOCAL_INLINE Dem_EventCategoryType Dem_EvtParam_GetCategory(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    70  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    71  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    72  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    73  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    74  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    75  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInPrimary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    76  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    80  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    81  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    82  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInSecondary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    83  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    84  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    85  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    86  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    87  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    88  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    89  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInMirror(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    90  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    91  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    92  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    93  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    94  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    95  LOCAL_INLINE boolean Dem_EvtParam_GetAgingAllowed(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    96  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    97  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    98  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 1);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    99  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   100  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   101  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   102  LOCAL_INLINE boolean Dem_EvtParam_GetIsGlobalFDCCallbackConfigured(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   103  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   104  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   105  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   106  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   107  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   108  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   109  LOCAL_INLINE boolean Dem_EvtParam_GetTriggersDataChangedCallback(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   110  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   111  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   112  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   113  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   114  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   115  LOCAL_INLINE uint8 Dem_EvtParam_GetSignificance(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   116  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   117  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   118  	return (uint8)(RBA_DIAGLIB_GETSINGLEBIT16(Dem_EvtParam_16[indx].dataDataContainer_2, 2));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   119  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   120  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   121  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   122  LOCAL_INLINE uint8 Dem_EvtParam_GetOperationCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   123  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   124  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   125  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   126  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   127  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   128  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   129  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   130  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   131  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   132  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   133  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   134  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   135  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   136  LOCAL_INLINE uint8 Dem_EvtParam_GetFailureCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   137  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   138  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   139  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   140  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   141  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   142  LOCAL_INLINE boolean Dem_EvtParam_GetInitialSuppressionStatus(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   143  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   144  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   145  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 3);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   146  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   147  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   148  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   149  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceMethodIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   150  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   151  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   152  	return DEM_DEBMETH_IDX_ARCTRBASECLASS;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   153  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   154  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   155  LOCAL_INLINE uint16 Dem_EvtParam_GetDebounceParamSettingIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   156  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   157  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   158  	return (uint16)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 4, 3));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   159  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   160  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   161  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   162  LOCAL_INLINE uint8 Dem_EvtParam_GetBufferTimeSFB(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   163  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   164  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   165  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   166  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   167  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   168  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingThreshold(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   169  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   170  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   171  	return Dem_EvtParam_8[indx].dataDataContainer_1;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   172  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   173  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   174  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   175  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingThresholdForTFSLC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   176  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   177  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   178  	return 0u;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   179  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   180  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   181  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   182  LOCAL_INLINE uint8 Dem_EvtParam_GetFailureConfirmationThreshold(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   183  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   184  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   185  	return 1u;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   186  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   187  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   188  LOCAL_INLINE uint8 Dem_EvtParam_GetEventPriority(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   189  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   190  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   191  	return (uint8)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 7, 3));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   192  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   193  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   194  LOCAL_INLINE uint8 Dem_EvtParam_GetMaxNumberFreezeFrameRecords(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   195  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   196  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   197  	return (uint8)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 10, 2));
	movh.a	a15,#@his(Dem_EvtParam_16)
	lea	a15,[a15]@los(Dem_EvtParam_16)
.L1256:
	addsc.a	a15,a15,d8,#1
.L1257:
	ld.hu	d2,[a15]0
.L754:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     3  #ifndef RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     4  #define RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     9  #define RBA_DIAGLIB_ISBITSET16       rba_DiagLib_Bit16IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT16   rba_DiagLib_Bit16GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    11  #define RBA_DIAGLIB_GETBITS16        rba_DiagLib_Bit16GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT16   rba_DiagLib_Bit16OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS16  rba_DiagLib_Bit16OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    15  LOCAL_INLINE uint16 rba_DiagLib_Bit16Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    17      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    21  LOCAL_INLINE void rba_DiagLib_Bit16SetBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    26  LOCAL_INLINE void rba_DiagLib_Bit16ClearBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    28      *buffer &= ((uint16) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    31  LOCAL_INLINE void rba_DiagLib_Bit16MergeBitmask(uint16 *buffer, uint16 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    36  LOCAL_INLINE void rba_DiagLib_Bit16SetBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    38      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    39      *buffer |= ((uint16) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    42  LOCAL_INLINE void rba_DiagLib_Bit16ClearBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    44      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    45      *buffer &= ((uint16) (~((uint16) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    48  LOCAL_INLINE void rba_DiagLib_Bit16OverwriteBit(uint16 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    52          rba_DiagLib_Bit16SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    56          rba_DiagLib_Bit16ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    60  LOCAL_INLINE uint16 rba_DiagLib_Bit16GetSingleBit(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    62      return (uint16) ((value >> bit_position) & 1u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    64  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    65  LOCAL_INLINE boolean rba_DiagLib_Bit16IsBitSet(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    66  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    67      return (boolean) (rba_DiagLib_Bit16GetSingleBit(value, bit_position) != 0u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    68  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    69  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    70  LOCAL_INLINE uint16 rba_DiagLib_Bit16GetBits(uint16 value, uint8 bit_position, uint8 number_of_bits)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    71  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    72      uint16 bit2shift = 1;
	mov	d1,#1
.L1034:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    73      value = value >> bit_position;
	sha	d2,d2,#-10
.L1258:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    74      value = value % ((uint16) (bit2shift << number_of_bits));
	sha	d1,#2
.L1035:
	div.u	e2,d2,d1
.L1259:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    75      return value;      (inlined)
	j	.L157

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    76  }      (inlined)
.L157:
	extr.u	d15,d3,#0,#8
.L1260:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   197  	return (uint8)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 10, 2));      (inlined)
	j	.L158

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   198  }      (inlined)
.L158:

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    18  	return ((RecNumber > 0) && (RecNumber <= Dem_EvtParam_GetMaxNumberFreezeFrameRecords(EventId)));      (inlined)
	lt.u	d15,d15,d9
.L1261:
	cmovn	d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    18  	return ((RecNumber > 0) && (RecNumber <= Dem_EvtParam_GetMaxNumberFreezeFrameRecords(EventId)));      (inlined)
.L159:
.L155:
	j	.L160

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    19  }      (inlined)
.L160:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   515  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   516  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   517  	EventId = Dem_DtcIdGetFirstEventId (DtcId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   518  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   519  	if ((!Dem_EnvIsFFRecNumValid(EventId,RecordNumber)) && (RecordNumber != 0xFF))
	jne	d0,#0,.L161
.L750:
	mov	d15,#255
.L1262:
	jeq	d15,d9,.L162
.L1263:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   520  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   521  		DEM_DET(DEM_DET_APIID_GETSIZEOFFREEZEFRAMEBYDTC, DEM_E_WRONG_CONFIGURATION);
	mov	d4,#54
	mov	d5,#0
	mov	d6,#31
	mov	d7,#16
	call	Det_ReportError
.L1264:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   522  		return DEM_GET_SIZEOFFF_WRONG_RNUM;
	mov	d2,#4
.L1265:
	j	.L163
.L162:
.L161:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   523  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   524  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   525  	/* Retrieve data size of single freeze frame*/
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   526  	ReturnSts = Dem_EnvGetSizeOfFF (EventId, SizeOfFreezeFrame);
	mov	d4,d8
.L748:
	mov.aa	a4,a13
.L1036:
	call	Dem_EnvGetSizeOfFF
.L1037:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   527  	if (RecordNumber == 0xFF)
	mov	d15,#255
.L1266:
	jne	d15,d9,.L164

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   196  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L165:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    53  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    54  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    55  LOCAL_INLINE boolean Dem_EvtParam_GetStoreTestFailedToNextOC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    56  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    57  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    58  	return TRUE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    59  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    60  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    61  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    62  LOCAL_INLINE boolean Dem_EvtParam_GetRequestsWarningIndicator(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    65  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    68  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    69  LOCAL_INLINE Dem_EventCategoryType Dem_EvtParam_GetCategory(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    70  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    71  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    72  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    73  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    74  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    75  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInPrimary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    76  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    80  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    81  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    82  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInSecondary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    83  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    84  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    85  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    86  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    87  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    88  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    89  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInMirror(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    90  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    91  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    92  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    93  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    94  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    95  LOCAL_INLINE boolean Dem_EvtParam_GetAgingAllowed(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    96  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    97  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    98  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 1);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    99  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   100  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   101  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   102  LOCAL_INLINE boolean Dem_EvtParam_GetIsGlobalFDCCallbackConfigured(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   103  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   104  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   105  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   106  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   107  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   108  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   109  LOCAL_INLINE boolean Dem_EvtParam_GetTriggersDataChangedCallback(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   110  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   111  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   112  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   113  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   114  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   115  LOCAL_INLINE uint8 Dem_EvtParam_GetSignificance(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   116  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   117  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   118  	return (uint8)(RBA_DIAGLIB_GETSINGLEBIT16(Dem_EvtParam_16[indx].dataDataContainer_2, 2));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   119  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   120  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   121  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   122  LOCAL_INLINE uint8 Dem_EvtParam_GetOperationCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   123  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   124  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   125  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   126  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   127  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   128  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   129  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   130  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   131  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   132  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   133  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   134  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   135  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   136  LOCAL_INLINE uint8 Dem_EvtParam_GetFailureCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   137  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   138  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   139  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   140  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   141  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   142  LOCAL_INLINE boolean Dem_EvtParam_GetInitialSuppressionStatus(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   143  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   144  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   145  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 3);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   146  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   147  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   148  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   149  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceMethodIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   150  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   151  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   152  	return DEM_DEBMETH_IDX_ARCTRBASECLASS;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   153  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   154  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   155  LOCAL_INLINE uint16 Dem_EvtParam_GetDebounceParamSettingIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   156  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   157  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   158  	return (uint16)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 4, 3));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   159  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   160  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   161  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   162  LOCAL_INLINE uint8 Dem_EvtParam_GetBufferTimeSFB(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   163  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   164  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   165  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   166  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   167  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   168  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingThreshold(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   169  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   170  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   171  	return Dem_EvtParam_8[indx].dataDataContainer_1;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   172  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   173  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   174  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   175  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingThresholdForTFSLC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   176  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   177  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   178  	return 0u;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   179  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   180  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   181  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   182  LOCAL_INLINE uint8 Dem_EvtParam_GetFailureConfirmationThreshold(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   183  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   184  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   185  	return 1u;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   186  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   187  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   188  LOCAL_INLINE uint8 Dem_EvtParam_GetEventPriority(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   189  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   190  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   191  	return (uint8)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 7, 3));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   192  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   193  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   194  LOCAL_INLINE uint8 Dem_EvtParam_GetMaxNumberFreezeFrameRecords(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   195  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   196  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   197  	return (uint8)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 10, 2));
	movh.a	a15,#@his(Dem_EvtParam_16)
	lea	a15,[a15]@los(Dem_EvtParam_16)
.L1267:
	addsc.a	a15,a15,d8,#1
.L1268:
	ld.hu	d0,[a15]0
.L759:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     3  #ifndef RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     4  #define RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     9  #define RBA_DIAGLIB_ISBITSET16       rba_DiagLib_Bit16IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT16   rba_DiagLib_Bit16GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    11  #define RBA_DIAGLIB_GETBITS16        rba_DiagLib_Bit16GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT16   rba_DiagLib_Bit16OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS16  rba_DiagLib_Bit16OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    15  LOCAL_INLINE uint16 rba_DiagLib_Bit16Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    17      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    21  LOCAL_INLINE void rba_DiagLib_Bit16SetBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    26  LOCAL_INLINE void rba_DiagLib_Bit16ClearBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    28      *buffer &= ((uint16) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    31  LOCAL_INLINE void rba_DiagLib_Bit16MergeBitmask(uint16 *buffer, uint16 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    36  LOCAL_INLINE void rba_DiagLib_Bit16SetBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    38      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    39      *buffer |= ((uint16) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    42  LOCAL_INLINE void rba_DiagLib_Bit16ClearBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    44      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    45      *buffer &= ((uint16) (~((uint16) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    48  LOCAL_INLINE void rba_DiagLib_Bit16OverwriteBit(uint16 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    52          rba_DiagLib_Bit16SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    56          rba_DiagLib_Bit16ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    60  LOCAL_INLINE uint16 rba_DiagLib_Bit16GetSingleBit(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    62      return (uint16) ((value >> bit_position) & 1u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    64  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    65  LOCAL_INLINE boolean rba_DiagLib_Bit16IsBitSet(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    66  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    67      return (boolean) (rba_DiagLib_Bit16GetSingleBit(value, bit_position) != 0u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    68  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    69  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    70  LOCAL_INLINE uint16 rba_DiagLib_Bit16GetBits(uint16 value, uint8 bit_position, uint8 number_of_bits)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    71  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    72      uint16 bit2shift = 1;
	mov	d15,#1
.L1038:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    73      value = value >> bit_position;
	sha	d0,d0,#-10
.L1269:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    74      value = value % ((uint16) (bit2shift << number_of_bits));
	sha	d15,#2
.L1039:
	div.u	e0,d0,d15
.L1270:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    75      return value;      (inlined)
	j	.L166

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    76  }      (inlined)
.L166:
	extr.u	d15,d1,#0,#8
.L1271:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   197  	return (uint8)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 10, 2));      (inlined)
	j	.L167

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   198  }      (inlined)
.L167:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   528  	{   /* data size for all freeze frames (RecordNumber = 0xFF) */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   529  		NoOfFreezeFrames = Dem_EvtParam_GetMaxNumberFreezeFrameRecords(EventId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   530  		*SizeOfFreezeFrame = (*SizeOfFreezeFrame) * NoOfFreezeFrames;
	ld.hu	d0,[a13]0
.L1272:
	mul	d0,d15
.L1273:
	st.h	[a13],d0
.L164:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   531  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   532  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   533  	/* Retrieve data size */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   534  	return ReturnSts;
	j	.L168

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   535  }
.L168:
.L163:
.L152:
.L140:
.L136:
	ret
.L720:
	
__Dem_GetSizeOfFreezeFrameByDTC_function_end:
	.size	Dem_GetSizeOfFreezeFrameByDTC,__Dem_GetSizeOfFreezeFrameByDTC_function_end-Dem_GetSizeOfFreezeFrameByDTC
.L362:
	; End of function
	
	.sdecl	'.text.Dem_EvMemApi.Dem_SetFreezeFrameRecordFilter',code,cluster('Dem_SetFreezeFrameRecordFilter')
	.sect	'.text.Dem_EvMemApi.Dem_SetFreezeFrameRecordFilter'
	.align	2
	
	.global	Dem_SetFreezeFrameRecordFilter

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   536  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   537  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   538  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   539  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   540  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   541  #if DEM_CFG_SERVICE_READDTCINFORMATION_SUBFUNC_0x03
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   542  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   543  /* static variables Dem_SetFreezeFrameRecordFilter and Dem_GetNextFilteredRecord */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   544  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   545  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   546  static uint16_least Dem_EvMemFilteredRecordLocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   547  static uint16_least Dem_EvMemFilteredRecordFreezeFrameId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   548  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   549  #if (DEM_CFG_OBD != DEM_CFG_OBD_OFF)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   550  static Dem_DTCFormatType Dem_EvMemFilteredRecordDTCFormat;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   551  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   552  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   553  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   554  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   555  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   556   Dem_SetFreezeFrameRecordFilter
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   557  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   558   Description:        Sets a freeze frame record filter.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   559   Attributes:         Synchronous/Non Reentrant
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   560  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   561   DTCFormat:          Defines the output-format of the requested DTC values for the sub-sequent API calls.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   562   NumberOfFilteredRecords: Number of freeze frame records currently stored in the event memory.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   563   Return:                  Status of the operation to (re-)set a freeze frame record filter.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   564  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   565   ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   566   */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   567  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   568  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   569  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   570  Dem_ReturnSetFilterType Dem_SetFreezeFrameRecordFilter(Dem_DTCFormatType DTCFormat, uint16* NumberOfFilteredRecords)
; Function Dem_SetFreezeFrameRecordFilter
.L320:
Dem_SetFreezeFrameRecordFilter:	.type	func
	mov.aa	a12,a4
.L1040:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   571  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   572  	uint16_least LocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   573  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   574  #if (DEM_CFG_OBD == DEM_CFG_OBD_OFF)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   575  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   576     if (DTCFormat == DEM_DTC_FORMAT_OBD)
	jne	d4,#0,.L169
.L1069:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   577     {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   578        return DEM_WRONG_FILTER;
	mov	d2,#1
.L1070:
	j	.L170
.L169:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   579     }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   580  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   581  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   582  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   583  	*NumberOfFilteredRecords = 0;
	mov	d15,#0
.L1071:
	st.h	[a12],d15
.L1072:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   584  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   585  #if (DEM_CFG_OBD != DEM_CFG_OBD_OFF)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   586  	Dem_EvMemFilteredRecordDTCFormat = DTCFormat;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   587  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   588  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   589  	/* use primary memory */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   590  	for (Dem_EvMemEventMemoryLocIteratorNew     (&Dem_EvMemFilteredRecordLocId, DEM_CFG_EVMEM_MEMID_PRIMARY);
	movh.a	a13,#@his(Dem_EvMemFilteredRecordLocId)
	lea	a13,[a13]@los(Dem_EvMemFilteredRecordLocId)
.L421:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   541  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   542  DEM_INLINE void Dem_EvMemSetEventMemTrigger(uint16_least LocId, Dem_TriggerType Trigger)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   543  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   544     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   545     DEM_EVMEM_USEVAR(Trigger);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   546  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   547  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   548     Dem_EvMemEventMemory[LocId].Trigger = Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   549  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   550  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   551  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   552  /* --- Data --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   553  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is used to get address of element data and to fill the data block */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   554  DEM_INLINE uint8 *Dem_EvMemGetEventMemDataByPtr(Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   555  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   557  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   558  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   559  DEM_INLINE uint8 *Dem_EvMemGetEventMemData(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   560  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   561     return Dem_EvMemGetEventMemDataByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   562  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   563  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   564  DEM_INLINE uint16 Dem_EvMemGetEventMemDataSize(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   565  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   566     return DEM_SIZEOF_VAR(Dem_EvMemEventMemory[0].Data);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   567  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   568  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   569  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   570     Event Memory Status
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   571     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   572  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   573  /* the bits DEM_EVMEM_STSMASK_STORED and DEM_EVMEM_STSMASK_DELETED shall not be set at the same time */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   574  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   575  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedSLC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   576  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   577     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED)) == (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   578  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   579  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   580  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestCompleteTFC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   581  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   582      return ((Status & DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC) == DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   583  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   584  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   585  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedTFC (uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   586  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   587      return ((Status & DEM_EVMEM_STSMASK_TESTFAILED_TFC) == DEM_EVMEM_STSMASK_TESTFAILED_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   588  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   589  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   590  DEM_INLINE Dem_boolean_least Dem_EvMemIsStored(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   591  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   592     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   593  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   594  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   595  DEM_INLINE Dem_boolean_least Dem_EvMemIsEmpty(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   596  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   597     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   598  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   599  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   600  DEM_INLINE Dem_boolean_least Dem_EvMemIsDeleted(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   601  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   602     DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   603  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   604  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   605     return (Dem_boolean_least)((Status & DEM_EVMEM_STSMASK_DELETED) != 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   606  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   607     return FALSE;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   608  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   609  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   610  DEM_INLINE uint16_least Dem_EvMemSetToEmpty(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   611  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   612  	return 0u;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   613  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   614  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   615  DEM_INLINE uint16_least Dem_EvMemSetToDelete(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   616  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   617  	DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   618  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   619  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   620  	return (Status | DEM_EVMEM_STSMASK_DELETED) & (~DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   621  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   622      return Dem_EvMemSetToEmpty();
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   623  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   624  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   625  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   626  DEM_INLINE Dem_boolean_least Dem_EvMemGetShadowVisibility(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   627  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   628  	return DEM_CFG_EVMEM_SHADOW_ENTRIES_VISIBLE;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   629  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   630  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   631  DEM_INLINE Dem_boolean_least Dem_EvMemIsVisible(uint16_least Status, Dem_boolean_least ShadowEntriesVisible)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   632  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   633  	return (Dem_boolean_least)( ( Dem_EvMemIsStored(Status)) ||
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   634  			                    (!Dem_EvMemIsEmpty (Status) && Dem_EvMemGetShadowVisibility() && ShadowEntriesVisible));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   635  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   636  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   637  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   638     Event Memory Iterators
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   639     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   640  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   641  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   642  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   643  DEM_INLINE uint16_least Dem_EvMemGetEventMemStartLocId(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   644  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   645  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   646  	DEM_EVMEM_USEVAR(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   647  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   648  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   649  	return 0;
	mov	d15,#0

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   649  	return 0;      (inlined)
	j	.L171

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   653  }      (inlined)
.L171:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   650  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   651  	return Dem_EvMemLocIdList[MemId];
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   652  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   653  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   654  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   655  DEM_INLINE uint16_least Dem_EvMemGetEventMemEndLocId(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   656  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   657  	DEM_EVMEM_USEVAR(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   658  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   659  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   660  	return DEM_CFG_MAX_NUMBER_EVENT_ENTRY_PRIMARY;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   661  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   662  	return Dem_EvMemLocIdList[MemId+1u];
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   663  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   664  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   665  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   666  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   667  DEM_INLINE void Dem_EvMemEventMemoryLocIteratorNew (uint16_least *LocId, uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   668  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   669      *LocId = Dem_EvMemGetEventMemStartLocId(MemId);
	st.w	[a13],d15
.L422:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   591  		 Dem_EvMemEventMemoryLocIteratorIsValid (&Dem_EvMemFilteredRecordLocId, DEM_CFG_EVMEM_MEMID_PRIMARY);
	j	.L172

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   592  		 Dem_EvMemEventMemoryLocIteratorNext    (&Dem_EvMemFilteredRecordLocId, DEM_CFG_EVMEM_MEMID_PRIMARY))
.L173:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   593  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   594  		if ( Dem_EvMemIsVisible(Dem_EvMemGetEventMemStatus(Dem_EvMemFilteredRecordLocId), Dem_EvMemGetShadowVisibility()))
	ld.w	d2,[a13]
.L433:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
	movh.a	a14,#@his(Dem_EvMemEventMemory)
	lea	a14,[a14]@los(Dem_EvMemEventMemory)
.L1073:
	mul	d15,d2,#20
	addsc.a	a15,a14,d15,#0
.L438:
	ld.hu	d0,[a15]0
.L1074:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;      (inlined)
	j	.L174

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }      (inlined)
.L174:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);      (inlined)
	j	.L175

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }      (inlined)
.L175:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   628  	return DEM_CFG_EVMEM_SHADOW_ENTRIES_VISIBLE;      (inlined)
	j	.L176

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   629  }      (inlined)
.L176:
	mov	d1,#0
.L445:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   541  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   542  DEM_INLINE void Dem_EvMemSetEventMemTrigger(uint16_least LocId, Dem_TriggerType Trigger)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   543  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   544     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   545     DEM_EVMEM_USEVAR(Trigger);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   546  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   547  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   548     Dem_EvMemEventMemory[LocId].Trigger = Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   549  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   550  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   551  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   552  /* --- Data --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   553  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is used to get address of element data and to fill the data block */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   554  DEM_INLINE uint8 *Dem_EvMemGetEventMemDataByPtr(Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   555  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   557  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   558  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   559  DEM_INLINE uint8 *Dem_EvMemGetEventMemData(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   560  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   561     return Dem_EvMemGetEventMemDataByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   562  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   563  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   564  DEM_INLINE uint16 Dem_EvMemGetEventMemDataSize(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   565  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   566     return DEM_SIZEOF_VAR(Dem_EvMemEventMemory[0].Data);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   567  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   568  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   569  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   570     Event Memory Status
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   571     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   572  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   573  /* the bits DEM_EVMEM_STSMASK_STORED and DEM_EVMEM_STSMASK_DELETED shall not be set at the same time */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   574  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   575  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedSLC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   576  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   577     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED)) == (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   578  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   579  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   580  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestCompleteTFC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   581  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   582      return ((Status & DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC) == DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   583  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   584  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   585  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedTFC (uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   586  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   587      return ((Status & DEM_EVMEM_STSMASK_TESTFAILED_TFC) == DEM_EVMEM_STSMASK_TESTFAILED_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   588  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   589  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   590  DEM_INLINE Dem_boolean_least Dem_EvMemIsStored(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   591  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   592     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   593  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   594  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   595  DEM_INLINE Dem_boolean_least Dem_EvMemIsEmpty(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   596  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   597     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   598  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   599  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   600  DEM_INLINE Dem_boolean_least Dem_EvMemIsDeleted(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   601  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   602     DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   603  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   604  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   605     return (Dem_boolean_least)((Status & DEM_EVMEM_STSMASK_DELETED) != 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   606  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   607     return FALSE;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   608  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   609  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   610  DEM_INLINE uint16_least Dem_EvMemSetToEmpty(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   611  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   612  	return 0u;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   613  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   614  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   615  DEM_INLINE uint16_least Dem_EvMemSetToDelete(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   616  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   617  	DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   618  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   619  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   620  	return (Status | DEM_EVMEM_STSMASK_DELETED) & (~DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   621  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   622      return Dem_EvMemSetToEmpty();
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   623  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   624  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   625  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   626  DEM_INLINE Dem_boolean_least Dem_EvMemGetShadowVisibility(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   627  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   628  	return DEM_CFG_EVMEM_SHADOW_ENTRIES_VISIBLE;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   629  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   630  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   631  DEM_INLINE Dem_boolean_least Dem_EvMemIsVisible(uint16_least Status, Dem_boolean_least ShadowEntriesVisible)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   632  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   633  	return (Dem_boolean_least)( ( Dem_EvMemIsStored(Status)) ||
	mov	d3,#0
.L453:
	mov	d4,#4224
.L1075:
	and	d15,d0,d4
.L1076:
	mov	d5,#4096
.L1077:
	eq	d15,d15,d5
.L1078:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   592     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == DEM_EVMEM_STSMASK_STORED);      (inlined)
	j	.L177

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   593  }      (inlined)
.L177:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   633  	return (Dem_boolean_least)( ( Dem_EvMemIsStored(Status)) ||      (inlined)
	jne	d15,#0,.L178
.L458:
	and	d0,d4
.L1079:
	eq	d15,d0,#0
.L1080:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   597     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == 0u);      (inlined)
	j	.L179

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   598  }      (inlined)
.L179:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   634  			                    (!Dem_EvMemIsEmpty (Status) && Dem_EvMemGetShadowVisibility() && ShadowEntriesVisible));      (inlined)
	jne	d15,#0,.L180
.L462:
	mov	d15,#0

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   628  	return DEM_CFG_EVMEM_SHADOW_ENTRIES_VISIBLE;      (inlined)
	j	.L181

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   629  }      (inlined)
.L181:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   634  			                    (!Dem_EvMemIsEmpty (Status) && Dem_EvMemGetShadowVisibility() && ShadowEntriesVisible));      (inlined)
	jeq	d15,#0,.L182
.L1081:
	jeq	d1,#0,.L183

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   633  	return (Dem_boolean_least)( ( Dem_EvMemIsStored(Status)) ||      (inlined)
.L178:
	mov	d3,#1

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   633  	return (Dem_boolean_least)( ( Dem_EvMemIsStored(Status)) ||      (inlined)
.L183:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   634  			                    (!Dem_EvMemIsEmpty (Status) && Dem_EvMemGetShadowVisibility() && ShadowEntriesVisible));      (inlined)
.L182:
.L180:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   633  	return (Dem_boolean_least)( ( Dem_EvMemIsStored(Status)) ||      (inlined)
	j	.L184

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   635  }      (inlined)
.L184:
	jeq	d3,#0,.L185
.L446:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     3  #ifndef DEM_LIB_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     4  #define DEM_LIB_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     6  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     7  #include "Dem_Prv_Det.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     8  #include "rba_DiagLib_MemUtils.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     9  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    11  /* Macro for static assertion Check */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    12  /* either array length is (2*1)-1->valid or (2*0)-1->invalid*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    13  #define DEM_STATIC_ASSERT(COND,MSG) typedef uint8 Dem_static_assertion_##MSG[(2*(((COND)!=(FALSE))?1:0))-1]
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    15  /* mapping of memset and memcpy */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    16  #define DEM_MEMCPY  RBA_DIAGLIB_MEMCPY
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    17  #define DEM_MEMSET  RBA_DIAGLIB_MEMSET
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    19  /* Defines */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    20  #define DEM_MAXSINT16   0x7FFF
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    22  #if (DEM_CFG_BUILDTARGET != DEM_CFG_BUILDTARGET_DEMTESTSUITE)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    23      #define DEM_ASSERT_RANGECHECK(CONDITION) do {} while (0)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    24  #else
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    25      #include "DemTest_Stub4RangeCheck.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    27      #define DEM_ASSERT_RANGECHECK(CONDITION) DEM_assertValueInRange(CONDITION)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    28  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    30  // these functions are necessary to avoid compiler warnings of the kind "statement is always FALSE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    31  DEM_INLINE uint16 Dem_LibGetParamUI16( uint16 parameter )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    33      return parameter;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    36  DEM_INLINE uint8 Dem_LibGetParamUI8( uint8 parameter )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    38      return parameter;
	mov	d15,#1

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    38      return parameter;      (inlined)
	j	.L186

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    39  }      (inlined)
.L186:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   595  		{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   596  			LocId = Dem_EvMemFilteredRecordLocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   597  			if (Dem_LibGetParamUI8(DEM_CFG_EVCOMB) == Dem_LibGetParamUI8(DEM_CFG_EVCOMB_ONRETRIEVAL))
	mov	d0,#3
.L467:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    38      return parameter;      (inlined)
	j	.L187

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    39  }      (inlined)
.L187:
	jne	d15,d0,.L188
.L469:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
	mul	d15,d2,#20
	addsc.a	a15,a14,d15,#0
.L474:
	ld.hu	d15,[a15]2
.L1082:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;      (inlined)
	j	.L189

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }      (inlined)
.L189:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);      (inlined)
	j	.L190

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }      (inlined)
.L190:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
	movh.a	a15,#@his(Dem_MapEventIdToDtcId)
	lea	a15,[a15]@los(Dem_MapEventIdToDtcId)
.L1083:
	addsc.a	a15,a15,d15,#1
	ld.hu	d4,[a15]0
.L1084:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];      (inlined)
	j	.L191

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }      (inlined)
.L191:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   541  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   542  DEM_INLINE void Dem_EvMemSetEventMemTrigger(uint16_least LocId, Dem_TriggerType Trigger)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   543  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   544     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   545     DEM_EVMEM_USEVAR(Trigger);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   546  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   547  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   548     Dem_EvMemEventMemory[LocId].Trigger = Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   549  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   550  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   551  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   552  /* --- Data --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   553  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is used to get address of element data and to fill the data block */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   554  DEM_INLINE uint8 *Dem_EvMemGetEventMemDataByPtr(Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   555  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   557  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   558  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   559  DEM_INLINE uint8 *Dem_EvMemGetEventMemData(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   560  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   561     return Dem_EvMemGetEventMemDataByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   562  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   563  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   564  DEM_INLINE uint16 Dem_EvMemGetEventMemDataSize(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   565  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   566     return DEM_SIZEOF_VAR(Dem_EvMemEventMemory[0].Data);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   567  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   568  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   569  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   570     Event Memory Status
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   571     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   572  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   573  /* the bits DEM_EVMEM_STSMASK_STORED and DEM_EVMEM_STSMASK_DELETED shall not be set at the same time */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   574  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   575  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedSLC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   576  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   577     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED)) == (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   578  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   579  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   580  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestCompleteTFC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   581  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   582      return ((Status & DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC) == DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   583  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   584  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   585  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedTFC (uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   586  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   587      return ((Status & DEM_EVMEM_STSMASK_TESTFAILED_TFC) == DEM_EVMEM_STSMASK_TESTFAILED_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   588  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   589  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   590  DEM_INLINE Dem_boolean_least Dem_EvMemIsStored(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   591  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   592     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   593  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   594  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   595  DEM_INLINE Dem_boolean_least Dem_EvMemIsEmpty(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   596  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   597     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   598  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   599  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   600  DEM_INLINE Dem_boolean_least Dem_EvMemIsDeleted(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   601  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   602     DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   603  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   604  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   605     return (Dem_boolean_least)((Status & DEM_EVMEM_STSMASK_DELETED) != 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   606  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   607     return FALSE;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   608  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   609  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   610  DEM_INLINE uint16_least Dem_EvMemSetToEmpty(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   611  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   612  	return 0u;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   613  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   614  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   615  DEM_INLINE uint16_least Dem_EvMemSetToDelete(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   616  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   617  	DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   618  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   619  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   620  	return (Status | DEM_EVMEM_STSMASK_DELETED) & (~DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   621  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   622      return Dem_EvMemSetToEmpty();
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   623  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   624  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   625  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   626  DEM_INLINE Dem_boolean_least Dem_EvMemGetShadowVisibility(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   627  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   628  	return DEM_CFG_EVMEM_SHADOW_ENTRIES_VISIBLE;
	mov	d6,#0

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   628  	return DEM_CFG_EVMEM_SHADOW_ENTRIES_VISIBLE;      (inlined)
	j	.L192

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   629  }      (inlined)
.L192:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   598  			{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   599  				LocId = Dem_EvMemGetEventMemoryLocIdOfDtcWithVisibility (Dem_DtcIdFromEventId (Dem_EvMemGetEventMemEventId (Dem_EvMemFilteredRecordLocId)), DEM_CFG_EVMEM_MEMID_PRIMARY, Dem_EvMemGetShadowVisibility());
	mov	d5,#0
.L1085:
	call	Dem_EvMemGetEventMemoryLocIdOfDtcWithVisibility
.L188:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   600  			}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   601  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   602  			if (LocId == Dem_EvMemFilteredRecordLocId)
	ld.w	d15,[a13]
.L1041:
	jne	d15,d2,.L193
.L483:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
	mul	d15,d15,#20
	addsc.a	a15,a14,d15,#0
.L491:
	ld.bu	d15,[a15]12
.L1086:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;      (inlined)
	j	.L194

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }      (inlined)
.L194:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);      (inlined)
	j	.L195

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }      (inlined)
.L195:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   603  			{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   604  				*NumberOfFilteredRecords = *NumberOfFilteredRecords + (uint16) Dem_EvMemGetEventMemFreezeFrameCounter (Dem_EvMemFilteredRecordLocId);
	ld.hu	d0,[a12]0
.L488:
	add	d0,d15
.L489:
	st.h	[a12],d0
.L193:
.L185:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   541  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   542  DEM_INLINE void Dem_EvMemSetEventMemTrigger(uint16_least LocId, Dem_TriggerType Trigger)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   543  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   544     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   545     DEM_EVMEM_USEVAR(Trigger);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   546  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   547  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   548     Dem_EvMemEventMemory[LocId].Trigger = Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   549  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   550  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   551  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   552  /* --- Data --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   553  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is used to get address of element data and to fill the data block */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   554  DEM_INLINE uint8 *Dem_EvMemGetEventMemDataByPtr(Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   555  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   557  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   558  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   559  DEM_INLINE uint8 *Dem_EvMemGetEventMemData(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   560  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   561     return Dem_EvMemGetEventMemDataByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   562  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   563  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   564  DEM_INLINE uint16 Dem_EvMemGetEventMemDataSize(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   565  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   566     return DEM_SIZEOF_VAR(Dem_EvMemEventMemory[0].Data);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   567  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   568  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   569  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   570     Event Memory Status
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   571     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   572  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   573  /* the bits DEM_EVMEM_STSMASK_STORED and DEM_EVMEM_STSMASK_DELETED shall not be set at the same time */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   574  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   575  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedSLC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   576  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   577     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED)) == (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   578  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   579  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   580  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestCompleteTFC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   581  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   582      return ((Status & DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC) == DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   583  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   584  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   585  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedTFC (uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   586  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   587      return ((Status & DEM_EVMEM_STSMASK_TESTFAILED_TFC) == DEM_EVMEM_STSMASK_TESTFAILED_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   588  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   589  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   590  DEM_INLINE Dem_boolean_least Dem_EvMemIsStored(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   591  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   592     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   593  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   594  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   595  DEM_INLINE Dem_boolean_least Dem_EvMemIsEmpty(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   596  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   597     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   598  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   599  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   600  DEM_INLINE Dem_boolean_least Dem_EvMemIsDeleted(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   601  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   602     DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   603  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   604  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   605     return (Dem_boolean_least)((Status & DEM_EVMEM_STSMASK_DELETED) != 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   606  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   607     return FALSE;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   608  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   609  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   610  DEM_INLINE uint16_least Dem_EvMemSetToEmpty(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   611  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   612  	return 0u;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   613  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   614  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   615  DEM_INLINE uint16_least Dem_EvMemSetToDelete(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   616  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   617  	DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   618  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   619  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   620  	return (Status | DEM_EVMEM_STSMASK_DELETED) & (~DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   621  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   622      return Dem_EvMemSetToEmpty();
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   623  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   624  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   625  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   626  DEM_INLINE Dem_boolean_least Dem_EvMemGetShadowVisibility(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   627  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   628  	return DEM_CFG_EVMEM_SHADOW_ENTRIES_VISIBLE;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   629  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   630  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   631  DEM_INLINE Dem_boolean_least Dem_EvMemIsVisible(uint16_least Status, Dem_boolean_least ShadowEntriesVisible)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   632  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   633  	return (Dem_boolean_least)( ( Dem_EvMemIsStored(Status)) ||
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   634  			                    (!Dem_EvMemIsEmpty (Status) && Dem_EvMemGetShadowVisibility() && ShadowEntriesVisible));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   635  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   636  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   637  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   638     Event Memory Iterators
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   639     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   640  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   641  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   642  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   643  DEM_INLINE uint16_least Dem_EvMemGetEventMemStartLocId(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   644  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   645  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   646  	DEM_EVMEM_USEVAR(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   647  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   648  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   649  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   650  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   651  	return Dem_EvMemLocIdList[MemId];
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   652  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   653  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   654  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   655  DEM_INLINE uint16_least Dem_EvMemGetEventMemEndLocId(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   656  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   657  	DEM_EVMEM_USEVAR(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   658  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   659  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   660  	return DEM_CFG_MAX_NUMBER_EVENT_ENTRY_PRIMARY;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   661  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   662  	return Dem_EvMemLocIdList[MemId+1u];
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   663  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   664  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   665  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   666  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   667  DEM_INLINE void Dem_EvMemEventMemoryLocIteratorNew (uint16_least *LocId, uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   668  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   669      *LocId = Dem_EvMemGetEventMemStartLocId(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   670  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   671  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   672  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   673  DEM_INLINE Dem_boolean_least Dem_EvMemEventMemoryLocIteratorIsValid (const uint16_least *LocId, uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   674  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   675      return (Dem_boolean_least)(*LocId < Dem_EvMemGetEventMemEndLocId(MemId));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   676  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   677  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   678  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   679  DEM_INLINE void Dem_EvMemEventMemoryLocIteratorNext (uint16_least *LocId, uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   680  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   681      DEM_EVMEM_USEVAR(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   682      (*LocId)++;
	ld.w	d15,[a13]
.L1087:
	add	d15,#1
	st.w	[a13],d15
.L172:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   660  	return DEM_CFG_MAX_NUMBER_EVENT_ENTRY_PRIMARY;      (inlined)
	j	.L196

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   664  }      (inlined)
.L196:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   541  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   542  DEM_INLINE void Dem_EvMemSetEventMemTrigger(uint16_least LocId, Dem_TriggerType Trigger)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   543  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   544     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   545     DEM_EVMEM_USEVAR(Trigger);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   546  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   547  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   548     Dem_EvMemEventMemory[LocId].Trigger = Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   549  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   550  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   551  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   552  /* --- Data --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   553  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is used to get address of element data and to fill the data block */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   554  DEM_INLINE uint8 *Dem_EvMemGetEventMemDataByPtr(Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   555  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   557  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   558  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   559  DEM_INLINE uint8 *Dem_EvMemGetEventMemData(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   560  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   561     return Dem_EvMemGetEventMemDataByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   562  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   563  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   564  DEM_INLINE uint16 Dem_EvMemGetEventMemDataSize(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   565  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   566     return DEM_SIZEOF_VAR(Dem_EvMemEventMemory[0].Data);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   567  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   568  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   569  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   570     Event Memory Status
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   571     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   572  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   573  /* the bits DEM_EVMEM_STSMASK_STORED and DEM_EVMEM_STSMASK_DELETED shall not be set at the same time */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   574  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   575  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedSLC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   576  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   577     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED)) == (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   578  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   579  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   580  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestCompleteTFC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   581  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   582      return ((Status & DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC) == DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   583  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   584  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   585  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedTFC (uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   586  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   587      return ((Status & DEM_EVMEM_STSMASK_TESTFAILED_TFC) == DEM_EVMEM_STSMASK_TESTFAILED_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   588  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   589  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   590  DEM_INLINE Dem_boolean_least Dem_EvMemIsStored(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   591  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   592     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   593  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   594  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   595  DEM_INLINE Dem_boolean_least Dem_EvMemIsEmpty(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   596  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   597     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   598  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   599  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   600  DEM_INLINE Dem_boolean_least Dem_EvMemIsDeleted(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   601  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   602     DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   603  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   604  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   605     return (Dem_boolean_least)((Status & DEM_EVMEM_STSMASK_DELETED) != 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   606  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   607     return FALSE;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   608  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   609  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   610  DEM_INLINE uint16_least Dem_EvMemSetToEmpty(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   611  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   612  	return 0u;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   613  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   614  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   615  DEM_INLINE uint16_least Dem_EvMemSetToDelete(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   616  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   617  	DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   618  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   619  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   620  	return (Status | DEM_EVMEM_STSMASK_DELETED) & (~DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   621  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   622      return Dem_EvMemSetToEmpty();
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   623  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   624  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   625  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   626  DEM_INLINE Dem_boolean_least Dem_EvMemGetShadowVisibility(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   627  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   628  	return DEM_CFG_EVMEM_SHADOW_ENTRIES_VISIBLE;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   629  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   630  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   631  DEM_INLINE Dem_boolean_least Dem_EvMemIsVisible(uint16_least Status, Dem_boolean_least ShadowEntriesVisible)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   632  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   633  	return (Dem_boolean_least)( ( Dem_EvMemIsStored(Status)) ||
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   634  			                    (!Dem_EvMemIsEmpty (Status) && Dem_EvMemGetShadowVisibility() && ShadowEntriesVisible));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   635  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   636  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   637  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   638     Event Memory Iterators
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   639     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   640  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   641  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   642  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   643  DEM_INLINE uint16_least Dem_EvMemGetEventMemStartLocId(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   644  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   645  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   646  	DEM_EVMEM_USEVAR(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   647  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   648  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   649  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   650  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   651  	return Dem_EvMemLocIdList[MemId];
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   652  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   653  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   654  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   655  DEM_INLINE uint16_least Dem_EvMemGetEventMemEndLocId(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   656  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   657  	DEM_EVMEM_USEVAR(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   658  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   659  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   660  	return DEM_CFG_MAX_NUMBER_EVENT_ENTRY_PRIMARY;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   661  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   662  	return Dem_EvMemLocIdList[MemId+1u];
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   663  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   664  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   665  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   666  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   667  DEM_INLINE void Dem_EvMemEventMemoryLocIteratorNew (uint16_least *LocId, uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   668  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   669      *LocId = Dem_EvMemGetEventMemStartLocId(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   670  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   671  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   672  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   673  DEM_INLINE Dem_boolean_least Dem_EvMemEventMemoryLocIteratorIsValid (const uint16_least *LocId, uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   674  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   675      return (Dem_boolean_least)(*LocId < Dem_EvMemGetEventMemEndLocId(MemId));
	ld.w	d15,[a13]
.L1088:
	lt.u	d15,d15,#5
.L1089:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   675      return (Dem_boolean_least)(*LocId < Dem_EvMemGetEventMemEndLocId(MemId));      (inlined)
	j	.L197

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   676  }      (inlined)
.L197:
	jne	d15,#0,.L173
.L511:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   541  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   542  DEM_INLINE void Dem_EvMemSetEventMemTrigger(uint16_least LocId, Dem_TriggerType Trigger)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   543  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   544     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   545     DEM_EVMEM_USEVAR(Trigger);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   546  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   547  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   548     Dem_EvMemEventMemory[LocId].Trigger = Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   549  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   550  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   551  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   552  /* --- Data --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   553  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is used to get address of element data and to fill the data block */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   554  DEM_INLINE uint8 *Dem_EvMemGetEventMemDataByPtr(Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   555  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   557  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   558  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   559  DEM_INLINE uint8 *Dem_EvMemGetEventMemData(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   560  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   561     return Dem_EvMemGetEventMemDataByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   562  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   563  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   564  DEM_INLINE uint16 Dem_EvMemGetEventMemDataSize(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   565  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   566     return DEM_SIZEOF_VAR(Dem_EvMemEventMemory[0].Data);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   567  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   568  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   569  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   570     Event Memory Status
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   571     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   572  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   573  /* the bits DEM_EVMEM_STSMASK_STORED and DEM_EVMEM_STSMASK_DELETED shall not be set at the same time */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   574  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   575  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedSLC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   576  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   577     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED)) == (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   578  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   579  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   580  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestCompleteTFC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   581  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   582      return ((Status & DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC) == DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   583  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   584  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   585  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedTFC (uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   586  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   587      return ((Status & DEM_EVMEM_STSMASK_TESTFAILED_TFC) == DEM_EVMEM_STSMASK_TESTFAILED_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   588  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   589  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   590  DEM_INLINE Dem_boolean_least Dem_EvMemIsStored(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   591  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   592     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   593  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   594  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   595  DEM_INLINE Dem_boolean_least Dem_EvMemIsEmpty(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   596  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   597     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   598  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   599  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   600  DEM_INLINE Dem_boolean_least Dem_EvMemIsDeleted(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   601  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   602     DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   603  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   604  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   605     return (Dem_boolean_least)((Status & DEM_EVMEM_STSMASK_DELETED) != 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   606  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   607     return FALSE;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   608  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   609  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   610  DEM_INLINE uint16_least Dem_EvMemSetToEmpty(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   611  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   612  	return 0u;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   613  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   614  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   615  DEM_INLINE uint16_least Dem_EvMemSetToDelete(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   616  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   617  	DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   618  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   619  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   620  	return (Status | DEM_EVMEM_STSMASK_DELETED) & (~DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   621  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   622      return Dem_EvMemSetToEmpty();
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   623  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   624  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   625  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   626  DEM_INLINE Dem_boolean_least Dem_EvMemGetShadowVisibility(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   627  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   628  	return DEM_CFG_EVMEM_SHADOW_ENTRIES_VISIBLE;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   629  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   630  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   631  DEM_INLINE Dem_boolean_least Dem_EvMemIsVisible(uint16_least Status, Dem_boolean_least ShadowEntriesVisible)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   632  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   633  	return (Dem_boolean_least)( ( Dem_EvMemIsStored(Status)) ||
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   634  			                    (!Dem_EvMemIsEmpty (Status) && Dem_EvMemGetShadowVisibility() && ShadowEntriesVisible));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   635  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   636  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   637  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   638     Event Memory Iterators
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   639     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   640  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   641  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   642  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   643  DEM_INLINE uint16_least Dem_EvMemGetEventMemStartLocId(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   644  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   645  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   646  	DEM_EVMEM_USEVAR(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   647  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   648  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   649  	return 0;
	mov	d15,#0

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   649  	return 0;      (inlined)
	j	.L198

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   653  }      (inlined)
.L198:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   650  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   651  	return Dem_EvMemLocIdList[MemId];
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   652  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   653  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   654  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   655  DEM_INLINE uint16_least Dem_EvMemGetEventMemEndLocId(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   656  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   657  	DEM_EVMEM_USEVAR(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   658  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   659  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   660  	return DEM_CFG_MAX_NUMBER_EVENT_ENTRY_PRIMARY;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   661  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   662  	return Dem_EvMemLocIdList[MemId+1u];
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   663  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   664  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   665  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   666  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   667  DEM_INLINE void Dem_EvMemEventMemoryLocIteratorNew (uint16_least *LocId, uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   668  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   669      *LocId = Dem_EvMemGetEventMemStartLocId(MemId);
	st.w	[a13],d15
.L512:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   605  			}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   606  		}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   607  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   608  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   609  	/* initialize iterators for service Dem_GetNextFilteredRecord */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   610  	Dem_EvMemEventMemoryLocIteratorNew (&Dem_EvMemFilteredRecordLocId, DEM_CFG_EVMEM_MEMID_PRIMARY);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   611  	Dem_EvMemFilteredRecordFreezeFrameId = 0;
	movh.a	a15,#@his(Dem_EvMemFilteredRecordFreezeFrameId)
	lea	a15,[a15]@los(Dem_EvMemFilteredRecordFreezeFrameId)
.L1090:
	mov	d15,#0
.L1091:
	st.w	[a15],d15
.L1092:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   612  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   613  	return DEM_FILTER_ACCEPTED;
	mov	d2,#0
.L1093:
	j	.L199

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   614  }
.L199:
.L170:
	ret
.L414:
	
__Dem_SetFreezeFrameRecordFilter_function_end:
	.size	Dem_SetFreezeFrameRecordFilter,__Dem_SetFreezeFrameRecordFilter_function_end-Dem_SetFreezeFrameRecordFilter
.L337:
	; End of function
	
	.sdecl	'.text.Dem_EvMemApi.Dem_GetNextFilteredRecord',code,cluster('Dem_GetNextFilteredRecord')
	.sect	'.text.Dem_EvMemApi.Dem_GetNextFilteredRecord'
	.align	2
	
	.global	Dem_GetNextFilteredRecord

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   615  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   616  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   617   Dem_GetNextFilteredRecord
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   618  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   619   Description:        Gets the current DTC and its associated snapshot record numbers from the Dem.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   620                       The interface has an asynchronous behavior, because NvRAM access might be required.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   621   Attributes:         Asynchronous/Non Reentrant
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   622  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   623   DTC:                Receives the DTC value returned by the function.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   624                       If the return value of the function is other than DEM_FILTERED_OK this parameter does not contain valid data.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   625   RecordNumber:       Freeze frame record number of the reported DTC (relative addressing).
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   626                       If the return value of the function is other than DEM_FILTERED_OK this parameter does not contain valid data.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   627   Return:             Gets the next freeze frame record number and its associated DTC stored in the event memory.
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   628  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   629   ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   630   */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   631  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   632  Dem_ReturnGetNextFilteredDTCType Dem_GetNextFilteredRecord(uint32* DTC, uint8* RecordNumber)
; Function Dem_GetNextFilteredRecord
.L322:
Dem_GetNextFilteredRecord:	.type	func
	sub.a	a10,#8
.L1042:
	st.a	[a10],a4
.L1043:
	mov.aa	a12,a5
.L1044:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   633  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   634      uint16_least LocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   635  	uint16_least Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   636  	Dem_EventIdType EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   637  	uint16_least FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   638  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   639  	while (Dem_EvMemEventMemoryLocIteratorIsValid (&Dem_EvMemFilteredRecordLocId, DEM_CFG_EVMEM_MEMID_PRIMARY))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   640  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   641  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   642  		Status = Dem_EvMemGetEventMemStatus (Dem_EvMemFilteredRecordLocId);
	movh.a	a13,#@his(Dem_EvMemFilteredRecordLocId)
	lea	a13,[a13]@los(Dem_EvMemFilteredRecordLocId)
.L1098:
	j	.L200
.L201:
	ld.w	d1,[a13]
.L523:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
	movh.a	a14,#@his(Dem_EvMemEventMemory)
	lea	a14,[a14]@los(Dem_EvMemEventMemory)
.L1099:
	mul	d15,d1,#20
	addsc.a	a15,a14,d15,#0
.L525:
	ld.hu	d0,[a15]0
.L1045:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;      (inlined)
	j	.L202

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }      (inlined)
.L202:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);      (inlined)
	j	.L203

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }      (inlined)
.L203:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
	mul	d15,d1,#20
	addsc.a	a15,a14,d15,#0
.L528:
	ld.hu	d8,[a15]2
.L1047:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;      (inlined)
	j	.L204

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }      (inlined)
.L204:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);      (inlined)
	j	.L205

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }      (inlined)
.L205:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
	mul	d15,d1,#20
	addsc.a	a15,a14,d15,#0
.L534:
	ld.bu	d9,[a15]12
.L1100:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;      (inlined)
	j	.L206

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }      (inlined)
.L206:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);      (inlined)
	j	.L207

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }      (inlined)
.L207:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   628  	return DEM_CFG_EVMEM_SHADOW_ENTRIES_VISIBLE;      (inlined)
	j	.L208

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   629  }      (inlined)
.L208:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   643  		EventId = Dem_EvMemGetEventMemEventId (Dem_EvMemFilteredRecordLocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   644  		FreezeFrameCounter = Dem_EvMemGetEventMemFreezeFrameCounter (Dem_EvMemFilteredRecordLocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   645  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   646  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   647  		if ( Dem_EvMemIsVisible(Status, Dem_EvMemGetShadowVisibility()))
	mov	d1,#0
.L536:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   541  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   542  DEM_INLINE void Dem_EvMemSetEventMemTrigger(uint16_least LocId, Dem_TriggerType Trigger)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   543  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   544     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   545     DEM_EVMEM_USEVAR(Trigger);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   546  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   547  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   548     Dem_EvMemEventMemory[LocId].Trigger = Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   549  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   550  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   551  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   552  /* --- Data --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   553  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is used to get address of element data and to fill the data block */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   554  DEM_INLINE uint8 *Dem_EvMemGetEventMemDataByPtr(Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   555  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   557  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   558  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   559  DEM_INLINE uint8 *Dem_EvMemGetEventMemData(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   560  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   561     return Dem_EvMemGetEventMemDataByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   562  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   563  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   564  DEM_INLINE uint16 Dem_EvMemGetEventMemDataSize(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   565  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   566     return DEM_SIZEOF_VAR(Dem_EvMemEventMemory[0].Data);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   567  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   568  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   569  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   570     Event Memory Status
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   571     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   572  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   573  /* the bits DEM_EVMEM_STSMASK_STORED and DEM_EVMEM_STSMASK_DELETED shall not be set at the same time */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   574  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   575  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedSLC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   576  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   577     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED)) == (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   578  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   579  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   580  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestCompleteTFC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   581  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   582      return ((Status & DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC) == DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   583  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   584  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   585  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedTFC (uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   586  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   587      return ((Status & DEM_EVMEM_STSMASK_TESTFAILED_TFC) == DEM_EVMEM_STSMASK_TESTFAILED_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   588  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   589  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   590  DEM_INLINE Dem_boolean_least Dem_EvMemIsStored(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   591  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   592     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   593  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   594  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   595  DEM_INLINE Dem_boolean_least Dem_EvMemIsEmpty(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   596  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   597     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   598  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   599  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   600  DEM_INLINE Dem_boolean_least Dem_EvMemIsDeleted(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   601  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   602     DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   603  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   604  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   605     return (Dem_boolean_least)((Status & DEM_EVMEM_STSMASK_DELETED) != 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   606  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   607     return FALSE;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   608  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   609  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   610  DEM_INLINE uint16_least Dem_EvMemSetToEmpty(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   611  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   612  	return 0u;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   613  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   614  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   615  DEM_INLINE uint16_least Dem_EvMemSetToDelete(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   616  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   617  	DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   618  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   619  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   620  	return (Status | DEM_EVMEM_STSMASK_DELETED) & (~DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   621  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   622      return Dem_EvMemSetToEmpty();
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   623  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   624  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   625  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   626  DEM_INLINE Dem_boolean_least Dem_EvMemGetShadowVisibility(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   627  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   628  	return DEM_CFG_EVMEM_SHADOW_ENTRIES_VISIBLE;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   629  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   630  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   631  DEM_INLINE Dem_boolean_least Dem_EvMemIsVisible(uint16_least Status, Dem_boolean_least ShadowEntriesVisible)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   632  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   633  	return (Dem_boolean_least)( ( Dem_EvMemIsStored(Status)) ||
	mov	d3,#0
.L540:
	mov	d2,#4224
.L1101:
	and	d4,d0,d2
.L1102:
	mov	d5,#4096
.L1103:
	eq	d15,d4,d5
.L1104:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   592     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == DEM_EVMEM_STSMASK_STORED);      (inlined)
	j	.L209

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   593  }      (inlined)
.L209:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   633  	return (Dem_boolean_least)( ( Dem_EvMemIsStored(Status)) ||      (inlined)
	jne	d15,#0,.L210
.L542:
	and	d0,d2
.L1046:
	eq	d15,d0,#0
.L1105:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   597     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == 0u);      (inlined)
	j	.L211

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   598  }      (inlined)
.L211:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   634  			                    (!Dem_EvMemIsEmpty (Status) && Dem_EvMemGetShadowVisibility() && ShadowEntriesVisible));      (inlined)
	jne	d15,#0,.L212
.L544:
	mov	d15,#0

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   628  	return DEM_CFG_EVMEM_SHADOW_ENTRIES_VISIBLE;      (inlined)
	j	.L213

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   629  }      (inlined)
.L213:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   634  			                    (!Dem_EvMemIsEmpty (Status) && Dem_EvMemGetShadowVisibility() && ShadowEntriesVisible));      (inlined)
	jeq	d15,#0,.L214
.L1106:
	jeq	d1,#0,.L215

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   633  	return (Dem_boolean_least)( ( Dem_EvMemIsStored(Status)) ||      (inlined)
.L210:
	mov	d3,#1

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   633  	return (Dem_boolean_least)( ( Dem_EvMemIsStored(Status)) ||      (inlined)
.L215:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   634  			                    (!Dem_EvMemIsEmpty (Status) && Dem_EvMemGetShadowVisibility() && ShadowEntriesVisible));      (inlined)
.L214:
.L212:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   633  	return (Dem_boolean_least)( ( Dem_EvMemIsStored(Status)) ||      (inlined)
	j	.L216

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   635  }      (inlined)
.L216:
	jeq	d3,#0,.L217
.L537:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     3  #ifndef DEM_LIB_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     4  #define DEM_LIB_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     6  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     7  #include "Dem_Prv_Det.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     8  #include "rba_DiagLib_MemUtils.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     9  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    11  /* Macro for static assertion Check */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    12  /* either array length is (2*1)-1->valid or (2*0)-1->invalid*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    13  #define DEM_STATIC_ASSERT(COND,MSG) typedef uint8 Dem_static_assertion_##MSG[(2*(((COND)!=(FALSE))?1:0))-1]
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    15  /* mapping of memset and memcpy */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    16  #define DEM_MEMCPY  RBA_DIAGLIB_MEMCPY
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    17  #define DEM_MEMSET  RBA_DIAGLIB_MEMSET
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    19  /* Defines */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    20  #define DEM_MAXSINT16   0x7FFF
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    22  #if (DEM_CFG_BUILDTARGET != DEM_CFG_BUILDTARGET_DEMTESTSUITE)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    23      #define DEM_ASSERT_RANGECHECK(CONDITION) do {} while (0)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    24  #else
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    25      #include "DemTest_Stub4RangeCheck.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    27      #define DEM_ASSERT_RANGECHECK(CONDITION) DEM_assertValueInRange(CONDITION)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    28  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    30  // these functions are necessary to avoid compiler warnings of the kind "statement is always FALSE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    31  DEM_INLINE uint16 Dem_LibGetParamUI16( uint16 parameter )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    33      return parameter;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    36  DEM_INLINE uint8 Dem_LibGetParamUI8( uint8 parameter )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    38      return parameter;
	mov	d15,#1

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    38      return parameter;      (inlined)
	j	.L218

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    39  }      (inlined)
.L218:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   648          {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   649              if (Dem_LibGetParamUI8(DEM_CFG_EVCOMB) == Dem_LibGetParamUI8(DEM_CFG_EVCOMB_ONRETRIEVAL))
	mov	d0,#3
.L546:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    38      return parameter;      (inlined)
	j	.L219

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    39  }      (inlined)
.L219:
	jne	d15,d0,.L220
.L1107:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   650              {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   651                  if (Dem_EvMemFilteredRecordFreezeFrameId == 0u)
	movh.a	a15,#@his(Dem_EvMemFilteredRecordFreezeFrameId)
	lea	a15,[a15]@los(Dem_EvMemFilteredRecordFreezeFrameId)
	ld.w	d15,[a15]
.L1108:
	jne	d15,#0,.L221
.L547:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
	movh.a	a2,#@his(Dem_MapEventIdToDtcId)
	lea	a2,[a2]@los(Dem_MapEventIdToDtcId)
.L1109:
	addsc.a	a2,a2,d8,#1
	ld.hu	d4,[a2]0
.L1110:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];      (inlined)
	j	.L222

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }      (inlined)
.L222:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   541  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   542  DEM_INLINE void Dem_EvMemSetEventMemTrigger(uint16_least LocId, Dem_TriggerType Trigger)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   543  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   544     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   545     DEM_EVMEM_USEVAR(Trigger);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   546  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   547  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   548     Dem_EvMemEventMemory[LocId].Trigger = Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   549  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   550  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   551  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   552  /* --- Data --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   553  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is used to get address of element data and to fill the data block */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   554  DEM_INLINE uint8 *Dem_EvMemGetEventMemDataByPtr(Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   555  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   557  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   558  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   559  DEM_INLINE uint8 *Dem_EvMemGetEventMemData(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   560  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   561     return Dem_EvMemGetEventMemDataByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   562  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   563  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   564  DEM_INLINE uint16 Dem_EvMemGetEventMemDataSize(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   565  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   566     return DEM_SIZEOF_VAR(Dem_EvMemEventMemory[0].Data);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   567  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   568  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   569  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   570     Event Memory Status
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   571     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   572  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   573  /* the bits DEM_EVMEM_STSMASK_STORED and DEM_EVMEM_STSMASK_DELETED shall not be set at the same time */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   574  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   575  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedSLC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   576  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   577     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED)) == (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   578  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   579  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   580  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestCompleteTFC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   581  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   582      return ((Status & DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC) == DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   583  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   584  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   585  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedTFC (uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   586  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   587      return ((Status & DEM_EVMEM_STSMASK_TESTFAILED_TFC) == DEM_EVMEM_STSMASK_TESTFAILED_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   588  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   589  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   590  DEM_INLINE Dem_boolean_least Dem_EvMemIsStored(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   591  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   592     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   593  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   594  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   595  DEM_INLINE Dem_boolean_least Dem_EvMemIsEmpty(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   596  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   597     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   598  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   599  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   600  DEM_INLINE Dem_boolean_least Dem_EvMemIsDeleted(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   601  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   602     DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   603  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   604  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   605     return (Dem_boolean_least)((Status & DEM_EVMEM_STSMASK_DELETED) != 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   606  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   607     return FALSE;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   608  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   609  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   610  DEM_INLINE uint16_least Dem_EvMemSetToEmpty(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   611  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   612  	return 0u;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   613  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   614  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   615  DEM_INLINE uint16_least Dem_EvMemSetToDelete(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   616  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   617  	DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   618  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   619  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   620  	return (Status | DEM_EVMEM_STSMASK_DELETED) & (~DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   621  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   622      return Dem_EvMemSetToEmpty();
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   623  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   624  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   625  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   626  DEM_INLINE Dem_boolean_least Dem_EvMemGetShadowVisibility(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   627  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   628  	return DEM_CFG_EVMEM_SHADOW_ENTRIES_VISIBLE;
	mov	d6,#0

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   628  	return DEM_CFG_EVMEM_SHADOW_ENTRIES_VISIBLE;      (inlined)
	j	.L223

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   629  }      (inlined)
.L223:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   652                  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   653                      LocId = Dem_EvMemGetEventMemoryLocIdOfDtcWithVisibility(Dem_DtcIdFromEventId(EventId),
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   654                      DEM_CFG_EVMEM_MEMID_PRIMARY, Dem_EvMemGetShadowVisibility());
	mov	d5,#0
.L1111:
	call	Dem_EvMemGetEventMemoryLocIdOfDtcWithVisibility
.L1048:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   655                      if (LocId != Dem_EvMemFilteredRecordLocId)
	ld.w	d15,[a13]
.L1112:
	jeq	d15,d2,.L224
.L1113:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   656                      { /* set invalid freeze frame id */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   657  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   658                      	Dem_EvMemFilteredRecordFreezeFrameId = 0xFFu;
	mov	d15,#255
.L1114:
	st.w	[a15],d15
.L224:
.L221:
.L220:
	movh.a	a2,#@his(Dem_EvMemFilteredRecordFreezeFrameId)
	lea	a2,[a2]@los(Dem_EvMemFilteredRecordFreezeFrameId)
.L549:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     3  #ifndef DEM_LIB_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     4  #define DEM_LIB_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     6  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     7  #include "Dem_Prv_Det.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     8  #include "rba_DiagLib_MemUtils.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     9  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    11  /* Macro for static assertion Check */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    12  /* either array length is (2*1)-1->valid or (2*0)-1->invalid*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    13  #define DEM_STATIC_ASSERT(COND,MSG) typedef uint8 Dem_static_assertion_##MSG[(2*(((COND)!=(FALSE))?1:0))-1]
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    15  /* mapping of memset and memcpy */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    16  #define DEM_MEMCPY  RBA_DIAGLIB_MEMCPY
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    17  #define DEM_MEMSET  RBA_DIAGLIB_MEMSET
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    19  /* Defines */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    20  #define DEM_MAXSINT16   0x7FFF
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    22  #if (DEM_CFG_BUILDTARGET != DEM_CFG_BUILDTARGET_DEMTESTSUITE)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    23      #define DEM_ASSERT_RANGECHECK(CONDITION) do {} while (0)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    24  #else
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    25      #include "DemTest_Stub4RangeCheck.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    27      #define DEM_ASSERT_RANGECHECK(CONDITION) DEM_assertValueInRange(CONDITION)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    28  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    30  // these functions are necessary to avoid compiler warnings of the kind "statement is always FALSE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    31  DEM_INLINE uint16 Dem_LibGetParamUI16( uint16 parameter )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    33      return parameter;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    36  DEM_INLINE uint8 Dem_LibGetParamUI8( uint8 parameter )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    38      return parameter;
	mov	d15,#1

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    38      return parameter;      (inlined)
	j	.L225

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    39  }      (inlined)
.L225:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   659                      }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   660                  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   661              }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   662              if (Dem_LibGetParamUI8(DEM_CFG_FFRECNUM) == Dem_LibGetParamUI8(DEM_CFG_FFRECNUM_CALCULATED))
	mov	d1,#1
.L550:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    38      return parameter;      (inlined)
	j	.L226

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    39  }      (inlined)
.L226:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   663              {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   664  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   665                  if (Dem_EvMemFilteredRecordFreezeFrameId < FreezeFrameCounter)
	ld.w	d0,[a2]
.L1115:
	jne	d15,d1,.L227
.L532:
	jge.u	d0,d9,.L228
.L533:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   666                  { /* calculated freeze frame numbers (first freeze frame is 1) */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   667                      *RecordNumber = Dem_EnvGetFFRecNumFromIndex(EventId, (uint8) Dem_EvMemFilteredRecordFreezeFrameId);
	extr.u	d15,d0,#0,#8
.L552:

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     3  #ifndef DEM_ENVFFRECNUMERATION_H
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     4  #define DEM_ENVFFRECNUMERATION_H
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     8  #include "Dem_Cfg_EnvFFRecNumeration.h"
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     9  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    10  #include "Dem_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    11  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    13  #if (DEM_CFG_FFRECNUM == DEM_CFG_FFRECNUM_CALCULATED)
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    16  DEM_INLINE Dem_boolean_least Dem_EnvIsFFRecNumValid(Dem_EventIdType EventId, uint8 RecNumber)
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    17  {
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    18  	return ((RecNumber > 0) && (RecNumber <= Dem_EvtParam_GetMaxNumberFreezeFrameRecords(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    19  }
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    20  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    21  DEM_INLINE uint8 Dem_EnvGetIndexFromFFRecNum(Dem_EventIdType EventId, uint8 RecNumber)
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    22  {
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    23  	DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    24  	return (RecNumber - 1);
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    25  }
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    27  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    28  DEM_INLINE uint8 Dem_EnvGetFFRecNumFromIndex(Dem_EventIdType EventId, uint8 idx)
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    29  {
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    30  	DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    31  	return (idx + 1);
	add	d15,#1
	extr.u	d15,d15,#0,#8
.L1116:

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    31  	return (idx + 1);      (inlined)
	j	.L229

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    32  }      (inlined)
.L229:
	st.b	[a12],d15
.L558:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
	movh.a	a15,#@his(Dem_MapEventIdToDtcId)
	lea	a15,[a15]@los(Dem_MapEventIdToDtcId)
.L1117:
	addsc.a	a15,a15,d8,#1
	ld.hu	d15,[a15]0
.L1118:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];      (inlined)
	j	.L230

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }      (inlined)
.L230:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	   101  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));      (inlined)
.L231:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     2  /********************************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     3  /*                                                                                                                  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     4  /* TOOL-GENERATED SOURCECODE, DO NOT CHANGE                                                                         */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     5  /*                                                                                                                  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     6  /********************************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     7  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     8  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     9  #ifndef DEM_CFG_DTC_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    10  #define DEM_CFG_DTC_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    12  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    13  #include "Dem_Cfg_DTCs.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    14  #include "Dem_Prv_Det.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    15  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    17  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    18  /*
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    19  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    20  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    21  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    22  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    23  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    24  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    26  #include "Dem_Lib.h"  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    27  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    28  /*
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    29  #define DEM_CFG_STOREWAITINGFORMONITORINGEVENT  FALSE
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    30  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING_OFF  STD_OFF
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    31  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING_ON   STD_ON
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    32  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING      DEM_CFG_DTCFILTER_EXTERNALPROCESSING_OFF
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    33  #define DEM_CFG_DTCSTATUS_AVAILABILITYMASK     0xFFu
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    34  #define DEM_CFG_DTC_TRANSLATION_TYPE           DEM_DTC_TRANSLATION_SAEJ1939_73
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    35  #define DEM_CFG_DTCSTATEMANGER_DTCS_PER_CYCLE   5u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    36  #define DEM_DTC_BP_STATE_SUPPRESSED             0u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    37  #define DEM_DTC_BP_GROUP_DTCSETTING_DISABLED    1u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    38  #define DEM_DTC_GROUP_DemGroupOfDTC_0_DTCS           0xFA0u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    39  #define DEM_DTC_GROUP_DemGroupOfDTC_1_DTCS           0x1388u  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    40  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    41  /* --------------------------------------------------- */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    42  /* DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED    */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    43  /* --------------------------------------------------- */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    44  // #define DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED   FALSE
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    45  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    47  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    48  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    49  	Dem_DtcCodeType DtcCode;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    50  	Dem_DTCSeverityType Severity;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    51  	Dem_DTCKindType Kind;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    52  	boolean DtcCode_Is_Index;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    53  	uint8 Func_Unit;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    54  	boolean Nv_Storage;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    55  } Dem_Cfg_DtcType;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    56  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    57  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    58  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    59  extern const Dem_Cfg_DtcType Dem_Cfg_Dtc[5];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    62  LOCAL_INLINE Dem_DTCKindType Dem_Cfg_Dtc_GetKind(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    65  	return Dem_Cfg_Dtc[indx].Kind;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    68  LOCAL_INLINE Dem_DTCSeverityType Dem_Cfg_Dtc_GetSeverity(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    69  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    70  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    71  	return Dem_Cfg_Dtc[indx].Severity;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    72  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    73  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    74  LOCAL_INLINE boolean Dem_Cfg_Dtc_GetNv_Storage(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    75  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    76  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    77  	return Dem_Cfg_Dtc[indx].Nv_Storage;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    78  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    79  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    80  LOCAL_INLINE uint8 Dem_Cfg_Dtc_GetFunc_Unit(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    81  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    82  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    83  	return Dem_Cfg_Dtc[indx].Func_Unit;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    84  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    85  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    86  LOCAL_INLINE boolean Dem_Cfg_Dtc_GetDtcCode_Is_Index(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    87  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    88  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    89  	return Dem_Cfg_Dtc[indx].DtcCode_Is_Index;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    90  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    91  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    92  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    93  LOCAL_INLINE Dem_DtcCodeType Dem_Cfg_Dtc_GetObd_DtcCode(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    94  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    95  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    96  	return DEM_INVALID_DTC; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    97  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    98  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    99  LOCAL_INLINE Dem_DtcCodeType Dem_Cfg_Dtc_GetDtcCode(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	   100  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	   101  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	   102  	return Dem_Cfg_Dtc[indx].DtcCode;
	mul	d15,d15,#12
.L1119:
	movh.a	a15,#@his(Dem_Cfg_Dtc)
	lea	a15,[a15]@los(Dem_Cfg_Dtc)
.L1120:
	addsc.a	a15,a15,d15,#0
.L1121:
	ld.w	d15,[a15]
.L1122:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	   102  	return Dem_Cfg_Dtc[indx].DtcCode;      (inlined)
	j	.L232

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	   103  }      (inlined)
.L232:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   240          return Dem_Cfg_Dtc_GetDtcCode(dtcId);      (inlined)
	j	.L233

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   242  }      (inlined)
.L233:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   668                      /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   669  #if (DEM_CFG_OBD != DEM_CFG_OBD_OFF)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   670                      if (Dem_EvMemFilteredRecordDTCFormat == DEM_DTC_FORMAT_UDS)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   671                      {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   672                          *DTC = Dem_GetDtcCode(Dem_DtcIdFromEventId (EventId));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   673                      }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   674                      else /* DEM_DTC_FORMAT_OBD */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   675                      {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   676                          *DTC = rba_DemObdBasic_Dtc_GetCode(Dem_DtcIdFromEventId (EventId));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   677                      }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   678  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   679                      /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   680                      *DTC = Dem_GetDtcCode(Dem_DtcIdFromEventId(EventId));
	ld.a	a15,[a10]
.L564:
	st.w	[a15],d15
.L565:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   681                      /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   682  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   683                      /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   684                      Dem_EvMemFilteredRecordFreezeFrameId++;
	add	d0,#1
	st.w	[a2],d0
.L1123:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   685                      return DEM_FILTERED_OK;
	mov	d2,#0
.L1124:
	j	.L234
.L228:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   686                  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   687                  else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   688                  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   689                      Dem_EvMemFilteredRecordFreezeFrameId = 0;
	mov	d15,#0
.L1125:
	st.w	[a2],d15
.L1126:
	j	.L235
.L227:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   690                  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   691              }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   692              else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   693              {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   694                  /* Check if FF ID is valid */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   695                  if (Dem_EvMemFilteredRecordFreezeFrameId != 0xFFu)
	mov	d15,#255
.L1127:
	jeq	d15,d0,.L236
.L1128:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   696                  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   697                      /* loop for all FFRecNums */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   698                      while (Dem_EvMemFilteredRecordFreezeFrameId < Dem_EvtParam_GetMaxNumberFreezeFrameRecords(EventId))
	j	.L237
.L238:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   699                      {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   700  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   701                          *RecordNumber = Dem_EnvGetFFRecNumFromIndex(EventId, (uint8) Dem_EvMemFilteredRecordFreezeFrameId);
	ld.w	d0,[a2]
.L1129:
	extr.u	d15,d0,#0,#8
.L570:

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     3  #ifndef DEM_ENVFFRECNUMERATION_H
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     4  #define DEM_ENVFFRECNUMERATION_H
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     8  #include "Dem_Cfg_EnvFFRecNumeration.h"
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     9  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    10  #include "Dem_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    11  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    13  #if (DEM_CFG_FFRECNUM == DEM_CFG_FFRECNUM_CALCULATED)
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    16  DEM_INLINE Dem_boolean_least Dem_EnvIsFFRecNumValid(Dem_EventIdType EventId, uint8 RecNumber)
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    17  {
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    18  	return ((RecNumber > 0) && (RecNumber <= Dem_EvtParam_GetMaxNumberFreezeFrameRecords(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    19  }
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    20  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    21  DEM_INLINE uint8 Dem_EnvGetIndexFromFFRecNum(Dem_EventIdType EventId, uint8 RecNumber)
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    22  {
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    23  	DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    24  	return (RecNumber - 1);
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    25  }
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    27  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    28  DEM_INLINE uint8 Dem_EnvGetFFRecNumFromIndex(Dem_EventIdType EventId, uint8 idx)
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    29  {
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    30  	DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    31  	return (idx + 1);
	add	d15,#1
	extr.u	d15,d15,#0,#8
.L1130:

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    31  	return (idx + 1);      (inlined)
	j	.L239

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    32  }      (inlined)
.L239:
	st.b	[a12],d15
.L572:

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    37      return 0;      (inlined)
	j	.L240

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    38  }      (inlined)
.L240:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   702                          /* If FF Stored */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   703                          if(Dem_EnvIsTriggerSet(Dem_EnvGetFFRecordTrigger(*RecordNumber) , Dem_EvMemGetEventMemTrigger(Dem_EvMemFilteredRecordLocId)))
	mov	d1,#0
.L1131:
	ld.w	d15,[a13]
.L577:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
	mul	d15,d15,#20
	addsc.a	a15,a14,d15,#0
.L582:
	ld.bu	d15,[a15]15
.L1132:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;      (inlined)
	j	.L241

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }      (inlined)
.L241:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);      (inlined)
	j	.L242

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }      (inlined)
.L242:

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	     3  #ifndef DEM_ENVTRIGGER_H
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	     4  #define DEM_ENVTRIGGER_H
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	     7  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	     8  {
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	     9  	/* In Parameter */
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    10  	Dem_TriggerType currentTrigger;
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    11  	Dem_TriggerType storedTrigger;
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    12  	/* Out Parameter */
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    13  	Dem_TriggerType matchingTrigger;
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    14  } Dem_EnvTriggerParamType;
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    17  DEM_INLINE void Dem_EnvSetTrigger(Dem_TriggerType* trigger, Dem_TriggerType trigger2set)
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    18  {
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    19  	*trigger = (*trigger) | trigger2set;
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    20  }
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    22  DEM_INLINE Dem_boolean_least Dem_EnvIsAnyTriggerSet(Dem_TriggerType trigger2test)
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    23  {
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    24  	return (Dem_boolean_least)(trigger2test != 0);
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    25  }
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    27  DEM_INLINE Dem_boolean_least Dem_EnvIsTriggerSet(Dem_TriggerType trigger, Dem_TriggerType trigger2test)
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    28  {
; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    29  	return Dem_EnvIsAnyTriggerSet(trigger & trigger2test);
	and	d1,d15
.L596:
	ne	d15,d1,#0
.L1133:

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    24  	return (Dem_boolean_least)(trigger2test != 0);      (inlined)
	j	.L243

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    25  }      (inlined)
.L243:

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    29  	return Dem_EnvIsAnyTriggerSet(trigger & trigger2test);      (inlined)
	j	.L244

; .\BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    30  }      (inlined)
.L244:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   704                          {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   705  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   706  #if (DEM_CFG_OBD != DEM_CFG_OBD_OFF)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   707                              if (Dem_EvMemFilteredRecordDTCFormat == DEM_DTC_FORMAT_UDS)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   708                              {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   709                                  *DTC = Dem_GetDtcCode(Dem_DtcIdFromEventId (EventId));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   710                              }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   711                              else /* DEM_DTC_FORMAT_OBD */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   712                              {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   713                                  *DTC = rba_DemObdBasic_Dtc_GetCode(Dem_DtcIdFromEventId (EventId));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   714                              }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   715  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   716                              *DTC = Dem_GetDtcCode(Dem_DtcIdFromEventId(EventId));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   717  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   718                              /* Update FFIdIterator */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   719                              Dem_EvMemFilteredRecordFreezeFrameId++;
	add	d0,#1
.L593:
	jeq	d15,#0,.L245
.L594:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
	movh.a	a15,#@his(Dem_MapEventIdToDtcId)
	lea	a15,[a15]@los(Dem_MapEventIdToDtcId)
.L1134:
	addsc.a	a15,a15,d8,#1
	ld.hu	d15,[a15]0
.L1135:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];      (inlined)
	j	.L246

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }      (inlined)
.L246:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	   101  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));      (inlined)
.L247:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     2  /********************************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     3  /*                                                                                                                  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     4  /* TOOL-GENERATED SOURCECODE, DO NOT CHANGE                                                                         */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     5  /*                                                                                                                  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     6  /********************************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     7  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     8  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     9  #ifndef DEM_CFG_DTC_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    10  #define DEM_CFG_DTC_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    12  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    13  #include "Dem_Cfg_DTCs.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    14  #include "Dem_Prv_Det.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    15  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    17  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    18  /*
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    19  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    20  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    21  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    22  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    23  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    24  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    26  #include "Dem_Lib.h"  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    27  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    28  /*
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    29  #define DEM_CFG_STOREWAITINGFORMONITORINGEVENT  FALSE
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    30  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING_OFF  STD_OFF
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    31  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING_ON   STD_ON
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    32  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING      DEM_CFG_DTCFILTER_EXTERNALPROCESSING_OFF
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    33  #define DEM_CFG_DTCSTATUS_AVAILABILITYMASK     0xFFu
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    34  #define DEM_CFG_DTC_TRANSLATION_TYPE           DEM_DTC_TRANSLATION_SAEJ1939_73
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    35  #define DEM_CFG_DTCSTATEMANGER_DTCS_PER_CYCLE   5u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    36  #define DEM_DTC_BP_STATE_SUPPRESSED             0u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    37  #define DEM_DTC_BP_GROUP_DTCSETTING_DISABLED    1u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    38  #define DEM_DTC_GROUP_DemGroupOfDTC_0_DTCS           0xFA0u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    39  #define DEM_DTC_GROUP_DemGroupOfDTC_1_DTCS           0x1388u  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    40  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    41  /* --------------------------------------------------- */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    42  /* DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED    */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    43  /* --------------------------------------------------- */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    44  // #define DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED   FALSE
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    45  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    47  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    48  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    49  	Dem_DtcCodeType DtcCode;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    50  	Dem_DTCSeverityType Severity;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    51  	Dem_DTCKindType Kind;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    52  	boolean DtcCode_Is_Index;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    53  	uint8 Func_Unit;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    54  	boolean Nv_Storage;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    55  } Dem_Cfg_DtcType;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    56  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    57  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    58  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    59  extern const Dem_Cfg_DtcType Dem_Cfg_Dtc[5];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    62  LOCAL_INLINE Dem_DTCKindType Dem_Cfg_Dtc_GetKind(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    65  	return Dem_Cfg_Dtc[indx].Kind;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    68  LOCAL_INLINE Dem_DTCSeverityType Dem_Cfg_Dtc_GetSeverity(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    69  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    70  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    71  	return Dem_Cfg_Dtc[indx].Severity;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    72  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    73  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    74  LOCAL_INLINE boolean Dem_Cfg_Dtc_GetNv_Storage(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    75  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    76  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    77  	return Dem_Cfg_Dtc[indx].Nv_Storage;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    78  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    79  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    80  LOCAL_INLINE uint8 Dem_Cfg_Dtc_GetFunc_Unit(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    81  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    82  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    83  	return Dem_Cfg_Dtc[indx].Func_Unit;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    84  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    85  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    86  LOCAL_INLINE boolean Dem_Cfg_Dtc_GetDtcCode_Is_Index(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    87  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    88  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    89  	return Dem_Cfg_Dtc[indx].DtcCode_Is_Index;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    90  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    91  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    92  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    93  LOCAL_INLINE Dem_DtcCodeType Dem_Cfg_Dtc_GetObd_DtcCode(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    94  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    95  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    96  	return DEM_INVALID_DTC; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    97  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    98  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    99  LOCAL_INLINE Dem_DtcCodeType Dem_Cfg_Dtc_GetDtcCode(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	   100  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	   101  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	   102  	return Dem_Cfg_Dtc[indx].DtcCode;
	mul	d15,d15,#12
.L1136:
	movh.a	a15,#@his(Dem_Cfg_Dtc)
	lea	a15,[a15]@los(Dem_Cfg_Dtc)
.L1137:
	addsc.a	a15,a15,d15,#0
.L1138:
	ld.w	d15,[a15]
.L1139:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	   102  	return Dem_Cfg_Dtc[indx].DtcCode;      (inlined)
	j	.L248

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	   103  }      (inlined)
.L248:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   240          return Dem_Cfg_Dtc_GetDtcCode(dtcId);      (inlined)
	j	.L249

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   242  }      (inlined)
.L249:
	ld.a	a15,[a10]
.L601:
	st.w	[a15],d15
.L602:
	st.w	[a2],d0
.L1140:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   720                              /* Return FILTERED_OK */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   721                              return DEM_FILTERED_OK;
	mov	d2,#0
.L1141:
	j	.L250
.L245:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   722                          }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   723                          Dem_EvMemFilteredRecordFreezeFrameId++;
	st.w	[a2],d0
.L237:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   196  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L251:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    53  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    54  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    55  LOCAL_INLINE boolean Dem_EvtParam_GetStoreTestFailedToNextOC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    56  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    57  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    58  	return TRUE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    59  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    60  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    61  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    62  LOCAL_INLINE boolean Dem_EvtParam_GetRequestsWarningIndicator(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    65  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    68  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    69  LOCAL_INLINE Dem_EventCategoryType Dem_EvtParam_GetCategory(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    70  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    71  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    72  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    73  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    74  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    75  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInPrimary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    76  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    80  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    81  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    82  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInSecondary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    83  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    84  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    85  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    86  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    87  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    88  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    89  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInMirror(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    90  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    91  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    92  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    93  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    94  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    95  LOCAL_INLINE boolean Dem_EvtParam_GetAgingAllowed(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    96  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    97  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    98  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 1);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    99  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   100  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   101  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   102  LOCAL_INLINE boolean Dem_EvtParam_GetIsGlobalFDCCallbackConfigured(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   103  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   104  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   105  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   106  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   107  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   108  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   109  LOCAL_INLINE boolean Dem_EvtParam_GetTriggersDataChangedCallback(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   110  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   111  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   112  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   113  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   114  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   115  LOCAL_INLINE uint8 Dem_EvtParam_GetSignificance(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   116  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   117  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   118  	return (uint8)(RBA_DIAGLIB_GETSINGLEBIT16(Dem_EvtParam_16[indx].dataDataContainer_2, 2));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   119  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   120  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   121  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   122  LOCAL_INLINE uint8 Dem_EvtParam_GetOperationCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   123  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   124  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   125  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   126  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   127  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   128  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   129  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   130  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   131  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   132  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   133  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   134  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   135  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   136  LOCAL_INLINE uint8 Dem_EvtParam_GetFailureCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   137  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   138  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   139  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   140  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   141  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   142  LOCAL_INLINE boolean Dem_EvtParam_GetInitialSuppressionStatus(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   143  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   144  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   145  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 3);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   146  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   147  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   148  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   149  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceMethodIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   150  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   151  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   152  	return DEM_DEBMETH_IDX_ARCTRBASECLASS;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   153  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   154  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   155  LOCAL_INLINE uint16 Dem_EvtParam_GetDebounceParamSettingIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   156  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   157  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   158  	return (uint16)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 4, 3));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   159  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   160  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   161  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   162  LOCAL_INLINE uint8 Dem_EvtParam_GetBufferTimeSFB(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   163  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   164  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   165  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   166  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   167  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   168  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingThreshold(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   169  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   170  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   171  	return Dem_EvtParam_8[indx].dataDataContainer_1;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   172  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   173  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   174  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   175  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingThresholdForTFSLC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   176  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   177  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   178  	return 0u;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   179  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   180  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   181  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   182  LOCAL_INLINE uint8 Dem_EvtParam_GetFailureConfirmationThreshold(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   183  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   184  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   185  	return 1u;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   186  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   187  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   188  LOCAL_INLINE uint8 Dem_EvtParam_GetEventPriority(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   189  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   190  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   191  	return (uint8)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 7, 3));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   192  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   193  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   194  LOCAL_INLINE uint8 Dem_EvtParam_GetMaxNumberFreezeFrameRecords(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   195  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   196  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   197  	return (uint8)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 10, 2));
	movh.a	a15,#@his(Dem_EvtParam_16)
	lea	a15,[a15]@los(Dem_EvtParam_16)
.L1142:
	addsc.a	a15,a15,d8,#1
.L1143:
	ld.hu	d0,[a15]0
.L608:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     3  #ifndef RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     4  #define RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     9  #define RBA_DIAGLIB_ISBITSET16       rba_DiagLib_Bit16IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT16   rba_DiagLib_Bit16GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    11  #define RBA_DIAGLIB_GETBITS16        rba_DiagLib_Bit16GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT16   rba_DiagLib_Bit16OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS16  rba_DiagLib_Bit16OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    15  LOCAL_INLINE uint16 rba_DiagLib_Bit16Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    17      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    21  LOCAL_INLINE void rba_DiagLib_Bit16SetBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    26  LOCAL_INLINE void rba_DiagLib_Bit16ClearBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    28      *buffer &= ((uint16) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    31  LOCAL_INLINE void rba_DiagLib_Bit16MergeBitmask(uint16 *buffer, uint16 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    36  LOCAL_INLINE void rba_DiagLib_Bit16SetBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    38      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    39      *buffer |= ((uint16) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    42  LOCAL_INLINE void rba_DiagLib_Bit16ClearBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    44      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    45      *buffer &= ((uint16) (~((uint16) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    48  LOCAL_INLINE void rba_DiagLib_Bit16OverwriteBit(uint16 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    52          rba_DiagLib_Bit16SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    56          rba_DiagLib_Bit16ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    60  LOCAL_INLINE uint16 rba_DiagLib_Bit16GetSingleBit(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    62      return (uint16) ((value >> bit_position) & 1u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    64  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    65  LOCAL_INLINE boolean rba_DiagLib_Bit16IsBitSet(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    66  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    67      return (boolean) (rba_DiagLib_Bit16GetSingleBit(value, bit_position) != 0u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    68  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    69  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    70  LOCAL_INLINE uint16 rba_DiagLib_Bit16GetBits(uint16 value, uint8 bit_position, uint8 number_of_bits)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    71  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    72      uint16 bit2shift = 1;
	mov	d15,#1
.L1049:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    73      value = value >> bit_position;
	sha	d0,d0,#-10
.L1144:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    74      value = value % ((uint16) (bit2shift << number_of_bits));
	sha	d15,#2
.L1050:
	div.u	e0,d0,d15
.L1145:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    75      return value;      (inlined)
	j	.L252

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    76  }      (inlined)
.L252:
	extr.u	d15,d1,#0,#8
.L1146:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   197  	return (uint8)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 10, 2));      (inlined)
	j	.L253

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   198  }      (inlined)
.L253:
	ld.w	d0,[a2]
.L1147:
	jlt.u	d0,d15,.L238
.L236:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   724                      }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   725                  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   726  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   727                  Dem_EvMemFilteredRecordFreezeFrameId = 0;
	mov	d15,#0
.L1148:
	st.w	[a2],d15
.L235:
.L217:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   541  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   542  DEM_INLINE void Dem_EvMemSetEventMemTrigger(uint16_least LocId, Dem_TriggerType Trigger)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   543  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   544     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   545     DEM_EVMEM_USEVAR(Trigger);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   546  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   547  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   548     Dem_EvMemEventMemory[LocId].Trigger = Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   549  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   550  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   551  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   552  /* --- Data --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   553  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is used to get address of element data and to fill the data block */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   554  DEM_INLINE uint8 *Dem_EvMemGetEventMemDataByPtr(Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   555  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   557  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   558  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   559  DEM_INLINE uint8 *Dem_EvMemGetEventMemData(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   560  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   561     return Dem_EvMemGetEventMemDataByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   562  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   563  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   564  DEM_INLINE uint16 Dem_EvMemGetEventMemDataSize(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   565  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   566     return DEM_SIZEOF_VAR(Dem_EvMemEventMemory[0].Data);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   567  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   568  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   569  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   570     Event Memory Status
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   571     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   572  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   573  /* the bits DEM_EVMEM_STSMASK_STORED and DEM_EVMEM_STSMASK_DELETED shall not be set at the same time */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   574  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   575  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedSLC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   576  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   577     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED)) == (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   578  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   579  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   580  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestCompleteTFC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   581  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   582      return ((Status & DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC) == DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   583  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   584  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   585  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedTFC (uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   586  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   587      return ((Status & DEM_EVMEM_STSMASK_TESTFAILED_TFC) == DEM_EVMEM_STSMASK_TESTFAILED_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   588  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   589  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   590  DEM_INLINE Dem_boolean_least Dem_EvMemIsStored(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   591  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   592     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   593  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   594  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   595  DEM_INLINE Dem_boolean_least Dem_EvMemIsEmpty(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   596  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   597     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   598  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   599  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   600  DEM_INLINE Dem_boolean_least Dem_EvMemIsDeleted(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   601  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   602     DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   603  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   604  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   605     return (Dem_boolean_least)((Status & DEM_EVMEM_STSMASK_DELETED) != 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   606  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   607     return FALSE;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   608  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   609  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   610  DEM_INLINE uint16_least Dem_EvMemSetToEmpty(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   611  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   612  	return 0u;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   613  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   614  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   615  DEM_INLINE uint16_least Dem_EvMemSetToDelete(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   616  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   617  	DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   618  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   619  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   620  	return (Status | DEM_EVMEM_STSMASK_DELETED) & (~DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   621  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   622      return Dem_EvMemSetToEmpty();
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   623  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   624  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   625  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   626  DEM_INLINE Dem_boolean_least Dem_EvMemGetShadowVisibility(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   627  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   628  	return DEM_CFG_EVMEM_SHADOW_ENTRIES_VISIBLE;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   629  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   630  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   631  DEM_INLINE Dem_boolean_least Dem_EvMemIsVisible(uint16_least Status, Dem_boolean_least ShadowEntriesVisible)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   632  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   633  	return (Dem_boolean_least)( ( Dem_EvMemIsStored(Status)) ||
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   634  			                    (!Dem_EvMemIsEmpty (Status) && Dem_EvMemGetShadowVisibility() && ShadowEntriesVisible));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   635  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   636  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   637  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   638     Event Memory Iterators
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   639     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   640  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   641  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   642  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   643  DEM_INLINE uint16_least Dem_EvMemGetEventMemStartLocId(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   644  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   645  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   646  	DEM_EVMEM_USEVAR(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   647  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   648  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   649  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   650  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   651  	return Dem_EvMemLocIdList[MemId];
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   652  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   653  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   654  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   655  DEM_INLINE uint16_least Dem_EvMemGetEventMemEndLocId(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   656  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   657  	DEM_EVMEM_USEVAR(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   658  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   659  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   660  	return DEM_CFG_MAX_NUMBER_EVENT_ENTRY_PRIMARY;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   661  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   662  	return Dem_EvMemLocIdList[MemId+1u];
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   663  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   664  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   665  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   666  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   667  DEM_INLINE void Dem_EvMemEventMemoryLocIteratorNew (uint16_least *LocId, uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   668  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   669      *LocId = Dem_EvMemGetEventMemStartLocId(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   670  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   671  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   672  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   673  DEM_INLINE Dem_boolean_least Dem_EvMemEventMemoryLocIteratorIsValid (const uint16_least *LocId, uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   674  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   675      return (Dem_boolean_least)(*LocId < Dem_EvMemGetEventMemEndLocId(MemId));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   676  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   677  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   678  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   679  DEM_INLINE void Dem_EvMemEventMemoryLocIteratorNext (uint16_least *LocId, uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   680  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   681      DEM_EVMEM_USEVAR(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   682      (*LocId)++;
	ld.w	d15,[a13]
.L1149:
	add	d15,#1
	st.w	[a13],d15
.L200:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   660  	return DEM_CFG_MAX_NUMBER_EVENT_ENTRY_PRIMARY;      (inlined)
	j	.L254

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   664  }      (inlined)
.L254:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   541  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   542  DEM_INLINE void Dem_EvMemSetEventMemTrigger(uint16_least LocId, Dem_TriggerType Trigger)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   543  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   544     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   545     DEM_EVMEM_USEVAR(Trigger);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   546  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   547  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   548     Dem_EvMemEventMemory[LocId].Trigger = Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   549  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   550  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   551  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   552  /* --- Data --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   553  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is used to get address of element data and to fill the data block */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   554  DEM_INLINE uint8 *Dem_EvMemGetEventMemDataByPtr(Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   555  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   557  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   558  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   559  DEM_INLINE uint8 *Dem_EvMemGetEventMemData(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   560  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   561     return Dem_EvMemGetEventMemDataByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   562  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   563  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   564  DEM_INLINE uint16 Dem_EvMemGetEventMemDataSize(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   565  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   566     return DEM_SIZEOF_VAR(Dem_EvMemEventMemory[0].Data);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   567  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   568  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   569  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   570     Event Memory Status
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   571     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   572  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   573  /* the bits DEM_EVMEM_STSMASK_STORED and DEM_EVMEM_STSMASK_DELETED shall not be set at the same time */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   574  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   575  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedSLC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   576  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   577     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED)) == (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   578  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   579  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   580  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestCompleteTFC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   581  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   582      return ((Status & DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC) == DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   583  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   584  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   585  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedTFC (uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   586  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   587      return ((Status & DEM_EVMEM_STSMASK_TESTFAILED_TFC) == DEM_EVMEM_STSMASK_TESTFAILED_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   588  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   589  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   590  DEM_INLINE Dem_boolean_least Dem_EvMemIsStored(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   591  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   592     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   593  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   594  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   595  DEM_INLINE Dem_boolean_least Dem_EvMemIsEmpty(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   596  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   597     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   598  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   599  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   600  DEM_INLINE Dem_boolean_least Dem_EvMemIsDeleted(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   601  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   602     DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   603  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   604  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   605     return (Dem_boolean_least)((Status & DEM_EVMEM_STSMASK_DELETED) != 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   606  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   607     return FALSE;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   608  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   609  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   610  DEM_INLINE uint16_least Dem_EvMemSetToEmpty(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   611  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   612  	return 0u;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   613  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   614  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   615  DEM_INLINE uint16_least Dem_EvMemSetToDelete(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   616  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   617  	DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   618  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   619  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   620  	return (Status | DEM_EVMEM_STSMASK_DELETED) & (~DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   621  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   622      return Dem_EvMemSetToEmpty();
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   623  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   624  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   625  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   626  DEM_INLINE Dem_boolean_least Dem_EvMemGetShadowVisibility(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   627  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   628  	return DEM_CFG_EVMEM_SHADOW_ENTRIES_VISIBLE;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   629  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   630  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   631  DEM_INLINE Dem_boolean_least Dem_EvMemIsVisible(uint16_least Status, Dem_boolean_least ShadowEntriesVisible)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   632  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   633  	return (Dem_boolean_least)( ( Dem_EvMemIsStored(Status)) ||
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   634  			                    (!Dem_EvMemIsEmpty (Status) && Dem_EvMemGetShadowVisibility() && ShadowEntriesVisible));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   635  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   636  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   637  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   638     Event Memory Iterators
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   639     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   640  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   641  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   642  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   643  DEM_INLINE uint16_least Dem_EvMemGetEventMemStartLocId(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   644  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   645  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   646  	DEM_EVMEM_USEVAR(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   647  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   648  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   649  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   650  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   651  	return Dem_EvMemLocIdList[MemId];
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   652  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   653  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   654  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   655  DEM_INLINE uint16_least Dem_EvMemGetEventMemEndLocId(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   656  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   657  	DEM_EVMEM_USEVAR(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   658  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   659  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   660  	return DEM_CFG_MAX_NUMBER_EVENT_ENTRY_PRIMARY;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   661  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   662  	return Dem_EvMemLocIdList[MemId+1u];
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   663  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   664  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   665  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   666  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   667  DEM_INLINE void Dem_EvMemEventMemoryLocIteratorNew (uint16_least *LocId, uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   668  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   669      *LocId = Dem_EvMemGetEventMemStartLocId(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   670  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   671  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   672  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   673  DEM_INLINE Dem_boolean_least Dem_EvMemEventMemoryLocIteratorIsValid (const uint16_least *LocId, uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   674  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   675      return (Dem_boolean_least)(*LocId < Dem_EvMemGetEventMemEndLocId(MemId));
	ld.w	d15,[a13]
.L1150:
	lt.u	d15,d15,#5
.L1151:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   675      return (Dem_boolean_least)(*LocId < Dem_EvMemGetEventMemEndLocId(MemId));      (inlined)
	j	.L255

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   676  }      (inlined)
.L255:
	jne	d15,#0,.L201
.L1152:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   728              }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   729          }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   730  		Dem_EvMemEventMemoryLocIteratorNext (&Dem_EvMemFilteredRecordLocId, DEM_CFG_EVMEM_MEMID_PRIMARY);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   731  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   732  	return DEM_FILTERED_NO_MATCHING_DTC;
	mov	d2,#1
.L1153:
	j	.L256

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   733  }
.L256:
.L250:
.L234:
	ret
.L513:
	
__Dem_GetNextFilteredRecord_function_end:
	.size	Dem_GetNextFilteredRecord,__Dem_GetNextFilteredRecord_function_end-Dem_GetNextFilteredRecord
.L342:
	; End of function
	
	.sdecl	'.text.Dem_EvMemApi.Dem_ReadEventsFromMemory',code,cluster('Dem_ReadEventsFromMemory')
	.sect	'.text.Dem_EvMemApi.Dem_ReadEventsFromMemory'
	.align	2
	
	.global	Dem_ReadEventsFromMemory

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   734  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   735  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   736  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   737  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   738  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   739  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   740  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   741  Dem_ReadEventType Dem_ReadEventsFromMemory (Dem_ReadEventsFromMemoryType* ReadEventsFromMemoryState, Dem_DTCOriginType origin)
; Function Dem_ReadEventsFromMemory
.L324:
Dem_ReadEventsFromMemory:	.type	func

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     3  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     4  #ifndef DEM_EVMEM_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     5  #define DEM_EVMEM_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     6  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     7  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     8  #include "Dem_Types.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     9  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    10  #include "Dem_Cfg_EnvMain.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    11  #include "Dem_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    12  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    13  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    14  #include "Dem_EvMemBase.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    15  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    16  #include "Dem_EvMemApi.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    17  #include "Dem_EvMemAging.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    18  #if (DEM_CFG_EVMEM_AGING_METHOD == DEM_CFG_EVMEM_AGING_METHOD_USER)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    19  #include "Dem_PrjEvMemAging.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    20  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    21  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    22  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    23  typedef struct {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    24      uint8 evMemId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    25      boolean originSupported;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    26  } Dem_EvMemMapOrigin2IdType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    27  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    28  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    29  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    30  DEM_ARRAY_DECLARE_CONST(Dem_EvMemMapOrigin2IdType, Dem_EvMemMapOrigin2Id, 5);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    31  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    32  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    33  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    34  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    35  DEM_INLINE boolean Dem_EvMemIsOriginSupported (Dem_DTCOriginType origin)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    36  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    37      return Dem_EvMemMapOrigin2Id[origin].originSupported;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    38  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    39  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    40  DEM_INLINE uint8 Dem_EvMemGetEvMemIdFromOrigin (Dem_DTCOriginType origin)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    41  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    42      return Dem_EvMemMapOrigin2Id[origin].evMemId;
	movh.a	a15,#@his(Dem_EvMemMapOrigin2Id)
	lea	a15,[a15]@los(Dem_EvMemMapOrigin2Id)
.L1411:
	addsc.a	a2,a15,d4,#1
.L1412:
	ld.bu	d15,[a2]
.L1413:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    42      return Dem_EvMemMapOrigin2Id[origin].evMemId;      (inlined)
	j	.L257

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    43  }      (inlined)
.L257:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   742  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   743  	ReadEventsFromMemoryState->evMemId = Dem_EvMemGetEvMemIdFromOrigin(origin);
	st.w	[a4],d15
.L903:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     3  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     4  #ifndef DEM_EVMEM_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     5  #define DEM_EVMEM_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     6  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     7  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     8  #include "Dem_Types.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     9  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    10  #include "Dem_Cfg_EnvMain.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    11  #include "Dem_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    12  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    13  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    14  #include "Dem_EvMemBase.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    15  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    16  #include "Dem_EvMemApi.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    17  #include "Dem_EvMemAging.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    18  #if (DEM_CFG_EVMEM_AGING_METHOD == DEM_CFG_EVMEM_AGING_METHOD_USER)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    19  #include "Dem_PrjEvMemAging.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    20  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    21  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    22  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    23  typedef struct {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    24      uint8 evMemId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    25      boolean originSupported;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    26  } Dem_EvMemMapOrigin2IdType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    27  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    28  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    29  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    30  DEM_ARRAY_DECLARE_CONST(Dem_EvMemMapOrigin2IdType, Dem_EvMemMapOrigin2Id, 5);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    31  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    32  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    33  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    34  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    35  DEM_INLINE boolean Dem_EvMemIsOriginSupported (Dem_DTCOriginType origin)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    36  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    37      return Dem_EvMemMapOrigin2Id[origin].originSupported;
	addsc.a	a15,a15,d4,#1
.L1414:
	ld.bu	d15,[a15]1
.L1415:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    37      return Dem_EvMemMapOrigin2Id[origin].originSupported;      (inlined)
	j	.L258

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    38  }      (inlined)
.L258:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   744  	if (Dem_EvMemIsOriginSupported(origin))
	jeq	d15,#0,.L259
.L1416:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   745  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   746  		Dem_EvMemEventMemoryLocIteratorNew (&ReadEventsFromMemoryState->locIterator, ReadEventsFromMemoryState->evMemId);
	add.a	a4,#4
.L907:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   541  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   542  DEM_INLINE void Dem_EvMemSetEventMemTrigger(uint16_least LocId, Dem_TriggerType Trigger)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   543  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   544     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   545     DEM_EVMEM_USEVAR(Trigger);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   546  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   547  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   548     Dem_EvMemEventMemory[LocId].Trigger = Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   549  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   550  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   551  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   552  /* --- Data --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   553  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is used to get address of element data and to fill the data block */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   554  DEM_INLINE uint8 *Dem_EvMemGetEventMemDataByPtr(Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   555  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   557  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   558  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   559  DEM_INLINE uint8 *Dem_EvMemGetEventMemData(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   560  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   561     return Dem_EvMemGetEventMemDataByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   562  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   563  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   564  DEM_INLINE uint16 Dem_EvMemGetEventMemDataSize(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   565  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   566     return DEM_SIZEOF_VAR(Dem_EvMemEventMemory[0].Data);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   567  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   568  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   569  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   570     Event Memory Status
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   571     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   572  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   573  /* the bits DEM_EVMEM_STSMASK_STORED and DEM_EVMEM_STSMASK_DELETED shall not be set at the same time */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   574  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   575  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedSLC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   576  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   577     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED)) == (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   578  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   579  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   580  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestCompleteTFC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   581  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   582      return ((Status & DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC) == DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   583  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   584  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   585  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedTFC (uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   586  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   587      return ((Status & DEM_EVMEM_STSMASK_TESTFAILED_TFC) == DEM_EVMEM_STSMASK_TESTFAILED_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   588  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   589  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   590  DEM_INLINE Dem_boolean_least Dem_EvMemIsStored(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   591  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   592     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   593  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   594  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   595  DEM_INLINE Dem_boolean_least Dem_EvMemIsEmpty(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   596  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   597     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   598  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   599  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   600  DEM_INLINE Dem_boolean_least Dem_EvMemIsDeleted(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   601  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   602     DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   603  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   604  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   605     return (Dem_boolean_least)((Status & DEM_EVMEM_STSMASK_DELETED) != 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   606  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   607     return FALSE;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   608  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   609  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   610  DEM_INLINE uint16_least Dem_EvMemSetToEmpty(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   611  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   612  	return 0u;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   613  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   614  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   615  DEM_INLINE uint16_least Dem_EvMemSetToDelete(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   616  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   617  	DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   618  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   619  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   620  	return (Status | DEM_EVMEM_STSMASK_DELETED) & (~DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   621  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   622      return Dem_EvMemSetToEmpty();
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   623  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   624  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   625  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   626  DEM_INLINE Dem_boolean_least Dem_EvMemGetShadowVisibility(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   627  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   628  	return DEM_CFG_EVMEM_SHADOW_ENTRIES_VISIBLE;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   629  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   630  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   631  DEM_INLINE Dem_boolean_least Dem_EvMemIsVisible(uint16_least Status, Dem_boolean_least ShadowEntriesVisible)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   632  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   633  	return (Dem_boolean_least)( ( Dem_EvMemIsStored(Status)) ||
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   634  			                    (!Dem_EvMemIsEmpty (Status) && Dem_EvMemGetShadowVisibility() && ShadowEntriesVisible));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   635  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   636  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   637  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   638     Event Memory Iterators
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   639     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   640  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   641  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   642  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   643  DEM_INLINE uint16_least Dem_EvMemGetEventMemStartLocId(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   644  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   645  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   646  	DEM_EVMEM_USEVAR(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   647  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   648  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   649  	return 0;
	mov	d15,#0

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   649  	return 0;      (inlined)
	j	.L260

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   653  }      (inlined)
.L260:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   650  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   651  	return Dem_EvMemLocIdList[MemId];
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   652  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   653  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   654  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   655  DEM_INLINE uint16_least Dem_EvMemGetEventMemEndLocId(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   656  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   657  	DEM_EVMEM_USEVAR(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   658  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   659  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   660  	return DEM_CFG_MAX_NUMBER_EVENT_ENTRY_PRIMARY;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   661  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   662  	return Dem_EvMemLocIdList[MemId+1u];
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   663  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   664  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   665  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   666  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   667  DEM_INLINE void Dem_EvMemEventMemoryLocIteratorNew (uint16_least *LocId, uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   668  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   669      *LocId = Dem_EvMemGetEventMemStartLocId(MemId);
	st.w	[a4],d15
.L908:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   747  		return DEM_READEVENT_OK;
	mov	d2,#0
.L1417:
	j	.L261
.L259:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   748  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   749  	else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   750  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   751  		Dem_EvMemEventMemoryLocIteratorInvalidate(&ReadEventsFromMemoryState->locIterator, ReadEventsFromMemoryState->evMemId);
	add.a	a4,#4
.L913:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   541  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   542  DEM_INLINE void Dem_EvMemSetEventMemTrigger(uint16_least LocId, Dem_TriggerType Trigger)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   543  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   544     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   545     DEM_EVMEM_USEVAR(Trigger);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   546  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   547  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   548     Dem_EvMemEventMemory[LocId].Trigger = Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   549  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   550  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   551  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   552  /* --- Data --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   553  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is used to get address of element data and to fill the data block */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   554  DEM_INLINE uint8 *Dem_EvMemGetEventMemDataByPtr(Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   555  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   557  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   558  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   559  DEM_INLINE uint8 *Dem_EvMemGetEventMemData(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   560  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   561     return Dem_EvMemGetEventMemDataByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   562  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   563  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   564  DEM_INLINE uint16 Dem_EvMemGetEventMemDataSize(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   565  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   566     return DEM_SIZEOF_VAR(Dem_EvMemEventMemory[0].Data);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   567  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   568  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   569  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   570     Event Memory Status
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   571     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   572  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   573  /* the bits DEM_EVMEM_STSMASK_STORED and DEM_EVMEM_STSMASK_DELETED shall not be set at the same time */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   574  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   575  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedSLC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   576  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   577     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED)) == (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   578  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   579  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   580  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestCompleteTFC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   581  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   582      return ((Status & DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC) == DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   583  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   584  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   585  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedTFC (uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   586  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   587      return ((Status & DEM_EVMEM_STSMASK_TESTFAILED_TFC) == DEM_EVMEM_STSMASK_TESTFAILED_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   588  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   589  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   590  DEM_INLINE Dem_boolean_least Dem_EvMemIsStored(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   591  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   592     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   593  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   594  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   595  DEM_INLINE Dem_boolean_least Dem_EvMemIsEmpty(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   596  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   597     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   598  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   599  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   600  DEM_INLINE Dem_boolean_least Dem_EvMemIsDeleted(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   601  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   602     DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   603  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   604  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   605     return (Dem_boolean_least)((Status & DEM_EVMEM_STSMASK_DELETED) != 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   606  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   607     return FALSE;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   608  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   609  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   610  DEM_INLINE uint16_least Dem_EvMemSetToEmpty(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   611  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   612  	return 0u;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   613  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   614  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   615  DEM_INLINE uint16_least Dem_EvMemSetToDelete(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   616  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   617  	DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   618  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   619  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   620  	return (Status | DEM_EVMEM_STSMASK_DELETED) & (~DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   621  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   622      return Dem_EvMemSetToEmpty();
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   623  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   624  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   625  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   626  DEM_INLINE Dem_boolean_least Dem_EvMemGetShadowVisibility(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   627  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   628  	return DEM_CFG_EVMEM_SHADOW_ENTRIES_VISIBLE;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   629  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   630  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   631  DEM_INLINE Dem_boolean_least Dem_EvMemIsVisible(uint16_least Status, Dem_boolean_least ShadowEntriesVisible)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   632  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   633  	return (Dem_boolean_least)( ( Dem_EvMemIsStored(Status)) ||
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   634  			                    (!Dem_EvMemIsEmpty (Status) && Dem_EvMemGetShadowVisibility() && ShadowEntriesVisible));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   635  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   636  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   637  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   638     Event Memory Iterators
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   639     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   640  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   641  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   642  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   643  DEM_INLINE uint16_least Dem_EvMemGetEventMemStartLocId(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   644  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   645  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   646  	DEM_EVMEM_USEVAR(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   647  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   648  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   649  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   650  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   651  	return Dem_EvMemLocIdList[MemId];
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   652  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   653  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   654  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   655  DEM_INLINE uint16_least Dem_EvMemGetEventMemEndLocId(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   656  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   657  	DEM_EVMEM_USEVAR(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   658  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   659  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   660  	return DEM_CFG_MAX_NUMBER_EVENT_ENTRY_PRIMARY;
	mov	d15,#5

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   660  	return DEM_CFG_MAX_NUMBER_EVENT_ENTRY_PRIMARY;      (inlined)
	j	.L262

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   664  }      (inlined)
.L262:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   661  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   662  	return Dem_EvMemLocIdList[MemId+1u];
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   663  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   664  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   665  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   666  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   667  DEM_INLINE void Dem_EvMemEventMemoryLocIteratorNew (uint16_least *LocId, uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   668  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   669      *LocId = Dem_EvMemGetEventMemStartLocId(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   670  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   671  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   672  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   673  DEM_INLINE Dem_boolean_least Dem_EvMemEventMemoryLocIteratorIsValid (const uint16_least *LocId, uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   674  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   675      return (Dem_boolean_least)(*LocId < Dem_EvMemGetEventMemEndLocId(MemId));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   676  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   677  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   678  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   679  DEM_INLINE void Dem_EvMemEventMemoryLocIteratorNext (uint16_least *LocId, uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   680  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   681      DEM_EVMEM_USEVAR(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   682      (*LocId)++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   683  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   684  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   685  DEM_INLINE void Dem_EvMemEventMemoryLocIteratorInvalidate (uint16_least *LocId, uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   686  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   687      *LocId = Dem_EvMemGetEventMemEndLocId(MemId);
	st.w	[a4],d15
.L914:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   752  		return DEM_READEVENT_WRONG_ORIGIN;
	mov	d2,#2
.L1418:
	j	.L263

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   753  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   754  }
.L263:
.L261:
	ret
.L895:
	
__Dem_ReadEventsFromMemory_function_end:
	.size	Dem_ReadEventsFromMemory,__Dem_ReadEventsFromMemory_function_end-Dem_ReadEventsFromMemory
.L387:
	; End of function
	
	.sdecl	'.text.Dem_EvMemApi.Dem_GetNextEventFromMemory',code,cluster('Dem_GetNextEventFromMemory')
	.sect	'.text.Dem_EvMemApi.Dem_GetNextEventFromMemory'
	.align	2
	
	.global	Dem_GetNextEventFromMemory

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   755  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   756  Dem_ReadEventType Dem_GetNextEventFromMemory (Dem_ReadEventsFromMemoryType* ReadEventsFromMemoryState, Dem_EventIdType* EventId, uint16* LocId)
; Function Dem_GetNextEventFromMemory
.L326:
Dem_GetNextEventFromMemory:	.type	func

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   757  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   758  	while (Dem_EvMemEventMemoryLocIteratorIsValid (&ReadEventsFromMemoryState->locIterator, ReadEventsFromMemoryState->evMemId))
	j	.L264
.L265:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   759  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   760  		*EventId = Dem_EvMemGetEventMemEventId (ReadEventsFromMemoryState->locIterator);
	ld.w	d15,[a4]4
.L877:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
	movh.a	a15,#@his(Dem_EvMemEventMemory)
	lea	a15,[a15]@los(Dem_EvMemEventMemory)
.L1391:
	mul	d15,d15,#20
	addsc.a	a2,a15,d15,#0
.L880:
	ld.hu	d15,[a2]2
.L1392:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;      (inlined)
	j	.L266

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }      (inlined)
.L266:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);      (inlined)
	j	.L267

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }      (inlined)
.L267:
	st.h	[a5],d15
.L878:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   761  		/* Location Index to be filled here before updating next LocId */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   762  		*LocId = (uint16)ReadEventsFromMemoryState->locIterator;
	ld.w	d15,[a4]4
.L1393:
	st.h	[a6],d15
.L1394:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   763  		Dem_EvMemEventMemoryLocIteratorNext (&ReadEventsFromMemoryState->locIterator,ReadEventsFromMemoryState->evMemId);
	mov.aa	a2,a4
	add.a	a2,#4
.L882:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   541  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   542  DEM_INLINE void Dem_EvMemSetEventMemTrigger(uint16_least LocId, Dem_TriggerType Trigger)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   543  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   544     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   545     DEM_EVMEM_USEVAR(Trigger);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   546  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   547  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   548     Dem_EvMemEventMemory[LocId].Trigger = Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   549  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   550  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   551  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   552  /* --- Data --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   553  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is used to get address of element data and to fill the data block */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   554  DEM_INLINE uint8 *Dem_EvMemGetEventMemDataByPtr(Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   555  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   557  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   558  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   559  DEM_INLINE uint8 *Dem_EvMemGetEventMemData(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   560  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   561     return Dem_EvMemGetEventMemDataByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   562  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   563  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   564  DEM_INLINE uint16 Dem_EvMemGetEventMemDataSize(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   565  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   566     return DEM_SIZEOF_VAR(Dem_EvMemEventMemory[0].Data);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   567  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   568  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   569  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   570     Event Memory Status
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   571     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   572  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   573  /* the bits DEM_EVMEM_STSMASK_STORED and DEM_EVMEM_STSMASK_DELETED shall not be set at the same time */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   574  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   575  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedSLC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   576  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   577     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED)) == (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   578  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   579  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   580  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestCompleteTFC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   581  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   582      return ((Status & DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC) == DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   583  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   584  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   585  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedTFC (uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   586  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   587      return ((Status & DEM_EVMEM_STSMASK_TESTFAILED_TFC) == DEM_EVMEM_STSMASK_TESTFAILED_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   588  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   589  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   590  DEM_INLINE Dem_boolean_least Dem_EvMemIsStored(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   591  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   592     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   593  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   594  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   595  DEM_INLINE Dem_boolean_least Dem_EvMemIsEmpty(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   596  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   597     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   598  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   599  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   600  DEM_INLINE Dem_boolean_least Dem_EvMemIsDeleted(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   601  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   602     DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   603  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   604  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   605     return (Dem_boolean_least)((Status & DEM_EVMEM_STSMASK_DELETED) != 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   606  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   607     return FALSE;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   608  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   609  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   610  DEM_INLINE uint16_least Dem_EvMemSetToEmpty(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   611  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   612  	return 0u;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   613  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   614  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   615  DEM_INLINE uint16_least Dem_EvMemSetToDelete(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   616  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   617  	DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   618  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   619  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   620  	return (Status | DEM_EVMEM_STSMASK_DELETED) & (~DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   621  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   622      return Dem_EvMemSetToEmpty();
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   623  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   624  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   625  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   626  DEM_INLINE Dem_boolean_least Dem_EvMemGetShadowVisibility(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   627  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   628  	return DEM_CFG_EVMEM_SHADOW_ENTRIES_VISIBLE;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   629  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   630  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   631  DEM_INLINE Dem_boolean_least Dem_EvMemIsVisible(uint16_least Status, Dem_boolean_least ShadowEntriesVisible)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   632  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   633  	return (Dem_boolean_least)( ( Dem_EvMemIsStored(Status)) ||
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   634  			                    (!Dem_EvMemIsEmpty (Status) && Dem_EvMemGetShadowVisibility() && ShadowEntriesVisible));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   635  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   636  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   637  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   638     Event Memory Iterators
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   639     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   640  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   641  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   642  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   643  DEM_INLINE uint16_least Dem_EvMemGetEventMemStartLocId(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   644  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   645  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   646  	DEM_EVMEM_USEVAR(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   647  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   648  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   649  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   650  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   651  	return Dem_EvMemLocIdList[MemId];
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   652  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   653  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   654  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   655  DEM_INLINE uint16_least Dem_EvMemGetEventMemEndLocId(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   656  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   657  	DEM_EVMEM_USEVAR(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   658  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   659  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   660  	return DEM_CFG_MAX_NUMBER_EVENT_ENTRY_PRIMARY;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   661  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   662  	return Dem_EvMemLocIdList[MemId+1u];
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   663  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   664  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   665  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   666  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   667  DEM_INLINE void Dem_EvMemEventMemoryLocIteratorNew (uint16_least *LocId, uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   668  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   669      *LocId = Dem_EvMemGetEventMemStartLocId(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   670  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   671  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   672  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   673  DEM_INLINE Dem_boolean_least Dem_EvMemEventMemoryLocIteratorIsValid (const uint16_least *LocId, uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   674  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   675      return (Dem_boolean_least)(*LocId < Dem_EvMemGetEventMemEndLocId(MemId));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   676  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   677  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   678  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   679  DEM_INLINE void Dem_EvMemEventMemoryLocIteratorNext (uint16_least *LocId, uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   680  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   681      DEM_EVMEM_USEVAR(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   682      (*LocId)++;
	ld.w	d15,[a2]
.L1395:
	add	d15,#1
	st.w	[a2],d15
.L883:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   764  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   765  		if (Dem_EvMemIsStored(Dem_EvMemGetEventMemStatus((uint16_least)*LocId)))
	ld.hu	d15,[a6]0
.L886:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
	mul	d15,d15,#20
	addsc.a	a15,a15,d15,#0
.L888:
	ld.hu	d15,[a15]0
.L1396:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;      (inlined)
	j	.L268

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }      (inlined)
.L268:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);      (inlined)
	j	.L269

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }      (inlined)
.L269:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   541  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   542  DEM_INLINE void Dem_EvMemSetEventMemTrigger(uint16_least LocId, Dem_TriggerType Trigger)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   543  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   544     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   545     DEM_EVMEM_USEVAR(Trigger);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   546  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   547  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   548     Dem_EvMemEventMemory[LocId].Trigger = Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   549  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   550  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   551  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   552  /* --- Data --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   553  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is used to get address of element data and to fill the data block */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   554  DEM_INLINE uint8 *Dem_EvMemGetEventMemDataByPtr(Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   555  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   557  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   558  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   559  DEM_INLINE uint8 *Dem_EvMemGetEventMemData(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   560  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   561     return Dem_EvMemGetEventMemDataByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   562  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   563  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   564  DEM_INLINE uint16 Dem_EvMemGetEventMemDataSize(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   565  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   566     return DEM_SIZEOF_VAR(Dem_EvMemEventMemory[0].Data);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   567  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   568  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   569  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   570     Event Memory Status
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   571     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   572  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   573  /* the bits DEM_EVMEM_STSMASK_STORED and DEM_EVMEM_STSMASK_DELETED shall not be set at the same time */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   574  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   575  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedSLC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   576  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   577     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED)) == (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   578  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   579  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   580  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestCompleteTFC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   581  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   582      return ((Status & DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC) == DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   583  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   584  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   585  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedTFC (uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   586  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   587      return ((Status & DEM_EVMEM_STSMASK_TESTFAILED_TFC) == DEM_EVMEM_STSMASK_TESTFAILED_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   588  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   589  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   590  DEM_INLINE Dem_boolean_least Dem_EvMemIsStored(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   591  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   592     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == DEM_EVMEM_STSMASK_STORED);
	mov	d0,#4224
.L1397:
	and	d15,d0
.L1398:
	mov	d0,#4096
.L1399:
	eq	d15,d15,d0
.L1400:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   592     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == DEM_EVMEM_STSMASK_STORED);      (inlined)
	j	.L270

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   593  }      (inlined)
.L270:
	jeq	d15,#0,.L271
.L1401:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   766  		{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   767  			return DEM_READEVENT_OK;
	mov	d2,#0
.L1402:
	j	.L272
.L271:
.L264:
	mov.aa	a15,a4
	add.a	a15,#4
.L891:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   660  	return DEM_CFG_MAX_NUMBER_EVENT_ENTRY_PRIMARY;      (inlined)
	j	.L273

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   664  }      (inlined)
.L273:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   541  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   542  DEM_INLINE void Dem_EvMemSetEventMemTrigger(uint16_least LocId, Dem_TriggerType Trigger)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   543  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   544     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   545     DEM_EVMEM_USEVAR(Trigger);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   546  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   547  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   548     Dem_EvMemEventMemory[LocId].Trigger = Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   549  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   550  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   551  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   552  /* --- Data --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   553  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is used to get address of element data and to fill the data block */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   554  DEM_INLINE uint8 *Dem_EvMemGetEventMemDataByPtr(Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   555  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   557  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   558  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   559  DEM_INLINE uint8 *Dem_EvMemGetEventMemData(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   560  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   561     return Dem_EvMemGetEventMemDataByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   562  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   563  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   564  DEM_INLINE uint16 Dem_EvMemGetEventMemDataSize(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   565  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   566     return DEM_SIZEOF_VAR(Dem_EvMemEventMemory[0].Data);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   567  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   568  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   569  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   570     Event Memory Status
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   571     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   572  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   573  /* the bits DEM_EVMEM_STSMASK_STORED and DEM_EVMEM_STSMASK_DELETED shall not be set at the same time */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   574  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   575  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedSLC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   576  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   577     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED)) == (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   578  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   579  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   580  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestCompleteTFC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   581  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   582      return ((Status & DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC) == DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   583  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   584  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   585  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedTFC (uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   586  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   587      return ((Status & DEM_EVMEM_STSMASK_TESTFAILED_TFC) == DEM_EVMEM_STSMASK_TESTFAILED_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   588  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   589  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   590  DEM_INLINE Dem_boolean_least Dem_EvMemIsStored(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   591  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   592     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   593  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   594  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   595  DEM_INLINE Dem_boolean_least Dem_EvMemIsEmpty(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   596  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   597     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   598  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   599  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   600  DEM_INLINE Dem_boolean_least Dem_EvMemIsDeleted(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   601  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   602     DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   603  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   604  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   605     return (Dem_boolean_least)((Status & DEM_EVMEM_STSMASK_DELETED) != 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   606  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   607     return FALSE;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   608  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   609  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   610  DEM_INLINE uint16_least Dem_EvMemSetToEmpty(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   611  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   612  	return 0u;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   613  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   614  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   615  DEM_INLINE uint16_least Dem_EvMemSetToDelete(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   616  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   617  	DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   618  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   619  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   620  	return (Status | DEM_EVMEM_STSMASK_DELETED) & (~DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   621  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   622      return Dem_EvMemSetToEmpty();
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   623  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   624  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   625  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   626  DEM_INLINE Dem_boolean_least Dem_EvMemGetShadowVisibility(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   627  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   628  	return DEM_CFG_EVMEM_SHADOW_ENTRIES_VISIBLE;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   629  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   630  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   631  DEM_INLINE Dem_boolean_least Dem_EvMemIsVisible(uint16_least Status, Dem_boolean_least ShadowEntriesVisible)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   632  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   633  	return (Dem_boolean_least)( ( Dem_EvMemIsStored(Status)) ||
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   634  			                    (!Dem_EvMemIsEmpty (Status) && Dem_EvMemGetShadowVisibility() && ShadowEntriesVisible));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   635  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   636  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   637  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   638     Event Memory Iterators
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   639     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   640  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   641  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   642  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   643  DEM_INLINE uint16_least Dem_EvMemGetEventMemStartLocId(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   644  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   645  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   646  	DEM_EVMEM_USEVAR(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   647  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   648  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   649  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   650  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   651  	return Dem_EvMemLocIdList[MemId];
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   652  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   653  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   654  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   655  DEM_INLINE uint16_least Dem_EvMemGetEventMemEndLocId(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   656  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   657  	DEM_EVMEM_USEVAR(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   658  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   659  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   660  	return DEM_CFG_MAX_NUMBER_EVENT_ENTRY_PRIMARY;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   661  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   662  	return Dem_EvMemLocIdList[MemId+1u];
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   663  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   664  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   665  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   666  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   667  DEM_INLINE void Dem_EvMemEventMemoryLocIteratorNew (uint16_least *LocId, uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   668  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   669      *LocId = Dem_EvMemGetEventMemStartLocId(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   670  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   671  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   672  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   673  DEM_INLINE Dem_boolean_least Dem_EvMemEventMemoryLocIteratorIsValid (const uint16_least *LocId, uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   674  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   675      return (Dem_boolean_least)(*LocId < Dem_EvMemGetEventMemEndLocId(MemId));
	ld.w	d15,[a15]
.L1403:
	lt.u	d15,d15,#5
.L1404:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   675      return (Dem_boolean_least)(*LocId < Dem_EvMemGetEventMemEndLocId(MemId));      (inlined)
	j	.L274

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   676  }      (inlined)
.L274:
	jne	d15,#0,.L265
.L1405:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   768  		}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   769  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   770  	return DEM_READEVENT_NO_MATCHING_ELEMENT;
	mov	d2,#1
.L1406:
	j	.L275

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   771  }
.L275:
.L272:
	ret
.L871:
	
__Dem_GetNextEventFromMemory_function_end:
	.size	Dem_GetNextEventFromMemory,__Dem_GetNextEventFromMemory_function_end-Dem_GetNextEventFromMemory
.L382:
	; End of function
	
	.sdecl	'.text.Dem_EvMemApi.Dem_GetNumberOfEventMemoryEntries',code,cluster('Dem_GetNumberOfEventMemoryEntries')
	.sect	'.text.Dem_EvMemApi.Dem_GetNumberOfEventMemoryEntries'
	.align	2
	
	.global	Dem_GetNumberOfEventMemoryEntries

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   772  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   773  DEM_INLINE uint8 Dem_EvMemGetNoOfEntries(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   774  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   775      uint16_least LocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   776      uint8 counter = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   777  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   778      if (Dem_EvMemIsMemIdValid(MemId))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   779      {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   780          for (Dem_EvMemEventMemoryLocIteratorNew(&LocId, MemId); Dem_EvMemEventMemoryLocIteratorIsValid(&LocId, MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   781                  Dem_EvMemEventMemoryLocIteratorNext(&LocId, MemId))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   782          {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   783              if (Dem_EvMemIsStored(Dem_EvMemGetEventMemStatus(LocId)))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   784              {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   785                  counter++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   786              }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   787          }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   788      }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   789      return counter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   790  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   791  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   792  Std_ReturnType Dem_GetNumberOfEventMemoryEntries(Dem_DTCOriginType DTCOrigin, uint8* NumberOfEventMemoryEntries)
; Function Dem_GetNumberOfEventMemoryEntries
.L328:
Dem_GetNumberOfEventMemoryEntries:	.type	func
	sub.a	a10,#8
.L1051:
	st.b	[a10],d4
	mov.aa	a12,a4
.L1054:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   793  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   794      Std_ReturnType retVal = E_NOT_OK;
	mov	d2,#1

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   795  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   796      /*Entry Condition Check */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   797      DEM_ENTRY_CONDITION_CHECK_DEM_INITIALIZED(DEM_DET_APIID_DEM_EVMEMGETNUMBEROFEVENTENTRIES,E_NOT_OK);
.L276:
.L277:
	movh.a	a15,#@his(Dem_OpMoState)
	lea	a15,[a15]@los(Dem_OpMoState)
	ld.bu	d15,[a15]
	jeq	d15,#2,.L278
	mov	d4,#54
.L1052:
	mov	d5,#0
	mov	d6,#53
	mov	d7,#32
	call	Det_ReportError
.L1053:
	mov	d2,#1
	j	.L279
.L278:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   798      DEM_ENTRY_CONDITION_CHECK_NOT_NULL_PTR(NumberOfEventMemoryEntries,DEM_DET_APIID_DEM_EVMEMGETNUMBEROFEVENTENTRIES,E_NOT_OK);
.L280:
.L281:
	jnz.a	a12,.L282
.L1365:
	mov	d4,#54
.L1055:
	mov	d5,#0
	mov	d6,#53
	mov	d7,#17
	call	Det_ReportError
.L1056:
	mov	d2,#1
	j	.L283
.L282:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   799      if (!Dem_EvMemIsDtcOriginValid(&DTCOrigin))
	lea	a15,[a10]0
.L839:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     3  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     4  #ifndef DEM_EVMEMAPI_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     5  #define DEM_EVMEMAPI_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     6  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     7  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     8  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     9  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    10  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    11     Interface Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    12     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    13  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    14  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    15  typedef struct
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    16  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    17    /* DEM API write */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    18    Dem_DtcIdType            DtcId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    19    Dem_DTCOriginType        DTCOrigin;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    20    uint8                    ReqCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    21    /* DEM Main write */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    22    uint8                    DemCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    23    boolean                  IsValid;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    24    Dem_EvMemEventMemoryType EventMemory;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    25  } Dem_EvMemDTCRecordType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    26  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    29  extern Dem_EvMemDTCRecordType Dem_EvMemDTCRecord;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    30  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    31  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    32  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    33  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    34  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    35  /* Read Events From EvMem */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    36  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    37  void Dem_EvMemApiMainFunction(void);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    38  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    39  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    41  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    42  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    43     Inline Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    44     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    45  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    46  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    47  DEM_INLINE Dem_boolean_least Dem_EvMemIsDtcKindValid (Dem_DTCKindType DTCKind)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    48  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    49      return (DTCKind == DEM_DTC_KIND_ALL_DTCS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    50  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    53  DEM_INLINE Dem_boolean_least Dem_EvMemIsDtcOriginValid (Dem_DTCOriginType  *DTCOrigin)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    54  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    55      if(*DTCOrigin == DEM_DTC_ORIGIN_USERDEFINED_MEMORY)
	ld.bu	d15,[a15]
.L1366:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    55      if(*DTCOrigin == DEM_DTC_ORIGIN_USERDEFINED_MEMORY)      (inlined)
	jne	d15,#0,.L284
.L1367:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    56      {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    57          *DTCOrigin = DEM_DTC_ORIGIN_SECONDARY_MEMORY;
	mov	d15,#4
.L1368:
	st.b	[a15],d15

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    55      if(*DTCOrigin == DEM_DTC_ORIGIN_USERDEFINED_MEMORY)      (inlined)
.L284:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    58      }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    59      return (
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    60                 (*DTCOrigin == DEM_DTC_ORIGIN_PRIMARY_MEMORY)
	ld.bu	d15,[a15]
.L1369:
	eq	d15,d15,#1
.L1370:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    59      return (      (inlined)
	j	.L285

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    68  }      (inlined)
.L285:
	jne	d15,#0,.L286
.L1371:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   800      {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   801          DEM_DET(DEM_DET_APIID_DEM_EVMEMGETNUMBEROFEVENTENTRIES, DEM_E_WRONG_CONFIGURATION);
	mov	d4,#54
.L1057:
	mov	d5,#0
	mov	d6,#53
	mov	d7,#16
	call	Det_ReportError
.L1058:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   802          retVal = E_NOT_OK;
	mov	d2,#1
.L286:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   803      }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   804  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   805      if (DTCOrigin == DEM_DTC_ORIGIN_PRIMARY_MEMORY)
	ld.bu	d15,[a10]
.L1372:
	jne	d15,#1,.L287
.L1373:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   806      {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   807          *NumberOfEventMemoryEntries = Dem_EvMemGetNoOfEntries(DEM_CFG_EVMEM_MEMID_PRIMARY);
	mov	d15,#0
.L842:
	mov	d0,#0
.L850:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
	eq	d15,d15,#0
.L1374:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);      (inlined)
	j	.L288

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }      (inlined)
.L288:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   778      if (Dem_EvMemIsMemIdValid(MemId))      (inlined)
	jeq	d15,#0,.L289
.L1375:
	lea	a15,[a10]4
.L854:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   541  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   542  DEM_INLINE void Dem_EvMemSetEventMemTrigger(uint16_least LocId, Dem_TriggerType Trigger)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   543  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   544     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   545     DEM_EVMEM_USEVAR(Trigger);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   546  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   547  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   548     Dem_EvMemEventMemory[LocId].Trigger = Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   549  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   550  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   551  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   552  /* --- Data --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   553  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is used to get address of element data and to fill the data block */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   554  DEM_INLINE uint8 *Dem_EvMemGetEventMemDataByPtr(Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   555  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   557  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   558  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   559  DEM_INLINE uint8 *Dem_EvMemGetEventMemData(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   560  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   561     return Dem_EvMemGetEventMemDataByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   562  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   563  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   564  DEM_INLINE uint16 Dem_EvMemGetEventMemDataSize(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   565  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   566     return DEM_SIZEOF_VAR(Dem_EvMemEventMemory[0].Data);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   567  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   568  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   569  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   570     Event Memory Status
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   571     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   572  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   573  /* the bits DEM_EVMEM_STSMASK_STORED and DEM_EVMEM_STSMASK_DELETED shall not be set at the same time */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   574  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   575  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedSLC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   576  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   577     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED)) == (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   578  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   579  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   580  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestCompleteTFC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   581  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   582      return ((Status & DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC) == DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   583  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   584  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   585  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedTFC (uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   586  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   587      return ((Status & DEM_EVMEM_STSMASK_TESTFAILED_TFC) == DEM_EVMEM_STSMASK_TESTFAILED_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   588  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   589  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   590  DEM_INLINE Dem_boolean_least Dem_EvMemIsStored(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   591  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   592     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   593  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   594  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   595  DEM_INLINE Dem_boolean_least Dem_EvMemIsEmpty(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   596  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   597     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   598  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   599  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   600  DEM_INLINE Dem_boolean_least Dem_EvMemIsDeleted(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   601  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   602     DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   603  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   604  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   605     return (Dem_boolean_least)((Status & DEM_EVMEM_STSMASK_DELETED) != 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   606  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   607     return FALSE;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   608  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   609  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   610  DEM_INLINE uint16_least Dem_EvMemSetToEmpty(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   611  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   612  	return 0u;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   613  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   614  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   615  DEM_INLINE uint16_least Dem_EvMemSetToDelete(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   616  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   617  	DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   618  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   619  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   620  	return (Status | DEM_EVMEM_STSMASK_DELETED) & (~DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   621  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   622      return Dem_EvMemSetToEmpty();
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   623  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   624  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   625  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   626  DEM_INLINE Dem_boolean_least Dem_EvMemGetShadowVisibility(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   627  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   628  	return DEM_CFG_EVMEM_SHADOW_ENTRIES_VISIBLE;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   629  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   630  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   631  DEM_INLINE Dem_boolean_least Dem_EvMemIsVisible(uint16_least Status, Dem_boolean_least ShadowEntriesVisible)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   632  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   633  	return (Dem_boolean_least)( ( Dem_EvMemIsStored(Status)) ||
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   634  			                    (!Dem_EvMemIsEmpty (Status) && Dem_EvMemGetShadowVisibility() && ShadowEntriesVisible));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   635  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   636  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   637  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   638     Event Memory Iterators
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   639     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   640  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   641  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   642  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   643  DEM_INLINE uint16_least Dem_EvMemGetEventMemStartLocId(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   644  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   645  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   646  	DEM_EVMEM_USEVAR(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   647  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   648  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   649  	return 0;
	mov	d15,#0

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   649  	return 0;      (inlined)
	j	.L290

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   653  }      (inlined)
.L290:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   650  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   651  	return Dem_EvMemLocIdList[MemId];
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   652  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   653  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   654  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   655  DEM_INLINE uint16_least Dem_EvMemGetEventMemEndLocId(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   656  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   657  	DEM_EVMEM_USEVAR(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   658  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   659  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   660  	return DEM_CFG_MAX_NUMBER_EVENT_ENTRY_PRIMARY;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   661  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   662  	return Dem_EvMemLocIdList[MemId+1u];
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   663  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   664  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   665  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   666  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   667  DEM_INLINE void Dem_EvMemEventMemoryLocIteratorNew (uint16_least *LocId, uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   668  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   669      *LocId = Dem_EvMemGetEventMemStartLocId(MemId);
	st.w	[a15],d15
.L855:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   780          for (Dem_EvMemEventMemoryLocIteratorNew(&LocId, MemId); Dem_EvMemEventMemoryLocIteratorIsValid(&LocId, MemId);      (inlined)
	j	.L291

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   781                  Dem_EvMemEventMemoryLocIteratorNext(&LocId, MemId))      (inlined)
.L292:
	ld.w	d15,[a10]4
.L859:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
	mul	d15,d15,#20
.L1376:
	movh.a	a15,#@his(Dem_EvMemEventMemory)
	lea	a15,[a15]@los(Dem_EvMemEventMemory)
.L1377:
	addsc.a	a15,a15,d15,#0
.L861:
	ld.hu	d15,[a15]0
.L1378:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;      (inlined)
	j	.L293

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }      (inlined)
.L293:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);      (inlined)
	j	.L294

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }      (inlined)
.L294:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   541  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   542  DEM_INLINE void Dem_EvMemSetEventMemTrigger(uint16_least LocId, Dem_TriggerType Trigger)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   543  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   544     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   545     DEM_EVMEM_USEVAR(Trigger);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   546  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   547  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   548     Dem_EvMemEventMemory[LocId].Trigger = Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   549  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   550  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   551  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   552  /* --- Data --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   553  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is used to get address of element data and to fill the data block */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   554  DEM_INLINE uint8 *Dem_EvMemGetEventMemDataByPtr(Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   555  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   557  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   558  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   559  DEM_INLINE uint8 *Dem_EvMemGetEventMemData(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   560  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   561     return Dem_EvMemGetEventMemDataByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   562  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   563  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   564  DEM_INLINE uint16 Dem_EvMemGetEventMemDataSize(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   565  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   566     return DEM_SIZEOF_VAR(Dem_EvMemEventMemory[0].Data);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   567  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   568  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   569  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   570     Event Memory Status
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   571     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   572  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   573  /* the bits DEM_EVMEM_STSMASK_STORED and DEM_EVMEM_STSMASK_DELETED shall not be set at the same time */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   574  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   575  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedSLC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   576  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   577     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED)) == (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   578  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   579  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   580  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestCompleteTFC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   581  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   582      return ((Status & DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC) == DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   583  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   584  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   585  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedTFC (uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   586  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   587      return ((Status & DEM_EVMEM_STSMASK_TESTFAILED_TFC) == DEM_EVMEM_STSMASK_TESTFAILED_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   588  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   589  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   590  DEM_INLINE Dem_boolean_least Dem_EvMemIsStored(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   591  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   592     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == DEM_EVMEM_STSMASK_STORED);
	mov	d1,#4224
.L1379:
	and	d15,d1
.L1380:
	mov	d1,#4096
.L1381:
	eq	d15,d15,d1
.L1382:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   592     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == DEM_EVMEM_STSMASK_STORED);      (inlined)
	j	.L295

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   593  }      (inlined)
.L295:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   783              if (Dem_EvMemIsStored(Dem_EvMemGetEventMemStatus(LocId)))      (inlined)
	jeq	d15,#0,.L296
.L1383:
	add	d0,#1
.L1059:
	extr.u	d0,d0,#0,#8

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   783              if (Dem_EvMemIsStored(Dem_EvMemGetEventMemStatus(LocId)))      (inlined)
.L296:
	lea	a15,[a10]4
.L864:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   541  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   542  DEM_INLINE void Dem_EvMemSetEventMemTrigger(uint16_least LocId, Dem_TriggerType Trigger)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   543  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   544     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   545     DEM_EVMEM_USEVAR(Trigger);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   546  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   547  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   548     Dem_EvMemEventMemory[LocId].Trigger = Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   549  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   550  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   551  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   552  /* --- Data --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   553  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is used to get address of element data and to fill the data block */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   554  DEM_INLINE uint8 *Dem_EvMemGetEventMemDataByPtr(Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   555  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   557  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   558  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   559  DEM_INLINE uint8 *Dem_EvMemGetEventMemData(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   560  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   561     return Dem_EvMemGetEventMemDataByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   562  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   563  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   564  DEM_INLINE uint16 Dem_EvMemGetEventMemDataSize(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   565  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   566     return DEM_SIZEOF_VAR(Dem_EvMemEventMemory[0].Data);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   567  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   568  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   569  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   570     Event Memory Status
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   571     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   572  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   573  /* the bits DEM_EVMEM_STSMASK_STORED and DEM_EVMEM_STSMASK_DELETED shall not be set at the same time */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   574  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   575  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedSLC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   576  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   577     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED)) == (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   578  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   579  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   580  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestCompleteTFC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   581  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   582      return ((Status & DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC) == DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   583  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   584  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   585  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedTFC (uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   586  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   587      return ((Status & DEM_EVMEM_STSMASK_TESTFAILED_TFC) == DEM_EVMEM_STSMASK_TESTFAILED_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   588  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   589  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   590  DEM_INLINE Dem_boolean_least Dem_EvMemIsStored(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   591  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   592     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   593  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   594  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   595  DEM_INLINE Dem_boolean_least Dem_EvMemIsEmpty(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   596  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   597     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   598  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   599  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   600  DEM_INLINE Dem_boolean_least Dem_EvMemIsDeleted(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   601  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   602     DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   603  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   604  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   605     return (Dem_boolean_least)((Status & DEM_EVMEM_STSMASK_DELETED) != 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   606  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   607     return FALSE;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   608  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   609  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   610  DEM_INLINE uint16_least Dem_EvMemSetToEmpty(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   611  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   612  	return 0u;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   613  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   614  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   615  DEM_INLINE uint16_least Dem_EvMemSetToDelete(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   616  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   617  	DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   618  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   619  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   620  	return (Status | DEM_EVMEM_STSMASK_DELETED) & (~DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   621  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   622      return Dem_EvMemSetToEmpty();
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   623  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   624  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   625  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   626  DEM_INLINE Dem_boolean_least Dem_EvMemGetShadowVisibility(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   627  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   628  	return DEM_CFG_EVMEM_SHADOW_ENTRIES_VISIBLE;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   629  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   630  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   631  DEM_INLINE Dem_boolean_least Dem_EvMemIsVisible(uint16_least Status, Dem_boolean_least ShadowEntriesVisible)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   632  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   633  	return (Dem_boolean_least)( ( Dem_EvMemIsStored(Status)) ||
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   634  			                    (!Dem_EvMemIsEmpty (Status) && Dem_EvMemGetShadowVisibility() && ShadowEntriesVisible));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   635  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   636  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   637  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   638     Event Memory Iterators
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   639     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   640  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   641  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   642  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   643  DEM_INLINE uint16_least Dem_EvMemGetEventMemStartLocId(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   644  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   645  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   646  	DEM_EVMEM_USEVAR(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   647  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   648  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   649  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   650  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   651  	return Dem_EvMemLocIdList[MemId];
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   652  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   653  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   654  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   655  DEM_INLINE uint16_least Dem_EvMemGetEventMemEndLocId(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   656  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   657  	DEM_EVMEM_USEVAR(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   658  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   659  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   660  	return DEM_CFG_MAX_NUMBER_EVENT_ENTRY_PRIMARY;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   661  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   662  	return Dem_EvMemLocIdList[MemId+1u];
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   663  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   664  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   665  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   666  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   667  DEM_INLINE void Dem_EvMemEventMemoryLocIteratorNew (uint16_least *LocId, uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   668  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   669      *LocId = Dem_EvMemGetEventMemStartLocId(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   670  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   671  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   672  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   673  DEM_INLINE Dem_boolean_least Dem_EvMemEventMemoryLocIteratorIsValid (const uint16_least *LocId, uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   674  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   675      return (Dem_boolean_least)(*LocId < Dem_EvMemGetEventMemEndLocId(MemId));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   676  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   677  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   678  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   679  DEM_INLINE void Dem_EvMemEventMemoryLocIteratorNext (uint16_least *LocId, uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   680  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   681      DEM_EVMEM_USEVAR(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   682      (*LocId)++;
	ld.w	d15,[a15]
.L1384:
	add	d15,#1
	st.w	[a15],d15

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   780          for (Dem_EvMemEventMemoryLocIteratorNew(&LocId, MemId); Dem_EvMemEventMemoryLocIteratorIsValid(&LocId, MemId);      (inlined)
.L291:
	lea	a15,[a10]4
.L867:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   660  	return DEM_CFG_MAX_NUMBER_EVENT_ENTRY_PRIMARY;      (inlined)
	j	.L297

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   664  }      (inlined)
.L297:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   541  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   542  DEM_INLINE void Dem_EvMemSetEventMemTrigger(uint16_least LocId, Dem_TriggerType Trigger)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   543  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   544     DEM_EVMEM_USEVAR(LocId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   545     DEM_EVMEM_USEVAR(Trigger);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   546  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   547  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   548     Dem_EvMemEventMemory[LocId].Trigger = Trigger;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   549  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   550  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   551  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   552  /* --- Data --- */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   553  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is used to get address of element data and to fill the data block */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   554  DEM_INLINE uint8 *Dem_EvMemGetEventMemDataByPtr(Dem_EvMemEventMemoryType *EventMemory)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   555  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   557  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   558  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   559  DEM_INLINE uint8 *Dem_EvMemGetEventMemData(uint16_least LocId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   560  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   561     return Dem_EvMemGetEventMemDataByPtr(&Dem_EvMemEventMemory[LocId]);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   562  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   563  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   564  DEM_INLINE uint16 Dem_EvMemGetEventMemDataSize(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   565  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   566     return DEM_SIZEOF_VAR(Dem_EvMemEventMemory[0].Data);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   567  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   568  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   569  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   570     Event Memory Status
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   571     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   572  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   573  /* the bits DEM_EVMEM_STSMASK_STORED and DEM_EVMEM_STSMASK_DELETED shall not be set at the same time */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   574  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   575  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedSLC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   576  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   577     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED)) == (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   578  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   579  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   580  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestCompleteTFC(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   581  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   582      return ((Status & DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC) == DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   583  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   584  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   585  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedTFC (uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   586  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   587      return ((Status & DEM_EVMEM_STSMASK_TESTFAILED_TFC) == DEM_EVMEM_STSMASK_TESTFAILED_TFC);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   588  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   589  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   590  DEM_INLINE Dem_boolean_least Dem_EvMemIsStored(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   591  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   592     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   593  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   594  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   595  DEM_INLINE Dem_boolean_least Dem_EvMemIsEmpty(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   596  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   597     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   598  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   599  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   600  DEM_INLINE Dem_boolean_least Dem_EvMemIsDeleted(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   601  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   602     DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   603  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   604  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   605     return (Dem_boolean_least)((Status & DEM_EVMEM_STSMASK_DELETED) != 0u);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   606  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   607     return FALSE;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   608  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   609  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   610  DEM_INLINE uint16_least Dem_EvMemSetToEmpty(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   611  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   612  	return 0u;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   613  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   614  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   615  DEM_INLINE uint16_least Dem_EvMemSetToDelete(uint16_least Status)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   616  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   617  	DEM_EVMEM_USEVAR(Status);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   618  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   619  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   620  	return (Status | DEM_EVMEM_STSMASK_DELETED) & (~DEM_EVMEM_STSMASK_STORED);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   621  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   622      return Dem_EvMemSetToEmpty();
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   623  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   624  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   625  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   626  DEM_INLINE Dem_boolean_least Dem_EvMemGetShadowVisibility(void)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   627  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   628  	return DEM_CFG_EVMEM_SHADOW_ENTRIES_VISIBLE;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   629  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   630  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   631  DEM_INLINE Dem_boolean_least Dem_EvMemIsVisible(uint16_least Status, Dem_boolean_least ShadowEntriesVisible)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   632  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   633  	return (Dem_boolean_least)( ( Dem_EvMemIsStored(Status)) ||
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   634  			                    (!Dem_EvMemIsEmpty (Status) && Dem_EvMemGetShadowVisibility() && ShadowEntriesVisible));
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   635  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   636  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   637  /* ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   638     Event Memory Iterators
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   639     ----------------------------------------------------------------------------
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   640  */
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   641  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   642  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   643  DEM_INLINE uint16_least Dem_EvMemGetEventMemStartLocId(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   644  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   645  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   646  	DEM_EVMEM_USEVAR(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   647  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   648  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   649  	return 0;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   650  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   651  	return Dem_EvMemLocIdList[MemId];
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   652  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   653  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   654  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   655  DEM_INLINE uint16_least Dem_EvMemGetEventMemEndLocId(uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   656  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   657  	DEM_EVMEM_USEVAR(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   658  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   659  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   660  	return DEM_CFG_MAX_NUMBER_EVENT_ENTRY_PRIMARY;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   661  #else
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   662  	return Dem_EvMemLocIdList[MemId+1u];
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   663  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   664  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   665  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   666  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   667  DEM_INLINE void Dem_EvMemEventMemoryLocIteratorNew (uint16_least *LocId, uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   668  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   669      *LocId = Dem_EvMemGetEventMemStartLocId(MemId);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   670  }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   671  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   672  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   673  DEM_INLINE Dem_boolean_least Dem_EvMemEventMemoryLocIteratorIsValid (const uint16_least *LocId, uint16_least MemId)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   674  {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   675      return (Dem_boolean_least)(*LocId < Dem_EvMemGetEventMemEndLocId(MemId));
	ld.w	d15,[a15]
.L1385:
	lt.u	d15,d15,#5
.L1386:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   675      return (Dem_boolean_least)(*LocId < Dem_EvMemGetEventMemEndLocId(MemId));      (inlined)
	j	.L298

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   676  }      (inlined)
.L298:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   780          for (Dem_EvMemEventMemoryLocIteratorNew(&LocId, MemId); Dem_EvMemEventMemoryLocIteratorIsValid(&LocId, MemId);      (inlined)
	jne	d15,#0,.L292

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   778      if (Dem_EvMemIsMemIdValid(MemId))      (inlined)
.L289:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   789      return counter;      (inlined)
	j	.L299

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   790  }      (inlined)
.L299:
	st.b	[a12],d0
.L843:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   808          retVal = E_OK;
	mov	d2,#0
.L287:

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   809      }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   810  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   811  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   812      if (DTCOrigin == DEM_DTC_ORIGIN_SECONDARY_MEMORY)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   813      {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   814          *NumberOfEventMemoryEntries = Dem_EvMemGetNoOfEntries(DEM_CFG_EVMEM_MEMID_SECONDARY);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   815          retVal = E_OK;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   816      }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   817  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   818  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   819  #if (DEM_CFG_MAX_NUMBER_EVENT_ENTRY_MIRROR > 0)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   820      if (DTCOrigin == DEM_DTC_ORIGIN_MIRROR_MEMORY)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   821      {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   822          *NumberOfEventMemoryEntries = Dem_EvMemGetNoOfEntries(DEM_CFG_EVMEM_MEMID_MIRROR);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   823          retVal = E_OK;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   824      }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   825  #elif DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   826      if (DTCOrigin == DEM_DTC_ORIGIN_MIRROR_MEMORY)
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   827      {
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   828          *NumberOfEventMemoryEntries = Dem_EvMemGetNoOfEntries(DEM_CFG_EVMEM_MEMID_SHADOW);
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   829          retVal = E_OK;
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   830      }
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   831  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   832      return retVal;
	j	.L300

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   833  }
.L300:
.L283:
.L279:
	ret
.L835:
	
__Dem_GetNumberOfEventMemoryEntries_function_end:
	.size	Dem_GetNumberOfEventMemoryEntries,__Dem_GetNumberOfEventMemoryEntries_function_end-Dem_GetNumberOfEventMemoryEntries
.L377:
	; End of function
	
	.sdecl	'.bss.Dem_EvMemApi.DemDtcIdCopy',data,cluster('DemDtcIdCopy')
	.sect	'.bss.Dem_EvMemApi.DemDtcIdCopy'
	.align	2
DemDtcIdCopy:	.type	object
	.size	DemDtcIdCopy,2
	.space	2
	.sdecl	'.bss.Dem_EvMemApi.DemDtcCodeCopy',data,cluster('DemDtcCodeCopy')
	.sect	'.bss.Dem_EvMemApi.DemDtcCodeCopy'
	.align	4
DemDtcCodeCopy:	.type	object
	.size	DemDtcCodeCopy,4
	.space	4
	.sdecl	'.bss.Dem_EvMemApi.Dem_EvMemDTCRecord',data,cluster('Dem_EvMemDTCRecord')
	.sect	'.bss.Dem_EvMemApi.Dem_EvMemDTCRecord'
	.global	Dem_EvMemDTCRecord
	.align	4
Dem_EvMemDTCRecord:	.type	object
	.size	Dem_EvMemDTCRecord,28
	.space	28
	.sdecl	'.bss.Dem_EvMemApi.Dem_EvMemFilteredRecordLocId',data,cluster('Dem_EvMemFilteredRecordLocId')
	.sect	'.bss.Dem_EvMemApi.Dem_EvMemFilteredRecordLocId'
	.align	4
Dem_EvMemFilteredRecordLocId:	.type	object
	.size	Dem_EvMemFilteredRecordLocId,4
	.space	4
	.sdecl	'.bss.Dem_EvMemApi.Dem_EvMemFilteredRecordFreezeFrameId',data,cluster('Dem_EvMemFilteredRecordFreezeFrameId')
	.sect	'.bss.Dem_EvMemApi.Dem_EvMemFilteredRecordFreezeFrameId'
	.align	4
Dem_EvMemFilteredRecordFreezeFrameId:	.type	object
	.size	Dem_EvMemFilteredRecordFreezeFrameId,4
	.space	4
	.calls	'Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility','Dem_EvMemGetEventMemoryLocIdOfDtcWithVisibility'
	.calls	'Dem_EvMemApiMainFunction','Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility'
	.calls	'Dem_GetExtendedDataRecordByDTC','Det_ReportError'
	.calls	'Dem_GetExtendedDataRecordByDTC','Dem_DtcIdFromDtcCode'
	.calls	'Dem_GetExtendedDataRecordByDTC','Dem_EnvIsEDRNumberValid'
	.calls	'Dem_GetExtendedDataRecordByDTC','Dem_EvMemReqSyncDataRecord'
	.calls	'Dem_GetExtendedDataRecordByDTC','Dem_EnvRetrieveEDR'
	.calls	'Dem_GetSizeOfExtendedDataRecordByDTC','Det_ReportError'
	.calls	'Dem_GetSizeOfExtendedDataRecordByDTC','Dem_DtcIdFromDtcCode'
	.calls	'Dem_GetSizeOfExtendedDataRecordByDTC','Dem_EnvIsEDRNumberValid'
	.calls	'Dem_GetSizeOfExtendedDataRecordByDTC','Dem_EnvGetSizeOfED'
	.calls	'Dem_GetSizeOfExtendedDataRecordByDTC','Dem_EnvGetSizeOfEDR'
	.calls	'Dem_GetFreezeFrameDataByDTC','Det_ReportError'
	.calls	'Dem_GetFreezeFrameDataByDTC','Dem_DtcIdFromDtcCode'
	.calls	'Dem_GetFreezeFrameDataByDTC','Dem_EvMemReqSyncDataRecord'
	.calls	'Dem_GetFreezeFrameDataByDTC','Dem_EnvRetrieveFF'
	.calls	'Dem_GetSizeOfFreezeFrameByDTC','Det_ReportError'
	.calls	'Dem_GetSizeOfFreezeFrameByDTC','Dem_DtcIdFromDtcCode'
	.calls	'Dem_GetSizeOfFreezeFrameByDTC','Dem_EnvGetSizeOfFF'
	.calls	'Dem_SetFreezeFrameRecordFilter','Dem_EvMemGetEventMemoryLocIdOfDtcWithVisibility'
	.calls	'Dem_GetNextFilteredRecord','Dem_EvMemGetEventMemoryLocIdOfDtcWithVisibility'
	.calls	'Dem_GetNumberOfEventMemoryEntries','Det_ReportError'
	.calls	'Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility','',0
	.calls	'Dem_EvMemReqSyncDataRecord','',0
	.calls	'Dem_EvMemApiMainFunction','',0
	.calls	'Dem_DisableDTCRecordUpdate','',0
	.calls	'Dem_EnableDTCRecordUpdate','',0
	.calls	'Dem_GetExtendedDataRecordByDTC','',8
	.calls	'Dem_GetSizeOfExtendedDataRecordByDTC','',8
	.calls	'Dem_GetFreezeFrameDataByDTC','',8
	.calls	'Dem_GetSizeOfFreezeFrameByDTC','',8
	.calls	'Dem_SetFreezeFrameRecordFilter','',0
	.calls	'Dem_GetNextFilteredRecord','',8
	.calls	'Dem_ReadEventsFromMemory','',0
	.calls	'Dem_GetNextEventFromMemory','',0
	.extern	Det_ReportError
	.extern	Dem_Cfg_Dtc
	.extern	Dem_OpMoState
	.extern	Dem_MapDtcIdToEventId
	.extern	Dem_MapEventIdToDtcId
	.extern	Dem_EvtParam_16
	.extern	Dem_EvMemEventMemory
	.extern	Dem_EvMemMapOrigin2Id
	.extern	Dem_EvMemGetEventMemoryLocIdOfDtcWithVisibility
	.extern	Dem_EnvIsEDRNumberValid
	.extern	Dem_EnvRetrieveEDR
	.extern	Dem_EnvRetrieveFF
	.extern	Dem_EnvGetSizeOfEDR
	.extern	Dem_EnvGetSizeOfED
	.extern	Dem_EnvGetSizeOfFF
	.extern	Dem_AllDTCsState
	.extern	Dem_DtcIdFromDtcCode
	.calls	'Dem_GetNumberOfEventMemoryEntries','',8
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L330:
	.word	31518
	.half	3
	.word	.L331
	.byte	4
.L329:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L332
.L413:
	.byte	2
	.byte	'unsigned char',0,1,8
.L516:
	.byte	3
	.word	144
	.byte	4
	.byte	'rba_DiagLib_Bit8SetBit',0,3,1,36,19,1,1,5
	.byte	'buffer',0,1,36,49
	.word	161
	.byte	5
	.byte	'bit_position',0,1,36,63
	.word	144
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8ClearBit',0,3,1,42,19,1,1,5
	.byte	'buffer',0,1,42,51
	.word	161
	.byte	5
	.byte	'bit_position',0,1,42,65
	.word	144
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8OverwriteBit',0,3,1,48,19,1,1,5
	.byte	'buffer',0,1,48,55
	.word	161
	.byte	5
	.byte	'bit_position',0,1,48,69
	.word	144
	.byte	5
	.byte	'will_bit_be_set',0,1,48,91
	.word	144
	.byte	7,6,6,0,0
.L673:
	.byte	8
	.byte	'rba_DiagLib_Bit8GetSingleBit',0,3,1,60,20
	.word	144
	.byte	1,1
.L674:
	.byte	5
	.byte	'value',0,1,60,55
	.word	144
.L676:
	.byte	5
	.byte	'bit_position',0,1,60,68
	.word	144
.L678:
	.byte	6,0
.L666:
	.byte	8
	.byte	'rba_DiagLib_Bit8IsBitSet',0,3,1,64,22
	.word	144
	.byte	1,1
.L668:
	.byte	5
	.byte	'value',0,1,64,53
	.word	144
.L670:
	.byte	5
	.byte	'bit_position',0,1,64,66
	.word	144
.L672:
	.byte	7,6,0,0,8
	.byte	'rba_DiagLib_Bit8GetBits',0,3,1,69,20
	.word	144
	.byte	1,1,5
	.byte	'value',0,1,69,50
	.word	144
	.byte	5
	.byte	'bit_position',0,1,69,63
	.word	144
	.byte	5
	.byte	'number_of_bits',0,1,69,83
	.word	144
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8ClearBits',0,3,1,77,19,1,1,5
	.byte	'value',0,1,77,52
	.word	161
	.byte	5
	.byte	'bit_position',0,1,77,65
	.word	144
	.byte	5
	.byte	'number_of_bits',0,1,77,85
	.word	144
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8OverwriteBits',0,3,1,83,19,1,1,5
	.byte	'value',0,1,83,56
	.word	161
	.byte	5
	.byte	'bit_position',0,1,83,69
	.word	144
	.byte	5
	.byte	'number_of_bits',0,1,83,89
	.word	144
	.byte	5
	.byte	'newValue',0,1,83,111
	.word	144
	.byte	7,6,0,0
.L520:
	.byte	2
	.byte	'unsigned short int',0,2,7
.L416:
	.byte	3
	.word	861
	.byte	4
	.byte	'rba_DiagLib_Bit16SetBit',0,3,2,36,19,1,1,5
	.byte	'buffer',0,2,36,51
	.word	883
	.byte	5
	.byte	'bit_position',0,2,36,65
	.word	144
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit16ClearBit',0,3,2,42,19,1,1,5
	.byte	'buffer',0,2,42,53
	.word	883
	.byte	5
	.byte	'bit_position',0,2,42,67
	.word	144
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit16GetSingleBit',0,3,2,60,21
	.word	861
	.byte	1,1,5
	.byte	'value',0,2,60,58
	.word	861
	.byte	5
	.byte	'bit_position',0,2,60,71
	.word	144
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit16IsBitSet',0,3,2,65,22
	.word	144
	.byte	1,1,5
	.byte	'value',0,2,65,55
	.word	861
	.byte	5
	.byte	'bit_position',0,2,65,68
	.word	144
	.byte	7,6,0,0
.L607:
	.byte	8
	.byte	'rba_DiagLib_Bit16GetBits',0,3,2,70,21
	.word	861
	.byte	1,1
.L609:
	.byte	5
	.byte	'value',0,2,70,53
	.word	861
.L611:
	.byte	5
	.byte	'bit_position',0,2,70,66
	.word	144
.L613:
	.byte	5
	.byte	'number_of_bits',0,2,70,86
	.word	144
.L615:
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit16ClearBits',0,3,2,78,19,1,1,5
	.byte	'value',0,2,78,54
	.word	883
	.byte	5
	.byte	'bit_position',0,2,78,67
	.word	144
	.byte	5
	.byte	'number_of_bits',0,2,78,87
	.word	144
	.byte	6,0
.L623:
	.byte	2
	.byte	'unsigned int',0,4,7
.L514:
	.byte	3
	.word	1372
	.byte	4
	.byte	'rba_DiagLib_Bit32SetBit',0,3,3,36,19,1,1,5
	.byte	'buffer',0,3,36,51
	.word	1388
	.byte	5
	.byte	'bit_position',0,3,36,65
	.word	144
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit32ClearBit',0,3,3,42,19,1,1,5
	.byte	'buffer',0,3,42,53
	.word	1388
	.byte	5
	.byte	'bit_position',0,3,42,67
	.word	144
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit32GetSingleBit',0,3,3,60,21
	.word	1372
	.byte	1,1,5
	.byte	'value',0,3,60,58
	.word	1372
	.byte	5
	.byte	'bit_position',0,3,60,71
	.word	144
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit32IsBitSet',0,3,3,65,22
	.word	144
	.byte	1,1,5
	.byte	'value',0,3,65,55
	.word	1372
	.byte	5
	.byte	'bit_position',0,3,65,68
	.word	144
	.byte	7,6,0,0,4
	.byte	'rba_DiagLib_Bit32ClearBits',0,3,3,78,19,1,1,5
	.byte	'value',0,3,78,54
	.word	1388
	.byte	5
	.byte	'bit_position',0,3,78,67
	.word	144
	.byte	5
	.byte	'number_of_bits',0,3,78,87
	.word	144
	.byte	6,0,8
	.byte	'rba_BswSrv_ByteOrderSwap32',0,3,4,125,21
	.word	1372
	.byte	1,1,5
	.byte	'Input_u32',0,4,125,55
	.word	1372
	.byte	6,0,8
	.byte	'rba_BswSrv_ByteOrderSwap16',0,3,4,150,1,21
	.word	861
	.byte	1,1,5
	.byte	'Input_u16',0,4,150,1,55
	.word	861
	.byte	6,0,9
	.word	144
	.byte	3
	.word	1899
	.byte	4
	.byte	'rba_DiagLib_MemUtils_MemCpy',0,3,5,20,19,1,1,5
	.byte	'xDest_p',0,5,20,54
	.word	161
	.byte	5
	.byte	'xSrc_pc',0,5,20,76
	.word	1904
	.byte	5
	.byte	'numBytes_s32',0,5,20,92
	.word	1372
	.byte	6,0,2
	.byte	'int',0,4,5,4
	.byte	'rba_DiagLib_MemUtils_MemSet',0,3,5,26,19,1,1,5
	.byte	'xDest_pv',0,5,26,54
	.word	161
	.byte	5
	.byte	'xPattern_u32',0,5,26,71
	.word	1999
	.byte	5
	.byte	'numBytes_s32',0,5,26,92
	.word	1372
	.byte	6,0
.L463:
	.byte	8
	.byte	'Dem_LibGetParamUI8',0,3,6,36,18
	.word	144
	.byte	1,1
.L464:
	.byte	5
	.byte	'parameter',0,6,36,44
	.word	144
.L466:
	.byte	6,0,8
	.byte	'Dem_LibGetParamBool',0,3,6,41,20
	.word	144
	.byte	1,1,5
	.byte	'parameter',0,6,41,49
	.word	144
	.byte	6,0
.L566:
	.byte	8
	.byte	'Dem_Cfg_Dtc_GetDtcCode',0,3,7,99,30
	.word	1372
	.byte	1,1
.L567:
	.byte	5
	.byte	'indx',0,7,99,67
	.word	861
.L569:
	.byte	6,0
.L640:
	.byte	8
	.byte	'Dem_EvMemIsDtcKindValid',0,3,8,47,30
	.word	144
	.byte	1,1
.L642:
	.byte	5
	.byte	'DTCKind',0,8,47,71
	.word	144
.L644:
	.byte	6,0,3
	.word	144
.L645:
	.byte	8
	.byte	'Dem_EvMemIsDtcOriginValid',0,3,8,53,30
	.word	144
	.byte	1,1
.L647:
	.byte	5
	.byte	'DTCOrigin',0,8,53,77
	.word	2305
.L649:
	.byte	6,0,4
	.byte	'Dem_BitArraySetBit',0,3,9,33,17,1,1,5
	.byte	'buffer',0,9,33,36
	.word	1388
	.byte	5
	.byte	'bit_position',0,9,33,75
	.word	1372
	.byte	6,0,4
	.byte	'Dem_BitArrayClearBit',0,3,9,46,17,1,1,5
	.byte	'buffer',0,9,46,38
	.word	1388
	.byte	5
	.byte	'bit_position',0,9,46,77
	.word	1372
	.byte	6,0,4
	.byte	'Dem_BitArrayOverwriteBit',0,3,9,61,17,1,1,5
	.byte	'buffer',0,9,61,42
	.word	1388
	.byte	5
	.byte	'bit_position',0,9,62,25
	.word	1372
	.byte	5
	.byte	'will_bit_be_set',0,9,62,57
	.word	144
	.byte	7,6,6,0,0,9
	.word	1372
	.byte	3
	.word	2594
	.byte	8
	.byte	'Dem_BitArrayIsBitSet',0,3,9,75,30
	.word	144
	.byte	1,1,5
	.byte	'buffer',0,9,75,51
	.word	2599
	.byte	5
	.byte	'bit_position',0,9,75,95
	.word	1372
	.byte	6,0
.L656:
	.byte	8
	.byte	'Dem_isDtcIdValid',0,3,10,152,1,30
	.word	144
	.byte	1,1
.L659:
	.byte	5
	.byte	'id',0,10,152,1,62
	.word	861
.L661:
	.byte	6,0
.L478:
	.byte	8
	.byte	'Dem_DtcIdFromEventId',0,3,10,158,1,27
	.word	861
	.byte	1,1
.L479:
	.byte	5
	.byte	'id',0,10,158,1,65
	.word	861
.L481:
	.byte	6,0
.L683:
	.byte	8
	.byte	'Dem_DtcIdGetEventId',0,3,10,166,1,28
	.word	861
	.byte	1,1
.L684:
	.byte	5
	.byte	'dtcid',0,10,166,1,63
	.word	861
.L686:
	.byte	6,0
.L679:
	.byte	8
	.byte	'Dem_DtcIdGetFirstEventId',0,3,10,174,1,28
	.word	861
	.byte	1,1
.L680:
	.byte	5
	.byte	'dtcid',0,10,174,1,68
	.word	861
.L682:
	.byte	7,6,0,0,8
	.byte	'Dem_DtcGroupIdIsValid',0,3,10,252,1,30
	.word	144
	.byte	1,1,5
	.byte	'dtcGroupID',0,10,252,1,72
	.word	144
	.byte	6,0,9
	.word	861
	.byte	3
	.word	2925
	.byte	10,10,171,2,9,8,11
	.byte	'it',0
	.word	2930
	.byte	4,2,35,0,11
	.byte	'end',0
	.word	2930
	.byte	4,2,35,4,0,3
	.word	2935
	.byte	4
	.byte	'Dem_EventIdListIteratorNewFromDtcId',0,3,10,177,2,17,1,1,5
	.byte	'it',0,10,177,2,78
	.word	2967
	.byte	5
	.byte	'dtcid',0,10,177,2,96
	.word	861
	.byte	7,6,0,0,9
	.word	2935
	.byte	3
	.word	3047
	.byte	8
	.byte	'Dem_EventIdListIteratorIsValid',0,3,10,193,2,30
	.word	144
	.byte	1,1,5
	.byte	'it',0,10,193,2,92
	.word	3052
	.byte	6,0,4
	.byte	'Dem_EventIdListIteratorNext',0,3,10,198,2,17,1,1,5
	.byte	'it',0,10,198,2,70
	.word	2967
	.byte	6,0,8
	.byte	'Dem_EventIdListIteratorCurrent',0,3,10,203,2,28
	.word	861
	.byte	1,1,5
	.byte	'it',0,10,203,2,90
	.word	3052
	.byte	6,0,8
	.byte	'Dem_EnCoAreAllFulfilled',0,3,11,32,30
	.word	144
	.byte	1,1,5
	.byte	'enableConditionList',0,11,32,68
	.word	144
	.byte	6,0,8
	.byte	'Dem_NvMGetNvMBlocKId',0,3,12,49,28
	.word	861
	.byte	1,1,5
	.byte	'id',0,12,49,68
	.word	144
	.byte	6,0,4
	.byte	'Dem_NvMStartClear',0,3,12,138,1,17,1,1,6,0,8
	.byte	'rba_DiagLib_ByteOrderUtils_SwapByteOrderS',0,3,13,36,21
	.word	861
	.byte	1,1,5
	.byte	'val',0,13,36,70
	.word	861
	.byte	7,6,0,0,8
	.byte	'rba_DiagLib_ByteOrderUtils_SwapByteOrderL',0,3,13,41,21
	.word	1372
	.byte	1,1,5
	.byte	'val',0,13,41,70
	.word	1372
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetStoreTestFailedToNextOC',0,3,14,55,22
	.word	144
	.byte	1,1,5
	.byte	'indx',0,14,55,78
	.word	861
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetEventIsStoredInPrimary',0,3,14,75,22
	.word	144
	.byte	1,1,5
	.byte	'indx',0,14,75,77
	.word	861
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetEventIsStoredInSecondary',0,3,14,82,22
	.word	144
	.byte	1,1,5
	.byte	'indx',0,14,82,79
	.word	861
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetEventIsStoredInMirror',0,3,14,89,22
	.word	144
	.byte	1,1,5
	.byte	'indx',0,14,89,76
	.word	861
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetAgingAllowed',0,3,14,95,22
	.word	144
	.byte	1,1,5
	.byte	'indx',0,14,95,67
	.word	861
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetOperationCycleID',0,3,14,122,20
	.word	144
	.byte	1,1,5
	.byte	'indx',0,14,122,69
	.word	861
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetAgingCycleID',0,3,14,129,1,20
	.word	144
	.byte	1,1,5
	.byte	'indx',0,14,129,1,65
	.word	861
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetFailureCycleID',0,3,14,136,1,20
	.word	144
	.byte	1,1,5
	.byte	'indx',0,14,136,1,67
	.word	861
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetDebounceMethodIndex',0,3,14,149,1,20
	.word	144
	.byte	1,1,5
	.byte	'indx',0,14,149,1,72
	.word	861
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetDebounceParamSettingIndex',0,3,14,155,1,21
	.word	861
	.byte	1,1,5
	.byte	'indx',0,14,155,1,79
	.word	861
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetAgingThreshold',0,3,14,168,1,20
	.word	144
	.byte	1,1,5
	.byte	'indx',0,14,168,1,67
	.word	861
	.byte	6,0
.L603:
	.byte	8
	.byte	'Dem_EvtParam_GetMaxNumberFreezeFrameRecords',0,3,14,194,1,20
	.word	144
	.byte	1,1
.L604:
	.byte	5
	.byte	'indx',0,14,194,1,80
	.word	861
.L606:
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetEnableConditions',0,3,14,208,1,27
	.word	144
	.byte	1,1,5
	.byte	'indx',0,14,208,1,76
	.word	861
	.byte	6,0,2
	.byte	'short int',0,2,5,8
	.byte	'Dem_EvtGetDebounceLevel',0,3,15,193,1,19
	.word	4323
	.byte	1,1,5
	.byte	'EventId',0,15,193,1,60
	.word	861
	.byte	6,0,8
	.byte	'Dem_EvtGetLastReportedEvent',0,3,15,219,1,32
	.word	144
	.byte	1,1,5
	.byte	'EventId',0,15,219,1,77
	.word	861
	.byte	6,0,4
	.byte	'Dem_EvtIncreaseGlobalInitMonitoringCounter',0,3,15,227,3,17,1,1,6,0,4
	.byte	'Dem_EvtSetAnyInitMonitoring',0,3,15,233,3,17,1,1,5
	.byte	'reason',0,15,233,3,72
	.word	144
	.byte	7,6,0,0,8
	.byte	'Dem_EvtIsSuppressed',0,3,15,244,4,30
	.word	144
	.byte	1,1,5
	.byte	'EventId',0,15,244,4,67
	.word	861
	.byte	7,6,0,0,3
	.word	144
	.byte	4
	.byte	'Dem_EnvSetTrigger',0,3,16,17,17,1,1,5
	.byte	'trigger',0,16,17,52
	.word	4612
	.byte	5
	.byte	'trigger2set',0,16,17,77
	.word	144
	.byte	6,0
.L595:
	.byte	8
	.byte	'Dem_EnvIsAnyTriggerSet',0,3,16,22,30
	.word	144
	.byte	1,1
.L597:
	.byte	5
	.byte	'trigger2test',0,16,22,69
	.word	144
.L599:
	.byte	6,0
.L586:
	.byte	8
	.byte	'Dem_EnvIsTriggerSet',0,3,16,27,30
	.word	144
	.byte	1,1
.L587:
	.byte	5
	.byte	'trigger',0,16,27,66
	.word	144
.L589:
	.byte	5
	.byte	'trigger2test',0,16,27,91
	.word	144
.L591:
	.byte	7,6,0,0,8
	.byte	'Dem_GetSmallerTrigger',0,3,16,32,28
	.word	144
	.byte	1,1,5
	.byte	'trigger',0,16,32,66
	.word	144
	.byte	6,0
.L418:
	.byte	2
	.byte	'unsigned long int',0,4,7,8
	.byte	'Dem_DebHandleDebounceAction__processBits',0,3,17,101,30
	.word	144
	.byte	1,1,5
	.byte	'EventId',0,17,101,87
	.word	861
	.byte	5
	.byte	'debAction',0,17,101,120
	.word	4860
	.byte	6,0,12
	.word	861
	.byte	3
	.word	4969
	.byte	4
	.byte	'Dem_ClientResultType_setResult',0,3,18,27,17,1,1,5
	.byte	'result',0,18,27,79
	.word	4974
	.byte	5
	.byte	'request',0,18,27,109
	.word	861
	.byte	5
	.byte	'newResult',0,18,27,133,1
	.word	144
	.byte	6,0,12
	.word	861
	.byte	3
	.word	5069
	.byte	4
	.byte	'Dem_ClientRequestType_setRequest',0,3,18,65,17,1,1,5
	.byte	'request',0,18,65,82
	.word	5074
	.byte	5
	.byte	'newRequest',0,18,65,97
	.word	144
	.byte	6,0,3
	.word	1372
	.byte	4
	.byte	'Dem_ClientSelectionType_invalidateSelectionResult',0,3,18,151,1,17,1,1,5
	.byte	'selection',0,18,151,1,93
	.word	5156
	.byte	6,0,8
	.byte	'Dem_ClientSelectionType_getTypeOfSelection',0,3,18,168,1,18
	.word	144
	.byte	1,1,5
	.byte	'selection',0,18,168,1,86
	.word	1372
	.byte	6,0,4
	.byte	'Dem_ClientClearMachine_SetMachineActiveClient',0,3,19,53,17,1,1,5
	.byte	'ClientId',0,19,53,80
	.word	144
	.byte	6,0,4
	.byte	'Dem_ClientClearMachine_SetMachineState',0,3,19,68,17,1,1,5
	.byte	'state',0,19,68,62
	.word	144
	.byte	6,0,8
	.byte	'Dem_ClientClearMachine_isClearDtcGroupAllDtcsSelected',0,3,19,78,20
	.word	144
	.byte	1,1,5
	.byte	'ClientId',0,19,78,91
	.word	144
	.byte	7,6,6,6,6,0,0
.L849:
	.byte	8
	.byte	'Dem_EvMemIsMemIdValid',0,3,20,103,30
	.word	144
	.byte	1,1
.L851:
	.byte	5
	.byte	'MemId',0,20,103,65
	.word	4860
.L853:
	.byte	6,0
.L929:
	.byte	8
	.byte	'Dem_EvMemIsEventMemLocIdValid',0,3,20,112,30
	.word	144
	.byte	1,1
.L931:
	.byte	5
	.byte	'LocId',0,20,112,73
	.word	4860
.L933:
	.byte	6,0,10,21,133,1,3,4,11
	.byte	'Status',0
	.word	861
	.byte	2,2,35,0,11
	.byte	'EventId',0
	.word	861
	.byte	2,2,35,2,0,13,21,131,1,9,4,11
	.byte	'Data',0
	.word	5645
	.byte	4,2,35,0,0,14,7
	.word	144
	.byte	15,6,0,10,21,144,1,9,20,11
	.byte	'Hdr',0
	.word	5685
	.byte	4,2,35,0,11
	.byte	'Data',0
	.word	5706
	.byte	7,2,35,4,11
	.byte	'FailureCounter',0
	.word	144
	.byte	1,2,35,11,11
	.byte	'FreezeFrameCounter',0
	.word	144
	.byte	1,2,35,12,11
	.byte	'AgingCounter',0
	.word	144
	.byte	1,2,35,13,11
	.byte	'OccurrenceCounter',0
	.word	144
	.byte	1,2,35,14,11
	.byte	'Trigger',0
	.word	144
	.byte	1,2,35,15,11
	.byte	'TimeId',0
	.word	1372
	.byte	4,2,35,16,0,9
	.word	5715
	.byte	3
	.word	5883
.L437:
	.byte	8
	.byte	'Dem_EvMemGetEventMemStatusByPtr',0,3,20,134,1,25
	.word	4860
	.byte	1,1
.L439:
	.byte	5
	.byte	'EventMemory',0,20,134,1,89
	.word	5888
.L441:
	.byte	6,0
.L432:
	.byte	8
	.byte	'Dem_EvMemGetEventMemStatus',0,3,20,139,1,25
	.word	4860
	.byte	1,1
.L434:
	.byte	5
	.byte	'LocId',0,20,139,1,65
	.word	4860
.L436:
	.byte	7,6,0,0
.L473:
	.byte	8
	.byte	'Dem_EvMemGetEventMemEventIdByPtr',0,3,20,152,1,28
	.word	861
	.byte	1,1
.L475:
	.byte	5
	.byte	'EventMemory',0,20,152,1,93
	.word	5888
.L477:
	.byte	6,0
.L468:
	.byte	8
	.byte	'Dem_EvMemGetEventMemEventId',0,3,20,157,1,28
	.word	861
	.byte	1,1
.L470:
	.byte	5
	.byte	'LocId',0,20,157,1,69
	.word	4860
.L472:
	.byte	7,6,0,0,8
	.byte	'Dem_EvMemGetEventMemTimeIdByPtr',0,3,20,170,1,19
	.word	1372
	.byte	1,1,5
	.byte	'EventMemory',0,20,170,1,83
	.word	5888
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemDtcStatusByPtr',0,3,20,188,1,18
	.word	144
	.byte	1,1,5
	.byte	'EventMemory',0,20,188,1,85
	.word	5888
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemFailureCounterByPtr',0,3,20,216,1,24
	.word	4860
	.byte	1,1,5
	.byte	'EventMemory',0,20,216,1,96
	.word	5888
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemOccurrenceCounterByPtr',0,3,20,233,1,25
	.word	4860
	.byte	1,1,5
	.byte	'EventMemory',0,20,233,1,100
	.word	5888
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemAgingCounterByPtr',0,3,20,133,2,25
	.word	4860
	.byte	1,1,5
	.byte	'EventMemory',0,20,133,2,95
	.word	5888
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemAgingCounter',0,3,20,144,2,25
	.word	4860
	.byte	1,1,5
	.byte	'LocId',0,20,144,2,71
	.word	4860
	.byte	7,6,0,0,4
	.byte	'Dem_EvMemSetEventMemAgingCounter',0,3,20,150,2,17,1,1,5
	.byte	'LocId',0,20,150,2,63
	.word	4860
	.byte	5
	.byte	'AgingCounter',0,20,150,2,83
	.word	4860
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr',0,3,20,161,2,25
	.word	4860
	.byte	1,1,5
	.byte	'EventMemory',0,20,161,2,103
	.word	5888
	.byte	6,0,2
	.byte	'char',0,1,6,8
	.byte	'Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr',0,3,20,213,2,18
	.word	6733
	.byte	1,1,5
	.byte	'EventMemory',0,20,213,2,92
	.word	5888
	.byte	6,0,8
	.byte	'Dem_EvMemGetMaxFdcSinceLastClearByPtr',0,3,20,224,2,18
	.word	6733
	.byte	1,1,5
	.byte	'EventMemory',0,20,224,2,88
	.word	5888
	.byte	6,0
.L490:
	.byte	8
	.byte	'Dem_EvMemGetEventMemFreezeFrameCounterByPtr',0,3,20,238,3,25
	.word	4860
	.byte	1,1
.L492:
	.byte	5
	.byte	'EventMemory',0,20,238,3,101
	.word	5888
.L494:
	.byte	6,0
.L482:
	.byte	8
	.byte	'Dem_EvMemGetEventMemFreezeFrameCounter',0,3,20,250,3,25
	.word	4860
	.byte	1,1
.L484:
	.byte	5
	.byte	'LocId',0,20,250,3,77
	.word	4860
.L486:
	.byte	7,6,0,0
.L581:
	.byte	8
	.byte	'Dem_EvMemGetEventMemTriggerByPtr',0,3,20,141,4,28
	.word	144
	.byte	1,1
.L583:
	.byte	5
	.byte	'EventMemory',0,20,141,4,93
	.word	5888
.L585:
	.byte	6,0
.L576:
	.byte	8
	.byte	'Dem_EvMemGetEventMemTrigger',0,3,20,153,4,28
	.word	144
	.byte	1,1
.L578:
	.byte	5
	.byte	'LocId',0,20,153,4,69
	.word	4860
.L580:
	.byte	7,6,0,0,3
	.word	5715
.L716:
	.byte	8
	.byte	'Dem_EvMemGetEventMemDataByPtr',0,3,20,170,4,19
	.word	161
	.byte	1,1
.L717:
	.byte	5
	.byte	'EventMemory',0,20,170,4,75
	.word	7167
.L719:
	.byte	6,0
.L452:
	.byte	8
	.byte	'Dem_EvMemIsStored',0,3,20,206,4,30
	.word	144
	.byte	1,1
.L454:
	.byte	5
	.byte	'Status',0,20,206,4,61
	.word	4860
.L456:
	.byte	6,0
.L457:
	.byte	8
	.byte	'Dem_EvMemIsEmpty',0,3,20,211,4,30
	.word	144
	.byte	1,1
.L459:
	.byte	5
	.byte	'Status',0,20,211,4,60
	.word	4860
.L461:
	.byte	6,0,8
	.byte	'Dem_EvMemSetToEmpty',0,3,20,226,4,25
	.word	4860
	.byte	1,1,6,0
.L442:
	.byte	8
	.byte	'Dem_EvMemGetShadowVisibility',0,3,20,242,4,30
	.word	144
	.byte	1,1
.L443:
	.byte	6,0
.L444:
	.byte	8
	.byte	'Dem_EvMemIsVisible',0,3,20,247,4,30
	.word	144
	.byte	1,1
.L447:
	.byte	5
	.byte	'Status',0,20,247,4,62
	.word	4860
.L449:
	.byte	5
	.byte	'ShadowEntriesVisible',0,20,247,4,88
	.word	144
.L451:
	.byte	7,6,6,6,0,0
.L428:
	.byte	8
	.byte	'Dem_EvMemGetEventMemStartLocId',0,3,20,131,5,25
	.word	4860
	.byte	1,1
.L429:
	.byte	5
	.byte	'MemId',0,20,131,5,69
	.word	4860
.L431:
	.byte	6,0
.L507:
	.byte	8
	.byte	'Dem_EvMemGetEventMemEndLocId',0,3,20,143,5,25
	.word	4860
	.byte	1,1
.L508:
	.byte	5
	.byte	'MemId',0,20,143,5,67
	.word	4860
.L510:
	.byte	6,0,3
	.word	4860
.L420:
	.byte	4
	.byte	'Dem_EvMemEventMemoryLocIteratorNew',0,3,20,155,5,17,1,1
.L423:
	.byte	5
	.byte	'LocId',0,20,155,5,67
	.word	7610
.L425:
	.byte	5
	.byte	'MemId',0,20,155,5,87
	.word	4860
.L427:
	.byte	7,6,0,0,9
	.word	4860
	.byte	3
	.word	7692
.L501:
	.byte	8
	.byte	'Dem_EvMemEventMemoryLocIteratorIsValid',0,3,20,161,5,30
	.word	144
	.byte	1,1
.L502:
	.byte	5
	.byte	'LocId',0,20,161,5,90
	.word	7697
.L504:
	.byte	5
	.byte	'MemId',0,20,161,5,110
	.word	4860
.L506:
	.byte	7,6,0,0
.L495:
	.byte	4
	.byte	'Dem_EvMemEventMemoryLocIteratorNext',0,3,20,167,5,17,1,1
.L496:
	.byte	5
	.byte	'LocId',0,20,167,5,68
	.word	7610
.L498:
	.byte	5
	.byte	'MemId',0,20,167,5,88
	.word	4860
.L500:
	.byte	6,0
.L912:
	.byte	4
	.byte	'Dem_EvMemEventMemoryLocIteratorInvalidate',0,3,20,173,5,17,1,1
.L915:
	.byte	5
	.byte	'LocId',0,20,173,5,74
	.word	7610
.L917:
	.byte	5
	.byte	'MemId',0,20,173,5,94
	.word	4860
.L919:
	.byte	7,6,0,0,4
	.byte	'Dem_EvMemEventMemoryIteratorNew',0,3,20,179,5,17,1,1,5
	.byte	'MemId',0,20,179,5,63
	.word	7610
	.byte	6,0,8
	.byte	'Dem_EvMemEventMemoryIteratorIsValid',0,3,20,184,5,30
	.word	144
	.byte	1,1,5
	.byte	'MemId',0,20,184,5,86
	.word	7697
	.byte	6,0,4
	.byte	'Dem_EvMemEventMemoryIteratorNext',0,3,20,189,5,17,1,1,5
	.byte	'MemId',0,20,189,5,64
	.word	7610
	.byte	6,0,8
	.byte	'Dem_EvMemIsEdgeTrigger',0,3,20,247,5,30
	.word	144
	.byte	1,1,5
	.byte	'StatusOld',0,20,247,5,66
	.word	4860
	.byte	5
	.byte	'StatusNew',0,20,247,5,90
	.word	4860
	.byte	5
	.byte	'Trigger',0,20,247,5,114
	.word	4860
	.byte	6,0,8
	.byte	'Dem_EvMemGetRamStsMask',0,3,20,154,7,25
	.word	4860
	.byte	1,1,5
	.byte	'EventId',0,20,154,7,64
	.word	861
	.byte	7,6,0,0,8
	.byte	'Dem_EvMemGetCurrentAgingCycleCounterInt',0,3,22,20,25
	.word	4860
	.byte	1,1,5
	.byte	'EventId',0,22,20,81
	.word	861
	.byte	6,0,8
	.byte	'Dem_EvMemIsAged',0,3,22,61,30
	.word	144
	.byte	1,1,5
	.byte	'EventId',0,22,61,62
	.word	861
	.byte	5
	.byte	'LocId',0,22,61,84
	.word	4860
	.byte	5
	.byte	'StatusNew',0,22,61,104
	.word	4860
	.byte	6,0
.L902:
	.byte	8
	.byte	'Dem_EvMemIsOriginSupported',0,3,23,35,20
	.word	144
	.byte	1,1
.L904:
	.byte	5
	.byte	'origin',0,23,35,66
	.word	144
.L906:
	.byte	6,0
.L898:
	.byte	8
	.byte	'Dem_EvMemGetEvMemIdFromOrigin',0,3,23,40,18
	.word	144
	.byte	1,1
.L899:
	.byte	5
	.byte	'origin',0,23,40,67
	.word	144
.L901:
	.byte	6,0,8
	.byte	'Dem_EvMemGetMemIdForDTCOrigin',0,3,23,150,1,25
	.word	4860
	.byte	1,1,5
	.byte	'DTCOrigin',0,23,150,1,73
	.word	144
	.byte	6,0,8
	.byte	'Dem_EvMemGetMemIdForEvent',0,3,23,222,1,25
	.word	4860
	.byte	1,1,5
	.byte	'EventId',0,23,222,1,67
	.word	861
	.byte	7,6,0,0,9
	.word	161
	.byte	3
	.word	8656
	.byte	4
	.byte	'Dem_EnvInsertPadding',0,3,24,46,17,1,1,5
	.byte	'start',0,24,46,52
	.word	8661
	.byte	5
	.byte	'size',0,24,46,65
	.word	144
	.byte	7,6,0,0,3
	.word	161
	.byte	10,25,13,9,16,11
	.byte	'eventId',0
	.word	861
	.byte	2,2,35,0,11
	.byte	'debug0',0
	.word	1372
	.byte	4,2,35,4,11
	.byte	'debug1',0
	.word	1372
	.byte	4,2,35,8,11
	.byte	'evMemLocation',0
	.word	7167
	.byte	4,2,35,12,0,9
	.word	8730
	.byte	3
	.word	8808
	.byte	4
	.byte	'Dem_EnvDACapture',0,3,24,51,17,1,1,5
	.byte	'dataElementId',0,24,51,40
	.word	144
	.byte	5
	.byte	'start',0,24,51,63
	.word	8725
	.byte	5
	.byte	'end',0,24,51,83
	.word	1904
	.byte	5
	.byte	'internalEnvData',0,24,51,115
	.word	8813
	.byte	7,6,6,0,0,3
	.word	1904
	.byte	4
	.byte	'Dem_EnvDACopy',0,3,24,86,17,1,1,5
	.byte	'dataElementId',0,24,86,37
	.word	144
	.byte	5
	.byte	'start',0,24,86,60
	.word	8725
	.byte	5
	.byte	'end',0,24,86,80
	.word	1904
	.byte	5
	.byte	'src',0,24,86,99
	.word	8919
	.byte	7,6,0,0,4
	.byte	'Dem_EnvDASkip',0,3,24,95,17,1,1,5
	.byte	'dataElementId',0,24,95,37
	.word	144
	.byte	5
	.byte	'start',0,24,95,60
	.word	8725
	.byte	5
	.byte	'end',0,24,95,80
	.word	1904
	.byte	5
	.byte	'src',0,24,95,99
	.word	8919
	.byte	6,0,8
	.byte	'Dem_EnvDARetrieve',0,3,24,105,30
	.word	144
	.byte	1,1,5
	.byte	'dataElementId',0,24,105,54
	.word	144
	.byte	5
	.byte	'start',0,24,106,11
	.word	8725
	.byte	5
	.byte	'end',0,24,107,16
	.word	1904
	.byte	5
	.byte	'src',0,24,108,17
	.word	8919
	.byte	5
	.byte	'internalEnvData',0,24,109,30
	.word	8813
	.byte	7,6,6,0,0,8
	.byte	'Dem_EnvDAGetSizeOf',0,3,24,149,1,18
	.word	144
	.byte	1,1,5
	.byte	'dataElementId',0,24,149,1,43
	.word	144
	.byte	6,0,8
	.byte	'Dem_EnvEDRGetRecordNumber',0,3,26,29,18
	.word	144
	.byte	1,1,5
	.byte	'extDataRecId',0,26,29,51
	.word	144
	.byte	6,0,8
	.byte	'Dem_EnvEDRGetUpdate',0,3,26,34,20
	.word	144
	.byte	1,1,5
	.byte	'extDataRecId',0,26,34,47
	.word	144
	.byte	6,0,8
	.byte	'Dem_EnvEDRGetRecordTrigger',0,3,26,40,28
	.word	144
	.byte	1,1,5
	.byte	'extDataRecId',0,26,40,62
	.word	144
	.byte	6,0,4
	.byte	'Dem_EnvEDRCapture',0,3,26,45,17,1,1,5
	.byte	'extDataRecId',0,26,45,42
	.word	144
	.byte	5
	.byte	'start',0,26,45,64
	.word	8725
	.byte	5
	.byte	'end',0,26,45,84
	.word	1904
	.byte	5
	.byte	'internalEnvData',0,26,45,116
	.word	8813
	.byte	7,6,0,0,10,16,7,9,4,11
	.byte	'currentTrigger',0
	.word	144
	.byte	1,2,35,0,11
	.byte	'storedTrigger',0
	.word	144
	.byte	1,2,35,1,11
	.byte	'matchingTrigger',0
	.word	144
	.byte	1,2,35,2,0,3
	.word	9541
	.byte	4
	.byte	'Dem_EnvEDRCopyRaw',0,3,26,59,17,1,1,5
	.byte	'extDataRecId',0,26,59,42
	.word	144
	.byte	5
	.byte	'start',0,26,59,64
	.word	8725
	.byte	5
	.byte	'end',0,26,59,84
	.word	1904
	.byte	5
	.byte	'src',0,26,59,103
	.word	8919
	.byte	5
	.byte	'triggerParam',0,26,59,133,1
	.word	9619
	.byte	7,6,6,6,6,6,6,6,6,6,6,0,0,9
	.word	8919
	.byte	8
	.byte	'Dem_EnvEDRRetrieve',0,3,26,103,30
	.word	144
	.byte	1,1,5
	.byte	'extDataRecId',0,26,103,56
	.word	144
	.byte	5
	.byte	'start',0,26,103,78
	.word	8725
	.byte	5
	.byte	'end',0,26,103,98
	.word	1904
	.byte	5
	.byte	'src',0,26,103,123
	.word	9743
	.byte	5
	.byte	'internalEnvData',0,26,103,155,1
	.word	8813
	.byte	7,6,0,0,8
	.byte	'Dem_EnvEDRGetSize',0,3,26,119,19
	.word	861
	.byte	1,1,5
	.byte	'extDataRecId',0,26,119,44
	.word	144
	.byte	7,6,0,0,4
	.byte	'Dem_EnvEDRSkipSrc',0,3,26,133,1,17,1,1,5
	.byte	'extDataRecId',0,26,133,1,42
	.word	144
	.byte	5
	.byte	'src',0,26,133,1,70
	.word	8919
	.byte	7,6,0,0,4
	.byte	'Dem_EnvDIDCapture',0,3,27,26,17,1,1,5
	.byte	'didId',0,27,26,41
	.word	144
	.byte	5
	.byte	'start',0,27,26,56
	.word	8725
	.byte	5
	.byte	'end',0,27,26,76
	.word	1904
	.byte	5
	.byte	'internalEnvData',0,27,26,108
	.word	8813
	.byte	7,6,0,0,8
	.byte	'Dem_EnvDIDRetrieveRaw',0,3,27,41,30
	.word	144
	.byte	1,1,5
	.byte	'didId',0,27,41,58
	.word	144
	.byte	5
	.byte	'start',0,27,41,73
	.word	8725
	.byte	5
	.byte	'end',0,27,41,93
	.word	1904
	.byte	5
	.byte	'src',0,27,41,112
	.word	8919
	.byte	5
	.byte	'internalEnvData',0,27,41,144,1
	.word	8813
	.byte	7,6,0,0,8
	.byte	'Dem_EnvDIDRetrieve',0,3,27,59,30
	.word	144
	.byte	1,1,5
	.byte	'didId',0,27,59,55
	.word	144
	.byte	5
	.byte	'start',0,27,59,70
	.word	8725
	.byte	5
	.byte	'end',0,27,59,90
	.word	1904
	.byte	5
	.byte	'src',0,27,59,109
	.word	8919
	.byte	5
	.byte	'internalEnvData',0,27,59,141,1
	.word	8813
	.byte	7,6,0,0,8
	.byte	'Dem_EnvDIDRetrieveSpecificDid',0,3,27,77,30
	.word	144
	.byte	1,1,5
	.byte	'didId',0,27,77,67
	.word	144
	.byte	5
	.byte	'identifier',0,27,77,81
	.word	861
	.byte	5
	.byte	'start',0,27,77,101
	.word	8725
	.byte	5
	.byte	'end',0,27,77,121
	.word	1904
	.byte	5
	.byte	'src',0,27,77,140,1
	.word	8919
	.byte	5
	.byte	'internalEnvData',0,27,77,172,1
	.word	8813
	.byte	7,6,6,0,0,8
	.byte	'Dem_EnvDIDGetSize',0,3,27,108,19
	.word	861
	.byte	1,1,5
	.byte	'didId',0,27,108,43
	.word	144
	.byte	7,6,0,0
.L687:
	.byte	8
	.byte	'Dem_EnvIsFFRecNumValid',0,3,28,16,30
	.word	144
	.byte	1,1
.L689:
	.byte	5
	.byte	'EventId',0,28,16,69
	.word	861
.L691:
	.byte	5
	.byte	'RecNumber',0,28,16,84
	.word	144
.L693:
	.byte	7,6,0,0
.L700:
	.byte	8
	.byte	'Dem_EnvGetIndexFromFFRecNum',0,3,28,21,18
	.word	144
	.byte	1,1
.L701:
	.byte	5
	.byte	'EventId',0,28,21,62
	.word	861
.L703:
	.byte	5
	.byte	'RecNumber',0,28,21,77
	.word	144
.L705:
	.byte	6,0
.L551:
	.byte	8
	.byte	'Dem_EnvGetFFRecNumFromIndex',0,3,28,28,18
	.word	144
	.byte	1,1
.L553:
	.byte	5
	.byte	'EventId',0,28,28,62
	.word	861
.L555:
	.byte	5
	.byte	'idx',0,28,28,77
	.word	144
.L557:
	.byte	6,0
.L571:
	.byte	8
	.byte	'Dem_EnvGetFFRecordTrigger',0,3,28,34,28
	.word	144
	.byte	1,1
.L573:
	.byte	5
	.byte	'RecNumber',0,28,34,61
	.word	144
.L575:
	.byte	6,0
.L706:
	.byte	8
	.byte	'Dem_EnvIsFFRecNumStored',0,3,28,47,30
	.word	144
	.byte	1,1
.L708:
	.byte	5
	.byte	'EventMemory',0,28,47,86
	.word	5888
.L710:
	.byte	5
	.byte	'RecNumber',0,28,47,105
	.word	144
.L712:
	.byte	7,6,6,6,0,0
.L662:
	.byte	8
	.byte	'Dem_DtcIsSuppressed',0,3,29,118,30
	.word	144
	.byte	1,1
.L663:
	.byte	5
	.byte	'dtcId',0,29,118,65
	.word	861
.L665:
	.byte	7,6,0,0,8
	.byte	'Dem_DtcIsSuppressedDirectly',0,3,29,128,1,30
	.word	144
	.byte	1,1,5
	.byte	'dtcId',0,29,128,1,73
	.word	861
	.byte	6,0
.L650:
	.byte	8
	.byte	'Dem_DtcIsSupported',0,3,29,138,1,30
	.word	144
	.byte	1,1
.L653:
	.byte	5
	.byte	'dtcID',0,29,138,1,64
	.word	861
.L655:
	.byte	7,6,6,0,0
.L559:
	.byte	8
	.byte	'Dem_GetDtcCode',0,3,29,223,1,28
	.word	1372
	.byte	1,1
.L560:
	.byte	5
	.byte	'dtcId',0,29,223,1,58
	.word	861
.L562:
	.byte	7,6,0,0,8
	.byte	'Dem_EventUsesOrigin',0,3,29,137,2,30
	.word	144
	.byte	1,1,5
	.byte	'eventId',0,29,137,2,67
	.word	861
	.byte	5
	.byte	'origin',0,29,137,2,94
	.word	144
	.byte	7,6,6,6,0,0
.L626:
	.byte	4
	.byte	'Dem_EvMemInvalidateSyncDataRecord',0,3,30,79,17,1,1
.L628:
	.byte	6,0
.L841:
	.byte	8
	.byte	'Dem_EvMemGetNoOfEntries',0,3,30,133,6,18
	.word	144
	.byte	1,1
.L844:
	.byte	5
	.byte	'MemId',0,30,133,6,55
	.word	4860
.L846:
	.byte	7,6,6,6,6,6,6,0,0,16
	.word	166
	.byte	17
	.word	196
	.byte	17
	.word	211
	.byte	6,0,16
	.word	234
	.byte	17
	.word	266
	.byte	17
	.word	281
	.byte	6,0,16
	.word	304
	.byte	17
	.word	340
	.byte	17
	.word	355
	.byte	17
	.word	376
	.byte	7,18
	.word	166
	.byte	17
	.word	196
	.byte	17
	.word	211
	.byte	19
	.word	232
	.byte	0,6,18
	.word	234
	.byte	17
	.word	266
	.byte	17
	.word	281
	.byte	19
	.word	302
	.byte	0,6,0,0,16
	.word	405
	.byte	17
	.word	445
	.byte	17
	.word	459
	.byte	6,0,16
	.word	482
	.byte	17
	.word	518
	.byte	17
	.word	532
	.byte	7,18
	.word	405
	.byte	17
	.word	445
	.byte	17
	.word	459
	.byte	19
	.word	480
	.byte	0,6,0,0,16
	.word	557
	.byte	17
	.word	592
	.byte	17
	.word	606
	.byte	17
	.word	627
	.byte	6,0,16
	.word	652
	.byte	17
	.word	685
	.byte	17
	.word	699
	.byte	17
	.word	720
	.byte	6,0,16
	.word	745
	.byte	17
	.word	782
	.byte	17
	.word	796
	.byte	17
	.word	817
	.byte	17
	.word	840
	.byte	7,18
	.word	652
	.byte	17
	.word	685
	.byte	17
	.word	699
	.byte	17
	.word	720
	.byte	19
	.word	743
	.byte	0,6,0,0,16
	.word	888
	.byte	17
	.word	919
	.byte	17
	.word	934
	.byte	6,0,16
	.word	957
	.byte	17
	.word	990
	.byte	17
	.word	1005
	.byte	6,0,16
	.word	1028
	.byte	17
	.word	1069
	.byte	17
	.word	1083
	.byte	6,0,16
	.word	1106
	.byte	17
	.word	1143
	.byte	17
	.word	1157
	.byte	7,18
	.word	1028
	.byte	17
	.word	1069
	.byte	17
	.word	1083
	.byte	19
	.word	1104
	.byte	0,6,0,0,16
	.word	1182
	.byte	17
	.word	1218
	.byte	17
	.word	1232
	.byte	17
	.word	1253
	.byte	6,0,16
	.word	1278
	.byte	17
	.word	1312
	.byte	17
	.word	1326
	.byte	17
	.word	1347
	.byte	6,0,16
	.word	1393
	.byte	17
	.word	1424
	.byte	17
	.word	1439
	.byte	6,0,16
	.word	1462
	.byte	17
	.word	1495
	.byte	17
	.word	1510
	.byte	6,0,16
	.word	1533
	.byte	17
	.word	1574
	.byte	17
	.word	1588
	.byte	6,0,16
	.word	1611
	.byte	17
	.word	1648
	.byte	17
	.word	1662
	.byte	7,18
	.word	1533
	.byte	17
	.word	1574
	.byte	17
	.word	1588
	.byte	19
	.word	1609
	.byte	0,6,0,0,16
	.word	1687
	.byte	17
	.word	1721
	.byte	17
	.word	1735
	.byte	17
	.word	1756
	.byte	6,0,10,31,64,9,8,11
	.byte	'evMemId',0
	.word	4860
	.byte	4,2,35,0,11
	.byte	'locIterator',0
	.word	4860
	.byte	4,2,35,4,0
.L872:
	.byte	3
	.word	11727
.L874:
	.byte	3
	.word	861
	.byte	20
	.byte	'Det_ReportError',0,32,112,16
	.word	144
	.byte	1,1,1,1,5
	.byte	'ModuleId',0,32,112,39
	.word	861
	.byte	5
	.byte	'InstanceId',0,32,112,55
	.word	144
	.byte	5
	.byte	'ApiId',0,32,112,73
	.word	144
	.byte	5
	.byte	'ErrorId',0,32,112,86
	.word	144
	.byte	0,16
	.word	1781
	.byte	17
	.word	1819
	.byte	6,0,16
	.word	1839
	.byte	17
	.word	1878
	.byte	6,0,16
	.word	1909
	.byte	17
	.word	1944
	.byte	17
	.word	1960
	.byte	17
	.word	1976
	.byte	6,0,16
	.word	2006
	.byte	17
	.word	2041
	.byte	17
	.word	2058
	.byte	17
	.word	2079
	.byte	6,0,16
	.word	2102
	.byte	17
	.word	2132
	.byte	6,0,16
	.word	2152
	.byte	17
	.word	2183
	.byte	6,0,16
	.word	2203
	.byte	17
	.word	2237
	.byte	6,0,16
	.word	2252
	.byte	17
	.word	2287
	.byte	6,0,16
	.word	2310
	.byte	17
	.word	2347
	.byte	6,0,16
	.word	2367
	.byte	17
	.word	2393
	.byte	17
	.word	2408
	.byte	6,0,16
	.word	2431
	.byte	17
	.word	2459
	.byte	17
	.word	2474
	.byte	6,0,16
	.word	2497
	.byte	17
	.word	2529
	.byte	17
	.word	2544
	.byte	17
	.word	2565
	.byte	7,18
	.word	2367
	.byte	17
	.word	2393
	.byte	17
	.word	2408
	.byte	19
	.word	2429
	.byte	0,6,18
	.word	2431
	.byte	17
	.word	2459
	.byte	17
	.word	2474
	.byte	19
	.word	2495
	.byte	0,6,0,0,16
	.word	2604
	.byte	17
	.word	2636
	.byte	17
	.word	2651
	.byte	6,0,16
	.word	2674
	.byte	17
	.word	2703
	.byte	6,0,16
	.word	2717
	.byte	17
	.word	2750
	.byte	6,0,16
	.word	2764
	.byte	17
	.word	2796
	.byte	6,0,16
	.word	2813
	.byte	17
	.word	2850
	.byte	7,18
	.word	2764
	.byte	17
	.word	2796
	.byte	19
	.word	2811
	.byte	0,6,0,0,16
	.word	2869
	.byte	17
	.word	2903
	.byte	6,0,16
	.word	2972
	.byte	17
	.word	3016
	.byte	17
	.word	3028
	.byte	7,18
	.word	2674
	.byte	17
	.word	2703
	.byte	19
	.word	2715
	.byte	0,6,0,0,16
	.word	3057
	.byte	17
	.word	3100
	.byte	6,0,16
	.word	3114
	.byte	17
	.word	3150
	.byte	6,0,16
	.word	3164
	.byte	17
	.word	3207
	.byte	6,0,16
	.word	3221
	.byte	17
	.word	3256
	.byte	6,0,16
	.word	3286
	.byte	17
	.word	3318
	.byte	6,0,16
	.word	3331
	.byte	6,0,16
	.word	3359
	.byte	17
	.word	3412
	.byte	7,18
	.word	1839
	.byte	17
	.word	1878
	.byte	19
	.word	1897
	.byte	0,6,0,0,16
	.word	3428
	.byte	17
	.word	3481
	.byte	7,18
	.word	1781
	.byte	17
	.word	1819
	.byte	19
	.word	1837
	.byte	0,6,0,0,16
	.word	3497
	.byte	17
	.word	3548
	.byte	6,0,16
	.word	3563
	.byte	17
	.word	3613
	.byte	7,18
	.word	1106
	.byte	17
	.word	1143
	.byte	17
	.word	1157
	.byte	21
	.word	1178
	.byte	18
	.word	1028
	.byte	17
	.word	1069
	.byte	17
	.word	1083
	.byte	19
	.word	1104
	.byte	0,19
	.word	1179
	.byte	0,0,6,0,0,16
	.word	3630
	.byte	17
	.word	3682
	.byte	6,0,16
	.word	3697
	.byte	17
	.word	3746
	.byte	6,0,16
	.word	3761
	.byte	17
	.word	3801
	.byte	7,18
	.word	1106
	.byte	17
	.word	1143
	.byte	17
	.word	1157
	.byte	21
	.word	1178
	.byte	18
	.word	1028
	.byte	17
	.word	1069
	.byte	17
	.word	1083
	.byte	19
	.word	1104
	.byte	0,19
	.word	1179
	.byte	0,0,6,0,0,16
	.word	3818
	.byte	17
	.word	3862
	.byte	6,0,16
	.word	3877
	.byte	17
	.word	3918
	.byte	6,0,16
	.word	3934
	.byte	17
	.word	3977
	.byte	6,0,16
	.word	3993
	.byte	17
	.word	4041
	.byte	6,0,16
	.word	4057
	.byte	17
	.word	4111
	.byte	7,18
	.word	1182
	.byte	17
	.word	1218
	.byte	17
	.word	1232
	.byte	17
	.word	1253
	.byte	19
	.word	1276
	.byte	0,6,0,0,16
	.word	4129
	.byte	17
	.word	4172
	.byte	6,0,16
	.word	4188
	.byte	17
	.word	4244
	.byte	7,18
	.word	1182
	.byte	17
	.word	1218
	.byte	17
	.word	1232
	.byte	17
	.word	1253
	.byte	19
	.word	1276
	.byte	0,6,0,0,16
	.word	4262
	.byte	17
	.word	4307
	.byte	6,0,16
	.word	4336
	.byte	17
	.word	4372
	.byte	6,0,16
	.word	4391
	.byte	17
	.word	4431
	.byte	6,0,16
	.word	4450
	.byte	6,0,16
	.word	4503
	.byte	17
	.word	4539
	.byte	7,18
	.word	1393
	.byte	17
	.word	1424
	.byte	17
	.word	1439
	.byte	19
	.word	1460
	.byte	0,6,0,0,16
	.word	4559
	.byte	17
	.word	4591
	.byte	7,18
	.word	482
	.byte	17
	.word	518
	.byte	17
	.word	532
	.byte	21
	.word	553
	.byte	18
	.word	405
	.byte	17
	.word	445
	.byte	17
	.word	459
	.byte	19
	.word	480
	.byte	0,19
	.word	554
	.byte	0,0,6,0,0,16
	.word	4617
	.byte	17
	.word	4642
	.byte	17
	.word	4658
	.byte	6,0,16
	.word	4680
	.byte	17
	.word	4714
	.byte	6,0,16
	.word	4737
	.byte	17
	.word	4768
	.byte	17
	.word	4784
	.byte	7,18
	.word	4680
	.byte	17
	.word	4714
	.byte	19
	.word	4735
	.byte	0,6,0,0,16
	.word	4809
	.byte	17
	.word	4842
	.byte	6,0,16
	.word	4881
	.byte	17
	.word	4933
	.byte	17
	.word	4949
	.byte	6,0,16
	.word	4979
	.byte	17
	.word	5017
	.byte	17
	.word	5032
	.byte	17
	.word	5048
	.byte	6,0,16
	.word	5079
	.byte	17
	.word	5119
	.byte	17
	.word	5135
	.byte	6,0,16
	.word	5161
	.byte	17
	.word	5219
	.byte	6,0,16
	.word	5240
	.byte	17
	.word	5295
	.byte	6,0,16
	.word	5316
	.byte	17
	.word	5369
	.byte	6,0,16
	.word	5388
	.byte	17
	.word	5434
	.byte	6,0,16
	.word	5450
	.byte	17
	.word	5515
	.byte	7,18
	.word	2102
	.byte	17
	.word	2132
	.byte	19
	.word	2150
	.byte	0,6,18
	.word	2102
	.byte	17
	.word	2132
	.byte	19
	.word	2150
	.byte	0,6,18
	.word	5240
	.byte	17
	.word	5295
	.byte	19
	.word	5314
	.byte	0,6,18
	.word	4979
	.byte	17
	.word	5017
	.byte	17
	.word	5032
	.byte	17
	.word	5048
	.byte	19
	.word	5067
	.byte	0,6,0,0,16
	.word	5539
	.byte	17
	.word	5572
	.byte	6,0,16
	.word	5588
	.byte	17
	.word	5629
	.byte	6,0,16
	.word	5893
	.byte	17
	.word	5937
	.byte	6,0,16
	.word	5960
	.byte	17
	.word	5999
	.byte	7,18
	.word	5893
	.byte	17
	.word	5937
	.byte	19
	.word	5958
	.byte	0,6,0,0,16
	.word	6018
	.byte	17
	.word	6063
	.byte	6,0,16
	.word	6086
	.byte	17
	.word	6126
	.byte	7,18
	.word	6018
	.byte	17
	.word	6063
	.byte	19
	.word	6084
	.byte	0,6,0,0,16
	.word	6145
	.byte	17
	.word	6189
	.byte	6,0,16
	.word	6212
	.byte	17
	.word	6259
	.byte	6,0,16
	.word	6282
	.byte	17
	.word	6334
	.byte	6,0,16
	.word	6357
	.byte	17
	.word	6412
	.byte	6,0,16
	.word	6435
	.byte	17
	.word	6485
	.byte	6,0,16
	.word	6508
	.byte	17
	.word	6553
	.byte	7,18
	.word	6435
	.byte	17
	.word	6485
	.byte	19
	.word	6506
	.byte	0,6,0,0,16
	.word	6572
	.byte	17
	.word	6613
	.byte	17
	.word	6628
	.byte	6,0,16
	.word	6652
	.byte	17
	.word	6710
	.byte	6,0,16
	.word	6741
	.byte	17
	.word	6795
	.byte	6,0,16
	.word	6818
	.byte	17
	.word	6868
	.byte	6,0,16
	.word	6891
	.byte	17
	.word	6947
	.byte	6,0,16
	.word	6970
	.byte	17
	.word	7021
	.byte	7,18
	.word	6891
	.byte	17
	.word	6947
	.byte	19
	.word	6968
	.byte	0,6,0,0,16
	.word	7040
	.byte	17
	.word	7085
	.byte	6,0,16
	.word	7108
	.byte	17
	.word	7148
	.byte	7,18
	.word	7040
	.byte	17
	.word	7085
	.byte	19
	.word	7106
	.byte	0,6,0,0,16
	.word	7172
	.byte	17
	.word	7214
	.byte	6,0,16
	.word	7237
	.byte	17
	.word	7267
	.byte	6,0,16
	.word	7285
	.byte	17
	.word	7314
	.byte	6,0,16
	.word	7332
	.byte	6,0,16
	.word	7366
	.byte	6,0,16
	.word	7409
	.byte	17
	.word	7440
	.byte	17
	.word	7456
	.byte	7,18
	.word	7366
	.byte	19
	.word	7407
	.byte	0,6,18
	.word	7237
	.byte	17
	.word	7267
	.byte	19
	.word	7283
	.byte	0,6,18
	.word	7285
	.byte	17
	.word	7314
	.byte	19
	.word	7330
	.byte	0,6,0,0,16
	.word	7492
	.byte	17
	.word	7535
	.byte	6,0,16
	.word	7552
	.byte	17
	.word	7593
	.byte	6,0,16
	.word	7615
	.byte	17
	.word	7658
	.byte	17
	.word	7673
	.byte	7,18
	.word	7492
	.byte	17
	.word	7535
	.byte	19
	.word	7550
	.byte	0,6,0,0,16
	.word	7702
	.byte	17
	.word	7753
	.byte	17
	.word	7768
	.byte	7,18
	.word	7552
	.byte	17
	.word	7593
	.byte	19
	.word	7608
	.byte	0,6,0,0,16
	.word	7787
	.byte	17
	.word	7831
	.byte	17
	.word	7846
	.byte	6,0,16
	.word	7863
	.byte	17
	.word	7913
	.byte	17
	.word	7928
	.byte	7,18
	.word	7552
	.byte	17
	.word	7593
	.byte	19
	.word	7608
	.byte	0,6,0,0,16
	.word	7947
	.byte	17
	.word	7987
	.byte	6,0,16
	.word	8004
	.byte	17
	.word	8052
	.byte	6,0,16
	.word	8069
	.byte	17
	.word	8110
	.byte	6,0,16
	.word	8127
	.byte	17
	.word	8162
	.byte	17
	.word	8181
	.byte	17
	.word	8200
	.byte	6,0,16
	.word	8219
	.byte	17
	.word	8254
	.byte	7,18
	.word	3497
	.byte	17
	.word	3548
	.byte	19
	.word	3561
	.byte	0,6,0,0,16
	.word	8275
	.byte	17
	.word	8326
	.byte	6,0,16
	.word	8344
	.byte	17
	.word	8371
	.byte	17
	.word	8387
	.byte	17
	.word	8401
	.byte	6,0,16
	.word	8421
	.byte	17
	.word	8459
	.byte	6,0,16
	.word	8476
	.byte	17
	.word	8517
	.byte	6,0,20
	.byte	'Dem_EvMemGetEventMemoryLocIdOfDtcWithVisibility',0,23,64,15
	.word	4860
	.byte	1,1,1,1,5
	.byte	'DtcId',0,23,64,77
	.word	861
	.byte	5
	.byte	'MemId',0,23,64,97
	.word	4860
	.byte	5
	.byte	'ShadowEntriesVisible',0,23,64,122
	.word	144
	.byte	0,16
	.word	8534
	.byte	17
	.word	8576
	.byte	6,0,16
	.word	8597
	.byte	17
	.word	8635
	.byte	7,18
	.word	3563
	.byte	17
	.word	3613
	.byte	21
	.word	3626
	.byte	18
	.word	1106
	.byte	17
	.word	1143
	.byte	17
	.word	1157
	.byte	21
	.word	1178
	.byte	18
	.word	1028
	.byte	17
	.word	1069
	.byte	17
	.word	1083
	.byte	19
	.word	1104
	.byte	0,19
	.word	1179
	.byte	0,0,19
	.word	3627
	.byte	0,0,6,0,0,16
	.word	8666
	.byte	17
	.word	8694
	.byte	17
	.word	8708
	.byte	7,18
	.word	2006
	.byte	17
	.word	2041
	.byte	17
	.word	2058
	.byte	17
	.word	2079
	.byte	19
	.word	2100
	.byte	0,6,0,0,16
	.word	8818
	.byte	17
	.word	8842
	.byte	17
	.word	8864
	.byte	17
	.word	8878
	.byte	17
	.word	8890
	.byte	7,18
	.word	8666
	.byte	17
	.word	8694
	.byte	17
	.word	8708
	.byte	21
	.word	8721
	.byte	18
	.word	2006
	.byte	17
	.word	2041
	.byte	17
	.word	2058
	.byte	17
	.word	2079
	.byte	19
	.word	2100
	.byte	0,19
	.word	8722
	.byte	0,0,6,18
	.word	8666
	.byte	17
	.word	8694
	.byte	17
	.word	8708
	.byte	21
	.word	8721
	.byte	18
	.word	2006
	.byte	17
	.word	2041
	.byte	17
	.word	2058
	.byte	17
	.word	2079
	.byte	19
	.word	2100
	.byte	0,19
	.word	8722
	.byte	0,0,6,0,0,16
	.word	8924
	.byte	17
	.word	8945
	.byte	17
	.word	8967
	.byte	17
	.word	8981
	.byte	17
	.word	8993
	.byte	7,18
	.word	1909
	.byte	17
	.word	1944
	.byte	17
	.word	1960
	.byte	17
	.word	1976
	.byte	19
	.word	1997
	.byte	0,6,0,0,16
	.word	9009
	.byte	17
	.word	9030
	.byte	17
	.word	9052
	.byte	17
	.word	9066
	.byte	17
	.word	9078
	.byte	6,0,16
	.word	9092
	.byte	17
	.word	9121
	.byte	17
	.word	9143
	.byte	17
	.word	9157
	.byte	17
	.word	9169
	.byte	17
	.word	9181
	.byte	7,18
	.word	8666
	.byte	17
	.word	8694
	.byte	17
	.word	8708
	.byte	21
	.word	8721
	.byte	18
	.word	2006
	.byte	17
	.word	2041
	.byte	17
	.word	2058
	.byte	17
	.word	2079
	.byte	19
	.word	2100
	.byte	0,19
	.word	8722
	.byte	0,0,6,18
	.word	1909
	.byte	17
	.word	1944
	.byte	17
	.word	1960
	.byte	17
	.word	1976
	.byte	19
	.word	1997
	.byte	0,6,0,0,16
	.word	9210
	.byte	17
	.word	9241
	.byte	6,0,16
	.word	9266
	.byte	17
	.word	9303
	.byte	6,0,16
	.word	9326
	.byte	17
	.word	9357
	.byte	6,0,16
	.word	9380
	.byte	17
	.word	9418
	.byte	6,0,16
	.word	9441
	.byte	17
	.word	9466
	.byte	17
	.word	9487
	.byte	17
	.word	9501
	.byte	17
	.word	9513
	.byte	7,18
	.word	8818
	.byte	17
	.word	8842
	.byte	17
	.word	8864
	.byte	17
	.word	8878
	.byte	17
	.word	8890
	.byte	21
	.word	8914
	.byte	18
	.word	8666
	.byte	17
	.word	8694
	.byte	17
	.word	8708
	.byte	21
	.word	8721
	.byte	18
	.word	2006
	.byte	17
	.word	2041
	.byte	17
	.word	2058
	.byte	17
	.word	2079
	.byte	19
	.word	2100
	.byte	0,19
	.word	8722
	.byte	0,0,19
	.word	8915
	.byte	18
	.word	8666
	.byte	17
	.word	8694
	.byte	17
	.word	8708
	.byte	21
	.word	8721
	.byte	18
	.word	2006
	.byte	17
	.word	2041
	.byte	17
	.word	2058
	.byte	17
	.word	2079
	.byte	19
	.word	2100
	.byte	0,19
	.word	8722
	.byte	0,0,19
	.word	8916
	.byte	0,0,6,0,0,16
	.word	9624
	.byte	17
	.word	9649
	.byte	17
	.word	9670
	.byte	17
	.word	9684
	.byte	17
	.word	9696
	.byte	17
	.word	9708
	.byte	7,18
	.word	4737
	.byte	17
	.word	4768
	.byte	17
	.word	4784
	.byte	21
	.word	4805
	.byte	18
	.word	4680
	.byte	17
	.word	4714
	.byte	19
	.word	4735
	.byte	0,19
	.word	4806
	.byte	0,0,6,18
	.word	4737
	.byte	17
	.word	4768
	.byte	17
	.word	4784
	.byte	21
	.word	4805
	.byte	18
	.word	4680
	.byte	17
	.word	4714
	.byte	19
	.word	4735
	.byte	0,19
	.word	4806
	.byte	0,0,6,18
	.word	4737
	.byte	17
	.word	4768
	.byte	17
	.word	4784
	.byte	21
	.word	4805
	.byte	18
	.word	4680
	.byte	17
	.word	4714
	.byte	19
	.word	4735
	.byte	0,19
	.word	4806
	.byte	0,0,6,18
	.word	4737
	.byte	17
	.word	4768
	.byte	17
	.word	4784
	.byte	21
	.word	4805
	.byte	18
	.word	4680
	.byte	17
	.word	4714
	.byte	19
	.word	4735
	.byte	0,19
	.word	4806
	.byte	0,0,6,18
	.word	9380
	.byte	17
	.word	9418
	.byte	19
	.word	9439
	.byte	0,6,18
	.word	9326
	.byte	17
	.word	9357
	.byte	19
	.word	9378
	.byte	0,6,18
	.word	4617
	.byte	17
	.word	4642
	.byte	17
	.word	4658
	.byte	19
	.word	4678
	.byte	0,6,18
	.word	4809
	.byte	17
	.word	4842
	.byte	19
	.word	4858
	.byte	0,6,18
	.word	9009
	.byte	17
	.word	9030
	.byte	17
	.word	9052
	.byte	17
	.word	9066
	.byte	17
	.word	9078
	.byte	19
	.word	9090
	.byte	0,6,18
	.word	8924
	.byte	17
	.word	8945
	.byte	17
	.word	8967
	.byte	17
	.word	8981
	.byte	17
	.word	8993
	.byte	21
	.word	9005
	.byte	18
	.word	1909
	.byte	17
	.word	1944
	.byte	17
	.word	1960
	.byte	17
	.word	1976
	.byte	19
	.word	1997
	.byte	0,19
	.word	9006
	.byte	0,0,6,0,0,16
	.word	9748
	.byte	17
	.word	9778
	.byte	17
	.word	9799
	.byte	17
	.word	9813
	.byte	17
	.word	9825
	.byte	17
	.word	9837
	.byte	7,18
	.word	9092
	.byte	17
	.word	9121
	.byte	17
	.word	9143
	.byte	17
	.word	9157
	.byte	17
	.word	9169
	.byte	17
	.word	9181
	.byte	21
	.word	9205
	.byte	18
	.word	8666
	.byte	17
	.word	8694
	.byte	17
	.word	8708
	.byte	21
	.word	8721
	.byte	18
	.word	2006
	.byte	17
	.word	2041
	.byte	17
	.word	2058
	.byte	17
	.word	2079
	.byte	19
	.word	2100
	.byte	0,19
	.word	8722
	.byte	0,0,19
	.word	9206
	.byte	18
	.word	1909
	.byte	17
	.word	1944
	.byte	17
	.word	1960
	.byte	17
	.word	1976
	.byte	19
	.word	1997
	.byte	0,19
	.word	9207
	.byte	0,0,6,0,0,16
	.word	9866
	.byte	17
	.word	9895
	.byte	7,18
	.word	9210
	.byte	17
	.word	9241
	.byte	19
	.word	9264
	.byte	0,6,0,0,16
	.word	9920
	.byte	17
	.word	9946
	.byte	17
	.word	9968
	.byte	7,18
	.word	9866
	.byte	17
	.word	9895
	.byte	21
	.word	9916
	.byte	18
	.word	9210
	.byte	17
	.word	9241
	.byte	19
	.word	9264
	.byte	0,19
	.word	9917
	.byte	0,0,6,0,0,16
	.word	9985
	.byte	17
	.word	10010
	.byte	17
	.word	10024
	.byte	17
	.word	10038
	.byte	17
	.word	10050
	.byte	7,18
	.word	8818
	.byte	17
	.word	8842
	.byte	17
	.word	8864
	.byte	17
	.word	8878
	.byte	17
	.word	8890
	.byte	21
	.word	8914
	.byte	18
	.word	8666
	.byte	17
	.word	8694
	.byte	17
	.word	8708
	.byte	21
	.word	8721
	.byte	18
	.word	2006
	.byte	17
	.word	2041
	.byte	17
	.word	2058
	.byte	17
	.word	2079
	.byte	19
	.word	2100
	.byte	0,19
	.word	8722
	.byte	0,0,19
	.word	8915
	.byte	18
	.word	8666
	.byte	17
	.word	8694
	.byte	17
	.word	8708
	.byte	21
	.word	8721
	.byte	18
	.word	2006
	.byte	17
	.word	2041
	.byte	17
	.word	2058
	.byte	17
	.word	2079
	.byte	19
	.word	2100
	.byte	0,19
	.word	8722
	.byte	0,0,19
	.word	8916
	.byte	0,0,6,0,0,16
	.word	10078
	.byte	17
	.word	10111
	.byte	17
	.word	10125
	.byte	17
	.word	10139
	.byte	17
	.word	10151
	.byte	17
	.word	10163
	.byte	7,18
	.word	9092
	.byte	17
	.word	9121
	.byte	17
	.word	9143
	.byte	17
	.word	9157
	.byte	17
	.word	9169
	.byte	17
	.word	9181
	.byte	21
	.word	9205
	.byte	18
	.word	8666
	.byte	17
	.word	8694
	.byte	17
	.word	8708
	.byte	21
	.word	8721
	.byte	18
	.word	2006
	.byte	17
	.word	2041
	.byte	17
	.word	2058
	.byte	17
	.word	2079
	.byte	19
	.word	2100
	.byte	0,19
	.word	8722
	.byte	0,0,19
	.word	9206
	.byte	18
	.word	1909
	.byte	17
	.word	1944
	.byte	17
	.word	1960
	.byte	17
	.word	1976
	.byte	19
	.word	1997
	.byte	0,19
	.word	9207
	.byte	0,0,6,0,0,16
	.word	10192
	.byte	17
	.word	10222
	.byte	17
	.word	10236
	.byte	17
	.word	10250
	.byte	17
	.word	10262
	.byte	17
	.word	10274
	.byte	7,18
	.word	10078
	.byte	17
	.word	10111
	.byte	17
	.word	10125
	.byte	17
	.word	10139
	.byte	17
	.word	10151
	.byte	17
	.word	10163
	.byte	21
	.word	10188
	.byte	18
	.word	9092
	.byte	17
	.word	9121
	.byte	17
	.word	9143
	.byte	17
	.word	9157
	.byte	17
	.word	9169
	.byte	17
	.word	9181
	.byte	21
	.word	9205
	.byte	18
	.word	8666
	.byte	17
	.word	8694
	.byte	17
	.word	8708
	.byte	21
	.word	8721
	.byte	18
	.word	2006
	.byte	17
	.word	2041
	.byte	17
	.word	2058
	.byte	17
	.word	2079
	.byte	19
	.word	2100
	.byte	0,19
	.word	8722
	.byte	0,0,19
	.word	9206
	.byte	18
	.word	1909
	.byte	17
	.word	1944
	.byte	17
	.word	1960
	.byte	17
	.word	1976
	.byte	19
	.word	1997
	.byte	0,19
	.word	9207
	.byte	0,0,19
	.word	10189
	.byte	0,0,6,0,0,16
	.word	10303
	.byte	17
	.word	10344
	.byte	17
	.word	10358
	.byte	17
	.word	10377
	.byte	17
	.word	10391
	.byte	17
	.word	10403
	.byte	17
	.word	10416
	.byte	7,18
	.word	9210
	.byte	17
	.word	9241
	.byte	19
	.word	9264
	.byte	0,6,18
	.word	9092
	.byte	17
	.word	9121
	.byte	17
	.word	9143
	.byte	17
	.word	9157
	.byte	17
	.word	9169
	.byte	17
	.word	9181
	.byte	21
	.word	9205
	.byte	18
	.word	8666
	.byte	17
	.word	8694
	.byte	17
	.word	8708
	.byte	21
	.word	8721
	.byte	18
	.word	2006
	.byte	17
	.word	2041
	.byte	17
	.word	2058
	.byte	17
	.word	2079
	.byte	19
	.word	2100
	.byte	0,19
	.word	8722
	.byte	0,0,19
	.word	9206
	.byte	18
	.word	1909
	.byte	17
	.word	1944
	.byte	17
	.word	1960
	.byte	17
	.word	1976
	.byte	19
	.word	1997
	.byte	0,19
	.word	9207
	.byte	0,0,6,0,0,16
	.word	10446
	.byte	17
	.word	10475
	.byte	7,18
	.word	9210
	.byte	17
	.word	9241
	.byte	19
	.word	9264
	.byte	0,6,0,0,16
	.word	10493
	.byte	17
	.word	10527
	.byte	17
	.word	10543
	.byte	7,18
	.word	4188
	.byte	17
	.word	4244
	.byte	21
	.word	4258
	.byte	18
	.word	1182
	.byte	17
	.word	1218
	.byte	17
	.word	1232
	.byte	17
	.word	1253
	.byte	19
	.word	1276
	.byte	0,19
	.word	4259
	.byte	0,0,6,0,0,16
	.word	10565
	.byte	17
	.word	10604
	.byte	17
	.word	10620
	.byte	6,0,16
	.word	10640
	.byte	17
	.word	10679
	.byte	17
	.word	10695
	.byte	6,0,16
	.word	10709
	.byte	17
	.word	10746
	.byte	6,0,16
	.word	10766
	.byte	17
	.word	10801
	.byte	17
	.word	10821
	.byte	7,18
	.word	10565
	.byte	17
	.word	10604
	.byte	17
	.word	10620
	.byte	19
	.word	10638
	.byte	0,6,18
	.word	6018
	.byte	17
	.word	6063
	.byte	19
	.word	6084
	.byte	0,6,18
	.word	6891
	.byte	17
	.word	6947
	.byte	19
	.word	6968
	.byte	0,6,0,0,20
	.byte	'Dem_EnvIsEDRNumberValid',0,33,54,19
	.word	144
	.byte	1,1,1,1,5
	.byte	'EventId',0,33,54,59
	.word	861
	.byte	5
	.byte	'RecordNumber',0,33,54,74
	.word	144
	.byte	5
	.byte	'trigger',0,33,54,105
	.word	4612
	.byte	0,20
	.byte	'Dem_EnvRetrieveEDR',0,33,55,42
	.word	144
	.byte	1,1,1,1,5
	.byte	'EventId',0,33,55,77
	.word	861
	.byte	5
	.byte	'RecordNumber',0,33,55,92
	.word	144
	.byte	5
	.byte	'dest',0,33,55,113
	.word	161
	.byte	5
	.byte	'destSize',0,33,55,127
	.word	883
	.byte	5
	.byte	'src',0,33,55,150,1
	.word	1904
	.byte	5
	.byte	'evMemLocation',0,33,55,181,1
	.word	7167
	.byte	0,20
	.byte	'Dem_EnvRetrieveFF',0,33,56,39
	.word	144
	.byte	1,1,1,1,5
	.byte	'EventId',0,33,56,73
	.word	861
	.byte	5
	.byte	'dest',0,33,56,89
	.word	161
	.byte	5
	.byte	'destSize',0,33,56,103
	.word	883
	.byte	5
	.byte	'ffIndex',0,33,56,119
	.word	144
	.byte	5
	.byte	'src',0,33,56,141,1
	.word	1904
	.byte	5
	.byte	'evMemLocation',0,33,56,172,1
	.word	7167
	.byte	0,20
	.byte	'Dem_EnvGetSizeOfEDR',0,33,58,48
	.word	144
	.byte	1,1,1,1,5
	.byte	'EventId',0,33,58,84
	.word	861
	.byte	5
	.byte	'RecordNumber',0,33,58,99
	.word	144
	.byte	5
	.byte	'size',0,33,58,121
	.word	883
	.byte	0,20
	.byte	'Dem_EnvGetSizeOfED',0,33,59,48
	.word	144
	.byte	1,1,1,1,5
	.byte	'EventId',0,33,59,83
	.word	861
	.byte	5
	.byte	'size',0,33,59,100
	.word	883
	.byte	0,20
	.byte	'Dem_EnvGetSizeOfFF',0,33,60,41
	.word	144
	.byte	1,1,1,1,5
	.byte	'EventId',0,33,60,76
	.word	861
	.byte	5
	.byte	'size',0,33,60,93
	.word	883
	.byte	0,16
	.word	10845
	.byte	17
	.word	10876
	.byte	7,18
	.word	482
	.byte	17
	.word	518
	.byte	17
	.word	532
	.byte	21
	.word	553
	.byte	18
	.word	405
	.byte	17
	.word	445
	.byte	17
	.word	459
	.byte	19
	.word	480
	.byte	0,19
	.word	554
	.byte	0,0,6,0,0,16
	.word	10894
	.byte	17
	.word	10934
	.byte	6,0,16
	.word	10951
	.byte	17
	.word	10982
	.byte	7,18
	.word	10845
	.byte	17
	.word	10876
	.byte	21
	.word	10890
	.byte	18
	.word	482
	.byte	17
	.word	518
	.byte	17
	.word	532
	.byte	21
	.word	553
	.byte	18
	.word	405
	.byte	17
	.word	445
	.byte	17
	.word	459
	.byte	19
	.word	480
	.byte	0,19
	.word	554
	.byte	0,0,19
	.word	10891
	.byte	0,0,6,18
	.word	2674
	.byte	17
	.word	2703
	.byte	19
	.word	2715
	.byte	0,6,0,0,16
	.word	11002
	.byte	17
	.word	11029
	.byte	7,18
	.word	2203
	.byte	17
	.word	2237
	.byte	19
	.word	2250
	.byte	0,6,0,0,20
	.byte	'Dem_DtcIdFromDtcCode',0,29,128,2,15
	.word	861
	.byte	1,1,1,1,5
	.byte	'dtcCode',0,29,128,2,53
	.word	1372
	.byte	0,16
	.word	11048
	.byte	17
	.word	11080
	.byte	17
	.word	11097
	.byte	7,18
	.word	3630
	.byte	17
	.word	3682
	.byte	19
	.word	3695
	.byte	0,6,18
	.word	3697
	.byte	17
	.word	3746
	.byte	19
	.word	3759
	.byte	0,6,18
	.word	3563
	.byte	17
	.word	3613
	.byte	21
	.word	3626
	.byte	18
	.word	1106
	.byte	17
	.word	1143
	.byte	17
	.word	1157
	.byte	21
	.word	1178
	.byte	18
	.word	1028
	.byte	17
	.word	1069
	.byte	17
	.word	1083
	.byte	19
	.word	1104
	.byte	0,19
	.word	1179
	.byte	0,0,19
	.word	3627
	.byte	0,0,6,0,0,16
	.word	11119
	.byte	6,0,16
	.word	11162
	.byte	17
	.word	11198
	.byte	7,18
	.word	5539
	.byte	17
	.word	5572
	.byte	19
	.word	5586
	.byte	0,6,18
	.word	7237
	.byte	17
	.word	7267
	.byte	19
	.word	7283
	.byte	0,6,18
	.word	7615
	.byte	17
	.word	7658
	.byte	17
	.word	7673
	.byte	21
	.word	7688
	.byte	18
	.word	7492
	.byte	17
	.word	7535
	.byte	19
	.word	7550
	.byte	0,19
	.word	7689
	.byte	0,0,6,18
	.word	7787
	.byte	17
	.word	7831
	.byte	17
	.word	7846
	.byte	19
	.word	7861
	.byte	0,6,18
	.word	5960
	.byte	17
	.word	5999
	.byte	21
	.word	6014
	.byte	18
	.word	5893
	.byte	17
	.word	5937
	.byte	19
	.word	5958
	.byte	0,19
	.word	6015
	.byte	0,0,6,18
	.word	7702
	.byte	17
	.word	7753
	.byte	17
	.word	7768
	.byte	21
	.word	7783
	.byte	18
	.word	7552
	.byte	17
	.word	7593
	.byte	19
	.word	7608
	.byte	0,19
	.word	7784
	.byte	0,0,6,0,0,22,1,3
	.word	17335
	.byte	23
	.byte	'__codeptr',0,30,1,1
	.word	17337
	.byte	23
	.byte	'sint8',0,34,76,25
	.word	6733
	.byte	23
	.byte	'uint8',0,34,81,25
	.word	144
	.byte	23
	.byte	'sint16',0,34,86,25
	.word	4323
	.byte	23
	.byte	'uint16',0,34,91,25
	.word	861
	.byte	23
	.byte	'sint32',0,34,96,24
	.word	1999
	.byte	23
	.byte	'uint32',0,34,106,24
	.word	1372
	.byte	2
	.byte	'unsigned long long int',0,8,7,23
	.byte	'uint64',0,34,111,30
	.word	17448
	.byte	23
	.byte	'boolean',0,34,127,25
	.word	144
	.byte	23
	.byte	'uint8_least',0,34,137,1,25
	.word	4860
	.byte	23
	.byte	'uint16_least',0,34,147,1,25
	.word	4860
	.byte	23
	.byte	'StatusType',0,35,191,1,27
	.word	144
	.byte	23
	.byte	'Std_ReturnType',0,35,199,1,15
	.word	144
	.byte	10,35,206,1,9,8,11
	.byte	'vendorID',0
	.word	861
	.byte	2,2,35,0,11
	.byte	'moduleID',0
	.word	861
	.byte	2,2,35,2,11
	.byte	'sw_major_version',0
	.word	144
	.byte	1,2,35,4,11
	.byte	'sw_minor_version',0
	.word	144
	.byte	1,2,35,5,11
	.byte	'sw_patch_version',0
	.word	144
	.byte	1,2,35,6,0,23
	.byte	'Std_VersionInfoType',0,35,213,1,3
	.word	17592
	.byte	23
	.byte	'Dem_ClientRequestType',0,36,46,16
	.word	861
	.byte	23
	.byte	'Dem_ClientResultType',0,36,47,16
	.word	861
	.byte	23
	.byte	'Dem_ClientSelectionType',0,36,48,16
	.word	1372
	.byte	23
	.byte	'Dem_ClientPriorityType',0,36,50,15
	.word	144
	.byte	23
	.byte	'Dem_ComponentIdType',0,37,20,15
	.word	144
	.byte	23
	.byte	'PduIdType',0,38,22,19
	.word	861
	.byte	23
	.byte	'PduLengthType',0,38,26,19
	.word	861
	.byte	24,39,113,9,4,25
	.byte	'TP_DATACONF',0,0,25
	.byte	'TP_DATARETRY',0,1,25
	.byte	'TP_CONFPENDING',0,2,0,23
	.byte	'TpDataStateType',0,39,118,3
	.word	17932
	.byte	23
	.byte	'Can_IdType',0,40,32,16
	.word	1372
	.byte	23
	.byte	'Can_HwHandleType',0,40,43,16
	.word	861
	.byte	10,41,93,9,8,11
	.byte	'Class',0
	.word	144
	.byte	1,2,35,0,11
	.byte	'TIN',0
	.word	144
	.byte	1,2,35,1,11
	.byte	'ReturnAddress',0
	.word	1372
	.byte	4,2,35,4,0,23
	.byte	'OsTrapInfoType',0,41,97,3
	.word	18052
	.byte	14,68
	.word	1372
	.byte	15,16,0,10,41,154,1,9,68,11
	.byte	'store',0
	.word	18132
	.byte	68,2,35,0,0,14,68
	.word	18141
	.byte	15,0,0,23
	.byte	'Os_JumpBufType',0,41,156,1,3
	.word	18163
	.byte	23
	.byte	'Os_StackTraceType',0,41,174,1,18
	.word	1372
	.byte	10,41,175,1,9,8,11
	.byte	'sp',0
	.word	1372
	.byte	4,2,35,0,11
	.byte	'ctx',0
	.word	1372
	.byte	4,2,35,4,0,23
	.byte	'Os_StackValueType',0,41,175,1,63
	.word	18223
	.byte	23
	.byte	'Os_StackSizeType',0,41,176,1,27
	.word	18223
	.byte	26,1,1,3
	.word	18308
	.byte	23
	.byte	'Os_VoidVoidFunctionType',0,41,179,1,16
	.word	18311
	.byte	23
	.byte	'ApplicationType',0,41,193,1,23
	.word	144
	.byte	27
	.byte	'Os_ApplicationConfigurationType_s',0,41,198,1,16,2,11
	.byte	'app_id',0
	.word	144
	.byte	1,2,35,0,11
	.byte	'access',0
	.word	144
	.byte	1,2,35,1,0,23
	.byte	'Os_ApplicationConfigurationType',0,41,201,1,3
	.word	18374
	.byte	23
	.byte	'Os_CoreStateType',0,41,203,1,16
	.word	1372
	.byte	23
	.byte	'AreaIdType',0,41,204,1,16
	.word	861
	.byte	23
	.byte	'Os_PeripheralAddressType',0,41,212,1,22
	.word	1372
	.byte	23
	.byte	'TickType',0,41,221,1,22
	.word	1372
	.byte	23
	.byte	'Os_StopwatchTickType',0,41,225,1,22
	.word	1372
	.byte	23
	.byte	'Os_Lockable',0,41,234,1,18
	.word	1388
	.byte	23
	.byte	'CoreIdType',0,41,236,1,16
	.word	861
	.byte	23
	.byte	'SpinlockIdType',0,41,237,1,16
	.word	861
	.byte	24,41,239,1,9,4,25
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,25
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,23
	.byte	'TryToGetSpinlockType',0,41,239,1,74
	.word	18681
	.byte	24,41,174,2,9,4,25
	.byte	'APPLICATION_ACCESSIBLE',0,0,25
	.byte	'APPLICATION_RESTARTING',0,1,25
	.byte	'APPLICATION_TERMINATED',0,2,0,23
	.byte	'ApplicationStateType',0,41,174,2,92
	.word	18774
	.byte	28
	.byte	'void',0,3
	.word	18886
	.byte	29,1,1,30
	.word	144
	.byte	30
	.word	18892
	.byte	0,3
	.word	18897
	.byte	23
	.byte	'Os_FunctionEntryType',0,41,183,2,16
	.word	18911
	.byte	27
	.byte	'Os_MeterInfoType_s',0,41,193,2,16,48,11
	.byte	'elapsed',0
	.word	1372
	.byte	4,2,35,0,11
	.byte	'previous',0
	.word	1372
	.byte	4,2,35,4,11
	.byte	'max',0
	.word	1372
	.byte	4,2,35,8,11
	.byte	'cumulative',0
	.word	1372
	.byte	4,2,35,12,11
	.byte	'stackbase',0
	.word	18223
	.byte	8,2,35,16,11
	.byte	'stackusage',0
	.word	18223
	.byte	8,2,35,24,11
	.byte	'stackmax',0
	.word	18223
	.byte	8,2,35,32,11
	.byte	'stackbudget',0
	.word	18223
	.byte	8,2,35,40,0,23
	.byte	'Os_MeterInfoType',0,41,202,2,3
	.word	18946
	.byte	3
	.word	18946
	.byte	23
	.byte	'Os_MeterInfoRefType',0,41,203,2,50
	.word	19144
	.byte	23
	.byte	'EventMaskType',0,41,206,2,15
	.word	144
	.byte	23
	.byte	'Os_imaskType',0,41,211,2,16
	.word	1372
	.byte	27
	.byte	'Os_ISRDynType_s',0,41,213,2,16,48,11
	.byte	'meter',0
	.word	18946
	.byte	48,2,35,0,0,23
	.byte	'Os_ISRDynType',0,41,215,2,3
	.word	19223
	.byte	3
	.word	19223
	.byte	9
	.word	19284
	.byte	27
	.byte	'Os_ISRType_s',0,41,216,2,16,24,11
	.byte	'entry_function',0
	.word	18316
	.byte	4,2,35,0,11
	.byte	'dynamic',0
	.word	19289
	.byte	4,2,35,4,11
	.byte	'imask',0
	.word	1372
	.byte	4,2,35,8,11
	.byte	'stackbudget',0
	.word	18223
	.byte	8,2,35,12,11
	.byte	'access',0
	.word	144
	.byte	1,2,35,20,11
	.byte	'application',0
	.word	144
	.byte	1,2,35,21,0,23
	.byte	'Os_ISRType',0,41,223,2,3
	.word	19294
	.byte	3
	.word	18308
	.byte	9
	.word	19294
	.byte	3
	.word	19453
	.byte	23
	.byte	'ISRType',0,41,224,2,46
	.word	19458
	.byte	23
	.byte	'Os_bitmask',0,41,239,2,22
	.word	1372
	.byte	23
	.byte	'Os_pset0Type',0,41,240,2,20
	.word	1372
	.byte	23
	.byte	'Os_pset1Type',0,41,241,2,20
	.word	1372
	.byte	23
	.byte	'Os_pset2Type',0,41,242,2,20
	.word	1372
	.byte	13,41,243,2,9,4,11
	.byte	'p0',0
	.word	1372
	.byte	4,2,35,0,11
	.byte	'p1',0
	.word	1372
	.byte	4,2,35,0,11
	.byte	'p2',0
	.word	1372
	.byte	4,2,35,0,0,23
	.byte	'Os_psetType',0,41,247,2,3
	.word	19566
	.byte	13,41,249,2,9,4,11
	.byte	't0',0
	.word	1372
	.byte	4,2,35,0,11
	.byte	't1',0
	.word	1372
	.byte	4,2,35,0,11
	.byte	't2',0
	.word	1372
	.byte	4,2,35,0,0,23
	.byte	'Os_tpmaskType',0,41,253,2,3
	.word	19630
	.byte	23
	.byte	'Os_ActivationCountType',0,41,254,2,23
	.word	144
	.byte	27
	.byte	'Os_TaskDynType_s',0,41,128,3,16,120,11
	.byte	'terminate_jump_buf',0
	.word	18172
	.byte	68,2,35,0,11
	.byte	'meter',0
	.word	18946
	.byte	48,2,35,68,11
	.byte	'activation_count',0
	.word	144
	.byte	1,2,35,116,0,23
	.byte	'Os_TaskDynType',0,41,132,3,3
	.word	19728
	.byte	14,68
	.word	18141
	.byte	15,0,0,3
	.word	19728
	.byte	9
	.word	19854
	.byte	27
	.byte	'Os_TaskType_s',0,41,134,3,16,40,11
	.byte	'dynamic',0
	.word	19859
	.byte	4,2,35,0,11
	.byte	'entry_function',0
	.word	18316
	.byte	4,2,35,4,11
	.byte	'pset',0
	.word	19566
	.byte	4,2,35,8,11
	.byte	'base_tpmask',0
	.word	19630
	.byte	4,2,35,12,11
	.byte	'tpmask',0
	.word	19630
	.byte	4,2,35,16,11
	.byte	'core_id',0
	.word	861
	.byte	2,2,35,20,11
	.byte	'index',0
	.word	1372
	.byte	4,2,35,24,11
	.byte	'stackbudget',0
	.word	18223
	.byte	8,2,35,28,11
	.byte	'activation_count',0
	.word	144
	.byte	1,2,35,36,11
	.byte	'access',0
	.word	144
	.byte	1,2,35,37,11
	.byte	'application',0
	.word	144
	.byte	1,2,35,38,0,23
	.byte	'Os_TaskType',0,41,146,3,3
	.word	19864
	.byte	9
	.word	19864
	.byte	3
	.word	20114
	.byte	23
	.byte	'TaskType',0,41,147,3,47
	.word	20119
	.byte	31
	.byte	'Os_TaskStateType',0,41,155,3,6,4,25
	.byte	'SUSPENDED',0,0,25
	.byte	'READY',0,1,25
	.byte	'WAITING',0,2,25
	.byte	'RUNNING',0,3,0,23
	.byte	'TaskStateType',0,41,156,3,31
	.word	20142
	.byte	13,41,167,3,3,4,11
	.byte	'tpmask',0
	.word	19630
	.byte	4,2,35,0,0,27
	.byte	'Os_ResourceDynType_s',0,41,166,3,16,4,11
	.byte	'saved_priority',0
	.word	20229
	.byte	4,2,35,0,0,23
	.byte	'Os_ResourceDynType',0,41,170,3,3
	.word	20252
	.byte	3
	.word	20252
	.byte	9
	.word	20332
	.byte	27
	.byte	'Os_ResourceType_s',0,41,171,3,16,12,11
	.byte	'dynamic',0
	.word	20337
	.byte	4,2,35,0,11
	.byte	'tpmask',0
	.word	19630
	.byte	4,2,35,4,11
	.byte	'access',0
	.word	144
	.byte	1,2,35,8,0,23
	.byte	'Os_ResourceType',0,41,175,3,3
	.word	20342
	.byte	10,41,181,3,9,12,11
	.byte	'maxallowedvalue',0
	.word	1372
	.byte	4,2,35,0,11
	.byte	'ticksperbase',0
	.word	1372
	.byte	4,2,35,4,11
	.byte	'mincycle',0
	.word	1372
	.byte	4,2,35,8,0,23
	.byte	'AlarmBaseType',0,41,185,3,3
	.word	20441
	.byte	10,41,206,3,9,8,11
	.byte	'Running',0
	.word	144
	.byte	1,2,35,0,11
	.byte	'Pending',0
	.word	144
	.byte	1,2,35,1,11
	.byte	'Delay',0
	.word	1372
	.byte	4,2,35,4,0,23
	.byte	'Os_CounterStatusType',0,41,210,3,3
	.word	20536
	.byte	32
	.word	144
	.byte	1,1,3
	.word	20622
	.byte	23
	.byte	'Os_CounterIncrAdvType',0,41,217,3,22
	.word	20629
	.byte	27
	.byte	's_swd',0,41,222,3,12,4,11
	.byte	'count',0
	.word	1372
	.byte	4,2,35,0,0,13,41,221,3,3,4,11
	.byte	'sw',0
	.word	20665
	.byte	4,2,35,0,0,27
	.byte	'Os_CounterDynType_s',0,41,220,3,16,4,11
	.byte	'type_dependent',0
	.word	20693
	.byte	4,2,35,0,0,23
	.byte	'Os_CounterDynType',0,41,226,3,3
	.word	20712
	.byte	3
	.word	20712
	.byte	9
	.word	20790
	.byte	27
	.byte	'Os_CounterType_s',0,41,227,3,16,28,11
	.byte	'dynamic',0
	.word	20795
	.byte	4,2,35,0,11
	.byte	'advincr',0
	.word	20634
	.byte	4,2,35,4,11
	.byte	'base',0
	.word	20441
	.byte	12,2,35,8,11
	.byte	'core',0
	.word	18892
	.byte	4,2,35,20,11
	.byte	'access',0
	.word	144
	.byte	1,2,35,24,11
	.byte	'application',0
	.word	144
	.byte	1,2,35,25,0,23
	.byte	'Os_CounterType',0,41,234,3,3
	.word	20800
	.byte	3
	.word	20622
	.byte	9
	.word	20800
	.byte	3
	.word	20952
	.byte	23
	.byte	'CounterType',0,41,235,3,52
	.word	20957
	.byte	31
	.byte	'Os_ScheduleTableStatusType',0,41,240,3,6,4,25
	.byte	'SCHEDULETABLE_STOPPED',0,0,25
	.byte	'SCHEDULETABLE_NEXT',0,1,25
	.byte	'SCHEDULETABLE_WAITING',0,2,25
	.byte	'SCHEDULETABLE_RUNNING',0,3,25
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,23
	.byte	'ScheduleTableStatusType',0,41,241,3,41
	.word	20983
	.byte	9
	.word	.L1060-.L330
	.byte	3
	.word	21183
	.byte	23
	.byte	'ScheduleTableType',0,41,128,4,58
	.word	21188
	.byte	27
	.byte	'Os_ScheduleTableDynType_s',0,41,130,4,16,16,11
	.byte	'match',0
	.word	1372
	.byte	4,2,35,0,11
	.byte	'next',0
	.word	21193
	.byte	4,2,35,4,11
	.byte	'state',0
	.word	20983
	.byte	4,2,35,8,11
	.byte	'config',0
	.word	861
	.byte	2,2,35,12,0,3
	.word	21220
	.byte	9
	.word	21313
.L1060:
	.byte	27
	.byte	'Os_ScheduleTableType_s',0,41,247,3,16,16,11
	.byte	'dynamic',0
	.word	21318
	.byte	4,2,35,0,11
	.byte	'counter',0
	.word	20962
	.byte	4,2,35,4,11
	.byte	'repeat',0
	.word	144
	.byte	1,2,35,8,11
	.byte	'config',0
	.word	861
	.byte	2,2,35,10,11
	.byte	'initial',0
	.word	144
	.byte	1,2,35,12,11
	.byte	'access',0
	.word	144
	.byte	1,2,35,13,11
	.byte	'application',0
	.word	144
	.byte	1,2,35,14,0,23
	.byte	'Os_ScheduleTableType',0,41,255,3,3
	.word	21323
	.byte	9
	.word	21323
	.byte	3
	.word	21503
	.byte	9
	.word	20800
	.byte	3
	.word	21513
	.byte	12
	.word	18616
	.byte	12
	.word	19566
	.byte	12
	.word	19463
	.byte	12
	.word	20124
	.byte	12
	.word	19630
	.byte	12
	.word	144
	.byte	12
	.word	20124
	.byte	27
	.byte	'Os_ControlledCoreType_s',0,41,251,6,16,112,11
	.byte	'TrapInfo',0
	.word	18052
	.byte	8,2,35,0,11
	.byte	'lock_taskaccess',0
	.word	21523
	.byte	4,2,35,8,11
	.byte	'ReadyTasks',0
	.word	21528
	.byte	4,2,35,12,11
	.byte	'RunningISR',0
	.word	21533
	.byte	4,2,35,16,11
	.byte	'RunningTask',0
	.word	21538
	.byte	4,2,35,20,11
	.byte	'RunningTPMask',0
	.word	21543
	.byte	4,2,35,24,11
	.byte	'CurrentMeteredObject',0
	.word	19149
	.byte	4,2,35,28,11
	.byte	'IdleMeter',0
	.word	18946
	.byte	48,2,35,32,11
	.byte	'AppAccess',0
	.word	144
	.byte	1,2,35,80,11
	.byte	'AppOverride',0
	.word	21548
	.byte	1,2,35,81,11
	.byte	'GetStackValueAdjust',0
	.word	18223
	.byte	8,2,35,84,11
	.byte	'InErrorHook',0
	.word	144
	.byte	1,2,35,92,11
	.byte	'ChainTaskRef',0
	.word	21553
	.byte	4,2,35,96,11
	.byte	'GetStackUsageAdjust',0
	.word	18223
	.byte	8,2,35,100,11
	.byte	'InProtectionHook',0
	.word	144
	.byte	1,2,35,108,11
	.byte	'CoreIsActive',0
	.word	144
	.byte	1,2,35,109,11
	.byte	'InShutdownHook',0
	.word	144
	.byte	1,2,35,110,0,23
	.byte	'Os_ControlledCoreType',0,41,141,7,3
	.word	21558
	.byte	3
	.word	1372
	.byte	9
	.word	19294
	.byte	3
	.word	22014
	.byte	9
	.word	19864
	.byte	3
	.word	22024
	.byte	3
	.word	18946
	.byte	27
	.byte	'Os_AnyCoreType_s',0,41,151,7,16,96,11
	.byte	'DisableAllImask',0
	.word	1372
	.byte	4,2,35,0,11
	.byte	'SuspendAllImask',0
	.word	1372
	.byte	4,2,35,4,11
	.byte	'SuspendOSImask',0
	.word	1372
	.byte	4,2,35,8,11
	.byte	'DisableAllCount',0
	.word	1372
	.byte	4,2,35,12,11
	.byte	'SuspendAllCount',0
	.word	1372
	.byte	4,2,35,16,11
	.byte	'SuspendOSCount',0
	.word	1372
	.byte	4,2,35,20,11
	.byte	'RestartJumpBuf',0
	.word	18172
	.byte	68,2,35,24,11
	.byte	'Restartable',0
	.word	144
	.byte	1,2,35,92,0,23
	.byte	'Os_AnyCoreType',0,41,160,7,3
	.word	22039
	.byte	23
	.byte	'Can_TxObjPriorityClassType',0,42,219,3,16
	.word	1372
	.byte	27
	.byte	'Can_TxHwObjectConfigType',0,42,231,3,16,8,11
	.byte	'MsgObjId',0
	.word	144
	.byte	1,2,35,0,11
	.byte	'HwControllerId',0
	.word	144
	.byte	1,2,35,1,11
	.byte	'TxObjPriorityClass',0
	.word	1372
	.byte	4,2,35,4,0,23
	.byte	'Can_TxHwObjectConfigType',0,42,252,3,3
	.word	22316
	.byte	27
	.byte	'Can_RxHwObjectConfigType',0,42,129,4,16,12,11
	.byte	'MaskRef',0
	.word	1372
	.byte	4,2,35,0,11
	.byte	'MsgId',0
	.word	1372
	.byte	4,2,35,4,11
	.byte	'MsgObjId',0
	.word	144
	.byte	1,2,35,8,11
	.byte	'HwControllerId',0
	.word	144
	.byte	1,2,35,9,0,23
	.byte	'Can_RxHwObjectConfigType',0,42,147,4,3
	.word	22452
	.byte	14,4
	.word	144
	.byte	15,3,0,27
	.byte	'Can_ControllerMOMapConfigType',0,42,181,4,16,4,11
	.byte	'ControllerMOMap',0
	.word	22592
	.byte	4,2,35,0,0,23
	.byte	'Can_ControllerMOMapConfigType',0,42,184,4,3
	.word	22601
	.byte	27
	.byte	'Can_NPCRValueType',0,42,188,4,16,2,11
	.byte	'Can_NPCRValue',0
	.word	861
	.byte	2,2,35,0,0,23
	.byte	'Can_NPCRValueType',0,42,191,4,3
	.word	22702
	.byte	27
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,42,194,4,16,8,11
	.byte	'CanControllerBaudrate',0
	.word	1372
	.byte	4,2,35,0,11
	.byte	'CanControllerBaudrateCfg',0
	.word	861
	.byte	2,2,35,4,0,23
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,42,198,4,3
	.word	22777
	.byte	9
	.word	22777
	.byte	3
	.word	22942
	.byte	27
	.byte	'Can_BaudrateConfigPtrType',0,42,201,4,16,4,11
	.byte	'Can_kBaudrateConfigPtr',0
	.word	22947
	.byte	4,2,35,0,0,23
	.byte	'Can_BaudrateConfigPtrType',0,42,204,4,3
	.word	22952
	.byte	27
	.byte	'Can_EventHandlingType',0,42,226,4,16,4,11
	.byte	'CanEventType',0
	.word	22592
	.byte	4,2,35,0,0,23
	.byte	'Can_EventHandlingType',0,42,229,4,3
	.word	23052
	.byte	23
	.byte	'Rte_TransformerErrorCode',0,43,130,1,15
	.word	144
	.byte	23
	.byte	'Rte_TransformerClass',0,43,131,1,15
	.word	144
	.byte	10,43,168,1,9,12,11
	.byte	'in',0
	.word	18892
	.byte	4,2,35,0,11
	.byte	'out',0
	.word	18892
	.byte	4,2,35,4,11
	.byte	'used',0
	.word	861
	.byte	2,2,35,8,11
	.byte	'lost_data',0
	.word	144
	.byte	1,2,35,10,0,23
	.byte	'Rte_QDynType',0,43,173,1,3
	.word	23198
	.byte	24,43,175,1,9,4,25
	.byte	'RTE_DRA',0,0,25
	.byte	'RTE_WOWP',0,1,25
	.byte	'RTE_TASK',0,2,25
	.byte	'RTE_ARE',0,3,25
	.byte	'RTE_EV',0,4,25
	.byte	'RTE_MSI',0,5,0,23
	.byte	'Rte_NotificationType',0,43,182,1,3
	.word	23285
	.byte	3
	.word	23198
	.byte	27
	.byte	'Rte_QCmnType',0,43,184,1,16,24,11
	.byte	'dynamic',0
	.word	23383
	.byte	4,2,35,0,11
	.byte	'copy',0
	.word	144
	.byte	1,2,35,4,11
	.byte	'queue_size',0
	.word	861
	.byte	2,2,35,6,11
	.byte	'element_size',0
	.word	861
	.byte	2,2,35,8,11
	.byte	'buffer_start',0
	.word	18892
	.byte	4,2,35,12,11
	.byte	'buffer_end',0
	.word	18892
	.byte	4,2,35,16,11
	.byte	'notification_type',0
	.word	23285
	.byte	4,2,35,20,0,23
	.byte	'Rte_QCmnType',0,43,192,1,3
	.word	23388
	.byte	23
	.byte	'Rte_AlarmRefType',0,43,224,1,32
	.word	1372
	.byte	23
	.byte	'Rte_AlarmIndexType',0,43,226,1,32
	.word	861
	.byte	14,128,8
	.word	144
	.byte	15,255,7,0,23
	.byte	'Impl_NVM_DstPtrType_1024',0,44,50,15
	.word	23626
	.byte	23
	.byte	'CanIf_u32_impl',0,44,69,16
	.word	1372
	.byte	23
	.byte	'CanIf_u16_impl',0,44,71,16
	.word	861
	.byte	23
	.byte	'CanIf_u8_impl',0,44,73,15
	.word	144
	.byte	23
	.byte	'CanIf_ControllerModeType_Enum_impl',0,44,88,15
	.word	144
	.byte	23
	.byte	'CanIf_PduModeType_Enum_impl',0,44,90,15
	.word	144
	.byte	10,44,92,9,2,11
	.byte	'DeviceMode',0
	.word	144
	.byte	1,2,35,0,11
	.byte	'ChannelMode',0
	.word	144
	.byte	1,2,35,1,0,23
	.byte	'CanIf_ControllerStateType_struct_impl',0,44,95,3
	.word	23817
	.byte	23
	.byte	'CanIf_NotifStatusType_Enum_impl',0,44,100,15
	.word	144
	.byte	23
	.byte	'CanSM_boolean_Impl',0,44,120,15
	.word	144
	.byte	23
	.byte	'CanSM_u8_Impl',0,44,123,15
	.word	144
	.byte	23
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,44,128,1,15
	.word	144
	.byte	23
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,44,132,1,15
	.word	144
	.byte	23
	.byte	'CanSM_u16_Impl',0,44,136,1,16
	.word	861
	.byte	23
	.byte	'CanSM_TimerStateType_Enum_impl',0,44,138,1,15
	.word	144
	.byte	10,44,140,1,9,4,11
	.byte	'cntTick_u16',0
	.word	861
	.byte	2,2,35,0,11
	.byte	'stTimer',0
	.word	144
	.byte	1,2,35,2,0,23
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,44,143,1,3
	.word	24158
	.byte	23
	.byte	'Com_impl_u16',0,44,154,1,16
	.word	861
	.byte	23
	.byte	'Com_impl_u8',0,44,157,1,15
	.word	144
	.byte	23
	.byte	'ComM_uint32_Impl',0,44,173,1,16
	.word	1372
	.byte	23
	.byte	'ComM_uint16_Impl',0,44,175,1,16
	.word	861
	.byte	23
	.byte	'ComM_uint8_Impl',0,44,177,1,15
	.word	144
	.byte	23
	.byte	'ComM_bool_Impl',0,44,179,1,15
	.word	144
	.byte	10,44,181,1,9,24,11
	.byte	'ChannelState_e',0
	.word	1372
	.byte	4,2,35,0,11
	.byte	'LightTimeoutCtr_u32',0
	.word	1372
	.byte	4,2,35,4,11
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	861
	.byte	2,2,35,8,11
	.byte	'ChannelMode_u8',0
	.word	144
	.byte	1,2,35,10,11
	.byte	'BusSmMode_u8',0
	.word	144
	.byte	1,2,35,11,11
	.byte	'UserRequestCtr_u8',0
	.word	144
	.byte	1,2,35,12,11
	.byte	'PassiveRequestState_u8',0
	.word	144
	.byte	1,2,35,13,11
	.byte	'PncRequestCtr_u8',0
	.word	144
	.byte	1,2,35,14,11
	.byte	'InhibitionReqStatus_u8',0
	.word	144
	.byte	1,2,35,15,11
	.byte	'NmNetworkRequestStatus_b',0
	.word	144
	.byte	1,2,35,16,11
	.byte	'DiagnosticRequestState_b',0
	.word	144
	.byte	1,2,35,17,11
	.byte	'CommunicationAllowed_b',0
	.word	144
	.byte	1,2,35,18,11
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	144
	.byte	1,2,35,19,11
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	144
	.byte	1,2,35,20,11
	.byte	'NmNetworkModeStatus_b',0
	.word	144
	.byte	1,2,35,21,0,23
	.byte	'ComM_ChannelStruct_Impl',0,44,197,1,3
	.word	24390
	.byte	10,44,206,1,9,10,11
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	861
	.byte	2,2,35,0,11
	.byte	'LimitToNoComCtr_u16',0
	.word	861
	.byte	2,2,35,2,11
	.byte	'RequestedUserMode_t',0
	.word	144
	.byte	1,2,35,4,11
	.byte	'IndicatedUserMode_t',0
	.word	144
	.byte	1,2,35,5,11
	.byte	'numChannelsInFullCom_u8',0
	.word	144
	.byte	1,2,35,6,11
	.byte	'numChannelsInSilentCom_u8',0
	.word	144
	.byte	1,2,35,7,11
	.byte	'numChannelsInNoCom_u8',0
	.word	144
	.byte	1,2,35,8,0,23
	.byte	'ComM_UserStruct_Impl',0,44,214,1,3
	.word	24894
	.byte	23
	.byte	'Dcm_IOOperationResponseType',0,44,252,1,15
	.word	144
	.byte	23
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	44,138,2,15
	.word	144
	.byte	23
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,44,146,2,15
	.word	144
	.byte	23
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,44,150,2,15
	.word	144
	.byte	23
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,44,154,2,15
	.word	144
	.byte	23
	.byte	'Dem_DTCFormatType',0,44,160,2,15
	.word	144
	.byte	23
	.byte	'Dem_DTCOriginType',0,44,162,2,15
	.word	144
	.byte	23
	.byte	'Dem_EventIdType',0,44,168,2,16
	.word	861
	.byte	23
	.byte	'Dem_EventStatusType',0,44,170,2,15
	.word	144
	.byte	23
	.byte	'Dem_InitMonitorReasonType',0,44,176,2,15
	.word	144
	.byte	23
	.byte	'Dem_OperationCycleIdType',0,44,179,2,15
	.word	144
	.byte	23
	.byte	'NvM_BlockIdType',0,44,215,2,16
	.word	861
	.byte	23
	.byte	'NvM_RequestResultType',0,44,225,2,15
	.word	144
	.byte	23
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,44,243,3,34
	.word	23637
	.byte	14,128,8
	.word	144
	.byte	15,255,7,0,23
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,44,246,3,34
	.word	23637
	.byte	23
	.byte	'Dem_DTCGroupIdType',0,31,49,15
	.word	144
	.byte	23
	.byte	'Dem_DtcIdType',0,31,50,16
	.word	861
	.byte	23
	.byte	'Dem_ClientIdType',0,31,53,15
	.word	144
	.byte	23
	.byte	'Dem_DtcCodeType',0,31,55,16
	.word	1372
	.byte	23
	.byte	'Dem_boolean_least',0,31,60,17
	.word	144
	.byte	23
	.byte	'Dem_EventCategoryType',0,31,62,15
	.word	144
	.byte	23
	.byte	'Dem_ReadEventsFromMemoryType',0,31,67,3
	.word	11727
	.byte	23
	.byte	'Dem_ReadEventType',0,31,78,15
	.word	144
	.byte	23
	.byte	'Dem_ReturnGetExtendedDataRecordByDTCType',0,31,110,15
	.word	144
	.byte	23
	.byte	'Dem_ReturnGetSizeOfExtendedDataRecordByDTCType',0,31,132,1,15
	.word	144
	.byte	23
	.byte	'Dem_ReturnGetFreezeFrameDataByDTCType',0,31,154,1,15
	.word	144
	.byte	23
	.byte	'Dem_ReturnGetSizeOfFreezeFrameByDTCType',0,31,176,1,15
	.word	144
	.byte	23
	.byte	'Dem_ReturnSetFilterType',0,31,193,1,15
	.word	144
	.byte	23
	.byte	'Dem_DTCSeverityType',0,31,217,1,15
	.word	144
	.byte	23
	.byte	'Dem_DebugDataType',0,31,131,3,16
	.word	1372
	.byte	23
	.byte	'Dem_DTCKindType',0,31,145,3,16
	.word	144
	.byte	23
	.byte	'Dem_ReturnDisableDTCRecordUpdateType',0,31,160,3,15
	.word	144
	.byte	23
	.byte	'Dem_TriggerType',0,31,167,3,15
	.word	144
	.byte	23
	.byte	'Dem_ReturnGetNextFilteredDTCType',0,31,186,3,15
	.word	144
	.byte	23
	.byte	'Dem_EnCoList',0,45,31,15
	.word	144
	.byte	23
	.byte	'Dem_OperationCycleList',0,46,23,15
	.word	144
	.byte	23
	.byte	'Dem_StoCoList',0,47,32,15
	.word	144
	.byte	23
	.byte	'Rte_TaskRefType',0,48,184,1,32
	.word	20124
	.byte	23
	.byte	'Rte_EventRefType',0,48,185,1,32
	.word	144
	.byte	23
	.byte	'Rte_EventType',0,48,186,1,32
	.word	1372
	.byte	23
	.byte	'Rte_REActCounterType',0,48,252,1,15
	.word	144
	.byte	3
	.word	144
	.byte	23
	.byte	'Rte_REActCounterRefType',0,48,253,1,58
	.word	26768
	.byte	10,48,255,1,9,8,11
	.byte	'task',0
	.word	26664
	.byte	4,2,35,0,11
	.byte	'acnt',0
	.word	26773
	.byte	4,2,35,4,0,23
	.byte	'Rte_REContainerType',0,48,130,2,3
	.word	26806
	.byte	9
	.word	19864
	.byte	3
	.word	26870
	.byte	3
	.word	144
	.byte	9
	.word	26806
	.byte	3
	.word	26885
	.byte	23
	.byte	'Rte_REContainerRefType',0,48,132,2,60
	.word	26890
	.byte	23
	.byte	'Rte_MSICounterType',0,48,149,2,16
	.word	861
	.byte	3
	.word	861
	.byte	23
	.byte	'Rte_MSICounterRefType',0,48,150,2,56
	.word	26955
	.byte	23
	.byte	'Rte_MSIPendingFlagType',0,48,152,2,17
	.word	144
	.byte	3
	.word	144
	.byte	23
	.byte	'Rte_MSIPendingFlagRefType',0,48,153,2,60
	.word	27023
	.byte	10,48,163,2,9,24,11
	.byte	'counter',0
	.word	26960
	.byte	4,2,35,0,11
	.byte	'incCounter',0
	.word	144
	.byte	1,2,35,4,11
	.byte	'pending',0
	.word	27028
	.byte	4,2,35,8,11
	.byte	'osTask',0
	.word	26664
	.byte	4,2,35,12,11
	.byte	'acnt',0
	.word	26773
	.byte	4,2,35,16,11
	.byte	'osEvent',0
	.word	144
	.byte	1,2,35,20,11
	.byte	'MSIInit',0
	.word	861
	.byte	2,2,35,22,0,23
	.byte	'Rte_MSITableEntry',0,48,172,2,3
	.word	27063
	.byte	3
	.word	861
	.byte	3
	.word	144
	.byte	23
	.byte	'Rte_TaskArrayIndex',0,48,179,2,16
	.word	144
	.byte	23
	.byte	'Rte_NrWaitingTasks',0,48,180,2,16
	.word	144
	.byte	10,48,182,2,9,4,11
	.byte	'pending',0
	.word	144
	.byte	1,2,35,0,11
	.byte	'count',0
	.word	144
	.byte	1,2,35,1,11
	.byte	'firstWaitingTask',0
	.word	144
	.byte	1,2,35,2,0,23
	.byte	'Rte_WaitableDatum',0,48,186,2,3
	.word	27281
	.byte	3
	.word	27281
	.byte	10,48,226,2,9,12,11
	.byte	'event_id',0
	.word	1372
	.byte	4,2,35,0,11
	.byte	'wd',0
	.word	27373
	.byte	4,2,35,4,11
	.byte	'timeout',0
	.word	1372
	.byte	4,2,35,8,0,23
	.byte	'Rte_WOWP_NotificationType',0,48,230,2,3
	.word	27378
	.byte	9
	.word	27378
	.byte	3
	.word	27467
	.byte	23
	.byte	'Rte_WOWP_NotificationRefType',0,48,232,2,66
	.word	27472
	.byte	23
	.byte	'Rte_ARE_NotificationType',0,48,234,2,29
	.word	26806
	.byte	27
	.byte	'Rte_QTaskType',0,48,243,2,16,28,11
	.byte	'cmn',0
	.word	23388
	.byte	24,2,35,0,11
	.byte	'task',0
	.word	26664
	.byte	4,2,35,24,0,23
	.byte	'Rte_QTaskType',0,48,246,2,3
	.word	27549
	.byte	27
	.byte	'Rte_QREType',0,48,250,2,16,28,11
	.byte	'cmn',0
	.word	23388
	.byte	24,2,35,0,11
	.byte	're',0
	.word	26895
	.byte	4,2,35,24,0,23
	.byte	'Rte_QREType',0,48,253,2,3
	.word	27620
	.byte	9
	.word	26806
	.byte	3
	.word	27685
	.byte	27
	.byte	'Rte_QWWPType',0,48,129,3,16,28,11
	.byte	'cmn',0
	.word	23388
	.byte	24,2,35,0,11
	.byte	'wwp',0
	.word	27477
	.byte	4,2,35,24,0,23
	.byte	'Rte_QWWPType',0,48,132,3,3
	.word	27695
	.byte	9
	.word	27378
	.byte	3
	.word	27763
	.byte	27
	.byte	'Rte_QEvType',0,48,136,3,16,36,11
	.byte	'cmn',0
	.word	23388
	.byte	24,2,35,0,11
	.byte	'task',0
	.word	26664
	.byte	4,2,35,24,11
	.byte	'mask',0
	.word	144
	.byte	1,2,35,28,11
	.byte	'acnt',0
	.word	26773
	.byte	4,2,35,32,0,23
	.byte	'Rte_QEvType',0,48,141,3,3
	.word	27773
	.byte	27
	.byte	'Rte_QMSIType',0,48,145,3,16,48,11
	.byte	'cmn',0
	.word	23388
	.byte	24,2,35,0,11
	.byte	'task',0
	.word	26664
	.byte	4,2,35,24,11
	.byte	'mask',0
	.word	144
	.byte	1,2,35,28,11
	.byte	'acnt',0
	.word	26773
	.byte	4,2,35,32,11
	.byte	'msiCounter',0
	.word	26960
	.byte	4,2,35,36,11
	.byte	'msiPending',0
	.word	27028
	.byte	4,2,35,40,11
	.byte	'msiLimit',0
	.word	861
	.byte	2,2,35,44,0,23
	.byte	'Rte_QMSIType',0,48,153,3,3
	.word	27868
	.byte	23
	.byte	'Dem_EvtStateType',0,49,151,1,15
	.word	144
	.byte	23
	.byte	'Dem_DtcStateType',0,50,47,15
	.word	144
	.byte	23
	.byte	'rba_BswSrv_uint64',0,4,66,28
	.word	17448
	.byte	10,7,47,9,12,11
	.byte	'DtcCode',0
	.word	1372
	.byte	4,2,35,0,11
	.byte	'Severity',0
	.word	144
	.byte	1,2,35,4,11
	.byte	'Kind',0
	.word	144
	.byte	1,2,35,5,11
	.byte	'DtcCode_Is_Index',0
	.word	144
	.byte	1,2,35,6,11
	.byte	'Func_Unit',0
	.word	144
	.byte	1,2,35,7,11
	.byte	'Nv_Storage',0
	.word	144
	.byte	1,2,35,8,0,23
	.byte	'Dem_Cfg_DtcType',0,7,55,3
	.word	28100
	.byte	14,60
	.word	28100
	.byte	15,4,0,9
	.word	28244
	.byte	33
	.byte	'Dem_Cfg_Dtc',0,7,59,30
	.word	28253
	.byte	1,1,23
	.byte	'Dem_EvMemOccurrenceCounterType',0,21,90,21
	.word	144
	.byte	23
	.byte	'Dem_EvMemAgingCounterType',0,21,99,21
	.word	144
	.byte	23
	.byte	'Dem_EvMemHdrType',0,21,141,1,4
	.word	5685
	.byte	23
	.byte	'Dem_EvMemEventMemoryType',0,21,213,1,4
	.word	5715
.L942:
	.byte	10,8,15,9,28,11
	.byte	'DtcId',0
	.word	861
	.byte	2,2,35,0,11
	.byte	'DTCOrigin',0
	.word	144
	.byte	1,2,35,2,11
	.byte	'ReqCounter',0
	.word	144
	.byte	1,2,35,3,11
	.byte	'DemCounter',0
	.word	144
	.byte	1,2,35,4,11
	.byte	'IsValid',0
	.word	144
	.byte	1,2,35,5,11
	.byte	'EventMemory',0
	.word	5715
	.byte	20,2,35,8,0,23
	.byte	'Dem_EvMemDTCRecordType',0,8,25,3
	.word	28413
	.byte	23
	.byte	'Dem_OpMoStateType',0,51,13,15
	.word	144
	.byte	33
	.byte	'Dem_OpMoState',0,51,31,26
	.word	144
	.byte	1,1,23
	.byte	'Dem_EventIdIterator',0,10,27,22
	.word	4860
	.byte	23
	.byte	'Dem_MapDtcIdToEventIdType',0,10,126,25
	.word	861
	.byte	14,10
	.word	861
	.byte	15,4,0,9
	.word	28674
	.byte	33
	.byte	'Dem_MapDtcIdToEventId',0,10,139,1,41
	.word	28683
	.byte	1,1,14,12
	.word	861
	.byte	15,5,0,9
	.word	28721
	.byte	33
	.byte	'Dem_MapEventIdToDtcId',0,10,140,1,41
	.word	28730
	.byte	1,1,23
	.byte	'Dem_DtcIdIterator',0,10,197,1,22
	.word	4860
	.byte	23
	.byte	'Dem_DtcGroupIdIterator',0,10,230,1,21
	.word	4860
	.byte	23
	.byte	'Dem_EventIdListIterator',0,10,174,2,3
	.word	2935
	.byte	10,10,213,2,9,4,11
	.byte	'it',0
	.word	861
	.byte	2,2,35,0,11
	.byte	'end',0
	.word	861
	.byte	2,2,35,2,0,23
	.byte	'Dem_DtcIdListIterator',0,10,216,2,3
	.word	28860
	.byte	24,52,31,9,4,25
	.byte	'MEMIF_JOB_OK',0,0,25
	.byte	'MEMIF_JOB_FAILED',0,1,25
	.byte	'MEMIF_JOB_PENDING',0,2,25
	.byte	'MEMIF_JOB_CANCELED',0,3,25
	.byte	'MEMIF_BLOCK_INCONSISTENT',0,4,25
	.byte	'MEMIF_BLOCK_INVALID',0,5,0,23
	.byte	'MemIf_JobResultType',0,52,39,2
	.word	28923
	.byte	24,53,49,9,4,25
	.byte	'NVM_PRV_ACTIVITY_NOT_INIT',0,0,25
	.byte	'NVM_PRV_ACTIVITY_IDLE',0,1,25
	.byte	'NVM_PRV_ACTIVITY_ARBITRATE',0,2,25
	.byte	'NVM_PRV_ACTIVITY_JOB_START',0,3,25
	.byte	'NVM_PRV_ACTIVITY_POLL_RESULT',0,4,25
	.byte	'NVM_PRV_ACTIVITY_JOB_COMPLETE',0,5,25
	.byte	'NVM_PRV_ACTIVITY_RESULT_EVAL',0,6,0,23
	.byte	'NvM_Prv_Activities_ten',0,53,58,3
	.word	29081
	.byte	24,53,104,9,4,25
	.byte	'NvM_Prv_idJob_Idle_e',0,0,25
	.byte	'NvM_Prv_idJob_Read_e',0,1,25
	.byte	'NvM_Prv_idJob_Write_e',0,2,25
	.byte	'NvM_Prv_idJob_Erase_e',0,3,25
	.byte	'NvM_Prv_idJob_Restore_e',0,4,25
	.byte	'NvM_Prv_idJob_Maintain_e',0,5,25
	.byte	'NvM_Prv_idJob_Validate_e',0,6,25
	.byte	'NvM_Prv_idJob_Invalidate_e',0,7,25
	.byte	'NvM_Prv_idJob_ReadIdConfigForReadAll_e',0,8,25
	.byte	'NvM_Prv_idJob_InvalidateForFirstInitAll_e',0,9,25
	.byte	'NvM_Prv_idJob_RestoreForImplicitRecovery_e',0,10,25
	.byte	'NvM_Prv_idJob_InvalidateForRemoveNonResistant_e',0,11,25
	.byte	'NvM_Prv_idJob_Invalid_e',0,12,25
	.byte	'NvM_Prv_idJob_Count_e',0,13,0,23
	.byte	'NvM_Prv_idJob_ten',0,53,115,3
	.word	29322
	.byte	23
	.byte	'NvM_Prv_ServiceBit_tuo',0,53,168,1,16
	.word	861
	.byte	23
	.byte	'NvM_Prv_idService_tuo',0,53,173,1,15
	.word	144
	.byte	23
	.byte	'NvM_Prv_idQueue_tuo',0,53,206,1,15
	.word	144
	.byte	10,53,210,1,9,12,11
	.byte	'idService_uo',0
	.word	144
	.byte	1,2,35,0,11
	.byte	'idBlock_uo',0
	.word	861
	.byte	2,2,35,2,11
	.byte	'ServiceBit_uo',0
	.word	861
	.byte	2,2,35,4,11
	.byte	'BlockData_pv',0
	.word	18892
	.byte	4,2,35,8,0,23
	.byte	'NvM_Prv_QueueEntry_tst',0,53,225,1,3
	.word	29879
	.byte	10,53,227,1,9,20,11
	.byte	'idJob_en',0
	.word	29322
	.byte	4,2,35,0,11
	.byte	'idBlock_uo',0
	.word	861
	.byte	2,2,35,4,11
	.byte	'RamBlock_pu8',0
	.word	161
	.byte	4,2,35,8,11
	.byte	'idxDataset_u8',0
	.word	144
	.byte	1,2,35,12,11
	.byte	'Result_en',0
	.word	28923
	.byte	4,2,35,16,0,23
	.byte	'NvM_Prv_JobData_tst',0,53,240,1,3
	.word	30005
	.byte	14,5
	.word	144
	.byte	15,4,0,14,10
	.word	861
	.byte	15,4,0,10,54,9,9,18,11
	.byte	'OperationCycleStates',0
	.word	144
	.byte	1,2,35,0,11
	.byte	'OperationCycleQualified',0
	.word	144
	.byte	1,2,35,1,11
	.byte	'Overflow',0
	.word	30143
	.byte	5,2,35,2,11
	.byte	'DtcIdsByOccurrenceTime',0
	.word	30152
	.byte	10,2,35,8,0,23
	.byte	'Dem_GenericNvDataType',0,54,24,4
	.word	30161
	.byte	23
	.byte	'Dem_NvmBlockIdType',0,55,14,34
	.word	144
	.byte	13,55,16,9,20,11
	.byte	'evMemData',0
	.word	5715
	.byte	20,2,35,0,11
	.byte	'genericNvData',0
	.word	30161
	.byte	18,2,35,0,0,23
	.byte	'Dem_NvMStorageBufferData',0,55,37,3
	.word	30337
	.byte	23
	.byte	'Dem_NvmBlockStatusType',0,55,59,15
	.word	144
	.byte	23
	.byte	'Dem_NvmResultType',0,55,78,31
	.word	144
	.byte	3
	.word	144
	.byte	34
	.word	144
	.byte	1,1,30
	.word	30475
	.byte	0,3
	.word	30480
	.byte	23
	.byte	'Dem_EvtClearAllowedFncType',0,14,12,26
	.word	30493
	.byte	10,14,31,9,2,11
	.byte	'dataDataContainer_2',0
	.word	861
	.byte	2,2,35,0,0,23
	.byte	'Dem_EvtParam_16Type',0,14,34,3
	.word	30533
	.byte	14,12
	.word	30533
	.byte	15,5,0,9
	.word	30596
	.byte	33
	.byte	'Dem_EvtParam_16',0,14,38,34
	.word	30605
	.byte	1,1,34
	.word	144
	.byte	1,1,30
	.word	144
	.byte	0,3
	.word	30636
	.byte	23
	.byte	'Dem_InitMForEAllowedFncType',0,15,38,27
	.word	30649
	.byte	23
	.byte	'Dem_EnvTriggerParamType',0,16,14,3
	.word	9541
	.byte	9
	.word	18886
	.byte	3
	.word	30722
	.byte	34
	.word	4860
	.byte	1,1,30
	.word	861
	.byte	30
	.word	30475
	.byte	30
	.word	30727
	.byte	30
	.word	861
	.byte	0,3
	.word	30732
	.byte	23
	.byte	'Dem_DebFilter',0,56,12,23
	.word	30760
	.byte	2
	.byte	'long int',0,4,5,3
	.word	30787
	.byte	29,1,1,30
	.word	30727
	.byte	30
	.word	861
	.byte	30
	.word	30799
	.byte	30
	.word	30799
	.byte	0,3
	.word	30804
	.byte	23
	.byte	'Dem_DebGetLimits',0,56,13,23
	.word	30828
	.byte	29,1,1,30
	.word	861
	.byte	30
	.word	30727
	.byte	30
	.word	861
	.byte	0,3
	.word	30858
	.byte	23
	.byte	'Dem_DebCyclic',0,56,14,16
	.word	30877
	.byte	23
	.byte	'Dem_DebouncedActionType',0,56,35,21
	.word	4860
	.byte	13,57,37,9,4,11
	.byte	'EnforceAlignment',0
	.word	1372
	.byte	4,2,35,0,11
	.byte	'Buffer',0
	.word	22592
	.byte	4,2,35,0,0,23
	.byte	'Dem_EvBuffEnvDataAlignedType',0,57,47,3
	.word	30936
	.byte	10,57,49,9,16,11
	.byte	'envData',0
	.word	30936
	.byte	4,2,35,0,11
	.byte	'eventType',0
	.word	144
	.byte	1,2,35,4,11
	.byte	'eventId',0
	.word	861
	.byte	2,2,35,6,11
	.byte	'debug0',0
	.word	1372
	.byte	4,2,35,8,11
	.byte	'debug1',0
	.word	1372
	.byte	4,2,35,12,0,23
	.byte	'Dem_EvBuffEvent',0,57,75,2
	.word	31021
	.byte	14,100
	.word	5715
	.byte	15,4,0,33
	.byte	'Dem_EvMemEventMemory',0,20,87,1
	.word	31136
	.byte	1,1,10,23,23,9,2,11
	.byte	'evMemId',0
	.word	144
	.byte	1,2,35,0,11
	.byte	'originSupported',0
	.word	144
	.byte	1,2,35,1,0,23
	.byte	'Dem_EvMemMapOrigin2IdType',0,23,26,3
	.word	31176
	.byte	14,10
	.word	31176
	.byte	15,4,0,9
	.word	31258
	.byte	33
	.byte	'Dem_EvMemMapOrigin2Id',0,23,30,1
	.word	31267
	.byte	1,1,23
	.byte	'Dem_InternalEnvData',0,25,25,3
	.word	8730
	.byte	23
	.byte	'Dem_ReadExternalDataElementFnc',0,24,11,26
	.word	30493
	.byte	9
	.word	8730
	.byte	3
	.word	31371
	.byte	34
	.word	144
	.byte	1,1,30
	.word	30475
	.byte	30
	.word	31376
	.byte	0,3
	.word	31381
	.byte	23
	.byte	'Dem_ReadInternalDataElementFnc',0,24,12,26
	.word	31399
	.byte	10,29,29,9,1,11
	.byte	'state',0
	.word	144
	.byte	1,2,35,0,0,23
	.byte	'Dem_DtcState',0,29,31,3
	.word	31443
	.byte	14,5
	.word	31443
	.byte	15,4,0,33
	.byte	'Dem_AllDTCsState',0,29,92,5
	.word	31485
	.byte	1,1,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L331:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32
	.byte	13,58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,11,1,0,0,8,46
	.byte	1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,38,0,73,19,0,0,10,19,1,58,15,59,15,57,15,11,15,0
	.byte	0,11,13,0,3,8,73,19,11,15,56,9,0,0,12,53,0,73,19,0,0,13,23,1,58,15,59,15,57,15,11,15,0,0,14,1,1,11,15
	.byte	73,19,0,0,15,33,0,47,15,0,0,16,46,1,49,19,0,0,17,5,0,49,19,0,0,18,29,1,49,19,0,0,19,11,0,49,19,0,0,20
	.byte	46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,21,11,1,49,19,0,0,22,21,0,54,15,0,0,23,22
	.byte	0,3,8,58,15,59,15,57,15,73,19,0,0,24,4,1,58,15,59,15,57,15,11,15,0,0,25,40,0,3,8,28,13,0,0,26,21,0,54
	.byte	15,39,12,0,0,27,19,1,3,8,58,15,59,15,57,15,11,15,0,0,28,59,0,3,8,0,0,29,21,1,54,15,39,12,0,0,30,5,0,73
	.byte	19,0,0,31,4,1,3,8,58,15,59,15,57,15,11,15,0,0,32,21,0,73,19,54,15,39,12,0,0,33,52,0,3,8,58,15,59,15,57
	.byte	15,73,19,63,12,60,12,0,0,34,21,1,73,19,54,15,39,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L332:
	.word	.L1062-.L1061
.L1061:
	.half	3
	.word	.L1064-.L1063
.L1063:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits32.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_MemUtils.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_Lib.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTC_DataStructures.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_BitArray.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\enco\\Dem_EnableCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_ByteOrderUtils.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvTrigger.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\deb\\Dem_Deb.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientBaseHandling.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientClearMachine.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemTypes.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemAging.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMem.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvDataElement.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_InternalEnvData.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvExtendedDataRec.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvDid.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvFFRecNumeration.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\api\\Dem_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Det\\api\\Det.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvMain.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientHandlingTypes.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_NodeId.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_EnableCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_OperationCycle.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_StorageCondition.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Intl.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_Main.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\MemIf\\api\\MemIf_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\NvM\\api\\NvM_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_GenericNvData.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\deb\\Dem_DebBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuffEvent.h',0,0,0,0,0
.L1064:
.L1062:
	.sdecl	'.debug_info',debug,cluster('Dem_SetFreezeFrameRecordFilter')
	.sect	'.debug_info'
.L333:
	.word	1131
	.half	3
	.word	.L334
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L336,.L335
	.byte	2
	.word	.L329
	.byte	3
	.byte	'Dem_SetFreezeFrameRecordFilter',0,1,186,4,25
	.word	.L413
	.byte	1,1,1
	.word	.L320,.L414,.L319
	.byte	4
	.byte	'DTCFormat',0,1,186,4,74
	.word	.L413,.L415
	.byte	4
	.byte	'NumberOfFilteredRecords',0,1,186,4,93
	.word	.L416,.L417
	.byte	5
	.word	.L320,.L414
	.byte	6
	.byte	'LocId',0,1,188,4,15
	.word	.L418,.L419
	.byte	7
	.word	.L420,.L421,.L422
	.byte	8
	.word	.L423,.L424
	.byte	8
	.word	.L425,.L426
	.byte	9
	.word	.L427,.L421,.L422
	.byte	7
	.word	.L428,.L421,.L171
	.byte	8
	.word	.L429,.L430
	.byte	10
	.word	.L431,.L421,.L171
	.byte	0,0,0,7
	.word	.L432,.L433,.L175
	.byte	8
	.word	.L434,.L435
	.byte	9
	.word	.L436,.L433,.L175
	.byte	7
	.word	.L437,.L438,.L174
	.byte	8
	.word	.L439,.L440
	.byte	10
	.word	.L441,.L438,.L174
	.byte	0,0,0,7
	.word	.L442,.L175,.L176
	.byte	10
	.word	.L443,.L175,.L176
	.byte	0,7
	.word	.L444,.L445,.L446
	.byte	8
	.word	.L447,.L448
	.byte	8
	.word	.L449,.L450
	.byte	9
	.word	.L451,.L445,.L446
	.byte	7
	.word	.L452,.L453,.L177
	.byte	8
	.word	.L454,.L455
	.byte	10
	.word	.L456,.L453,.L177
	.byte	0,7
	.word	.L457,.L458,.L179
	.byte	8
	.word	.L459,.L460
	.byte	10
	.word	.L461,.L458,.L179
	.byte	0,7
	.word	.L442,.L462,.L181
	.byte	10
	.word	.L443,.L462,.L181
	.byte	0,0,0,7
	.word	.L463,.L446,.L186
	.byte	8
	.word	.L464,.L465
	.byte	10
	.word	.L466,.L446,.L186
	.byte	0,7
	.word	.L463,.L467,.L187
	.byte	8
	.word	.L464,.L465
	.byte	10
	.word	.L466,.L467,.L187
	.byte	0,7
	.word	.L468,.L469,.L190
	.byte	8
	.word	.L470,.L471
	.byte	9
	.word	.L472,.L469,.L190
	.byte	7
	.word	.L473,.L474,.L189
	.byte	8
	.word	.L475,.L476
	.byte	10
	.word	.L477,.L474,.L189
	.byte	0,0,0,7
	.word	.L478,.L190,.L191
	.byte	8
	.word	.L479,.L480
	.byte	10
	.word	.L481,.L190,.L191
	.byte	0,7
	.word	.L442,.L191,.L192
	.byte	10
	.word	.L443,.L191,.L192
	.byte	0,7
	.word	.L482,.L483,.L195
	.byte	8
	.word	.L484,.L485
	.byte	11
	.word	.L486,.L487
	.byte	7
	.word	.L490,.L491,.L194
	.byte	8
	.word	.L492,.L493
	.byte	10
	.word	.L494,.L491,.L194
	.byte	0,0,0,7
	.word	.L482,.L488,.L489
	.byte	8
	.word	.L484,.L485
	.byte	0,7
	.word	.L495,.L185,.L172
	.byte	8
	.word	.L496,.L497
	.byte	8
	.word	.L498,.L499
	.byte	10
	.word	.L500,.L185,.L172
	.byte	0,7
	.word	.L501,.L172,.L197
	.byte	8
	.word	.L502,.L503
	.byte	8
	.word	.L504,.L505
	.byte	9
	.word	.L506,.L172,.L197
	.byte	7
	.word	.L507,.L172,.L196
	.byte	8
	.word	.L508,.L509
	.byte	10
	.word	.L510,.L172,.L196
	.byte	0,0,0,7
	.word	.L420,.L511,.L512
	.byte	8
	.word	.L423,.L424
	.byte	8
	.word	.L425,.L426
	.byte	9
	.word	.L427,.L511,.L512
	.byte	7
	.word	.L428,.L511,.L198
	.byte	8
	.word	.L429,.L430
	.byte	10
	.word	.L431,.L511,.L198
	.byte	0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_SetFreezeFrameRecordFilter')
	.sect	'.debug_abbrev'
.L334:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17
	.byte	1,18,1,0,0,10,11,0,49,16,17,1,18,1,0,0,11,11,1,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_SetFreezeFrameRecordFilter')
	.sect	'.debug_line'
.L335:
	.word	.L1066-.L1065
.L1065:
	.half	3
	.word	.L1068-.L1067
.L1067:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_Lib.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0,0
.L1068:
	.byte	5,25,7,0,5,2
	.word	.L320
	.byte	3,185,4,1,5,4,9
	.half	.L1040-.L320
	.byte	3,6,1,5,14,7,9
	.half	.L1069-.L1040
	.byte	3,2,1,5,7,9
	.half	.L1070-.L1069
	.byte	1,5,29,9
	.half	.L169-.L1070
	.byte	3,5,1,5,27,9
	.half	.L1071-.L169
	.byte	1,5,48,9
	.half	.L1072-.L1071
	.byte	3,7,1,4,2,5,2,9
	.half	.L421-.L1072
	.byte	3,59,1,5,12,9
	.half	.L171-.L421
	.byte	3,20,1,4,1,5,103,9
	.half	.L422-.L171
	.byte	3,178,127,1,5,54,9
	.half	.L173-.L422
	.byte	3,3,1,4,2,5,45,9
	.half	.L433-.L173
	.byte	3,187,124,1,5,65,9
	.half	.L1073-.L433
	.byte	1,5,33,9
	.half	.L438-.L1073
	.byte	3,123,1,5,5,9
	.half	.L1074-.L438
	.byte	1,9
	.half	.L174-.L1074
	.byte	3,5,1,5,2,9
	.half	.L175-.L174
	.byte	3,231,3,1,4,1,5,113,9
	.half	.L176-.L175
	.byte	3,94,1,4,2,5,59,9
	.half	.L445-.L176
	.byte	3,39,1,5,67,9
	.half	.L453-.L445
	.byte	3,87,1,5,39,9
	.half	.L1075-.L453
	.byte	1,5,100,9
	.half	.L1076-.L1075
	.byte	1,5,97,9
	.half	.L1077-.L1076
	.byte	1,5,4,9
	.half	.L1078-.L1077
	.byte	1,5,30,9
	.half	.L177-.L1078
	.byte	3,41,1,5,39,7,9
	.half	.L458-.L177
	.byte	3,92,1,5,97,9
	.half	.L1079-.L458
	.byte	1,5,4,9
	.half	.L1080-.L1079
	.byte	1,5,26,9
	.half	.L179-.L1080
	.byte	3,37,1,5,2,7,9
	.half	.L462-.L179
	.byte	3,122,1,5,83,9
	.half	.L181-.L462
	.byte	3,6,1,5,89,7,9
	.half	.L1081-.L181
	.byte	1,5,59,7,9
	.half	.L178-.L1081
	.byte	3,127,1,5,2,9
	.half	.L180-.L178
	.byte	1,4,1,5,3,9
	.half	.L184-.L180
	.byte	3,89,1,4,3,5,5,7,9
	.half	.L446-.L184
	.byte	3,212,123,1,4,1,5,65,9
	.half	.L186-.L446
	.byte	3,175,4,1,4,3,5,5,9
	.half	.L467-.L186
	.byte	3,209,123,1,4,1,5,4,9
	.half	.L187-.L467
	.byte	3,175,4,1,4,2,5,66,7,9
	.half	.L469-.L187
	.byte	3,202,124,1,5,33,9
	.half	.L474-.L469
	.byte	3,123,1,5,5,9
	.half	.L1082-.L474
	.byte	1,9
	.half	.L189-.L1082
	.byte	3,5,1,4,4,5,11,9
	.half	.L190-.L189
	.byte	3,1,1,5,32,9
	.half	.L1083-.L190
	.byte	1,5,4,9
	.half	.L1084-.L1083
	.byte	1,4,2,5,2,9
	.half	.L191-.L1084
	.byte	3,212,3,1,4,1,5,145,1,9
	.half	.L192-.L191
	.byte	3,99,1,5,202,1,9
	.half	.L1085-.L192
	.byte	1,5,17,9
	.half	.L188-.L1085
	.byte	3,3,1,5,4,9
	.half	.L1041-.L188
	.byte	1,4,2,5,76,7,9
	.half	.L483-.L1041
	.byte	3,162,127,1,5,36,9
	.half	.L491-.L483
	.byte	3,119,1,5,4,9
	.half	.L1086-.L491
	.byte	1,9
	.half	.L194-.L1086
	.byte	3,9,1,4,1,5,32,9
	.half	.L195-.L194
	.byte	3,224,0,1,5,57,9
	.half	.L488-.L195
	.byte	1,5,30,9
	.half	.L489-.L488
	.byte	1,4,2,5,7,9
	.half	.L185-.L489
	.byte	3,206,0,1,5,13,9
	.half	.L1087-.L185
	.byte	1,5,2,9
	.half	.L172-.L1087
	.byte	3,106,1,5,32,9
	.half	.L196-.L172
	.byte	3,15,1,5,39,9
	.half	.L1088-.L196
	.byte	1,5,5,9
	.half	.L1089-.L1088
	.byte	1,4,1,5,103,9
	.half	.L197-.L1089
	.byte	3,172,127,1,4,2,5,2,7,9
	.half	.L511-.L197
	.byte	3,58,1,5,12,9
	.half	.L198-.L511
	.byte	3,20,1,4,1,5,2,9
	.half	.L512-.L198
	.byte	3,70,1,5,41,9
	.half	.L1090-.L512
	.byte	1,5,39,9
	.half	.L1091-.L1090
	.byte	1,5,9,9
	.half	.L1092-.L1091
	.byte	3,2,1,5,2,9
	.half	.L1093-.L1092
	.byte	1,5,1,9
	.half	.L170-.L1093
	.byte	3,1,1,7,9
	.half	.L337-.L170
	.byte	0,1,1
.L1066:
	.sdecl	'.debug_ranges',debug,cluster('Dem_SetFreezeFrameRecordFilter')
	.sect	'.debug_ranges'
.L336:
	.word	-1,.L320,0,.L337-.L320,0,0
.L487:
	.word	-1,.L320,.L483-.L320,.L195-.L320,.L488-.L320,.L489-.L320,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetNextFilteredRecord')
	.sect	'.debug_info'
.L338:
	.word	1769
	.half	3
	.word	.L339
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L341,.L340
	.byte	2
	.word	.L329
	.byte	3
	.byte	'Dem_GetNextFilteredRecord',0,1,248,4,34
	.word	.L413
	.byte	1,1,1
	.word	.L322,.L513,.L321
	.byte	4
	.byte	'DTC',0,1,248,4,68
	.word	.L514,.L515
	.byte	4
	.byte	'RecordNumber',0,1,248,4,80
	.word	.L516,.L517
	.byte	5
	.word	.L322,.L513
	.byte	6
	.byte	'LocId',0,1,250,4,18
	.word	.L418,.L518
	.byte	6
	.byte	'Status',0,1,251,4,15
	.word	.L418,.L519
	.byte	6
	.byte	'EventId',0,1,252,4,18
	.word	.L520,.L521
	.byte	6
	.byte	'FreezeFrameCounter',0,1,253,4,15
	.word	.L418,.L522
	.byte	7
	.word	.L432,.L523,.L203
	.byte	8
	.word	.L434,.L524
	.byte	9
	.word	.L436,.L523,.L203
	.byte	7
	.word	.L437,.L525,.L202
	.byte	8
	.word	.L439,.L526
	.byte	10
	.word	.L441,.L525,.L202
	.byte	0,0,0,7
	.word	.L468,.L203,.L205
	.byte	8
	.word	.L470,.L527
	.byte	9
	.word	.L472,.L203,.L205
	.byte	7
	.word	.L473,.L528,.L204
	.byte	8
	.word	.L475,.L529
	.byte	10
	.word	.L477,.L528,.L204
	.byte	0,0,0,7
	.word	.L482,.L205,.L207
	.byte	8
	.word	.L484,.L530
	.byte	11
	.word	.L486,.L531
	.byte	7
	.word	.L490,.L534,.L206
	.byte	8
	.word	.L492,.L535
	.byte	10
	.word	.L494,.L534,.L206
	.byte	0,0,0,7
	.word	.L442,.L207,.L208
	.byte	10
	.word	.L443,.L207,.L208
	.byte	0,7
	.word	.L444,.L536,.L537
	.byte	8
	.word	.L447,.L538
	.byte	8
	.word	.L449,.L539
	.byte	9
	.word	.L451,.L536,.L537
	.byte	7
	.word	.L452,.L540,.L209
	.byte	8
	.word	.L454,.L541
	.byte	10
	.word	.L456,.L540,.L209
	.byte	0,7
	.word	.L457,.L542,.L211
	.byte	8
	.word	.L459,.L543
	.byte	10
	.word	.L461,.L542,.L211
	.byte	0,7
	.word	.L442,.L544,.L213
	.byte	10
	.word	.L443,.L544,.L213
	.byte	0,0,0,7
	.word	.L463,.L537,.L218
	.byte	8
	.word	.L464,.L545
	.byte	10
	.word	.L466,.L537,.L218
	.byte	0,7
	.word	.L463,.L546,.L219
	.byte	8
	.word	.L464,.L545
	.byte	10
	.word	.L466,.L546,.L219
	.byte	0,7
	.word	.L478,.L547,.L222
	.byte	8
	.word	.L479,.L548
	.byte	10
	.word	.L481,.L547,.L222
	.byte	0,7
	.word	.L442,.L222,.L223
	.byte	10
	.word	.L443,.L222,.L223
	.byte	0,7
	.word	.L463,.L549,.L225
	.byte	8
	.word	.L464,.L545
	.byte	10
	.word	.L466,.L549,.L225
	.byte	0,7
	.word	.L463,.L550,.L226
	.byte	8
	.word	.L464,.L545
	.byte	10
	.word	.L466,.L550,.L226
	.byte	0,7
	.word	.L482,.L532,.L533
	.byte	8
	.word	.L484,.L530
	.byte	0,7
	.word	.L551,.L552,.L229
	.byte	8
	.word	.L553,.L554
	.byte	8
	.word	.L555,.L556
	.byte	10
	.word	.L557,.L552,.L229
	.byte	0,7
	.word	.L478,.L558,.L231
	.byte	8
	.word	.L479,.L548
	.byte	10
	.word	.L481,.L558,.L231
	.byte	0,7
	.word	.L559,.L231,.L233
	.byte	8
	.word	.L560,.L561
	.byte	11
	.word	.L562,.L563
	.byte	7
	.word	.L566,.L231,.L232
	.byte	8
	.word	.L567,.L568
	.byte	10
	.word	.L569,.L231,.L232
	.byte	0,0,0,7
	.word	.L559,.L564,.L565
	.byte	8
	.word	.L560,.L561
	.byte	0,7
	.word	.L551,.L570,.L239
	.byte	8
	.word	.L553,.L554
	.byte	8
	.word	.L555,.L556
	.byte	10
	.word	.L557,.L570,.L239
	.byte	0,7
	.word	.L571,.L572,.L240
	.byte	8
	.word	.L573,.L574
	.byte	10
	.word	.L575,.L572,.L240
	.byte	0,7
	.word	.L576,.L577,.L242
	.byte	8
	.word	.L578,.L579
	.byte	9
	.word	.L580,.L577,.L242
	.byte	7
	.word	.L581,.L582,.L241
	.byte	8
	.word	.L583,.L584
	.byte	10
	.word	.L585,.L582,.L241
	.byte	0,0,0,7
	.word	.L586,.L242,.L244
	.byte	8
	.word	.L587,.L588
	.byte	8
	.word	.L589,.L590
	.byte	11
	.word	.L591,.L592
	.byte	7
	.word	.L595,.L596,.L243
	.byte	8
	.word	.L597,.L598
	.byte	10
	.word	.L599,.L596,.L243
	.byte	0,0,0,7
	.word	.L586,.L593,.L594
	.byte	8
	.word	.L587,.L588
	.byte	8
	.word	.L589,.L590
	.byte	0,7
	.word	.L478,.L594,.L247
	.byte	8
	.word	.L479,.L548
	.byte	10
	.word	.L481,.L594,.L247
	.byte	0,7
	.word	.L559,.L247,.L249
	.byte	8
	.word	.L560,.L561
	.byte	11
	.word	.L562,.L600
	.byte	7
	.word	.L566,.L247,.L248
	.byte	8
	.word	.L567,.L568
	.byte	10
	.word	.L569,.L247,.L248
	.byte	0,0,0,7
	.word	.L559,.L601,.L602
	.byte	8
	.word	.L560,.L561
	.byte	0,7
	.word	.L603,.L251,.L253
	.byte	8
	.word	.L604,.L605
	.byte	9
	.word	.L606,.L251,.L253
	.byte	7
	.word	.L607,.L608,.L252
	.byte	8
	.word	.L609,.L610
	.byte	8
	.word	.L611,.L612
	.byte	8
	.word	.L613,.L614
	.byte	9
	.word	.L615,.L608,.L252
	.byte	6
	.byte	'bit2shift',0,2,72,12
	.word	.L520,.L616
	.byte	0,0,0,0,7
	.word	.L495,.L217,.L200
	.byte	8
	.word	.L496,.L617
	.byte	8
	.word	.L498,.L618
	.byte	10
	.word	.L500,.L217,.L200
	.byte	0,7
	.word	.L501,.L200,.L255
	.byte	8
	.word	.L502,.L619
	.byte	8
	.word	.L504,.L620
	.byte	9
	.word	.L506,.L200,.L255
	.byte	7
	.word	.L507,.L200,.L254
	.byte	8
	.word	.L508,.L621
	.byte	10
	.word	.L510,.L200,.L254
	.byte	0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetNextFilteredRecord')
	.sect	'.debug_abbrev'
.L339:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17
	.byte	1,18,1,0,0,10,11,0,49,16,17,1,18,1,0,0,11,11,1,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetNextFilteredRecord')
	.sect	'.debug_line'
.L340:
	.word	.L1095-.L1094
.L1094:
	.half	3
	.word	.L1097-.L1096
.L1096:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_Lib.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvFFRecNumeration.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTC_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvTrigger.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0,0
.L1097:
	.byte	5,34,7,0,5,2
	.word	.L322
	.byte	3,247,4,1,5,40,9
	.half	.L1044-.L322
	.byte	3,10,1,5,108,9
	.half	.L1098-.L1044
	.byte	3,125,1,5,40,9
	.half	.L201-.L1098
	.byte	3,3,1,4,3,5,45,9
	.half	.L523-.L201
	.byte	3,139,124,1,5,65,9
	.half	.L1099-.L523
	.byte	1,5,33,9
	.half	.L525-.L1099
	.byte	3,123,1,5,5,9
	.half	.L1045-.L525
	.byte	1,9
	.half	.L202-.L1045
	.byte	3,5,1,5,66,9
	.half	.L203-.L202
	.byte	3,18,1,5,33,9
	.half	.L528-.L203
	.byte	3,123,1,5,5,9
	.half	.L1047-.L528
	.byte	1,9
	.half	.L204-.L1047
	.byte	3,5,1,5,76,9
	.half	.L205-.L204
	.byte	3,221,2,1,5,36,9
	.half	.L534-.L205
	.byte	3,119,1,5,4,9
	.half	.L1100-.L534
	.byte	1,9
	.half	.L206-.L1100
	.byte	3,9,1,5,2,9
	.half	.L207-.L206
	.byte	3,248,0,1,4,1,5,63,9
	.half	.L208-.L207
	.byte	3,19,1,4,3,5,59,9
	.half	.L536-.L208
	.byte	3,114,1,5,67,9
	.half	.L540-.L536
	.byte	3,87,1,5,39,9
	.half	.L1101-.L540
	.byte	1,5,100,9
	.half	.L1102-.L1101
	.byte	1,5,97,9
	.half	.L1103-.L1102
	.byte	1,5,4,9
	.half	.L1104-.L1103
	.byte	1,5,30,9
	.half	.L209-.L1104
	.byte	3,41,1,5,39,7,9
	.half	.L542-.L209
	.byte	3,92,1,5,97,9
	.half	.L1046-.L542
	.byte	1,5,4,9
	.half	.L1105-.L1046
	.byte	1,5,26,9
	.half	.L211-.L1105
	.byte	3,37,1,5,2,7,9
	.half	.L544-.L211
	.byte	3,122,1,5,83,9
	.half	.L213-.L544
	.byte	3,6,1,5,89,7,9
	.half	.L1106-.L213
	.byte	1,5,59,7,9
	.half	.L210-.L1106
	.byte	3,127,1,5,2,9
	.half	.L212-.L210
	.byte	1,4,1,5,3,9
	.half	.L216-.L212
	.byte	3,14,1,4,4,5,5,7,9
	.half	.L537-.L216
	.byte	3,159,123,1,4,1,5,74,9
	.half	.L218-.L537
	.byte	3,227,4,1,4,4,5,5,9
	.half	.L546-.L218
	.byte	3,157,123,1,4,1,5,13,9
	.half	.L219-.L546
	.byte	3,227,4,1,5,21,7,9
	.half	.L1107-.L219
	.byte	3,2,1,5,17,9
	.half	.L1108-.L1107
	.byte	1,4,5,5,11,7,9
	.half	.L547-.L1108
	.byte	3,149,124,1,5,32,9
	.half	.L1109-.L547
	.byte	1,5,4,9
	.half	.L1110-.L1109
	.byte	1,4,3,5,2,9
	.half	.L222-.L1110
	.byte	3,212,3,1,4,1,5,21,9
	.half	.L223-.L222
	.byte	3,26,1,5,78,9
	.half	.L1111-.L223
	.byte	1,5,34,9
	.half	.L1048-.L1111
	.byte	3,1,1,5,21,9
	.half	.L1112-.L1048
	.byte	1,5,61,7,9
	.half	.L1113-.L1112
	.byte	3,3,1,5,59,9
	.half	.L1114-.L1113
	.byte	1,5,21,9
	.half	.L220-.L1114
	.byte	3,121,1,4,4,5,5,9
	.half	.L549-.L220
	.byte	3,155,123,1,4,1,5,76,9
	.half	.L225-.L549
	.byte	3,240,4,1,4,4,5,5,9
	.half	.L550-.L225
	.byte	3,144,123,1,4,1,5,21,9
	.half	.L226-.L550
	.byte	3,243,4,1,5,13,9
	.half	.L1115-.L226
	.byte	3,125,1,5,17,7,9
	.half	.L532-.L1115
	.byte	3,3,1,5,74,7,9
	.half	.L533-.L532
	.byte	3,2,1,4,6,5,14,9
	.half	.L552-.L533
	.byte	3,132,123,1,5,2,9
	.half	.L1116-.L552
	.byte	1,4,1,5,35,9
	.half	.L229-.L1116
	.byte	3,252,4,1,4,5,5,11,9
	.half	.L558-.L229
	.byte	3,133,124,1,5,32,9
	.half	.L1117-.L558
	.byte	1,5,4,9
	.half	.L1118-.L1117
	.byte	1,4,7,5,20,9
	.half	.L231-.L1118
	.byte	3,70,1,5,9,9
	.half	.L1119-.L231
	.byte	1,5,20,9
	.half	.L1120-.L1119
	.byte	1,5,26,9
	.half	.L1121-.L1120
	.byte	1,5,2,9
	.half	.L1122-.L1121
	.byte	1,4,8,5,9,9
	.half	.L232-.L1122
	.byte	3,138,1,1,4,1,5,26,9
	.half	.L233-.L232
	.byte	3,184,3,1,5,57,9
	.half	.L565-.L233
	.byte	3,4,1,5,28,9
	.half	.L1123-.L565
	.byte	3,1,1,5,21,9
	.half	.L1124-.L1123
	.byte	1,5,60,9
	.half	.L228-.L1124
	.byte	3,4,1,5,58,9
	.half	.L1125-.L228
	.byte	1,5,61,9
	.half	.L1126-.L1125
	.byte	1,9
	.half	.L227-.L1126
	.byte	3,6,1,5,17,9
	.half	.L1127-.L227
	.byte	1,5,119,7,9
	.half	.L1128-.L1127
	.byte	3,3,1,5,86,9
	.half	.L238-.L1128
	.byte	3,3,1,5,78,9
	.half	.L1129-.L238
	.byte	1,4,6,5,14,9
	.half	.L570-.L1129
	.byte	3,226,122,1,5,2,9
	.half	.L1130-.L570
	.byte	1,4,1,5,39,9
	.half	.L239-.L1130
	.byte	3,158,5,1,4,6,5,5,9
	.half	.L572-.L239
	.byte	3,232,122,1,4,1,5,73,9
	.half	.L240-.L572
	.byte	3,154,5,1,5,119,9
	.half	.L1131-.L240
	.byte	1,4,3,5,65,9
	.half	.L577-.L1131
	.byte	3,220,126,1,5,22,9
	.half	.L582-.L577
	.byte	3,119,1,5,4,9
	.half	.L1132-.L582
	.byte	1,9
	.half	.L241-.L1132
	.byte	3,9,1,4,9,5,40,9
	.half	.L242-.L241
	.byte	3,130,124,1,5,42,9
	.half	.L596-.L242
	.byte	3,123,1,5,2,9
	.half	.L1133-.L596
	.byte	1,9
	.half	.L243-.L1133
	.byte	3,5,1,4,1,5,65,9
	.half	.L244-.L243
	.byte	3,178,5,1,5,25,9
	.half	.L593-.L244
	.byte	3,112,1,4,5,5,11,7,9
	.half	.L594-.L593
	.byte	3,225,123,1,5,32,9
	.half	.L1134-.L594
	.byte	1,5,4,9
	.half	.L1135-.L1134
	.byte	1,4,7,5,20,9
	.half	.L247-.L1135
	.byte	3,70,1,5,9,9
	.half	.L1136-.L247
	.byte	1,5,20,9
	.half	.L1137-.L1136
	.byte	1,5,26,9
	.half	.L1138-.L1137
	.byte	1,5,2,9
	.half	.L1139-.L1138
	.byte	1,4,8,5,9,9
	.half	.L248-.L1139
	.byte	3,138,1,1,4,1,5,34,9
	.half	.L249-.L248
	.byte	3,220,3,1,5,65,9
	.half	.L602-.L249
	.byte	3,3,1,5,36,9
	.half	.L1140-.L602
	.byte	3,2,1,5,29,9
	.half	.L1141-.L1140
	.byte	1,5,61,9
	.half	.L245-.L1141
	.byte	3,2,1,4,10,5,39,9
	.half	.L251-.L245
	.byte	3,242,123,1,5,54,9
	.half	.L1142-.L251
	.byte	1,5,60,9
	.half	.L1143-.L1142
	.byte	1,4,2,5,22,9
	.half	.L608-.L1143
	.byte	3,131,127,1,5,19,9
	.half	.L1049-.L608
	.byte	3,1,1,5,42,9
	.half	.L1144-.L1049
	.byte	3,1,1,5,19,9
	.half	.L1050-.L1144
	.byte	1,5,5,9
	.half	.L1145-.L1050
	.byte	3,1,1,4,10,5,9,9
	.half	.L252-.L1145
	.byte	3,250,0,1,5,2,9
	.half	.L1146-.L252
	.byte	1,4,1,5,28,9
	.half	.L253-.L1146
	.byte	3,245,3,1,5,119,9
	.half	.L1147-.L253
	.byte	1,5,56,7,9
	.half	.L236-.L1147
	.byte	3,29,1,5,54,9
	.half	.L1148-.L236
	.byte	1,4,3,5,7,9
	.half	.L217-.L1148
	.byte	3,83,1,5,13,9
	.half	.L1149-.L217
	.byte	1,5,2,9
	.half	.L200-.L1149
	.byte	3,106,1,5,32,9
	.half	.L254-.L200
	.byte	3,15,1,5,39,9
	.half	.L1150-.L254
	.byte	1,5,5,9
	.half	.L1151-.L1150
	.byte	1,4,1,5,108,9
	.half	.L255-.L1151
	.byte	3,92,1,5,9,7,9
	.half	.L1152-.L255
	.byte	3,221,0,1,5,2,9
	.half	.L1153-.L1152
	.byte	1,5,1,9
	.half	.L234-.L1153
	.byte	3,1,1,7,9
	.half	.L342-.L234
	.byte	0,1,1
.L1095:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetNextFilteredRecord')
	.sect	'.debug_ranges'
.L341:
	.word	-1,.L322,0,.L342-.L322,0,0
.L531:
	.word	-1,.L322,.L205-.L322,.L207-.L322,.L532-.L322,.L533-.L322,0,0
.L563:
	.word	-1,.L322,.L231-.L322,.L233-.L322,.L564-.L322,.L565-.L322,0,0
.L592:
	.word	-1,.L322,.L242-.L322,.L244-.L322,.L593-.L322,.L594-.L322,0,0
.L600:
	.word	-1,.L322,.L247-.L322,.L249-.L322,.L601-.L322,.L602-.L322,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_DisableDTCRecordUpdate')
	.sect	'.debug_info'
.L343:
	.word	279
	.half	3
	.word	.L344
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L346,.L345
	.byte	2
	.word	.L329
	.byte	3
	.byte	'Dem_DisableDTCRecordUpdate',0,1,165,1,38
	.word	.L413
	.byte	1,1,1
	.word	.L308,.L622,.L307
	.byte	4
	.byte	'DTC',0,1,165,1,72
	.word	.L623,.L624
	.byte	4
	.byte	'DTCOrigin',0,1,165,1,94
	.word	.L413,.L625
	.byte	5
	.word	.L308,.L622
	.byte	6
	.word	.L626,.L308,.L627
	.byte	7
	.word	.L628,.L308,.L627
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_DisableDTCRecordUpdate')
	.sect	'.debug_abbrev'
.L344:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	29,1,49,16,17,1,18,1,0,0,7,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_DisableDTCRecordUpdate')
	.sect	'.debug_line'
.L345:
	.word	.L1155-.L1154
.L1154:
	.half	3
	.word	.L1157-.L1156
.L1156:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0,0,0,0,0
.L1157:
	.byte	5,2,7,0,5,2
	.word	.L308
	.byte	3,210,0,1,5,29,9
	.half	.L1158-.L308
	.byte	1,5,27,9
	.half	.L1159-.L1158
	.byte	1,5,9,9
	.half	.L627-.L1159
	.byte	3,216,0,1,5,2,9
	.half	.L1160-.L627
	.byte	1,5,1,9
	.half	.L17-.L1160
	.byte	3,1,1,7,9
	.half	.L347-.L17
	.byte	0,1,1
.L1155:
	.sdecl	'.debug_ranges',debug,cluster('Dem_DisableDTCRecordUpdate')
	.sect	'.debug_ranges'
.L346:
	.word	-1,.L308,0,.L347-.L308,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_EnableDTCRecordUpdate')
	.sect	'.debug_info'
.L348:
	.word	210
	.half	3
	.word	.L349
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L351,.L350
	.byte	2
	.word	.L329
	.byte	3
	.byte	'Dem_EnableDTCRecordUpdate',0,1,184,1,16
	.word	.L413
	.byte	1,1,1
	.word	.L310,.L629,.L309
	.byte	4
	.word	.L310,.L629
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EnableDTCRecordUpdate')
	.sect	'.debug_abbrev'
.L349:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_EnableDTCRecordUpdate')
	.sect	'.debug_line'
.L350:
	.word	.L1162-.L1161
.L1161:
	.half	3
	.word	.L1164-.L1163
.L1163:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0,0,0,0,0
.L1164:
	.byte	5,9,7,0,5,2
	.word	.L310
	.byte	3,185,1,1,5,2,9
	.half	.L1165-.L310
	.byte	1,5,1,9
	.half	.L18-.L1165
	.byte	3,1,1,7,9
	.half	.L352-.L18
	.byte	0,1,1
.L1162:
	.sdecl	'.debug_ranges',debug,cluster('Dem_EnableDTCRecordUpdate')
	.sect	'.debug_ranges'
.L351:
	.word	-1,.L310,0,.L352-.L310,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetFreezeFrameDataByDTC')
	.sect	'.debug_info'
.L353:
	.word	1216
	.half	3
	.word	.L354
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L356,.L355
	.byte	2
	.word	.L329
	.byte	3
	.byte	'Dem_GetFreezeFrameDataByDTC',0,1,128,3,39
	.word	.L413
	.byte	1,1,1
	.word	.L316,.L630,.L315
	.byte	4
	.byte	'DTC',0,1,128,3,74
	.word	.L623,.L631
	.byte	4
	.byte	'DTCKind',0,1,129,3,19
	.word	.L413,.L632
	.byte	4
	.byte	'DTCOrigin',0,1,130,3,21
	.word	.L413,.L633
	.byte	4
	.byte	'RecordNumber',0,1,131,3,9
	.word	.L413,.L634
	.byte	4
	.byte	'DestBuffer',0,1,132,3,10
	.word	.L516,.L635
	.byte	4
	.byte	'BufSize',0,1,133,3,11
	.word	.L416,.L636
	.byte	5
	.word	.L316,.L630
	.byte	6
	.byte	'DtcId',0,1,135,3,16
	.word	.L520,.L637
	.byte	6
	.byte	'RecordIndex',0,1,136,3,8
	.word	.L413,.L638
	.byte	6
	.byte	'EventId',0,1,137,3,18
	.word	.L520,.L639
	.byte	7
	.word	.L640,.L641,.L86
	.byte	8
	.word	.L642,.L643
	.byte	9
	.word	.L644,.L641,.L86
	.byte	0,7
	.word	.L645,.L646,.L90
	.byte	8
	.word	.L647,.L648
	.byte	9
	.word	.L649,.L646,.L90
	.byte	0,7
	.word	.L650,.L651,.L652
	.byte	8
	.word	.L653,.L654
	.byte	10
	.word	.L655,.L651,.L652
	.byte	7
	.word	.L656,.L657,.L658
	.byte	8
	.word	.L659,.L660
	.byte	9
	.word	.L661,.L657,.L658
	.byte	0,7
	.word	.L662,.L658,.L100
	.byte	8
	.word	.L663,.L664
	.byte	10
	.word	.L665,.L658,.L100
	.byte	7
	.word	.L666,.L667,.L102
	.byte	8
	.word	.L668,.L669
	.byte	8
	.word	.L670,.L671
	.byte	10
	.word	.L672,.L667,.L102
	.byte	7
	.word	.L673,.L667,.L101
	.byte	8
	.word	.L674,.L675
	.byte	8
	.word	.L676,.L677
	.byte	9
	.word	.L678,.L667,.L101
	.byte	0,0,0,0,0,0,0,7
	.word	.L679,.L106,.L109
	.byte	8
	.word	.L680,.L681
	.byte	10
	.word	.L682,.L106,.L109
	.byte	7
	.word	.L683,.L106,.L108
	.byte	8
	.word	.L684,.L685
	.byte	9
	.word	.L686,.L106,.L108
	.byte	0,0,0,7
	.word	.L687,.L110,.L688
	.byte	8
	.word	.L689,.L690
	.byte	8
	.word	.L691,.L692
	.byte	10
	.word	.L693,.L110,.L688
	.byte	7
	.word	.L603,.L113,.L115
	.byte	8
	.word	.L604,.L694
	.byte	10
	.word	.L606,.L113,.L115
	.byte	7
	.word	.L607,.L695,.L114
	.byte	8
	.word	.L609,.L696
	.byte	8
	.word	.L611,.L697
	.byte	8
	.word	.L613,.L698
	.byte	10
	.word	.L615,.L695,.L114
	.byte	6
	.byte	'bit2shift',0,2,72,12
	.word	.L520,.L699
	.byte	0,0,0,0,0,0,7
	.word	.L700,.L122,.L124
	.byte	8
	.word	.L701,.L702
	.byte	8
	.word	.L703,.L704
	.byte	9
	.word	.L705,.L122,.L124
	.byte	0,7
	.word	.L706,.L707,.L128
	.byte	8
	.word	.L708,.L709
	.byte	8
	.word	.L710,.L711
	.byte	10
	.word	.L712,.L707,.L128
	.byte	6
	.byte	'EventId',0,3,49,21
	.word	.L520,.L713
	.byte	7
	.word	.L473,.L707,.L125
	.byte	8
	.word	.L475,.L714
	.byte	9
	.word	.L477,.L707,.L125
	.byte	0,7
	.word	.L700,.L125,.L126
	.byte	8
	.word	.L701,.L702
	.byte	8
	.word	.L703,.L704
	.byte	9
	.word	.L705,.L125,.L126
	.byte	0,7
	.word	.L490,.L126,.L127
	.byte	8
	.word	.L492,.L715
	.byte	9
	.word	.L494,.L126,.L127
	.byte	0,0,0,7
	.word	.L473,.L129,.L131
	.byte	8
	.word	.L475,.L714
	.byte	9
	.word	.L477,.L129,.L131
	.byte	0,7
	.word	.L716,.L131,.L132
	.byte	8
	.word	.L717,.L718
	.byte	9
	.word	.L719,.L131,.L132
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetFreezeFrameDataByDTC')
	.sect	'.debug_abbrev'
.L354:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetFreezeFrameDataByDTC')
	.sect	'.debug_line'
.L355:
	.word	.L1167-.L1166
.L1166:
	.half	3
	.word	.L1169-.L1168
.L1168:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvFFRecNumeration.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0,0
.L1169:
	.byte	5,39,7,0,5,2
	.word	.L316
	.byte	3,255,2,1,4,4,5,21,9
	.half	.L641-.L316
	.byte	3,177,125,1,5,5,9
	.half	.L1170-.L641
	.byte	1,4,1,5,7,9
	.half	.L86-.L1170
	.byte	3,218,2,1,5,3,7,9
	.half	.L1171-.L86
	.byte	3,2,1,5,10,9
	.half	.L992-.L1171
	.byte	3,1,1,5,3,9
	.half	.L1172-.L992
	.byte	1,5,35,9
	.half	.L87-.L1172
	.byte	3,3,1,4,4,5,8,9
	.half	.L646-.L87
	.byte	3,166,125,1,5,5,9
	.half	.L1173-.L646
	.byte	1,5,22,7,9
	.half	.L1174-.L1173
	.byte	3,2,1,5,20,9
	.half	.L1175-.L1174
	.byte	1,5,17,9
	.half	.L89-.L1175
	.byte	3,3,1,5,28,9
	.half	.L1176-.L89
	.byte	1,5,5,9
	.half	.L1177-.L1176
	.byte	3,127,1,4,1,5,7,9
	.half	.L90-.L1177
	.byte	3,214,2,1,5,3,7,9
	.half	.L1178-.L90
	.byte	3,2,1,5,10,9
	.half	.L1001-.L1178
	.byte	3,1,1,5,3,9
	.half	.L1179-.L1001
	.byte	1,5,6,9
	.half	.L91-.L1179
	.byte	3,3,1,5,40,7,9
	.half	.L1180-.L91
	.byte	1,5,13,7,9
	.half	.L93-.L1180
	.byte	3,2,1,5,6,9
	.half	.L1181-.L93
	.byte	1,5,15,9
	.half	.L94-.L1181
	.byte	3,3,1,5,5,9
	.half	.L1182-.L94
	.byte	1,5,9,7,9
	.half	.L1183-.L1182
	.byte	3,2,1,5,46,9
	.half	.L1184-.L1183
	.byte	1,5,22,9
	.half	.L1006-.L1184
	.byte	1,5,24,9
	.half	.L1185-.L1006
	.byte	3,1,1,5,13,9
	.half	.L96-.L1185
	.byte	3,2,1,4,5,9
	.half	.L651-.L96
	.byte	3,236,125,1,4,6,5,21,9
	.half	.L657-.L651
	.byte	3,13,1,5,12,9
	.half	.L1186-.L657
	.byte	1,5,28,7,9
	.half	.L1187-.L1186
	.byte	1,5,21,9
	.half	.L1188-.L1187
	.byte	1,5,4,9
	.half	.L97-.L1188
	.byte	1,4,5,5,13,9
	.half	.L99-.L97
	.byte	3,114,1,5,35,7,9
	.half	.L658-.L99
	.byte	3,109,1,5,51,9
	.half	.L1189-.L658
	.byte	1,5,58,9
	.half	.L1190-.L1189
	.byte	1,5,66,9
	.half	.L1191-.L1190
	.byte	1,4,7,5,28,9
	.half	.L667-.L1191
	.byte	3,69,1,5,47,9
	.half	.L1192-.L667
	.byte	1,5,5,9
	.half	.L1193-.L1192
	.byte	1,5,73,9
	.half	.L101-.L1193
	.byte	3,4,1,5,5,9
	.half	.L1194-.L101
	.byte	1,4,5,9
	.half	.L102-.L1194
	.byte	3,55,1,5,13,9
	.half	.L103-.L102
	.byte	3,20,1,5,5,9
	.half	.L100-.L103
	.byte	3,127,1,4,1,5,7,9
	.half	.L105-.L100
	.byte	3,151,2,1,5,3,7,9
	.half	.L652-.L105
	.byte	3,2,1,5,10,9
	.half	.L1195-.L652
	.byte	3,1,1,5,3,9
	.half	.L1196-.L1195
	.byte	1,4,6,5,11,9
	.half	.L106-.L1196
	.byte	3,130,126,1,5,32,9
	.half	.L1197-.L106
	.byte	1,5,4,9
	.half	.L1009-.L1197
	.byte	1,9
	.half	.L108-.L1009
	.byte	3,9,1,4,1,5,22,9
	.half	.L109-.L108
	.byte	3,250,1,1,5,2,9
	.half	.L1198-.L109
	.byte	1,5,9,7,9
	.half	.L1199-.L1198
	.byte	3,2,1,5,16,9
	.half	.L1010-.L1199
	.byte	3,1,1,5,9,9
	.half	.L1200-.L1010
	.byte	1,4,3,5,26,9
	.half	.L110-.L1200
	.byte	3,228,124,1,5,10,9
	.half	.L1201-.L110
	.byte	1,4,8,5,39,7,9
	.half	.L113-.L1201
	.byte	3,179,1,1,5,54,9
	.half	.L1202-.L113
	.byte	1,5,60,9
	.half	.L1203-.L1202
	.byte	1,4,2,5,22,9
	.half	.L695-.L1203
	.byte	3,131,127,1,5,19,9
	.half	.L1012-.L695
	.byte	3,1,1,5,42,9
	.half	.L1204-.L1012
	.byte	3,1,1,5,19,9
	.half	.L1013-.L1204
	.byte	1,5,5,9
	.half	.L1205-.L1013
	.byte	3,1,1,4,8,5,9,9
	.half	.L114-.L1205
	.byte	3,250,0,1,5,2,9
	.half	.L1206-.L114
	.byte	1,4,3,5,40,9
	.half	.L115-.L1206
	.byte	3,205,126,1,5,26,9
	.half	.L1207-.L115
	.byte	1,5,2,9
	.half	.L112-.L1207
	.byte	1,4,1,5,7,9
	.half	.L117-.L112
	.byte	3,159,3,1,5,10,7,9
	.half	.L688-.L117
	.byte	3,2,1,5,3,9
	.half	.L1208-.L688
	.byte	1,5,42,9
	.half	.L118-.L1208
	.byte	3,3,1,5,7,9
	.half	.L1011-.L118
	.byte	1,5,10,7,9
	.half	.L1209-.L1011
	.byte	3,2,1,5,3,9
	.half	.L1210-.L1209
	.byte	1,5,7,9
	.half	.L120-.L1210
	.byte	3,3,1,5,25,9
	.half	.L1211-.L120
	.byte	1,5,7,9
	.half	.L1212-.L1211
	.byte	1,5,14,7,9
	.half	.L1213-.L1212
	.byte	3,2,1,5,12,9
	.half	.L1214-.L1213
	.byte	1,5,10,9
	.half	.L1215-.L1214
	.byte	3,1,1,5,3,9
	.half	.L1216-.L1215
	.byte	1,4,3,5,20,9
	.half	.L122-.L1216
	.byte	3,218,124,1,5,2,9
	.half	.L1217-.L122
	.byte	1,4,1,5,54,9
	.half	.L124-.L1217
	.byte	3,171,3,1,4,9,5,5,9
	.half	.L707-.L124
	.byte	3,215,125,1,4,3,5,20,9
	.half	.L125-.L707
	.byte	3,254,126,1,5,2,9
	.half	.L1218-.L125
	.byte	1,4,9,5,36,9
	.half	.L126-.L1218
	.byte	3,219,3,1,5,4,9
	.half	.L1219-.L126
	.byte	1,4,3,5,61,9
	.half	.L127-.L1219
	.byte	3,193,124,1,5,5,9
	.half	.L1220-.L127
	.byte	1,4,1,5,11,9
	.half	.L128-.L1220
	.byte	3,143,3,1,5,20,7,9
	.half	.L1221-.L128
	.byte	3,2,1,5,18,9
	.half	.L1222-.L1221
	.byte	1,5,16,9
	.half	.L1223-.L1222
	.byte	3,1,1,5,9,9
	.half	.L1224-.L1223
	.byte	1,4,9,5,33,9
	.half	.L129-.L1224
	.byte	3,212,125,1,5,5,9
	.half	.L1225-.L129
	.byte	1,5,22,9
	.half	.L131-.L1225
	.byte	3,146,3,1,5,4,9
	.half	.L1226-.L131
	.byte	1,4,1,5,221,1,9
	.half	.L132-.L1226
	.byte	3,158,127,1,5,5,9
	.half	.L1015-.L132
	.byte	1,5,1,9
	.half	.L88-.L1015
	.byte	3,2,1,7,9
	.half	.L357-.L88
	.byte	0,1,1
.L1167:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetFreezeFrameDataByDTC')
	.sect	'.debug_ranges'
.L356:
	.word	-1,.L316,0,.L357-.L316,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetSizeOfFreezeFrameByDTC')
	.sect	'.debug_info'
.L358:
	.word	1065
	.half	3
	.word	.L359
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L361,.L360
	.byte	2
	.word	.L329
	.byte	3
	.byte	'Dem_GetSizeOfFreezeFrameByDTC',0,1,225,3,41
	.word	.L413
	.byte	1,1,1
	.word	.L318,.L720,.L317
	.byte	4
	.byte	'DTC',0,1,225,3,78
	.word	.L623,.L721
	.byte	4
	.byte	'DTCKind',0,1,226,3,19
	.word	.L413,.L722
	.byte	4
	.byte	'DTCOrigin',0,1,227,3,21
	.word	.L413,.L723
	.byte	4
	.byte	'RecordNumber',0,1,228,3,9
	.word	.L413,.L724
	.byte	4
	.byte	'SizeOfFreezeFrame',0,1,229,3,11
	.word	.L416,.L725
	.byte	5
	.word	.L318,.L720
	.byte	6
	.byte	'DtcId',0,1,231,3,16
	.word	.L520,.L726
	.byte	6
	.byte	'NoOfFreezeFrames',0,1,232,3,9
	.word	.L413,.L727
	.byte	6
	.byte	'EventId',0,1,233,3,18
	.word	.L520,.L728
	.byte	6
	.byte	'ReturnSts',0,1,234,3,42
	.word	.L413,.L729
	.byte	7
	.word	.L640,.L730,.L134
	.byte	8
	.word	.L642,.L731
	.byte	9
	.word	.L644,.L730,.L134
	.byte	0,7
	.word	.L645,.L732,.L138
	.byte	8
	.word	.L647,.L733
	.byte	9
	.word	.L649,.L732,.L138
	.byte	0,7
	.word	.L650,.L734,.L735
	.byte	8
	.word	.L653,.L736
	.byte	10
	.word	.L655,.L734,.L735
	.byte	7
	.word	.L656,.L737,.L738
	.byte	8
	.word	.L659,.L739
	.byte	9
	.word	.L661,.L737,.L738
	.byte	0,7
	.word	.L662,.L738,.L145
	.byte	8
	.word	.L663,.L740
	.byte	10
	.word	.L665,.L738,.L145
	.byte	7
	.word	.L666,.L741,.L147
	.byte	8
	.word	.L668,.L742
	.byte	8
	.word	.L670,.L743
	.byte	10
	.word	.L672,.L741,.L147
	.byte	7
	.word	.L673,.L741,.L146
	.byte	8
	.word	.L674,.L744
	.byte	8
	.word	.L676,.L745
	.byte	9
	.word	.L678,.L741,.L146
	.byte	0,0,0,0,0,0,0,7
	.word	.L679,.L151,.L154
	.byte	8
	.word	.L680,.L746
	.byte	11
	.word	.L682,.L747
	.byte	7
	.word	.L683,.L151,.L153
	.byte	8
	.word	.L684,.L749
	.byte	9
	.word	.L686,.L151,.L153
	.byte	0,0,0,7
	.word	.L687,.L154,.L750
	.byte	8
	.word	.L689,.L751
	.byte	8
	.word	.L691,.L752
	.byte	10
	.word	.L693,.L154,.L750
	.byte	7
	.word	.L603,.L156,.L158
	.byte	8
	.word	.L604,.L753
	.byte	10
	.word	.L606,.L156,.L158
	.byte	7
	.word	.L607,.L754,.L157
	.byte	8
	.word	.L609,.L755
	.byte	8
	.word	.L611,.L756
	.byte	8
	.word	.L613,.L757
	.byte	10
	.word	.L615,.L754,.L157
	.byte	6
	.byte	'bit2shift',0,2,72,12
	.word	.L520,.L758
	.byte	0,0,0,0,0,0,7
	.word	.L679,.L161,.L748
	.byte	8
	.word	.L680,.L746
	.byte	0,7
	.word	.L603,.L165,.L167
	.byte	8
	.word	.L604,.L753
	.byte	10
	.word	.L606,.L165,.L167
	.byte	7
	.word	.L607,.L759,.L166
	.byte	8
	.word	.L609,.L755
	.byte	8
	.word	.L611,.L756
	.byte	8
	.word	.L613,.L757
	.byte	10
	.word	.L615,.L759,.L166
	.byte	6
	.byte	'bit2shift',0,2,72,12
	.word	.L520,.L760
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetSizeOfFreezeFrameByDTC')
	.sect	'.debug_abbrev'
.L359:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,10,11,1,49,16,17,1,18,1,0,0,11,11,1,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetSizeOfFreezeFrameByDTC')
	.sect	'.debug_line'
.L360:
	.word	.L1228-.L1227
.L1227:
	.half	3
	.word	.L1230-.L1229
.L1229:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvFFRecNumeration.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0,0
.L1230:
	.byte	5,41,7,0,5,2
	.word	.L318
	.byte	3,224,3,1,4,3,5,21,9
	.half	.L730-.L318
	.byte	3,208,124,1,5,5,9
	.half	.L1231-.L730
	.byte	1,4,1,5,7,9
	.half	.L134-.L1231
	.byte	3,187,3,1,5,3,7,9
	.half	.L1232-.L134
	.byte	3,2,1,5,10,9
	.half	.L1022-.L1232
	.byte	3,1,1,5,3,9
	.half	.L1233-.L1022
	.byte	1,5,35,9
	.half	.L135-.L1233
	.byte	3,3,1,4,3,5,8,9
	.half	.L732-.L135
	.byte	3,197,124,1,5,5,9
	.half	.L1234-.L732
	.byte	1,5,22,7,9
	.half	.L1235-.L1234
	.byte	3,2,1,5,20,9
	.half	.L1236-.L1235
	.byte	1,5,17,9
	.half	.L137-.L1236
	.byte	3,3,1,5,28,9
	.half	.L1237-.L137
	.byte	1,5,5,9
	.half	.L1238-.L1237
	.byte	3,127,1,4,1,5,7,9
	.half	.L138-.L1238
	.byte	3,183,3,1,5,3,7,9
	.half	.L1239-.L138
	.byte	3,2,1,5,10,9
	.half	.L1030-.L1239
	.byte	3,1,1,5,3,9
	.half	.L1240-.L1030
	.byte	1,5,15,9
	.half	.L139-.L1240
	.byte	3,3,1,5,5,9
	.half	.L1241-.L139
	.byte	1,5,9,7,9
	.half	.L1242-.L1241
	.byte	3,2,1,5,46,9
	.half	.L1243-.L1242
	.byte	1,5,22,9
	.half	.L1031-.L1243
	.byte	1,5,24,9
	.half	.L1244-.L1031
	.byte	3,1,1,5,13,9
	.half	.L141-.L1244
	.byte	3,2,1,4,4,9
	.half	.L734-.L141
	.byte	3,144,125,1,4,5,5,21,9
	.half	.L737-.L734
	.byte	3,13,1,5,12,9
	.half	.L1245-.L737
	.byte	1,5,28,7,9
	.half	.L1246-.L1245
	.byte	1,5,21,9
	.half	.L1247-.L1246
	.byte	1,5,4,9
	.half	.L142-.L1247
	.byte	1,4,4,5,13,9
	.half	.L144-.L142
	.byte	3,114,1,5,35,7,9
	.half	.L738-.L144
	.byte	3,109,1,5,51,9
	.half	.L1248-.L738
	.byte	1,5,58,9
	.half	.L1249-.L1248
	.byte	1,5,66,9
	.half	.L1250-.L1249
	.byte	1,4,6,5,28,9
	.half	.L741-.L1250
	.byte	3,69,1,5,47,9
	.half	.L1251-.L741
	.byte	1,5,5,9
	.half	.L1252-.L1251
	.byte	1,5,73,9
	.half	.L146-.L1252
	.byte	3,4,1,5,5,9
	.half	.L1253-.L146
	.byte	1,4,4,9
	.half	.L147-.L1253
	.byte	3,55,1,5,13,9
	.half	.L148-.L147
	.byte	3,20,1,5,5,9
	.half	.L145-.L148
	.byte	3,127,1,4,1,5,7,9
	.half	.L150-.L145
	.byte	3,243,2,1,5,3,7,9
	.half	.L735-.L150
	.byte	3,2,1,5,10,9
	.half	.L1032-.L735
	.byte	3,1,1,5,3,9
	.half	.L1254-.L1032
	.byte	1,4,5,5,11,9
	.half	.L151-.L1254
	.byte	3,166,125,1,5,32,9
	.half	.L1255-.L151
	.byte	1,5,4,9
	.half	.L1024-.L1255
	.byte	1,9
	.half	.L153-.L1024
	.byte	3,9,1,4,7,5,26,9
	.half	.L154-.L153
	.byte	3,225,126,1,5,10,9
	.half	.L1033-.L154
	.byte	1,4,8,5,39,7,9
	.half	.L156-.L1033
	.byte	3,179,1,1,5,54,9
	.half	.L1256-.L156
	.byte	1,5,60,9
	.half	.L1257-.L1256
	.byte	1,4,2,5,22,9
	.half	.L754-.L1257
	.byte	3,131,127,1,5,19,9
	.half	.L1034-.L754
	.byte	3,1,1,5,42,9
	.half	.L1258-.L1034
	.byte	3,1,1,5,19,9
	.half	.L1035-.L1258
	.byte	1,5,5,9
	.half	.L1259-.L1035
	.byte	3,1,1,4,8,5,9,9
	.half	.L157-.L1259
	.byte	3,250,0,1,5,2,9
	.half	.L1260-.L157
	.byte	1,4,7,5,40,9
	.half	.L158-.L1260
	.byte	3,205,126,1,5,26,9
	.half	.L1261-.L158
	.byte	1,5,2,9
	.half	.L155-.L1261
	.byte	1,4,1,5,8,9
	.half	.L160-.L155
	.byte	3,245,3,1,5,74,7,9
	.half	.L750-.L160
	.byte	1,5,71,9
	.half	.L1262-.L750
	.byte	1,5,3,7,9
	.half	.L1263-.L1262
	.byte	3,2,1,5,10,9
	.half	.L1264-.L1263
	.byte	3,1,1,5,3,9
	.half	.L1265-.L1264
	.byte	1,5,43,9
	.half	.L161-.L1265
	.byte	3,4,1,5,22,9
	.half	.L1037-.L161
	.byte	3,1,1,5,2,9
	.half	.L1266-.L1037
	.byte	1,4,8,5,39,7,9
	.half	.L165-.L1266
	.byte	3,182,125,1,5,54,9
	.half	.L1267-.L165
	.byte	1,5,60,9
	.half	.L1268-.L1267
	.byte	1,4,2,5,22,9
	.half	.L759-.L1268
	.byte	3,131,127,1,5,19,9
	.half	.L1038-.L759
	.byte	3,1,1,5,42,9
	.half	.L1269-.L1038
	.byte	3,1,1,5,19,9
	.half	.L1039-.L1269
	.byte	1,5,5,9
	.half	.L1270-.L1039
	.byte	3,1,1,4,8,5,9,9
	.half	.L166-.L1270
	.byte	3,250,0,1,5,2,9
	.half	.L1271-.L166
	.byte	1,4,1,5,25,9
	.half	.L167-.L1271
	.byte	3,205,2,1,5,45,9
	.half	.L1272-.L167
	.byte	1,5,22,9
	.half	.L1273-.L1272
	.byte	1,5,2,9
	.half	.L164-.L1273
	.byte	3,4,1,5,1,9
	.half	.L136-.L164
	.byte	3,1,1,7,9
	.half	.L362-.L136
	.byte	0,1,1
.L1228:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetSizeOfFreezeFrameByDTC')
	.sect	'.debug_ranges'
.L361:
	.word	-1,.L318,0,.L362-.L318,0,0
.L747:
	.word	-1,.L318,.L151-.L318,.L154-.L318,.L161-.L318,.L748-.L318,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetExtendedDataRecordByDTC')
	.sect	'.debug_info'
.L363:
	.word	970
	.half	3
	.word	.L364
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L366,.L365
	.byte	2
	.word	.L329
	.byte	3
	.byte	'Dem_GetExtendedDataRecordByDTC',0,1,213,1,42
	.word	.L413
	.byte	1,1,1
	.word	.L312,.L761,.L311
	.byte	4
	.byte	'DTC',0,1,213,1,80
	.word	.L623,.L762
	.byte	4
	.byte	'DTCKind',0,1,214,1,19
	.word	.L413,.L763
	.byte	4
	.byte	'DTCOrigin',0,1,215,1,21
	.word	.L413,.L764
	.byte	4
	.byte	'ExtendedDataNumber',0,1,216,1,9
	.word	.L413,.L765
	.byte	4
	.byte	'DestBuffer',0,1,217,1,10
	.word	.L516,.L766
	.byte	4
	.byte	'BufSize',0,1,218,1,11
	.word	.L416,.L767
	.byte	5
	.word	.L312,.L761
	.byte	6
	.byte	'DtcId',0,1,220,1,16
	.word	.L520,.L768
	.byte	6
	.byte	'EventId',0,1,221,1,18
	.word	.L520,.L769
	.byte	6
	.byte	'Trigger',0,1,222,1,18
	.word	.L413,.L770
	.byte	7
	.word	.L640,.L771,.L19
	.byte	8
	.word	.L642,.L772
	.byte	9
	.word	.L644,.L771,.L19
	.byte	0,7
	.word	.L645,.L773,.L23
	.byte	8
	.word	.L647,.L774
	.byte	9
	.word	.L649,.L773,.L23
	.byte	0,7
	.word	.L650,.L775,.L776
	.byte	8
	.word	.L653,.L777
	.byte	10
	.word	.L655,.L775,.L776
	.byte	7
	.word	.L656,.L778,.L779
	.byte	8
	.word	.L659,.L780
	.byte	9
	.word	.L661,.L778,.L779
	.byte	0,7
	.word	.L662,.L779,.L33
	.byte	8
	.word	.L663,.L781
	.byte	10
	.word	.L665,.L779,.L33
	.byte	7
	.word	.L666,.L782,.L35
	.byte	8
	.word	.L668,.L783
	.byte	8
	.word	.L670,.L784
	.byte	10
	.word	.L672,.L782,.L35
	.byte	7
	.word	.L673,.L782,.L34
	.byte	8
	.word	.L674,.L785
	.byte	8
	.word	.L676,.L786
	.byte	9
	.word	.L678,.L782,.L34
	.byte	0,0,0,0,0,0,0,7
	.word	.L679,.L39,.L42
	.byte	8
	.word	.L680,.L787
	.byte	11
	.word	.L682,.L788
	.byte	7
	.word	.L683,.L39,.L41
	.byte	8
	.word	.L684,.L791
	.byte	9
	.word	.L686,.L39,.L41
	.byte	0,0,0,7
	.word	.L679,.L789,.L790
	.byte	8
	.word	.L680,.L787
	.byte	0,7
	.word	.L581,.L792,.L51
	.byte	8
	.word	.L583,.L793
	.byte	9
	.word	.L585,.L792,.L51
	.byte	0,7
	.word	.L586,.L794,.L795
	.byte	8
	.word	.L587,.L796
	.byte	8
	.word	.L589,.L797
	.byte	10
	.word	.L591,.L794,.L795
	.byte	7
	.word	.L595,.L798,.L52
	.byte	8
	.word	.L597,.L799
	.byte	9
	.word	.L599,.L798,.L52
	.byte	0,0,0,7
	.word	.L473,.L54,.L56
	.byte	8
	.word	.L475,.L800
	.byte	9
	.word	.L477,.L54,.L56
	.byte	0,7
	.word	.L716,.L56,.L57
	.byte	8
	.word	.L717,.L801
	.byte	9
	.word	.L719,.L56,.L57
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetExtendedDataRecordByDTC')
	.sect	'.debug_abbrev'
.L364:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,10,11,1,49,16,17,1,18,1,0,0,11,11,1,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetExtendedDataRecordByDTC')
	.sect	'.debug_line'
.L365:
	.word	.L1275-.L1274
.L1274:
	.half	3
	.word	.L1277-.L1276
.L1276:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvTrigger.h',0,0,0,0,0
.L1277:
	.byte	5,42,7,0,5,2
	.word	.L312
	.byte	3,212,1,1,4,2,5,21,9
	.half	.L771-.L312
	.byte	3,220,126,1,5,5,9
	.half	.L1278-.L771
	.byte	1,4,1,5,7,9
	.half	.L19-.L1278
	.byte	3,175,1,1,5,3,7,9
	.half	.L1279-.L19
	.byte	3,2,1,5,10,9
	.half	.L950-.L1279
	.byte	3,1,1,5,3,9
	.half	.L1280-.L950
	.byte	1,5,35,9
	.half	.L20-.L1280
	.byte	3,3,1,4,2,5,8,9
	.half	.L773-.L20
	.byte	3,209,126,1,5,5,9
	.half	.L1281-.L773
	.byte	1,5,22,7,9
	.half	.L1282-.L1281
	.byte	3,2,1,5,20,9
	.half	.L1283-.L1282
	.byte	1,5,17,9
	.half	.L22-.L1283
	.byte	3,3,1,5,28,9
	.half	.L1284-.L22
	.byte	1,5,5,9
	.half	.L1285-.L1284
	.byte	3,127,1,4,1,5,7,9
	.half	.L23-.L1285
	.byte	3,171,1,1,5,3,7,9
	.half	.L1286-.L23
	.byte	3,2,1,5,10,9
	.half	.L958-.L1286
	.byte	3,1,1,5,3,9
	.half	.L1287-.L958
	.byte	1,5,6,9
	.half	.L24-.L1287
	.byte	3,3,1,5,40,7,9
	.half	.L1288-.L24
	.byte	1,5,13,7,9
	.half	.L26-.L1288
	.byte	3,2,1,5,6,9
	.half	.L1289-.L26
	.byte	1,5,12,9
	.half	.L27-.L1289
	.byte	3,3,1,5,2,9
	.half	.L1290-.L27
	.byte	1,5,6,7,9
	.half	.L1291-.L1290
	.byte	3,2,1,5,43,9
	.half	.L1292-.L1291
	.byte	1,5,19,9
	.half	.L963-.L1292
	.byte	1,5,21,9
	.half	.L1293-.L963
	.byte	3,1,1,5,10,9
	.half	.L29-.L1293
	.byte	3,2,1,4,3,5,13,9
	.half	.L775-.L29
	.byte	3,151,127,1,4,4,5,21,9
	.half	.L778-.L775
	.byte	3,13,1,5,12,9
	.half	.L1294-.L778
	.byte	1,5,28,7,9
	.half	.L1295-.L1294
	.byte	1,5,21,9
	.half	.L1296-.L1295
	.byte	1,5,4,9
	.half	.L30-.L1296
	.byte	1,4,3,5,13,9
	.half	.L32-.L30
	.byte	3,114,1,5,35,7,9
	.half	.L779-.L32
	.byte	3,109,1,5,51,9
	.half	.L1297-.L779
	.byte	1,5,58,9
	.half	.L1298-.L1297
	.byte	1,5,66,9
	.half	.L1299-.L1298
	.byte	1,4,5,5,28,9
	.half	.L782-.L1299
	.byte	3,69,1,5,47,9
	.half	.L1300-.L782
	.byte	1,5,5,9
	.half	.L1301-.L1300
	.byte	1,5,73,9
	.half	.L34-.L1301
	.byte	3,4,1,5,5,9
	.half	.L1302-.L34
	.byte	1,4,3,9
	.half	.L35-.L1302
	.byte	3,55,1,5,13,9
	.half	.L36-.L35
	.byte	3,20,1,5,5,9
	.half	.L33-.L36
	.byte	3,127,1,4,1,5,7,9
	.half	.L38-.L33
	.byte	3,236,0,1,5,3,7,9
	.half	.L776-.L38
	.byte	3,2,1,5,10,9
	.half	.L1303-.L776
	.byte	3,1,1,5,3,9
	.half	.L1304-.L1303
	.byte	1,4,4,5,11,9
	.half	.L39-.L1304
	.byte	3,173,127,1,5,32,9
	.half	.L1305-.L39
	.byte	1,5,4,9
	.half	.L1306-.L1305
	.byte	1,9
	.half	.L41-.L1306
	.byte	3,9,1,4,1,5,62,9
	.half	.L42-.L41
	.byte	3,207,0,1,5,7,9
	.half	.L790-.L42
	.byte	1,5,11,7,9
	.half	.L1307-.L790
	.byte	3,4,1,5,64,7,9
	.half	.L1308-.L1307
	.byte	1,5,62,9
	.half	.L1309-.L1308
	.byte	1,5,10,7,9
	.half	.L44-.L1309
	.byte	3,2,1,9
	.half	.L45-.L44
	.byte	3,2,1,5,3,9
	.half	.L1310-.L45
	.byte	1,5,42,9
	.half	.L43-.L1310
	.byte	3,3,1,5,7,9
	.half	.L965-.L43
	.byte	1,5,10,7,9
	.half	.L1311-.L965
	.byte	3,2,1,5,3,9
	.half	.L1312-.L1311
	.byte	1,5,7,9
	.half	.L47-.L1312
	.byte	3,3,1,5,25,9
	.half	.L1313-.L47
	.byte	1,5,7,9
	.half	.L1314-.L1313
	.byte	1,5,14,7,9
	.half	.L1315-.L1314
	.byte	3,2,1,5,12,9
	.half	.L1316-.L1315
	.byte	1,5,10,9
	.half	.L1317-.L1316
	.byte	3,1,1,5,3,9
	.half	.L1318-.L1317
	.byte	1,5,79,9
	.half	.L49-.L1318
	.byte	3,3,1,4,6,5,22,9
	.half	.L792-.L49
	.byte	3,252,1,1,5,4,9
	.half	.L1319-.L792
	.byte	1,4,1,5,94,9
	.half	.L51-.L1319
	.byte	3,132,126,1,4,7,5,40,9
	.half	.L794-.L51
	.byte	3,135,126,1,5,42,9
	.half	.L798-.L794
	.byte	3,123,1,5,2,9
	.half	.L1320-.L798
	.byte	1,9
	.half	.L52-.L1320
	.byte	3,5,1,4,1,5,7,9
	.half	.L53-.L52
	.byte	3,249,1,1,5,14,7,9
	.half	.L795-.L53
	.byte	3,2,1,5,12,9
	.half	.L1321-.L795
	.byte	1,5,10,9
	.half	.L1322-.L1321
	.byte	3,1,1,5,3,9
	.half	.L1323-.L1322
	.byte	1,4,6,5,33,9
	.half	.L54-.L1323
	.byte	3,129,127,1,5,5,9
	.half	.L1324-.L54
	.byte	1,5,22,9
	.half	.L56-.L1324
	.byte	3,146,3,1,5,4,9
	.half	.L1325-.L56
	.byte	1,4,1,5,226,1,9
	.half	.L57-.L1325
	.byte	3,241,125,1,5,2,9
	.half	.L967-.L57
	.byte	1,5,1,9
	.half	.L21-.L967
	.byte	3,2,1,7,9
	.half	.L367-.L21
	.byte	0,1,1
.L1275:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetExtendedDataRecordByDTC')
	.sect	'.debug_ranges'
.L366:
	.word	-1,.L312,0,.L367-.L312,0,0
.L788:
	.word	-1,.L312,.L39-.L312,.L42-.L312,.L789-.L312,.L790-.L312,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetSizeOfExtendedDataRecordByDTC')
	.sect	'.debug_info'
.L368:
	.word	825
	.half	3
	.word	.L369
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L371,.L370
	.byte	2
	.word	.L329
	.byte	3
	.byte	'Dem_GetSizeOfExtendedDataRecordByDTC',0,1,179,2,48
	.word	.L413
	.byte	1,1,1
	.word	.L314,.L802,.L313
	.byte	4
	.byte	'DTC',0,1,179,2,92
	.word	.L623,.L803
	.byte	4
	.byte	'DTCKind',0,1,180,2,19
	.word	.L413,.L804
	.byte	4
	.byte	'DTCOrigin',0,1,181,2,21
	.word	.L413,.L805
	.byte	4
	.byte	'ExtendedDataNumber',0,1,182,2,9
	.word	.L413,.L806
	.byte	4
	.byte	'SizeOfExtendedDataRecord',0,1,183,2,11
	.word	.L416,.L807
	.byte	5
	.word	.L314,.L802
	.byte	6
	.byte	'DtcId',0,1,185,2,16
	.word	.L520,.L808
	.byte	6
	.byte	'EventId',0,1,186,2,18
	.word	.L520,.L809
	.byte	6
	.byte	'Trigger',0,1,187,2,18
	.word	.L413,.L810
	.byte	7
	.word	.L640,.L811,.L59
	.byte	8
	.word	.L642,.L812
	.byte	9
	.word	.L644,.L811,.L59
	.byte	0,7
	.word	.L645,.L813,.L63
	.byte	8
	.word	.L647,.L814
	.byte	9
	.word	.L649,.L813,.L63
	.byte	0,7
	.word	.L650,.L815,.L816
	.byte	8
	.word	.L653,.L817
	.byte	10
	.word	.L655,.L815,.L816
	.byte	7
	.word	.L656,.L818,.L819
	.byte	8
	.word	.L659,.L820
	.byte	9
	.word	.L661,.L818,.L819
	.byte	0,7
	.word	.L662,.L819,.L70
	.byte	8
	.word	.L663,.L821
	.byte	10
	.word	.L665,.L819,.L70
	.byte	7
	.word	.L666,.L822,.L72
	.byte	8
	.word	.L668,.L823
	.byte	8
	.word	.L670,.L824
	.byte	10
	.word	.L672,.L822,.L72
	.byte	7
	.word	.L673,.L822,.L71
	.byte	8
	.word	.L674,.L825
	.byte	8
	.word	.L676,.L826
	.byte	9
	.word	.L678,.L822,.L71
	.byte	0,0,0,0,0,0,0,7
	.word	.L679,.L76,.L79
	.byte	8
	.word	.L680,.L827
	.byte	11
	.word	.L682,.L828
	.byte	7
	.word	.L683,.L76,.L78
	.byte	8
	.word	.L684,.L834
	.byte	9
	.word	.L686,.L76,.L78
	.byte	0,0,0,7
	.word	.L679,.L829,.L830
	.byte	8
	.word	.L680,.L827
	.byte	0,7
	.word	.L679,.L831,.L832
	.byte	8
	.word	.L680,.L827
	.byte	0,7
	.word	.L679,.L83,.L833
	.byte	8
	.word	.L680,.L827
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetSizeOfExtendedDataRecordByDTC')
	.sect	'.debug_abbrev'
.L369:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,10,11,1,49,16,17,1,18,1,0,0,11,11,1,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetSizeOfExtendedDataRecordByDTC')
	.sect	'.debug_line'
.L370:
	.word	.L1327-.L1326
.L1326:
	.half	3
	.word	.L1329-.L1328
.L1328:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0,0
.L1329:
	.byte	5,48,7,0,5,2
	.word	.L314
	.byte	3,178,2,1,4,2,5,21,9
	.half	.L811-.L314
	.byte	3,254,125,1,5,5,9
	.half	.L1330-.L811
	.byte	1,4,1,5,7,9
	.half	.L59-.L1330
	.byte	3,140,2,1,5,3,7,9
	.half	.L1331-.L59
	.byte	3,2,1,5,10,9
	.half	.L975-.L1331
	.byte	3,1,1,5,3,9
	.half	.L1332-.L975
	.byte	1,5,35,9
	.half	.L60-.L1332
	.byte	3,3,1,4,2,5,8,9
	.half	.L813-.L60
	.byte	3,244,125,1,5,5,9
	.half	.L1333-.L813
	.byte	1,5,22,7,9
	.half	.L1334-.L1333
	.byte	3,2,1,5,20,9
	.half	.L1335-.L1334
	.byte	1,5,17,9
	.half	.L62-.L1335
	.byte	3,3,1,5,28,9
	.half	.L1336-.L62
	.byte	1,5,5,9
	.half	.L1337-.L1336
	.byte	3,127,1,4,1,5,7,9
	.half	.L63-.L1337
	.byte	3,136,2,1,5,3,7,9
	.half	.L1338-.L63
	.byte	3,2,1,5,10,9
	.half	.L983-.L1338
	.byte	3,1,1,5,3,9
	.half	.L1339-.L983
	.byte	1,5,12,9
	.half	.L64-.L1339
	.byte	3,3,1,5,2,9
	.half	.L1340-.L64
	.byte	1,5,6,7,9
	.half	.L1341-.L1340
	.byte	3,2,1,5,43,9
	.half	.L1342-.L1341
	.byte	1,5,19,9
	.half	.L984-.L1342
	.byte	1,5,21,9
	.half	.L1343-.L984
	.byte	3,1,1,5,10,9
	.half	.L66-.L1343
	.byte	3,2,1,4,3,5,13,9
	.half	.L815-.L66
	.byte	3,191,126,1,4,4,5,21,9
	.half	.L818-.L815
	.byte	3,13,1,5,12,9
	.half	.L1344-.L818
	.byte	1,5,28,7,9
	.half	.L1345-.L1344
	.byte	1,5,21,9
	.half	.L1346-.L1345
	.byte	1,5,4,9
	.half	.L67-.L1346
	.byte	1,4,3,5,13,9
	.half	.L69-.L67
	.byte	3,114,1,5,35,7,9
	.half	.L819-.L69
	.byte	3,109,1,5,51,9
	.half	.L1347-.L819
	.byte	1,5,58,9
	.half	.L1348-.L1347
	.byte	1,5,66,9
	.half	.L1349-.L1348
	.byte	1,4,5,5,28,9
	.half	.L822-.L1349
	.byte	3,69,1,5,47,9
	.half	.L1350-.L822
	.byte	1,5,5,9
	.half	.L1351-.L1350
	.byte	1,5,73,9
	.half	.L71-.L1351
	.byte	3,4,1,5,5,9
	.half	.L1352-.L71
	.byte	1,4,3,9
	.half	.L72-.L1352
	.byte	3,55,1,5,13,9
	.half	.L73-.L72
	.byte	3,20,1,5,5,9
	.half	.L70-.L73
	.byte	3,127,1,4,1,5,7,9
	.half	.L75-.L70
	.byte	3,196,1,1,5,3,7,9
	.half	.L816-.L75
	.byte	3,2,1,5,10,9
	.half	.L985-.L816
	.byte	3,1,1,5,3,9
	.half	.L1353-.L985
	.byte	1,4,4,5,11,9
	.half	.L76-.L1353
	.byte	3,213,126,1,5,32,9
	.half	.L1354-.L76
	.byte	1,5,4,9
	.half	.L977-.L1354
	.byte	1,9
	.half	.L78-.L977
	.byte	3,9,1,4,1,5,63,9
	.half	.L79-.L78
	.byte	3,167,1,1,5,8,9
	.half	.L986-.L79
	.byte	1,5,99,7,9
	.half	.L1355-.L986
	.byte	1,5,96,9
	.half	.L1356-.L1355
	.byte	1,5,3,7,9
	.half	.L1357-.L1356
	.byte	3,2,1,5,10,9
	.half	.L1358-.L1357
	.byte	3,1,1,5,3,9
	.half	.L1359-.L1358
	.byte	1,5,28,9
	.half	.L80-.L1359
	.byte	3,3,1,5,2,9
	.half	.L1360-.L80
	.byte	1,5,38,7,9
	.half	.L831-.L1360
	.byte	3,2,1,5,3,9
	.half	.L988-.L831
	.byte	1,5,63,9
	.half	.L83-.L988
	.byte	3,4,1,5,6,9
	.half	.L990-.L83
	.byte	1,5,1,9
	.half	.L61-.L990
	.byte	3,2,1,7,9
	.half	.L372-.L61
	.byte	0,1,1
.L1327:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetSizeOfExtendedDataRecordByDTC')
	.sect	'.debug_ranges'
.L371:
	.word	-1,.L314,0,.L372-.L314,0,0
.L828:
	.word	-1,.L314,.L76-.L314,.L79-.L314,.L829-.L314,.L830-.L314,.L831-.L314,.L832-.L314,.L83-.L314,.L833-.L314
	.word	0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetNumberOfEventMemoryEntries')
	.sect	'.debug_info'
.L373:
	.word	769
	.half	3
	.word	.L374
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L376,.L375
	.byte	2
	.word	.L329
	.byte	3
	.byte	'Dem_GetNumberOfEventMemoryEntries',0,1,152,6,16
	.word	.L413
	.byte	1,1,1
	.word	.L328,.L835,.L327
	.byte	4
	.byte	'DTCOrigin',0,1,152,6,68
	.word	.L413,.L836
	.byte	4
	.byte	'NumberOfEventMemoryEntries',0,1,152,6,86
	.word	.L516,.L837
	.byte	5
	.word	.L328,.L835
	.byte	6
	.byte	'retVal',0,1,154,6,20
	.word	.L413,.L838
	.byte	7
	.word	.L645,.L839,.L285
	.byte	8
	.word	.L647,.L840
	.byte	9
	.word	.L649,.L839,.L285
	.byte	0,7
	.word	.L841,.L842,.L843
	.byte	8
	.word	.L844,.L845
	.byte	10
	.word	.L846,.L842,.L843
	.byte	6
	.byte	'LocId',0,1,135,6,18
	.word	.L418,.L847
	.byte	6
	.byte	'counter',0,1,136,6,11
	.word	.L413,.L848
	.byte	7
	.word	.L849,.L850,.L288
	.byte	8
	.word	.L851,.L852
	.byte	9
	.word	.L853,.L850,.L288
	.byte	0,7
	.word	.L420,.L854,.L855
	.byte	8
	.word	.L423,.L856
	.byte	8
	.word	.L425,.L857
	.byte	10
	.word	.L427,.L854,.L855
	.byte	7
	.word	.L428,.L854,.L290
	.byte	8
	.word	.L429,.L858
	.byte	9
	.word	.L431,.L854,.L290
	.byte	0,0,0,7
	.word	.L432,.L859,.L294
	.byte	8
	.word	.L434,.L860
	.byte	10
	.word	.L436,.L859,.L294
	.byte	7
	.word	.L437,.L861,.L293
	.byte	8
	.word	.L439,.L862
	.byte	9
	.word	.L441,.L861,.L293
	.byte	0,0,0,7
	.word	.L452,.L294,.L295
	.byte	8
	.word	.L454,.L863
	.byte	9
	.word	.L456,.L294,.L295
	.byte	0,7
	.word	.L495,.L864,.L291
	.byte	8
	.word	.L496,.L865
	.byte	8
	.word	.L498,.L866
	.byte	9
	.word	.L500,.L864,.L291
	.byte	0,7
	.word	.L501,.L867,.L298
	.byte	8
	.word	.L502,.L868
	.byte	8
	.word	.L504,.L869
	.byte	10
	.word	.L506,.L867,.L298
	.byte	7
	.word	.L507,.L867,.L297
	.byte	8
	.word	.L508,.L870
	.byte	9
	.word	.L510,.L867,.L297
	.byte	0,0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetNumberOfEventMemoryEntries')
	.sect	'.debug_abbrev'
.L374:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetNumberOfEventMemoryEntries')
	.sect	'.debug_line'
.L375:
	.word	.L1362-.L1361
.L1361:
	.half	3
	.word	.L1364-.L1363
.L1363:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0,0
.L1364:
	.byte	5,16,7,0,5,2
	.word	.L328
	.byte	3,151,6,1,5,27,9
	.half	.L1054-.L328
	.byte	3,2,1,5,5,9
	.half	.L277-.L1054
	.byte	3,3,1,9
	.half	.L281-.L277
	.byte	3,1,1,7,9
	.half	.L1365-.L281
	.byte	1,5,37,9
	.half	.L282-.L1365
	.byte	3,1,1,4,2,5,8,9
	.half	.L839-.L282
	.byte	3,152,122,1,5,5,9
	.half	.L1366-.L839
	.byte	1,5,22,7,9
	.half	.L1367-.L1366
	.byte	3,2,1,5,20,9
	.half	.L1368-.L1367
	.byte	1,5,17,9
	.half	.L284-.L1368
	.byte	3,3,1,5,28,9
	.half	.L1369-.L284
	.byte	1,5,5,9
	.half	.L1370-.L1369
	.byte	3,127,1,4,1,5,10,9
	.half	.L285-.L1370
	.byte	3,228,5,1,5,9,7,9
	.half	.L1371-.L285
	.byte	3,2,1,5,16,9
	.half	.L1058-.L1371
	.byte	3,1,1,5,9,9
	.half	.L286-.L1058
	.byte	3,3,1,5,5,9
	.half	.L1372-.L286
	.byte	1,5,63,7,9
	.half	.L1373-.L1372
	.byte	3,2,1,5,19,9
	.half	.L842-.L1373
	.byte	3,97,1,4,3,5,38,9
	.half	.L850-.L842
	.byte	3,225,122,1,5,5,9
	.half	.L1374-.L850
	.byte	1,4,1,9
	.half	.L288-.L1374
	.byte	3,161,5,1,5,50,7,9
	.half	.L1375-.L288
	.byte	3,2,1,4,3,5,2,9
	.half	.L854-.L1375
	.byte	3,253,126,1,5,12,9
	.half	.L290-.L854
	.byte	3,20,1,4,1,5,118,9
	.half	.L855-.L290
	.byte	3,239,0,1,5,62,9
	.half	.L292-.L855
	.byte	3,3,1,4,3,5,65,9
	.half	.L859-.L292
	.byte	3,254,122,1,5,45,9
	.half	.L1376-.L859
	.byte	1,5,65,9
	.half	.L1377-.L1376
	.byte	1,5,33,9
	.half	.L861-.L1377
	.byte	3,123,1,5,5,9
	.half	.L1378-.L861
	.byte	1,9
	.half	.L293-.L1378
	.byte	3,5,1,5,67,9
	.half	.L294-.L293
	.byte	3,195,3,1,5,39,9
	.half	.L1379-.L294
	.byte	1,5,100,9
	.half	.L1380-.L1379
	.byte	1,5,97,9
	.half	.L1381-.L1380
	.byte	1,5,4,9
	.half	.L1382-.L1381
	.byte	1,4,1,5,13,9
	.half	.L295-.L1382
	.byte	3,191,1,1,5,24,7,9
	.half	.L1383-.L295
	.byte	3,2,1,5,54,9
	.half	.L296-.L1383
	.byte	3,124,1,4,3,5,7,9
	.half	.L864-.L296
	.byte	3,157,127,1,5,13,9
	.half	.L1384-.L864
	.byte	1,4,1,5,105,9
	.half	.L291-.L1384
	.byte	3,226,0,1,4,3,5,2,9
	.half	.L867-.L291
	.byte	3,136,127,1,5,32,9
	.half	.L297-.L867
	.byte	3,15,1,5,39,9
	.half	.L1385-.L297
	.byte	1,5,5,9
	.half	.L1386-.L1385
	.byte	1,4,1,5,118,9
	.half	.L298-.L1386
	.byte	3,233,0,1,5,5,7,9
	.half	.L289-.L298
	.byte	3,9,1,5,37,9
	.half	.L299-.L289
	.byte	3,18,1,5,16,9
	.half	.L843-.L299
	.byte	3,1,1,5,5,9
	.half	.L287-.L843
	.byte	3,24,1,5,1,9
	.half	.L279-.L287
	.byte	3,1,1,7,9
	.half	.L377-.L279
	.byte	0,1,1
.L1362:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetNumberOfEventMemoryEntries')
	.sect	'.debug_ranges'
.L376:
	.word	-1,.L328,0,.L377-.L328,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetNextEventFromMemory')
	.sect	'.debug_info'
.L378:
	.word	601
	.half	3
	.word	.L379
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L381,.L380
	.byte	2
	.word	.L329
	.byte	3
	.byte	'Dem_GetNextEventFromMemory',0,1,244,5,19
	.word	.L413
	.byte	1,1,1
	.word	.L326,.L871,.L325
	.byte	4
	.byte	'ReadEventsFromMemoryState',0,1,244,5,77
	.word	.L872,.L873
	.byte	4
	.byte	'EventId',0,1,244,5,121
	.word	.L874,.L875
	.byte	4
	.byte	'LocId',0,1,244,5,138,1
	.word	.L416,.L876
	.byte	5
	.word	.L326,.L871
	.byte	6
	.word	.L468,.L877,.L878
	.byte	7
	.word	.L470,.L879
	.byte	8
	.word	.L472,.L877,.L878
	.byte	6
	.word	.L473,.L880,.L266
	.byte	7
	.word	.L475,.L881
	.byte	9
	.word	.L477,.L880,.L266
	.byte	0,0,0,6
	.word	.L495,.L882,.L883
	.byte	7
	.word	.L496,.L884
	.byte	7
	.word	.L498,.L885
	.byte	9
	.word	.L500,.L882,.L883
	.byte	0,6
	.word	.L432,.L886,.L269
	.byte	7
	.word	.L434,.L887
	.byte	8
	.word	.L436,.L886,.L269
	.byte	6
	.word	.L437,.L888,.L268
	.byte	7
	.word	.L439,.L889
	.byte	9
	.word	.L441,.L888,.L268
	.byte	0,0,0,6
	.word	.L452,.L269,.L270
	.byte	7
	.word	.L454,.L890
	.byte	9
	.word	.L456,.L269,.L270
	.byte	0,6
	.word	.L501,.L891,.L274
	.byte	7
	.word	.L502,.L892
	.byte	7
	.word	.L504,.L893
	.byte	8
	.word	.L506,.L891,.L274
	.byte	6
	.word	.L507,.L891,.L273
	.byte	7
	.word	.L508,.L894
	.byte	9
	.word	.L510,.L891,.L273
	.byte	0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetNextEventFromMemory')
	.sect	'.debug_abbrev'
.L379:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	29,1,49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,17,1,18,1,0,0,9,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetNextEventFromMemory')
	.sect	'.debug_line'
.L380:
	.word	.L1388-.L1387
.L1387:
	.half	3
	.word	.L1390-.L1389
.L1389:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0,0
.L1390:
	.byte	5,125,7,0,5,2
	.word	.L326
	.byte	3,245,5,1,5,68,9
	.half	.L265-.L326
	.byte	3,2,1,4,2,5,46,9
	.half	.L877-.L265
	.byte	3,167,123,1,5,66,9
	.half	.L1391-.L877
	.byte	1,5,33,9
	.half	.L880-.L1391
	.byte	3,123,1,5,5,9
	.half	.L1392-.L880
	.byte	1,9
	.half	.L266-.L1392
	.byte	3,5,1,4,1,5,12,9
	.half	.L267-.L266
	.byte	3,217,4,1,5,45,9
	.half	.L878-.L267
	.byte	3,2,1,5,10,9
	.half	.L1393-.L878
	.byte	1,5,66,9
	.half	.L1394-.L1393
	.byte	3,1,1,4,2,5,7,9
	.half	.L882-.L1394
	.byte	3,175,127,1,5,13,9
	.half	.L1395-.L882
	.byte	1,4,1,5,66,9
	.half	.L883-.L1395
	.byte	3,211,0,1,4,2,5,65,9
	.half	.L886-.L883
	.byte	3,144,123,1,5,33,9
	.half	.L888-.L886
	.byte	3,123,1,5,5,9
	.half	.L1396-.L888
	.byte	1,9
	.half	.L268-.L1396
	.byte	3,5,1,5,67,9
	.half	.L269-.L268
	.byte	3,195,3,1,5,39,9
	.half	.L1397-.L269
	.byte	1,5,100,9
	.half	.L1398-.L1397
	.byte	1,5,97,9
	.half	.L1399-.L1398
	.byte	1,5,4,9
	.half	.L1400-.L1399
	.byte	1,4,1,5,3,9
	.half	.L270-.L1400
	.byte	3,173,1,1,5,11,7,9
	.half	.L1401-.L270
	.byte	3,2,1,5,4,9
	.half	.L1402-.L1401
	.byte	1,5,75,9
	.half	.L264-.L1402
	.byte	3,119,1,4,2,5,2,9
	.half	.L891-.L264
	.byte	3,158,127,1,5,32,9
	.half	.L273-.L891
	.byte	3,15,1,5,39,9
	.half	.L1403-.L273
	.byte	1,5,5,9
	.half	.L1404-.L1403
	.byte	1,4,1,5,125,9
	.half	.L274-.L1404
	.byte	3,211,0,1,5,9,7,9
	.half	.L1405-.L274
	.byte	3,12,1,5,2,9
	.half	.L1406-.L1405
	.byte	1,5,1,9
	.half	.L272-.L1406
	.byte	3,1,1,7,9
	.half	.L382-.L272
	.byte	0,1,1
.L1388:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetNextEventFromMemory')
	.sect	'.debug_ranges'
.L381:
	.word	-1,.L326,0,.L382-.L326,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_ReadEventsFromMemory')
	.sect	'.debug_info'
.L383:
	.word	505
	.half	3
	.word	.L384
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L386,.L385
	.byte	2
	.word	.L329
	.byte	3
	.byte	'Dem_ReadEventsFromMemory',0,1,229,5,19
	.word	.L413
	.byte	1,1,1
	.word	.L324,.L895,.L323
	.byte	4
	.byte	'ReadEventsFromMemoryState',0,1,229,5,75
	.word	.L872,.L896
	.byte	4
	.byte	'origin',0,1,229,5,120
	.word	.L413,.L897
	.byte	5
	.word	.L324,.L895
	.byte	6
	.word	.L898,.L324,.L257
	.byte	7
	.word	.L899,.L900
	.byte	8
	.word	.L901,.L324,.L257
	.byte	0,6
	.word	.L902,.L903,.L258
	.byte	7
	.word	.L904,.L905
	.byte	8
	.word	.L906,.L903,.L258
	.byte	0,6
	.word	.L420,.L907,.L908
	.byte	7
	.word	.L423,.L909
	.byte	7
	.word	.L425,.L910
	.byte	9
	.word	.L427,.L907,.L908
	.byte	6
	.word	.L428,.L907,.L260
	.byte	7
	.word	.L429,.L911
	.byte	8
	.word	.L431,.L907,.L260
	.byte	0,0,0,6
	.word	.L912,.L913,.L914
	.byte	7
	.word	.L915,.L916
	.byte	7
	.word	.L917,.L918
	.byte	9
	.word	.L919,.L913,.L914
	.byte	6
	.word	.L507,.L913,.L262
	.byte	7
	.word	.L508,.L920
	.byte	8
	.word	.L510,.L913,.L262
	.byte	0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_ReadEventsFromMemory')
	.sect	'.debug_abbrev'
.L384:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	29,1,49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,9,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_ReadEventsFromMemory')
	.sect	'.debug_line'
.L385:
	.word	.L1408-.L1407
.L1407:
	.half	3
	.word	.L1410-.L1409
.L1409:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMem.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0,0
.L1410:
	.byte	4,2,5,12,7,0,5,2
	.word	.L324
	.byte	3,41,1,5,33,9
	.half	.L1411-.L324
	.byte	1,5,41,9
	.half	.L1412-.L1411
	.byte	1,5,5,9
	.half	.L1413-.L1412
	.byte	1,4,1,5,37,9
	.half	.L257-.L1413
	.byte	3,189,5,1,4,2,5,33,9
	.half	.L903-.L257
	.byte	3,190,122,1,5,41,9
	.half	.L1414-.L903
	.byte	1,5,5,9
	.half	.L1415-.L1414
	.byte	1,4,1,5,2,9
	.half	.L258-.L1415
	.byte	3,195,5,1,5,65,7,9
	.half	.L1416-.L258
	.byte	3,2,1,4,3,5,2,9
	.half	.L907-.L1416
	.byte	3,159,127,1,5,12,9
	.half	.L260-.L907
	.byte	3,20,1,4,1,5,10,9
	.half	.L908-.L260
	.byte	3,206,0,1,5,3,9
	.half	.L1417-.L908
	.byte	1,5,71,9
	.half	.L259-.L1417
	.byte	3,4,1,4,3,5,2,9
	.half	.L913-.L259
	.byte	3,165,127,1,5,12,9
	.half	.L262-.L913
	.byte	3,27,1,4,1,5,10,9
	.half	.L914-.L262
	.byte	3,193,0,1,5,3,9
	.half	.L1418-.L914
	.byte	1,5,1,9
	.half	.L261-.L1418
	.byte	3,2,1,7,9
	.half	.L387-.L261
	.byte	0,1,1
.L1408:
	.sdecl	'.debug_ranges',debug,cluster('Dem_ReadEventsFromMemory')
	.sect	'.debug_ranges'
.L386:
	.word	-1,.L324,0,.L387-.L324,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_EvMemApiMainFunction')
	.sect	'.debug_info'
.L388:
	.word	403
	.half	3
	.word	.L389
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L391,.L390
	.byte	2
	.word	.L329
	.byte	3
	.byte	'Dem_EvMemApiMainFunction',0,1,114,6,1,1,1
	.word	.L306,.L921,.L305
	.byte	4
	.word	.L306,.L921
	.byte	5
	.byte	'LocId',0,1,118,15
	.word	.L418,.L922
	.byte	5
	.byte	'DtcIdStored',0,1,119,16
	.word	.L520,.L923
	.byte	5
	.byte	'DTCOriginStored',0,1,120,20
	.word	.L413,.L924
	.byte	5
	.byte	'ReqCounterStored',0,1,121,8
	.word	.L413,.L925
	.byte	6
	.word	.L656,.L926,.L927
	.byte	7
	.word	.L659,.L928
	.byte	8
	.word	.L661,.L926,.L927
	.byte	0,6
	.word	.L442,.L927,.L13
	.byte	8
	.word	.L443,.L927,.L13
	.byte	0,6
	.word	.L929,.L930,.L14
	.byte	7
	.word	.L931,.L932
	.byte	8
	.word	.L933,.L930,.L14
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EvMemApiMainFunction')
	.sect	'.debug_abbrev'
.L389:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6,29,1
	.byte	49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_EvMemApiMainFunction')
	.sect	'.debug_line'
.L390:
	.word	.L1420-.L1419
.L1419:
	.half	3
	.word	.L1422-.L1421
.L1421:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0,0
.L1422:
	.byte	5,16,7,0,5,2
	.word	.L306
	.byte	3,254,0,1,5,34,9
	.half	.L1423-.L306
	.byte	1,5,38,9
	.half	.L946-.L1423
	.byte	3,1,1,5,39,9
	.half	.L947-.L946
	.byte	3,1,1,5,44,9
	.half	.L948-.L947
	.byte	3,2,1,5,2,9
	.half	.L1424-.L948
	.byte	1,5,21,7,9
	.half	.L1425-.L1424
	.byte	3,2,1,5,32,9
	.half	.L1426-.L1425
	.byte	1,5,30,9
	.half	.L1427-.L1426
	.byte	1,4,2,5,21,9
	.half	.L926-.L1427
	.byte	3,21,1,5,12,9
	.half	.L1428-.L926
	.byte	1,5,28,7,9
	.half	.L1429-.L1428
	.byte	1,5,21,9
	.half	.L1430-.L1429
	.byte	1,5,4,9
	.half	.L9-.L1430
	.byte	1,4,1,5,3,9
	.half	.L11-.L9
	.byte	3,108,1,4,3,5,2,7,9
	.half	.L927-.L11
	.byte	3,238,3,1,4,1,5,122,9
	.half	.L13-.L927
	.byte	3,148,124,1,4,3,5,38,9
	.half	.L930-.L13
	.byte	3,106,1,5,5,9
	.half	.L1431-.L930
	.byte	1,4,1,5,31,9
	.half	.L14-.L1431
	.byte	3,23,1,5,4,9
	.half	.L1432-.L14
	.byte	3,1,1,5,58,7,9
	.half	.L1433-.L1432
	.byte	3,2,1,5,38,9
	.half	.L1434-.L1433
	.byte	1,5,58,9
	.half	.L1435-.L1434
	.byte	1,5,36,9
	.half	.L1436-.L1435
	.byte	1,5,33,9
	.half	.L12-.L1436
	.byte	3,3,1,5,1,9
	.half	.L8-.L12
	.byte	3,6,1,7,9
	.half	.L392-.L8
	.byte	0,1,1
.L1420:
	.sdecl	'.debug_ranges',debug,cluster('Dem_EvMemApiMainFunction')
	.sect	'.debug_ranges'
.L391:
	.word	-1,.L306,0,.L392-.L306,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility')
	.sect	'.debug_info'
.L393:
	.word	309
	.half	3
	.word	.L394
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L396,.L395
	.byte	2
	.word	.L329
	.byte	3
	.byte	'Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility',0,1,36,14
	.word	.L418
	.byte	1,1,1
	.word	.L302,.L934,.L301
	.byte	4
	.byte	'DtcId',0,1,36,80
	.word	.L520,.L935
	.byte	4
	.byte	'DTCOrigin',0,1,36,105
	.word	.L413,.L936
	.byte	4
	.byte	'ShadowEntriesVisible',0,1,36,134,1
	.word	.L413,.L937
	.byte	5
	.word	.L302,.L934
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility')
	.sect	'.debug_abbrev'
.L394:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility')
	.sect	'.debug_line'
.L395:
	.word	.L1438-.L1437
.L1437:
	.half	3
	.word	.L1440-.L1439
.L1439:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0,0,0,0,0
.L1440:
	.byte	5,2,7,0,5,2
	.word	.L302
	.byte	3,37,1,5,66,7,9
	.half	.L1441-.L302
	.byte	3,2,1,5,95,9
	.half	.L943-.L1441
	.byte	1,5,3,9
	.half	.L944-.L943
	.byte	1,5,9,9
	.half	.L2-.L944
	.byte	3,23,1,5,2,9
	.half	.L1442-.L2
	.byte	1,5,1,9
	.half	.L3-.L1442
	.byte	3,1,1,7,9
	.half	.L397-.L3
	.byte	0,1,1
.L1438:
	.sdecl	'.debug_ranges',debug,cluster('Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility')
	.sect	'.debug_ranges'
.L396:
	.word	-1,.L302,0,.L397-.L302,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_EvMemReqSyncDataRecord')
	.sect	'.debug_info'
.L398:
	.word	275
	.half	3
	.word	.L399
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L401,.L400
	.byte	2
	.word	.L329
	.byte	3
	.byte	'Dem_EvMemReqSyncDataRecord',0,1,90,26
	.word	.L413
	.byte	1,1
	.word	.L304,.L938,.L303
	.byte	4
	.byte	'DtcId',0,1,90,67
	.word	.L520,.L939
	.byte	4
	.byte	'DTCOrigin',0,1,90,92
	.word	.L413,.L940
	.byte	5
	.word	.L304,.L938
	.byte	6
	.byte	'returnStatus',0,1,93,20
	.word	.L413,.L941
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EvMemReqSyncDataRecord')
	.sect	'.debug_abbrev'
.L399:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_EvMemReqSyncDataRecord')
	.sect	'.debug_line'
.L400:
	.word	.L1444-.L1443
.L1443:
	.half	3
	.word	.L1446-.L1445
.L1445:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0,0,0,0,0
.L1446:
	.byte	5,7,7,0,5,2
	.word	.L304
	.byte	3,224,0,1,5,25,9
	.half	.L1447-.L304
	.byte	1,5,6,9
	.half	.L1448-.L1447
	.byte	1,5,64,7,9
	.half	.L1449-.L1448
	.byte	1,5,75,9
	.half	.L1450-.L1449
	.byte	1,5,28,7,9
	.half	.L5-.L1450
	.byte	3,2,1,5,32,9
	.half	.L1451-.L5
	.byte	3,1,1,5,21,9
	.half	.L1452-.L1451
	.byte	3,1,1,5,32,9
	.half	.L1453-.L1452
	.byte	1,5,21,9
	.half	.L6-.L1453
	.byte	1,5,55,9
	.half	.L1454-.L6
	.byte	3,2,1,5,88,9
	.half	.L1455-.L1454
	.byte	1,5,67,9
	.half	.L1456-.L1455
	.byte	1,5,2,9
	.half	.L945-.L1456
	.byte	3,4,1,5,1,9
	.half	.L7-.L945
	.byte	3,1,1,7,9
	.half	.L402-.L7
	.byte	0,1,1
.L1444:
	.sdecl	'.debug_ranges',debug,cluster('Dem_EvMemReqSyncDataRecord')
	.sect	'.debug_ranges'
.L401:
	.word	-1,.L304,0,.L402-.L304,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_EvMemDTCRecord')
	.sect	'.debug_info'
.L403:
	.word	176
	.half	3
	.word	.L404
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L329
	.byte	3
	.byte	'Dem_EvMemDTCRecord',0,30,76,24
	.word	.L942
	.byte	1,5,3
	.word	Dem_EvMemDTCRecord
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EvMemDTCRecord')
	.sect	'.debug_abbrev'
.L404:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('DemDtcIdCopy')
	.sect	'.debug_info'
.L405:
	.word	169
	.half	3
	.word	.L406
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L329
	.byte	3
	.byte	'DemDtcIdCopy',0,30,19,22
	.word	.L520
	.byte	5,3
	.word	DemDtcIdCopy
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('DemDtcIdCopy')
	.sect	'.debug_abbrev'
.L406:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('DemDtcCodeCopy')
	.sect	'.debug_info'
.L407:
	.word	171
	.half	3
	.word	.L408
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L329
	.byte	3
	.byte	'DemDtcCodeCopy',0,30,20,15
	.word	.L623
	.byte	5,3
	.word	DemDtcCodeCopy
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('DemDtcCodeCopy')
	.sect	'.debug_abbrev'
.L408:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_EvMemFilteredRecordLocId')
	.sect	'.debug_info'
.L409:
	.word	186
	.half	3
	.word	.L410
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L329
	.byte	3
	.byte	'Dem_EvMemFilteredRecordLocId',0,30,162,4,21
	.word	.L418
	.byte	5,3
	.word	Dem_EvMemFilteredRecordLocId
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EvMemFilteredRecordLocId')
	.sect	'.debug_abbrev'
.L410:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_EvMemFilteredRecordFreezeFrameId')
	.sect	'.debug_info'
.L411:
	.word	194
	.half	3
	.word	.L412
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L329
	.byte	3
	.byte	'Dem_EvMemFilteredRecordFreezeFrameId',0,30,163,4,21
	.word	.L418
	.byte	5,3
	.word	Dem_EvMemFilteredRecordFreezeFrameId
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EvMemFilteredRecordFreezeFrameId')
	.sect	'.debug_abbrev'
.L412:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_DisableDTCRecordUpdate')
	.sect	'.debug_loc'
.L624:
	.word	-1,.L308,0,.L622-.L308
	.half	1
	.byte	84
	.word	0,0
.L625:
	.word	-1,.L308,0,.L622-.L308
	.half	1
	.byte	85
	.word	0,0
.L307:
	.word	-1,.L308,0,.L622-.L308
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_EnableDTCRecordUpdate')
	.sect	'.debug_loc'
.L309:
	.word	-1,.L310,0,.L629-.L310
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_EvMemApiMainFunction')
	.sect	'.debug_loc'
.L924:
	.word	-1,.L306,.L947-.L306,.L930-.L306
	.half	1
	.byte	85
	.word	0,0
.L305:
	.word	-1,.L306,0,.L921-.L306
	.half	2
	.byte	138,0
	.word	0,0
.L923:
	.word	-1,.L306,.L946-.L306,.L930-.L306
	.half	1
	.byte	84
	.word	0,0
.L932:
	.word	0,0
.L922:
	.word	-1,.L306,.L930-.L306,.L12-.L306
	.half	1
	.byte	82
	.word	0,0
.L925:
	.word	-1,.L306,.L948-.L306,.L921-.L306
	.half	1
	.byte	88
	.word	0,0
.L928:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility')
	.sect	'.debug_loc'
.L936:
	.word	-1,.L302,0,.L943-.L302
	.half	1
	.byte	85
	.word	.L2-.L302,.L3-.L302
	.half	1
	.byte	85
	.word	0,0
.L301:
	.word	-1,.L302,0,.L934-.L302
	.half	2
	.byte	138,0
	.word	0,0
.L935:
	.word	-1,.L302,0,.L944-.L302
	.half	1
	.byte	84
	.word	.L2-.L302,.L3-.L302
	.half	1
	.byte	84
	.word	0,0
.L937:
	.word	-1,.L302,0,.L944-.L302
	.half	1
	.byte	86
	.word	.L2-.L302,.L3-.L302
	.half	1
	.byte	86
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_EvMemReqSyncDataRecord')
	.sect	'.debug_loc'
.L940:
	.word	-1,.L304,0,.L938-.L304
	.half	1
	.byte	85
	.word	0,0
.L303:
	.word	-1,.L304,0,.L938-.L304
	.half	2
	.byte	138,0
	.word	0,0
.L939:
	.word	-1,.L304,0,.L938-.L304
	.half	1
	.byte	84
	.word	0,0
.L941:
	.word	-1,.L304,.L945-.L304,.L938-.L304
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetExtendedDataRecordByDTC')
	.sect	'.debug_loc'
.L767:
	.word	-1,.L312,0,.L950-.L312
	.half	1
	.byte	101
	.word	.L771-.L312,.L761-.L312
	.half	1
	.byte	109
	.word	.L20-.L312,.L958-.L312
	.half	1
	.byte	101
	.word	.L24-.L312,.L963-.L312
	.half	1
	.byte	101
	.word	.L969-.L312,.L967-.L312
	.half	1
	.byte	101
	.word	0,0
.L762:
	.word	-1,.L312,0,.L951-.L312
	.half	1
	.byte	84
	.word	.L955-.L312,.L775-.L312
	.half	1
	.byte	88
	.word	.L20-.L312,.L959-.L312
	.half	1
	.byte	84
	.word	.L24-.L312,.L963-.L312
	.half	1
	.byte	84
	.word	0,0
.L772:
	.word	0,0
.L763:
	.word	-1,.L312,0,.L952-.L312
	.half	1
	.byte	85
	.word	.L20-.L312,.L960-.L312
	.half	1
	.byte	85
	.word	.L24-.L312,.L963-.L312
	.half	1
	.byte	85
	.word	0,0
.L774:
	.word	0,0
.L764:
	.word	-1,.L312,0,.L953-.L312
	.half	1
	.byte	86
	.word	0,.L761-.L312
	.half	2
	.byte	145,120
	.word	.L20-.L312,.L961-.L312
	.half	1
	.byte	86
	.word	.L24-.L312,.L963-.L312
	.half	1
	.byte	86
	.word	0,0
.L311:
	.word	-1,.L312,0,.L949-.L312
	.half	2
	.byte	138,0
	.word	.L949-.L312,.L761-.L312
	.half	2
	.byte	138,8
	.word	.L761-.L312,.L761-.L312
	.half	2
	.byte	138,0
	.word	0,0
.L766:
	.word	-1,.L312,0,.L950-.L312
	.half	1
	.byte	100
	.word	.L957-.L312,.L761-.L312
	.half	1
	.byte	108
	.word	.L20-.L312,.L958-.L312
	.half	1
	.byte	100
	.word	.L24-.L312,.L963-.L312
	.half	1
	.byte	100
	.word	.L968-.L312,.L967-.L312
	.half	1
	.byte	100
	.word	0,0
.L768:
	.word	-1,.L312,.L775-.L312,.L21-.L312
	.half	1
	.byte	88
	.word	.L964-.L312,.L965-.L312
	.half	1
	.byte	84
	.word	0,0
.L769:
	.word	0,0
.L800:
	.word	0,0
.L793:
	.word	0,0
.L801:
	.word	0,0
.L765:
	.word	-1,.L312,0,.L954-.L312
	.half	1
	.byte	87
	.word	.L956-.L312,.L761-.L312
	.half	1
	.byte	89
	.word	.L20-.L312,.L962-.L312
	.half	1
	.byte	87
	.word	.L24-.L312,.L963-.L312
	.half	1
	.byte	87
	.word	.L789-.L312,.L790-.L312
	.half	1
	.byte	85
	.word	.L966-.L312,.L967-.L312
	.half	1
	.byte	85
	.word	0,0
.L770:
	.word	-1,.L312,0,.L761-.L312
	.half	2
	.byte	145,121
	.word	0,0
.L786:
	.word	0,0
.L784:
	.word	0,0
.L777:
	.word	0,0
.L781:
	.word	0,0
.L791:
	.word	0,0
.L787:
	.word	0,0
.L780:
	.word	0,0
.L796:
	.word	0,0
.L799:
	.word	0,0
.L797:
	.word	0,0
.L785:
	.word	0,0
.L783:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetFreezeFrameDataByDTC')
	.sect	'.debug_loc'
.L636:
	.word	-1,.L316,0,.L992-.L316
	.half	1
	.byte	101
	.word	.L641-.L316,.L630-.L316
	.half	1
	.byte	109
	.word	.L87-.L316,.L1001-.L316
	.half	1
	.byte	101
	.word	.L91-.L316,.L1006-.L316
	.half	1
	.byte	101
	.word	.L1016-.L316,.L1015-.L316
	.half	1
	.byte	101
	.word	0,0
.L631:
	.word	-1,.L316,0,.L993-.L316
	.half	1
	.byte	84
	.word	.L997-.L316,.L630-.L316
	.half	1
	.byte	88
	.word	.L87-.L316,.L1002-.L316
	.half	1
	.byte	84
	.word	.L91-.L316,.L1006-.L316
	.half	1
	.byte	84
	.word	0,0
.L643:
	.word	0,0
.L632:
	.word	-1,.L316,0,.L994-.L316
	.half	1
	.byte	85
	.word	.L87-.L316,.L1003-.L316
	.half	1
	.byte	85
	.word	.L91-.L316,.L1006-.L316
	.half	1
	.byte	85
	.word	0,0
.L648:
	.word	0,0
.L633:
	.word	-1,.L316,0,.L995-.L316
	.half	1
	.byte	86
	.word	0,.L630-.L316
	.half	2
	.byte	145,120
	.word	.L87-.L316,.L1004-.L316
	.half	1
	.byte	86
	.word	.L91-.L316,.L1006-.L316
	.half	1
	.byte	86
	.word	0,0
.L315:
	.word	-1,.L316,0,.L991-.L316
	.half	2
	.byte	138,0
	.word	.L991-.L316,.L630-.L316
	.half	2
	.byte	138,8
	.word	.L630-.L316,.L630-.L316
	.half	2
	.byte	138,0
	.word	0,0
.L635:
	.word	-1,.L316,0,.L992-.L316
	.half	1
	.byte	100
	.word	.L1000-.L316,.L630-.L316
	.half	1
	.byte	108
	.word	.L87-.L316,.L1001-.L316
	.half	1
	.byte	100
	.word	.L91-.L316,.L1006-.L316
	.half	1
	.byte	100
	.word	.L1014-.L316,.L1015-.L316
	.half	1
	.byte	100
	.word	0,0
.L637:
	.word	-1,.L316,.L651-.L316,.L1007-.L316
	.half	1
	.byte	84
	.word	.L106-.L316,.L1008-.L316
	.half	1
	.byte	84
	.word	.L110-.L316,.L1011-.L316
	.half	1
	.byte	84
	.word	0,0
.L690:
	.word	0,0
.L702:
	.word	0,0
.L713:
	.word	0,0
.L639:
	.word	-1,.L316,.L1009-.L316,.L1010-.L316
	.half	5
	.byte	144,32,157,32,0
	.word	.L110-.L316,.L695-.L316
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L709:
	.word	0,0
.L714:
	.word	0,0
.L715:
	.word	0,0
.L718:
	.word	0,0
.L692:
	.word	0,0
.L704:
	.word	0,0
.L711:
	.word	0,0
.L638:
	.word	0,0
.L634:
	.word	-1,.L316,0,.L996-.L316
	.half	1
	.byte	87
	.word	.L998-.L316,.L999-.L316
	.half	1
	.byte	89
	.word	.L87-.L316,.L1005-.L316
	.half	1
	.byte	87
	.word	.L91-.L316,.L1006-.L316
	.half	1
	.byte	87
	.word	0,0
.L699:
	.word	-1,.L316,.L1012-.L316,.L1013-.L316
	.half	1
	.byte	95
	.word	0,0
.L677:
	.word	0,0
.L671:
	.word	0,0
.L697:
	.word	0,0
.L654:
	.word	0,0
.L664:
	.word	0,0
.L685:
	.word	0,0
.L681:
	.word	0,0
.L660:
	.word	0,0
.L694:
	.word	0,0
.L698:
	.word	0,0
.L675:
	.word	0,0
.L669:
	.word	0,0
.L696:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetNextEventFromMemory')
	.sect	'.debug_loc'
.L325:
	.word	-1,.L326,0,.L871-.L326
	.half	2
	.byte	138,0
	.word	0,0
.L875:
	.word	-1,.L326,0,.L871-.L326
	.half	1
	.byte	101
	.word	0,0
.L889:
	.word	0,0
.L881:
	.word	0,0
.L887:
	.word	0,0
.L879:
	.word	0,0
.L892:
	.word	0,0
.L884:
	.word	0,0
.L876:
	.word	-1,.L326,0,.L871-.L326
	.half	1
	.byte	102
	.word	0,0
.L894:
	.word	0,0
.L893:
	.word	0,0
.L885:
	.word	0,0
.L873:
	.word	-1,.L326,0,.L871-.L326
	.half	1
	.byte	100
	.word	0,0
.L890:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetNextFilteredRecord')
	.sect	'.debug_loc'
.L515:
	.word	-1,.L322,0,.L201-.L322
	.half	1
	.byte	100
	.word	.L1043-.L322,.L513-.L322
	.half	2
	.byte	145,120
	.word	.L564-.L322,.L228-.L322
	.half	1
	.byte	111
	.word	.L601-.L322,.L245-.L322
	.half	1
	.byte	111
	.word	0,0
.L321:
	.word	-1,.L322,0,.L1042-.L322
	.half	2
	.byte	138,0
	.word	.L1042-.L322,.L513-.L322
	.half	2
	.byte	138,8
	.word	.L513-.L322,.L513-.L322
	.half	2
	.byte	138,0
	.word	0,0
.L554:
	.word	0,0
.L521:
	.word	-1,.L322,.L1047-.L322,.L200-.L322
	.half	1
	.byte	88
	.word	0,0
.L526:
	.word	0,0
.L529:
	.word	0,0
.L535:
	.word	0,0
.L584:
	.word	0,0
.L522:
	.word	0,0
.L524:
	.word	0,0
.L527:
	.word	0,0
.L530:
	.word	0,0
.L579:
	.word	0,0
.L518:
	.word	-1,.L322,.L1048-.L322,.L220-.L322
	.half	1
	.byte	82
	.word	0,0
.L619:
	.word	0,0
.L617:
	.word	0,0
.L621:
	.word	0,0
.L620:
	.word	0,0
.L618:
	.word	0,0
.L574:
	.word	0,0
.L517:
	.word	-1,.L322,0,.L201-.L322
	.half	1
	.byte	101
	.word	.L1044-.L322,.L513-.L322
	.half	1
	.byte	108
	.word	0,0
.L539:
	.word	0,0
.L541:
	.word	0,0
.L543:
	.word	0,0
.L538:
	.word	0,0
.L519:
	.word	-1,.L322,.L1045-.L322,.L1046-.L322
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L616:
	.word	-1,.L322,.L1049-.L322,.L1050-.L322
	.half	1
	.byte	95
	.word	0,0
.L612:
	.word	0,0
.L561:
	.word	0,0
.L548:
	.word	0,0
.L556:
	.word	0,0
.L568:
	.word	0,0
.L605:
	.word	0,0
.L614:
	.word	0,0
.L545:
	.word	0,0
.L588:
	.word	0,0
.L598:
	.word	0,0
.L590:
	.word	0,0
.L610:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetNumberOfEventMemoryEntries')
	.sect	'.debug_loc'
.L840:
	.word	0,0
.L836:
	.word	-1,.L328,0,.L835-.L328
	.half	2
	.byte	145,120
	.word	0,.L1052-.L328
	.half	1
	.byte	84
	.word	.L281-.L328,.L1055-.L328
	.half	1
	.byte	84
	.word	.L282-.L328,.L1057-.L328
	.half	1
	.byte	84
	.word	0,0
.L327:
	.word	-1,.L328,0,.L1051-.L328
	.half	2
	.byte	138,0
	.word	.L1051-.L328,.L835-.L328
	.half	2
	.byte	138,8
	.word	.L835-.L328,.L835-.L328
	.half	2
	.byte	138,0
	.word	0,0
.L862:
	.word	0,0
.L860:
	.word	0,0
.L856:
	.word	0,0
.L868:
	.word	0,0
.L865:
	.word	0,0
.L847:
	.word	-1,.L328,0,.L835-.L328
	.half	2
	.byte	145,124
	.word	0,0
.L852:
	.word	0,0
.L858:
	.word	0,0
.L870:
	.word	0,0
.L857:
	.word	0,0
.L869:
	.word	0,0
.L866:
	.word	0,0
.L845:
	.word	0,0
.L837:
	.word	-1,.L328,0,.L1053-.L328
	.half	1
	.byte	100
	.word	.L1054-.L328,.L835-.L328
	.half	1
	.byte	108
	.word	.L281-.L328,.L1056-.L328
	.half	1
	.byte	100
	.word	.L282-.L328,.L1058-.L328
	.half	1
	.byte	100
	.word	0,0
.L863:
	.word	0,0
.L848:
	.word	-1,.L328,.L850-.L328,.L1059-.L328
	.half	5
	.byte	144,32,157,32,0
	.word	.L296-.L328,.L287-.L328
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L838:
	.word	-1,.L328,.L277-.L328,.L1053-.L328
	.half	1
	.byte	82
	.word	.L281-.L328,.L1056-.L328
	.half	1
	.byte	82
	.word	.L282-.L328,.L1058-.L328
	.half	1
	.byte	82
	.word	.L286-.L328,.L279-.L328
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetSizeOfExtendedDataRecordByDTC')
	.sect	'.debug_loc'
.L803:
	.word	-1,.L314,0,.L971-.L314
	.half	1
	.byte	84
	.word	.L976-.L314,.L977-.L314
	.half	1
	.byte	88
	.word	.L60-.L314,.L979-.L314
	.half	1
	.byte	84
	.word	.L64-.L314,.L984-.L314
	.half	1
	.byte	84
	.word	0,0
.L812:
	.word	0,0
.L804:
	.word	-1,.L314,0,.L972-.L314
	.half	1
	.byte	85
	.word	.L60-.L314,.L980-.L314
	.half	1
	.byte	85
	.word	.L64-.L314,.L984-.L314
	.half	1
	.byte	85
	.word	0,0
.L814:
	.word	0,0
.L805:
	.word	-1,.L314,0,.L802-.L314
	.half	2
	.byte	145,120
	.word	0,.L973-.L314
	.half	1
	.byte	86
	.word	.L60-.L314,.L981-.L314
	.half	1
	.byte	86
	.word	.L64-.L314,.L984-.L314
	.half	1
	.byte	86
	.word	0,0
.L313:
	.word	-1,.L314,0,.L970-.L314
	.half	2
	.byte	138,0
	.word	.L970-.L314,.L802-.L314
	.half	2
	.byte	138,8
	.word	.L802-.L314,.L802-.L314
	.half	2
	.byte	138,0
	.word	0,0
.L808:
	.word	-1,.L314,.L815-.L314,.L985-.L314
	.half	5
	.byte	144,32,157,32,0
	.word	.L76-.L314,.L986-.L314
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L809:
	.word	0,0
.L806:
	.word	-1,.L314,0,.L974-.L314
	.half	1
	.byte	87
	.word	.L978-.L314,.L802-.L314
	.half	1
	.byte	89
	.word	.L60-.L314,.L982-.L314
	.half	1
	.byte	87
	.word	.L64-.L314,.L984-.L314
	.half	1
	.byte	87
	.word	0,0
.L807:
	.word	-1,.L314,0,.L975-.L314
	.half	1
	.byte	100
	.word	.L811-.L314,.L802-.L314
	.half	1
	.byte	109
	.word	.L60-.L314,.L983-.L314
	.half	1
	.byte	100
	.word	.L64-.L314,.L984-.L314
	.half	1
	.byte	100
	.word	.L987-.L314,.L988-.L314
	.half	1
	.byte	100
	.word	.L989-.L314,.L990-.L314
	.half	1
	.byte	100
	.word	0,0
.L810:
	.word	-1,.L314,0,.L802-.L314
	.half	2
	.byte	145,121
	.word	0,0
.L826:
	.word	0,0
.L824:
	.word	0,0
.L817:
	.word	0,0
.L821:
	.word	0,0
.L834:
	.word	0,0
.L827:
	.word	0,0
.L820:
	.word	0,0
.L825:
	.word	0,0
.L823:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetSizeOfFreezeFrameByDTC')
	.sect	'.debug_loc'
.L721:
	.word	-1,.L318,0,.L1018-.L318
	.half	1
	.byte	84
	.word	.L1023-.L318,.L1024-.L318
	.half	1
	.byte	88
	.word	.L135-.L318,.L1026-.L318
	.half	1
	.byte	84
	.word	.L139-.L318,.L1031-.L318
	.half	1
	.byte	84
	.word	0,0
.L731:
	.word	0,0
.L722:
	.word	-1,.L318,0,.L1019-.L318
	.half	1
	.byte	85
	.word	.L135-.L318,.L1027-.L318
	.half	1
	.byte	85
	.word	.L139-.L318,.L1031-.L318
	.half	1
	.byte	85
	.word	0,0
.L733:
	.word	0,0
.L723:
	.word	-1,.L318,0,.L1020-.L318
	.half	1
	.byte	86
	.word	0,.L720-.L318
	.half	2
	.byte	145,120
	.word	.L135-.L318,.L1028-.L318
	.half	1
	.byte	86
	.word	.L139-.L318,.L1031-.L318
	.half	1
	.byte	86
	.word	0,0
.L317:
	.word	-1,.L318,0,.L1017-.L318
	.half	2
	.byte	138,0
	.word	.L1017-.L318,.L720-.L318
	.half	2
	.byte	138,8
	.word	.L720-.L318,.L720-.L318
	.half	2
	.byte	138,0
	.word	0,0
.L726:
	.word	-1,.L318,.L734-.L318,.L1032-.L318
	.half	5
	.byte	144,32,157,32,0
	.word	.L151-.L318,.L1033-.L318
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L751:
	.word	0,0
.L728:
	.word	-1,.L318,.L1024-.L318,.L136-.L318
	.half	1
	.byte	88
	.word	0,0
.L727:
	.word	0,0
.L752:
	.word	0,0
.L724:
	.word	-1,.L318,0,.L1021-.L318
	.half	1
	.byte	87
	.word	.L1025-.L318,.L720-.L318
	.half	1
	.byte	89
	.word	.L135-.L318,.L1029-.L318
	.half	1
	.byte	87
	.word	.L139-.L318,.L1031-.L318
	.half	1
	.byte	87
	.word	0,0
.L729:
	.word	-1,.L318,.L1037-.L318,.L136-.L318
	.half	1
	.byte	82
	.word	0,0
.L725:
	.word	-1,.L318,0,.L1022-.L318
	.half	1
	.byte	100
	.word	.L730-.L318,.L720-.L318
	.half	1
	.byte	109
	.word	.L135-.L318,.L1030-.L318
	.half	1
	.byte	100
	.word	.L139-.L318,.L1031-.L318
	.half	1
	.byte	100
	.word	.L1036-.L318,.L1037-.L318
	.half	1
	.byte	100
	.word	0,0
.L760:
	.word	-1,.L318,.L1038-.L318,.L1039-.L318
	.half	1
	.byte	95
	.word	0,0
.L758:
	.word	-1,.L318,.L1034-.L318,.L1035-.L318
	.half	1
	.byte	81
	.word	0,0
.L745:
	.word	0,0
.L743:
	.word	0,0
.L756:
	.word	0,0
.L736:
	.word	0,0
.L740:
	.word	0,0
.L749:
	.word	0,0
.L746:
	.word	0,0
.L739:
	.word	0,0
.L753:
	.word	0,0
.L757:
	.word	0,0
.L744:
	.word	0,0
.L742:
	.word	0,0
.L755:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_ReadEventsFromMemory')
	.sect	'.debug_loc'
.L323:
	.word	-1,.L324,0,.L895-.L324
	.half	2
	.byte	138,0
	.word	0,0
.L909:
	.word	0,0
.L916:
	.word	0,0
.L911:
	.word	0,0
.L920:
	.word	0,0
.L910:
	.word	0,0
.L918:
	.word	0,0
.L896:
	.word	-1,.L324,0,.L895-.L324
	.half	1
	.byte	100
	.word	0,0
.L905:
	.word	0,0
.L900:
	.word	0,0
.L897:
	.word	-1,.L324,0,.L895-.L324
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_SetFreezeFrameRecordFilter')
	.sect	'.debug_loc'
.L415:
	.word	-1,.L320,0,.L173-.L320
	.half	1
	.byte	84
	.word	0,0
.L319:
	.word	-1,.L320,0,.L414-.L320
	.half	2
	.byte	138,0
	.word	0,0
.L440:
	.word	0,0
.L476:
	.word	0,0
.L493:
	.word	0,0
.L435:
	.word	0,0
.L471:
	.word	0,0
.L485:
	.word	0,0
.L419:
	.word	-1,.L320,.L1041-.L320,.L483-.L320
	.half	1
	.byte	82
	.word	0,0
.L424:
	.word	0,0
.L503:
	.word	0,0
.L497:
	.word	0,0
.L430:
	.word	0,0
.L509:
	.word	0,0
.L426:
	.word	0,0
.L505:
	.word	0,0
.L499:
	.word	0,0
.L417:
	.word	-1,.L320,0,.L173-.L320
	.half	1
	.byte	100
	.word	.L1040-.L320,.L414-.L320
	.half	1
	.byte	108
	.word	0,0
.L450:
	.word	0,0
.L455:
	.word	0,0
.L460:
	.word	0,0
.L448:
	.word	0,0
.L480:
	.word	0,0
.L465:
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L1457:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility')
	.sect	'.debug_frame'
	.word	12
	.word	.L1457,.L302,.L934-.L302
	.sdecl	'.debug_frame',debug,cluster('Dem_EvMemReqSyncDataRecord')
	.sect	'.debug_frame'
	.word	24
	.word	.L1457,.L304,.L938-.L304
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_EvMemApiMainFunction')
	.sect	'.debug_frame'
	.word	12
	.word	.L1457,.L306,.L921-.L306
	.sdecl	'.debug_frame',debug,cluster('Dem_DisableDTCRecordUpdate')
	.sect	'.debug_frame'
	.word	24
	.word	.L1457,.L308,.L622-.L308
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Dem_EnableDTCRecordUpdate')
	.sect	'.debug_frame'
	.word	24
	.word	.L1457,.L310,.L629-.L310
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Dem_GetExtendedDataRecordByDTC')
	.sect	'.debug_frame'
	.word	36
	.word	.L1457,.L312,.L761-.L312
	.byte	4
	.word	(.L949-.L312)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L761-.L949)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_GetSizeOfExtendedDataRecordByDTC')
	.sect	'.debug_frame'
	.word	36
	.word	.L1457,.L314,.L802-.L314
	.byte	4
	.word	(.L970-.L314)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L802-.L970)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_GetFreezeFrameDataByDTC')
	.sect	'.debug_frame'
	.word	36
	.word	.L1457,.L316,.L630-.L316
	.byte	4
	.word	(.L991-.L316)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L630-.L991)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_GetSizeOfFreezeFrameByDTC')
	.sect	'.debug_frame'
	.word	36
	.word	.L1457,.L318,.L720-.L318
	.byte	4
	.word	(.L1017-.L318)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L720-.L1017)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_SetFreezeFrameRecordFilter')
	.sect	'.debug_frame'
	.word	12
	.word	.L1457,.L320,.L414-.L320
	.sdecl	'.debug_frame',debug,cluster('Dem_GetNextFilteredRecord')
	.sect	'.debug_frame'
	.word	36
	.word	.L1457,.L322,.L513-.L322
	.byte	4
	.word	(.L1042-.L322)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L513-.L1042)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_ReadEventsFromMemory')
	.sect	'.debug_frame'
	.word	20
	.word	.L1457,.L324,.L895-.L324
	.byte	8,19,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Dem_GetNextEventFromMemory')
	.sect	'.debug_frame'
	.word	16
	.word	.L1457,.L326,.L871-.L326
	.byte	8,19,8,23
	.sdecl	'.debug_frame',debug,cluster('Dem_GetNumberOfEventMemoryEntries')
	.sect	'.debug_frame'
	.word	36
	.word	.L1457,.L328,.L835-.L328
	.byte	4
	.word	(.L1051-.L328)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L835-.L1051)/2
	.byte	19,0,8,26,0,0

; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   834  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   835  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   836  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   837  
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   838  #endif
; BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.c	   839  

	; Module end
