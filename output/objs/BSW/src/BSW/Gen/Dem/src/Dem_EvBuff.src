	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc14676a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Dem\\src\\Dem_EvBuff.src BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c'

	
$TC16X
	
	.sdecl	'.text.Dem_EvBuff.Dem_EvBuffGetLocationToWrite',code,cluster('Dem_EvBuffGetLocationToWrite')
	.sect	'.text.Dem_EvBuff.Dem_EvBuffGetLocationToWrite'
	.align	2
	

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	     1  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	     2  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	     3  #include "Dem.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	     4  #include "Rte_Dem.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	     5  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	     6  #include "Dem_EvBuff.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	     7  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	     8  #include "Dem_Bfm.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	     9  #include "Dem_Cfg_EvBuff.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    10  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    11  #include "Dem_EnvMain.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    12  #include "Dem_EventFHandling.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    13  #include "Dem_EventStatus.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    14  #include "Dem_EventRecheck.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    15  #include "Dem_Obd.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    16  #include "Dem_J1939EnvFreezeFrame.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    17  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    18  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    19  #include "Dem_Lock.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    20  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    21  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    22  #if (DEM_CFG_SUPPORT_PROJECTSPECIFIC_FAILUREMEMORY == TRUE)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    23  #include "Dem_PrjSpecificFailureMemory.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    24  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    25  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    26  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    27  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    28  Dem_EvtBufferState Dem_EvtBuffer;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    29  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    30  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    31  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    32  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    33  #if (DEM_CFG_FFPRESTORAGE_NONVOLATILE == DEM_CFG_FFPRESTORAGE_NONVOLATILE_ON)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    34  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    35  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    36  DEM_ARRAY_DEFINE_CONST(Dem_NvmBlockIdType, Dem_PreStoredFFNvmId, DEM_CFG_PRESTORED_FF_SIZE, DEM_CFG_PRESTORED_FREEZEFRAME_NVMIDS);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    37  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    38  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    39  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    40  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    41  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    42  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    43  #define DEM_LOCATIONPRIO_NOOVERWRITE     (0u)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    44  #define DEM_LOCATIONPRIO_TYPESHIFT       (12u)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    45  #define DEM_LOCATIONPRIO_EMPTY           (0xFFFFFFu)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    46  #define DEM_LOCATIONPRIO_SAME_EVENTID    (0xFFFFFFu+1u)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    47  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    48  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    49  #if DEM_CFG_PRESTORED_FF_SIZE > DEM_CFG_EVBUFF_SIZE
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    50  #error DEM_CFG_PRESTORED_FF_SIZE must be smaller than DEM_CFG_EVBUFF_SIZE
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    51  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    52  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    53  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    54  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    55  /**
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    56   * @param[in]  EventId          Identification of Event by ID.
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    57   *             eventType         Type of the Event id.
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    58   * Dem: Local function to get the priority of an event
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    59   *
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    60   */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    61  DEM_INLINE uint32 Dem_EvBuffGetEventPriority (Dem_EventIdType EventId, Dem_EvBuffEventType eventType)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    62  {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    63      return ((uint32)eventType << DEM_LOCATIONPRIO_TYPESHIFT) +  (uint32)EventId;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    64  }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    65  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    66  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    67  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    68  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    69  /**
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    70   * @param[in]  Dem_EvtParamtype          structure containing paramters related to an event.
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    71   * Dem: Local function to get the priority of location. I.e finding place in the buffer
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    72   *
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    73   */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    74  DEM_INLINE uint32 Dem_EvBuffGetLocationPriority (const Dem_EvBuffEvent *bufferElement)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    75  {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    76      /* bufferElement->counter not checked, as the same event shall not use another location
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    77       * reason: if 2 events exist in the evbuffer for same eventId, it is not defined which one will first be retrieved to event-memory
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    78       */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    79  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    80      if (bufferElement->eventId == DEM_EVENTID_INVALID)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    81      {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    82          return DEM_LOCATIONPRIO_EMPTY;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    83      }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    84  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    85      if (bufferElement->eventType == C_EVENTTYPE_SET)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    86      {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    87          /* do not overwrite set-event, because currently handling for overwritten event is not implemented */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    88          return DEM_LOCATIONPRIO_NOOVERWRITE;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    89      }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    90  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    91      return Dem_EvBuffGetEventPriority (bufferElement->eventId, bufferElement->eventType);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    92  }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    93  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    94  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    96  /**
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    97   * Search an empty location within buffer.
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    98   * @warning  The function does not lock interrupts. To get an empty location
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    99   *           and fill the location lock interrupts!
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   100   * @return  Returns the location which was selected as write location
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   101   *          If buffer is full, and no overwrite location was found, the return value is DEM_EVENTBUFFER_SIZE.
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   102   *
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   103   *  Note: If no empty location is found but multiple prestored events are
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   104   *  available, the returned location will always be the first found prestore
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   105   *  location.
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   106   */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   107  static uint8_least Dem_EvBuffGetLocationToWrite (Dem_EventIdType EventIdOfNewEvent, Dem_EvBuffEventType *typeOfNewEvent)
; Function Dem_EvBuffGetLocationToWrite
.L130:
Dem_EvBuffGetLocationToWrite:	.type	func

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   108  {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   109      uint8_least i = DEM_CFG_EVBUFF_SIZE;
	mov	d0,#10
.L449:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   110      uint8_least checkLoc;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   111      uint32_least prioOfNewEvent = Dem_EvBuffGetEventPriority (EventIdOfNewEvent, *typeOfNewEvent);
	ld.bu	d15,[a4]
.L430:
	sh	d15,d15,#12
.L700:
	add	d1,d15,d4
.L450:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    63      return ((uint32)eventType << DEM_LOCATIONPRIO_TYPESHIFT) +  (uint32)EventId;      (inlined)
	j	.L2

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    64  }      (inlined)
.L2:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   112  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   113      uint8_least writeLoc = DEM_CFG_EVBUFF_SIZE;
	mov	d2,#10
.L451:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   114      uint32_least writeLocPrio = prioOfNewEvent;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   115      uint32_least tempPrio;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   116  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   117      while (i > 0u)
	j	.L3
.L4:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   118      {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   119          i--;
	add	d0,#-1
.L701:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   120  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   121          if (*typeOfNewEvent != C_EVENTTYPE_PRESTORE)
	ld.bu	d3,[a4]
.L702:
	jeq	d3,#6,.L5
.L703:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   122          {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   123              /* Start filling the buffer from last in Normal case */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   124              checkLoc = i;
	mov	d5,d0
.L453:
	j	.L6
.L5:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   125          }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   126          else
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   127          {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   128  #if (DEM_CFG_FFPRESTORAGESUPPORT == DEM_CFG_FFPRESTORAGESUPPORT_ON)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   129  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   130              /* Start filling the buffer from first in case of Pre-stored freeze frame */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   131              checkLoc = (DEM_CFG_EVBUFF_SIZE - 1u) - i;
	rsub	d5,d0,#9
.L454:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   132              /* only locations 0 .. (prestored_ff_size-1) may be used for storing PRESTORE events */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   133              if (checkLoc >= DEM_CFG_PRESTORED_FF_SIZE)
	jlt.u	d5,#5,.L7
.L704:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   134              {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   135                  break;
	j	.L8
.L7:
.L6:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   136              }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   137  #else
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   138              break;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   139  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   140          }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   141  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   142          if (Dem_EvtBuffer.Locations[checkLoc].eventId == EventIdOfNewEvent)
	movh.a	a15,#@his(Dem_EvtBuffer)
	lea	a15,[a15]@los(Dem_EvtBuffer)
.L705:
	add.a	a15,#4
.L706:
	sh	d15,d5,#4
.L707:
	addsc.a	a15,a15,d15,#0
.L708:
	ld.hu	d15,[a15]6
.L709:
	jne	d15,d4,.L9
.L710:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   143          {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   144              /* allow overwriting, if type of new event has same or higher prio */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   145              if (Dem_EvtBuffer.Locations[checkLoc].eventType >= *typeOfNewEvent)
	ld.bu	d15,[a15]4
.L711:
	jlt.u	d15,d3,.L10
.L712:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   146              {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   147                  return checkLoc;  /* monitoring overwrite old event of itself */
	mov	d2,d5
.L452:
	j	.L11
.L10:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   148              }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   149  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   150              if (   (Dem_EvtBuffer.Locations[checkLoc].eventType == C_EVENTTYPE_SET)
	jne	d15,#1,.L12
.L713:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   151                      && (*typeOfNewEvent                     == C_EVENTTYPE_RESET))
	jne	d3,#3,.L13
.L714:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   152              {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   153                  *typeOfNewEvent = C_EVENTTYPE_SET_RESET;    /* combine events set/reset */
	mov	d15,#2
.L715:
	st.b	[a4],d15
.L716:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   154                  return checkLoc;
	mov	d2,d5
.L455:
	j	.L14
.L13:
.L12:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   155              }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   156  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   157              /* monitoring already in SFB and not allowed to be overwritten with new event of itself */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   158              return DEM_CFG_EVBUFF_SIZE;
	mov	d2,#10
.L456:
	j	.L15
.L9:
	ld.hu	d15,[a15]6
.L717:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    80      if (bufferElement->eventId == DEM_EVENTID_INVALID)      (inlined)
	jne	d15,#0,.L16
.L718:
	mov.u	d15,#65535
	addih	d15,d15,#255
.L719:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    82          return DEM_LOCATIONPRIO_EMPTY;      (inlined)
	j	.L17

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    80      if (bufferElement->eventId == DEM_EVENTID_INVALID)      (inlined)
.L16:
	ld.bu	d3,[a15]4
.L720:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    85      if (bufferElement->eventType == C_EVENTTYPE_SET)      (inlined)
	jne	d3,#1,.L18
.L721:
	mov	d15,#0

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    88          return DEM_LOCATIONPRIO_NOOVERWRITE;      (inlined)
	j	.L19

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    85      if (bufferElement->eventType == C_EVENTTYPE_SET)      (inlined)
.L18:
	sh	d3,d3,#12
.L722:
	add	d15,d3
.L723:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    63      return ((uint32)eventType << DEM_LOCATIONPRIO_TYPESHIFT) +  (uint32)EventId;      (inlined)
	j	.L20

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    64  }      (inlined)
.L20:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    91      return Dem_EvBuffGetEventPriority (bufferElement->eventId, bufferElement->eventType);      (inlined)
	j	.L21

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	    92  }      (inlined)
.L21:
.L19:
.L17:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   159          }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   160  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   161          tempPrio = Dem_EvBuffGetLocationPriority (&Dem_EvtBuffer.Locations[checkLoc]);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   162          if (tempPrio > writeLocPrio)
	jge.u	d1,d15,.L22
.L437:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   163          {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   164              writeLoc = checkLoc;
	mov	d2,d5
.L442:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   165              writeLocPrio = tempPrio;
	mov	d1,d15
.L22:
.L3:
	jne	d0,#0,.L4

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   166          }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   167      }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   168  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   169      /* no store-location found for new event */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   170      if (writeLoc == DEM_CFG_EVBUFF_SIZE)
.L8:
	mov	d15,#10
.L724:
	jne	d15,d2,.L23
.L725:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   171      {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   172          Dem_EvtBuffer.OverflowCounter++;
	movh.a	a15,#@his(Dem_EvtBuffer)
	lea	a15,[a15]@los(Dem_EvtBuffer)
.L726:
	ld.hu	d15,[a15]0
.L727:
	add	d15,#1
	st.h	[a15],d15
.L728:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   173          if (*typeOfNewEvent == C_EVENTTYPE_SET)
	ld.bu	d15,[a4]
.L729:
	jne	d15,#1,.L24
.L730:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   174          {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   175              Dem_EvtBuffer.OverflowCounterSet++;
	mov.aa	a2,a15
	add.a	a2,#2
	ld.hu	d15,[a15]2
.L731:
	add	d15,#1
	st.h	[a2],d15
.L24:
.L23:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   176          }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   177      }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   178  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   179      return writeLoc;
	j	.L25

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   180  }
.L25:
.L15:
.L14:
.L11:
	ret
.L420:
	
__Dem_EvBuffGetLocationToWrite_function_end:
	.size	Dem_EvBuffGetLocationToWrite,__Dem_EvBuffGetLocationToWrite_function_end-Dem_EvBuffGetLocationToWrite
.L232:
	; End of function
	
	.sdecl	'.text.Dem_EvBuff.Dem_EvBuffHandleElapsedCounter',code,cluster('Dem_EvBuffHandleElapsedCounter')
	.sect	'.text.Dem_EvBuff.Dem_EvBuffHandleElapsedCounter'
	.align	2
	

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   181  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   182  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   183  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   184  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   185  /**
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   186   * @param[in]  locationIndex          Index for storeage of prestore freezeframe
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   187   *             newEventId             EventId for which Prestore Freeze frame storage availability is to be checked
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   188   * Dem: Local function to check if location is available for storage of prestore freezeframe
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   189   *
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   190   */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   191  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   192  DEM_INLINE Dem_boolean_least Dem_EvBuffIsPrestoreLocationAvailable (uint32 locationIndex, Dem_EventIdType newEventId)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   193  {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   194  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   195  #if (DEM_CFG_FFPRESTORAGESUPPORT == DEM_CFG_FFPRESTORAGESUPPORT_ON)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   196  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   197      return (   (Dem_EvtBuffer.Locations[locationIndex].eventId == newEventId)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   198              && (Dem_EvtBuffer.Locations[locationIndex].eventType == C_EVENTTYPE_PRESTORE));
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   199  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   200  #else
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   201  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   202      DEM_UNUSED_PARAM(locationIndex);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   203      DEM_UNUSED_PARAM(newEventId);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   204      return FALSE;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   205  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   206  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   207  }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   208  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   209  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   210  /*
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   211   * handle elapsed counters: if counter elapsed, report failure to StateStorage
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   212   * for storage to next IC; also check if failure storage is disabled for this failure
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   213   */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   214  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   215  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   216  static void Dem_EvBuffHandleElapsedCounter(const Dem_EvBuffEvent *bufferElement)
; Function Dem_EvBuffHandleElapsedCounter
.L132:
Dem_EvBuffHandleElapsedCounter:	.type	func

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   217  {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   218  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   219  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   220  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   221      if (   (bufferElement->eventType != C_EVENTTYPE_UNROBUST)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   222          && (bufferElement->eventType != C_EVENTTYPE_PRESTORE)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   223          )
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   224      {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   225          Dem_EvtSetIsRecheckedAndWaitingForMonResult(bufferElement->eventId, FALSE);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   226      }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   227  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   228  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   229  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   230  #if (DEM_CFG_DEPDEGRADATIONREASONRECOVERABLE == DEM_CFG_DEPDEGRADATIONREASONRECOVERABLE_ON)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   231  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   232      if (   (bufferElement->eventType == C_EVENTTYPE_SET)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   233          || (bufferElement->eventType == C_EVENTTYPE_SET_RECONFIRMED)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   234          || (bufferElement->eventType == C_EVENTTYPE_SET_WAITINGFORMONITORING)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   235          )
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   236      {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   237          if (!Dem_EvtIsRecoverable((Dem_EventIdType)bufferElement->eventId))
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   238          {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   239              Graph__setHasNonRecoverableFailure (Dem_FailureEvent__getNodeId (&(bufferElement->fEvent)));
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   240          }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   241      }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   242  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   243  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   244  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   245      DEM_UNUSED_PARAM(bufferElement);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   246  }
	ret
.L443:
	
__Dem_EvBuffHandleElapsedCounter_function_end:
	.size	Dem_EvBuffHandleElapsedCounter,__Dem_EvBuffHandleElapsedCounter_function_end-Dem_EvBuffHandleElapsedCounter
.L237:
	; End of function
	
	.sdecl	'.text.Dem_EvBuff.Dem_EvBuffMainFunction',code,cluster('Dem_EvBuffMainFunction')
	.sect	'.text.Dem_EvBuff.Dem_EvBuffMainFunction'
	.align	2
	
	.global	Dem_EvBuffMainFunction

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   247  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   248  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   249  void Dem_EvBuffMainFunction(void)
; Function Dem_EvBuffMainFunction
.L134:
Dem_EvBuffMainFunction:	.type	func

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   250  {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   251      /*** COMPLEX ***/
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   252  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   253  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   254      uint32_least i = DEM_CFG_EVBUFF_SIZE;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   255  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   256      DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   257  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   258      /* D_238: decrease counters of all entries */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   259      while (i > 0u)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   260      {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   261          i--;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   262  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   263          /* if sfb-location contains failure event (valid EventId) */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   264          if (Dem_EvtBuffer.Locations[i].eventId != DEM_EVENTID_INVALID)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   265          {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   266              /* if countdown not elapsed */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   267              if (Dem_EvtBuffer.Locations[i].counter > 0)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   268              {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   269                  Dem_EvtBuffer.Locations[i].counter--;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   270  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   271                  if (Dem_EvtBuffer.Locations[i].counter == 0)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   272                  {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   273                      Dem_EvBuffHandleElapsedCounter (&Dem_EvtBuffer.Locations[i]);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   274                  }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   275              }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   276          }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   277      }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   278  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   279      DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   280  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   281  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   282  }
	ret
.L290:
	
__Dem_EvBuffMainFunction_function_end:
	.size	Dem_EvBuffMainFunction,__Dem_EvBuffMainFunction_function_end-Dem_EvBuffMainFunction
.L187:
	; End of function
	
	.sdecl	'.text.Dem_EvBuff.Dem_EvBuffClear',code,cluster('Dem_EvBuffClear')
	.sect	'.text.Dem_EvBuff.Dem_EvBuffClear'
	.align	2
	
	.global	Dem_EvBuffClear

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   283  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   284  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   285  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   286  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   287  void Dem_EvBuffClear(Dem_EventIdType EventId)
; Function Dem_EvBuffClear
.L136:
Dem_EvBuffClear:	.type	func

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   288  {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   289      uint32_least i = DEM_CFG_EVBUFF_SIZE;
	mov	d15,#10
.L457:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   290  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   291      DEM_ENTERLOCK_MON(); /* DSM_D_212 */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   292  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   293      /* D_238: decrease counters of all entries */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   294      while (i > 0u)
	j	.L26
.L27:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   295      {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   296          i--;
	add	d15,#-1
.L674:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   297          if (Dem_EvtBuffer.Locations[i].eventId == EventId)
	sh	d0,d15,#4
.L675:
	movh.a	a15,#@his(Dem_EvtBuffer)
	lea	a15,[a15]@los(Dem_EvtBuffer)
.L676:
	addsc.a	a15,a15,d0,#0
.L677:
	lea	a15,[a15]10
	ld.hu	d0,[a15]0
.L678:
	jne	d0,d4,.L28
.L679:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   298          {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   299              Dem_EvtSetIsRecheckedAndWaitingForMonResult(EventId, FALSE);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   300              Dem_EvtBuffer.Locations[i].eventId = DEM_EVENTID_INVALID;
	mov	d15,#0
.L458:
	st.h	[a15],d15
.L680:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   301              break;
	j	.L29
.L28:
.L26:
	jne	d15,#0,.L27

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   302          }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   303      }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   304  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   305      DEM_EXITLOCK_MON(); /* DSM_D_212 */
.L29:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   306  }
	ret
.L413:
	
__Dem_EvBuffClear_function_end:
	.size	Dem_EvBuffClear,__Dem_EvBuffClear_function_end-Dem_EvBuffClear
.L222:
	; End of function
	
	.sdecl	'.text.Dem_EvBuff.Dem_EvBuffGetEvent',code,cluster('Dem_EvBuffGetEvent')
	.sect	'.text.Dem_EvBuff.Dem_EvBuffGetEvent'
	.align	2
	
	.global	Dem_EvBuffGetEvent

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   307  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   308  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   309  const Dem_EvBuffEvent* Dem_EvBuffGetEvent (uint32* locationIndex)
; Function Dem_EvBuffGetEvent
.L138:
Dem_EvBuffGetEvent:	.type	func

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   310  {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   311      Dem_EvBuffEvent* fEvent = NULL_PTR;
	mov.a	a2,#0
.L459:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   312      uint16_least i = DEM_CFG_EVBUFF_SIZE;
	mov	d0,#10
.L460:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   313  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   314      /* D_238: decrease counters of all entries */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   315      while (i > 0u)
	j	.L30
.L31:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   316      {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   317          i--;
	add	d0,#-1
.L645:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   318  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   319          /* if sfb-location contains failure event (valid EventId) */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   320          if (Dem_EvtBuffer.Locations[i].eventId != DEM_EVENTID_INVALID)
	sh	d15,d0,#4
.L646:
	movh.a	a15,#@his(Dem_EvtBuffer)
	lea	a15,[a15]@los(Dem_EvtBuffer)
.L647:
	add.a	a15,#4
.L648:
	addsc.a	a15,a15,d15,#0
.L649:
	ld.hu	d15,[a15]6
.L650:
	jeq	d15,#0,.L32
.L401:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	     1  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	     2  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	     3  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	     4  #ifndef DEM_EVBUFFEVENT_H
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	     5  #define DEM_EVBUFFEVENT_H
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	     6  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	     7  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	     8  #include "Dem_Types.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	     9  #include "Dem_Cfg_EnvMain.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    10  #include "Dem_Cfg_EvBuff.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    11  #include "Dem_Cfg_Nodes.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    12  #include "Dem_Mapping.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    13  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    14  #if (DEM_CFG_SUPPORT_PROJECTSPECIFIC_FAILUREMEMORY == TRUE)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    15  #include "Dem_PrjSpecificFailureMemoryType.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    16  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    17  #define Dem_EvBuffEventType uint8
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    18  #define C_EVENTTYPE_NOEVENT                        0u
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    19  #define C_EVENTTYPE_SET                            1u
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    20  #define C_EVENTTYPE_SET_RESET                      2u
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    21  #define C_EVENTTYPE_RESET                          3u
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    22  #define C_EVENTTYPE_SET_RECONFIRMED                4u
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    23  #define C_EVENTTYPE_SET_WAITINGFORMONITORING       5u
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    24  #define C_EVENTTYPE_PRESTORE                       6u
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    25  #define C_EVENTTYPE_UNROBUST                       7u
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    26  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    27  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    28  #define DEM_CFG_EVBUFF_STORES_ENVDATA_ON		STD_ON
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    29  #define DEM_CFG_EVBUFF_STORES_ENVDATA_OFF		STD_OFF
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    30  #if ((DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON) || (DEM_CFG_FFPRESTORAGESUPPORT == DEM_CFG_FFPRESTORAGESUPPORT_ON))
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    31  #define DEM_CFG_EVBUFF_STORES_ENVDATA		DEM_CFG_EVBUFF_STORES_ENVDATA_ON
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    32  #else
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    33  #define DEM_CFG_EVBUFF_STORES_ENVDATA		DEM_CFG_EVBUFF_STORES_ENVDATA_OFF
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    34  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    35  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    36  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    37  typedef union
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    38  {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    39  #if (DEM_CFG_ENVMINSIZE_OF_RAWENVDATA >= 4)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    40      /* DO NOT USE THIS MEMBER ELEMENT */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    41      /* enforces uint32 alignment of this union */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    42      /* REASON: */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    43      /* in case of a memcpy operation this may increase the copy speed in case src and dst buffers are uint16 or uint32 aligned */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    44      uint32 EnforceAlignment;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    45  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    46      uint8  Buffer[DEM_CFG_ENVMINSIZE_OF_RAWENVDATA];
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    47  } Dem_EvBuffEnvDataAlignedType;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    48  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    49  typedef struct {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    50  #if (DEM_CFG_EVBUFF_STORES_ENVDATA == DEM_CFG_EVBUFF_STORES_ENVDATA_ON)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    51      /* HINT:
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    52       * this is intentional the first element in this structure to achieve 32-Bit alignment to support faster memcpy */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    53      Dem_EvBuffEnvDataAlignedType envData;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    54  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    55      Dem_EvBuffEventType eventType;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    56  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    57  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    58      uint8 counter;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    59  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    60  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    61      Dem_EventIdType eventId;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    62  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    63  #if (DEM_CFG_DEBUGDATA != DEM_CFG_DEBUGDATA_OFF)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    64      Dem_DebugDataType debug0;          /* debug data0   */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    65      Dem_DebugDataType debug1;          /* debug data1   */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    66  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    67  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    68  #if (DEM_CFG_SUPPORT_PROJECTSPECIFIC_FAILUREMEMORY == TRUE)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    69      DemRbProjectSpecificFailureMemoryType  DemRbProjectSpecificFailureMemoryData;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    70  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    71  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    72  #if( DEM_BFM_ENABLED == DEM_BFM_ON )
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    73      rba_DemBfm_EnvironmentalData DemRbBfmFailureMemoryData;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    74  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    75  }Dem_EvBuffEvent;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    76  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    77  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    78  DEM_INLINE Dem_ComponentIdType Dem_FailureEvent__getNodeId (const Dem_EvBuffEvent *fe)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    79  {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    80      return Dem_NodeIdFromEventId(fe->eventId);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    81  }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    82  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    83  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    84  /* MR12 RULE 8.13 VIOLATION: parameter evBuff not made const, as it is modified in subfunction */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    85  DEM_INLINE void Dem_EvBuffSetCounter (Dem_EvBuffEvent *evBuff, uint8 value)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    86  {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    87  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    88      evBuff->counter = value;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    89  #else
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    90      DEM_UNUSED_PARAM(evBuff);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    91      DEM_UNUSED_PARAM(value);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    92  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    93  }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    94  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    95  DEM_INLINE uint8 Dem_EvBuffGetCounter (const Dem_EvBuffEvent *evBuff)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    96  {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    97  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    98      return evBuff->counter;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	    99  #else
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	   100      DEM_UNUSED_PARAM(evBuff);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	   101      return 0;
	mov	d15,#0

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	   101      return 0;      (inlined)
	j	.L33

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffEvent.h	   103  }      (inlined)
.L33:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   321          {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   322              if (   (Dem_EvBuffGetCounter(&(Dem_EvtBuffer.Locations[i])) == 0)
	jne	d15,#0,.L34
.L651:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   323  #if  (DEM_CFG_FFPRESTORAGESUPPORT == DEM_CFG_FFPRESTORAGESUPPORT_ON)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   324                      && (Dem_EvtBuffer.Locations[i].eventType != C_EVENTTYPE_PRESTORE)
	ld.bu	d15,[a15]4
.L652:
	jeq	d15,#6,.L35
.L653:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   325  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   326              )
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   327              {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   328                  *locationIndex = i;
	st.w	[a4],d0
.L654:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   329                  fEvent = &(Dem_EvtBuffer.Locations[i]);
	mov.aa	a2,a15
.L655:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   330                  break;
	j	.L36
.L35:
.L34:
.L32:
.L30:
	jne	d0,#0,.L31

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   331              }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   332          }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   333      }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   334      return fEvent;
.L36:
	j	.L37

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   335  }
.L37:
	ret
.L394:
	
__Dem_EvBuffGetEvent_function_end:
	.size	Dem_EvBuffGetEvent,__Dem_EvBuffGetEvent_function_end-Dem_EvBuffGetEvent
.L207:
	; End of function
	
	.sdecl	'.text.Dem_EvBuff.Dem_EvBuffEnvCaptureData',code,cluster('Dem_EvBuffEnvCaptureData')
	.sect	'.text.Dem_EvBuff.Dem_EvBuffEnvCaptureData'
	.align	2
	
	.global	Dem_EvBuffEnvCaptureData

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   336  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   337  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   338  /**
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   339   * DSM_D_229: Clear all sequential failures within buffer and return the
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   340   *            minimum filter value.
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   341   * @param[in]  EventId           The EventId of the new failure event.
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   342   * @param[in]  nodeID        The SID of the new failure events node.
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   343   * @param[in]  counterInit   The initial value for the SFB filter time of
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   344   *                           the new failure event.
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   345   */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   346  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   347  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   348  uint8_least Dem_EvBuffClearSequentialFailures (Dem_EventIdType EventId, Dem_ComponentIdType nodeID, uint8 counterInit)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   349  {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   350      uint8_least i = DEM_CFG_EVBUFF_SIZE;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   351      uint8_least minCounter = counterInit;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   352  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   353      DEM_ENTERLOCK_MON();       /* DSM_D_212 */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   354  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   355      while (i > 0u)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   356      {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   357          i--;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   358  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   359          if (   (Dem_EvtBuffer.Locations[i].eventId != DEM_EVENTID_INVALID)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   360                  && (   (Dem_EvtBuffer.Locations[i].eventType == C_EVENTTYPE_SET)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   361                          || (Dem_EvtBuffer.Locations[i].eventType == C_EVENTTYPE_SET_WAITINGFORMONITORING)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   362                  )
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   363                  && (Dem_EvtBuffer.Locations[i].counter > 0)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   364          )
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   365          {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   366              if (   (Dem_NodeAreAncestorsFailed(Dem_FailureEvent__getNodeId(&Dem_EvtBuffer.Locations[i])))
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   367                      || (   (Dem_FailureEvent__getNodeId(&Dem_EvtBuffer.Locations[i]) == nodeID)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   368                              && (Dem_EvtBuffer.Locations[i].eventId > EventId)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   369                              && (!Dem_NodeIgnorePriority(nodeID))
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   370                      )
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   371              )
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   372              {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   373                  /* DSM_D_229: mark previous failure as sequential and clear location*/
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   374                  Dem_EvtSetCausal (Dem_EvtBuffer.Locations[i].eventId, FALSE);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   375                  Dem_EvtSetIsRecheckedAndWaitingForMonResult(Dem_EvtBuffer.Locations[i].eventId, FALSE);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   376  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   377                  /* DSM_D_248, DSM_D_162: set counter to minimum */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   378                  DEM_A_MIN_AB (minCounter, Dem_EvtBuffer.Locations[i].counter);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   379  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   380                  Dem_EvtBuffer.Locations[i].eventId = DEM_EVENTID_INVALID;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   381              }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   382          }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   383      }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   384  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   385      DEM_EXITLOCK_MON();     /* DSM_D_212 */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   386  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   387      return minCounter;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   388  }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   389  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   390  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   391  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   392  void Dem_EvBuffEnvCaptureData(
; Function Dem_EvBuffEnvCaptureData
.L140:
Dem_EvBuffEnvCaptureData:	.type	func
	mov	d15,d4
.L464:
	mov.aa	a15,a4
.L465:
	mov	e8,d6,d5
.L668:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   393      Dem_EventIdType EventId,
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   394      uint8 *EnvData
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   395      DEM_DEBUGDATA_PARAM(Dem_DebugDataType debug0,Dem_DebugDataType debug1))
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   396  {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   397  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   398      Dem_EnvCaptureED(EventId, EnvData, DEM_CFG_ENVMINSIZE_OF_RAWENVDATA DEM_DEBUGDATA_PARAM(debug0,debug1));
	mov	d5,#4
.L462:
	mov	d4,d15
	mov.aa	a4,a15
.L466:
	mov	e6,d9,d8
.L463:
	call	Dem_EnvCaptureED
.L461:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   399      Dem_EnvCaptureFF(EventId, EnvData, DEM_CFG_ENVMINSIZE_OF_RAWENVDATA DEM_DEBUGDATA_PARAM(debug0,debug1));
	mov	d5,#4
.L669:
	mov	d4,d15
.L467:
	mov.aa	a4,a15
.L469:
	mov	e6,d9,d8
.L470:
	call	Dem_EnvCaptureFF
.L468:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   400      /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   401  #if (DEM_CFG_OBD != DEM_CFG_OBD_OFF)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   402      rba_DemObdBasic_FF_CaptureFF(EventId, EnvData, DEM_CFG_ENVMINSIZE_OF_RAWENVDATA);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   403  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   404      /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   405  #if(DEM_CFG_J1939DCM_FREEZEFRAME_SUPPORT)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   406      Dem_J1939EnvCaptureFF(EventId, EnvData, DEM_CFG_ENVMINSIZE_OF_RAWENVDATA DEM_DEBUGDATA_PARAM(debug0,debug1));
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   407  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   408  #if(DEM_CFG_J1939DCM_EXPANDED_FREEZEFRAME_SUPPORT)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   409      Dem_J1939EnvCaptureExpFF(EventId, EnvData, DEM_CFG_ENVMINSIZE_OF_RAWENVDATA DEM_DEBUGDATA_PARAM(debug0,debug1));
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   410  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   411  }
	ret
.L407:
	
__Dem_EvBuffEnvCaptureData_function_end:
	.size	Dem_EvBuffEnvCaptureData,__Dem_EvBuffEnvCaptureData_function_end-Dem_EvBuffEnvCaptureData
.L217:
	; End of function
	
	.sdecl	'.text.Dem_EvBuff.Dem_EvBuffInsert',code,cluster('Dem_EvBuffInsert')
	.sect	'.text.Dem_EvBuff.Dem_EvBuffInsert'
	.align	2
	
	.global	Dem_EvBuffInsert

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   412  /**
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   413   * returns: whether the failure event could be inserted into SFB buffer
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   414   */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   415  Dem_boolean_least Dem_EvBuffInsert (Dem_EvBuffEventType eventType,
; Function Dem_EvBuffInsert
.L142:
Dem_EvBuffInsert:	.type	func
	sub.a	a10,#8
.L471:
	st.b	[a10],d4
	mov	e8,d6,d5
	mov	d10,d7
.L474:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   416          Dem_EventIdType eventId
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   417          DEM_DEBUGDATA_PARAM(Dem_DebugDataType debug0,Dem_DebugDataType debug1))
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   418  {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   419  #if (DEM_CFG_EVBUFF_STORES_ENVDATA == DEM_CFG_EVBUFF_STORES_ENVDATA_ON)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   420      Dem_EvBuffEnvDataAlignedType EnvData;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   421  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   422  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   423      /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   424  #if( DEM_BFM_ENABLED == DEM_BFM_ON )
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   425      rba_DemBfm_EnvironmentalData BfmBufferData;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   426  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   427      /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   428  #if (DEM_CFG_SUPPORT_PROJECTSPECIFIC_FAILUREMEMORY == TRUE)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   429      DemRbProjectSpecificFailureMemoryType PrjSpecificFailureMemoryData;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   430  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   431  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   432      Dem_boolean_least eventInserted = FALSE;
	mov	d11,#0
.L475:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   433      uint8_least counter = 0;
	mov	d12,#0
.L476:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   434      Dem_boolean_least skipCausalCheck_flag = FALSE;
	mov	d13,#0

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   435      uint8_least storeLoc;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   436  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   437      DEM_ASSERT_ISNOTLOCKED();
.L38:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   438  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   439      /*****  calculate counter for new location  *****/
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   440      if (   (eventType == C_EVENTTYPE_SET)
	ld.bu	d15,[a10]
.L581:
	jeq	d15,#1,.L39
.L582:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   441              || (eventType == C_EVENTTYPE_SET_WAITINGFORMONITORING)
	ld.bu	d15,[a10]
.L583:
	jne	d15,#5,.L40
.L39:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;      (inlined)
	j	.L41

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }      (inlined)
.L41:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   164  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L42:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   165  	return 0; /* feature deactivated */      (inlined)
	j	.L43

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   166  }      (inlined)
.L43:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.h	    76      return 0;      (inlined)
	j	.L44

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.h	    77  }      (inlined)
.L44:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   442      )
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   443      {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   444          counter = Dem_EvBuffClearSequentialFailures (eventId, Dem_NodeIdFromEventId(eventId),
	mov	d12,#0
.L40:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   445                  Dem_EvtParam_GetBufferTimeSFB(eventId));
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   446      }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   447  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   448      if (eventType == C_EVENTTYPE_SET_WAITINGFORMONITORING)
	ld.bu	d15,[a10]
.L584:
	eq	d15,d15,#5
.L585:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   449      {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   450          counter = DEM_CFG_EVBUFF_DELAY_SET_WAITINGFORMONITORING;
	seln	d12,d15,d12,#255
.L45:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   451      }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   452  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   453      if (eventType == C_EVENTTYPE_SET_RECONFIRMED)
	ld.bu	d15,[a10]
.L586:
	jne	d15,#4,.L46
.L587:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   454      {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   455              eventType = C_EVENTTYPE_SET;
	mov	d15,#1
.L588:
	st.b	[a10],d15
.L589:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   456              counter = 0;
	mov	d12,#0
.L590:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   457              skipCausalCheck_flag = TRUE;
	mov	d13,#1
.L46:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   458      }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   459  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   460  #if (DEM_CFG_EVBUFF_STORES_ENVDATA == DEM_CFG_EVBUFF_STORES_ENVDATA_ON)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   461      Dem_EvBuffEnvCaptureData(eventId, EnvData.Buffer  DEM_DEBUGDATA_PARAM(debug0, debug1));
	lea	a4,[a10]4
.L478:
	mov	e4,d9,d8
.L473:
	mov	d6,d10
.L472:
	call	Dem_EvBuffEnvCaptureData
.L479:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   462  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   463      /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   464  #if( DEM_BFM_ENABLED == DEM_BFM_ON )
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   465      rba_DemBfm_EnvCaptureBFM( eventId, &BfmBufferData  DEM_DEBUGDATA_PARAM(debug0,debug1) );
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   466  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   467      /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   468  #if (DEM_CFG_SUPPORT_PROJECTSPECIFIC_FAILUREMEMORY == TRUE)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   469  	/* Remap eventType before passing to Dem_ProjectSpecificFailureMemoryCapture() */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   470      Dem_ProjectSpecificFailureMemoryCapture(eventId, eventType, &PrjSpecificFailureMemoryData);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   471  	/* Revert the remap */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   472  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   473  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   474  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   475      DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   476  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   477          /*****  check if failure still is causal  *****/
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   478          if ((!skipCausalCheck_flag) &&  ((eventType == C_EVENTTYPE_SET)
	jne	d13,#0,.L47
.L591:
	ld.bu	d15,[a10]
.L592:
	jeq	d15,#1,.L48
.L593:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   479                  || (eventType == C_EVENTTYPE_SET_WAITINGFORMONITORING)
	ld.bu	d15,[a10]
.L594:
	jeq	d15,#5,.L49
.L595:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   480                  || (eventType == C_EVENTTYPE_UNROBUST))
	ld.bu	d15,[a10]
.L596:
	jne	d15,#7,.L50
.L49:
.L48:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;      (inlined)
	j	.L51

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }      (inlined)
.L51:

; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     3  #ifndef DEM_NODES_H
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     4  #define DEM_NODES_H
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     8  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     9  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    10  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    11  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    12  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    15  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    18  #define DEM_NODE_INFINITE_RECOVERIES  255
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    19  #define DEM_NODE_NO_RECOVERIES          0
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    20  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    21  #define DEM_NODESTATUS_FAILED                   0
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    22  #define DEM_NODESTATUS_SUSPICIOUS               1
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    23  #define DEM_NODESTATUS_NOTINIT                  2
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    24  #define DEM_NODESTATUS_NOTAVAILABLE             3
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    25  #define DEM_NODESTATUS_FAILEDFILTERED           4
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    26  #define DEM_NODESTATUS_FAILEDNOTRECOVERABLE     5
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    27  #define DEM_NODESTATUS_PENDING                  6
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    29  #if DEM_CFG_DEPENDENCY_PENDING_ON
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    30  #define DEM_NODESTATUS_COUNT                    7
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    31  #else
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    32  #define DEM_NODESTATUS_COUNT                    6
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    33  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    35  #define DEM_NODESTATUS__NODEMASK               ((uint8)0x80)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    36  #define DEM_NODESTATUS__ANCESTORMASK           ((uint8)0x7F)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    38  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    39  DEM_INLINE void Dem_NodeStatusSet(uint8 *status)            { (*status) |= DEM_NODESTATUS__NODEMASK;  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    40  DEM_INLINE void Dem_NodeStatusReset(uint8 *status)          { (*status) &= (uint8)~DEM_NODESTATUS__NODEMASK; }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    41  DEM_INLINE Dem_boolean_least Dem_NodeStatusIsSet(uint8 status)  { return ((status) & DEM_NODESTATUS__NODEMASK) > 0; }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    42  DEM_INLINE Dem_boolean_least Dem_NodeStatusIsAnyAncestorSet (uint8 status) { return ((status) & DEM_NODESTATUS__ANCESTORMASK) > 0; }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    45  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    46  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    47  	uint8 status[DEM_NODESTATUS_COUNT];
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    48  #if (DEM_CFG_DEPRECOVERYLIMIT == DEM_CFG_DEPRECOVERYLIMIT_ON)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    49  	uint8 performedRecoveries;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    51  	uint8 stateFlags;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    52  } Dem_NodeState;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    54  #define DEM_NODE_STATEFLAG_RECHECKONCLEAR    0
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    55  #define DEM_NODE_STATEFLAG_HASCAUSALFAULT    1
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    56  #define DEM_NODE_STATEFLAG_RECOVERYBLOCKED    2
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    57  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    59  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    60  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    61  #if (DEM_CFG_DEPRECOVERYLIMIT == DEM_CFG_DEPRECOVERYLIMIT_ON)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    62  	uint8 allowedRecoveries;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    63  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    64  #if (DEM_CFG_NODEFAILEDCALLBACK_COUNT > 0)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    65  	uint8 nodeFailedCallbackIdx;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    66  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    67  	uint8 paramFlags;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    68  } Dem_NodeParam;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    70  typedef Std_ReturnType (*Dem_NodeFailedCallbackType)(boolean testFailed);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    73  #define DEM_NODE_PARAMFLAG_IGNOREPRIORITY    0
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    75  #if (DEM_CFG_DEPRECOVERYLIMIT == DEM_CFG_DEPRECOVERYLIMIT_ON)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    76  	#define DEM_NODES_INIT_ALLOWEDRECOVERIES(X)    (X),
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    77  #else
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    78  	#define DEM_NODES_INIT_ALLOWEDRECOVERIES(X)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    79  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    80  #if (DEM_CFG_NODEFAILEDCALLBACK_COUNT > 0)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    81  	#define DEM_NODES_INIT_NODEFAILEDCALLBACK(X)    (X),
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    83  	#define DEM_NODES_INIT_NODEFAILEDCALLBACK(X)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    86  #define DEM_NODES_INIT(ALLOWEDRECOVERIES,IGNORES_PRIO,NODEFAILEDCALLBACK)        \ 
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    87      {                                              			  \ 
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    88  		DEM_NODES_INIT_ALLOWEDRECOVERIES(ALLOWEDRECOVERIES)   \ 
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    89  		DEM_NODES_INIT_NODEFAILEDCALLBACK(NODEFAILEDCALLBACK)  \ 
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    90  		((IGNORES_PRIO) << DEM_NODE_PARAMFLAG_IGNOREPRIORITY)   \ 
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    91      }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    92  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    93  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    95  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    96  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    98  DEM_ARRAY_DECLARE(      Dem_NodeState, Dem_AllNodesState, DEM_NODEID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   100  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   101  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   105  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   106  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   108  DEM_ARRAY_DECLARE_CONST(Dem_NodeParam, Dem_AllNodesParam, DEM_NODEID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   109  DEM_ARRAY_DECLARE_CONST(Dem_NodeFailedCallbackType, Dem_NodeFailedCallbacks, DEM_CFG_NODEFAILEDCALLBACK_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   111  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   112  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   115  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   116  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   117  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   119  void Dem_SetNodeStatus (const Dem_ComponentIdType NodeId, uint8 statusIndex);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   121  Dem_boolean_least Dem_Dependencies_CheckEventIsCausal(Dem_EventIdType EventId, Dem_ComponentIdType NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   123  #if DEM_CFG_DEPENDENCY_PENDING_ON
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   124  Dem_boolean_least Dem_Dependencies_CheckEventIsCausalPending(Dem_EventIdType EventId, Dem_ComponentIdType NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   125  void Dem_Dependencies_SetNodePending(Dem_EventIdType EventId , Dem_boolean_least setBit);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   126  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   128  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   129  /*************   Status Querries   ***************/
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   130  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   131  DEM_INLINE boolean Dem_NodeIsFailed(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   132  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   133  	return (Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_FAILED] != 0);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   134  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   136  DEM_INLINE boolean Dem_NodeIsFailedItself(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   137  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   138  	return Dem_NodeStatusIsSet(Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_FAILED]);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   139  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   142  DEM_INLINE boolean Dem_NodeIsSuspicious(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   143  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   144     return (Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_SUSPICIOUS] != 0);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   145  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   146  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   147  DEM_INLINE boolean Dem_NodeIsSuspiciousItself(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   148  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   149     return Dem_NodeStatusIsSet(Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_SUSPICIOUS]);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   150  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   152  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   153  DEM_INLINE boolean Dem_NodeIsFailedFilteredItself(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   154  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   155     return (Dem_NodeStatusIsSet(Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_FAILEDFILTERED]));
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   156  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   159  DEM_INLINE boolean Dem_NodeIsFailedNotRecoverable(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   160  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   161      return (Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_FAILEDNOTRECOVERABLE] != 0);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   162  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   164  DEM_INLINE boolean Dem_NodeIsFailedNotRecoverableItself(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   165  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   166      return Dem_NodeStatusIsSet(Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_FAILEDNOTRECOVERABLE]);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   167  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   170  DEM_INLINE boolean Dem_NodeIsAvailable(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   171  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   172  	   return (Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_NOTAVAILABLE] == 0);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   176  DEM_INLINE boolean Dem_NodeIsInitialized(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   178  	   return (Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_NOTINIT] == 0);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   179  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   180  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   181  DEM_INLINE boolean Dem_NodeAreAncestorsInitialized(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   182  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   183  	return !Dem_NodeStatusIsAnyAncestorSet(Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_NOTINIT]);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   184  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   186  DEM_INLINE boolean Dem_NodeIsRestrictedUsable(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   187  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   188  	return (   (Dem_NodeIsInitialized(NodeId))
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   189  			&& (Dem_NodeIsAvailable(NodeId))
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   190  			&& (!Dem_NodeIsFailed(NodeId))
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   191  			);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   194  DEM_INLINE boolean Dem_NodeIsUsable(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   195  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   196  	return (   (Dem_NodeIsRestrictedUsable(NodeId))
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   197  			&& (!Dem_NodeIsSuspicious(NodeId))
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   198  			);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   199  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   200  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   202  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   203  DEM_INLINE boolean Dem_NodeRecoveryAllowed (Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   204  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   205      DEM_UNUSED_PARAM(NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   207      return (TRUE
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   208  #if (DEM_CFG_DEPRECOVERYLIMIT == DEM_CFG_DEPRECOVERYLIMIT_ON)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   209              && (    (Dem_AllNodesState[NodeId].performedRecoveries < Dem_AllNodesParam[NodeId].allowedRecoveries)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   210                   || (DEM_NODE_INFINITE_RECOVERIES == Dem_AllNodesParam[NodeId].allowedRecoveries)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   211                 )
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   212  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   213  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   214             );
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   217  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   218  DEM_INLINE void Dem_NodeCallFailedCallback (Dem_ComponentIdType NodeId, boolean failed)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   219  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   220  #if (DEM_CFG_NODEFAILEDCALLBACK_COUNT > 0)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   221  	if (Dem_AllNodesParam[NodeId].nodeFailedCallbackIdx != 0)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   222  	{
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   223  		(Dem_NodeFailedCallbacks[Dem_AllNodesParam[NodeId].nodeFailedCallbackIdx])(failed);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   224  	}
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   225  #else
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   226  	DEM_UNUSED_PARAM(NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   227  	DEM_UNUSED_PARAM(failed);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   228  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   229  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   232  void Dem_Dependencies_SetNodeFailed(Dem_ComponentIdType NodeId, boolean EventIsCausal, boolean EventStorageFiltered, boolean EventIsRecoverable);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   233  void Dem_Dependencies_ResetNodeFailed(Dem_ComponentIdType NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   234  void Dem_Dependencies_ResetNodeFailedFiltered(Dem_ComponentIdType NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   235  void Dem_Dependencies_ResetNodeFailedNotRecoverable(Dem_ComponentIdType NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   237  void Dem_NodeSetSuspicious(Dem_ComponentIdType NodeId, Dem_boolean_least suspicious);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   238  void Dem_NodeSetHasCausalFault (const Dem_ComponentIdType NodeId, Dem_boolean_least causalFault);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   239  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   240  void Dem_NodeSetAvailable(Dem_ComponentIdType ComponentId, boolean AvailableStatus);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   242  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   243  DEM_INLINE void Dem_NodeSetRecovered(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   244  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   245  	DEM_UNUSED_PARAM(NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   246  #if (DEM_CFG_DEPRECOVERYLIMIT == DEM_CFG_DEPRECOVERYLIMIT_ON)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   247  	if (Dem_AllNodesState[NodeId].performedRecoveries < Dem_AllNodesParam[NodeId].allowedRecoveries)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   248  	{
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   249  		Dem_AllNodesState[NodeId].performedRecoveries++;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   250  	}
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   251  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   252  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   253  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   254  DEM_INLINE void Dem_NodeSetRecheckOnClear (Dem_ComponentIdType NodeId, Dem_boolean_least newRecheckOnClear)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   255  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   256      rba_DiagLib_Bit8OverwriteBit(&(Dem_AllNodesState[NodeId].stateFlags), DEM_NODE_STATEFLAG_RECHECKONCLEAR, newRecheckOnClear);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   257  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   258  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   259  DEM_INLINE Dem_boolean_least Dem_NodeIsRecheckOnClear (Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   260  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   261  	return rba_DiagLib_Bit8IsBitSet(Dem_AllNodesState[NodeId].stateFlags, DEM_NODE_STATEFLAG_RECHECKONCLEAR);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   262  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   263  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   264  DEM_INLINE Dem_boolean_least Dem_NodeIgnorePriority(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   265  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   266  	return rba_DiagLib_Bit8IsBitSet(Dem_AllNodesParam[NodeId].paramFlags, DEM_NODE_PARAMFLAG_IGNOREPRIORITY);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   267  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   268  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   269  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   271  void Dem_NodeRecheckOnClear (void);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   272  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   273  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   274  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   276  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   278  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   279  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   282  #else
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   283  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   284  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   285  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   286  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   288  DEM_INLINE Dem_boolean_least Dem_Dependencies_CheckEventIsCausal(Dem_EventIdType EventId, Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   289  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   290      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   291      DEM_UNUSED_PARAM(NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   292      return TRUE;
	mov	d15,#1

; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   292      return TRUE;      (inlined)
	j	.L52

; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   293  }      (inlined)
.L52:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   481              )
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   482          {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   483                  /* HINT: causality of failure has to be confirmed again, due to */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   484                  /*       concurrency and task interruption                      */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   485                  if (!Dem_Dependencies_CheckEventIsCausal(eventId, Dem_NodeIdFromEventId(eventId)) )
	jne	d15,#0,.L53
.L597:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   486                  {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   487                      /* Event not inserted, because failure no longer is causal */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   488                      /* EventId__setFailureCausal (EventId_n, FALSE);   done by function caller  */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   489  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   490                      DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   491                      return FALSE;
	mov	d2,#0
.L598:
	j	.L54
.L53:
.L50:
.L47:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   492                  }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   493          }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   494  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   495  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   496  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   497  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   498  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   499      /*************************************************/
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   500      /*****  find storage location in SFB-buffer  *****/
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   501      /*************************************************/
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   502  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   503      storeLoc = Dem_EvBuffGetLocationToWrite(eventId, &eventType);
	lea	a4,[a10]0
.L480:
	mov	d4,d8
.L481:
	call	Dem_EvBuffGetLocationToWrite
.L482:
	mov	d13,d2
.L477:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   504  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   505      if (storeLoc != DEM_CFG_EVBUFF_SIZE)
	mov	d15,#10
.L599:
	jeq	d15,d13,.L55
.L600:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   506      {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   507          if (        (Dem_EvtBuffer.Locations[storeLoc].eventId != DEM_EVENTID_INVALID)
	movh.a	a2,#@his(Dem_EvtBuffer)
	lea	a2,[a2]@los(Dem_EvtBuffer)
.L601:
	mov.aa	a12,a2
	add.a	a12,#4
.L602:
	sh	d15,d13,#4
.L603:
	addsc.a	a15,a12,d15,#0
.L604:
	mov.aa	a13,a15
	add.a	a13,#6
	ld.hu	d0,[a15]6
.L605:
	jeq	d0,#0,.L56
.L606:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   508                  && (Dem_EvtBuffer.Locations[storeLoc].eventType == C_EVENTTYPE_SET_WAITINGFORMONITORING)
	ld.bu	d15,[a15]4
.L607:
	jne	d15,#5,.L57
.L485:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   509              )
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   510          {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   511              if (Dem_EvtBuffer.Locations[storeLoc].eventId != eventId)
	jeq	d0,d8,.L58
.L486:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   512              {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   513                  Dem_EvtBuffer.OverflowCounter++;
	ld.hu	d15,[a2]0
.L608:
	add	d15,#1
	st.h	[a2],d15
.L609:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   514                  Dem_EvtSetIsRecheckedAndWaitingForMonResult(Dem_EvtBuffer.Locations[storeLoc].eventId, FALSE);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   515                  Dem_EvtSetCausal (Dem_EvtBuffer.Locations[storeLoc].eventId, FALSE);
	ld.hu	d4,[a15]6
.L610:
	mov	d5,#0
	call	Dem_EvtSetCausal
.L483:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   516                  if (eventType == C_EVENTTYPE_RESET)
	ld.bu	d15,[a10]
.L611:
	jne	d15,#3,.L59
.L612:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   517                  {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   518                      Dem_EvtSetPassedWasReported (eventId, TRUE);
	mov	d0,#1

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   717      DEM_ASSERT_ISLOCKED();      (inlined)
.L60:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   631  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   632  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   633  /*------NextReportRelevantForMemories----------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   634  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   635  DEM_INLINE Dem_boolean_least Dem_EvtIsNextReportRelevantForMemories (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   636  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   637     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NXT_REPORT_IS_RELEVANT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   638  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   639  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   640  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   641  DEM_INLINE void Dem_EvtSetNextReportRelevantForMemories (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   642  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   643     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NXT_REPORT_IS_RELEVANT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   644  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   645  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   646  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   647  /*------ Failure Cycle Event Status Bits -----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   648  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   649  /*
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   650   * Whether the event was reported as failed in this failure cycle, not respecting reports before startup of the ECU
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   651   *
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   652   * This status information is needed for OBD permanent memory handling and is stored only in RAM. If ever move the
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   653   * TestFailedTFC state handling from EvMem to an "extended event status byte", then we can use that instead and also
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   654   * simplify some code in OBD.
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   655   */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   656  DEM_INLINE Dem_boolean_least Dem_EvtGetTestFailedTFCSincePreinit(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   657  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   658      return DEM_EVTSTATE_ISBITSET(Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_TFTFC_SINCE_PREINIT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   659  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   660  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   661  /*
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   662   * Whether the event was reported as failed in this failure cycle, not respecting reports before startup of the ECU
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   663   *
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   664   * This status information is needed for OBD permanent memory handling and is stored only in RAM. If ever move the
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   665   * TestFailedTFC state handling from EvMem to an "extended event status byte", then we can use that instead and also
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   666   * simplify some code in OBD.
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   667   */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   668  DEM_INLINE void Dem_EvtSetTestFailedTFCSincePreinit(Dem_EventIdType EventId, Dem_boolean_least newState)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   669  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   670      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   671      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_TFTFC_SINCE_PREINIT, newState);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   672  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   673  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   674  /*
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   675   * Whether the event was tested in this failure cycle, not respecting reports before startup of the ECU
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   676   *
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   677   * This status information is needed for OBD permanent memory handling and is stored only in RAM. If ever move the
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   678   * TestCompleteTFC state handling from EvMem to an "extended event status byte", then we can use that instead and also
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   679   * simplify some code in OBD.
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   680   */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   681  DEM_INLINE Dem_boolean_least Dem_EvtGetTestCompleteTFCSincePreinit(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   682  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   683      return DEM_EVTSTATE_ISBITSET(Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_TCTFC_SINCE_PREINIT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   684  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   685  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   686  /*
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   687   * Whether the event was tested in this failure cycle, not respecting reports before startup of the ECU
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   688   *
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   689   * This status information is needed for OBD permanent memory handling and is stored only in RAM. If ever move the
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   690   * TestCompleteTFC state handling from EvMem to an "extended event status byte", then we can use that instead and also
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   691   * simplify some code in OBD.
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   692   */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   693  DEM_INLINE void Dem_EvtSetTestCompleteTFCSincePreinit(Dem_EventIdType EventId, Dem_boolean_least newState)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   694  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   695      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   696      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_TCTFC_SINCE_PREINIT, newState);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   697  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   698  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   699  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   700  /*-- COMBINED FUNCTIONS 4 DTC ------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   701  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   702  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   703  /* checks if the failure is set and may not be reset, used for DTC status calc *
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   704  DEM_INLINE Dem_boolean_least Dem_EvtIsActiveFailure (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   705  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   706     return (Dem_EvtSt_GetTestFailed (EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   707             && (   !Dem_EvtIsGoodCheckRequested(EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   708                 || !Dem_EvtIsGoodCheckTriggerSupported(EventId))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   709            );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   710  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   711  */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   712  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   713  /*-- REPORTING STATE ---------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   714  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   715  DEM_INLINE void Dem_EvtSetPassedWasReported (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   716  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   717      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   718      Dem_BitArrayOverwriteBit (Dem_EventWasPassedReported, EventId, setBit);
	movh.a	a2,#@his(Dem_EventWasPassedReported)
	lea	a2,[a2]@los(Dem_EventWasPassedReported)
.L487:
	mov	d15,d8
.L334:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    64      if (will_bit_be_set) {      (inlined)
	jeq	d0,#0,.L61
.L343:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     4  #ifndef DEM_BITARRAY_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     5  #define DEM_BITARRAY_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     9  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    10  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    11  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    13  #define DEM_BITARRAY_DATAELEMENTS( BITCOUNT )            ((((BITCOUNT)-1u) >> 5u)+1UL)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    14  /* #define DEM_BITARRAY_ELEMENTINDEX( BITNO )               ((BITNO) >> 5)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    15     #define DEM_BITARRAY_BITMASK( BITNO )                    ((UL)(1 << (((BITNO)) & 31)))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    16     #define DEM_BITARRAY_BYTESIZE( VARNAME, BITCOUNT )       (DEM_BITARRAY_DATAELEMENTS(BITCOUNT)*DEM_SIZEOF_VAR(uint32))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    17     #define DEM_BITARRAY_ADDRESS(VARNAME)                    DEM_ARRAY_ADDRESS(VARNAME) */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    19  #define DEM_BITARRAY_DECLARE( VARNAME, BITCOUNT )        DEM_ARRAY_DECLARE(uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    20  #define DEM_BITARRAY_DECLARE_CONST( VARNAME, BITCOUNT )  DEM_ARRAY_DECLARE(const uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    21  #define DEM_BITARRAY_DEFINE( VARNAME, BITCOUNT )         DEM_ARRAY_DEFINE(uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    22  #define DEM_BITARRAY_DEFINE_CONST( VARNAME, BITCOUNT )   DEM_ARRAY_DEFINE(const uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    23  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    24  #define DEM_BITARRAY_FUNCPARAM(VARNAME)                  DEM_ARRAY_FUNCPARAM(uint32,VARNAME)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    25  #define DEM_BITARRAY_CONSTFUNCPARAM(VARNAME)             DEM_ARRAY_CONSTFUNCPARAM(uint32,VARNAME)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    27  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    28  /** The size of an element of a bitfield in bits. */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    29  #define DEM_BITARRAY_ELEMENT_BITSIZE \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    30      (DEM_SIZEOF_TYPE(uint32) * 8u)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    33  DEM_INLINE void Dem_BitArraySetBit(DEM_BITARRAY_FUNCPARAM(buffer), uint32 bit_position)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    34  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    35      /* Assume that bit_position is within buffer */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    36      const uint32 element_pos = ((uint32)(bit_position / DEM_BITARRAY_ELEMENT_BITSIZE));
	sh	d0,d15,#-5
.L488:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    37      const uint32 local_bitpos = ((uint32)(bit_position % DEM_BITARRAY_ELEMENT_BITSIZE));
	and	d15,#31
.L613:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    38      const uint32 mask =
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    39              ((uint32) 1) << local_bitpos;
	mov	d1,#1
.L614:
	sh	d1,d1,d15
.L490:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    41      buffer[element_pos] |= mask;
	addsc.a	a2,a2,d0,#2
	ld.w	d15,[a2]
.L489:
	or	d15,d1
	st.w	[a2],d15
.L615:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    42      return;      (inlined)
	j	.L62

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    43  }      (inlined)
.L62:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    65          Dem_BitArraySetBit(buffer, bit_position);      (inlined)
	j	.L63

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    64      if (will_bit_be_set) {      (inlined)
.L61:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    42      return;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    43  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    46  DEM_INLINE void Dem_BitArrayClearBit(DEM_BITARRAY_FUNCPARAM(buffer), uint32 bit_position)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    48      /* Assume that bit_position is within buffer */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    49      const uint32 element_pos = ((uint32)(bit_position / DEM_BITARRAY_ELEMENT_BITSIZE));
	sh	d0,d15,#-5
.L491:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    50      const uint32 local_bitpos = ((uint32)(bit_position % DEM_BITARRAY_ELEMENT_BITSIZE));
	and	d15,#31
.L616:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    51      const uint32 mask =
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    52              ((uint32) 1) << local_bitpos;
	mov	d1,#1
.L617:
	sh	d1,d1,d15
.L494:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    54      buffer[element_pos] &= (uint32) ~ mask;
	addsc.a	a2,a2,d0,#2
	ld.w	d15,[a2]
.L493:
	mov	d0,#-1
.L492:
	xor	d1,d0
.L495:
	and	d15,d1
	st.w	[a2],d15
.L618:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    55      return;      (inlined)
	j	.L64

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    56  }      (inlined)
.L64:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    66      } else {      (inlined)
.L63:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    69      return;      (inlined)
	j	.L65

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    70  }      (inlined)
.L65:
.L59:
.L58:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   519                  }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   520              }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   521  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   522              /* if failureevent was caused by recheck logic, delete set and reset event */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   523              if (    (eventId == Dem_EvtBuffer.Locations[storeLoc].eventId)
	ld.hu	d15,[a15]6
.L496:
	jne	d15,d8,.L66
.L497:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   524                   && (eventType == C_EVENTTYPE_RESET)
	ld.bu	d15,[a10]
.L619:
	jne	d15,#3,.L67
.L368:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   631  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   632  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   633  /*------NextReportRelevantForMemories----------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   634  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   635  DEM_INLINE Dem_boolean_least Dem_EvtIsNextReportRelevantForMemories (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   636  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   637     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NXT_REPORT_IS_RELEVANT);
	movh.a	a2,#@his(Dem_AllEventsState)
	lea	a2,[a2]@los(Dem_AllEventsState)
.L498:
	addsc.a	a2,a2,d8,#2
.L499:
	ld.bu	d15,[a2]
.L620:
	mov	d0,#7
.L373:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L621:
	and	d15,#1
.L622:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L68

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L68:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L623:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L69

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L69:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   637     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NXT_REPORT_IS_RELEVANT);      (inlined)
	j	.L70

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   638  }      (inlined)
.L70:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   525                   && (!Dem_EvtIsNextReportRelevantForMemories(eventId))
	jne	d15,#0,.L71
.L369:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   526                 )
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   527              {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   528                  Dem_EvtBuffer.Locations[storeLoc].eventId = DEM_EVENTID_INVALID;
	mov	d15,#0
.L624:
	st.h	[a13],d15
.L625:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   529  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   530                  DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   531                  return FALSE;
	mov	d2,#0
.L626:
	j	.L72
.L71:
.L67:
.L66:
.L57:
.L56:
	mov	d0,#0
.L627:
	sh	d13,#4
.L484:
	addsc.a	a2,a12,d13,#0
.L628:
	ld.hu	d15,[a2]6
.L500:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   197      return (   (Dem_EvtBuffer.Locations[locationIndex].eventId == newEventId)      (inlined)
	jne	d15,d8,.L73
.L501:
	ld.bu	d15,[a2]4
.L629:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   198              && (Dem_EvtBuffer.Locations[locationIndex].eventType == C_EVENTTYPE_PRESTORE));      (inlined)
	eq	d15,d15,#6
.L630:
	cmov	d0,d15,#1

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   198              && (Dem_EvtBuffer.Locations[locationIndex].eventType == C_EVENTTYPE_PRESTORE));      (inlined)
.L74:
.L73:
	mov	d15,d0

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   197      return (   (Dem_EvtBuffer.Locations[locationIndex].eventId == newEventId)      (inlined)
	j	.L75

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   207  }      (inlined)
.L75:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   532              }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   533          }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   534  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   535          /* if not writing on a prestored event location
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   536           AND not combining a SET and RESET event     */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   537          if (   !( Dem_EvBuffIsPrestoreLocationAvailable(storeLoc, eventId)
	jeq	d15,#0,.L76
.L631:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   538                    && (   (eventType == C_EVENTTYPE_SET)
	ld.bu	d15,[a10]
.L632:
	jeq	d15,#1,.L77
.L633:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   539                        || (eventType == C_EVENTTYPE_SET_WAITINGFORMONITORING)
	ld.bu	d15,[a10]
.L634:
	jeq	d15,#5,.L78
.L76:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   540                       )
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   541                   )
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   542               && (eventType != C_EVENTTYPE_SET_RESET)
	ld.bu	d15,[a10]
.L635:
	jeq	d15,#2,.L79
.L502:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   543             )
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   544          {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   545              /* insert complete event data (environmentdata, debugdata to SFB */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   546              Dem_EvtBuffer.Locations[storeLoc].eventId = eventId;
	st.h	[a13],d8
.L503:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   547  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   548  #if(DEM_CFG_DEBUGDATA != DEM_CFG_DEBUGDATA_OFF)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   549              Dem_EvtBuffer.Locations[storeLoc].debug0 = debug0;
	st.w	[a15]8,d9
.L504:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   550              Dem_EvtBuffer.Locations[storeLoc].debug1 = debug1;
	st.w	[a15]12,d10
.L636:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   551  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   552  #if (DEM_CFG_EVBUFF_STORES_ENVDATA == DEM_CFG_EVBUFF_STORES_ENVDATA_ON)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   553              DEM_MEMCPY(Dem_EvtBuffer.Locations[storeLoc].envData.Buffer, EnvData.Buffer, DEM_SIZEOF_VAR(Dem_EvtBuffer.Locations[storeLoc].envData));
	lea	a5,[a10]4
	mov	d4,#4
.L385:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     3  #ifndef RBA_DIAGLIB_MEMUTILS_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     4  #define RBA_DIAGLIB_MEMUTILS_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     7  #include "rba_BswSrv.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     9  #define RBA_DIAGLIB_MEMCPY(xDest_p, xSrc_pc, numBytes_u32)                  rba_DiagLib_MemUtils_MemCpy((uint8*)(xDest_p),(const uint8*)(xSrc_pc),(uint32)(numBytes_u32))
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    10  #define RBA_DIAGLIB_MEMSET(xDest_p, xPattern_u32, numBytes_u32)             rba_DiagLib_MemUtils_MemSet((uint8*)(xDest_p),(sint32)(xPattern_u32),(uint32)(numBytes_u32))
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    11  #define RBA_DIAGLIB_MEMCMP(xSrc1_pc, xSrc2_pc, numBytes_u32)                rba_DiagLib_MemUtils_MemCmp((const uint8*)(xSrc1_pc),(const uint8*)(xSrc2_pc),(uint32)(numBytes_u32))
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    12  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    13  #define RBA_DIAGLIB_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    14  #include "rba_DiagLib_MemMap.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    15  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    16  /**
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    17   * Utility functions for MEMCPY, MEMSET, MEMCOMP.
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    18   */
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    19  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    20  LOCAL_INLINE void rba_DiagLib_MemUtils_MemCpy(uint8* xDest_p, const uint8* xSrc_pc, uint32 numBytes_s32)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    21  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    22      /* MR12 DIR 1.1 VIOLATION: Function rba_BswSrv_MemCopy converts argument 1 and 2 to pointer to void, function has no side effects */
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    23      (void) rba_BswSrv_MemCopy(xDest_p, xSrc_pc, numBytes_s32);
	mov.aa	a4,a15
	call	rba_BswSrv_MemCopy
.L79:
.L78:
.L77:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   554  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   555  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   556  #if(DEM_CFG_SUPPORT_PROJECTSPECIFIC_FAILUREMEMORY == TRUE)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   557              DEM_MEMCPY(&Dem_EvtBuffer.Locations[storeLoc].DemRbProjectSpecificFailureMemoryData, &PrjSpecificFailureMemoryData, DEM_SIZEOF_TYPE(DemRbProjectSpecificFailureMemoryType));
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   558  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   559  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   560  #if(DEM_BFM_ENABLED == DEM_BFM_ON)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   561              DEM_MEMCPY(&Dem_EvtBuffer.Locations[storeLoc].DemRbBfmFailureMemoryData, &BfmBufferData, DEM_SIZEOF_TYPE(rba_DemBfm_EnvironmentalData));
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   562  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   563  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   564          }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   565  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   566          Dem_EvtBuffer.Locations[storeLoc].eventType = eventType;
	ld.bu	d15,[a10]
.L637:
	st.b	[a15]4,d15
.L638:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   567          Dem_EvBuffSetCounter(&(Dem_EvtBuffer.Locations[storeLoc]), (uint8)counter);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   568  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   569          eventInserted = TRUE;
	mov	d11,#1
.L639:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   570  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   571  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   572          /* perform checks if counter elapsed */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   573          if (counter == 0u)
	jne	d12,#0,.L80
.L640:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   574          {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   575              Dem_EvBuffHandleElapsedCounter (&Dem_EvtBuffer.Locations[storeLoc]);
	mov.aa	a4,a15
	call	Dem_EvBuffHandleElapsedCounter
.L80:
.L55:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   576          }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   577      }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   578  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   579  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   580      DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   581      return eventInserted;
	mov	d2,d11
.L505:
	j	.L81

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   582  }
.L81:
.L72:
.L54:
	ret
.L293:
	
__Dem_EvBuffInsert_function_end:
	.size	Dem_EvBuffInsert,__Dem_EvBuffInsert_function_end-Dem_EvBuffInsert
.L202:
	; End of function
	
	.sdecl	'.text.Dem_EvBuff.Dem_EvBuffRemoveEvent',code,cluster('Dem_EvBuffRemoveEvent')
	.sect	'.text.Dem_EvBuff.Dem_EvBuffRemoveEvent'
	.align	2
	
	.global	Dem_EvBuffRemoveEvent

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   583  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   584  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   585  void Dem_EvBuffRemoveEvent (uint32 locationIndex)
; Function Dem_EvBuffRemoveEvent
Dem_EvBuffRemoveEvent:	.type	func

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   586  {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   587      DEM_ASSERT_ISLOCKED();
.L82:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   588      if (locationIndex < DEM_CFG_EVBUFF_SIZE)
	jge.u	d4,#10,.L83
.L660:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   589      {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   590          Dem_EvtBuffer.Locations[locationIndex].eventId = DEM_EVENTID_INVALID;
	sh	d4,#4
.L506:
	movh.a	a15,#@his(Dem_EvtBuffer)
	lea	a15,[a15]@los(Dem_EvtBuffer)
.L661:
	addsc.a	a15,a15,d4,#0
.L662:
	mov	d15,#0
.L663:
	st.h	[a15]10,d15
.L83:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   591      }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   592  }
	ret
.L405:
	
__Dem_EvBuffRemoveEvent_function_end:
	.size	Dem_EvBuffRemoveEvent,__Dem_EvBuffRemoveEvent_function_end-Dem_EvBuffRemoveEvent
.L212:
	; End of function
	
	.sdecl	'.text.Dem_EvBuff.Dem_EvBuffRemovePrestored',code,cluster('Dem_EvBuffRemovePrestored')
	.sect	'.text.Dem_EvBuff.Dem_EvBuffRemovePrestored'
	.align	2
	

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   593  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   594  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   595  #if (DEM_CFG_FFPRESTORAGESUPPORT == DEM_CFG_FFPRESTORAGESUPPORT_ON)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   596  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   597  /**
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   598   * The prestored FreezeFrame of the specified eventId will be deleted.
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   599   *
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   600   * @param EventId The eventID which is to use to look for a prestored FreezeFrame.
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   601   */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   602  static void Dem_EvBuffRemovePrestored (Dem_EventIdType EventId)
; Function Dem_EvBuffRemovePrestored
.L145:
Dem_EvBuffRemovePrestored:	.type	func

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   603  {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   604      uint8_least i;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   605  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   606      DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   607  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   608      for (i=0; i < DEM_CFG_PRESTORED_FF_SIZE; i++)
	mov	d0,#0
.L507:
	j	.L84
.L85:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   609      {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   610          /* if SET-Event (or even RESET-event) is still in buffer, delete it */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   611          if (    (   (Dem_EvtBuffer.Locations[i].eventId == EventId)
	sh	d15,d0,#4
.L740:
	movh.a	a15,#@his(Dem_EvtBuffer)
	lea	a15,[a15]@los(Dem_EvtBuffer)
.L741:
	add.a	a15,#4
.L742:
	addsc.a	a15,a15,d15,#0
.L743:
	mov.aa	a2,a15
	add.a	a2,#6
	ld.hu	d15,[a15]6
.L744:
	jeq	d15,d4,.L86
.L745:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   612                  || (EventId == DEM_EVENTID_INVALID))
	jne	d4,#0,.L87
.L86:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   613                  && (Dem_EvtBuffer.Locations[i].eventType == C_EVENTTYPE_PRESTORE)
	ld.bu	d15,[a15]4
.L746:
	jne	d15,#6,.L88
.L747:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   614          )
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   615          {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   616              Dem_EvtBuffer.Locations[i].eventId = DEM_EVENTID_INVALID;
	mov	d15,#0
.L748:
	st.h	[a2],d15
.L88:
.L87:
	add	d0,#1
.L84:
	jlt.u	d0,#5,.L85
.L749:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   617          }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   618      }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   619  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   620      DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   621  }
	ret
.L445:
	
__Dem_EvBuffRemovePrestored_function_end:
	.size	Dem_EvBuffRemovePrestored,__Dem_EvBuffRemovePrestored_function_end-Dem_EvBuffRemovePrestored
.L242:
	; End of function
	
	.sdecl	'.text.Dem_EvBuff.Dem_EvBuffRemoveAllPrestored',code,cluster('Dem_EvBuffRemoveAllPrestored')
	.sect	'.text.Dem_EvBuff.Dem_EvBuffRemoveAllPrestored'
	.align	2
	
	.global	Dem_EvBuffRemoveAllPrestored

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   622  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   623  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   624  /**
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   625   * All prestored FreezeFrames will be deleted.
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   626   */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   627  void Dem_EvBuffRemoveAllPrestored (void)
; Function Dem_EvBuffRemoveAllPrestored
.L147:
Dem_EvBuffRemoveAllPrestored:	.type	func

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   628  {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   629      Dem_EvBuffRemovePrestored (DEM_EVENTID_INVALID);
	mov	d4,#0
	call	Dem_EvBuffRemovePrestored
.L564:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   630  }
	ret
.L289:
	
__Dem_EvBuffRemoveAllPrestored_function_end:
	.size	Dem_EvBuffRemoveAllPrestored,__Dem_EvBuffRemoveAllPrestored_function_end-Dem_EvBuffRemoveAllPrestored
.L182:
	; End of function
	
	.sdecl	'.text.Dem_EvBuff.Dem_EvBuffIsEventPending',code,cluster('Dem_EvBuffIsEventPending')
	.sect	'.text.Dem_EvBuff.Dem_EvBuffIsEventPending'
	.align	2
	
	.global	Dem_EvBuffIsEventPending

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   631  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   632  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   633  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   634  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   635  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   636  /* TODO: make this function switchable, because may be project specific */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   637  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   638  /**
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   639   *  This function can be called by DSW or PSW in order to check whether for
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   640   *  a given monitoring identifier, a failure event is still pending to be
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   641   *  reported to FMHC. \n
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   642   *  Background: It is possible that a component has called DIA to qualify a fault,
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   643   *  but the transfer from DIA to FMHC (via SFB) is still pending. In such case,
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   644   *  it is insufficient to check Fmhc_IsUpdatingEeprom(), because the EEPROM
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   645   *  update of FMHC hasn't even started.
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   646   *
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   647   * @param EventId : Corresponds to the monitoring for which report pending is checked. \n
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   648   *        If DEM_EVENTID_INVALID is passed, then the SFB will be checked for any
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   649   *        pending failure event.
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   650   *
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   651   * @return FALSE = No event report is pending . \n
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   652   *         TRUE = An event report is pending .
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   653   */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   654  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   655  Dem_boolean_least Dem_EvBuffIsEventPending (Dem_EventIdType EventId)
; Function Dem_EvBuffIsEventPending
.L149:
Dem_EvBuffIsEventPending:	.type	func

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   656  {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   657      Dem_boolean_least EventFound = FALSE;   /* Return value of this function (FALSE by default) */
	mov	d2,#0
.L508:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   658      uint8_least i = DEM_CFG_EVBUFF_SIZE;    /* Loop index (start from the buffer end because it's filled from there) */
	mov	d0,#10
.L509:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   659  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   660      DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   661  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   662      /* Loop over sequential failure buffer (SFB) */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   663      while(i > 0u)
	j	.L89
.L90:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   664      {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   665          i--;
	add	d0,#-1
.L685:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   666  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   667          /* Current location contains a failure event for (the given EventId) or (any EventId)? */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   668          if (   ((Dem_EvtBuffer.Locations[i].eventId == EventId) || (DEM_EVENTID_INVALID == EventId))
	sh	d15,d0,#4
.L686:
	movh.a	a15,#@his(Dem_EvtBuffer)
	lea	a15,[a15]@los(Dem_EvtBuffer)
.L687:
	add.a	a15,#4
.L688:
	addsc.a	a15,a15,d15,#0
.L689:
	ld.hu	d15,[a15]6
.L690:
	jeq	d15,d4,.L91
.L691:
	jne	d4,#0,.L92
.L91:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   669  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   670  #if (DEM_CFG_FFPRESTORAGESUPPORT == DEM_CFG_FFPRESTORAGESUPPORT_ON)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   671                  && (Dem_EvtBuffer.Locations[i].eventType != C_EVENTTYPE_PRESTORE)
	ld.bu	d15,[a15]4
.L692:
	jeq	d15,#6,.L93
.L693:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   672  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   673          )
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   674          {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   675              EventFound = TRUE;
	mov	d2,#1
.L694:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   676              i = 0u;
	mov	d0,#0
.L93:
.L92:
.L89:
	jne	d0,#0,.L90
.L695:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   677          }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   678      }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   679  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   680      DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   681  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   682      return EventFound;
	j	.L94

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   683  }
.L94:
	ret
.L416:
	
__Dem_EvBuffIsEventPending_function_end:
	.size	Dem_EvBuffIsEventPending,__Dem_EvBuffIsEventPending_function_end-Dem_EvBuffIsEventPending
.L227:
	; End of function
	
	.sdecl	'.text.Dem_EvBuff.Dem_PrestoreFreezeFrameWithEnvData',code,cluster('Dem_PrestoreFreezeFrameWithEnvData')
	.sect	'.text.Dem_EvBuff.Dem_PrestoreFreezeFrameWithEnvData'
	.align	2
	
	.global	Dem_PrestoreFreezeFrameWithEnvData

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   684  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   685  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   686  Std_ReturnType Dem_PrestoreFreezeFrameWithEnvData( Dem_EventIdType EventId ,Dem_DebugDataType debug0 ,Dem_DebugDataType debug1 )
; Function Dem_PrestoreFreezeFrameWithEnvData
.L151:
Dem_PrestoreFreezeFrameWithEnvData:	.type	func
	mov	e0,d5,d4
	mov	d7,d6
.L513:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   687  {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   688      Std_ReturnType ReturnValue = E_NOT_OK;
	mov	d8,#1

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   689  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   690  #if (DEM_CFG_DEBUGDATA == DEM_CFG_DEBUGDATA_OFF)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   691      DEM_UNUSED_PARAM(debug0);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   692      DEM_UNUSED_PARAM(debug1);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   693  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   694  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   695  #if (DEM_CFG_FFPRESTORAGESUPPORT == DEM_CFG_FFPRESTORAGESUPPORT_ON)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   696  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   697      DEM_ENTRY_CONDITION_CHECK_EVENT_ID_VALID_AVAILABLE(EventId,DEM_DET_APIID_PRESTOREFREEZEFRAME,E_NOT_OK);
.L95:
.L96:
.L97:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
	mov	d2,#0
.L515:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
	jeq	d0,#0,.L98
.L555:
	ge.u	d15,d0,#6
.L516:
	cmovn	d2,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
.L99:
.L98:
	j	.L100

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }      (inlined)
.L100:
	jne	d2,#0,.L101
.L280:
	mov	d4,#54
.L510:
	mov	d5,#0
.L511:
	mov	d6,#6
.L512:
	mov	d7,#16
.L514:
	call	Det_ReportError
	mov	d2,#1
	j	.L102
.L101:
.L103:
.L104:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
	movh.a	a15,#@his(Dem_AllEventsState)
	lea	a15,[a15]@los(Dem_AllEventsState)
.L521:
	addsc.a	a15,a15,d0,#2
.L522:
	ld.bu	d15,[a15]
.L556:
	mov	d2,#2
.L284:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d2,#0
	sha	d15,d15,d2
.L557:
	and	d15,#1
.L558:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L105

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L105:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L559:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L106

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L106:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);      (inlined)
	j	.L107

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   631  }      (inlined)
.L107:
	jeq	d15,#0,.L108
.L282:
	mov	d2,#1
	j	.L109
.L108:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   698  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   699      if (Dem_EvBuffInsert(C_EVENTTYPE_PRESTORE, EventId DEM_DEBUGDATA_PARAM(debug0, debug1)))
	mov	d4,#6
.L517:
	mov	d5,d0
.L518:
	mov	d6,d1
.L519:
	call	Dem_EvBuffInsert
.L520:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   700      {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   701          ReturnValue = E_OK;
	seln	d8,d2,d8,#0
.L110:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   702      }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   703  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   704  #else
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   705      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   706      DEM_UNUSED_PARAM(debug0);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   707      DEM_UNUSED_PARAM(debug1);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   708  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   709  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   710      return ReturnValue;
	mov	d2,d8
.L523:
	j	.L111

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   711  }
.L111:
.L109:
.L102:
	ret
.L274:
	
__Dem_PrestoreFreezeFrameWithEnvData_function_end:
	.size	Dem_PrestoreFreezeFrameWithEnvData,__Dem_PrestoreFreezeFrameWithEnvData_function_end-Dem_PrestoreFreezeFrameWithEnvData
.L177:
	; End of function
	
	.sdecl	'.text.Dem_EvBuff.Dem_PrestoreFreezeFrame',code,cluster('Dem_PrestoreFreezeFrame')
	.sect	'.text.Dem_EvBuff.Dem_PrestoreFreezeFrame'
	.align	2
	
	.global	Dem_PrestoreFreezeFrame

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   712  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   713  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   714  Std_ReturnType Dem_PrestoreFreezeFrame(Dem_EventIdType EventId)
; Function Dem_PrestoreFreezeFrame
.L153:
Dem_PrestoreFreezeFrame:	.type	func

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   715  {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   716      return Dem_PrestoreFreezeFrameWithEnvData(EventId,0,0);
	mov	d5,#0
.L550:
	mov	d6,#0
	call	Dem_PrestoreFreezeFrameWithEnvData
.L524:
	j	.L112

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   717  }
.L112:
	ret
.L272:
	
__Dem_PrestoreFreezeFrame_function_end:
	.size	Dem_PrestoreFreezeFrame,__Dem_PrestoreFreezeFrame_function_end-Dem_PrestoreFreezeFrame
.L172:
	; End of function
	
	.sdecl	'.text.Dem_EvBuff.Dem_ClearPrestoredFreezeFrame',code,cluster('Dem_ClearPrestoredFreezeFrame')
	.sect	'.text.Dem_EvBuff.Dem_ClearPrestoredFreezeFrame'
	.align	2
	
	.global	Dem_ClearPrestoredFreezeFrame

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   718  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   719  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   720  Std_ReturnType Dem_ClearPrestoredFreezeFrame(Dem_EventIdType EventId)
; Function Dem_ClearPrestoredFreezeFrame
Dem_ClearPrestoredFreezeFrame:	.type	func

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   721  {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   722  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   723  #if (DEM_CFG_FFPRESTORAGESUPPORT == DEM_CFG_FFPRESTORAGESUPPORT_ON)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   724      DEM_ENTRY_CONDITION_CHECK_EVENT_ID_VALID_AVAILABLE(EventId,DEM_DET_APIID_DEM_CLEARPRESTOREDFREEZEFRAME,E_NOT_OK);
.L113:
.L114:
.L115:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
	mov	d15,#0
.L536:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
	jeq	d4,#0,.L116
.L537:
	ge.u	d0,d4,#6
.L538:
	sel	d15,d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
.L117:
.L116:
	j	.L118

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }      (inlined)
.L118:
	jne	d15,#0,.L119
.L250:
	mov	d4,#54
.L525:
	mov	d5,#0
	mov	d6,#7
	mov	d7,#16
	call	Det_ReportError
	mov	d2,#1
	j	.L120
.L119:
.L121:
.L122:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
	movh.a	a15,#@his(Dem_AllEventsState)
	lea	a15,[a15]@los(Dem_AllEventsState)
.L539:
	addsc.a	a15,a15,d4,#2
.L540:
	ld.bu	d15,[a15]
.L541:
	mov	d0,#2
.L260:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L542:
	and	d15,#1
.L543:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L123

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L123:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L544:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L124

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L124:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);      (inlined)
	j	.L125

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   631  }      (inlined)
.L125:
	jeq	d15,#0,.L126
.L255:
	mov	d2,#1
	j	.L127
.L126:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   725  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   726      Dem_EvBuffRemovePrestored(EventId);
	call	Dem_EvBuffRemovePrestored
.L526:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   727      return E_OK;
	mov	d2,#0
.L545:
	j	.L128

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   728  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   729  #else
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   730      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   731      return E_NOT_OK;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   732  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   733  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   734  }
.L128:
.L127:
.L120:
	ret
.L246:
	
__Dem_ClearPrestoredFreezeFrame_function_end:
	.size	Dem_ClearPrestoredFreezeFrame,__Dem_ClearPrestoredFreezeFrame_function_end-Dem_ClearPrestoredFreezeFrame
.L167:
	; End of function
	
	.sdecl	'.text.Dem_EvBuff.Dem_PreStoredFFInitCheckNvM',code,cluster('Dem_PreStoredFFInitCheckNvM')
	.sect	'.text.Dem_EvBuff.Dem_PreStoredFFInitCheckNvM'
	.align	2
	
	.global	Dem_PreStoredFFInitCheckNvM

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   735  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   736  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   737  #if (DEM_CFG_FFPRESTORAGESUPPORT == DEM_CFG_FFPRESTORAGESUPPORT_ON)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   738  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   739  /* called from Dem_Init to validate the Nv block */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   740  void Dem_PreStoredFFInitCheckNvM(void)
; Function Dem_PreStoredFFInitCheckNvM
.L156:
Dem_PreStoredFFInitCheckNvM:	.type	func

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   741  {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   742  #if (DEM_CFG_FFPRESTORAGE_NONVOLATILE == DEM_CFG_FFPRESTORAGE_NONVOLATILE_ON)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   743      uint8 i;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   744      Dem_NvmResultType NvmResult;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   745  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   746      for (i = 0; i < DEM_CFG_PRESTORED_FF_SIZE; i++)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   747      {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   748          if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   749          {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   750              /* Zero the content of this particular location */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   751              DEM_MEMSET(&Dem_EvtBuffer.Locations[i], 0, DEM_SIZEOF_VAR(Dem_EvtBuffer.Locations[i]));
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   752              Dem_NvMClearBlockByInvalidate(Dem_PreStoredFFNvmId[i]);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   753          }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   754          else
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   755          {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   756              /* Get the Result of the NvM-Read (NvM_ReadAll) */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   757              NvmResult = Dem_NvmGetStatus (Dem_PreStoredFFNvmId[i]);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   758  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   759              /* Data read successfully */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   760              if (NvmResult == DEM_NVM_SUCCESS)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   761              {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   762                  /* Check if eventid stored in the location is valid */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   763                  if(!Dem_isEventIdValid(Dem_EvtBuffer.Locations[i].eventId))
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   764                  {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   765                      NvmResult = DEM_NVM_FAILED;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   766                  }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   767              }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   768  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   769              if(NvmResult != DEM_NVM_SUCCESS)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   770              {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   771                  /* Zero the content of this particular location */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   772                  DEM_MEMSET(&Dem_EvtBuffer.Locations[i], 0, DEM_SIZEOF_VAR(Dem_EvtBuffer.Locations[i]));
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   773                  Dem_NvMWriteBlockOnShutdown(Dem_PreStoredFFNvmId[i]);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   774              }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   775          }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   776      }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   777  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   778      //to avoid problems with "saved zone" feature the rest has to be initialized to zero
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   779      for (i = DEM_CFG_PRESTORED_FF_SIZE; i < DEM_CFG_EVBUFF_SIZE; i++)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   780      {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   781          /* Zero the content of this particular location */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   782          DEM_MEMSET(&Dem_EvtBuffer.Locations[i], 0, DEM_SIZEOF_VAR(Dem_EvtBuffer.Locations[i]));
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   783      }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   784      //optional
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   785      //Dem_EvtBuffer.OverflowCounter=0;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   786      //Dem_EvtBuffer.OverflowCounterSet=0;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   787  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   788  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   789  }
	ret
.L291:
	
__Dem_PreStoredFFInitCheckNvM_function_end:
	.size	Dem_PreStoredFFInitCheckNvM,__Dem_PreStoredFFInitCheckNvM_function_end-Dem_PreStoredFFInitCheckNvM
.L192:
	; End of function
	
	.sdecl	'.text.Dem_EvBuff.Dem_PreStoredFFShutdown',code,cluster('Dem_PreStoredFFShutdown')
	.sect	'.text.Dem_EvBuff.Dem_PreStoredFFShutdown'
	.align	2
	
	.global	Dem_PreStoredFFShutdown

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   790  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   791  /* Store prestored freeze frame in NVRAM*/
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   792  void Dem_PreStoredFFShutdown(void)
; Function Dem_PreStoredFFShutdown
.L158:
Dem_PreStoredFFShutdown:	.type	func

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   793  {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   794  #if (DEM_CFG_FFPRESTORAGE_NONVOLATILE == DEM_CFG_FFPRESTORAGE_NONVOLATILE_ON)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   795      uint8 i;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   796  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   797      for (i = 0; i < DEM_CFG_PRESTORED_FF_SIZE; i++)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   798      {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   799          Dem_NvMWriteBlockOnShutdown(Dem_PreStoredFFNvmId[i]);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   800      }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   801  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   802  }
	ret
.L292:
	
__Dem_PreStoredFFShutdown_function_end:
	.size	Dem_PreStoredFFShutdown,__Dem_PreStoredFFShutdown_function_end-Dem_PreStoredFFShutdown
.L197:
	; End of function
	
	.sdecl	'.bss.Dem_EvBuff.Dem_EvtBuffer',data,cluster('Dem_EvtBuffer')
	.sect	'.bss.Dem_EvBuff.Dem_EvtBuffer'
	.global	Dem_EvtBuffer
	.align	4
Dem_EvtBuffer:	.type	object
	.size	Dem_EvtBuffer,164
	.space	164
	.calls	'Dem_EvBuffEnvCaptureData','Dem_EnvCaptureED'
	.calls	'Dem_EvBuffEnvCaptureData','Dem_EnvCaptureFF'
	.calls	'Dem_EvBuffInsert','Dem_EvBuffEnvCaptureData'
	.calls	'Dem_EvBuffInsert','Dem_EvBuffGetLocationToWrite'
	.calls	'Dem_EvBuffInsert','Dem_EvtSetCausal'
	.calls	'Dem_EvBuffInsert','rba_BswSrv_MemCopy'
	.calls	'Dem_EvBuffInsert','Dem_EvBuffHandleElapsedCounter'
	.calls	'Dem_EvBuffRemoveAllPrestored','Dem_EvBuffRemovePrestored'
	.calls	'Dem_PrestoreFreezeFrameWithEnvData','Det_ReportError'
	.calls	'Dem_PrestoreFreezeFrameWithEnvData','Dem_EvBuffInsert'
	.calls	'Dem_PrestoreFreezeFrame','Dem_PrestoreFreezeFrameWithEnvData'
	.calls	'Dem_ClearPrestoredFreezeFrame','Det_ReportError'
	.calls	'Dem_ClearPrestoredFreezeFrame','Dem_EvBuffRemovePrestored'
	.calls	'Dem_EvBuffGetLocationToWrite','',0
	.calls	'Dem_EvBuffHandleElapsedCounter','',0
	.calls	'Dem_EvBuffMainFunction','',0
	.calls	'Dem_EvBuffClear','',0
	.calls	'Dem_EvBuffGetEvent','',0
	.calls	'Dem_EvBuffEnvCaptureData','',0
	.calls	'Dem_EvBuffInsert','',8
	.calls	'Dem_EvBuffRemoveEvent','',0
	.calls	'Dem_EvBuffRemovePrestored','',0
	.calls	'Dem_EvBuffRemoveAllPrestored','',0
	.calls	'Dem_EvBuffIsEventPending','',0
	.calls	'Dem_PrestoreFreezeFrameWithEnvData','',0
	.calls	'Dem_PrestoreFreezeFrame','',0
	.calls	'Dem_ClearPrestoredFreezeFrame','',0
	.calls	'Dem_PreStoredFFInitCheckNvM','',0
	.extern	Det_ReportError
	.extern	rba_BswSrv_MemCopy
	.extern	Dem_AllEventsState
	.extern	Dem_EventWasPassedReported
	.extern	Dem_EvtSetCausal
	.extern	Dem_EnvCaptureED
	.extern	Dem_EnvCaptureFF
	.calls	'Dem_PreStoredFFShutdown','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L160:
	.word	30426
	.half	3
	.word	.L161
	.byte	4
.L159:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L162
.L245:
	.byte	2
	.byte	'unsigned char',0,1,8
.L409:
	.byte	3
	.word	143
	.byte	4
	.byte	'rba_DiagLib_Bit8SetBit',0,3,1,36,19,1,1,5
	.byte	'buffer',0,1,36,49
	.word	160
	.byte	5
	.byte	'bit_position',0,1,36,63
	.word	143
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8ClearBit',0,3,1,42,19,1,1,5
	.byte	'buffer',0,1,42,51
	.word	160
	.byte	5
	.byte	'bit_position',0,1,42,65
	.word	143
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8OverwriteBit',0,3,1,48,19,1,1,5
	.byte	'buffer',0,1,48,55
	.word	160
	.byte	5
	.byte	'bit_position',0,1,48,69
	.word	143
	.byte	5
	.byte	'will_bit_be_set',0,1,48,91
	.word	143
	.byte	7,6,6,0,0
.L266:
	.byte	8
	.byte	'rba_DiagLib_Bit8GetSingleBit',0,3,1,60,20
	.word	143
	.byte	1,1
.L267:
	.byte	5
	.byte	'value',0,1,60,55
	.word	143
.L269:
	.byte	5
	.byte	'bit_position',0,1,60,68
	.word	143
.L271:
	.byte	6,0
.L259:
	.byte	8
	.byte	'rba_DiagLib_Bit8IsBitSet',0,3,1,64,22
	.word	143
	.byte	1,1
.L261:
	.byte	5
	.byte	'value',0,1,64,53
	.word	143
.L263:
	.byte	5
	.byte	'bit_position',0,1,64,66
	.word	143
.L265:
	.byte	7,6,0,0,8
	.byte	'rba_DiagLib_Bit8GetBits',0,3,1,69,20
	.word	143
	.byte	1,1,5
	.byte	'value',0,1,69,50
	.word	143
	.byte	5
	.byte	'bit_position',0,1,69,63
	.word	143
	.byte	5
	.byte	'number_of_bits',0,1,69,83
	.word	143
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8ClearBits',0,3,1,77,19,1,1,5
	.byte	'value',0,1,77,52
	.word	160
	.byte	5
	.byte	'bit_position',0,1,77,65
	.word	143
	.byte	5
	.byte	'number_of_bits',0,1,77,85
	.word	143
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8OverwriteBits',0,3,1,83,19,1,1,5
	.byte	'value',0,1,83,56
	.word	160
	.byte	5
	.byte	'bit_position',0,1,83,69
	.word	143
	.byte	5
	.byte	'number_of_bits',0,1,83,89
	.word	143
	.byte	5
	.byte	'newValue',0,1,83,111
	.word	143
	.byte	7,6,0,0
.L247:
	.byte	2
	.byte	'unsigned short int',0,2,7,3
	.word	860
	.byte	4
	.byte	'rba_DiagLib_Bit16SetBit',0,3,2,36,19,1,1,5
	.byte	'buffer',0,2,36,51
	.word	882
	.byte	5
	.byte	'bit_position',0,2,36,65
	.word	143
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit16ClearBit',0,3,2,42,19,1,1,5
	.byte	'buffer',0,2,42,53
	.word	882
	.byte	5
	.byte	'bit_position',0,2,42,67
	.word	143
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit16GetSingleBit',0,3,2,60,21
	.word	860
	.byte	1,1,5
	.byte	'value',0,2,60,58
	.word	860
	.byte	5
	.byte	'bit_position',0,2,60,71
	.word	143
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit16IsBitSet',0,3,2,65,22
	.word	143
	.byte	1,1,5
	.byte	'value',0,2,65,55
	.word	860
	.byte	5
	.byte	'bit_position',0,2,65,68
	.word	143
	.byte	7,6,0,0,8
	.byte	'rba_DiagLib_Bit16GetBits',0,3,2,70,21
	.word	860
	.byte	1,1,5
	.byte	'value',0,2,70,53
	.word	860
	.byte	5
	.byte	'bit_position',0,2,70,66
	.word	143
	.byte	5
	.byte	'number_of_bits',0,2,70,86
	.word	143
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit16ClearBits',0,3,2,78,19,1,1,5
	.byte	'value',0,2,78,54
	.word	882
	.byte	5
	.byte	'bit_position',0,2,78,67
	.word	143
	.byte	5
	.byte	'number_of_bits',0,2,78,87
	.word	143
	.byte	6,0
.L276:
	.byte	2
	.byte	'unsigned int',0,4,7
.L395:
	.byte	3
	.word	1371
	.byte	4
	.byte	'rba_DiagLib_Bit32SetBit',0,3,3,36,19,1,1,5
	.byte	'buffer',0,3,36,51
	.word	1387
	.byte	5
	.byte	'bit_position',0,3,36,65
	.word	143
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit32ClearBit',0,3,3,42,19,1,1,5
	.byte	'buffer',0,3,42,53
	.word	1387
	.byte	5
	.byte	'bit_position',0,3,42,67
	.word	143
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit32GetSingleBit',0,3,3,60,21
	.word	1371
	.byte	1,1,5
	.byte	'value',0,3,60,58
	.word	1371
	.byte	5
	.byte	'bit_position',0,3,60,71
	.word	143
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit32IsBitSet',0,3,3,65,22
	.word	143
	.byte	1,1,5
	.byte	'value',0,3,65,55
	.word	1371
	.byte	5
	.byte	'bit_position',0,3,65,68
	.word	143
	.byte	7,6,0,0,4
	.byte	'rba_DiagLib_Bit32ClearBits',0,3,3,78,19,1,1,5
	.byte	'value',0,3,78,54
	.word	1387
	.byte	5
	.byte	'bit_position',0,3,78,67
	.word	143
	.byte	5
	.byte	'number_of_bits',0,3,78,87
	.word	143
	.byte	6,0,8
	.byte	'rba_BswSrv_ByteOrderSwap32',0,3,4,125,21
	.word	1371
	.byte	1,1,5
	.byte	'Input_u32',0,4,125,55
	.word	1371
	.byte	6,0,8
	.byte	'rba_BswSrv_ByteOrderSwap16',0,3,4,150,1,21
	.word	860
	.byte	1,1,5
	.byte	'Input_u16',0,4,150,1,55
	.word	860
	.byte	6,0,9
	.word	143
	.byte	3
	.word	1898
.L384:
	.byte	4
	.byte	'rba_DiagLib_MemUtils_MemCpy',0,3,5,20,19,1,1
.L386:
	.byte	5
	.byte	'xDest_p',0,5,20,54
	.word	160
.L388:
	.byte	5
	.byte	'xSrc_pc',0,5,20,76
	.word	1903
.L390:
	.byte	5
	.byte	'numBytes_s32',0,5,20,92
	.word	1371
.L392:
	.byte	6,0,2
	.byte	'int',0,4,5,4
	.byte	'rba_DiagLib_MemUtils_MemSet',0,3,5,26,19,1,1,5
	.byte	'xDest_pv',0,5,26,54
	.word	160
	.byte	5
	.byte	'xPattern_u32',0,5,26,71
	.word	1998
	.byte	5
	.byte	'numBytes_s32',0,5,26,92
	.word	1371
	.byte	6,0,8
	.byte	'Dem_LibGetParamUI8',0,3,6,36,18
	.word	143
	.byte	1,1,5
	.byte	'parameter',0,6,36,44
	.word	143
	.byte	6,0,8
	.byte	'Dem_LibGetParamBool',0,3,6,41,20
	.word	143
	.byte	1,1,5
	.byte	'parameter',0,6,41,49
	.word	143
	.byte	6,0
.L249:
	.byte	8
	.byte	'Dem_isEventIdValid',0,3,7,20,30
	.word	143
	.byte	1,1
.L251:
	.byte	5
	.byte	'checkID',0,7,20,65
	.word	860
.L253:
	.byte	6,0
.L305:
	.byte	8
	.byte	'Dem_NodeIdFromEventId',0,3,7,105,33
	.word	143
	.byte	1,1
.L306:
	.byte	5
	.byte	'id',0,7,105,72
	.word	860
.L308:
	.byte	6,0,8
	.byte	'Dem_isDtcIdValid',0,3,7,152,1,30
	.word	143
	.byte	1,1,5
	.byte	'id',0,7,152,1,62
	.word	860
	.byte	6,0,8
	.byte	'Dem_DtcIdFromEventId',0,3,7,158,1,27
	.word	860
	.byte	1,1,5
	.byte	'id',0,7,158,1,65
	.word	860
	.byte	6,0,8
	.byte	'Dem_DtcIdGetEventId',0,3,7,166,1,28
	.word	860
	.byte	1,1,5
	.byte	'dtcid',0,7,166,1,63
	.word	860
	.byte	6,0,8
	.byte	'Dem_DtcGroupIdIsValid',0,3,7,252,1,30
	.word	143
	.byte	1,1,5
	.byte	'dtcGroupID',0,7,252,1,72
	.word	143
	.byte	6,0,10,4
	.word	143
	.byte	11,3,0
.L298:
	.byte	12,8,37,9,4,13
	.byte	'EnforceAlignment',0
	.word	1371
	.byte	4,2,35,0,13
	.byte	'Buffer',0
	.word	2491
	.byte	4,2,35,0,0,14,8,49,9,16,13
	.byte	'envData',0
	.word	2500
	.byte	4,2,35,0,13
	.byte	'eventType',0
	.word	143
	.byte	1,2,35,4,13
	.byte	'eventId',0
	.word	860
	.byte	2,2,35,6,13
	.byte	'debug0',0
	.word	1371
	.byte	4,2,35,8,13
	.byte	'debug1',0
	.word	1371
	.byte	4,2,35,12,0,9
	.word	2548
.L393:
	.byte	3
	.word	2639
.L400:
	.byte	8
	.byte	'Dem_EvBuffGetCounter',0,3,8,95,18
	.word	143
	.byte	1,1
.L402:
	.byte	5
	.byte	'evBuff',0,8,95,63
	.word	2644
.L404:
	.byte	6,0
.L342:
	.byte	4
	.byte	'Dem_BitArraySetBit',0,3,9,33,17,1,1
.L344:
	.byte	5
	.byte	'buffer',0,9,33,36
	.word	1387
.L346:
	.byte	5
	.byte	'bit_position',0,9,33,75
	.word	1371
.L348:
	.byte	6,0
.L355:
	.byte	4
	.byte	'Dem_BitArrayClearBit',0,3,9,46,17,1,1
.L356:
	.byte	5
	.byte	'buffer',0,9,46,38
	.word	1387
.L358:
	.byte	5
	.byte	'bit_position',0,9,46,77
	.word	1371
.L360:
	.byte	6,0
.L333:
	.byte	4
	.byte	'Dem_BitArrayOverwriteBit',0,3,9,61,17,1,1
.L335:
	.byte	5
	.byte	'buffer',0,9,61,42
	.word	1387
.L337:
	.byte	5
	.byte	'bit_position',0,9,62,25
	.word	1371
.L339:
	.byte	5
	.byte	'will_bit_be_set',0,9,62,57
	.word	143
.L341:
	.byte	7,6,6,0,0,9
	.word	1371
	.byte	3
	.word	2925
	.byte	8
	.byte	'Dem_BitArrayIsBitSet',0,3,9,75,30
	.word	143
	.byte	1,1,5
	.byte	'buffer',0,9,75,51
	.word	2930
	.byte	5
	.byte	'bit_position',0,9,75,95
	.word	1371
	.byte	6,0,8
	.byte	'Dem_ISO14229ByteIsTestFailed',0,3,10,122,30
	.word	143
	.byte	1,1,5
	.byte	'self',0,10,122,66
	.word	143
	.byte	7,6,0,0,8
	.byte	'Dem_ISO14229ByteIsTestFailedTOC',0,3,10,129,1,30
	.word	143
	.byte	1,1,5
	.byte	'self',0,10,129,1,69
	.word	143
	.byte	7,6,0,0,8
	.byte	'Dem_ISO14229ByteIsTestCompleteTOC',0,3,10,157,1,30
	.word	143
	.byte	1,1,5
	.byte	'self',0,10,157,1,71
	.word	143
	.byte	7,6,0,0,8
	.byte	'Dem_ISO14229ByteIsPendingDTC',0,3,10,164,1,30
	.word	143
	.byte	1,1,5
	.byte	'self',0,10,164,1,66
	.word	143
	.byte	7,6,0,0,8
	.byte	'Dem_ISO14229ByteIsWarningIndicatorRequested',0,3,10,177,1,30
	.word	143
	.byte	1,1,5
	.byte	'self',0,10,177,1,81
	.word	143
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetTestFailed',0,3,10,186,1,17,1,1,5
	.byte	'self',0,10,186,1,55
	.word	160
	.byte	5
	.byte	'setOrReset',0,10,186,1,79
	.word	143
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetTestFailedTOC',0,3,10,193,1,17,1,1,5
	.byte	'self',0,10,193,1,58
	.word	160
	.byte	5
	.byte	'setOrReset',0,10,193,1,82
	.word	143
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetTestFailedSLC',0,3,10,200,1,17,1,1,5
	.byte	'self',0,10,200,1,58
	.word	160
	.byte	5
	.byte	'setOrReset',0,10,200,1,82
	.word	143
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetTestCompleteTOC',0,3,10,214,1,17,1,1,5
	.byte	'self',0,10,214,1,60
	.word	160
	.byte	5
	.byte	'setOrReset',0,10,214,1,84
	.word	143
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetTestCompleteSLC',0,3,10,221,1,17,1,1,5
	.byte	'self',0,10,221,1,60
	.word	160
	.byte	5
	.byte	'setOrReset',0,10,221,1,84
	.word	143
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetPendingDTC',0,3,10,228,1,17,1,1,5
	.byte	'self',0,10,228,1,55
	.word	160
	.byte	5
	.byte	'setOrReset',0,10,228,1,79
	.word	143
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetConfirmedDTC',0,3,10,235,1,17,1,1,5
	.byte	'self',0,10,235,1,57
	.word	160
	.byte	5
	.byte	'setOrReset',0,10,235,1,81
	.word	143
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetWarningIndicatorRequested',0,3,10,242,1,17,1,1,5
	.byte	'self',0,10,242,1,70
	.word	160
	.byte	5
	.byte	'setOrReset',0,10,242,1,94
	.word	143
	.byte	7,6,0,0,8
	.byte	'Dem_EnCoAreAllFulfilled',0,3,11,32,30
	.word	143
	.byte	1,1,5
	.byte	'enableConditionList',0,11,32,68
	.word	143
	.byte	6,0,8
	.byte	'Dem_NvMGetNvMBlocKId',0,3,12,49,28
	.word	860
	.byte	1,1,5
	.byte	'id',0,12,49,68
	.word	143
	.byte	6,0,4
	.byte	'Dem_NvMStartClear',0,3,12,138,1,17,1,1,6,0,8
	.byte	'rba_DiagLib_ByteOrderUtils_SwapByteOrderS',0,3,13,36,21
	.word	860
	.byte	1,1,5
	.byte	'val',0,13,36,70
	.word	860
	.byte	7,6,0,0,8
	.byte	'rba_DiagLib_ByteOrderUtils_SwapByteOrderL',0,3,13,41,21
	.word	1371
	.byte	1,1,5
	.byte	'val',0,13,41,70
	.word	1371
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetStoreTestFailedToNextOC',0,3,14,55,22
	.word	143
	.byte	1,1,5
	.byte	'indx',0,14,55,78
	.word	860
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetEventIsStoredInPrimary',0,3,14,75,22
	.word	143
	.byte	1,1,5
	.byte	'indx',0,14,75,77
	.word	860
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetAgingAllowed',0,3,14,95,22
	.word	143
	.byte	1,1,5
	.byte	'indx',0,14,95,67
	.word	860
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetOperationCycleID',0,3,14,122,20
	.word	143
	.byte	1,1,5
	.byte	'indx',0,14,122,69
	.word	860
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetAgingCycleID',0,3,14,129,1,20
	.word	143
	.byte	1,1,5
	.byte	'indx',0,14,129,1,65
	.word	860
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetFailureCycleID',0,3,14,136,1,20
	.word	143
	.byte	1,1,5
	.byte	'indx',0,14,136,1,67
	.word	860
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetDebounceMethodIndex',0,3,14,149,1,20
	.word	143
	.byte	1,1,5
	.byte	'indx',0,14,149,1,72
	.word	860
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetDebounceParamSettingIndex',0,3,14,155,1,21
	.word	860
	.byte	1,1,5
	.byte	'indx',0,14,155,1,79
	.word	860
	.byte	7,6,0,0
.L309:
	.byte	8
	.byte	'Dem_EvtParam_GetBufferTimeSFB',0,3,14,162,1,20
	.word	143
	.byte	1,1
.L310:
	.byte	5
	.byte	'indx',0,14,162,1,66
	.word	860
.L312:
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetAgingThreshold',0,3,14,168,1,20
	.word	143
	.byte	1,1,5
	.byte	'indx',0,14,168,1,67
	.word	860
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetMaxNumberFreezeFrameRecords',0,3,14,194,1,20
	.word	143
	.byte	1,1,5
	.byte	'indx',0,14,194,1,80
	.word	860
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetEnableConditions',0,3,14,208,1,27
	.word	143
	.byte	1,1,5
	.byte	'indx',0,14,208,1,76
	.word	860
	.byte	6,0,2
	.byte	'short int',0,2,5,8
	.byte	'Dem_EvtGetDebounceLevel',0,3,15,193,1,19
	.word	4991
	.byte	1,1,5
	.byte	'EventId',0,15,193,1,60
	.word	860
	.byte	6,0,8
	.byte	'Dem_EvtGetLastReportedEvent',0,3,15,219,1,32
	.word	143
	.byte	1,1,5
	.byte	'EventId',0,15,219,1,77
	.word	860
	.byte	6,0,4
	.byte	'Dem_EvtIncreaseGlobalInitMonitoringCounter',0,3,15,227,3,17,1,1,6,0,4
	.byte	'Dem_EvtSetAnyInitMonitoring',0,3,15,233,3,17,1,1,5
	.byte	'reason',0,15,233,3,72
	.word	143
	.byte	7,6,0,0
.L254:
	.byte	8
	.byte	'Dem_EvtIsSuppressed',0,3,15,244,4,30
	.word	143
	.byte	1,1
.L256:
	.byte	5
	.byte	'EventId',0,15,244,4,67
	.word	860
.L258:
	.byte	7,6,0,0
.L367:
	.byte	8
	.byte	'Dem_EvtIsNextReportRelevantForMemories',0,3,15,251,4,30
	.word	143
	.byte	1,1
.L370:
	.byte	5
	.byte	'EventId',0,15,251,4,86
	.word	860
.L372:
	.byte	7,6,0,0
.L327:
	.byte	4
	.byte	'Dem_EvtSetPassedWasReported',0,3,15,203,5,17,1,1
.L328:
	.byte	5
	.byte	'EventId',0,15,203,5,62
	.word	860
.L330:
	.byte	5
	.byte	'setBit',0,15,203,5,89
	.word	143
.L332:
	.byte	7,6,0,0
.L301:
	.byte	2
	.byte	'unsigned long int',0,4,7
.L313:
	.byte	8
	.byte	'Dem_EvBuffClearSequentialFailures',0,3,16,72,24
	.word	5425
	.byte	1,1
.L314:
	.byte	5
	.byte	'EventId',0,16,72,75
	.word	860
.L316:
	.byte	5
	.byte	'nodeID',0,16,72,104
	.word	143
.L318:
	.byte	5
	.byte	'counterInit',0,16,72,118
	.word	143
.L320:
	.byte	6,0,9
	.word	160
	.byte	3
	.word	5544
	.byte	4
	.byte	'Dem_EnvInsertPadding',0,3,17,46,17,1,1,5
	.byte	'start',0,17,46,52
	.word	5549
	.byte	5
	.byte	'size',0,17,46,65
	.word	143
	.byte	7,6,0,0,3
	.word	160
	.byte	14,19,133,1,3,4,13
	.byte	'Status',0
	.word	860
	.byte	2,2,35,0,13
	.byte	'EventId',0
	.word	860
	.byte	2,2,35,2,0,12,19,131,1,9,4,13
	.byte	'Data',0
	.word	5618
	.byte	4,2,35,0,0,10,7
	.word	143
	.byte	11,6,0,14,19,144,1,9,20,13
	.byte	'Hdr',0
	.word	5658
	.byte	4,2,35,0,13
	.byte	'Data',0
	.word	5679
	.byte	7,2,35,4,13
	.byte	'FailureCounter',0
	.word	143
	.byte	1,2,35,11,13
	.byte	'FreezeFrameCounter',0
	.word	143
	.byte	1,2,35,12,13
	.byte	'AgingCounter',0
	.word	143
	.byte	1,2,35,13,13
	.byte	'OccurrenceCounter',0
	.word	143
	.byte	1,2,35,14,13
	.byte	'Trigger',0
	.word	143
	.byte	1,2,35,15,13
	.byte	'TimeId',0
	.word	1371
	.byte	4,2,35,16,0,3
	.word	5688
	.byte	14,18,13,9,16,13
	.byte	'eventId',0
	.word	860
	.byte	2,2,35,0,13
	.byte	'debug0',0
	.word	1371
	.byte	4,2,35,4,13
	.byte	'debug1',0
	.word	1371
	.byte	4,2,35,8,13
	.byte	'evMemLocation',0
	.word	5856
	.byte	4,2,35,12,0,9
	.word	5861
	.byte	3
	.word	5939
	.byte	4
	.byte	'Dem_EnvDACapture',0,3,17,51,17,1,1,5
	.byte	'dataElementId',0,17,51,40
	.word	143
	.byte	5
	.byte	'start',0,17,51,63
	.word	5613
	.byte	5
	.byte	'end',0,17,51,83
	.word	1903
	.byte	5
	.byte	'internalEnvData',0,17,51,115
	.word	5944
	.byte	7,6,6,0,0,3
	.word	1903
	.byte	4
	.byte	'Dem_EnvDACopy',0,3,17,86,17,1,1,5
	.byte	'dataElementId',0,17,86,37
	.word	143
	.byte	5
	.byte	'start',0,17,86,60
	.word	5613
	.byte	5
	.byte	'end',0,17,86,80
	.word	1903
	.byte	5
	.byte	'src',0,17,86,99
	.word	6050
	.byte	7,6,0,0,4
	.byte	'Dem_EnvDASkip',0,3,17,95,17,1,1,5
	.byte	'dataElementId',0,17,95,37
	.word	143
	.byte	5
	.byte	'start',0,17,95,60
	.word	5613
	.byte	5
	.byte	'end',0,17,95,80
	.word	1903
	.byte	5
	.byte	'src',0,17,95,99
	.word	6050
	.byte	6,0,8
	.byte	'Dem_EnvDARetrieve',0,3,17,105,30
	.word	143
	.byte	1,1,5
	.byte	'dataElementId',0,17,105,54
	.word	143
	.byte	5
	.byte	'start',0,17,106,11
	.word	5613
	.byte	5
	.byte	'end',0,17,107,16
	.word	1903
	.byte	5
	.byte	'src',0,17,108,17
	.word	6050
	.byte	5
	.byte	'internalEnvData',0,17,109,30
	.word	5944
	.byte	7,6,6,0,0,8
	.byte	'Dem_EnvDAGetSizeOf',0,3,17,149,1,18
	.word	143
	.byte	1,1,5
	.byte	'dataElementId',0,17,149,1,43
	.word	143
	.byte	6,0,3
	.word	143
	.byte	4
	.byte	'Dem_EnvSetTrigger',0,3,20,17,17,1,1,5
	.byte	'trigger',0,20,17,52
	.word	6397
	.byte	5
	.byte	'trigger2set',0,20,17,77
	.word	143
	.byte	6,0,8
	.byte	'Dem_EnvIsAnyTriggerSet',0,3,20,22,30
	.word	143
	.byte	1,1,5
	.byte	'trigger2test',0,20,22,69
	.word	143
	.byte	6,0,8
	.byte	'Dem_EnvIsTriggerSet',0,3,20,27,30
	.word	143
	.byte	1,1,5
	.byte	'trigger',0,20,27,66
	.word	143
	.byte	5
	.byte	'trigger2test',0,20,27,91
	.word	143
	.byte	7,6,0,0,8
	.byte	'Dem_GetSmallerTrigger',0,3,20,32,28
	.word	143
	.byte	1,1,5
	.byte	'trigger',0,20,32,66
	.word	143
	.byte	6,0,8
	.byte	'Dem_EnvEDRGetRecordNumber',0,3,21,29,18
	.word	143
	.byte	1,1,5
	.byte	'extDataRecId',0,21,29,51
	.word	143
	.byte	6,0,8
	.byte	'Dem_EnvEDRGetUpdate',0,3,21,34,20
	.word	143
	.byte	1,1,5
	.byte	'extDataRecId',0,21,34,47
	.word	143
	.byte	6,0,8
	.byte	'Dem_EnvEDRGetRecordTrigger',0,3,21,40,28
	.word	143
	.byte	1,1,5
	.byte	'extDataRecId',0,21,40,62
	.word	143
	.byte	6,0,4
	.byte	'Dem_EnvEDRCapture',0,3,21,45,17,1,1,5
	.byte	'extDataRecId',0,21,45,42
	.word	143
	.byte	5
	.byte	'start',0,21,45,64
	.word	5613
	.byte	5
	.byte	'end',0,21,45,84
	.word	1903
	.byte	5
	.byte	'internalEnvData',0,21,45,116
	.word	5944
	.byte	7,6,0,0,14,20,7,9,4,13
	.byte	'currentTrigger',0
	.word	143
	.byte	1,2,35,0,13
	.byte	'storedTrigger',0
	.word	143
	.byte	1,2,35,1,13
	.byte	'matchingTrigger',0
	.word	143
	.byte	1,2,35,2,0,3
	.word	6920
	.byte	4
	.byte	'Dem_EnvEDRCopyRaw',0,3,21,59,17,1,1,5
	.byte	'extDataRecId',0,21,59,42
	.word	143
	.byte	5
	.byte	'start',0,21,59,64
	.word	5613
	.byte	5
	.byte	'end',0,21,59,84
	.word	1903
	.byte	5
	.byte	'src',0,21,59,103
	.word	6050
	.byte	5
	.byte	'triggerParam',0,21,59,133,1
	.word	6998
	.byte	7,6,6,6,6,6,6,6,6,6,6,0,0,9
	.word	6050
	.byte	8
	.byte	'Dem_EnvEDRRetrieve',0,3,21,103,30
	.word	143
	.byte	1,1,5
	.byte	'extDataRecId',0,21,103,56
	.word	143
	.byte	5
	.byte	'start',0,21,103,78
	.word	5613
	.byte	5
	.byte	'end',0,21,103,98
	.word	1903
	.byte	5
	.byte	'src',0,21,103,123
	.word	7122
	.byte	5
	.byte	'internalEnvData',0,21,103,155,1
	.word	5944
	.byte	7,6,0,0,8
	.byte	'Dem_EnvEDRGetSize',0,3,21,119,19
	.word	860
	.byte	1,1,5
	.byte	'extDataRecId',0,21,119,44
	.word	143
	.byte	7,6,0,0,4
	.byte	'Dem_EnvEDRSkipSrc',0,3,21,133,1,17,1,1,5
	.byte	'extDataRecId',0,21,133,1,42
	.word	143
	.byte	5
	.byte	'src',0,21,133,1,70
	.word	6050
	.byte	7,6,0,0,4
	.byte	'Dem_EnvDIDCapture',0,3,22,26,17,1,1,5
	.byte	'didId',0,22,26,41
	.word	143
	.byte	5
	.byte	'start',0,22,26,56
	.word	5613
	.byte	5
	.byte	'end',0,22,26,76
	.word	1903
	.byte	5
	.byte	'internalEnvData',0,22,26,108
	.word	5944
	.byte	7,6,0,0,8
	.byte	'Dem_EnvDIDRetrieveRaw',0,3,22,41,30
	.word	143
	.byte	1,1,5
	.byte	'didId',0,22,41,58
	.word	143
	.byte	5
	.byte	'start',0,22,41,73
	.word	5613
	.byte	5
	.byte	'end',0,22,41,93
	.word	1903
	.byte	5
	.byte	'src',0,22,41,112
	.word	6050
	.byte	5
	.byte	'internalEnvData',0,22,41,144,1
	.word	5944
	.byte	7,6,0,0,8
	.byte	'Dem_EnvDIDRetrieve',0,3,22,59,30
	.word	143
	.byte	1,1,5
	.byte	'didId',0,22,59,55
	.word	143
	.byte	5
	.byte	'start',0,22,59,70
	.word	5613
	.byte	5
	.byte	'end',0,22,59,90
	.word	1903
	.byte	5
	.byte	'src',0,22,59,109
	.word	6050
	.byte	5
	.byte	'internalEnvData',0,22,59,141,1
	.word	5944
	.byte	7,6,0,0,8
	.byte	'Dem_EnvDIDRetrieveSpecificDid',0,3,22,77,30
	.word	143
	.byte	1,1,5
	.byte	'didId',0,22,77,67
	.word	143
	.byte	5
	.byte	'identifier',0,22,77,81
	.word	860
	.byte	5
	.byte	'start',0,22,77,101
	.word	5613
	.byte	5
	.byte	'end',0,22,77,121
	.word	1903
	.byte	5
	.byte	'src',0,22,77,140,1
	.word	6050
	.byte	5
	.byte	'internalEnvData',0,22,77,172,1
	.word	5944
	.byte	7,6,6,0,0,8
	.byte	'Dem_EnvDIDGetSize',0,3,22,108,19
	.word	860
	.byte	1,1,5
	.byte	'didId',0,22,108,43
	.word	143
	.byte	7,6,0,0
.L321:
	.byte	8
	.byte	'Dem_Dependencies_CheckEventIsCausal',0,3,23,160,2,30
	.word	143
	.byte	1,1
.L322:
	.byte	5
	.byte	'EventId',0,23,160,2,82
	.word	860
.L324:
	.byte	5
	.byte	'NodeId',0,23,160,2,111
	.word	143
.L326:
	.byte	6,0,8
	.byte	'Dem_DebHandleDebounceAction__processBits',0,3,24,101,30
	.word	143
	.byte	1,1,5
	.byte	'EventId',0,24,101,87
	.word	860
	.byte	5
	.byte	'debAction',0,24,101,120
	.word	5425
	.byte	6,0,15
	.word	860
	.byte	3
	.word	8043
	.byte	4
	.byte	'Dem_ClientResultType_setResult',0,3,25,27,17,1,1,5
	.byte	'result',0,25,27,79
	.word	8048
	.byte	5
	.byte	'request',0,25,27,109
	.word	860
	.byte	5
	.byte	'newResult',0,25,27,133,1
	.word	143
	.byte	6,0,15
	.word	860
	.byte	3
	.word	8143
	.byte	4
	.byte	'Dem_ClientRequestType_setRequest',0,3,25,65,17,1,1,5
	.byte	'request',0,25,65,82
	.word	8148
	.byte	5
	.byte	'newRequest',0,25,65,97
	.word	143
	.byte	6,0,3
	.word	1371
	.byte	4
	.byte	'Dem_ClientSelectionType_invalidateSelectionResult',0,3,25,151,1,17,1,1,5
	.byte	'selection',0,25,151,1,93
	.word	8230
	.byte	6,0,8
	.byte	'Dem_ClientSelectionType_getTypeOfSelection',0,3,25,168,1,18
	.word	143
	.byte	1,1,5
	.byte	'selection',0,25,168,1,86
	.word	1371
	.byte	6,0,4
	.byte	'Dem_ClientClearMachine_SetMachineActiveClient',0,3,26,53,17,1,1,5
	.byte	'ClientId',0,26,53,80
	.word	143
	.byte	6,0,4
	.byte	'Dem_ClientClearMachine_SetMachineState',0,3,26,68,17,1,1,5
	.byte	'state',0,26,68,62
	.word	143
	.byte	6,0,8
	.byte	'Dem_ClientClearMachine_isClearDtcGroupAllDtcsSelected',0,3,26,78,20
	.word	143
	.byte	1,1,5
	.byte	'ClientId',0,26,78,91
	.word	143
	.byte	7,6,6,6,6,0,0,8
	.byte	'Dem_EvMemIsMemIdValid',0,3,27,103,30
	.word	143
	.byte	1,1,5
	.byte	'MemId',0,27,103,65
	.word	5425
	.byte	6,0,8
	.byte	'Dem_EvMemIsEventMemLocIdValid',0,3,27,112,30
	.word	143
	.byte	1,1,5
	.byte	'LocId',0,27,112,73
	.word	5425
	.byte	6,0,9
	.word	5688
	.byte	3
	.word	8719
	.byte	8
	.byte	'Dem_EvMemGetEventMemStatusByPtr',0,3,27,134,1,25
	.word	5425
	.byte	1,1,5
	.byte	'EventMemory',0,27,134,1,89
	.word	8724
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemStatus',0,3,27,139,1,25
	.word	5425
	.byte	1,1,5
	.byte	'LocId',0,27,139,1,65
	.word	5425
	.byte	7,6,0,0,8
	.byte	'Dem_EvMemGetEventMemEventIdByPtr',0,3,27,152,1,28
	.word	860
	.byte	1,1,5
	.byte	'EventMemory',0,27,152,1,93
	.word	8724
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemTimeIdByPtr',0,3,27,170,1,19
	.word	1371
	.byte	1,1,5
	.byte	'EventMemory',0,27,170,1,83
	.word	8724
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemDtcStatusByPtr',0,3,27,188,1,18
	.word	143
	.byte	1,1,5
	.byte	'EventMemory',0,27,188,1,85
	.word	8724
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemFailureCounterByPtr',0,3,27,216,1,24
	.word	5425
	.byte	1,1,5
	.byte	'EventMemory',0,27,216,1,96
	.word	8724
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemOccurrenceCounterByPtr',0,3,27,233,1,25
	.word	5425
	.byte	1,1,5
	.byte	'EventMemory',0,27,233,1,100
	.word	8724
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemAgingCounterByPtr',0,3,27,133,2,25
	.word	5425
	.byte	1,1,5
	.byte	'EventMemory',0,27,133,2,95
	.word	8724
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemAgingCounter',0,3,27,144,2,25
	.word	5425
	.byte	1,1,5
	.byte	'LocId',0,27,144,2,71
	.word	5425
	.byte	7,6,0,0,4
	.byte	'Dem_EvMemSetEventMemAgingCounter',0,3,27,150,2,17,1,1,5
	.byte	'LocId',0,27,150,2,63
	.word	5425
	.byte	5
	.byte	'AgingCounter',0,27,150,2,83
	.word	5425
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr',0,3,27,161,2,25
	.word	5425
	.byte	1,1,5
	.byte	'EventMemory',0,27,161,2,103
	.word	8724
	.byte	6,0,2
	.byte	'char',0,1,6,8
	.byte	'Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr',0,3,27,213,2,18
	.word	9510
	.byte	1,1,5
	.byte	'EventMemory',0,27,213,2,92
	.word	8724
	.byte	6,0,8
	.byte	'Dem_EvMemGetMaxFdcSinceLastClearByPtr',0,3,27,224,2,18
	.word	9510
	.byte	1,1,5
	.byte	'EventMemory',0,27,224,2,88
	.word	8724
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemFreezeFrameCounterByPtr',0,3,27,238,3,25
	.word	5425
	.byte	1,1,5
	.byte	'EventMemory',0,27,238,3,101
	.word	8724
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemTriggerByPtr',0,3,27,141,4,28
	.word	143
	.byte	1,1,5
	.byte	'EventMemory',0,27,141,4,93
	.word	8724
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemDataByPtr',0,3,27,170,4,19
	.word	160
	.byte	1,1,5
	.byte	'EventMemory',0,27,170,4,75
	.word	5856
	.byte	6,0,8
	.byte	'Dem_EvMemIsStored',0,3,27,206,4,30
	.word	143
	.byte	1,1,5
	.byte	'Status',0,27,206,4,61
	.word	5425
	.byte	6,0,8
	.byte	'Dem_EvMemIsEmpty',0,3,27,211,4,30
	.word	143
	.byte	1,1,5
	.byte	'Status',0,27,211,4,60
	.word	5425
	.byte	6,0,8
	.byte	'Dem_EvMemSetToEmpty',0,3,27,226,4,25
	.word	5425
	.byte	1,1,6,0,8
	.byte	'Dem_EvMemGetShadowVisibility',0,3,27,242,4,30
	.word	143
	.byte	1,1,6,0,8
	.byte	'Dem_EvMemGetEventMemStartLocId',0,3,27,131,5,25
	.word	5425
	.byte	1,1,5
	.byte	'MemId',0,27,131,5,69
	.word	5425
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemEndLocId',0,3,27,143,5,25
	.word	5425
	.byte	1,1,5
	.byte	'MemId',0,27,143,5,67
	.word	5425
	.byte	6,0,3
	.word	5425
	.byte	4
	.byte	'Dem_EvMemEventMemoryIteratorNew',0,3,27,179,5,17,1,1,5
	.byte	'MemId',0,27,179,5,63
	.word	10170
	.byte	6,0,9
	.word	5425
	.byte	3
	.word	10232
	.byte	8
	.byte	'Dem_EvMemEventMemoryIteratorIsValid',0,3,27,184,5,30
	.word	143
	.byte	1,1,5
	.byte	'MemId',0,27,184,5,86
	.word	10237
	.byte	6,0,4
	.byte	'Dem_EvMemEventMemoryIteratorNext',0,3,27,189,5,17,1,1,5
	.byte	'MemId',0,27,189,5,64
	.word	10170
	.byte	6,0,8
	.byte	'Dem_EvMemIsEdgeTrigger',0,3,27,247,5,30
	.word	143
	.byte	1,1,5
	.byte	'StatusOld',0,27,247,5,66
	.word	5425
	.byte	5
	.byte	'StatusNew',0,27,247,5,90
	.word	5425
	.byte	5
	.byte	'Trigger',0,27,247,5,114
	.word	5425
	.byte	6,0,8
	.byte	'Dem_EvMemGetRamStsMask',0,3,27,154,7,25
	.word	5425
	.byte	1,1,5
	.byte	'EventId',0,27,154,7,64
	.word	860
	.byte	7,6,0,0,8
	.byte	'Dem_EvMemGetCurrentAgingCycleCounterInt',0,3,28,20,25
	.word	5425
	.byte	1,1,5
	.byte	'EventId',0,28,20,81
	.word	860
	.byte	6,0,8
	.byte	'Dem_EvMemIsAged',0,3,28,61,30
	.word	143
	.byte	1,1,5
	.byte	'EventId',0,28,61,62
	.word	860
	.byte	5
	.byte	'LocId',0,28,61,84
	.word	5425
	.byte	5
	.byte	'StatusNew',0,28,61,104
	.word	5425
	.byte	6,0,8
	.byte	'Dem_EvMemGetMemIdForDTCOrigin',0,3,29,150,1,25
	.word	5425
	.byte	1,1,5
	.byte	'DTCOrigin',0,29,150,1,73
	.word	143
	.byte	6,0,8
	.byte	'Dem_EvMemGetMemIdForEvent',0,3,29,222,1,25
	.word	5425
	.byte	1,1,5
	.byte	'EventId',0,29,222,1,67
	.word	860
	.byte	7,6,0,0,8
	.byte	'Dem_EnvGetIndexFromFFRecNum',0,3,30,21,18
	.word	143
	.byte	1,1,5
	.byte	'EventId',0,30,21,62
	.word	860
	.byte	5
	.byte	'RecNumber',0,30,21,77
	.word	143
	.byte	6,0,8
	.byte	'Dem_EvtGetIsoByte',0,3,31,42,34
	.word	143
	.byte	1,1,5
	.byte	'EventId',0,31,42,69
	.word	860
	.byte	6,0
.L429:
	.byte	8
	.byte	'Dem_EvBuffGetEventPriority',0,3,32,61,19
	.word	1371
	.byte	1,1
.L431:
	.byte	5
	.byte	'EventId',0,32,61,63
	.word	860
.L433:
	.byte	5
	.byte	'eventType',0,32,61,92
	.word	143
.L435:
	.byte	6,0
.L436:
	.byte	8
	.byte	'Dem_EvBuffGetLocationPriority',0,3,32,74,19
	.word	1371
	.byte	1,1
.L438:
	.byte	5
	.byte	'bufferElement',0,32,74,73
	.word	2644
.L440:
	.byte	7,6,0,0
.L378:
	.byte	8
	.byte	'Dem_EvBuffIsPrestoreLocationAvailable',0,3,32,192,1,30
	.word	143
	.byte	1,1
.L379:
	.byte	5
	.byte	'locationIndex',0,32,192,1,76
	.word	1371
.L381:
	.byte	5
	.byte	'newEventId',0,32,192,1,107
	.word	860
.L383:
	.byte	6,0,16
	.word	165
	.byte	17
	.word	195
	.byte	17
	.word	210
	.byte	6,0,16
	.word	233
	.byte	17
	.word	265
	.byte	17
	.word	280
	.byte	6,0,16
	.word	303
	.byte	17
	.word	339
	.byte	17
	.word	354
	.byte	17
	.word	375
	.byte	7,18
	.word	165
	.byte	17
	.word	195
	.byte	17
	.word	210
	.byte	19
	.word	231
	.byte	0,6,18
	.word	233
	.byte	17
	.word	265
	.byte	17
	.word	280
	.byte	19
	.word	301
	.byte	0,6,0,0,16
	.word	404
	.byte	17
	.word	444
	.byte	17
	.word	458
	.byte	6,0,16
	.word	481
	.byte	17
	.word	517
	.byte	17
	.word	531
	.byte	7,18
	.word	404
	.byte	17
	.word	444
	.byte	17
	.word	458
	.byte	19
	.word	479
	.byte	0,6,0,0,16
	.word	556
	.byte	17
	.word	591
	.byte	17
	.word	605
	.byte	17
	.word	626
	.byte	6,0,16
	.word	651
	.byte	17
	.word	684
	.byte	17
	.word	698
	.byte	17
	.word	719
	.byte	6,0,16
	.word	744
	.byte	17
	.word	781
	.byte	17
	.word	795
	.byte	17
	.word	816
	.byte	17
	.word	839
	.byte	7,18
	.word	651
	.byte	17
	.word	684
	.byte	17
	.word	698
	.byte	17
	.word	719
	.byte	19
	.word	742
	.byte	0,6,0,0,16
	.word	887
	.byte	17
	.word	918
	.byte	17
	.word	933
	.byte	6,0,16
	.word	956
	.byte	17
	.word	989
	.byte	17
	.word	1004
	.byte	6,0,16
	.word	1027
	.byte	17
	.word	1068
	.byte	17
	.word	1082
	.byte	6,0,16
	.word	1105
	.byte	17
	.word	1142
	.byte	17
	.word	1156
	.byte	7,18
	.word	1027
	.byte	17
	.word	1068
	.byte	17
	.word	1082
	.byte	19
	.word	1103
	.byte	0,6,0,0,16
	.word	1181
	.byte	17
	.word	1217
	.byte	17
	.word	1231
	.byte	17
	.word	1252
	.byte	6,0,16
	.word	1277
	.byte	17
	.word	1311
	.byte	17
	.word	1325
	.byte	17
	.word	1346
	.byte	6,0,16
	.word	1392
	.byte	17
	.word	1423
	.byte	17
	.word	1438
	.byte	6,0,16
	.word	1461
	.byte	17
	.word	1494
	.byte	17
	.word	1509
	.byte	6,0,16
	.word	1532
	.byte	17
	.word	1573
	.byte	17
	.word	1587
	.byte	6,0,16
	.word	1610
	.byte	17
	.word	1647
	.byte	17
	.word	1661
	.byte	7,18
	.word	1532
	.byte	17
	.word	1573
	.byte	17
	.word	1587
	.byte	19
	.word	1608
	.byte	0,6,0,0,16
	.word	1686
	.byte	17
	.word	1720
	.byte	17
	.word	1734
	.byte	17
	.word	1755
	.byte	6,0,20
	.byte	'Det_ReportError',0,33,112,16
	.word	143
	.byte	1,1,1,1,5
	.byte	'ModuleId',0,33,112,39
	.word	860
	.byte	5
	.byte	'InstanceId',0,33,112,55
	.word	143
	.byte	5
	.byte	'ApiId',0,33,112,73
	.word	143
	.byte	5
	.byte	'ErrorId',0,33,112,86
	.word	143
	.byte	0,21
	.byte	'void',0,3
	.word	11739
	.byte	9
	.word	11739
	.byte	3
	.word	11750
	.byte	20
	.byte	'rba_BswSrv_MemCopy',0,4,83,14
	.word	11745
	.byte	1,1,1,1,5
	.byte	'xDest_pv',0,4,83,39
	.word	11745
	.byte	5
	.byte	'xSrc_pcv',0,4,83,61
	.word	11755
	.byte	5
	.byte	'numBytes_u32',0,4,83,78
	.word	1371
	.byte	0,16
	.word	1780
	.byte	17
	.word	1818
	.byte	6,0,16
	.word	1838
	.byte	17
	.word	1877
	.byte	6,0,16
	.word	1908
	.byte	17
	.word	1943
	.byte	17
	.word	1959
	.byte	17
	.word	1975
	.byte	6,0,16
	.word	2005
	.byte	17
	.word	2040
	.byte	17
	.word	2057
	.byte	17
	.word	2078
	.byte	6,0,16
	.word	2101
	.byte	17
	.word	2131
	.byte	6,0,16
	.word	2151
	.byte	17
	.word	2182
	.byte	6,0,16
	.word	2202
	.byte	17
	.word	2232
	.byte	6,0,16
	.word	2250
	.byte	17
	.word	2283
	.byte	6,0,16
	.word	2296
	.byte	17
	.word	2325
	.byte	6,0,16
	.word	2339
	.byte	17
	.word	2372
	.byte	6,0,16
	.word	2386
	.byte	17
	.word	2418
	.byte	6,0,16
	.word	2435
	.byte	17
	.word	2469
	.byte	6,0,16
	.word	2649
	.byte	17
	.word	2681
	.byte	6,0,16
	.word	2698
	.byte	17
	.word	2724
	.byte	17
	.word	2739
	.byte	6,0,16
	.word	2762
	.byte	17
	.word	2790
	.byte	17
	.word	2805
	.byte	6,0,16
	.word	2828
	.byte	17
	.word	2860
	.byte	17
	.word	2875
	.byte	17
	.word	2896
	.byte	7,18
	.word	2698
	.byte	17
	.word	2724
	.byte	17
	.word	2739
	.byte	19
	.word	2760
	.byte	0,6,18
	.word	2762
	.byte	17
	.word	2790
	.byte	17
	.word	2805
	.byte	19
	.word	2826
	.byte	0,6,0,0,16
	.word	2935
	.byte	17
	.word	2967
	.byte	17
	.word	2982
	.byte	6,0,16
	.word	3005
	.byte	17
	.word	3045
	.byte	7,18
	.word	481
	.byte	17
	.word	517
	.byte	17
	.word	531
	.byte	22
	.word	552
	.byte	18
	.word	404
	.byte	17
	.word	444
	.byte	17
	.word	458
	.byte	19
	.word	479
	.byte	0,19
	.word	553
	.byte	0,0,6,0,0,16
	.word	3062
	.byte	17
	.word	3106
	.byte	7,18
	.word	481
	.byte	17
	.word	517
	.byte	17
	.word	531
	.byte	22
	.word	552
	.byte	18
	.word	404
	.byte	17
	.word	444
	.byte	17
	.word	458
	.byte	19
	.word	479
	.byte	0,19
	.word	553
	.byte	0,0,6,0,0,16
	.word	3124
	.byte	17
	.word	3170
	.byte	7,18
	.word	481
	.byte	17
	.word	517
	.byte	17
	.word	531
	.byte	22
	.word	552
	.byte	18
	.word	404
	.byte	17
	.word	444
	.byte	17
	.word	458
	.byte	19
	.word	479
	.byte	0,19
	.word	553
	.byte	0,0,6,0,0,16
	.word	3188
	.byte	17
	.word	3229
	.byte	7,18
	.word	481
	.byte	17
	.word	517
	.byte	17
	.word	531
	.byte	22
	.word	552
	.byte	18
	.word	404
	.byte	17
	.word	444
	.byte	17
	.word	458
	.byte	19
	.word	479
	.byte	0,19
	.word	553
	.byte	0,0,6,0,0,16
	.word	3247
	.byte	17
	.word	3303
	.byte	7,18
	.word	481
	.byte	17
	.word	517
	.byte	17
	.word	531
	.byte	22
	.word	552
	.byte	18
	.word	404
	.byte	17
	.word	444
	.byte	17
	.word	458
	.byte	19
	.word	479
	.byte	0,19
	.word	553
	.byte	0,0,6,0,0,16
	.word	3321
	.byte	17
	.word	3359
	.byte	17
	.word	3373
	.byte	7,18
	.word	303
	.byte	17
	.word	339
	.byte	17
	.word	354
	.byte	17
	.word	375
	.byte	22
	.word	399
	.byte	18
	.word	165
	.byte	17
	.word	195
	.byte	17
	.word	210
	.byte	19
	.word	231
	.byte	0,19
	.word	400
	.byte	18
	.word	233
	.byte	17
	.word	265
	.byte	17
	.word	280
	.byte	19
	.word	301
	.byte	0,19
	.word	401
	.byte	0,0,6,0,0,16
	.word	3397
	.byte	17
	.word	3438
	.byte	17
	.word	3452
	.byte	7,18
	.word	303
	.byte	17
	.word	339
	.byte	17
	.word	354
	.byte	17
	.word	375
	.byte	22
	.word	399
	.byte	18
	.word	165
	.byte	17
	.word	195
	.byte	17
	.word	210
	.byte	19
	.word	231
	.byte	0,19
	.word	400
	.byte	18
	.word	233
	.byte	17
	.word	265
	.byte	17
	.word	280
	.byte	19
	.word	301
	.byte	0,19
	.word	401
	.byte	0,0,6,0,0,16
	.word	3476
	.byte	17
	.word	3517
	.byte	17
	.word	3531
	.byte	7,18
	.word	303
	.byte	17
	.word	339
	.byte	17
	.word	354
	.byte	17
	.word	375
	.byte	22
	.word	399
	.byte	18
	.word	165
	.byte	17
	.word	195
	.byte	17
	.word	210
	.byte	19
	.word	231
	.byte	0,19
	.word	400
	.byte	18
	.word	233
	.byte	17
	.word	265
	.byte	17
	.word	280
	.byte	19
	.word	301
	.byte	0,19
	.word	401
	.byte	0,0,6,0,0,16
	.word	3555
	.byte	17
	.word	3598
	.byte	17
	.word	3612
	.byte	7,18
	.word	303
	.byte	17
	.word	339
	.byte	17
	.word	354
	.byte	17
	.word	375
	.byte	22
	.word	399
	.byte	18
	.word	165
	.byte	17
	.word	195
	.byte	17
	.word	210
	.byte	19
	.word	231
	.byte	0,19
	.word	400
	.byte	18
	.word	233
	.byte	17
	.word	265
	.byte	17
	.word	280
	.byte	19
	.word	301
	.byte	0,19
	.word	401
	.byte	0,0,6,0,0,16
	.word	3636
	.byte	17
	.word	3679
	.byte	17
	.word	3693
	.byte	7,18
	.word	303
	.byte	17
	.word	339
	.byte	17
	.word	354
	.byte	17
	.word	375
	.byte	22
	.word	399
	.byte	18
	.word	165
	.byte	17
	.word	195
	.byte	17
	.word	210
	.byte	19
	.word	231
	.byte	0,19
	.word	400
	.byte	18
	.word	233
	.byte	17
	.word	265
	.byte	17
	.word	280
	.byte	19
	.word	301
	.byte	0,19
	.word	401
	.byte	0,0,6,0,0,16
	.word	3717
	.byte	17
	.word	3755
	.byte	17
	.word	3769
	.byte	7,18
	.word	303
	.byte	17
	.word	339
	.byte	17
	.word	354
	.byte	17
	.word	375
	.byte	22
	.word	399
	.byte	18
	.word	165
	.byte	17
	.word	195
	.byte	17
	.word	210
	.byte	19
	.word	231
	.byte	0,19
	.word	400
	.byte	18
	.word	233
	.byte	17
	.word	265
	.byte	17
	.word	280
	.byte	19
	.word	301
	.byte	0,19
	.word	401
	.byte	0,0,6,0,0,16
	.word	3793
	.byte	17
	.word	3833
	.byte	17
	.word	3847
	.byte	7,18
	.word	303
	.byte	17
	.word	339
	.byte	17
	.word	354
	.byte	17
	.word	375
	.byte	22
	.word	399
	.byte	18
	.word	165
	.byte	17
	.word	195
	.byte	17
	.word	210
	.byte	19
	.word	231
	.byte	0,19
	.word	400
	.byte	18
	.word	233
	.byte	17
	.word	265
	.byte	17
	.word	280
	.byte	19
	.word	301
	.byte	0,19
	.word	401
	.byte	0,0,6,0,0,16
	.word	3871
	.byte	17
	.word	3924
	.byte	17
	.word	3938
	.byte	7,18
	.word	303
	.byte	17
	.word	339
	.byte	17
	.word	354
	.byte	17
	.word	375
	.byte	22
	.word	399
	.byte	18
	.word	165
	.byte	17
	.word	195
	.byte	17
	.word	210
	.byte	19
	.word	231
	.byte	0,19
	.word	400
	.byte	18
	.word	233
	.byte	17
	.word	265
	.byte	17
	.word	280
	.byte	19
	.word	301
	.byte	0,19
	.word	401
	.byte	0,0,6,0,0,16
	.word	3962
	.byte	17
	.word	3997
	.byte	6,0,16
	.word	4027
	.byte	17
	.word	4059
	.byte	6,0,16
	.word	4072
	.byte	6,0,16
	.word	4100
	.byte	17
	.word	4153
	.byte	7,18
	.word	1838
	.byte	17
	.word	1877
	.byte	19
	.word	1896
	.byte	0,6,0,0,16
	.word	4169
	.byte	17
	.word	4222
	.byte	7,18
	.word	1780
	.byte	17
	.word	1818
	.byte	19
	.word	1836
	.byte	0,6,0,0,16
	.word	4238
	.byte	17
	.word	4289
	.byte	6,0,16
	.word	4304
	.byte	17
	.word	4354
	.byte	7,18
	.word	1105
	.byte	17
	.word	1142
	.byte	17
	.word	1156
	.byte	22
	.word	1177
	.byte	18
	.word	1027
	.byte	17
	.word	1068
	.byte	17
	.word	1082
	.byte	19
	.word	1103
	.byte	0,19
	.word	1178
	.byte	0,0,6,0,0,16
	.word	4371
	.byte	17
	.word	4411
	.byte	7,18
	.word	1105
	.byte	17
	.word	1142
	.byte	17
	.word	1156
	.byte	22
	.word	1177
	.byte	18
	.word	1027
	.byte	17
	.word	1068
	.byte	17
	.word	1082
	.byte	19
	.word	1103
	.byte	0,19
	.word	1178
	.byte	0,0,6,0,0,16
	.word	4428
	.byte	17
	.word	4472
	.byte	6,0,16
	.word	4487
	.byte	17
	.word	4528
	.byte	6,0,16
	.word	4544
	.byte	17
	.word	4587
	.byte	6,0,16
	.word	4603
	.byte	17
	.word	4651
	.byte	6,0,16
	.word	4667
	.byte	17
	.word	4721
	.byte	7,18
	.word	1181
	.byte	17
	.word	1217
	.byte	17
	.word	1231
	.byte	17
	.word	1252
	.byte	19
	.word	1275
	.byte	0,6,0,0,16
	.word	4739
	.byte	17
	.word	4781
	.byte	6,0,16
	.word	4797
	.byte	17
	.word	4840
	.byte	6,0,16
	.word	4856
	.byte	17
	.word	4912
	.byte	7,18
	.word	1181
	.byte	17
	.word	1217
	.byte	17
	.word	1231
	.byte	17
	.word	1252
	.byte	19
	.word	1275
	.byte	0,6,0,0,16
	.word	4930
	.byte	17
	.word	4975
	.byte	6,0,16
	.word	5004
	.byte	17
	.word	5040
	.byte	6,0,16
	.word	5059
	.byte	17
	.word	5099
	.byte	6,0,23
	.byte	'Dem_EvtSetCausal',0,15,155,2,6,1,1,1,1,5
	.byte	'EventId',0,15,155,2,40
	.word	860
	.byte	5
	.byte	'causal',0,15,155,2,67
	.word	143
	.byte	0,16
	.word	5118
	.byte	6,0,16
	.word	5171
	.byte	17
	.word	5207
	.byte	7,18
	.word	1392
	.byte	17
	.word	1423
	.byte	17
	.word	1438
	.byte	19
	.word	1459
	.byte	0,6,0,0,16
	.word	5227
	.byte	17
	.word	5259
	.byte	7,18
	.word	481
	.byte	17
	.word	517
	.byte	17
	.word	531
	.byte	22
	.word	552
	.byte	18
	.word	404
	.byte	17
	.word	444
	.byte	17
	.word	458
	.byte	19
	.word	479
	.byte	0,19
	.word	553
	.byte	0,0,6,0,0,16
	.word	5280
	.byte	17
	.word	5331
	.byte	7,18
	.word	481
	.byte	17
	.word	517
	.byte	17
	.word	531
	.byte	22
	.word	552
	.byte	18
	.word	404
	.byte	17
	.word	444
	.byte	17
	.word	458
	.byte	19
	.word	479
	.byte	0,19
	.word	553
	.byte	0,0,6,0,0,16
	.word	5352
	.byte	17
	.word	5388
	.byte	17
	.word	5405
	.byte	7,18
	.word	2828
	.byte	17
	.word	2860
	.byte	17
	.word	2875
	.byte	17
	.word	2896
	.byte	22
	.word	2920
	.byte	18
	.word	2698
	.byte	17
	.word	2724
	.byte	17
	.word	2739
	.byte	19
	.word	2760
	.byte	0,19
	.word	2921
	.byte	18
	.word	2762
	.byte	17
	.word	2790
	.byte	17
	.word	2805
	.byte	19
	.word	2826
	.byte	0,19
	.word	2922
	.byte	0,0,6,0,0
.L349:
	.byte	9
	.word	1371
.L351:
	.byte	9
	.word	1371
.L353:
	.byte	9
	.word	1371
.L361:
	.byte	9
	.word	1371
.L363:
	.byte	9
	.word	1371
.L365:
	.byte	9
	.word	1371
.L397:
	.byte	3
	.word	2548
	.byte	16
	.word	5446
	.byte	17
	.word	5491
	.byte	17
	.word	5507
	.byte	17
	.word	5522
	.byte	6,0,16
	.word	5554
	.byte	17
	.word	5582
	.byte	17
	.word	5596
	.byte	7,18
	.word	2005
	.byte	17
	.word	2040
	.byte	17
	.word	2057
	.byte	17
	.word	2078
	.byte	19
	.word	2099
	.byte	0,6,0,0,16
	.word	5949
	.byte	17
	.word	5973
	.byte	17
	.word	5995
	.byte	17
	.word	6009
	.byte	17
	.word	6021
	.byte	7,18
	.word	5554
	.byte	17
	.word	5582
	.byte	17
	.word	5596
	.byte	22
	.word	5609
	.byte	18
	.word	2005
	.byte	17
	.word	2040
	.byte	17
	.word	2057
	.byte	17
	.word	2078
	.byte	19
	.word	2099
	.byte	0,19
	.word	5610
	.byte	0,0,6,18
	.word	5554
	.byte	17
	.word	5582
	.byte	17
	.word	5596
	.byte	22
	.word	5609
	.byte	18
	.word	2005
	.byte	17
	.word	2040
	.byte	17
	.word	2057
	.byte	17
	.word	2078
	.byte	19
	.word	2099
	.byte	0,19
	.word	5610
	.byte	0,0,6,0,0,16
	.word	6055
	.byte	17
	.word	6076
	.byte	17
	.word	6098
	.byte	17
	.word	6112
	.byte	17
	.word	6124
	.byte	7,18
	.word	1908
	.byte	17
	.word	1943
	.byte	17
	.word	1959
	.byte	17
	.word	1975
	.byte	19
	.word	1996
	.byte	0,6,0,0,16
	.word	6140
	.byte	17
	.word	6161
	.byte	17
	.word	6183
	.byte	17
	.word	6197
	.byte	17
	.word	6209
	.byte	6,0,16
	.word	6223
	.byte	17
	.word	6252
	.byte	17
	.word	6274
	.byte	17
	.word	6288
	.byte	17
	.word	6300
	.byte	17
	.word	6312
	.byte	7,18
	.word	5554
	.byte	17
	.word	5582
	.byte	17
	.word	5596
	.byte	22
	.word	5609
	.byte	18
	.word	2005
	.byte	17
	.word	2040
	.byte	17
	.word	2057
	.byte	17
	.word	2078
	.byte	19
	.word	2099
	.byte	0,19
	.word	5610
	.byte	0,0,6,18
	.word	1908
	.byte	17
	.word	1943
	.byte	17
	.word	1959
	.byte	17
	.word	1975
	.byte	19
	.word	1996
	.byte	0,6,0,0,16
	.word	6341
	.byte	17
	.word	6372
	.byte	6,0,16
	.word	6402
	.byte	17
	.word	6427
	.byte	17
	.word	6443
	.byte	6,0,16
	.word	6465
	.byte	17
	.word	6499
	.byte	6,0,16
	.word	6522
	.byte	17
	.word	6553
	.byte	17
	.word	6569
	.byte	7,18
	.word	6465
	.byte	17
	.word	6499
	.byte	19
	.word	6520
	.byte	0,6,0,0,16
	.word	6594
	.byte	17
	.word	6627
	.byte	6,0,16
	.word	6645
	.byte	17
	.word	6682
	.byte	6,0,16
	.word	6705
	.byte	17
	.word	6736
	.byte	6,0,16
	.word	6759
	.byte	17
	.word	6797
	.byte	6,0,16
	.word	6820
	.byte	17
	.word	6845
	.byte	17
	.word	6866
	.byte	17
	.word	6880
	.byte	17
	.word	6892
	.byte	7,18
	.word	5949
	.byte	17
	.word	5973
	.byte	17
	.word	5995
	.byte	17
	.word	6009
	.byte	17
	.word	6021
	.byte	22
	.word	6045
	.byte	18
	.word	5554
	.byte	17
	.word	5582
	.byte	17
	.word	5596
	.byte	22
	.word	5609
	.byte	18
	.word	2005
	.byte	17
	.word	2040
	.byte	17
	.word	2057
	.byte	17
	.word	2078
	.byte	19
	.word	2099
	.byte	0,19
	.word	5610
	.byte	0,0,19
	.word	6046
	.byte	18
	.word	5554
	.byte	17
	.word	5582
	.byte	17
	.word	5596
	.byte	22
	.word	5609
	.byte	18
	.word	2005
	.byte	17
	.word	2040
	.byte	17
	.word	2057
	.byte	17
	.word	2078
	.byte	19
	.word	2099
	.byte	0,19
	.word	5610
	.byte	0,0,19
	.word	6047
	.byte	0,0,6,0,0,16
	.word	7003
	.byte	17
	.word	7028
	.byte	17
	.word	7049
	.byte	17
	.word	7063
	.byte	17
	.word	7075
	.byte	17
	.word	7087
	.byte	7,18
	.word	6522
	.byte	17
	.word	6553
	.byte	17
	.word	6569
	.byte	22
	.word	6590
	.byte	18
	.word	6465
	.byte	17
	.word	6499
	.byte	19
	.word	6520
	.byte	0,19
	.word	6591
	.byte	0,0,6,18
	.word	6522
	.byte	17
	.word	6553
	.byte	17
	.word	6569
	.byte	22
	.word	6590
	.byte	18
	.word	6465
	.byte	17
	.word	6499
	.byte	19
	.word	6520
	.byte	0,19
	.word	6591
	.byte	0,0,6,18
	.word	6522
	.byte	17
	.word	6553
	.byte	17
	.word	6569
	.byte	22
	.word	6590
	.byte	18
	.word	6465
	.byte	17
	.word	6499
	.byte	19
	.word	6520
	.byte	0,19
	.word	6591
	.byte	0,0,6,18
	.word	6522
	.byte	17
	.word	6553
	.byte	17
	.word	6569
	.byte	22
	.word	6590
	.byte	18
	.word	6465
	.byte	17
	.word	6499
	.byte	19
	.word	6520
	.byte	0,19
	.word	6591
	.byte	0,0,6,18
	.word	6759
	.byte	17
	.word	6797
	.byte	19
	.word	6818
	.byte	0,6,18
	.word	6705
	.byte	17
	.word	6736
	.byte	19
	.word	6757
	.byte	0,6,18
	.word	6402
	.byte	17
	.word	6427
	.byte	17
	.word	6443
	.byte	19
	.word	6463
	.byte	0,6,18
	.word	6594
	.byte	17
	.word	6627
	.byte	19
	.word	6643
	.byte	0,6,18
	.word	6140
	.byte	17
	.word	6161
	.byte	17
	.word	6183
	.byte	17
	.word	6197
	.byte	17
	.word	6209
	.byte	19
	.word	6221
	.byte	0,6,18
	.word	6055
	.byte	17
	.word	6076
	.byte	17
	.word	6098
	.byte	17
	.word	6112
	.byte	17
	.word	6124
	.byte	22
	.word	6136
	.byte	18
	.word	1908
	.byte	17
	.word	1943
	.byte	17
	.word	1959
	.byte	17
	.word	1975
	.byte	19
	.word	1996
	.byte	0,19
	.word	6137
	.byte	0,0,6,0,0,16
	.word	7127
	.byte	17
	.word	7157
	.byte	17
	.word	7178
	.byte	17
	.word	7192
	.byte	17
	.word	7204
	.byte	17
	.word	7216
	.byte	7,18
	.word	6223
	.byte	17
	.word	6252
	.byte	17
	.word	6274
	.byte	17
	.word	6288
	.byte	17
	.word	6300
	.byte	17
	.word	6312
	.byte	22
	.word	6336
	.byte	18
	.word	5554
	.byte	17
	.word	5582
	.byte	17
	.word	5596
	.byte	22
	.word	5609
	.byte	18
	.word	2005
	.byte	17
	.word	2040
	.byte	17
	.word	2057
	.byte	17
	.word	2078
	.byte	19
	.word	2099
	.byte	0,19
	.word	5610
	.byte	0,0,19
	.word	6337
	.byte	18
	.word	1908
	.byte	17
	.word	1943
	.byte	17
	.word	1959
	.byte	17
	.word	1975
	.byte	19
	.word	1996
	.byte	0,19
	.word	6338
	.byte	0,0,6,0,0,16
	.word	7245
	.byte	17
	.word	7274
	.byte	7,18
	.word	6341
	.byte	17
	.word	6372
	.byte	19
	.word	6395
	.byte	0,6,0,0,16
	.word	7299
	.byte	17
	.word	7325
	.byte	17
	.word	7347
	.byte	7,18
	.word	7245
	.byte	17
	.word	7274
	.byte	22
	.word	7295
	.byte	18
	.word	6341
	.byte	17
	.word	6372
	.byte	19
	.word	6395
	.byte	0,19
	.word	7296
	.byte	0,0,6,0,0,16
	.word	7364
	.byte	17
	.word	7389
	.byte	17
	.word	7403
	.byte	17
	.word	7417
	.byte	17
	.word	7429
	.byte	7,18
	.word	5949
	.byte	17
	.word	5973
	.byte	17
	.word	5995
	.byte	17
	.word	6009
	.byte	17
	.word	6021
	.byte	22
	.word	6045
	.byte	18
	.word	5554
	.byte	17
	.word	5582
	.byte	17
	.word	5596
	.byte	22
	.word	5609
	.byte	18
	.word	2005
	.byte	17
	.word	2040
	.byte	17
	.word	2057
	.byte	17
	.word	2078
	.byte	19
	.word	2099
	.byte	0,19
	.word	5610
	.byte	0,0,19
	.word	6046
	.byte	18
	.word	5554
	.byte	17
	.word	5582
	.byte	17
	.word	5596
	.byte	22
	.word	5609
	.byte	18
	.word	2005
	.byte	17
	.word	2040
	.byte	17
	.word	2057
	.byte	17
	.word	2078
	.byte	19
	.word	2099
	.byte	0,19
	.word	5610
	.byte	0,0,19
	.word	6047
	.byte	0,0,6,0,0,16
	.word	7457
	.byte	17
	.word	7490
	.byte	17
	.word	7504
	.byte	17
	.word	7518
	.byte	17
	.word	7530
	.byte	17
	.word	7542
	.byte	7,18
	.word	6223
	.byte	17
	.word	6252
	.byte	17
	.word	6274
	.byte	17
	.word	6288
	.byte	17
	.word	6300
	.byte	17
	.word	6312
	.byte	22
	.word	6336
	.byte	18
	.word	5554
	.byte	17
	.word	5582
	.byte	17
	.word	5596
	.byte	22
	.word	5609
	.byte	18
	.word	2005
	.byte	17
	.word	2040
	.byte	17
	.word	2057
	.byte	17
	.word	2078
	.byte	19
	.word	2099
	.byte	0,19
	.word	5610
	.byte	0,0,19
	.word	6337
	.byte	18
	.word	1908
	.byte	17
	.word	1943
	.byte	17
	.word	1959
	.byte	17
	.word	1975
	.byte	19
	.word	1996
	.byte	0,19
	.word	6338
	.byte	0,0,6,0,0,16
	.word	7571
	.byte	17
	.word	7601
	.byte	17
	.word	7615
	.byte	17
	.word	7629
	.byte	17
	.word	7641
	.byte	17
	.word	7653
	.byte	7,18
	.word	7457
	.byte	17
	.word	7490
	.byte	17
	.word	7504
	.byte	17
	.word	7518
	.byte	17
	.word	7530
	.byte	17
	.word	7542
	.byte	22
	.word	7567
	.byte	18
	.word	6223
	.byte	17
	.word	6252
	.byte	17
	.word	6274
	.byte	17
	.word	6288
	.byte	17
	.word	6300
	.byte	17
	.word	6312
	.byte	22
	.word	6336
	.byte	18
	.word	5554
	.byte	17
	.word	5582
	.byte	17
	.word	5596
	.byte	22
	.word	5609
	.byte	18
	.word	2005
	.byte	17
	.word	2040
	.byte	17
	.word	2057
	.byte	17
	.word	2078
	.byte	19
	.word	2099
	.byte	0,19
	.word	5610
	.byte	0,0,19
	.word	6337
	.byte	18
	.word	1908
	.byte	17
	.word	1943
	.byte	17
	.word	1959
	.byte	17
	.word	1975
	.byte	19
	.word	1996
	.byte	0,19
	.word	6338
	.byte	0,0,19
	.word	7568
	.byte	0,0,6,0,0,16
	.word	7682
	.byte	17
	.word	7723
	.byte	17
	.word	7737
	.byte	17
	.word	7756
	.byte	17
	.word	7770
	.byte	17
	.word	7782
	.byte	17
	.word	7795
	.byte	7,18
	.word	6341
	.byte	17
	.word	6372
	.byte	19
	.word	6395
	.byte	0,6,18
	.word	6223
	.byte	17
	.word	6252
	.byte	17
	.word	6274
	.byte	17
	.word	6288
	.byte	17
	.word	6300
	.byte	17
	.word	6312
	.byte	22
	.word	6336
	.byte	18
	.word	5554
	.byte	17
	.word	5582
	.byte	17
	.word	5596
	.byte	22
	.word	5609
	.byte	18
	.word	2005
	.byte	17
	.word	2040
	.byte	17
	.word	2057
	.byte	17
	.word	2078
	.byte	19
	.word	2099
	.byte	0,19
	.word	5610
	.byte	0,0,19
	.word	6337
	.byte	18
	.word	1908
	.byte	17
	.word	1943
	.byte	17
	.word	1959
	.byte	17
	.word	1975
	.byte	19
	.word	1996
	.byte	0,19
	.word	6338
	.byte	0,0,6,0,0,16
	.word	7825
	.byte	17
	.word	7854
	.byte	7,18
	.word	6341
	.byte	17
	.word	6372
	.byte	19
	.word	6395
	.byte	0,6,0,0,16
	.word	7872
	.byte	17
	.word	7920
	.byte	17
	.word	7937
	.byte	6,0,16
	.word	7955
	.byte	17
	.word	8007
	.byte	17
	.word	8023
	.byte	6,0,16
	.word	8053
	.byte	17
	.word	8091
	.byte	17
	.word	8106
	.byte	17
	.word	8122
	.byte	6,0,16
	.word	8153
	.byte	17
	.word	8193
	.byte	17
	.word	8209
	.byte	6,0,16
	.word	8235
	.byte	17
	.word	8293
	.byte	6,0,16
	.word	8314
	.byte	17
	.word	8369
	.byte	6,0,16
	.word	8390
	.byte	17
	.word	8443
	.byte	6,0,16
	.word	8462
	.byte	17
	.word	8508
	.byte	6,0,16
	.word	8524
	.byte	17
	.word	8589
	.byte	7,18
	.word	2101
	.byte	17
	.word	2131
	.byte	19
	.word	2149
	.byte	0,6,18
	.word	2101
	.byte	17
	.word	2131
	.byte	19
	.word	2149
	.byte	0,6,18
	.word	8314
	.byte	17
	.word	8369
	.byte	19
	.word	8388
	.byte	0,6,18
	.word	8053
	.byte	17
	.word	8091
	.byte	17
	.word	8106
	.byte	17
	.word	8122
	.byte	19
	.word	8141
	.byte	0,6,0,0,16
	.word	8613
	.byte	17
	.word	8646
	.byte	6,0,16
	.word	8662
	.byte	17
	.word	8703
	.byte	6,0,16
	.word	8729
	.byte	17
	.word	8773
	.byte	6,0,16
	.word	8796
	.byte	17
	.word	8835
	.byte	7,18
	.word	8729
	.byte	17
	.word	8773
	.byte	19
	.word	8794
	.byte	0,6,0,0,16
	.word	8854
	.byte	17
	.word	8899
	.byte	6,0,16
	.word	8922
	.byte	17
	.word	8966
	.byte	6,0,16
	.word	8989
	.byte	17
	.word	9036
	.byte	6,0,16
	.word	9059
	.byte	17
	.word	9111
	.byte	6,0,16
	.word	9134
	.byte	17
	.word	9189
	.byte	6,0,16
	.word	9212
	.byte	17
	.word	9262
	.byte	6,0,16
	.word	9285
	.byte	17
	.word	9330
	.byte	7,18
	.word	9212
	.byte	17
	.word	9262
	.byte	19
	.word	9283
	.byte	0,6,0,0,16
	.word	9349
	.byte	17
	.word	9390
	.byte	17
	.word	9405
	.byte	6,0,16
	.word	9429
	.byte	17
	.word	9487
	.byte	6,0,16
	.word	9518
	.byte	17
	.word	9572
	.byte	6,0,16
	.word	9595
	.byte	17
	.word	9645
	.byte	6,0,16
	.word	9668
	.byte	17
	.word	9724
	.byte	6,0,16
	.word	9747
	.byte	17
	.word	9792
	.byte	6,0,16
	.word	9815
	.byte	17
	.word	9857
	.byte	6,0,16
	.word	9880
	.byte	17
	.word	9910
	.byte	6,0,16
	.word	9928
	.byte	17
	.word	9957
	.byte	6,0,16
	.word	9975
	.byte	6,0,16
	.word	10009
	.byte	6,0,16
	.word	10052
	.byte	17
	.word	10095
	.byte	6,0,16
	.word	10112
	.byte	17
	.word	10153
	.byte	6,0,16
	.word	10175
	.byte	17
	.word	10215
	.byte	6,0,16
	.word	10242
	.byte	17
	.word	10290
	.byte	6,0,16
	.word	10307
	.byte	17
	.word	10348
	.byte	6,0,16
	.word	10365
	.byte	17
	.word	10400
	.byte	17
	.word	10419
	.byte	17
	.word	10438
	.byte	6,0,16
	.word	10457
	.byte	17
	.word	10492
	.byte	7,18
	.word	4238
	.byte	17
	.word	4289
	.byte	19
	.word	4302
	.byte	0,6,0,0,16
	.word	10513
	.byte	17
	.word	10564
	.byte	6,0,16
	.word	10582
	.byte	17
	.word	10609
	.byte	17
	.word	10625
	.byte	17
	.word	10639
	.byte	6,0,16
	.word	10659
	.byte	17
	.word	10701
	.byte	6,0,16
	.word	10722
	.byte	17
	.word	10760
	.byte	7,18
	.word	4304
	.byte	17
	.word	4354
	.byte	22
	.word	4367
	.byte	18
	.word	1105
	.byte	17
	.word	1142
	.byte	17
	.word	1156
	.byte	22
	.word	1177
	.byte	18
	.word	1027
	.byte	17
	.word	1068
	.byte	17
	.word	1082
	.byte	19
	.word	1103
	.byte	0,19
	.word	1178
	.byte	0,0,19
	.word	4368
	.byte	0,0,6,0,0,16
	.word	10781
	.byte	17
	.word	10820
	.byte	17
	.word	10836
	.byte	6,0,23
	.byte	'Dem_EnvCaptureED',0,34,42,6,1,1,1,1,5
	.byte	'EventId',0,34,42,40
	.word	860
	.byte	5
	.byte	'dest',0,34,42,56
	.word	160
	.byte	5
	.byte	'destSize',0,34,42,69
	.word	860
	.byte	5
	.byte	'debug0',0,34,42,78
	.word	1371
	.byte	5
	.byte	'debug1',0,34,42,78
	.word	1371
	.byte	0,23
	.byte	'Dem_EnvCaptureFF',0,34,47,6,1,1,1,1,5
	.byte	'EventId',0,34,47,40
	.word	860
	.byte	5
	.byte	'dest',0,34,47,56
	.word	160
	.byte	5
	.byte	'destSize',0,34,47,69
	.word	860
	.byte	5
	.byte	'debug0',0,34,47,78
	.word	1371
	.byte	5
	.byte	'debug1',0,34,47,78
	.word	1371
	.byte	0,16
	.word	10856
	.byte	17
	.word	10885
	.byte	6,0,16
	.word	10903
	.byte	17
	.word	10941
	.byte	17
	.word	10957
	.byte	6,0,16
	.word	10977
	.byte	17
	.word	11018
	.byte	7,18
	.word	10903
	.byte	17
	.word	10941
	.byte	17
	.word	10957
	.byte	19
	.word	10975
	.byte	0,6,0,0,16
	.word	11044
	.byte	17
	.word	11094
	.byte	17
	.word	11117
	.byte	6,0,24,1,3
	.word	17136
	.byte	25
	.byte	'__codeptr',0,32,1,1
	.word	17138
	.byte	25
	.byte	'sint8',0,35,76,25
	.word	9510
	.byte	25
	.byte	'uint8',0,35,81,25
	.word	143
	.byte	25
	.byte	'sint16',0,35,86,25
	.word	4991
	.byte	25
	.byte	'uint16',0,35,91,25
	.word	860
	.byte	25
	.byte	'sint32',0,35,96,24
	.word	1998
	.byte	25
	.byte	'uint32',0,35,106,24
	.word	1371
	.byte	2
	.byte	'unsigned long long int',0,8,7,25
	.byte	'uint64',0,35,111,30
	.word	17249
	.byte	25
	.byte	'boolean',0,35,127,25
	.word	143
	.byte	25
	.byte	'uint8_least',0,35,137,1,25
	.word	5425
	.byte	25
	.byte	'uint16_least',0,35,147,1,25
	.word	5425
	.byte	25
	.byte	'StatusType',0,36,191,1,27
	.word	143
	.byte	25
	.byte	'Std_ReturnType',0,36,199,1,15
	.word	143
	.byte	14,36,206,1,9,8,13
	.byte	'vendorID',0
	.word	860
	.byte	2,2,35,0,13
	.byte	'moduleID',0
	.word	860
	.byte	2,2,35,2,13
	.byte	'sw_major_version',0
	.word	143
	.byte	1,2,35,4,13
	.byte	'sw_minor_version',0
	.word	143
	.byte	1,2,35,5,13
	.byte	'sw_patch_version',0
	.word	143
	.byte	1,2,35,6,0,25
	.byte	'Std_VersionInfoType',0,36,213,1,3
	.word	17393
	.byte	25
	.byte	'Dem_ClientRequestType',0,37,46,16
	.word	860
	.byte	25
	.byte	'Dem_ClientResultType',0,37,47,16
	.word	860
	.byte	25
	.byte	'Dem_ClientSelectionType',0,37,48,16
	.word	1371
	.byte	25
	.byte	'Dem_ClientPriorityType',0,37,50,15
	.word	143
	.byte	25
	.byte	'Dem_ComponentIdType',0,38,20,15
	.word	143
	.byte	25
	.byte	'PduIdType',0,39,22,19
	.word	860
	.byte	25
	.byte	'PduLengthType',0,39,26,19
	.word	860
	.byte	26,40,113,9,4,27
	.byte	'TP_DATACONF',0,0,27
	.byte	'TP_DATARETRY',0,1,27
	.byte	'TP_CONFPENDING',0,2,0,25
	.byte	'TpDataStateType',0,40,118,3
	.word	17733
	.byte	25
	.byte	'Can_IdType',0,41,32,16
	.word	1371
	.byte	25
	.byte	'Can_HwHandleType',0,41,43,16
	.word	860
	.byte	14,42,93,9,8,13
	.byte	'Class',0
	.word	143
	.byte	1,2,35,0,13
	.byte	'TIN',0
	.word	143
	.byte	1,2,35,1,13
	.byte	'ReturnAddress',0
	.word	1371
	.byte	4,2,35,4,0,25
	.byte	'OsTrapInfoType',0,42,97,3
	.word	17853
	.byte	10,68
	.word	1371
	.byte	11,16,0,14,42,154,1,9,68,13
	.byte	'store',0
	.word	17933
	.byte	68,2,35,0,0,10,68
	.word	17942
	.byte	11,0,0,25
	.byte	'Os_JumpBufType',0,42,156,1,3
	.word	17964
	.byte	25
	.byte	'Os_StackTraceType',0,42,174,1,18
	.word	1371
	.byte	14,42,175,1,9,8,13
	.byte	'sp',0
	.word	1371
	.byte	4,2,35,0,13
	.byte	'ctx',0
	.word	1371
	.byte	4,2,35,4,0,25
	.byte	'Os_StackValueType',0,42,175,1,63
	.word	18024
	.byte	25
	.byte	'Os_StackSizeType',0,42,176,1,27
	.word	18024
	.byte	28,1,1,3
	.word	18109
	.byte	25
	.byte	'Os_VoidVoidFunctionType',0,42,179,1,16
	.word	18112
	.byte	25
	.byte	'ApplicationType',0,42,193,1,23
	.word	143
	.byte	29
	.byte	'Os_ApplicationConfigurationType_s',0,42,198,1,16,2,13
	.byte	'app_id',0
	.word	143
	.byte	1,2,35,0,13
	.byte	'access',0
	.word	143
	.byte	1,2,35,1,0,25
	.byte	'Os_ApplicationConfigurationType',0,42,201,1,3
	.word	18175
	.byte	25
	.byte	'Os_CoreStateType',0,42,203,1,16
	.word	1371
	.byte	25
	.byte	'AreaIdType',0,42,204,1,16
	.word	860
	.byte	25
	.byte	'Os_PeripheralAddressType',0,42,212,1,22
	.word	1371
	.byte	25
	.byte	'TickType',0,42,221,1,22
	.word	1371
	.byte	25
	.byte	'Os_StopwatchTickType',0,42,225,1,22
	.word	1371
	.byte	25
	.byte	'Os_Lockable',0,42,234,1,18
	.word	1387
	.byte	25
	.byte	'CoreIdType',0,42,236,1,16
	.word	860
	.byte	25
	.byte	'SpinlockIdType',0,42,237,1,16
	.word	860
	.byte	26,42,239,1,9,4,27
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,27
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,25
	.byte	'TryToGetSpinlockType',0,42,239,1,74
	.word	18482
	.byte	26,42,174,2,9,4,27
	.byte	'APPLICATION_ACCESSIBLE',0,0,27
	.byte	'APPLICATION_RESTARTING',0,1,27
	.byte	'APPLICATION_TERMINATED',0,2,0,25
	.byte	'ApplicationStateType',0,42,174,2,92
	.word	18575
	.byte	30,1,1,31
	.word	143
	.byte	31
	.word	11745
	.byte	0,3
	.word	18687
	.byte	25
	.byte	'Os_FunctionEntryType',0,42,183,2,16
	.word	18701
	.byte	29
	.byte	'Os_MeterInfoType_s',0,42,193,2,16,48,13
	.byte	'elapsed',0
	.word	1371
	.byte	4,2,35,0,13
	.byte	'previous',0
	.word	1371
	.byte	4,2,35,4,13
	.byte	'max',0
	.word	1371
	.byte	4,2,35,8,13
	.byte	'cumulative',0
	.word	1371
	.byte	4,2,35,12,13
	.byte	'stackbase',0
	.word	18024
	.byte	8,2,35,16,13
	.byte	'stackusage',0
	.word	18024
	.byte	8,2,35,24,13
	.byte	'stackmax',0
	.word	18024
	.byte	8,2,35,32,13
	.byte	'stackbudget',0
	.word	18024
	.byte	8,2,35,40,0,25
	.byte	'Os_MeterInfoType',0,42,202,2,3
	.word	18736
	.byte	3
	.word	18736
	.byte	25
	.byte	'Os_MeterInfoRefType',0,42,203,2,50
	.word	18934
	.byte	25
	.byte	'EventMaskType',0,42,206,2,15
	.word	143
	.byte	25
	.byte	'Os_imaskType',0,42,211,2,16
	.word	1371
	.byte	29
	.byte	'Os_ISRDynType_s',0,42,213,2,16,48,13
	.byte	'meter',0
	.word	18736
	.byte	48,2,35,0,0,25
	.byte	'Os_ISRDynType',0,42,215,2,3
	.word	19013
	.byte	3
	.word	19013
	.byte	9
	.word	19074
	.byte	29
	.byte	'Os_ISRType_s',0,42,216,2,16,24,13
	.byte	'entry_function',0
	.word	18117
	.byte	4,2,35,0,13
	.byte	'dynamic',0
	.word	19079
	.byte	4,2,35,4,13
	.byte	'imask',0
	.word	1371
	.byte	4,2,35,8,13
	.byte	'stackbudget',0
	.word	18024
	.byte	8,2,35,12,13
	.byte	'access',0
	.word	143
	.byte	1,2,35,20,13
	.byte	'application',0
	.word	143
	.byte	1,2,35,21,0,25
	.byte	'Os_ISRType',0,42,223,2,3
	.word	19084
	.byte	3
	.word	18109
	.byte	9
	.word	19084
	.byte	3
	.word	19243
	.byte	25
	.byte	'ISRType',0,42,224,2,46
	.word	19248
	.byte	25
	.byte	'Os_bitmask',0,42,239,2,22
	.word	1371
	.byte	25
	.byte	'Os_pset0Type',0,42,240,2,20
	.word	1371
	.byte	25
	.byte	'Os_pset1Type',0,42,241,2,20
	.word	1371
	.byte	25
	.byte	'Os_pset2Type',0,42,242,2,20
	.word	1371
	.byte	12,42,243,2,9,4,13
	.byte	'p0',0
	.word	1371
	.byte	4,2,35,0,13
	.byte	'p1',0
	.word	1371
	.byte	4,2,35,0,13
	.byte	'p2',0
	.word	1371
	.byte	4,2,35,0,0,25
	.byte	'Os_psetType',0,42,247,2,3
	.word	19356
	.byte	12,42,249,2,9,4,13
	.byte	't0',0
	.word	1371
	.byte	4,2,35,0,13
	.byte	't1',0
	.word	1371
	.byte	4,2,35,0,13
	.byte	't2',0
	.word	1371
	.byte	4,2,35,0,0,25
	.byte	'Os_tpmaskType',0,42,253,2,3
	.word	19420
	.byte	25
	.byte	'Os_ActivationCountType',0,42,254,2,23
	.word	143
	.byte	29
	.byte	'Os_TaskDynType_s',0,42,128,3,16,120,13
	.byte	'terminate_jump_buf',0
	.word	17973
	.byte	68,2,35,0,13
	.byte	'meter',0
	.word	18736
	.byte	48,2,35,68,13
	.byte	'activation_count',0
	.word	143
	.byte	1,2,35,116,0,25
	.byte	'Os_TaskDynType',0,42,132,3,3
	.word	19518
	.byte	10,68
	.word	17942
	.byte	11,0,0,3
	.word	19518
	.byte	9
	.word	19644
	.byte	29
	.byte	'Os_TaskType_s',0,42,134,3,16,40,13
	.byte	'dynamic',0
	.word	19649
	.byte	4,2,35,0,13
	.byte	'entry_function',0
	.word	18117
	.byte	4,2,35,4,13
	.byte	'pset',0
	.word	19356
	.byte	4,2,35,8,13
	.byte	'base_tpmask',0
	.word	19420
	.byte	4,2,35,12,13
	.byte	'tpmask',0
	.word	19420
	.byte	4,2,35,16,13
	.byte	'core_id',0
	.word	860
	.byte	2,2,35,20,13
	.byte	'index',0
	.word	1371
	.byte	4,2,35,24,13
	.byte	'stackbudget',0
	.word	18024
	.byte	8,2,35,28,13
	.byte	'activation_count',0
	.word	143
	.byte	1,2,35,36,13
	.byte	'access',0
	.word	143
	.byte	1,2,35,37,13
	.byte	'application',0
	.word	143
	.byte	1,2,35,38,0,25
	.byte	'Os_TaskType',0,42,146,3,3
	.word	19654
	.byte	9
	.word	19654
	.byte	3
	.word	19904
	.byte	25
	.byte	'TaskType',0,42,147,3,47
	.word	19909
	.byte	32
	.byte	'Os_TaskStateType',0,42,155,3,6,4,27
	.byte	'SUSPENDED',0,0,27
	.byte	'READY',0,1,27
	.byte	'WAITING',0,2,27
	.byte	'RUNNING',0,3,0,25
	.byte	'TaskStateType',0,42,156,3,31
	.word	19932
	.byte	12,42,167,3,3,4,13
	.byte	'tpmask',0
	.word	19420
	.byte	4,2,35,0,0,29
	.byte	'Os_ResourceDynType_s',0,42,166,3,16,4,13
	.byte	'saved_priority',0
	.word	20019
	.byte	4,2,35,0,0,25
	.byte	'Os_ResourceDynType',0,42,170,3,3
	.word	20042
	.byte	3
	.word	20042
	.byte	9
	.word	20122
	.byte	29
	.byte	'Os_ResourceType_s',0,42,171,3,16,12,13
	.byte	'dynamic',0
	.word	20127
	.byte	4,2,35,0,13
	.byte	'tpmask',0
	.word	19420
	.byte	4,2,35,4,13
	.byte	'access',0
	.word	143
	.byte	1,2,35,8,0,25
	.byte	'Os_ResourceType',0,42,175,3,3
	.word	20132
	.byte	14,42,181,3,9,12,13
	.byte	'maxallowedvalue',0
	.word	1371
	.byte	4,2,35,0,13
	.byte	'ticksperbase',0
	.word	1371
	.byte	4,2,35,4,13
	.byte	'mincycle',0
	.word	1371
	.byte	4,2,35,8,0,25
	.byte	'AlarmBaseType',0,42,185,3,3
	.word	20231
	.byte	14,42,206,3,9,8,13
	.byte	'Running',0
	.word	143
	.byte	1,2,35,0,13
	.byte	'Pending',0
	.word	143
	.byte	1,2,35,1,13
	.byte	'Delay',0
	.word	1371
	.byte	4,2,35,4,0,25
	.byte	'Os_CounterStatusType',0,42,210,3,3
	.word	20326
	.byte	33
	.word	143
	.byte	1,1,3
	.word	20412
	.byte	25
	.byte	'Os_CounterIncrAdvType',0,42,217,3,22
	.word	20419
	.byte	29
	.byte	's_swd',0,42,222,3,12,4,13
	.byte	'count',0
	.word	1371
	.byte	4,2,35,0,0,12,42,221,3,3,4,13
	.byte	'sw',0
	.word	20455
	.byte	4,2,35,0,0,29
	.byte	'Os_CounterDynType_s',0,42,220,3,16,4,13
	.byte	'type_dependent',0
	.word	20483
	.byte	4,2,35,0,0,25
	.byte	'Os_CounterDynType',0,42,226,3,3
	.word	20502
	.byte	3
	.word	20502
	.byte	9
	.word	20580
	.byte	29
	.byte	'Os_CounterType_s',0,42,227,3,16,28,13
	.byte	'dynamic',0
	.word	20585
	.byte	4,2,35,0,13
	.byte	'advincr',0
	.word	20424
	.byte	4,2,35,4,13
	.byte	'base',0
	.word	20231
	.byte	12,2,35,8,13
	.byte	'core',0
	.word	11745
	.byte	4,2,35,20,13
	.byte	'access',0
	.word	143
	.byte	1,2,35,24,13
	.byte	'application',0
	.word	143
	.byte	1,2,35,25,0,25
	.byte	'Os_CounterType',0,42,234,3,3
	.word	20590
	.byte	3
	.word	20412
	.byte	9
	.word	20590
	.byte	3
	.word	20742
	.byte	25
	.byte	'CounterType',0,42,235,3,52
	.word	20747
	.byte	32
	.byte	'Os_ScheduleTableStatusType',0,42,240,3,6,4,27
	.byte	'SCHEDULETABLE_STOPPED',0,0,27
	.byte	'SCHEDULETABLE_NEXT',0,1,27
	.byte	'SCHEDULETABLE_WAITING',0,2,27
	.byte	'SCHEDULETABLE_RUNNING',0,3,27
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,25
	.byte	'ScheduleTableStatusType',0,42,241,3,41
	.word	20773
	.byte	9
	.word	.L527-.L160
	.byte	3
	.word	20973
	.byte	25
	.byte	'ScheduleTableType',0,42,128,4,58
	.word	20978
	.byte	29
	.byte	'Os_ScheduleTableDynType_s',0,42,130,4,16,16,13
	.byte	'match',0
	.word	1371
	.byte	4,2,35,0,13
	.byte	'next',0
	.word	20983
	.byte	4,2,35,4,13
	.byte	'state',0
	.word	20773
	.byte	4,2,35,8,13
	.byte	'config',0
	.word	860
	.byte	2,2,35,12,0,3
	.word	21010
	.byte	9
	.word	21103
.L527:
	.byte	29
	.byte	'Os_ScheduleTableType_s',0,42,247,3,16,16,13
	.byte	'dynamic',0
	.word	21108
	.byte	4,2,35,0,13
	.byte	'counter',0
	.word	20752
	.byte	4,2,35,4,13
	.byte	'repeat',0
	.word	143
	.byte	1,2,35,8,13
	.byte	'config',0
	.word	860
	.byte	2,2,35,10,13
	.byte	'initial',0
	.word	143
	.byte	1,2,35,12,13
	.byte	'access',0
	.word	143
	.byte	1,2,35,13,13
	.byte	'application',0
	.word	143
	.byte	1,2,35,14,0,25
	.byte	'Os_ScheduleTableType',0,42,255,3,3
	.word	21113
	.byte	9
	.word	21113
	.byte	3
	.word	21293
	.byte	9
	.word	20590
	.byte	3
	.word	21303
	.byte	15
	.word	18417
	.byte	15
	.word	19356
	.byte	15
	.word	19253
	.byte	15
	.word	19914
	.byte	15
	.word	19420
	.byte	15
	.word	143
	.byte	15
	.word	19914
	.byte	29
	.byte	'Os_ControlledCoreType_s',0,42,251,6,16,112,13
	.byte	'TrapInfo',0
	.word	17853
	.byte	8,2,35,0,13
	.byte	'lock_taskaccess',0
	.word	21313
	.byte	4,2,35,8,13
	.byte	'ReadyTasks',0
	.word	21318
	.byte	4,2,35,12,13
	.byte	'RunningISR',0
	.word	21323
	.byte	4,2,35,16,13
	.byte	'RunningTask',0
	.word	21328
	.byte	4,2,35,20,13
	.byte	'RunningTPMask',0
	.word	21333
	.byte	4,2,35,24,13
	.byte	'CurrentMeteredObject',0
	.word	18939
	.byte	4,2,35,28,13
	.byte	'IdleMeter',0
	.word	18736
	.byte	48,2,35,32,13
	.byte	'AppAccess',0
	.word	143
	.byte	1,2,35,80,13
	.byte	'AppOverride',0
	.word	21338
	.byte	1,2,35,81,13
	.byte	'GetStackValueAdjust',0
	.word	18024
	.byte	8,2,35,84,13
	.byte	'InErrorHook',0
	.word	143
	.byte	1,2,35,92,13
	.byte	'ChainTaskRef',0
	.word	21343
	.byte	4,2,35,96,13
	.byte	'GetStackUsageAdjust',0
	.word	18024
	.byte	8,2,35,100,13
	.byte	'InProtectionHook',0
	.word	143
	.byte	1,2,35,108,13
	.byte	'CoreIsActive',0
	.word	143
	.byte	1,2,35,109,13
	.byte	'InShutdownHook',0
	.word	143
	.byte	1,2,35,110,0,25
	.byte	'Os_ControlledCoreType',0,42,141,7,3
	.word	21348
	.byte	3
	.word	1371
	.byte	9
	.word	19084
	.byte	3
	.word	21804
	.byte	9
	.word	19654
	.byte	3
	.word	21814
	.byte	3
	.word	18736
	.byte	29
	.byte	'Os_AnyCoreType_s',0,42,151,7,16,96,13
	.byte	'DisableAllImask',0
	.word	1371
	.byte	4,2,35,0,13
	.byte	'SuspendAllImask',0
	.word	1371
	.byte	4,2,35,4,13
	.byte	'SuspendOSImask',0
	.word	1371
	.byte	4,2,35,8,13
	.byte	'DisableAllCount',0
	.word	1371
	.byte	4,2,35,12,13
	.byte	'SuspendAllCount',0
	.word	1371
	.byte	4,2,35,16,13
	.byte	'SuspendOSCount',0
	.word	1371
	.byte	4,2,35,20,13
	.byte	'RestartJumpBuf',0
	.word	17973
	.byte	68,2,35,24,13
	.byte	'Restartable',0
	.word	143
	.byte	1,2,35,92,0,25
	.byte	'Os_AnyCoreType',0,42,160,7,3
	.word	21829
	.byte	25
	.byte	'Can_TxObjPriorityClassType',0,43,219,3,16
	.word	1371
	.byte	29
	.byte	'Can_TxHwObjectConfigType',0,43,231,3,16,8,13
	.byte	'MsgObjId',0
	.word	143
	.byte	1,2,35,0,13
	.byte	'HwControllerId',0
	.word	143
	.byte	1,2,35,1,13
	.byte	'TxObjPriorityClass',0
	.word	1371
	.byte	4,2,35,4,0,25
	.byte	'Can_TxHwObjectConfigType',0,43,252,3,3
	.word	22106
	.byte	29
	.byte	'Can_RxHwObjectConfigType',0,43,129,4,16,12,13
	.byte	'MaskRef',0
	.word	1371
	.byte	4,2,35,0,13
	.byte	'MsgId',0
	.word	1371
	.byte	4,2,35,4,13
	.byte	'MsgObjId',0
	.word	143
	.byte	1,2,35,8,13
	.byte	'HwControllerId',0
	.word	143
	.byte	1,2,35,9,0,25
	.byte	'Can_RxHwObjectConfigType',0,43,147,4,3
	.word	22242
	.byte	29
	.byte	'Can_ControllerMOMapConfigType',0,43,181,4,16,4,13
	.byte	'ControllerMOMap',0
	.word	2491
	.byte	4,2,35,0,0,25
	.byte	'Can_ControllerMOMapConfigType',0,43,184,4,3
	.word	22382
	.byte	29
	.byte	'Can_NPCRValueType',0,43,188,4,16,2,13
	.byte	'Can_NPCRValue',0
	.word	860
	.byte	2,2,35,0,0,25
	.byte	'Can_NPCRValueType',0,43,191,4,3
	.word	22483
	.byte	29
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,43,194,4,16,8,13
	.byte	'CanControllerBaudrate',0
	.word	1371
	.byte	4,2,35,0,13
	.byte	'CanControllerBaudrateCfg',0
	.word	860
	.byte	2,2,35,4,0,25
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,43,198,4,3
	.word	22558
	.byte	9
	.word	22558
	.byte	3
	.word	22723
	.byte	29
	.byte	'Can_BaudrateConfigPtrType',0,43,201,4,16,4,13
	.byte	'Can_kBaudrateConfigPtr',0
	.word	22728
	.byte	4,2,35,0,0,25
	.byte	'Can_BaudrateConfigPtrType',0,43,204,4,3
	.word	22733
	.byte	29
	.byte	'Can_EventHandlingType',0,43,226,4,16,4,13
	.byte	'CanEventType',0
	.word	2491
	.byte	4,2,35,0,0,25
	.byte	'Can_EventHandlingType',0,43,229,4,3
	.word	22833
	.byte	25
	.byte	'Rte_TransformerErrorCode',0,44,130,1,15
	.word	143
	.byte	25
	.byte	'Rte_TransformerClass',0,44,131,1,15
	.word	143
	.byte	14,44,168,1,9,12,13
	.byte	'in',0
	.word	11745
	.byte	4,2,35,0,13
	.byte	'out',0
	.word	11745
	.byte	4,2,35,4,13
	.byte	'used',0
	.word	860
	.byte	2,2,35,8,13
	.byte	'lost_data',0
	.word	143
	.byte	1,2,35,10,0,25
	.byte	'Rte_QDynType',0,44,173,1,3
	.word	22979
	.byte	26,44,175,1,9,4,27
	.byte	'RTE_DRA',0,0,27
	.byte	'RTE_WOWP',0,1,27
	.byte	'RTE_TASK',0,2,27
	.byte	'RTE_ARE',0,3,27
	.byte	'RTE_EV',0,4,27
	.byte	'RTE_MSI',0,5,0,25
	.byte	'Rte_NotificationType',0,44,182,1,3
	.word	23066
	.byte	3
	.word	22979
	.byte	29
	.byte	'Rte_QCmnType',0,44,184,1,16,24,13
	.byte	'dynamic',0
	.word	23164
	.byte	4,2,35,0,13
	.byte	'copy',0
	.word	143
	.byte	1,2,35,4,13
	.byte	'queue_size',0
	.word	860
	.byte	2,2,35,6,13
	.byte	'element_size',0
	.word	860
	.byte	2,2,35,8,13
	.byte	'buffer_start',0
	.word	11745
	.byte	4,2,35,12,13
	.byte	'buffer_end',0
	.word	11745
	.byte	4,2,35,16,13
	.byte	'notification_type',0
	.word	23066
	.byte	4,2,35,20,0,25
	.byte	'Rte_QCmnType',0,44,192,1,3
	.word	23169
	.byte	25
	.byte	'Rte_AlarmRefType',0,44,224,1,32
	.word	1371
	.byte	25
	.byte	'Rte_AlarmIndexType',0,44,226,1,32
	.word	860
	.byte	10,128,8
	.word	143
	.byte	11,255,7,0,25
	.byte	'Impl_NVM_DstPtrType_1024',0,45,50,15
	.word	23407
	.byte	25
	.byte	'CanIf_u32_impl',0,45,69,16
	.word	1371
	.byte	25
	.byte	'CanIf_u16_impl',0,45,71,16
	.word	860
	.byte	25
	.byte	'CanIf_u8_impl',0,45,73,15
	.word	143
	.byte	25
	.byte	'CanIf_ControllerModeType_Enum_impl',0,45,88,15
	.word	143
	.byte	25
	.byte	'CanIf_PduModeType_Enum_impl',0,45,90,15
	.word	143
	.byte	14,45,92,9,2,13
	.byte	'DeviceMode',0
	.word	143
	.byte	1,2,35,0,13
	.byte	'ChannelMode',0
	.word	143
	.byte	1,2,35,1,0,25
	.byte	'CanIf_ControllerStateType_struct_impl',0,45,95,3
	.word	23598
	.byte	25
	.byte	'CanIf_NotifStatusType_Enum_impl',0,45,100,15
	.word	143
	.byte	25
	.byte	'CanSM_boolean_Impl',0,45,120,15
	.word	143
	.byte	25
	.byte	'CanSM_u8_Impl',0,45,123,15
	.word	143
	.byte	25
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,45,128,1,15
	.word	143
	.byte	25
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,45,132,1,15
	.word	143
	.byte	25
	.byte	'CanSM_u16_Impl',0,45,136,1,16
	.word	860
	.byte	25
	.byte	'CanSM_TimerStateType_Enum_impl',0,45,138,1,15
	.word	143
	.byte	14,45,140,1,9,4,13
	.byte	'cntTick_u16',0
	.word	860
	.byte	2,2,35,0,13
	.byte	'stTimer',0
	.word	143
	.byte	1,2,35,2,0,25
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,45,143,1,3
	.word	23939
	.byte	25
	.byte	'Com_impl_u16',0,45,154,1,16
	.word	860
	.byte	25
	.byte	'Com_impl_u8',0,45,157,1,15
	.word	143
	.byte	25
	.byte	'ComM_uint32_Impl',0,45,173,1,16
	.word	1371
	.byte	25
	.byte	'ComM_uint16_Impl',0,45,175,1,16
	.word	860
	.byte	25
	.byte	'ComM_uint8_Impl',0,45,177,1,15
	.word	143
	.byte	25
	.byte	'ComM_bool_Impl',0,45,179,1,15
	.word	143
	.byte	14,45,181,1,9,24,13
	.byte	'ChannelState_e',0
	.word	1371
	.byte	4,2,35,0,13
	.byte	'LightTimeoutCtr_u32',0
	.word	1371
	.byte	4,2,35,4,13
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	860
	.byte	2,2,35,8,13
	.byte	'ChannelMode_u8',0
	.word	143
	.byte	1,2,35,10,13
	.byte	'BusSmMode_u8',0
	.word	143
	.byte	1,2,35,11,13
	.byte	'UserRequestCtr_u8',0
	.word	143
	.byte	1,2,35,12,13
	.byte	'PassiveRequestState_u8',0
	.word	143
	.byte	1,2,35,13,13
	.byte	'PncRequestCtr_u8',0
	.word	143
	.byte	1,2,35,14,13
	.byte	'InhibitionReqStatus_u8',0
	.word	143
	.byte	1,2,35,15,13
	.byte	'NmNetworkRequestStatus_b',0
	.word	143
	.byte	1,2,35,16,13
	.byte	'DiagnosticRequestState_b',0
	.word	143
	.byte	1,2,35,17,13
	.byte	'CommunicationAllowed_b',0
	.word	143
	.byte	1,2,35,18,13
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	143
	.byte	1,2,35,19,13
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	143
	.byte	1,2,35,20,13
	.byte	'NmNetworkModeStatus_b',0
	.word	143
	.byte	1,2,35,21,0,25
	.byte	'ComM_ChannelStruct_Impl',0,45,197,1,3
	.word	24171
	.byte	14,45,206,1,9,10,13
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	860
	.byte	2,2,35,0,13
	.byte	'LimitToNoComCtr_u16',0
	.word	860
	.byte	2,2,35,2,13
	.byte	'RequestedUserMode_t',0
	.word	143
	.byte	1,2,35,4,13
	.byte	'IndicatedUserMode_t',0
	.word	143
	.byte	1,2,35,5,13
	.byte	'numChannelsInFullCom_u8',0
	.word	143
	.byte	1,2,35,6,13
	.byte	'numChannelsInSilentCom_u8',0
	.word	143
	.byte	1,2,35,7,13
	.byte	'numChannelsInNoCom_u8',0
	.word	143
	.byte	1,2,35,8,0,25
	.byte	'ComM_UserStruct_Impl',0,45,214,1,3
	.word	24675
	.byte	25
	.byte	'Dcm_IOOperationResponseType',0,45,252,1,15
	.word	143
	.byte	25
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	45,138,2,15
	.word	143
	.byte	25
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,45,146,2,15
	.word	143
	.byte	25
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,45,150,2,15
	.word	143
	.byte	25
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,45,154,2,15
	.word	143
	.byte	25
	.byte	'Dem_DTCFormatType',0,45,160,2,15
	.word	143
	.byte	25
	.byte	'Dem_DTCOriginType',0,45,162,2,15
	.word	143
	.byte	25
	.byte	'Dem_EventIdType',0,45,168,2,16
	.word	860
	.byte	25
	.byte	'Dem_EventStatusType',0,45,170,2,15
	.word	143
	.byte	25
	.byte	'Dem_InitMonitorReasonType',0,45,176,2,15
	.word	143
	.byte	25
	.byte	'Dem_OperationCycleIdType',0,45,179,2,15
	.word	143
	.byte	25
	.byte	'Dem_UdsStatusByteType',0,45,185,2,15
	.word	143
	.byte	25
	.byte	'NvM_BlockIdType',0,45,215,2,16
	.word	860
	.byte	25
	.byte	'NvM_RequestResultType',0,45,225,2,15
	.word	143
	.byte	25
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,45,243,3,34
	.word	23418
	.byte	10,128,8
	.word	143
	.byte	11,255,7,0,25
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,45,246,3,34
	.word	23418
	.byte	25
	.byte	'Dem_DTCGroupIdType',0,46,49,15
	.word	143
	.byte	25
	.byte	'Dem_DtcIdType',0,46,50,16
	.word	860
	.byte	25
	.byte	'Dem_ClientIdType',0,46,53,15
	.word	143
	.byte	25
	.byte	'Dem_DtcCodeType',0,46,55,16
	.word	1371
	.byte	25
	.byte	'Dem_boolean_least',0,46,60,17
	.word	143
	.byte	25
	.byte	'Dem_EventCategoryType',0,46,62,15
	.word	143
	.byte	25
	.byte	'Dem_ReturnGetExtendedDataRecordByDTCType',0,46,110,15
	.word	143
	.byte	25
	.byte	'Dem_ReturnGetSizeOfExtendedDataRecordByDTCType',0,46,132,1,15
	.word	143
	.byte	25
	.byte	'Dem_ReturnGetFreezeFrameDataByDTCType',0,46,154,1,15
	.word	143
	.byte	25
	.byte	'Dem_ReturnGetSizeOfFreezeFrameByDTCType',0,46,176,1,15
	.word	143
	.byte	25
	.byte	'Dem_DTCSeverityType',0,46,217,1,15
	.word	143
	.byte	25
	.byte	'Dem_DebugDataType',0,46,131,3,16
	.word	1371
	.byte	25
	.byte	'Dem_DTCKindType',0,46,145,3,16
	.word	143
	.byte	25
	.byte	'Dem_TriggerType',0,46,167,3,15
	.word	143
	.byte	25
	.byte	'Dem_EnCoList',0,47,31,15
	.word	143
	.byte	25
	.byte	'Dem_OperationCycleList',0,48,23,15
	.word	143
	.byte	25
	.byte	'Dem_StoCoList',0,49,32,15
	.word	143
	.byte	25
	.byte	'Rte_TaskRefType',0,50,184,1,32
	.word	19914
	.byte	25
	.byte	'Rte_EventRefType',0,50,185,1,32
	.word	143
	.byte	25
	.byte	'Rte_EventType',0,50,186,1,32
	.word	1371
	.byte	25
	.byte	'Rte_REActCounterType',0,50,252,1,15
	.word	143
	.byte	3
	.word	143
	.byte	25
	.byte	'Rte_REActCounterRefType',0,50,253,1,58
	.word	26396
	.byte	14,50,255,1,9,8,13
	.byte	'task',0
	.word	26292
	.byte	4,2,35,0,13
	.byte	'acnt',0
	.word	26401
	.byte	4,2,35,4,0,25
	.byte	'Rte_REContainerType',0,50,130,2,3
	.word	26434
	.byte	9
	.word	19654
	.byte	3
	.word	26498
	.byte	3
	.word	143
	.byte	9
	.word	26434
	.byte	3
	.word	26513
	.byte	25
	.byte	'Rte_REContainerRefType',0,50,132,2,60
	.word	26518
	.byte	25
	.byte	'Rte_MSICounterType',0,50,149,2,16
	.word	860
	.byte	3
	.word	860
	.byte	25
	.byte	'Rte_MSICounterRefType',0,50,150,2,56
	.word	26583
	.byte	25
	.byte	'Rte_MSIPendingFlagType',0,50,152,2,17
	.word	143
	.byte	3
	.word	143
	.byte	25
	.byte	'Rte_MSIPendingFlagRefType',0,50,153,2,60
	.word	26651
	.byte	14,50,163,2,9,24,13
	.byte	'counter',0
	.word	26588
	.byte	4,2,35,0,13
	.byte	'incCounter',0
	.word	143
	.byte	1,2,35,4,13
	.byte	'pending',0
	.word	26656
	.byte	4,2,35,8,13
	.byte	'osTask',0
	.word	26292
	.byte	4,2,35,12,13
	.byte	'acnt',0
	.word	26401
	.byte	4,2,35,16,13
	.byte	'osEvent',0
	.word	143
	.byte	1,2,35,20,13
	.byte	'MSIInit',0
	.word	860
	.byte	2,2,35,22,0,25
	.byte	'Rte_MSITableEntry',0,50,172,2,3
	.word	26691
	.byte	3
	.word	860
	.byte	3
	.word	143
	.byte	25
	.byte	'Rte_TaskArrayIndex',0,50,179,2,16
	.word	143
	.byte	25
	.byte	'Rte_NrWaitingTasks',0,50,180,2,16
	.word	143
	.byte	14,50,182,2,9,4,13
	.byte	'pending',0
	.word	143
	.byte	1,2,35,0,13
	.byte	'count',0
	.word	143
	.byte	1,2,35,1,13
	.byte	'firstWaitingTask',0
	.word	143
	.byte	1,2,35,2,0,25
	.byte	'Rte_WaitableDatum',0,50,186,2,3
	.word	26909
	.byte	3
	.word	26909
	.byte	14,50,226,2,9,12,13
	.byte	'event_id',0
	.word	1371
	.byte	4,2,35,0,13
	.byte	'wd',0
	.word	27001
	.byte	4,2,35,4,13
	.byte	'timeout',0
	.word	1371
	.byte	4,2,35,8,0,25
	.byte	'Rte_WOWP_NotificationType',0,50,230,2,3
	.word	27006
	.byte	9
	.word	27006
	.byte	3
	.word	27095
	.byte	25
	.byte	'Rte_WOWP_NotificationRefType',0,50,232,2,66
	.word	27100
	.byte	25
	.byte	'Rte_ARE_NotificationType',0,50,234,2,29
	.word	26434
	.byte	29
	.byte	'Rte_QTaskType',0,50,243,2,16,28,13
	.byte	'cmn',0
	.word	23169
	.byte	24,2,35,0,13
	.byte	'task',0
	.word	26292
	.byte	4,2,35,24,0,25
	.byte	'Rte_QTaskType',0,50,246,2,3
	.word	27177
	.byte	29
	.byte	'Rte_QREType',0,50,250,2,16,28,13
	.byte	'cmn',0
	.word	23169
	.byte	24,2,35,0,13
	.byte	're',0
	.word	26523
	.byte	4,2,35,24,0,25
	.byte	'Rte_QREType',0,50,253,2,3
	.word	27248
	.byte	9
	.word	26434
	.byte	3
	.word	27313
	.byte	29
	.byte	'Rte_QWWPType',0,50,129,3,16,28,13
	.byte	'cmn',0
	.word	23169
	.byte	24,2,35,0,13
	.byte	'wwp',0
	.word	27105
	.byte	4,2,35,24,0,25
	.byte	'Rte_QWWPType',0,50,132,3,3
	.word	27323
	.byte	9
	.word	27006
	.byte	3
	.word	27391
	.byte	29
	.byte	'Rte_QEvType',0,50,136,3,16,36,13
	.byte	'cmn',0
	.word	23169
	.byte	24,2,35,0,13
	.byte	'task',0
	.word	26292
	.byte	4,2,35,24,13
	.byte	'mask',0
	.word	143
	.byte	1,2,35,28,13
	.byte	'acnt',0
	.word	26401
	.byte	4,2,35,32,0,25
	.byte	'Rte_QEvType',0,50,141,3,3
	.word	27401
	.byte	29
	.byte	'Rte_QMSIType',0,50,145,3,16,48,13
	.byte	'cmn',0
	.word	23169
	.byte	24,2,35,0,13
	.byte	'task',0
	.word	26292
	.byte	4,2,35,24,13
	.byte	'mask',0
	.word	143
	.byte	1,2,35,28,13
	.byte	'acnt',0
	.word	26401
	.byte	4,2,35,32,13
	.byte	'msiCounter',0
	.word	26588
	.byte	4,2,35,36,13
	.byte	'msiPending',0
	.word	26656
	.byte	4,2,35,40,13
	.byte	'msiLimit',0
	.word	860
	.byte	2,2,35,44,0,25
	.byte	'Rte_QMSIType',0,50,153,3,3
	.word	27496
	.byte	25
	.byte	'rba_BswSrv_uint64',0,4,66,28
	.word	17249
	.byte	25
	.byte	'Dem_EventIdIterator',0,7,27,22
	.word	5425
	.byte	25
	.byte	'Dem_DtcIdIterator',0,7,197,1,22
	.word	5425
	.byte	25
	.byte	'Dem_DtcGroupIdIterator',0,7,230,1,21
	.word	5425
	.byte	9
	.word	860
	.byte	3
	.word	27764
	.byte	14,7,171,2,9,8,13
	.byte	'it',0
	.word	27769
	.byte	4,2,35,0,13
	.byte	'end',0
	.word	27769
	.byte	4,2,35,4,0,25
	.byte	'Dem_EventIdListIterator',0,7,174,2,3
	.word	27774
	.byte	14,7,213,2,9,4,13
	.byte	'it',0
	.word	860
	.byte	2,2,35,0,13
	.byte	'end',0
	.word	860
	.byte	2,2,35,2,0,25
	.byte	'Dem_DtcIdListIterator',0,7,216,2,3
	.word	27839
	.byte	25
	.byte	'Dem_EvBuffEnvDataAlignedType',0,8,47,3
	.word	2500
	.byte	25
	.byte	'Dem_EvBuffEvent',0,8,75,2
	.word	2548
	.byte	25
	.byte	'Dem_EvtStateType',0,51,151,1,15
	.word	143
	.byte	26,52,31,9,4,27
	.byte	'MEMIF_JOB_OK',0,0,27
	.byte	'MEMIF_JOB_FAILED',0,1,27
	.byte	'MEMIF_JOB_PENDING',0,2,27
	.byte	'MEMIF_JOB_CANCELED',0,3,27
	.byte	'MEMIF_BLOCK_INCONSISTENT',0,4,27
	.byte	'MEMIF_BLOCK_INVALID',0,5,0,25
	.byte	'MemIf_JobResultType',0,52,39,2
	.word	27989
	.byte	26,53,49,9,4,27
	.byte	'NVM_PRV_ACTIVITY_NOT_INIT',0,0,27
	.byte	'NVM_PRV_ACTIVITY_IDLE',0,1,27
	.byte	'NVM_PRV_ACTIVITY_ARBITRATE',0,2,27
	.byte	'NVM_PRV_ACTIVITY_JOB_START',0,3,27
	.byte	'NVM_PRV_ACTIVITY_POLL_RESULT',0,4,27
	.byte	'NVM_PRV_ACTIVITY_JOB_COMPLETE',0,5,27
	.byte	'NVM_PRV_ACTIVITY_RESULT_EVAL',0,6,0,25
	.byte	'NvM_Prv_Activities_ten',0,53,58,3
	.word	28147
	.byte	26,53,104,9,4,27
	.byte	'NvM_Prv_idJob_Idle_e',0,0,27
	.byte	'NvM_Prv_idJob_Read_e',0,1,27
	.byte	'NvM_Prv_idJob_Write_e',0,2,27
	.byte	'NvM_Prv_idJob_Erase_e',0,3,27
	.byte	'NvM_Prv_idJob_Restore_e',0,4,27
	.byte	'NvM_Prv_idJob_Maintain_e',0,5,27
	.byte	'NvM_Prv_idJob_Validate_e',0,6,27
	.byte	'NvM_Prv_idJob_Invalidate_e',0,7,27
	.byte	'NvM_Prv_idJob_ReadIdConfigForReadAll_e',0,8,27
	.byte	'NvM_Prv_idJob_InvalidateForFirstInitAll_e',0,9,27
	.byte	'NvM_Prv_idJob_RestoreForImplicitRecovery_e',0,10,27
	.byte	'NvM_Prv_idJob_InvalidateForRemoveNonResistant_e',0,11,27
	.byte	'NvM_Prv_idJob_Invalid_e',0,12,27
	.byte	'NvM_Prv_idJob_Count_e',0,13,0,25
	.byte	'NvM_Prv_idJob_ten',0,53,115,3
	.word	28388
	.byte	25
	.byte	'NvM_Prv_ServiceBit_tuo',0,53,168,1,16
	.word	860
	.byte	25
	.byte	'NvM_Prv_idService_tuo',0,53,173,1,15
	.word	143
	.byte	25
	.byte	'NvM_Prv_idQueue_tuo',0,53,206,1,15
	.word	143
	.byte	14,53,210,1,9,12,13
	.byte	'idService_uo',0
	.word	143
	.byte	1,2,35,0,13
	.byte	'idBlock_uo',0
	.word	860
	.byte	2,2,35,2,13
	.byte	'ServiceBit_uo',0
	.word	860
	.byte	2,2,35,4,13
	.byte	'BlockData_pv',0
	.word	11745
	.byte	4,2,35,8,0,25
	.byte	'NvM_Prv_QueueEntry_tst',0,53,225,1,3
	.word	28945
	.byte	14,53,227,1,9,20,13
	.byte	'idJob_en',0
	.word	28388
	.byte	4,2,35,0,13
	.byte	'idBlock_uo',0
	.word	860
	.byte	2,2,35,4,13
	.byte	'RamBlock_pu8',0
	.word	160
	.byte	4,2,35,8,13
	.byte	'idxDataset_u8',0
	.word	143
	.byte	1,2,35,12,13
	.byte	'Result_en',0
	.word	27989
	.byte	4,2,35,16,0,25
	.byte	'NvM_Prv_JobData_tst',0,53,240,1,3
	.word	29071
	.byte	25
	.byte	'Dem_EvMemOccurrenceCounterType',0,19,90,21
	.word	143
	.byte	25
	.byte	'Dem_EvMemAgingCounterType',0,19,99,21
	.word	143
	.byte	25
	.byte	'Dem_EvMemHdrType',0,19,141,1,4
	.word	5658
	.byte	25
	.byte	'Dem_EvMemEventMemoryType',0,19,213,1,4
	.word	5688
	.byte	10,5
	.word	143
	.byte	11,4,0,10,10
	.word	860
	.byte	11,4,0,14,54,9,9,18,13
	.byte	'OperationCycleStates',0
	.word	143
	.byte	1,2,35,0,13
	.byte	'OperationCycleQualified',0
	.word	143
	.byte	1,2,35,1,13
	.byte	'Overflow',0
	.word	29342
	.byte	5,2,35,2,13
	.byte	'DtcIdsByOccurrenceTime',0
	.word	29351
	.byte	10,2,35,8,0,25
	.byte	'Dem_GenericNvDataType',0,54,24,4
	.word	29360
	.byte	25
	.byte	'Dem_NvmBlockIdType',0,55,14,34
	.word	143
	.byte	12,55,16,9,20,13
	.byte	'evMemData',0
	.word	5688
	.byte	20,2,35,0,13
	.byte	'genericNvData',0
	.word	29360
	.byte	18,2,35,0,0,25
	.byte	'Dem_NvMStorageBufferData',0,55,37,3
	.word	29536
	.byte	25
	.byte	'Dem_NvmBlockStatusType',0,55,59,15
	.word	143
	.byte	25
	.byte	'Dem_NvmResultType',0,55,78,31
	.word	143
	.byte	3
	.word	143
	.byte	34
	.word	143
	.byte	1,1,31
	.word	29674
	.byte	0,3
	.word	29679
	.byte	25
	.byte	'Dem_EvtClearAllowedFncType',0,14,12,26
	.word	29692
	.byte	34
	.word	143
	.byte	1,1,31
	.word	143
	.byte	0,3
	.word	29732
	.byte	25
	.byte	'Dem_InitMForEAllowedFncType',0,15,38,27
	.word	29745
	.byte	14,15,46,9,4,13
	.byte	'state',0
	.word	143
	.byte	1,2,35,0,13
	.byte	'debounceLevel',0
	.word	4991
	.byte	2,2,35,2,0,25
	.byte	'Dem_EvtState',0,15,50,3
	.word	29786
	.byte	10,24
	.word	29786
	.byte	11,5,0,35
	.byte	'Dem_AllEventsState',0,15,152,1,1
	.word	29851
	.byte	1,1,10,4
	.word	1371
	.byte	11,0,0,35
	.byte	'Dem_EventWasPassedReported',0,15,155,1,1
	.word	29890
	.byte	1,1,10,160,1
	.word	2548
	.byte	11,9,0
.L448:
	.byte	14,16,14,9,164,1,13
	.byte	'OverflowCounter',0
	.word	860
	.byte	2,2,35,0,13
	.byte	'OverflowCounterSet',0
	.word	860
	.byte	2,2,35,2,13
	.byte	'Locations',0
	.word	29937
	.byte	160,1,2,35,4,0,25
	.byte	'Dem_EvtBufferState',0,16,19,3
	.word	29947
	.byte	25
	.byte	'Dem_InternalEnvData',0,18,25,3
	.word	5861
	.byte	25
	.byte	'Dem_ReadExternalDataElementFnc',0,17,11,26
	.word	29692
	.byte	9
	.word	5861
	.byte	3
	.word	30121
	.byte	34
	.word	143
	.byte	1,1,31
	.word	29674
	.byte	31
	.word	30126
	.byte	0,3
	.word	30131
	.byte	25
	.byte	'Dem_ReadInternalDataElementFnc',0,17,12,26
	.word	30149
	.byte	25
	.byte	'Dem_EnvTriggerParamType',0,20,14,3
	.word	6920
	.byte	34
	.word	5425
	.byte	1,1,31
	.word	860
	.byte	31
	.word	29674
	.byte	31
	.word	11755
	.byte	31
	.word	860
	.byte	0,3
	.word	30225
	.byte	25
	.byte	'Dem_DebFilter',0,56,12,23
	.word	30253
	.byte	2
	.byte	'long int',0,4,5,3
	.word	30280
	.byte	30,1,1,31
	.word	11755
	.byte	31
	.word	860
	.byte	31
	.word	30292
	.byte	31
	.word	30292
	.byte	0,3
	.word	30297
	.byte	25
	.byte	'Dem_DebGetLimits',0,56,13,23
	.word	30321
	.byte	30,1,1,31
	.word	860
	.byte	31
	.word	11755
	.byte	31
	.word	860
	.byte	0,3
	.word	30351
	.byte	25
	.byte	'Dem_DebCyclic',0,56,14,16
	.word	30370
	.byte	25
	.byte	'Dem_DebouncedActionType',0,56,35,21
	.word	5425
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L161:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32
	.byte	13,58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,11,1,0,0,8,46
	.byte	1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,38,0,73,19,0,0,10,1,1,11,15,73,19,0,0,11,33,0,47
	.byte	15,0,0,12,23,1,58,15,59,15,57,15,11,15,0,0,13,13,0,3,8,73,19,11,15,56,9,0,0,14,19,1,58,15,59,15,57,15
	.byte	11,15,0,0,15,53,0,73,19,0,0,16,46,1,49,19,0,0,17,5,0,49,19,0,0,18,29,1,49,19,0,0,19,11,0,49,19,0,0,20
	.byte	46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,21,59,0,3,8,0,0,22,11,1,49,19,0,0,23,46,1
	.byte	3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,24,21,0,54,15,0,0,25,22,0,3,8,58,15,59,15,57,15,73,19
	.byte	0,0,26,4,1,58,15,59,15,57,15,11,15,0,0,27,40,0,3,8,28,13,0,0,28,21,0,54,15,39,12,0,0,29,19,1,3,8,58,15
	.byte	59,15,57,15,11,15,0,0,30,21,1,54,15,39,12,0,0,31,5,0,73,19,0,0,32,4,1,3,8,58,15,59,15,57,15,11,15,0,0
	.byte	33,21,0,73,19,54,15,39,12,0,0,34,21,1,73,19,54,15,39,12,0,0,35,52,0,3,8,58,15,59,15,57,15,73,19,63,12
	.byte	60,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L162:
	.word	.L529-.L528
.L528:
	.half	3
	.word	.L531-.L530
.L530:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits32.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_MemUtils.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_Lib.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuffEvent.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_BitArray.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_ISO14229Byte.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\enco\\Dem_EnableCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_ByteOrderUtils.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvDataElement.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_InternalEnvData.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemTypes.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvTrigger.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvExtendedDataRec.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvDid.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evdep\\Dem_Dependencies.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\deb\\Dem_Deb.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientBaseHandling.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientClearMachine.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemAging.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMem.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvFFRecNumeration.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Det\\api\\Det.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvMain.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientHandlingTypes.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_NodeId.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\api\\Dem_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_EnableCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_OperationCycle.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_StorageCondition.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Intl.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\MemIf\\api\\MemIf_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\NvM\\api\\NvM_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_GenericNvData.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\deb\\Dem_DebBase.h',0,0,0,0,0
.L531:
.L529:
	.sdecl	'.debug_info',debug,cluster('Dem_ClearPrestoredFreezeFrame')
	.sect	'.debug_info'
.L163:
	.word	399
	.half	3
	.word	.L164
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L166,.L165
	.byte	2
	.word	.L159
	.byte	3
	.byte	'Dem_ClearPrestoredFreezeFrame',0,1,208,5,16
	.word	.L245
	.byte	1,1,1
	.word	.L113,.L246,.L154
	.byte	4
	.byte	'EventId',0,1,208,5,62
	.word	.L247,.L248
	.byte	5
	.word	.L113,.L246
	.byte	6
	.word	.L249,.L115,.L250
	.byte	7
	.word	.L251,.L252
	.byte	8
	.word	.L253,.L115,.L250
	.byte	0,6
	.word	.L254,.L122,.L255
	.byte	7
	.word	.L256,.L257
	.byte	9
	.word	.L258,.L122,.L255
	.byte	6
	.word	.L259,.L260,.L124
	.byte	7
	.word	.L261,.L262
	.byte	7
	.word	.L263,.L264
	.byte	9
	.word	.L265,.L260,.L124
	.byte	6
	.word	.L266,.L260,.L123
	.byte	7
	.word	.L267,.L268
	.byte	7
	.word	.L269,.L270
	.byte	8
	.word	.L271,.L260,.L123
	.byte	0,0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_ClearPrestoredFreezeFrame')
	.sect	'.debug_abbrev'
.L164:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	29,1,49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,9,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_ClearPrestoredFreezeFrame')
	.sect	'.debug_line'
.L165:
	.word	.L533-.L532
.L532:
	.half	3
	.word	.L535-.L534
.L534:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0,0
.L535:
	.byte	4,2,5,26,7,0,5,2
	.word	.L115
	.byte	3,21,1,5,12,9
	.half	.L536-.L115
	.byte	1,5,38,7,9
	.half	.L537-.L536
	.byte	1,5,26,9
	.half	.L538-.L537
	.byte	1,5,4,9
	.half	.L116-.L538
	.byte	1,4,1,5,5,9
	.half	.L118-.L116
	.byte	3,190,5,1,7,9
	.half	.L250-.L118
	.byte	1,4,3,5,33,9
	.half	.L122-.L250
	.byte	3,162,127,1,5,51,9
	.half	.L539-.L122
	.byte	1,5,60,9
	.half	.L540-.L539
	.byte	1,5,68,9
	.half	.L541-.L540
	.byte	1,4,4,5,28,9
	.half	.L260-.L541
	.byte	3,200,123,1,5,47,9
	.half	.L542-.L260
	.byte	1,5,5,9
	.half	.L543-.L542
	.byte	1,5,73,9
	.half	.L123-.L543
	.byte	3,4,1,5,5,9
	.half	.L544-.L123
	.byte	1,4,3,5,3,9
	.half	.L124-.L544
	.byte	3,180,4,1,4,1,5,5,9
	.half	.L125-.L124
	.byte	3,222,0,1,7,9
	.half	.L255-.L125
	.byte	1,5,31,9
	.half	.L126-.L255
	.byte	3,2,1,5,12,9
	.half	.L526-.L126
	.byte	3,1,1,5,5,9
	.half	.L545-.L526
	.byte	1,5,1,9
	.half	.L120-.L545
	.byte	3,7,1,7,9
	.half	.L167-.L120
	.byte	0,1,1
.L533:
	.sdecl	'.debug_ranges',debug,cluster('Dem_ClearPrestoredFreezeFrame')
	.sect	'.debug_ranges'
.L166:
	.word	-1,.L113,0,.L167-.L113,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_PrestoreFreezeFrame')
	.sect	'.debug_info'
.L168:
	.word	228
	.half	3
	.word	.L169
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L171,.L170
	.byte	2
	.word	.L159
	.byte	3
	.byte	'Dem_PrestoreFreezeFrame',0,1,202,5,16
	.word	.L245
	.byte	1,1,1
	.word	.L153,.L272,.L152
	.byte	4
	.byte	'EventId',0,1,202,5,56
	.word	.L247,.L273
	.byte	5
	.word	.L153,.L272
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_PrestoreFreezeFrame')
	.sect	'.debug_abbrev'
.L169:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_PrestoreFreezeFrame')
	.sect	'.debug_line'
.L170:
	.word	.L547-.L546
.L546:
	.half	3
	.word	.L549-.L548
.L548:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0,0,0,0,0
.L549:
	.byte	5,55,7,0,5,2
	.word	.L153
	.byte	3,203,5,1,5,57,9
	.half	.L550-.L153
	.byte	1,5,5,9
	.half	.L524-.L550
	.byte	1,5,1,9
	.half	.L112-.L524
	.byte	3,1,1,7,9
	.half	.L172-.L112
	.byte	0,1,1
.L547:
	.sdecl	'.debug_ranges',debug,cluster('Dem_PrestoreFreezeFrame')
	.sect	'.debug_ranges'
.L171:
	.word	-1,.L153,0,.L172-.L153,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_PrestoreFreezeFrameWithEnvData')
	.sect	'.debug_info'
.L173:
	.word	469
	.half	3
	.word	.L174
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L176,.L175
	.byte	2
	.word	.L159
	.byte	3
	.byte	'Dem_PrestoreFreezeFrameWithEnvData',0,1,174,5,16
	.word	.L245
	.byte	1,1,1
	.word	.L151,.L274,.L150
	.byte	4
	.byte	'EventId',0,1,174,5,68
	.word	.L247,.L275
	.byte	4
	.byte	'debug0',0,1,174,5,95
	.word	.L276,.L277
	.byte	4
	.byte	'debug1',0,1,174,5,121
	.word	.L276,.L278
	.byte	5
	.word	.L151,.L274
	.byte	6
	.byte	'ReturnValue',0,1,176,5,20
	.word	.L245,.L279
	.byte	7
	.word	.L249,.L97,.L280
	.byte	8
	.word	.L251,.L281
	.byte	9
	.word	.L253,.L97,.L280
	.byte	0,7
	.word	.L254,.L104,.L282
	.byte	8
	.word	.L256,.L283
	.byte	10
	.word	.L258,.L104,.L282
	.byte	7
	.word	.L259,.L284,.L106
	.byte	8
	.word	.L261,.L285
	.byte	8
	.word	.L263,.L286
	.byte	10
	.word	.L265,.L284,.L106
	.byte	7
	.word	.L266,.L284,.L105
	.byte	8
	.word	.L267,.L287
	.byte	8
	.word	.L269,.L288
	.byte	9
	.word	.L271,.L284,.L105
	.byte	0,0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_PrestoreFreezeFrameWithEnvData')
	.sect	'.debug_abbrev'
.L174:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_PrestoreFreezeFrameWithEnvData')
	.sect	'.debug_line'
.L175:
	.word	.L552-.L551
.L551:
	.half	3
	.word	.L554-.L553
.L553:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0,0
.L554:
	.byte	5,16,7,0,5,2
	.word	.L151
	.byte	3,173,5,1,5,32,9
	.half	.L513-.L151
	.byte	3,2,1,4,2,5,26,9
	.half	.L97-.L513
	.byte	3,230,122,1,5,12,9
	.half	.L515-.L97
	.byte	1,5,38,7,9
	.half	.L555-.L515
	.byte	1,5,26,9
	.half	.L516-.L555
	.byte	1,5,4,9
	.half	.L98-.L516
	.byte	1,4,1,5,5,9
	.half	.L100-.L98
	.byte	3,163,5,1,7,9
	.half	.L280-.L100
	.byte	1,4,3,5,33,9
	.half	.L104-.L280
	.byte	3,189,127,1,5,51,9
	.half	.L521-.L104
	.byte	1,5,60,9
	.half	.L522-.L521
	.byte	1,5,68,9
	.half	.L556-.L522
	.byte	1,4,4,5,28,9
	.half	.L284-.L556
	.byte	3,200,123,1,5,47,9
	.half	.L557-.L284
	.byte	1,5,5,9
	.half	.L558-.L557
	.byte	1,5,73,9
	.half	.L105-.L558
	.byte	3,4,1,5,5,9
	.half	.L559-.L105
	.byte	1,4,3,5,3,9
	.half	.L106-.L559
	.byte	3,180,4,1,4,1,5,5,9
	.half	.L107-.L106
	.byte	3,195,0,1,7,9
	.half	.L282-.L107
	.byte	1,5,26,9
	.half	.L108-.L282
	.byte	3,2,1,5,56,9
	.half	.L517-.L108
	.byte	1,5,21,9
	.half	.L520-.L517
	.byte	3,2,1,5,5,9
	.half	.L110-.L520
	.byte	3,9,1,5,1,9
	.half	.L102-.L110
	.byte	3,1,1,7,9
	.half	.L177-.L102
	.byte	0,1,1
.L552:
	.sdecl	'.debug_ranges',debug,cluster('Dem_PrestoreFreezeFrameWithEnvData')
	.sect	'.debug_ranges'
.L176:
	.word	-1,.L151,0,.L177-.L151,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_EvBuffRemoveAllPrestored')
	.sect	'.debug_info'
.L178:
	.word	208
	.half	3
	.word	.L179
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L181,.L180
	.byte	2
	.word	.L159
	.byte	3
	.byte	'Dem_EvBuffRemoveAllPrestored',0,1,243,4,6,1,1,1
	.word	.L147,.L289,.L146
	.byte	4
	.word	.L147,.L289
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EvBuffRemoveAllPrestored')
	.sect	'.debug_abbrev'
.L179:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_EvBuffRemoveAllPrestored')
	.sect	'.debug_line'
.L180:
	.word	.L561-.L560
.L560:
	.half	3
	.word	.L563-.L562
.L562:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0,0,0,0,0
.L563:
	.byte	5,32,7,0,5,2
	.word	.L147
	.byte	3,244,4,1,5,1,9
	.half	.L564-.L147
	.byte	3,1,1,7,9
	.half	.L182-.L564
	.byte	0,1,1
.L561:
	.sdecl	'.debug_ranges',debug,cluster('Dem_EvBuffRemoveAllPrestored')
	.sect	'.debug_ranges'
.L181:
	.word	-1,.L147,0,.L182-.L147,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_EvBuffMainFunction')
	.sect	'.debug_info'
.L183:
	.word	202
	.half	3
	.word	.L184
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L186,.L185
	.byte	2
	.word	.L159
	.byte	3
	.byte	'Dem_EvBuffMainFunction',0,1,249,1,6,1,1,1
	.word	.L134,.L290,.L133
	.byte	4
	.word	.L134,.L290
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EvBuffMainFunction')
	.sect	'.debug_abbrev'
.L184:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_EvBuffMainFunction')
	.sect	'.debug_line'
.L185:
	.word	.L566-.L565
.L565:
	.half	3
	.word	.L568-.L567
.L567:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0,0,0,0,0
.L568:
	.byte	5,1,7,0,5,2
	.word	.L134
	.byte	3,153,2,1,7,9
	.half	.L187-.L134
	.byte	0,1,1
.L566:
	.sdecl	'.debug_ranges',debug,cluster('Dem_EvBuffMainFunction')
	.sect	'.debug_ranges'
.L186:
	.word	-1,.L134,0,.L187-.L134,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_PreStoredFFInitCheckNvM')
	.sect	'.debug_info'
.L188:
	.word	207
	.half	3
	.word	.L189
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L191,.L190
	.byte	2
	.word	.L159
	.byte	3
	.byte	'Dem_PreStoredFFInitCheckNvM',0,1,228,5,6,1,1,1
	.word	.L156,.L291,.L155
	.byte	4
	.word	.L156,.L291
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_PreStoredFFInitCheckNvM')
	.sect	'.debug_abbrev'
.L189:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_PreStoredFFInitCheckNvM')
	.sect	'.debug_line'
.L190:
	.word	.L570-.L569
.L569:
	.half	3
	.word	.L572-.L571
.L571:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0,0,0,0,0
.L572:
	.byte	5,1,7,0,5,2
	.word	.L156
	.byte	3,148,6,1,7,9
	.half	.L192-.L156
	.byte	0,1,1
.L570:
	.sdecl	'.debug_ranges',debug,cluster('Dem_PreStoredFFInitCheckNvM')
	.sect	'.debug_ranges'
.L191:
	.word	-1,.L156,0,.L192-.L156,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_PreStoredFFShutdown')
	.sect	'.debug_info'
.L193:
	.word	203
	.half	3
	.word	.L194
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L196,.L195
	.byte	2
	.word	.L159
	.byte	3
	.byte	'Dem_PreStoredFFShutdown',0,1,152,6,6,1,1,1
	.word	.L158,.L292,.L157
	.byte	4
	.word	.L158,.L292
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_PreStoredFFShutdown')
	.sect	'.debug_abbrev'
.L194:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_PreStoredFFShutdown')
	.sect	'.debug_line'
.L195:
	.word	.L574-.L573
.L573:
	.half	3
	.word	.L576-.L575
.L575:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0,0,0,0,0
.L576:
	.byte	5,1,7,0,5,2
	.word	.L158
	.byte	3,161,6,1,7,9
	.half	.L197-.L158
	.byte	0,1,1
.L574:
	.sdecl	'.debug_ranges',debug,cluster('Dem_PreStoredFFShutdown')
	.sect	'.debug_ranges'
.L196:
	.word	-1,.L158,0,.L197-.L158,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_EvBuffInsert')
	.sect	'.debug_info'
.L198:
	.word	1169
	.half	3
	.word	.L199
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L201,.L200
	.byte	2
	.word	.L159
	.byte	3
	.byte	'Dem_EvBuffInsert',0,1,159,3,19
	.word	.L245
	.byte	1,1,1
	.word	.L142,.L293,.L141
	.byte	4
	.byte	'eventType',0,1,159,3,57
	.word	.L245,.L294
	.byte	4
	.byte	'eventId',0,1,160,3,25
	.word	.L247,.L295
	.byte	4
	.byte	'debug0',0,1,161,3,9
	.word	.L276,.L296
	.byte	4
	.byte	'debug1',0,1,161,3,9
	.word	.L276,.L297
	.byte	5
	.word	.L142,.L293
	.byte	6
	.byte	'EnvData',0,1,164,3,34
	.word	.L298,.L299
	.byte	6
	.byte	'eventInserted',0,1,176,3,23
	.word	.L245,.L300
	.byte	6
	.byte	'counter',0,1,177,3,17
	.word	.L301,.L302
	.byte	6
	.byte	'skipCausalCheck_flag',0,1,178,3,23
	.word	.L245,.L303
	.byte	6
	.byte	'storeLoc',0,1,179,3,17
	.word	.L301,.L304
	.byte	7
	.word	.L305,.L39,.L42
	.byte	8
	.word	.L306,.L307
	.byte	9
	.word	.L308,.L39,.L42
	.byte	0,7
	.word	.L309,.L42,.L43
	.byte	8
	.word	.L310,.L311
	.byte	9
	.word	.L312,.L42,.L43
	.byte	0,7
	.word	.L313,.L43,.L44
	.byte	8
	.word	.L314,.L315
	.byte	8
	.word	.L316,.L317
	.byte	8
	.word	.L318,.L319
	.byte	9
	.word	.L320,.L43,.L44
	.byte	0,7
	.word	.L305,.L48,.L51
	.byte	8
	.word	.L306,.L307
	.byte	9
	.word	.L308,.L48,.L51
	.byte	0,7
	.word	.L321,.L51,.L52
	.byte	8
	.word	.L322,.L323
	.byte	8
	.word	.L324,.L325
	.byte	9
	.word	.L326,.L51,.L52
	.byte	0,7
	.word	.L327,.L60,.L58
	.byte	8
	.word	.L328,.L329
	.byte	8
	.word	.L330,.L331
	.byte	10
	.word	.L332,.L60,.L58
	.byte	7
	.word	.L333,.L334,.L58
	.byte	8
	.word	.L335,.L336
	.byte	8
	.word	.L337,.L338
	.byte	8
	.word	.L339,.L340
	.byte	10
	.word	.L341,.L334,.L58
	.byte	7
	.word	.L342,.L343,.L62
	.byte	8
	.word	.L344,.L345
	.byte	8
	.word	.L346,.L347
	.byte	10
	.word	.L348,.L343,.L62
	.byte	6
	.byte	'element_pos',0,2,36,18
	.word	.L349,.L350
	.byte	6
	.byte	'local_bitpos',0,2,37,18
	.word	.L351,.L352
	.byte	6
	.byte	'mask',0,2,38,18
	.word	.L353,.L354
	.byte	0,0,7
	.word	.L355,.L61,.L63
	.byte	8
	.word	.L356,.L357
	.byte	8
	.word	.L358,.L359
	.byte	10
	.word	.L360,.L61,.L63
	.byte	6
	.byte	'element_pos',0,2,49,18
	.word	.L361,.L362
	.byte	6
	.byte	'local_bitpos',0,2,50,18
	.word	.L363,.L364
	.byte	6
	.byte	'mask',0,2,51,18
	.word	.L365,.L366
	.byte	0,0,0,0,0,0,7
	.word	.L367,.L368,.L369
	.byte	8
	.word	.L370,.L371
	.byte	10
	.word	.L372,.L368,.L369
	.byte	7
	.word	.L259,.L373,.L69
	.byte	8
	.word	.L261,.L374
	.byte	8
	.word	.L263,.L375
	.byte	10
	.word	.L265,.L373,.L69
	.byte	7
	.word	.L266,.L373,.L68
	.byte	8
	.word	.L267,.L376
	.byte	8
	.word	.L269,.L377
	.byte	9
	.word	.L271,.L373,.L68
	.byte	0,0,0,0,0,7
	.word	.L378,.L56,.L75
	.byte	8
	.word	.L379,.L380
	.byte	8
	.word	.L381,.L382
	.byte	9
	.word	.L383,.L56,.L75
	.byte	0,7
	.word	.L384,.L385,.L77
	.byte	8
	.word	.L386,.L387
	.byte	8
	.word	.L388,.L389
	.byte	8
	.word	.L390,.L391
	.byte	9
	.word	.L392,.L385,.L77
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EvBuffInsert')
	.sect	'.debug_abbrev'
.L199:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_EvBuffInsert')
	.sect	'.debug_line'
.L200:
	.word	.L578-.L577
.L577:
	.half	3
	.word	.L580-.L579
.L579:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_BitArray.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evdep\\Dem_Dependencies.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_MemUtils.h',0,0,0,0,0
.L580:
	.byte	5,19,7,0,5,2
	.word	.L142
	.byte	3,158,3,1,5,37,9
	.half	.L474-.L142
	.byte	3,17,1,5,25,9
	.half	.L475-.L474
	.byte	3,1,1,5,44,9
	.half	.L476-.L475
	.byte	3,1,1,5,13,9
	.half	.L38-.L476
	.byte	3,6,1,5,12,9
	.half	.L581-.L38
	.byte	1,5,17,7,9
	.half	.L582-.L581
	.byte	3,1,1,5,27,9
	.half	.L583-.L582
	.byte	1,4,3,5,2,7,9
	.half	.L39-.L583
	.byte	3,179,125,1,4,4,9
	.half	.L42-.L39
	.byte	3,57,1,4,5,5,5,9
	.half	.L43-.L42
	.byte	3,167,127,1,4,1,5,17,9
	.half	.L44-.L43
	.byte	3,240,2,1,5,9,9
	.half	.L40-.L44
	.byte	3,4,1,5,5,9
	.half	.L584-.L40
	.byte	1,5,17,9
	.half	.L585-.L584
	.byte	3,2,1,5,9,9
	.half	.L45-.L585
	.byte	3,3,1,5,5,9
	.half	.L586-.L45
	.byte	1,5,25,7,9
	.half	.L587-.L586
	.byte	3,2,1,5,23,9
	.half	.L588-.L587
	.byte	1,5,21,9
	.half	.L589-.L588
	.byte	3,1,1,5,34,9
	.half	.L590-.L589
	.byte	3,1,1,5,39,9
	.half	.L46-.L590
	.byte	3,4,1,5,55,9
	.half	.L478-.L46
	.byte	1,5,15,9
	.half	.L479-.L478
	.byte	3,17,1,5,43,7,9
	.half	.L591-.L479
	.byte	1,5,42,9
	.half	.L592-.L591
	.byte	1,5,21,7,9
	.half	.L593-.L592
	.byte	3,1,1,5,31,9
	.half	.L594-.L593
	.byte	1,5,21,7,9
	.half	.L595-.L594
	.byte	3,1,1,5,31,9
	.half	.L596-.L595
	.byte	1,4,3,5,2,7,9
	.half	.L48-.L596
	.byte	3,140,125,1,4,6,5,5,9
	.half	.L51-.L48
	.byte	3,184,1,1,4,1,5,22,9
	.half	.L52-.L51
	.byte	3,193,1,1,5,28,7,9
	.half	.L597-.L52
	.byte	3,6,1,5,21,9
	.half	.L598-.L597
	.byte	1,5,55,9
	.half	.L47-.L598
	.byte	3,12,1,5,14,9
	.half	.L482-.L47
	.byte	1,5,21,9
	.half	.L477-.L482
	.byte	3,2,1,5,5,9
	.half	.L599-.L477
	.byte	1,5,22,7,9
	.half	.L600-.L599
	.byte	3,2,1,5,35,9
	.half	.L601-.L600
	.byte	1,5,46,9
	.half	.L602-.L601
	.byte	1,5,45,9
	.half	.L603-.L602
	.byte	1,5,55,9
	.half	.L604-.L603
	.byte	1,5,21,9
	.half	.L605-.L604
	.byte	1,5,54,7,9
	.half	.L606-.L605
	.byte	3,1,1,5,65,9
	.half	.L607-.L606
	.byte	1,5,13,7,9
	.half	.L485-.L607
	.byte	3,3,1,5,30,7,9
	.half	.L486-.L485
	.byte	3,2,1,5,46,9
	.half	.L608-.L486
	.byte	1,5,68,9
	.half	.L609-.L608
	.byte	3,2,1,5,78,9
	.half	.L610-.L609
	.byte	1,5,21,9
	.half	.L483-.L610
	.byte	3,1,1,5,17,9
	.half	.L611-.L483
	.byte	1,5,59,7,9
	.half	.L612-.L611
	.byte	3,2,1,4,7,5,31,9
	.half	.L60-.L612
	.byte	3,200,1,1,5,59,9
	.half	.L487-.L60
	.byte	1,4,2,5,5,9
	.half	.L334-.L487
	.byte	3,242,122,1,5,42,7,9
	.half	.L343-.L334
	.byte	3,100,1,5,43,9
	.half	.L488-.L343
	.byte	3,1,1,5,14,9
	.half	.L613-.L488
	.byte	3,2,1,5,26,9
	.half	.L614-.L613
	.byte	1,5,11,9
	.half	.L490-.L614
	.byte	3,2,1,5,25,9
	.half	.L489-.L490
	.byte	1,5,5,9
	.half	.L615-.L489
	.byte	3,1,1,5,49,9
	.half	.L62-.L615
	.byte	3,23,1,5,42,9
	.half	.L61-.L62
	.byte	3,112,1,5,43,9
	.half	.L491-.L61
	.byte	3,1,1,5,14,9
	.half	.L616-.L491
	.byte	3,2,1,5,26,9
	.half	.L617-.L616
	.byte	1,5,11,9
	.half	.L494-.L617
	.byte	3,2,1,5,37,9
	.half	.L493-.L494
	.byte	1,5,25,9
	.half	.L495-.L493
	.byte	1,5,5,9
	.half	.L618-.L495
	.byte	3,1,1,9
	.half	.L63-.L618
	.byte	3,14,1,4,1,5,66,9
	.half	.L58-.L63
	.byte	3,198,3,1,5,21,9
	.half	.L496-.L58
	.byte	1,5,22,7,9
	.half	.L497-.L496
	.byte	3,1,1,5,32,9
	.half	.L619-.L497
	.byte	1,4,7,5,34,7,9
	.half	.L368-.L619
	.byte	3,241,0,1,5,52,9
	.half	.L498-.L368
	.byte	1,5,61,9
	.half	.L499-.L498
	.byte	1,5,69,9
	.half	.L620-.L499
	.byte	1,4,8,5,28,9
	.half	.L373-.L620
	.byte	3,193,123,1,5,47,9
	.half	.L621-.L373
	.byte	1,5,5,9
	.half	.L622-.L621
	.byte	1,5,73,9
	.half	.L68-.L622
	.byte	3,4,1,5,5,9
	.half	.L623-.L68
	.byte	1,4,7,5,4,9
	.half	.L69-.L623
	.byte	3,187,4,1,4,1,5,23,9
	.half	.L70-.L69
	.byte	3,144,127,1,5,61,7,9
	.half	.L369-.L70
	.byte	3,3,1,5,59,9
	.half	.L624-.L369
	.byte	1,5,24,9
	.half	.L625-.L624
	.byte	3,3,1,5,17,9
	.half	.L626-.L625
	.byte	1,5,13,9
	.half	.L56-.L626
	.byte	3,179,125,1,5,41,9
	.half	.L627-.L56
	.byte	3,127,1,5,40,9
	.half	.L484-.L627
	.byte	1,5,55,9
	.half	.L628-.L484
	.byte	1,5,16,9
	.half	.L500-.L628
	.byte	1,5,55,7,9
	.half	.L501-.L500
	.byte	3,1,1,5,66,9
	.half	.L629-.L501
	.byte	1,5,13,9
	.half	.L630-.L629
	.byte	1,5,5,9
	.half	.L73-.L630
	.byte	3,127,1,5,19,9
	.half	.L75-.L73
	.byte	3,212,2,1,5,27,7,9
	.half	.L631-.L75
	.byte	3,1,1,5,26,9
	.half	.L632-.L631
	.byte	1,5,27,7,9
	.half	.L633-.L632
	.byte	3,1,1,5,37,9
	.half	.L634-.L633
	.byte	1,5,18,7,9
	.half	.L76-.L634
	.byte	3,3,1,5,28,9
	.half	.L635-.L76
	.byte	1,5,55,7,9
	.half	.L502-.L635
	.byte	3,4,1,5,54,9
	.half	.L503-.L502
	.byte	3,3,1,9
	.half	.L504-.L503
	.byte	3,1,1,5,13,9
	.half	.L636-.L504
	.byte	3,3,1,4,9,5,49,9
	.half	.L385-.L636
	.byte	3,238,123,1,4,1,5,55,9
	.half	.L77-.L385
	.byte	3,159,4,1,5,53,9
	.half	.L637-.L77
	.byte	1,5,23,9
	.half	.L638-.L637
	.byte	3,3,1,5,9,9
	.half	.L639-.L638
	.byte	3,4,1,5,69,7,9
	.half	.L640-.L639
	.byte	3,2,1,5,5,9
	.half	.L55-.L640
	.byte	3,6,1,5,1,9
	.half	.L54-.L55
	.byte	3,1,1,7,9
	.half	.L202-.L54
	.byte	0,1,1
.L578:
	.sdecl	'.debug_ranges',debug,cluster('Dem_EvBuffInsert')
	.sect	'.debug_ranges'
.L201:
	.word	-1,.L142,0,.L202-.L142,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_EvBuffGetEvent')
	.sect	'.debug_info'
.L203:
	.word	301
	.half	3
	.word	.L204
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L206,.L205
	.byte	2
	.word	.L159
	.byte	3
	.byte	'Dem_EvBuffGetEvent',0,1,181,2,24
	.word	.L393
	.byte	1,1,1
	.word	.L138,.L394,.L137
	.byte	4
	.byte	'locationIndex',0,1,181,2,52
	.word	.L395,.L396
	.byte	5
	.word	.L138,.L394
	.byte	6
	.byte	'fEvent',0,1,183,2,22
	.word	.L397,.L398
	.byte	6
	.byte	'i',0,1,184,2,18
	.word	.L301,.L399
	.byte	7
	.word	.L400,.L401,.L33
	.byte	8
	.word	.L402,.L403
	.byte	9
	.word	.L404,.L401,.L33
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EvBuffGetEvent')
	.sect	'.debug_abbrev'
.L204:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_EvBuffGetEvent')
	.sect	'.debug_line'
.L205:
	.word	.L642-.L641
.L641:
	.half	3
	.word	.L644-.L643
.L643:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuffEvent.h',0,0,0,0,0
.L644:
	.byte	5,29,7,0,5,2
	.word	.L138
	.byte	3,182,2,1,5,20,9
	.half	.L459-.L138
	.byte	3,1,1,5,18,9
	.half	.L460-.L459
	.byte	3,3,1,5,10,9
	.half	.L31-.L460
	.byte	3,2,1,5,37,9
	.half	.L645-.L31
	.byte	3,3,1,5,13,9
	.half	.L646-.L645
	.byte	1,5,26,9
	.half	.L647-.L646
	.byte	1,5,36,9
	.half	.L648-.L647
	.byte	1,5,39,9
	.half	.L649-.L648
	.byte	1,5,9,9
	.half	.L650-.L649
	.byte	1,4,2,5,5,7,9
	.half	.L401-.L650
	.byte	3,165,126,1,4,1,5,20,9
	.half	.L33-.L401
	.byte	3,221,1,1,5,51,7,9
	.half	.L651-.L33
	.byte	3,2,1,5,62,9
	.half	.L652-.L651
	.byte	1,5,32,7,9
	.half	.L653-.L652
	.byte	3,4,1,5,24,9
	.half	.L654-.L653
	.byte	3,1,1,5,17,9
	.half	.L655-.L654
	.byte	3,1,1,5,18,9
	.half	.L30-.L655
	.byte	3,113,1,5,5,7,9
	.half	.L36-.L30
	.byte	3,19,1,5,1,9
	.half	.L37-.L36
	.byte	3,1,1,7,9
	.half	.L207-.L37
	.byte	0,1,1
.L642:
	.sdecl	'.debug_ranges',debug,cluster('Dem_EvBuffGetEvent')
	.sect	'.debug_ranges'
.L206:
	.word	-1,.L138,0,.L207-.L138,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_EvBuffRemoveEvent')
	.sect	'.debug_info'
.L208:
	.word	228
	.half	3
	.word	.L209
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L211,.L210
	.byte	2
	.word	.L159
	.byte	3
	.byte	'Dem_EvBuffRemoveEvent',0,1,201,4,6,1,1,1
	.word	.L82,.L405,.L143
	.byte	4
	.byte	'locationIndex',0,1,201,4,36
	.word	.L276,.L406
	.byte	5
	.word	.L82,.L405
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EvBuffRemoveEvent')
	.sect	'.debug_abbrev'
.L209:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_EvBuffRemoveEvent')
	.sect	'.debug_line'
.L210:
	.word	.L657-.L656
.L656:
	.half	3
	.word	.L659-.L658
.L658:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0,0,0,0,0
.L659:
	.byte	5,5,7,0,5,2
	.word	.L82
	.byte	3,203,4,1,5,33,7,9
	.half	.L660-.L82
	.byte	3,2,1,5,9,9
	.half	.L506-.L660
	.byte	1,5,32,9
	.half	.L661-.L506
	.byte	1,5,58,9
	.half	.L662-.L661
	.byte	1,5,56,9
	.half	.L663-.L662
	.byte	1,5,1,9
	.half	.L83-.L663
	.byte	3,2,1,7,9
	.half	.L212-.L83
	.byte	0,1,1
.L657:
	.sdecl	'.debug_ranges',debug,cluster('Dem_EvBuffRemoveEvent')
	.sect	'.debug_ranges'
.L211:
	.word	-1,.L82,0,.L212-.L82,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_EvBuffEnvCaptureData')
	.sect	'.debug_info'
.L213:
	.word	286
	.half	3
	.word	.L214
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L216,.L215
	.byte	2
	.word	.L159
	.byte	3
	.byte	'Dem_EvBuffEnvCaptureData',0,1,136,3,6,1,1,1
	.word	.L140,.L407,.L139
	.byte	4
	.byte	'EventId',0,1,137,3,21
	.word	.L247,.L408
	.byte	4
	.byte	'EnvData',0,1,138,3,12
	.word	.L409,.L410
	.byte	4
	.byte	'debug0',0,1,139,3,5
	.word	.L276,.L411
	.byte	4
	.byte	'debug1',0,1,139,3,5
	.word	.L276,.L412
	.byte	5
	.word	.L140,.L407
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EvBuffEnvCaptureData')
	.sect	'.debug_abbrev'
.L214:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_EvBuffEnvCaptureData')
	.sect	'.debug_line'
.L215:
	.word	.L665-.L664
.L664:
	.half	3
	.word	.L667-.L666
.L666:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0,0,0,0,0
.L667:
	.byte	5,6,7,0,5,2
	.word	.L140
	.byte	3,135,3,1,5,40,9
	.half	.L668-.L140
	.byte	3,6,1,5,73,9
	.half	.L462-.L668
	.byte	1,5,40,9
	.half	.L461-.L462
	.byte	3,1,1,5,73,9
	.half	.L669-.L461
	.byte	1,5,1,9
	.half	.L468-.L669
	.byte	3,12,1,7,9
	.half	.L217-.L468
	.byte	0,1,1
.L665:
	.sdecl	'.debug_ranges',debug,cluster('Dem_EvBuffEnvCaptureData')
	.sect	'.debug_ranges'
.L216:
	.word	-1,.L140,0,.L217-.L140,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_EvBuffClear')
	.sect	'.debug_info'
.L218:
	.word	232
	.half	3
	.word	.L219
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L221,.L220
	.byte	2
	.word	.L159
	.byte	3
	.byte	'Dem_EvBuffClear',0,1,159,2,6,1,1,1
	.word	.L136,.L413,.L135
	.byte	4
	.byte	'EventId',0,1,159,2,38
	.word	.L247,.L414
	.byte	5
	.word	.L136,.L413
	.byte	6
	.byte	'i',0,1,161,2,18
	.word	.L301,.L415
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EvBuffClear')
	.sect	'.debug_abbrev'
.L219:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_EvBuffClear')
	.sect	'.debug_line'
.L220:
	.word	.L671-.L670
.L670:
	.half	3
	.word	.L673-.L672
.L672:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0,0,0,0,0
.L673:
	.byte	5,20,7,0,5,2
	.word	.L136
	.byte	3,160,2,1,5,18,9
	.half	.L457-.L136
	.byte	3,5,1,5,10,9
	.half	.L27-.L457
	.byte	3,2,1,5,37,9
	.half	.L674-.L27
	.byte	3,1,1,5,13,9
	.half	.L675-.L674
	.byte	1,5,36,9
	.half	.L676-.L675
	.byte	1,5,39,9
	.half	.L677-.L676
	.byte	1,5,9,9
	.half	.L678-.L677
	.byte	1,5,50,7,9
	.half	.L679-.L678
	.byte	3,3,1,5,48,9
	.half	.L458-.L679
	.byte	1,5,13,9
	.half	.L680-.L458
	.byte	3,1,1,5,18,9
	.half	.L26-.L680
	.byte	3,121,1,5,1,7,9
	.half	.L29-.L26
	.byte	3,12,1,7,9
	.half	.L222-.L29
	.byte	0,1,1
.L671:
	.sdecl	'.debug_ranges',debug,cluster('Dem_EvBuffClear')
	.sect	'.debug_ranges'
.L221:
	.word	-1,.L136,0,.L222-.L136,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_EvBuffIsEventPending')
	.sect	'.debug_info'
.L223:
	.word	269
	.half	3
	.word	.L224
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L226,.L225
	.byte	2
	.word	.L159
	.byte	3
	.byte	'Dem_EvBuffIsEventPending',0,1,143,5,19
	.word	.L245
	.byte	1,1,1
	.word	.L149,.L416,.L148
	.byte	4
	.byte	'EventId',0,1,143,5,61
	.word	.L247,.L417
	.byte	5
	.word	.L149,.L416
	.byte	6
	.byte	'EventFound',0,1,145,5,23
	.word	.L245,.L418
	.byte	6
	.byte	'i',0,1,146,5,17
	.word	.L301,.L419
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EvBuffIsEventPending')
	.sect	'.debug_abbrev'
.L224:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_EvBuffIsEventPending')
	.sect	'.debug_line'
.L225:
	.word	.L682-.L681
.L681:
	.half	3
	.word	.L684-.L683
.L683:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0,0,0,0,0
.L684:
	.byte	5,34,7,0,5,2
	.word	.L149
	.byte	3,144,5,1,5,19,9
	.half	.L508-.L149
	.byte	3,1,1,5,17,9
	.half	.L509-.L508
	.byte	3,5,1,5,10,9
	.half	.L90-.L509
	.byte	3,2,1,5,42,9
	.half	.L685-.L90
	.byte	3,3,1,5,18,9
	.half	.L686-.L685
	.byte	1,5,31,9
	.half	.L687-.L686
	.byte	1,5,41,9
	.half	.L688-.L687
	.byte	1,5,44,9
	.half	.L689-.L688
	.byte	1,5,17,9
	.half	.L690-.L689
	.byte	1,5,89,7,9
	.half	.L691-.L690
	.byte	1,5,47,7,9
	.half	.L91-.L691
	.byte	3,3,1,5,58,9
	.half	.L692-.L91
	.byte	1,5,24,7,9
	.half	.L693-.L692
	.byte	3,4,1,5,15,9
	.half	.L694-.L693
	.byte	3,1,1,5,17,9
	.half	.L89-.L694
	.byte	3,115,1,5,5,7,9
	.half	.L695-.L89
	.byte	3,19,1,5,1,9
	.half	.L94-.L695
	.byte	3,1,1,7,9
	.half	.L227-.L94
	.byte	0,1,1
.L682:
	.sdecl	'.debug_ranges',debug,cluster('Dem_EvBuffIsEventPending')
	.sect	'.debug_ranges'
.L226:
	.word	-1,.L149,0,.L227-.L149,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_EvBuffGetLocationToWrite')
	.sect	'.debug_info'
.L228:
	.word	543
	.half	3
	.word	.L229
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L231,.L230
	.byte	2
	.word	.L159
	.byte	3
	.byte	'Dem_EvBuffGetLocationToWrite',0,1,107,20
	.word	.L301
	.byte	1,1
	.word	.L130,.L420,.L129
	.byte	4
	.byte	'EventIdOfNewEvent',0,1,107,66
	.word	.L247,.L421
	.byte	4
	.byte	'typeOfNewEvent',0,1,107,106
	.word	.L409,.L422
	.byte	5
	.word	.L130,.L420
	.byte	6
	.byte	'i',0,1,109,17
	.word	.L301,.L423
	.byte	6
	.byte	'checkLoc',0,1,110,17
	.word	.L301,.L424
	.byte	6
	.byte	'prioOfNewEvent',0,1,111,18
	.word	.L301,.L425
	.byte	6
	.byte	'writeLoc',0,1,113,17
	.word	.L301,.L426
	.byte	6
	.byte	'writeLocPrio',0,1,114,18
	.word	.L301,.L427
	.byte	6
	.byte	'tempPrio',0,1,115,18
	.word	.L301,.L428
	.byte	7
	.word	.L429,.L430,.L2
	.byte	8
	.word	.L431,.L432
	.byte	8
	.word	.L433,.L434
	.byte	9
	.word	.L435,.L430,.L2
	.byte	0,7
	.word	.L436,.L9,.L437
	.byte	8
	.word	.L438,.L439
	.byte	10
	.word	.L440,.L441
	.byte	7
	.word	.L429,.L18,.L20
	.byte	8
	.word	.L431,.L432
	.byte	8
	.word	.L433,.L434
	.byte	9
	.word	.L435,.L18,.L20
	.byte	0,0,0,7
	.word	.L436,.L442,.L3
	.byte	8
	.word	.L438,.L439
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EvBuffGetLocationToWrite')
	.sect	'.debug_abbrev'
.L229:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,10,11,1,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_EvBuffGetLocationToWrite')
	.sect	'.debug_line'
.L230:
	.word	.L697-.L696
.L696:
	.half	3
	.word	.L699-.L698
.L698:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0,0,0,0,0
.L699:
	.byte	5,19,7,0,5,2
	.word	.L130
	.byte	3,236,0,1,5,82,9
	.half	.L449-.L130
	.byte	3,2,1,5,31,9
	.half	.L430-.L449
	.byte	3,80,1,5,62,9
	.half	.L700-.L430
	.byte	1,5,5,9
	.half	.L450-.L700
	.byte	1,5,26,9
	.half	.L2-.L450
	.byte	3,50,1,5,18,9
	.half	.L451-.L2
	.byte	3,4,1,5,10,9
	.half	.L4-.L451
	.byte	3,2,1,5,13,9
	.half	.L701-.L4
	.byte	3,2,1,5,9,9
	.half	.L702-.L701
	.byte	1,5,22,7,9
	.half	.L703-.L702
	.byte	3,3,1,5,25,9
	.half	.L453-.L703
	.byte	1,5,51,9
	.half	.L5-.L453
	.byte	3,7,1,5,13,9
	.half	.L454-.L5
	.byte	3,2,1,5,17,7,9
	.half	.L704-.L454
	.byte	3,2,1,5,13,9
	.half	.L6-.L704
	.byte	3,7,1,5,26,9
	.half	.L705-.L6
	.byte	1,5,37,9
	.half	.L706-.L705
	.byte	1,5,36,9
	.half	.L707-.L706
	.byte	1,5,46,9
	.half	.L708-.L707
	.byte	1,5,9,9
	.half	.L709-.L708
	.byte	1,5,50,7,9
	.half	.L710-.L709
	.byte	3,3,1,5,13,9
	.half	.L711-.L710
	.byte	1,5,17,7,9
	.half	.L712-.L711
	.byte	3,2,1,5,20,9
	.half	.L10-.L712
	.byte	3,3,1,5,61,7,9
	.half	.L713-.L10
	.byte	3,1,1,5,35,7,9
	.half	.L714-.L713
	.byte	3,2,1,5,33,9
	.half	.L715-.L714
	.byte	1,5,17,9
	.half	.L716-.L715
	.byte	3,1,1,5,20,9
	.half	.L12-.L716
	.byte	3,4,1,5,13,9
	.half	.L456-.L12
	.byte	1,5,22,9
	.half	.L9-.L456
	.byte	3,178,127,1,5,5,9
	.half	.L717-.L9
	.byte	1,5,16,7,9
	.half	.L718-.L717
	.byte	3,2,1,5,9,9
	.half	.L719-.L718
	.byte	1,5,22,9
	.half	.L16-.L719
	.byte	3,3,1,5,5,9
	.half	.L720-.L16
	.byte	1,5,9,7,9
	.half	.L721-.L720
	.byte	3,3,1,5,31,9
	.half	.L18-.L721
	.byte	3,103,1,5,62,9
	.half	.L722-.L18
	.byte	1,5,5,9
	.half	.L723-.L722
	.byte	1,9
	.half	.L20-.L723
	.byte	3,28,1,5,9,9
	.half	.L17-.L20
	.byte	3,199,0,1,5,22,7,9
	.half	.L437-.L17
	.byte	3,2,1,5,26,9
	.half	.L442-.L437
	.byte	3,1,1,5,18,9
	.half	.L3-.L442
	.byte	3,80,1,5,21,7,9
	.half	.L8-.L3
	.byte	3,53,1,5,5,9
	.half	.L724-.L8
	.byte	1,5,9,7,9
	.half	.L725-.L724
	.byte	3,2,1,5,22,9
	.half	.L726-.L725
	.byte	1,5,38,9
	.half	.L727-.L726
	.byte	1,5,13,9
	.half	.L728-.L727
	.byte	3,1,1,5,9,9
	.half	.L729-.L728
	.byte	1,5,26,7,9
	.half	.L730-.L729
	.byte	3,2,1,5,45,9
	.half	.L731-.L730
	.byte	1,5,5,9
	.half	.L23-.L731
	.byte	3,4,1,5,1,9
	.half	.L11-.L23
	.byte	3,1,1,7,9
	.half	.L232-.L11
	.byte	0,1,1
.L697:
	.sdecl	'.debug_ranges',debug,cluster('Dem_EvBuffGetLocationToWrite')
	.sect	'.debug_ranges'
.L231:
	.word	-1,.L130,0,.L232-.L130,0,0
.L441:
	.word	-1,.L130,.L9-.L130,.L437-.L130,.L442-.L130,.L3-.L130,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_EvBuffHandleElapsedCounter')
	.sect	'.debug_info'
.L233:
	.word	236
	.half	3
	.word	.L234
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L236,.L235
	.byte	2
	.word	.L159
	.byte	3
	.byte	'Dem_EvBuffHandleElapsedCounter',0,1,216,1,13,1,1
	.word	.L132,.L443,.L131
	.byte	4
	.byte	'bufferElement',0,1,216,1,67
	.word	.L393,.L444
	.byte	5
	.word	.L132,.L443
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EvBuffHandleElapsedCounter')
	.sect	'.debug_abbrev'
.L234:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_EvBuffHandleElapsedCounter')
	.sect	'.debug_line'
.L235:
	.word	.L733-.L732
.L732:
	.half	3
	.word	.L735-.L734
.L734:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0,0,0,0,0
.L735:
	.byte	5,1,7,0,5,2
	.word	.L132
	.byte	3,245,1,1,7,9
	.half	.L237-.L132
	.byte	0,1,1
.L733:
	.sdecl	'.debug_ranges',debug,cluster('Dem_EvBuffHandleElapsedCounter')
	.sect	'.debug_ranges'
.L236:
	.word	-1,.L132,0,.L237-.L132,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_EvBuffRemovePrestored')
	.sect	'.debug_info'
.L238:
	.word	241
	.half	3
	.word	.L239
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L241,.L240
	.byte	2
	.word	.L159
	.byte	3
	.byte	'Dem_EvBuffRemovePrestored',0,1,218,4,13,1,1
	.word	.L145,.L445,.L144
	.byte	4
	.byte	'EventId',0,1,218,4,56
	.word	.L247,.L446
	.byte	5
	.word	.L145,.L445
	.byte	6
	.byte	'i',0,1,220,4,17
	.word	.L301,.L447
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EvBuffRemovePrestored')
	.sect	'.debug_abbrev'
.L239:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_EvBuffRemovePrestored')
	.sect	'.debug_line'
.L240:
	.word	.L737-.L736
.L736:
	.half	3
	.word	.L739-.L738
.L738:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0,0,0,0,0
.L739:
	.byte	5,11,7,0,5,2
	.word	.L145
	.byte	3,223,4,1,5,44,9
	.half	.L507-.L145
	.byte	1,5,46,9
	.half	.L85-.L507
	.byte	3,3,1,5,22,9
	.half	.L740-.L85
	.byte	1,5,35,9
	.half	.L741-.L740
	.byte	1,5,45,9
	.half	.L742-.L741
	.byte	1,5,48,9
	.half	.L743-.L742
	.byte	1,5,21,9
	.half	.L744-.L743
	.byte	1,5,29,7,9
	.half	.L745-.L744
	.byte	3,1,1,5,47,7,9
	.half	.L86-.L745
	.byte	3,1,1,5,58,9
	.half	.L746-.L86
	.byte	1,5,50,7,9
	.half	.L747-.L746
	.byte	3,3,1,5,48,9
	.half	.L748-.L747
	.byte	1,5,47,9
	.half	.L87-.L748
	.byte	3,120,1,5,44,9
	.half	.L84-.L87
	.byte	1,5,1,7,9
	.half	.L749-.L84
	.byte	3,13,1,7,9
	.half	.L242-.L749
	.byte	0,1,1
.L737:
	.sdecl	'.debug_ranges',debug,cluster('Dem_EvBuffRemovePrestored')
	.sect	'.debug_ranges'
.L241:
	.word	-1,.L145,0,.L242-.L145,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_EvtBuffer')
	.sect	'.debug_info'
.L243:
	.word	170
	.half	3
	.word	.L244
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L159
	.byte	3
	.byte	'Dem_EvtBuffer',0,32,28,20
	.word	.L448
	.byte	1,5,3
	.word	Dem_EvtBuffer
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EvtBuffer')
	.sect	'.debug_abbrev'
.L244:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_ClearPrestoredFreezeFrame')
	.sect	'.debug_loc'
.L154:
	.word	-1,.L113,0,.L246-.L113
	.half	2
	.byte	138,0
	.word	0,0
.L257:
	.word	0,0
.L248:
	.word	-1,.L113,.L115-.L113,.L525-.L113
	.half	1
	.byte	84
	.word	.L122-.L113,.L526-.L113
	.half	1
	.byte	84
	.word	0,0
.L270:
	.word	0,0
.L264:
	.word	0,0
.L252:
	.word	0,0
.L268:
	.word	0,0
.L262:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_EvBuffClear')
	.sect	'.debug_loc'
.L135:
	.word	-1,.L136,0,.L413-.L136
	.half	2
	.byte	138,0
	.word	0,0
.L414:
	.word	-1,.L136,0,.L413-.L136
	.half	1
	.byte	84
	.word	0,0
.L415:
	.word	-1,.L136,.L457-.L136,.L458-.L136
	.half	1
	.byte	95
	.word	.L26-.L136,.L29-.L136
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_EvBuffEnvCaptureData')
	.sect	'.debug_loc'
.L139:
	.word	-1,.L140,0,.L407-.L140
	.half	2
	.byte	138,0
	.word	0,0
.L410:
	.word	-1,.L140,0,.L461-.L140
	.half	1
	.byte	100
	.word	.L465-.L140,.L407-.L140
	.half	1
	.byte	111
	.word	.L469-.L140,.L468-.L140
	.half	1
	.byte	100
	.word	0,0
.L408:
	.word	-1,.L140,0,.L461-.L140
	.half	1
	.byte	84
	.word	.L464-.L140,.L407-.L140
	.half	1
	.byte	95
	.word	.L467-.L140,.L468-.L140
	.half	1
	.byte	84
	.word	0,0
.L411:
	.word	-1,.L140,0,.L462-.L140
	.half	1
	.byte	85
	.word	.L466-.L140,.L463-.L140
	.half	1
	.byte	88
	.word	.L469-.L140,.L470-.L140
	.half	1
	.byte	88
	.word	0,0
.L412:
	.word	-1,.L140,0,.L463-.L140
	.half	1
	.byte	86
	.word	.L466-.L140,.L463-.L140
	.half	1
	.byte	89
	.word	.L469-.L140,.L470-.L140
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_EvBuffGetEvent')
	.sect	'.debug_loc'
.L137:
	.word	-1,.L138,0,.L394-.L138
	.half	2
	.byte	138,0
	.word	0,0
.L403:
	.word	0,0
.L398:
	.word	-1,.L138,.L459-.L138,.L394-.L138
	.half	1
	.byte	98
	.word	0,0
.L399:
	.word	-1,.L138,.L460-.L138,.L394-.L138
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L396:
	.word	-1,.L138,0,.L394-.L138
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_EvBuffGetLocationToWrite')
	.sect	'.debug_loc'
.L129:
	.word	-1,.L130,0,.L420-.L130
	.half	2
	.byte	138,0
	.word	0,0
.L432:
	.word	0,0
.L421:
	.word	-1,.L130,0,.L420-.L130
	.half	1
	.byte	84
	.word	0,0
.L439:
	.word	0,0
.L424:
	.word	-1,.L130,.L453-.L130,.L5-.L130
	.half	1
	.byte	85
	.word	.L454-.L130,.L3-.L130
	.half	1
	.byte	85
	.word	.L452-.L130,.L10-.L130
	.half	1
	.byte	82
	.word	.L455-.L130,.L12-.L130
	.half	1
	.byte	82
	.word	0,0
.L434:
	.word	0,0
.L423:
	.word	-1,.L130,.L449-.L130,.L420-.L130
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L425:
	.word	0,0
.L428:
	.word	0,0
.L422:
	.word	-1,.L130,0,.L420-.L130
	.half	1
	.byte	100
	.word	0,0
.L426:
	.word	-1,.L130,.L451-.L130,.L452-.L130
	.half	1
	.byte	82
	.word	.L10-.L130,.L455-.L130
	.half	1
	.byte	82
	.word	.L12-.L130,.L456-.L130
	.half	1
	.byte	82
	.word	.L9-.L130,.L11-.L130
	.half	1
	.byte	82
	.word	0,0
.L427:
	.word	-1,.L130,.L450-.L130,.L420-.L130
	.half	1
	.byte	81
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_EvBuffHandleElapsedCounter')
	.sect	'.debug_loc'
.L131:
	.word	-1,.L132,0,.L443-.L132
	.half	2
	.byte	138,0
	.word	0,0
.L444:
	.word	-1,.L132,0,.L443-.L132
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_EvBuffInsert')
	.sect	'.debug_loc'
.L141:
	.word	-1,.L142,0,.L471-.L142
	.half	2
	.byte	138,0
	.word	.L471-.L142,.L293-.L142
	.half	2
	.byte	138,8
	.word	.L293-.L142,.L293-.L142
	.half	2
	.byte	138,0
	.word	0,0
.L299:
	.word	-1,.L142,0,.L293-.L142
	.half	2
	.byte	145,124
	.word	0,0
.L315:
	.word	0,0
.L323:
	.word	0,0
.L371:
	.word	0,0
.L329:
	.word	0,0
.L325:
	.word	0,0
.L347:
	.word	0,0
.L359:
	.word	0,0
.L377:
	.word	0,0
.L338:
	.word	0,0
.L375:
	.word	0,0
.L345:
	.word	0,0
.L357:
	.word	0,0
.L336:
	.word	0,0
.L302:
	.word	-1,.L142,.L476-.L142,.L293-.L142
	.half	1
	.byte	92
	.word	0,0
.L319:
	.word	0,0
.L296:
	.word	-1,.L142,0,.L472-.L142
	.half	1
	.byte	86
	.word	.L478-.L142,.L473-.L142
	.half	1
	.byte	89
	.word	.L503-.L142,.L504-.L142
	.half	1
	.byte	89
	.word	0,0
.L297:
	.word	-1,.L142,0,.L472-.L142
	.half	1
	.byte	87
	.word	.L474-.L142,.L293-.L142
	.half	1
	.byte	90
	.word	.L472-.L142,.L479-.L142
	.half	1
	.byte	86
	.word	0,0
.L350:
	.word	-1,.L142,.L488-.L142,.L61-.L142
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L362:
	.word	-1,.L142,.L491-.L142,.L492-.L142
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L295:
	.word	-1,.L142,0,.L473-.L142
	.half	1
	.byte	85
	.word	.L478-.L142,.L473-.L142
	.half	1
	.byte	88
	.word	.L480-.L142,.L481-.L142
	.half	1
	.byte	88
	.word	.L481-.L142,.L482-.L142
	.half	1
	.byte	84
	.word	.L485-.L142,.L486-.L142
	.half	1
	.byte	88
	.word	.L487-.L142,.L334-.L142
	.half	1
	.byte	88
	.word	.L496-.L142,.L497-.L142
	.half	1
	.byte	88
	.word	.L498-.L142,.L499-.L142
	.half	1
	.byte	88
	.word	.L500-.L142,.L501-.L142
	.half	1
	.byte	88
	.word	.L502-.L142,.L503-.L142
	.half	1
	.byte	88
	.word	0,0
.L300:
	.word	-1,.L142,.L475-.L142,.L293-.L142
	.half	1
	.byte	91
	.word	.L505-.L142,.L54-.L142
	.half	1
	.byte	82
	.word	0,0
.L294:
	.word	-1,.L142,0,.L473-.L142
	.half	1
	.byte	84
	.word	0,.L293-.L142
	.half	2
	.byte	145,120
	.word	0,0
.L307:
	.word	0,0
.L311:
	.word	0,0
.L352:
	.word	-1,.L142,.L488-.L142,.L489-.L142
	.half	1
	.byte	95
	.word	0,0
.L364:
	.word	-1,.L142,.L491-.L142,.L493-.L142
	.half	1
	.byte	95
	.word	0,0
.L380:
	.word	0,0
.L354:
	.word	-1,.L142,.L490-.L142,.L61-.L142
	.half	1
	.byte	81
	.word	0,0
.L366:
	.word	-1,.L142,.L494-.L142,.L495-.L142
	.half	1
	.byte	81
	.word	0,0
.L382:
	.word	0,0
.L317:
	.word	0,0
.L391:
	.word	0,0
.L331:
	.word	0,0
.L303:
	.word	-1,.L142,.L38-.L142,.L477-.L142
	.half	1
	.byte	93
	.word	0,0
.L304:
	.word	-1,.L142,.L482-.L142,.L483-.L142
	.half	1
	.byte	82
	.word	.L477-.L142,.L484-.L142
	.half	1
	.byte	93
	.word	0,0
.L376:
	.word	0,0
.L374:
	.word	0,0
.L340:
	.word	0,0
.L387:
	.word	0,0
.L389:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_EvBuffIsEventPending')
	.sect	'.debug_loc'
.L148:
	.word	-1,.L149,0,.L416-.L149
	.half	2
	.byte	138,0
	.word	0,0
.L418:
	.word	-1,.L149,.L508-.L149,.L416-.L149
	.half	1
	.byte	82
	.word	0,0
.L417:
	.word	-1,.L149,0,.L416-.L149
	.half	1
	.byte	84
	.word	0,0
.L419:
	.word	-1,.L149,.L509-.L149,.L416-.L149
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_EvBuffMainFunction')
	.sect	'.debug_loc'
.L133:
	.word	-1,.L134,0,.L290-.L134
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_EvBuffRemoveAllPrestored')
	.sect	'.debug_loc'
.L146:
	.word	-1,.L147,0,.L289-.L147
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_EvBuffRemoveEvent')
	.sect	'.debug_loc'
.L143:
	.word	-1,.L82,0,.L405-.L82
	.half	2
	.byte	138,0
	.word	0,0
.L406:
	.word	-1,.L82,0,.L506-.L82
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_EvBuffRemovePrestored')
	.sect	'.debug_loc'
.L144:
	.word	-1,.L145,0,.L445-.L145
	.half	2
	.byte	138,0
	.word	0,0
.L446:
	.word	-1,.L145,0,.L445-.L145
	.half	1
	.byte	84
	.word	0,0
.L447:
	.word	-1,.L145,.L507-.L145,.L445-.L145
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_PreStoredFFInitCheckNvM')
	.sect	'.debug_loc'
.L155:
	.word	-1,.L156,0,.L291-.L156
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_PreStoredFFShutdown')
	.sect	'.debug_loc'
.L157:
	.word	-1,.L158,0,.L292-.L158
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_PrestoreFreezeFrame')
	.sect	'.debug_loc'
.L152:
	.word	-1,.L153,0,.L272-.L153
	.half	2
	.byte	138,0
	.word	0,0
.L273:
	.word	-1,.L153,0,.L524-.L153
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_PrestoreFreezeFrameWithEnvData')
	.sect	'.debug_loc'
.L150:
	.word	-1,.L151,0,.L274-.L151
	.half	2
	.byte	138,0
	.word	0,0
.L283:
	.word	0,0
.L275:
	.word	-1,.L151,0,.L510-.L151
	.half	1
	.byte	84
	.word	.L515-.L151,.L516-.L151
	.half	5
	.byte	144,32,157,32,0
	.word	.L104-.L151,.L517-.L151
	.half	1
	.byte	84
	.word	.L521-.L151,.L522-.L151
	.half	5
	.byte	144,32,157,32,0
	.word	.L517-.L151,.L518-.L151
	.half	5
	.byte	144,32,157,32,0
	.word	.L518-.L151,.L520-.L151
	.half	1
	.byte	85
	.word	0,0
.L279:
	.word	-1,.L151,.L97-.L151,.L274-.L151
	.half	1
	.byte	88
	.word	.L523-.L151,.L102-.L151
	.half	1
	.byte	82
	.word	0,0
.L288:
	.word	0,0
.L286:
	.word	0,0
.L281:
	.word	0,0
.L277:
	.word	-1,.L151,0,.L511-.L151
	.half	1
	.byte	85
	.word	.L104-.L151,.L518-.L151
	.half	1
	.byte	85
	.word	.L518-.L151,.L519-.L151
	.half	1
	.byte	81
	.word	.L519-.L151,.L520-.L151
	.half	1
	.byte	86
	.word	0,0
.L278:
	.word	-1,.L151,0,.L512-.L151
	.half	1
	.byte	86
	.word	.L513-.L151,.L514-.L151
	.half	1
	.byte	87
	.word	.L104-.L151,.L519-.L151
	.half	1
	.byte	86
	.word	.L104-.L151,.L520-.L151
	.half	1
	.byte	87
	.word	0,0
.L287:
	.word	0,0
.L285:
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L750:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Dem_EvBuffGetLocationToWrite')
	.sect	'.debug_frame'
	.word	20
	.word	.L750,.L130,.L420-.L130
	.byte	8,19,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Dem_EvBuffHandleElapsedCounter')
	.sect	'.debug_frame'
	.word	24
	.word	.L750,.L132,.L443-.L132
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Dem_EvBuffMainFunction')
	.sect	'.debug_frame'
	.word	24
	.word	.L750,.L134,.L290-.L134
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Dem_EvBuffClear')
	.sect	'.debug_frame'
	.word	24
	.word	.L750,.L136,.L413-.L136
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Dem_EvBuffGetEvent')
	.sect	'.debug_frame'
	.word	20
	.word	.L750,.L138,.L394-.L138
	.byte	8,19,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Dem_EvBuffEnvCaptureData')
	.sect	'.debug_frame'
	.word	12
	.word	.L750,.L140,.L407-.L140
	.sdecl	'.debug_frame',debug,cluster('Dem_EvBuffInsert')
	.sect	'.debug_frame'
	.word	36
	.word	.L750,.L142,.L293-.L142
	.byte	4
	.word	(.L471-.L142)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L293-.L471)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_EvBuffRemoveEvent')
	.sect	'.debug_frame'
	.word	24
	.word	.L750,.L82,.L405-.L82
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Dem_EvBuffRemovePrestored')
	.sect	'.debug_frame'
	.word	24
	.word	.L750,.L145,.L445-.L145
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_EvBuffRemoveAllPrestored')
	.sect	'.debug_frame'
	.word	12
	.word	.L750,.L147,.L289-.L147
	.sdecl	'.debug_frame',debug,cluster('Dem_EvBuffIsEventPending')
	.sect	'.debug_frame'
	.word	24
	.word	.L750,.L149,.L416-.L149
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Dem_PrestoreFreezeFrameWithEnvData')
	.sect	'.debug_frame'
	.word	12
	.word	.L750,.L151,.L274-.L151
	.sdecl	'.debug_frame',debug,cluster('Dem_PrestoreFreezeFrame')
	.sect	'.debug_frame'
	.word	12
	.word	.L750,.L153,.L272-.L153
	.sdecl	'.debug_frame',debug,cluster('Dem_ClearPrestoredFreezeFrame')
	.sect	'.debug_frame'
	.word	12
	.word	.L750,.L113,.L246-.L113
	.sdecl	'.debug_frame',debug,cluster('Dem_PreStoredFFInitCheckNvM')
	.sect	'.debug_frame'
	.word	24
	.word	.L750,.L156,.L291-.L156
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Dem_PreStoredFFShutdown')
	.sect	'.debug_frame'
	.word	24
	.word	.L750,.L158,.L292-.L158
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   803  #endif // (DEM_CFG_FFPRESTORAGESUPPORT == DEM_CFG_FFPRESTORAGESUPPORT_ON)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   804  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   805  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   806  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuff.c	   807  #include "Dem_Cfg_MemMap.h"

	; Module end
