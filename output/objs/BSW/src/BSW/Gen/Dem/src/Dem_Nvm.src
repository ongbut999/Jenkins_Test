	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc12328a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Dem\\src\\Dem_Nvm.src BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.c'

	
$TC16X
	
	.sdecl	'.text.Dem_Nvm.Dem_NvMInit',code,cluster('Dem_NvMInit')
	.sect	'.text.Dem_Nvm.Dem_NvMInit'
	.align	2
	
	.global	Dem_NvMInit

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	     1   
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	     2  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	     3  #include "Dem.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	     4  #include "Dem_Lib.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	     5  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	     6  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	     7  #include "Dem_Bfm.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	     8  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	     9  #include "Dem_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    10  #include "Dem_DisturbanceMemory.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    11  #include "Dem_EventStatus.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    12  #include "Dem_GenericNvData.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    13  #include "Dem_Obd.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    14  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED != DEM_CFG_ERASE_ALL_OFF)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    15  #include "Dem_PrjEraseAllNvMDataHandling.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    16  #endif
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    17  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    18  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    19  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    20  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    21  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    22  DEM_ARRAY_DEFINE(Dem_NvMBlockStatusDoubleBufferType, Dem_NvMBlockStatusDoubleBuffer, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    23  DEM_ARRAY_DEFINE(Dem_NvMStorageBufferType, Dem_NvMStorageBuffer, DEM_NVM_CFG_NUM_STORAGEBUFFER);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    24  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    25  Dem_EraseAllStatusType Dem_EraseAllNvMDataStatus;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    26  DEM_STATIC_ASSERT((DEM_ERASE_ALL_STATUS_NOREQUEST == 0), DEM_ERASE_ALL_STATUS_NOREQUEST_MUST_BE_ZERO);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    27  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    28  DEM_ARRAY_DEFINE(Dem_NvmHashIdType, Dem_HashIdInNvm, DEM_NVM_HASH_ID_SIZE);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    29  #endif
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    30  boolean Dem_NvMAnyClearFailed;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    31  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    32  #if(DEM_CFG_TRIGGER_TO_STORE_NVM_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    33  boolean Dem_NvMImmediateStorageRequested;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    34  #endif
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    35  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    36  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    37  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    38  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    39  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    40  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    41  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    42  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    43  DEM_ARRAY_DEFINE_CONST(NvM_BlockIdType, Dem_NvMBlockMap2NvmId, DEM_NVM_CFG_NUM_BLOCKS_TOTAL, DEM_NVM_CFG_NVM_BLOCK_IDS);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    44  DEM_ARRAY_DEFINE_CONST(Dem_NvmBlockIdExtendedType, Dem_NvmBlockIdExtended, DEM_NVM_CFG_NUM_BLOCKS_EXTENDED, DEM_NVM_CFG_BLOCKS_EXTENDED);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    45  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    46  DEM_ARRAY_DEFINE_CONST(Dem_NvmHashIdType, Dem_HashIdInRom, DEM_NVM_HASH_ID_SIZE, DEM_HASH_ID_ROM);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    47  #endif
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    48  DEM_ARRAY_DEFINE_CONST(Dem_NvmCopyFunction, DemCopyFctPtrTable, DEM_NVM_CFG_COPYFCT_NUM, DEM_NVM_CFG_COPYFCT_INIT);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    49  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    50  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    51  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    52  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    53  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    54  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    55  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    56  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    57  DEM_INLINE boolean Dem_NvMBlockIsUsingStorageBuffer(Dem_NvmBlockIdType demNvMId)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    58  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    59      return (demNvMId < DEM_NVM_CFG_NUM_BLOCKS_EXTENDED);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    60  }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    61  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    62  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    63  DEM_INLINE void Dem_NvMBlockStatusClearBit(Dem_NvmBlockIdType demNvMId, Dem_NvmBlockStatusType bitmask)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    64  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    65      Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_INTERNAL] &= (Dem_NvmBlockStatusType)(~bitmask);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    66  }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    67  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    68  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    69  DEM_INLINE void Dem_NvMBlockStatusSetBit(Dem_NvmBlockIdType demNvMId, Dem_NvmBlockStatusType bitmask)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    70  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    71      Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_INTERNAL] |= bitmask;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    72  }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    73  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    74  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    75  DEM_INLINE boolean Dem_NvMBlockStatusIsBitSet(Dem_NvmBlockIdType demNvMId, Dem_NvmBlockStatusType bitmask)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    76  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    77      return ((Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_INTERNAL] & bitmask) != 0);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    78  }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    79  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    80  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    81  DEM_INLINE void Dem_NvMBlockStatusDoubleBufferHandling(void)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    82  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    83      uint8 demNvMId;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    84  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    85      for(demNvMId = 0; demNvMId < DEM_NVM_CFG_NUM_BLOCKS_TOTAL; demNvMId++)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    86      {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    87          /* Shutdown */
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    88          if(Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_SHUTDOWN] != DEM_NVM_STATUSBITMASK_NONE)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    89          {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    90              Dem_NvMBlockStatusSetBit(demNvMId, Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_SHUTDOWN]);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    91              Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_SHUTDOWN] = DEM_NVM_STATUSBITMASK_NONE;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    92          }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    93          /* Immediate */
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    94          if(Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_IMMEDIATE] != DEM_NVM_STATUSBITMASK_NONE)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    95          {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    96              Dem_NvMBlockStatusSetBit(demNvMId, Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_IMMEDIATE]);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    97              Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_IMMEDIATE] = DEM_NVM_STATUSBITMASK_NONE;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    98          }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    99          /* Clear */
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   100          if(Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_CLEAR] != DEM_NVM_STATUSBITMASK_NONE)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   101          {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   102              Dem_NvMBlockStatusSetBit(demNvMId, Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_CLEAR]);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   103              Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_CLEAR] = DEM_NVM_STATUSBITMASK_NONE;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   104          }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   105          /* Exclude */
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   106          if(Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_EXCLUDE] != DEM_NVM_STATUSBITMASK_NONE)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   107          {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   108              Dem_NvMBlockStatusSetBit(demNvMId, DEM_NVM_STATUSBITMASK_EXCLUDE);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   109          }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   110          else
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   111          {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   112              Dem_NvMBlockStatusClearBit(demNvMId, DEM_NVM_STATUSBITMASK_EXCLUDE);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   113          }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   114      }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   115  }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   116  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   117  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   118  DEM_INLINE Dem_NvMStorageBufferType* Dem_NvMCopyToStorageBuffer(Dem_NvmBlockIdType demNvMId)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   119  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   120      uint8 storageBufferId;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   121      uint8 copyfctpIndex;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   122  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   123  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   124      DEM_ASSERT((demNvMId < DEM_NVM_CFG_NUM_BLOCKS_EXTENDED), DEM_DET_APIID_NVMSTATEMACHINE, 0);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   125  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   126      for(storageBufferId = 0; storageBufferId < DEM_NVM_CFG_NUM_STORAGEBUFFER; storageBufferId++)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   127      {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   128          if(!Dem_NvMStorageBuffer[storageBufferId].busy)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   129          {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   130              Dem_NvMStorageBuffer[storageBufferId].busy = TRUE;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   131              Dem_NvMStorageBuffer[storageBufferId].id = demNvMId;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   132  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   133              copyfctpIndex = Dem_NvmBlockIdExtended[demNvMId].copyFunctionPointerIndex;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   134  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   135              (*DemCopyFctPtrTable[copyfctpIndex])(&(Dem_NvMStorageBuffer[storageBufferId].data), Dem_NvmBlockIdExtended[demNvMId].ramAdress, Dem_NvmBlockIdExtended[demNvMId].nvmBlockSize);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   136  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   137              return &Dem_NvMStorageBuffer[storageBufferId];
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   138          }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   139      }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   140      return NULL_PTR;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   141  }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   142  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   143  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   144  DEM_INLINE void Dem_NvMReleaseStorageBuffer(Dem_NvMStorageBufferType* storageBuffer)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   145  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   146      storageBuffer->busy = FALSE;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   147  }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   148  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   149  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   150  DEM_INLINE void Dem_NvMReleaseCompletedStorageBufferLocations(void)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   151  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   152      uint8 storageBufferId;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   153  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   154      for(storageBufferId = 0; storageBufferId < DEM_NVM_CFG_NUM_STORAGEBUFFER; storageBufferId++)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   155      {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   156          if(Dem_NvMStorageBuffer[storageBufferId].busy)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   157          {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   158              if(Dem_NvmGetStatus (Dem_NvMStorageBuffer[storageBufferId].id) != DEM_NVM_PENDING)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   159              {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   160                  Dem_NvMReleaseStorageBuffer(&Dem_NvMStorageBuffer[storageBufferId]);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   161              }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   162          }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   163      }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   164  }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   165  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   166  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   167  DEM_INLINE Std_ReturnType Dem_NvMWriteImmediate(Dem_NvmBlockIdType demNvMId)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   168  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   169      Std_ReturnType returnValue = E_NOT_OK;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   170      Dem_NvMStorageBufferType* demNvMStorageBuffer = NULL_PTR;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   171  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   172      if(Dem_NvMBlockIsUsingStorageBuffer(demNvMId))
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   173      {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   174          demNvMStorageBuffer = Dem_NvMCopyToStorageBuffer(demNvMId);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   175          if(demNvMStorageBuffer != NULL_PTR)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   176          {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   177              returnValue = NvM_WriteBlock(Dem_NvMBlockMap2NvmId[demNvMId], &(demNvMStorageBuffer->data));
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   178              if(returnValue != E_OK)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   179              {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   180                  Dem_NvMReleaseStorageBuffer(demNvMStorageBuffer);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   181              }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   182          }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   183      }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   184      else
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   185      {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   186          returnValue = NvM_WriteBlock(Dem_NvMBlockMap2NvmId[demNvMId], NULL_PTR);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   187      }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   188      return returnValue;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   189  }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   190  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   191  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   192  /* Set changed flag for blocks which are always written on shutdown */
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   193  DEM_INLINE void Dem_NvMMarkUntrackedBlocksForShutdown(void)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   194  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   195      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_EVT_STATUSBYTE);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   196  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   197  #if (DEM_CFG_FFPRESTORAGESUPPORT == DEM_CFG_FFPRESTORAGESUPPORT_ON)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   198      /* Store prestored freeze frame in NVRAM*/
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   199      Dem_PreStoredFFShutdown();
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   200  #endif
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   201  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   202  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   203      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_INDICATOR_ATTRIBUTES);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   204  #endif
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   205  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   206  #if (DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   207      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_DISTURBANCE_MEMORY);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   208  #endif
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   209  }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   210  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   211  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   212  #if(DEM_CFG_TRIGGER_TO_STORE_NVM_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   213  Std_ReturnType Dem_TriggerStorageToNvm(void)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   214  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   215      Dem_NvMMarkUntrackedBlocksForShutdown();
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   216      Dem_NvMSetImmediateStorageRequested(TRUE);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   217      return E_OK;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   218  }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   219  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   220  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   221  DEM_INLINE void Dem_NvMTriggerImmediateWrite4All(boolean writeAllBlocks)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   222  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   223      Dem_NvmBlockIdType demNvMId;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   224      for(demNvMId = 0; demNvMId < DEM_NVM_CFG_NUM_BLOCKS_TOTAL; demNvMId++)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   225      {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   226          if( Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_EXCLUDE) )
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   227          {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   228              continue;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   229          }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   230  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   231          if( (Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_SHUTDOWN)) || (writeAllBlocks))
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   232          {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   233              Dem_NvMBlockStatusSetBit(demNvMId, DEM_NVM_STATUSBITMASK_IMMEDIATE);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   234          }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   235      }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   236  }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   237  #endif
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   238  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   239  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   240  DEM_INLINE boolean Dem_NvMHandleStates(Dem_NvmBlockIdType demNvMId)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   241  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   242      Dem_NvmResultType nvmResult;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   243      boolean returnValue = TRUE;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   244      /* Check pending */
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   245      nvmResult = Dem_NvmGetStatus (demNvMId);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   246  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   247      if(nvmResult != DEM_NVM_PENDING)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   248      {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   249          /* Last request was clear, check result */
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   250          if( Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_CLEAR_REQ) )
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   251          {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   252              Dem_NvMBlockStatusClearBit(demNvMId, DEM_NVM_STATUSBITMASK_CLEAR_REQ);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   253              Dem_NvMAnyClearFailed = ((Dem_NvMAnyClearFailed) || (nvmResult == DEM_NVM_FAILED));
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   254          }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   255  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   256          /* Last request was immediate write*/
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   257          if( Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_IMMEDIATE_REQ))
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   258          {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   259              Dem_NvMBlockStatusClearBit(demNvMId, DEM_NVM_STATUSBITMASK_IMMEDIATE_REQ);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   260          }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   261  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   262  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   263          /* Check exclude bit */
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   264          if(!Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_EXCLUDE))
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   265          {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   266              /* Clear with immediate write */
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   267              if( Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_CLEAR) )
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   268              {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   269                  nvmResult = Dem_NvMWriteImmediate(demNvMId);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   270  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   271                  if(nvmResult == E_OK)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   272                  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   273                      Dem_NvMBlockStatusSetBit(demNvMId, DEM_NVM_STATUSBITMASK_CLEAR_REQ);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   274                      Dem_NvMBlockStatusClearBit(demNvMId, DEM_NVM_STATUSBITMASK_SHUTDOWN);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   275                      Dem_NvMBlockStatusClearBit(demNvMId, DEM_NVM_STATUSBITMASK_IMMEDIATE);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   276                      Dem_NvMBlockStatusClearBit(demNvMId, DEM_NVM_STATUSBITMASK_INVALIDATE);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   277                      Dem_NvMBlockStatusClearBit(demNvMId, DEM_NVM_STATUSBITMASK_CLEAR);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   278                  }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   279                  else
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   280                  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   281                      returnValue = FALSE;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   282                  }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   283              }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   284              /* Clear with invalidate */
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   285              else if( Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_INVALIDATE) )
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   286              {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   287                  nvmResult = NvM_InvalidateNvBlock(Dem_NvMBlockMap2NvmId[demNvMId]);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   288  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   289                  if(nvmResult == E_OK)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   290                  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   291                      Dem_NvMBlockStatusSetBit(demNvMId, DEM_NVM_STATUSBITMASK_CLEAR_REQ);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   292                      Dem_NvMBlockStatusClearBit(demNvMId, DEM_NVM_STATUSBITMASK_INVALIDATE);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   293                  }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   294                  else
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   295                  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   296                      returnValue = FALSE;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   297                  }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   298              }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   299              /* Immediate write */
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   300              else if( Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_IMMEDIATE) )
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   301              {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   302                  nvmResult = Dem_NvMWriteImmediate(demNvMId);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   303  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   304                  if(nvmResult == E_OK)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   305                  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   306                      Dem_NvMBlockStatusSetBit(demNvMId, DEM_NVM_STATUSBITMASK_IMMEDIATE_REQ);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   307                      Dem_NvMBlockStatusClearBit(demNvMId, DEM_NVM_STATUSBITMASK_SHUTDOWN);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   308                      Dem_NvMBlockStatusClearBit(demNvMId, DEM_NVM_STATUSBITMASK_IMMEDIATE);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   309                  }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   310                  else
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   311                  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   312                      returnValue = FALSE;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   313                  }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   314              }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   315              else
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   316              {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   317                  /* Done in Shutdown */
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   318              }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   319          }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   320      }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   321      return returnValue;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   322  }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   323  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   324  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   325  DEM_INLINE boolean Dem_NvMBlockIdExtendedGetNextIndex(Dem_NvmBlockIdType* it, Dem_NvmBlockIdType start)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   326  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   327      (*it)++;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   328      if(*it >= DEM_NVM_CFG_NUM_BLOCKS_EXTENDED)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   329      {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   330          (*it) = 0;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   331      }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   332      return ((*it) != start);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   333  }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   334  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   335  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   336  void Dem_NvMInit(void)
; Function Dem_NvMInit
.L242:
Dem_NvMInit:	.type	func

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   337  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   338  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED != DEM_CFG_ERASE_ALL_OFF)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   339      if(Dem_PrjEraseAllNvMDataHandling(Dem_NvmIsHashIDChanged()) == DEM_ERASE_ALL_REQUEST_ALL)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   340      {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   341          Dem_EraseAllNvMDataStatus = DEM_ERASE_ALL_STATUS_PENDING;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   342  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   343          /* Reset clear status */
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   344          Dem_NvMStartClear();
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   345      }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   346  #endif
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   347  }
	ret
.L322:
	
__Dem_NvMInit_function_end:
	.size	Dem_NvMInit,__Dem_NvMInit_function_end-Dem_NvMInit
.L267:
	; End of function
	
	.sdecl	'.text.Dem_Nvm.Dem_NvMMainFunction',code,cluster('Dem_NvMMainFunction')
	.sect	'.text.Dem_Nvm.Dem_NvMMainFunction'
	.align	2
	
	.global	Dem_NvMMainFunction

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   348  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   349  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   350  void Dem_NvMMainFunction(void)
; Function Dem_NvMMainFunction
.L244:
Dem_NvMMainFunction:	.type	func
	sub.a	a10,#8
.L581:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   351  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   352      static uint8 lastIndexPreviousMain = 0;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   353      uint8 currentWriteLocation = lastIndexPreviousMain;
	movh.a	a12,#@his(_999001_lastIndexPreviousMain)
	lea	a12,[a12]@los(_999001_lastIndexPreviousMain)
	ld.bu	d15,[a12]
.L636:
	st.b	[a10],d15
.L327:
	mov	d8,#0
.L332:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     1   
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     2  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     3  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     4  #ifndef DEM_NVM_H
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     5  #define DEM_NVM_H
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     6  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     7  #include "NvM.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     8  #include "Dem_Main.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     9  #include "Dem_Nvm_Types.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    10  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    11  #include "Dem_Types.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    12  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    13  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    14  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    15  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    16  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    17  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    18  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    19  DEM_ARRAY_DECLARE(Dem_NvMBlockStatusDoubleBufferType, Dem_NvMBlockStatusDoubleBuffer, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    20  DEM_ARRAY_DECLARE(Dem_NvMStorageBufferType, Dem_NvMStorageBuffer, DEM_NVM_CFG_NUM_STORAGEBUFFER);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    21  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    22  extern Dem_EraseAllStatusType Dem_EraseAllNvMDataStatus;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    23  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    24  DEM_ARRAY_DECLARE(Dem_NvmHashIdType, Dem_HashIdInNvm, DEM_NVM_HASH_ID_SIZE);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    25  #endif
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    26  extern boolean Dem_NvMAnyClearFailed;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    27  #if(DEM_CFG_TRIGGER_TO_STORE_NVM_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    28  extern boolean Dem_NvMImmediateStorageRequested;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    29  #endif
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    30  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    31  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    32  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    33  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    34  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    35  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    36  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    37  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    38  DEM_ARRAY_DECLARE_CONST(NvM_BlockIdType, Dem_NvMBlockMap2NvmId, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    39  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdExtendedType, Dem_NvmBlockIdExtended, DEM_NVM_CFG_NUM_BLOCKS_EXTENDED);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    40  DEM_ARRAY_DECLARE_CONST(Dem_NvmCopyFunction, DemCopyFctPtrTable, DEM_NVM_CFG_COPYFCT_NUM);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    41  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    42  DEM_ARRAY_DECLARE_CONST(Dem_NvmHashIdType, Dem_HashIdInRom, DEM_NVM_HASH_ID_SIZE);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    43  #endif
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    44  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    45  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    46  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    47  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    48  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    49  DEM_INLINE NvM_BlockIdType Dem_NvMGetNvMBlocKId(Dem_NvmBlockIdType id)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    50  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    51      return Dem_NvMBlockMap2NvmId[id];
	movh.a	a13,#@his(Dem_NvMBlockMap2NvmId)
	lea	a13,[a13]@los(Dem_NvMBlockMap2NvmId)
.L333:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   154      for(storageBufferId = 0; storageBufferId < DEM_NVM_CFG_NUM_STORAGEBUFFER; storageBufferId++)      (inlined)
	j	.L2
.L3:
	mul	d15,d8,#28
.L637:
	movh.a	a15,#@his(Dem_NvMStorageBuffer)
	lea	a15,[a15]@los(Dem_NvMStorageBuffer)
.L638:
	addsc.a	a15,a15,d15,#0
.L639:
	ld.bu	d15,[a15]24
.L640:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   156          if(Dem_NvMStorageBuffer[storageBufferId].busy)      (inlined)
	jeq	d15,#0,.L4
.L641:
	ld.bu	d15,[a15]
.L338:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     1   
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     2  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     3  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     4  #ifndef DEM_NVM_H
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     5  #define DEM_NVM_H
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     6  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     7  #include "NvM.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     8  #include "Dem_Main.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     9  #include "Dem_Nvm_Types.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    10  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    11  #include "Dem_Types.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    12  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    13  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    14  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    15  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    16  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    17  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    18  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    19  DEM_ARRAY_DECLARE(Dem_NvMBlockStatusDoubleBufferType, Dem_NvMBlockStatusDoubleBuffer, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    20  DEM_ARRAY_DECLARE(Dem_NvMStorageBufferType, Dem_NvMStorageBuffer, DEM_NVM_CFG_NUM_STORAGEBUFFER);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    21  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    22  extern Dem_EraseAllStatusType Dem_EraseAllNvMDataStatus;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    23  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    24  DEM_ARRAY_DECLARE(Dem_NvmHashIdType, Dem_HashIdInNvm, DEM_NVM_HASH_ID_SIZE);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    25  #endif
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    26  extern boolean Dem_NvMAnyClearFailed;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    27  #if(DEM_CFG_TRIGGER_TO_STORE_NVM_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    28  extern boolean Dem_NvMImmediateStorageRequested;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    29  #endif
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    30  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    31  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    32  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    33  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    34  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    35  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    36  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    37  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    38  DEM_ARRAY_DECLARE_CONST(NvM_BlockIdType, Dem_NvMBlockMap2NvmId, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    39  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdExtendedType, Dem_NvmBlockIdExtended, DEM_NVM_CFG_NUM_BLOCKS_EXTENDED);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    40  DEM_ARRAY_DECLARE_CONST(Dem_NvmCopyFunction, DemCopyFctPtrTable, DEM_NVM_CFG_COPYFCT_NUM);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    41  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    42  DEM_ARRAY_DECLARE_CONST(Dem_NvmHashIdType, Dem_HashIdInRom, DEM_NVM_HASH_ID_SIZE);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    43  #endif
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    44  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    45  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    46  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    47  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    48  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    49  DEM_INLINE NvM_BlockIdType Dem_NvMGetNvMBlocKId(Dem_NvmBlockIdType id)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    50  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    51      return Dem_NvMBlockMap2NvmId[id];
	addsc.a	a2,a13,d15,#1
	ld.hu	d4,[a2]0
.L642:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    51      return Dem_NvMBlockMap2NvmId[id];      (inlined)
	j	.L5

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    52  }      (inlined)
.L5:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    52  }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    53  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    54  DEM_INLINE Dem_NvmResultType Dem_NvmGetStatus (Dem_NvmBlockIdType id)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    55  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    56      NvM_RequestResultType result;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    57      if (NvM_GetErrorStatus (Dem_NvMGetNvMBlocKId(id), &result) == E_NOT_OK)
	lea	a4,[a10]1
	call	NvM_GetErrorStatus
.L643:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    57      if (NvM_GetErrorStatus (Dem_NvMGetNvMBlocKId(id), &result) == E_NOT_OK)      (inlined)
	jne	d2,#1,.L6
.L644:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    58      {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    59          return DEM_NVM_FAILED;
	mov	d15,#1

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    59          return DEM_NVM_FAILED;      (inlined)
	j	.L7

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    57      if (NvM_GetErrorStatus (Dem_NvMGetNvMBlocKId(id), &result) == E_NOT_OK)      (inlined)
.L6:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    60      }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    61  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    62      switch (result)
	ld.bu	d15,[a10]1
.L645:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    63      {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    64          case NVM_REQ_CANCELED:
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    65              return DEM_NVM_CANCELED;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    66  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    67          case NVM_REQ_OK:
	mov	d0,#0
	jeq	d15,d0,.L8
.L646:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    68          case NVM_REQ_REDUNDANCY_FAILED:     /* Driver could trigger correction of the damaged part of the redundant block; data is read correctly nevertheless */
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    69          case NVM_REQ_RESTORED_FROM_ROM:
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    70              return DEM_NVM_SUCCESS;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    71  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    72          case NVM_REQ_PENDING:
	mov	d0,#2
	jeq	d15,d0,.L9
.L647:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    73              return DEM_NVM_PENDING;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    74  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    75          case NVM_REQ_NV_INVALIDATED:
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    76              return DEM_NVM_INVALID;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    77  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    78          case NVM_REQ_INTEGRITY_FAILED:
	mov	d0,#3
	jeq	d15,d0,.L10
.L648:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    79              return DEM_NVM_INTEGRITY_FAILED;    /* NVM_REQ_INTEGRITY_FAILED: description in NVM-doc: Indicates that the latest read operation did not find any valid data for this block on the persistent media. */
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    80  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    81          case NVM_REQ_BLOCK_SKIPPED:
	mov	d0,#4
	jeq	d15,d0,.L11
.L649:
	mov	d0,#5
	jeq	d15,d0,.L12
.L650:
	mov	d0,#6
	jeq	d15,d0,.L13
.L651:
	mov	d0,#7
	jeq	d15,d0,.L14
.L652:
	mov	d0,#8
	jeq	d15,d0,.L15
	j	.L16

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    64          case NVM_REQ_CANCELED:      (inlined)
.L13:
	mov	d15,#6

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    65              return DEM_NVM_CANCELED;      (inlined)
	j	.L17

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    67          case NVM_REQ_OK:      (inlined)
.L8:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    68          case NVM_REQ_REDUNDANCY_FAILED:     /* Driver could trigger correction of the damaged part of the redundant block; data is read correctly nevertheless */      (inlined)
.L14:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    69          case NVM_REQ_RESTORED_FROM_ROM:      (inlined)
.L15:
	mov	d15,#0

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    70              return DEM_NVM_SUCCESS;      (inlined)
	j	.L18

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    72          case NVM_REQ_PENDING:      (inlined)
.L9:
	mov	d15,#2

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    73              return DEM_NVM_PENDING;      (inlined)
	j	.L19

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    75          case NVM_REQ_NV_INVALIDATED:      (inlined)
.L12:
	mov	d15,#5

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    76              return DEM_NVM_INVALID;      (inlined)
	j	.L20

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    78          case NVM_REQ_INTEGRITY_FAILED:      (inlined)
.L10:
	mov	d15,#3

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    79              return DEM_NVM_INTEGRITY_FAILED;    /* NVM_REQ_INTEGRITY_FAILED: description in NVM-doc: Indicates that the latest read operation did not find any valid data for this block on the persistent media. */      (inlined)
	j	.L21

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    81          case NVM_REQ_BLOCK_SKIPPED:      (inlined)
.L11:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    82              return DEM_NVM_BLOCK_SKIPPED;       /* NVM_REQ_BLOCK_SKIPPED: if readall would be skipped, it is treated as failure for DEM, because all NVM data has to be available
	mov	d15,#4

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    82              return DEM_NVM_BLOCK_SKIPPED;       /* NVM_REQ_BLOCK_SKIPPED: if readall would be skipped, it is treated as failure for DEM, because all NVM data has to be available      (inlined)
	j	.L22

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    86          default:      (inlined)
.L16:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    83                                                 at init (ErrorQueue is flushed and event status / eventMemory content needs to be available)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    84                                                 This is ensured as the checks during init are checked to be DEM_NVM_SUCCESS. All other states are handled as error */
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    85  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    86          default:
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    87              /*   NVM_REQ_NOT_OK: Indicates that the latest operation failed due to an unexpected event.  */
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    88              return DEM_NVM_FAILED;
	mov	d15,#1

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    88              return DEM_NVM_FAILED;      (inlined)
	j	.L23

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    90  }      (inlined)
.L23:
.L22:
.L21:
.L20:
.L19:
.L18:
.L17:
.L7:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   158              if(Dem_NvmGetStatus (Dem_NvMStorageBuffer[storageBufferId].id) != DEM_NVM_PENDING)      (inlined)
	jeq	d15,#2,.L24
.L346:
	mov	d15,#0
.L653:
	st.b	[a15]24,d15

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   158              if(Dem_NvmGetStatus (Dem_NvMStorageBuffer[storageBufferId].id) != DEM_NVM_PENDING)      (inlined)
.L24:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   156          if(Dem_NvMStorageBuffer[storageBufferId].busy)      (inlined)
.L4:
	add	d8,#1

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   154      for(storageBufferId = 0; storageBufferId < DEM_NVM_CFG_NUM_STORAGEBUFFER; storageBufferId++)      (inlined)
.L2:
	jlt.u	d8,#2,.L3
.L328:
	mov	d1,#0
.L582:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    85      for(demNvMId = 0; demNvMId < DEM_NVM_CFG_NUM_BLOCKS_TOTAL; demNvMId++)      (inlined)
	j	.L25
.L26:
	movh.a	a2,#@his(Dem_NvMBlockStatusDoubleBuffer)
	lea	a2,[a2]@los(Dem_NvMBlockStatusDoubleBuffer)
.L654:
	mul	d15,d1,#5
	addsc.a	a15,a2,d15,#0
.L655:
	mov.aa	a4,a15
.L656:
	add.a	a4,#1
	ld.bu	d0,[a4]
.L657:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    88          if(Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_SHUTDOWN] != DEM_NVM_STATUSBITMASK_NONE)      (inlined)
	jeq	d0,#0,.L27
.L354:
	mul	d15,d1,#5
	addsc.a	a5,a2,d15,#0
.L658:
	ld.bu	d15,[a5]
.L659:
	or	d0,d15
	st.b	[a5],d0
.L355:
	mov	d15,#0
.L660:
	st.b	[a4],d15

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    88          if(Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_SHUTDOWN] != DEM_NVM_STATUSBITMASK_NONE)      (inlined)
.L27:
	mov.aa	a4,a15
.L661:
	add.a	a4,#2
	ld.bu	d0,[a4]
.L662:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    94          if(Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_IMMEDIATE] != DEM_NVM_STATUSBITMASK_NONE)      (inlined)
	jeq	d0,#0,.L28
.L361:
	mul	d15,d1,#5
	addsc.a	a5,a2,d15,#0
.L663:
	ld.bu	d15,[a5]
.L664:
	or	d0,d15
	st.b	[a5],d0
.L362:
	mov	d15,#0
.L665:
	st.b	[a4],d15

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    94          if(Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_IMMEDIATE] != DEM_NVM_STATUSBITMASK_NONE)      (inlined)
.L28:
	mov.aa	a4,a15
.L666:
	add.a	a4,#3
	ld.bu	d0,[a4]
.L667:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   100          if(Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_CLEAR] != DEM_NVM_STATUSBITMASK_NONE)      (inlined)
	jeq	d0,#0,.L29
.L363:
	mul	d15,d1,#5
	addsc.a	a5,a2,d15,#0
.L668:
	ld.bu	d15,[a5]
.L669:
	or	d0,d15
	st.b	[a5],d0
.L364:
	mov	d15,#0
.L670:
	st.b	[a4],d15

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   100          if(Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_CLEAR] != DEM_NVM_STATUSBITMASK_NONE)      (inlined)
.L29:
	ld.bu	d15,[a15]4
.L671:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   106          if(Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_EXCLUDE] != DEM_NVM_STATUSBITMASK_NONE)      (inlined)
	jeq	d15,#0,.L30
.L365:
	mul	d15,d1,#5
	addsc.a	a15,a2,d15,#0
.L672:
	ld.bu	d15,[a15]
.L673:
	or	d15,#64
	st.b	[a15],d15
.L366:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   108              Dem_NvMBlockStatusSetBit(demNvMId, DEM_NVM_STATUSBITMASK_EXCLUDE);      (inlined)
	j	.L31

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   106          if(Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_EXCLUDE] != DEM_NVM_STATUSBITMASK_NONE)      (inlined)
.L30:
	mov	d0,#64
.L368:
	mul	d15,d1,#5
	addsc.a	a15,a2,d15,#0
.L674:
	ld.bu	d15,[a15]
.L675:
	xor	d0,d0,#255
.L676:
	and	d15,d0
	st.b	[a15],d15

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   110          else      (inlined)
.L31:
	add	d1,#1

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    85      for(demNvMId = 0; demNvMId < DEM_NVM_CFG_NUM_BLOCKS_TOTAL; demNvMId++)      (inlined)
.L25:
	jlt.u	d1,#7,.L26

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   354  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   355      /* Handle StorageBuffer */
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   356      Dem_NvMReleaseCompletedStorageBufferLocations();
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   357  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   358      /* Copy from the different statusarrays to the internal one*/
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   359      Dem_NvMBlockStatusDoubleBufferHandling();
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   360  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   361  #if(DEM_CFG_TRIGGER_TO_STORE_NVM_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   362      if(Dem_NvMIsImmediateStorageRequested())
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   363      {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   364          Dem_NvMSetImmediateStorageRequested(FALSE);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   365          Dem_NvMTriggerImmediateWrite4All(FALSE);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   366      }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   367  #endif
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   368  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   369      /* Handle States of storagebuffer-blocks*/
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   370      do
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   371      {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   372          if(!Dem_NvMHandleStates(currentWriteLocation))
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   373          {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   374              break;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   375          }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   376      } while(Dem_NvMBlockIdExtendedGetNextIndex(&currentWriteLocation, lastIndexPreviousMain));
.L32:
	ld.bu	d9,[a10]
.L375:
	mov	d8,#1
.L583:
	mov	d15,d9
.L381:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     1   
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     2  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     3  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     4  #ifndef DEM_NVM_H
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     5  #define DEM_NVM_H
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     6  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     7  #include "NvM.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     8  #include "Dem_Main.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     9  #include "Dem_Nvm_Types.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    10  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    11  #include "Dem_Types.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    12  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    13  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    14  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    15  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    16  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    17  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    18  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    19  DEM_ARRAY_DECLARE(Dem_NvMBlockStatusDoubleBufferType, Dem_NvMBlockStatusDoubleBuffer, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    20  DEM_ARRAY_DECLARE(Dem_NvMStorageBufferType, Dem_NvMStorageBuffer, DEM_NVM_CFG_NUM_STORAGEBUFFER);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    21  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    22  extern Dem_EraseAllStatusType Dem_EraseAllNvMDataStatus;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    23  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    24  DEM_ARRAY_DECLARE(Dem_NvmHashIdType, Dem_HashIdInNvm, DEM_NVM_HASH_ID_SIZE);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    25  #endif
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    26  extern boolean Dem_NvMAnyClearFailed;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    27  #if(DEM_CFG_TRIGGER_TO_STORE_NVM_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    28  extern boolean Dem_NvMImmediateStorageRequested;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    29  #endif
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    30  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    31  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    32  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    33  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    34  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    35  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    36  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    37  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    38  DEM_ARRAY_DECLARE_CONST(NvM_BlockIdType, Dem_NvMBlockMap2NvmId, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    39  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdExtendedType, Dem_NvmBlockIdExtended, DEM_NVM_CFG_NUM_BLOCKS_EXTENDED);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    40  DEM_ARRAY_DECLARE_CONST(Dem_NvmCopyFunction, DemCopyFctPtrTable, DEM_NVM_CFG_COPYFCT_NUM);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    41  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    42  DEM_ARRAY_DECLARE_CONST(Dem_NvmHashIdType, Dem_HashIdInRom, DEM_NVM_HASH_ID_SIZE);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    43  #endif
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    44  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    45  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    46  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    47  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    48  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    49  DEM_INLINE NvM_BlockIdType Dem_NvMGetNvMBlocKId(Dem_NvmBlockIdType id)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    50  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    51      return Dem_NvMBlockMap2NvmId[id];
	addsc.a	a15,a13,d15,#1
	ld.hu	d4,[a15]0
.L677:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    51      return Dem_NvMBlockMap2NvmId[id];      (inlined)
	j	.L33

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    52  }      (inlined)
.L33:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    52  }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    53  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    54  DEM_INLINE Dem_NvmResultType Dem_NvmGetStatus (Dem_NvmBlockIdType id)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    55  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    56      NvM_RequestResultType result;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    57      if (NvM_GetErrorStatus (Dem_NvMGetNvMBlocKId(id), &result) == E_NOT_OK)
	lea	a4,[a10]1
	call	NvM_GetErrorStatus
.L678:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    57      if (NvM_GetErrorStatus (Dem_NvMGetNvMBlocKId(id), &result) == E_NOT_OK)      (inlined)
	jne	d2,#1,.L34
.L679:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    58      {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    59          return DEM_NVM_FAILED;
	mov	d0,#1

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    59          return DEM_NVM_FAILED;      (inlined)
	j	.L35

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    57      if (NvM_GetErrorStatus (Dem_NvMGetNvMBlocKId(id), &result) == E_NOT_OK)      (inlined)
.L34:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    60      }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    61  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    62      switch (result)
	ld.bu	d15,[a10]1
.L680:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    63      {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    64          case NVM_REQ_CANCELED:
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    65              return DEM_NVM_CANCELED;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    66  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    67          case NVM_REQ_OK:
	mov	d0,#0
	jeq	d15,d0,.L36
.L681:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    68          case NVM_REQ_REDUNDANCY_FAILED:     /* Driver could trigger correction of the damaged part of the redundant block; data is read correctly nevertheless */
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    69          case NVM_REQ_RESTORED_FROM_ROM:
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    70              return DEM_NVM_SUCCESS;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    71  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    72          case NVM_REQ_PENDING:
	mov	d0,#2
	jeq	d15,d0,.L37
.L682:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    73              return DEM_NVM_PENDING;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    74  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    75          case NVM_REQ_NV_INVALIDATED:
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    76              return DEM_NVM_INVALID;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    77  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    78          case NVM_REQ_INTEGRITY_FAILED:
	mov	d0,#3
	jeq	d15,d0,.L38
.L683:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    79              return DEM_NVM_INTEGRITY_FAILED;    /* NVM_REQ_INTEGRITY_FAILED: description in NVM-doc: Indicates that the latest read operation did not find any valid data for this block on the persistent media. */
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    80  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    81          case NVM_REQ_BLOCK_SKIPPED:
	mov	d0,#4
	jeq	d15,d0,.L39
.L684:
	mov	d0,#5
	jeq	d15,d0,.L40
.L685:
	mov	d0,#6
	jeq	d15,d0,.L41
.L686:
	mov	d0,#7
	jeq	d15,d0,.L42
.L687:
	mov	d0,#8
	jeq	d15,d0,.L43
	j	.L44

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    64          case NVM_REQ_CANCELED:      (inlined)
.L41:
	mov	d0,#6

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    65              return DEM_NVM_CANCELED;      (inlined)
	j	.L45

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    67          case NVM_REQ_OK:      (inlined)
.L36:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    68          case NVM_REQ_REDUNDANCY_FAILED:     /* Driver could trigger correction of the damaged part of the redundant block; data is read correctly nevertheless */      (inlined)
.L42:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    69          case NVM_REQ_RESTORED_FROM_ROM:      (inlined)
.L43:
	mov	d0,#0

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    70              return DEM_NVM_SUCCESS;      (inlined)
	j	.L46

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    72          case NVM_REQ_PENDING:      (inlined)
.L37:
	mov	d0,#2

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    73              return DEM_NVM_PENDING;      (inlined)
	j	.L47

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    75          case NVM_REQ_NV_INVALIDATED:      (inlined)
.L40:
	mov	d0,#5

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    76              return DEM_NVM_INVALID;      (inlined)
	j	.L48

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    78          case NVM_REQ_INTEGRITY_FAILED:      (inlined)
.L38:
	mov	d0,#3

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    79              return DEM_NVM_INTEGRITY_FAILED;    /* NVM_REQ_INTEGRITY_FAILED: description in NVM-doc: Indicates that the latest read operation did not find any valid data for this block on the persistent media. */      (inlined)
	j	.L49

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    81          case NVM_REQ_BLOCK_SKIPPED:      (inlined)
.L39:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    82              return DEM_NVM_BLOCK_SKIPPED;       /* NVM_REQ_BLOCK_SKIPPED: if readall would be skipped, it is treated as failure for DEM, because all NVM data has to be available
	mov	d0,#4

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    82              return DEM_NVM_BLOCK_SKIPPED;       /* NVM_REQ_BLOCK_SKIPPED: if readall would be skipped, it is treated as failure for DEM, because all NVM data has to be available      (inlined)
	j	.L50

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    86          default:      (inlined)
.L44:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    83                                                 at init (ErrorQueue is flushed and event status / eventMemory content needs to be available)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    84                                                 This is ensured as the checks during init are checked to be DEM_NVM_SUCCESS. All other states are handled as error */
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    85  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    86          default:
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    87              /*   NVM_REQ_NOT_OK: Indicates that the latest operation failed due to an unexpected event.  */
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    88              return DEM_NVM_FAILED;
	mov	d0,#1

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    88              return DEM_NVM_FAILED;      (inlined)
	j	.L51

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    90  }      (inlined)
.L51:
.L50:
.L49:
.L48:
.L47:
.L46:
.L45:
.L35:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   247      if(nvmResult != DEM_NVM_PENDING)      (inlined)
	jeq	d0,#2,.L52
.L384:
	movh.a	a14,#@his(Dem_NvMBlockStatusDoubleBuffer)
	lea	a14,[a14]@los(Dem_NvMBlockStatusDoubleBuffer)
.L688:
	mul	d15,d9,#5
	addsc.a	a15,a14,d15,#0
.L689:
	ld.bu	d15,[a15]
.L690:
	and	d15,#32
.L691:
	ne	d15,d15,#0
.L692:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    77      return ((Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_INTERNAL] & bitmask) != 0);      (inlined)
	j	.L53

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    78  }      (inlined)
.L53:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   250          if( Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_CLEAR_REQ) )      (inlined)
	jeq	d15,#0,.L54
.L693:
	mov	d1,#32
.L390:
	mul	d15,d9,#5
	addsc.a	a15,a14,d15,#0
.L694:
	ld.bu	d15,[a15]
.L695:
	xor	d1,d1,#255
.L696:
	and	d15,d1
	st.b	[a15],d15
.L391:
	mov	d1,#0
.L697:
	movh.a	a15,#@his(Dem_NvMAnyClearFailed)
	lea	a15,[a15]@los(Dem_NvMAnyClearFailed)
	ld.bu	d15,[a15]
.L698:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   253              Dem_NvMAnyClearFailed = ((Dem_NvMAnyClearFailed) || (nvmResult == DEM_NVM_FAILED));      (inlined)
	jne	d15,#0,.L55
.L699:
	jne	d0,#1,.L56
.L55:
	mov	d1,#1

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   253              Dem_NvMAnyClearFailed = ((Dem_NvMAnyClearFailed) || (nvmResult == DEM_NVM_FAILED));      (inlined)
.L56:
	st.b	[a15],d1

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   250          if( Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_CLEAR_REQ) )      (inlined)
.L54:
	mul	d15,d9,#5
	addsc.a	a15,a14,d15,#0
.L700:
	ld.bu	d15,[a15]
.L701:
	and	d15,#4
.L702:
	ne	d15,d15,#0
.L703:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    77      return ((Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_INTERNAL] & bitmask) != 0);      (inlined)
	j	.L57

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    78  }      (inlined)
.L57:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   257          if( Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_IMMEDIATE_REQ))      (inlined)
	jeq	d15,#0,.L58
.L704:
	mov	d0,#4
.L392:
	mul	d15,d9,#5
	addsc.a	a15,a14,d15,#0
.L705:
	ld.bu	d15,[a15]
.L706:
	xor	d0,d0,#255
.L707:
	and	d15,d0
	st.b	[a15],d15

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   257          if( Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_IMMEDIATE_REQ))      (inlined)
.L58:
	mul	d15,d9,#5
	addsc.a	a15,a14,d15,#0
.L708:
	ld.bu	d15,[a15]
.L709:
	and	d15,#64
.L710:
	ne	d15,d15,#0
.L711:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    77      return ((Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_INTERNAL] & bitmask) != 0);      (inlined)
	j	.L59

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    78  }      (inlined)
.L59:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   264          if(!Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_EXCLUDE))      (inlined)
	jne	d15,#0,.L60
.L393:
	mul	d15,d9,#5
	addsc.a	a15,a14,d15,#0
.L712:
	ld.bu	d15,[a15]
.L713:
	and	d15,#8
.L714:
	ne	d15,d15,#0
.L715:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    77      return ((Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_INTERNAL] & bitmask) != 0);      (inlined)
	j	.L61

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    78  }      (inlined)
.L61:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   267              if( Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_CLEAR) )      (inlined)
	jeq	d15,#0,.L62
.L395:
	mov	d10,#1
.L404:
	lt.u	d15,d9,#6
.L716:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    59      return (demNvMId < DEM_NVM_CFG_NUM_BLOCKS_EXTENDED);      (inlined)
	j	.L63

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    60  }      (inlined)
.L63:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   172      if(Dem_NvMBlockIsUsingStorageBuffer(demNvMId))      (inlined)
	jeq	d15,#0,.L64

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   124      DEM_ASSERT((demNvMId < DEM_NVM_CFG_NUM_BLOCKS_EXTENDED), DEM_DET_APIID_NVMSTATEMACHINE, 0);      (inlined)
.L65:
	jlt.u	d9,#6,.L66
.L717:
	mov	d4,#54
	mov	d5,#0
	mov	d6,#211
	mov	d7,#0
	call	Det_ReportError

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   124      DEM_ASSERT((demNvMId < DEM_NVM_CFG_NUM_BLOCKS_EXTENDED), DEM_DET_APIID_NVMSTATEMACHINE, 0);      (inlined)
.L66:
	mov	d0,#0
.L585:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   126      for(storageBufferId = 0; storageBufferId < DEM_NVM_CFG_NUM_STORAGEBUFFER; storageBufferId++)      (inlined)
	j	.L67
.L68:
	mul	d15,d0,#28
.L718:
	movh.a	a15,#@his(Dem_NvMStorageBuffer)
	lea	a15,[a15]@los(Dem_NvMStorageBuffer)
.L719:
	addsc.a	a15,a15,d15,#0
.L587:
	lea	a2,[a15]24
	ld.bu	d15,[a2]
.L720:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   128          if(!Dem_NvMStorageBuffer[storageBufferId].busy)      (inlined)
	jne	d15,#0,.L69
.L721:
	mov	d15,#1
.L722:
	st.b	[a2],d15
.L723:
	st.b	[a15],d9
.L724:
	mul	d15,d9,#12
.L725:
	movh.a	a2,#@his(Dem_NvmBlockIdExtended)
	lea	a2,[a2]@los(Dem_NvmBlockIdExtended)
.L726:
	addsc.a	a2,a2,d15,#0
.L727:
	ld.bu	d15,[a2]8
.L588:
	movh.a	a4,#@his(DemCopyFctPtrTable)
	lea	a4,[a4]@los(DemCopyFctPtrTable)
.L728:
	addsc.a	a4,a4,d15,#2
	ld.a	a6,[a4]
.L729:
	mov.aa	a4,a15
	add.a	a4,#4
.L730:
	ld.a	a5,[a2]
.L731:
	ld.w	d4,[a2]4
	calli	a6
.L586:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   137              return &Dem_NvMStorageBuffer[storageBufferId];      (inlined)
	j	.L70

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   128          if(!Dem_NvMStorageBuffer[storageBufferId].busy)      (inlined)
.L69:
	add	d0,#1

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   126      for(storageBufferId = 0; storageBufferId < DEM_NVM_CFG_NUM_STORAGEBUFFER; storageBufferId++)      (inlined)
.L67:
	jlt.u	d0,#2,.L68
.L732:
	mov.a	a15,#0
.L589:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   140      return NULL_PTR;      (inlined)
	j	.L71

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   141  }      (inlined)
.L71:
.L70:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   175          if(demNvMStorageBuffer != NULL_PTR)      (inlined)
	jz.a	a15,.L72
.L733:
	addsc.a	a2,a13,d9,#1
	ld.hu	d4,[a2]0
.L734:
	mov.aa	a4,a15
	add.a	a4,#4
	call	NvM_WriteBlock
.L584:
	mov	d10,d2
.L590:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   178              if(returnValue != E_OK)      (inlined)
	jeq	d10,#0,.L73
.L414:
	mov	d15,#0
.L735:
	st.b	[a15]24,d15

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   178              if(returnValue != E_OK)      (inlined)
.L73:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   175          if(demNvMStorageBuffer != NULL_PTR)      (inlined)
.L72:
	j	.L74

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   172      if(Dem_NvMBlockIsUsingStorageBuffer(demNvMId))      (inlined)
.L64:
	addsc.a	a15,a13,d9,#1
	ld.hu	d4,[a15]0
.L736:
	mov.a	a4,#0
	call	NvM_WriteBlock
.L591:
	mov	d10,d2

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   184      else      (inlined)
.L74:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   188      return returnValue;      (inlined)
	j	.L75

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   189  }      (inlined)
.L75:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   271                  if(nvmResult == E_OK)      (inlined)
	jne	d10,#0,.L76
.L396:
	mul	d15,d9,#5
	addsc.a	a15,a14,d15,#0
.L737:
	ld.bu	d15,[a15]
.L738:
	or	d15,#32
	st.b	[a15],d15
.L415:
	mov	d0,#1
.L416:
	mul	d15,d9,#5
	addsc.a	a15,a14,d15,#0
.L739:
	ld.bu	d15,[a15]
.L740:
	xor	d0,d0,#255
.L741:
	and	d15,d0
	st.b	[a15],d15
.L417:
	mov	d0,#2
.L418:
	mul	d15,d9,#5
	addsc.a	a15,a14,d15,#0
.L742:
	ld.bu	d15,[a15]
.L743:
	xor	d0,d0,#255
.L744:
	and	d15,d0
	st.b	[a15],d15
.L419:
	mov	d0,#16
.L420:
	mul	d15,d9,#5
	addsc.a	a15,a14,d15,#0
.L745:
	ld.bu	d15,[a15]
.L746:
	xor	d0,d0,#255
.L747:
	and	d15,d0
	st.b	[a15],d15
.L421:
	mov	d0,#8
.L422:
	mul	d15,d9,#5
	addsc.a	a15,a14,d15,#0
.L748:
	ld.bu	d15,[a15]
.L749:
	xor	d0,d0,#255
.L750:
	and	d15,d0
	st.b	[a15],d15
.L423:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   273                      Dem_NvMBlockStatusSetBit(demNvMId, DEM_NVM_STATUSBITMASK_CLEAR_REQ);      (inlined)
	j	.L77

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   271                  if(nvmResult == E_OK)      (inlined)
.L76:
	mov	d8,#0

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   279                  else      (inlined)
.L77:
	j	.L78

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   267              if( Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_CLEAR) )      (inlined)
.L62:
	mul	d15,d9,#5
	addsc.a	a15,a14,d15,#0
.L751:
	ld.bu	d15,[a15]
.L752:
	and	d15,#16
.L753:
	ne	d15,d15,#0
.L754:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    77      return ((Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_INTERNAL] & bitmask) != 0);      (inlined)
	j	.L79

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    78  }      (inlined)
.L79:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   285              else if( Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_INVALIDATE) )      (inlined)
	jeq	d15,#0,.L80
.L755:
	addsc.a	a15,a13,d9,#1
	ld.hu	d4,[a15]0
	call	NvM_InvalidateNvBlock
.L592:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   289                  if(nvmResult == E_OK)      (inlined)
	jne	d2,#0,.L81
.L424:
	mul	d15,d9,#5
	addsc.a	a15,a14,d15,#0
.L756:
	ld.bu	d15,[a15]
.L757:
	or	d15,#32
	st.b	[a15],d15
.L425:
	mov	d0,#16
.L426:
	mul	d15,d9,#5
	addsc.a	a15,a14,d15,#0
.L758:
	ld.bu	d15,[a15]
.L759:
	xor	d0,d0,#255
.L760:
	and	d15,d0
	st.b	[a15],d15
.L427:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   291                      Dem_NvMBlockStatusSetBit(demNvMId, DEM_NVM_STATUSBITMASK_CLEAR_REQ);      (inlined)
	j	.L82

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   289                  if(nvmResult == E_OK)      (inlined)
.L81:
	mov	d8,#0

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   294                  else      (inlined)
.L82:
	j	.L83

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   285              else if( Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_INVALIDATE) )      (inlined)
.L80:
	mul	d15,d9,#5
	addsc.a	a15,a14,d15,#0
.L761:
	ld.bu	d15,[a15]
.L762:
	and	d15,#2
.L763:
	ne	d15,d15,#0
.L764:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    77      return ((Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_INTERNAL] & bitmask) != 0);      (inlined)
	j	.L84

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    78  }      (inlined)
.L84:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   300              else if( Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_IMMEDIATE) )      (inlined)
	jeq	d15,#0,.L85
.L428:
	mov	d10,#1
.L432:
	lt.u	d15,d9,#6
.L765:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    59      return (demNvMId < DEM_NVM_CFG_NUM_BLOCKS_EXTENDED);      (inlined)
	j	.L86

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    60  }      (inlined)
.L86:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   172      if(Dem_NvMBlockIsUsingStorageBuffer(demNvMId))      (inlined)
	jeq	d15,#0,.L87

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   124      DEM_ASSERT((demNvMId < DEM_NVM_CFG_NUM_BLOCKS_EXTENDED), DEM_DET_APIID_NVMSTATEMACHINE, 0);      (inlined)
.L88:
	jlt.u	d9,#6,.L89
.L766:
	mov	d4,#54
	mov	d5,#0
	mov	d6,#211
	mov	d7,#0
	call	Det_ReportError

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   124      DEM_ASSERT((demNvMId < DEM_NVM_CFG_NUM_BLOCKS_EXTENDED), DEM_DET_APIID_NVMSTATEMACHINE, 0);      (inlined)
.L89:
	mov	d0,#0
.L594:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   126      for(storageBufferId = 0; storageBufferId < DEM_NVM_CFG_NUM_STORAGEBUFFER; storageBufferId++)      (inlined)
	j	.L90
.L91:
	mul	d15,d0,#28
.L767:
	movh.a	a15,#@his(Dem_NvMStorageBuffer)
	lea	a15,[a15]@los(Dem_NvMStorageBuffer)
.L768:
	addsc.a	a15,a15,d15,#0
.L596:
	lea	a2,[a15]24
	ld.bu	d15,[a2]
.L769:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   128          if(!Dem_NvMStorageBuffer[storageBufferId].busy)      (inlined)
	jne	d15,#0,.L92
.L770:
	mov	d15,#1
.L771:
	st.b	[a2],d15
.L772:
	st.b	[a15],d9
.L773:
	mul	d15,d9,#12
.L774:
	movh.a	a2,#@his(Dem_NvmBlockIdExtended)
	lea	a2,[a2]@los(Dem_NvmBlockIdExtended)
.L775:
	addsc.a	a2,a2,d15,#0
.L776:
	ld.bu	d15,[a2]8
.L597:
	movh.a	a4,#@his(DemCopyFctPtrTable)
	lea	a4,[a4]@los(DemCopyFctPtrTable)
.L777:
	addsc.a	a4,a4,d15,#2
	ld.a	a6,[a4]
.L778:
	mov.aa	a4,a15
	add.a	a4,#4
.L779:
	ld.a	a5,[a2]
.L780:
	ld.w	d4,[a2]4
	calli	a6
.L595:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   137              return &Dem_NvMStorageBuffer[storageBufferId];      (inlined)
	j	.L93

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   128          if(!Dem_NvMStorageBuffer[storageBufferId].busy)      (inlined)
.L92:
	add	d0,#1

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   126      for(storageBufferId = 0; storageBufferId < DEM_NVM_CFG_NUM_STORAGEBUFFER; storageBufferId++)      (inlined)
.L90:
	jlt.u	d0,#2,.L91
.L781:
	mov.a	a15,#0
.L598:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   140      return NULL_PTR;      (inlined)
	j	.L94

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   141  }      (inlined)
.L94:
.L93:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   175          if(demNvMStorageBuffer != NULL_PTR)      (inlined)
	jz.a	a15,.L95
.L782:
	addsc.a	a2,a13,d9,#1
	ld.hu	d4,[a2]0
.L783:
	mov.aa	a4,a15
	add.a	a4,#4
	call	NvM_WriteBlock
.L593:
	mov	d10,d2
.L599:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   178              if(returnValue != E_OK)      (inlined)
	jeq	d10,#0,.L96
.L435:
	mov	d15,#0
.L784:
	st.b	[a15]24,d15

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   178              if(returnValue != E_OK)      (inlined)
.L96:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   175          if(demNvMStorageBuffer != NULL_PTR)      (inlined)
.L95:
	j	.L97

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   172      if(Dem_NvMBlockIsUsingStorageBuffer(demNvMId))      (inlined)
.L87:
	addsc.a	a15,a13,d9,#1
	ld.hu	d4,[a15]0
.L785:
	mov.a	a4,#0
	call	NvM_WriteBlock
.L600:
	mov	d10,d2

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   184      else      (inlined)
.L97:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   188      return returnValue;      (inlined)
	j	.L98

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   189  }      (inlined)
.L98:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   304                  if(nvmResult == E_OK)      (inlined)
	jne	d10,#0,.L99
.L429:
	mul	d15,d9,#5
	addsc.a	a15,a14,d15,#0
.L786:
	ld.bu	d15,[a15]
.L787:
	or	d15,#4
	st.b	[a15],d15
.L436:
	mov	d0,#1
.L437:
	mul	d15,d9,#5
	addsc.a	a15,a14,d15,#0
.L788:
	ld.bu	d15,[a15]
.L789:
	xor	d0,d0,#255
.L790:
	and	d15,d0
	st.b	[a15],d15
.L438:
	mov	d0,#2
.L439:
	mul	d15,d9,#5
	addsc.a	a15,a14,d15,#0
.L791:
	ld.bu	d15,[a15]
.L792:
	xor	d0,d0,#255
.L793:
	and	d15,d0
	st.b	[a15],d15
.L440:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   306                      Dem_NvMBlockStatusSetBit(demNvMId, DEM_NVM_STATUSBITMASK_IMMEDIATE_REQ);      (inlined)
	j	.L100

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   304                  if(nvmResult == E_OK)      (inlined)
.L99:
	mov	d8,#0

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   310                  else      (inlined)
.L100:
	j	.L101

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   300              else if( Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_IMMEDIATE) )      (inlined)
.L85:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   315              else      (inlined)
.L101:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   300              else if( Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_IMMEDIATE) )      (inlined)
.L83:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   285              else if( Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_INVALIDATE) )      (inlined)
.L78:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   264          if(!Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_EXCLUDE))      (inlined)
.L60:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   247      if(nvmResult != DEM_NVM_PENDING)      (inlined)
.L52:
	mov	d15,d8

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   321      return returnValue;      (inlined)
	j	.L102

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   322  }      (inlined)
.L102:
	jne	d15,#0,.L103
.L794:
	j	.L104
.L103:
	lea	a15,[a10]0
.L795:
	ld.bu	d0,[a12]
.L442:
	ld.bu	d15,[a15]
.L796:
	add	d15,#1
	st.b	[a15],d15
.L797:
	ld.bu	d15,[a15]
.L798:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   328      if(*it >= DEM_NVM_CFG_NUM_BLOCKS_EXTENDED)      (inlined)
	jlt.u	d15,#6,.L105
.L799:
	mov	d15,#0
.L800:
	st.b	[a15],d15

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   328      if(*it >= DEM_NVM_CFG_NUM_BLOCKS_EXTENDED)      (inlined)
.L105:
	ld.bu	d15,[a15]
.L801:
	ne	d15,d15,d0
.L802:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   332      return ((*it) != start);      (inlined)
	j	.L106

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   333  }      (inlined)
.L106:
	jne	d15,#0,.L32

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   377      /* Save location for next cycle */
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   378      lastIndexPreviousMain = currentWriteLocation;
.L104:
	ld.bu	d15,[a10]
.L803:
	st.b	[a12],d15
.L804:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   379  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   380  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   381      /* Handle States of callback-blocks*/
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   382      for (currentWriteLocation = DEM_NVM_CFG_NUM_BLOCKS_EXTENDED; currentWriteLocation < DEM_NVM_CFG_NUM_BLOCKS_TOTAL; currentWriteLocation++)
	mov	d15,#6
.L805:
	st.b	[a10],d15
.L806:
	j	.L107
.L108:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   383      {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   384          if(!Dem_NvMHandleStates(currentWriteLocation))
	ld.bu	d9,[a10]
.L448:
	mov	d8,#1
.L601:
	mov	d15,d9
.L451:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     1   
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     2  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     3  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     4  #ifndef DEM_NVM_H
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     5  #define DEM_NVM_H
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     6  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     7  #include "NvM.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     8  #include "Dem_Main.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     9  #include "Dem_Nvm_Types.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    10  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    11  #include "Dem_Types.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    12  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    13  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    14  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    15  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    16  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    17  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    18  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    19  DEM_ARRAY_DECLARE(Dem_NvMBlockStatusDoubleBufferType, Dem_NvMBlockStatusDoubleBuffer, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    20  DEM_ARRAY_DECLARE(Dem_NvMStorageBufferType, Dem_NvMStorageBuffer, DEM_NVM_CFG_NUM_STORAGEBUFFER);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    21  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    22  extern Dem_EraseAllStatusType Dem_EraseAllNvMDataStatus;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    23  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    24  DEM_ARRAY_DECLARE(Dem_NvmHashIdType, Dem_HashIdInNvm, DEM_NVM_HASH_ID_SIZE);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    25  #endif
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    26  extern boolean Dem_NvMAnyClearFailed;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    27  #if(DEM_CFG_TRIGGER_TO_STORE_NVM_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    28  extern boolean Dem_NvMImmediateStorageRequested;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    29  #endif
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    30  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    31  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    32  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    33  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    34  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    35  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    36  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    37  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    38  DEM_ARRAY_DECLARE_CONST(NvM_BlockIdType, Dem_NvMBlockMap2NvmId, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    39  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdExtendedType, Dem_NvmBlockIdExtended, DEM_NVM_CFG_NUM_BLOCKS_EXTENDED);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    40  DEM_ARRAY_DECLARE_CONST(Dem_NvmCopyFunction, DemCopyFctPtrTable, DEM_NVM_CFG_COPYFCT_NUM);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    41  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    42  DEM_ARRAY_DECLARE_CONST(Dem_NvmHashIdType, Dem_HashIdInRom, DEM_NVM_HASH_ID_SIZE);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    43  #endif
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    44  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    45  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    46  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    47  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    48  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    49  DEM_INLINE NvM_BlockIdType Dem_NvMGetNvMBlocKId(Dem_NvmBlockIdType id)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    50  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    51      return Dem_NvMBlockMap2NvmId[id];
	addsc.a	a15,a13,d15,#1
	ld.hu	d4,[a15]0
.L807:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    51      return Dem_NvMBlockMap2NvmId[id];      (inlined)
	j	.L109

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    52  }      (inlined)
.L109:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    52  }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    53  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    54  DEM_INLINE Dem_NvmResultType Dem_NvmGetStatus (Dem_NvmBlockIdType id)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    55  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    56      NvM_RequestResultType result;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    57      if (NvM_GetErrorStatus (Dem_NvMGetNvMBlocKId(id), &result) == E_NOT_OK)
	lea	a4,[a10]1
	call	NvM_GetErrorStatus
.L808:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    57      if (NvM_GetErrorStatus (Dem_NvMGetNvMBlocKId(id), &result) == E_NOT_OK)      (inlined)
	jne	d2,#1,.L110
.L809:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    58      {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    59          return DEM_NVM_FAILED;
	mov	d0,#1

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    59          return DEM_NVM_FAILED;      (inlined)
	j	.L111

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    57      if (NvM_GetErrorStatus (Dem_NvMGetNvMBlocKId(id), &result) == E_NOT_OK)      (inlined)
.L110:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    60      }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    61  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    62      switch (result)
	ld.bu	d15,[a10]1
.L810:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    63      {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    64          case NVM_REQ_CANCELED:
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    65              return DEM_NVM_CANCELED;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    66  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    67          case NVM_REQ_OK:
	mov	d0,#0
	jeq	d15,d0,.L112
.L811:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    68          case NVM_REQ_REDUNDANCY_FAILED:     /* Driver could trigger correction of the damaged part of the redundant block; data is read correctly nevertheless */
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    69          case NVM_REQ_RESTORED_FROM_ROM:
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    70              return DEM_NVM_SUCCESS;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    71  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    72          case NVM_REQ_PENDING:
	mov	d0,#2
	jeq	d15,d0,.L113
.L812:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    73              return DEM_NVM_PENDING;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    74  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    75          case NVM_REQ_NV_INVALIDATED:
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    76              return DEM_NVM_INVALID;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    77  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    78          case NVM_REQ_INTEGRITY_FAILED:
	mov	d0,#3
	jeq	d15,d0,.L114
.L813:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    79              return DEM_NVM_INTEGRITY_FAILED;    /* NVM_REQ_INTEGRITY_FAILED: description in NVM-doc: Indicates that the latest read operation did not find any valid data for this block on the persistent media. */
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    80  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    81          case NVM_REQ_BLOCK_SKIPPED:
	mov	d0,#4
	jeq	d15,d0,.L115
.L814:
	mov	d0,#5
	jeq	d15,d0,.L116
.L815:
	mov	d0,#6
	jeq	d15,d0,.L117
.L816:
	mov	d0,#7
	jeq	d15,d0,.L118
.L817:
	mov	d0,#8
	jeq	d15,d0,.L119
	j	.L120

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    64          case NVM_REQ_CANCELED:      (inlined)
.L117:
	mov	d0,#6

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    65              return DEM_NVM_CANCELED;      (inlined)
	j	.L121

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    67          case NVM_REQ_OK:      (inlined)
.L112:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    68          case NVM_REQ_REDUNDANCY_FAILED:     /* Driver could trigger correction of the damaged part of the redundant block; data is read correctly nevertheless */      (inlined)
.L118:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    69          case NVM_REQ_RESTORED_FROM_ROM:      (inlined)
.L119:
	mov	d0,#0

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    70              return DEM_NVM_SUCCESS;      (inlined)
	j	.L122

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    72          case NVM_REQ_PENDING:      (inlined)
.L113:
	mov	d0,#2

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    73              return DEM_NVM_PENDING;      (inlined)
	j	.L123

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    75          case NVM_REQ_NV_INVALIDATED:      (inlined)
.L116:
	mov	d0,#5

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    76              return DEM_NVM_INVALID;      (inlined)
	j	.L124

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    78          case NVM_REQ_INTEGRITY_FAILED:      (inlined)
.L114:
	mov	d0,#3

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    79              return DEM_NVM_INTEGRITY_FAILED;    /* NVM_REQ_INTEGRITY_FAILED: description in NVM-doc: Indicates that the latest read operation did not find any valid data for this block on the persistent media. */      (inlined)
	j	.L125

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    81          case NVM_REQ_BLOCK_SKIPPED:      (inlined)
.L115:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    82              return DEM_NVM_BLOCK_SKIPPED;       /* NVM_REQ_BLOCK_SKIPPED: if readall would be skipped, it is treated as failure for DEM, because all NVM data has to be available
	mov	d0,#4

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    82              return DEM_NVM_BLOCK_SKIPPED;       /* NVM_REQ_BLOCK_SKIPPED: if readall would be skipped, it is treated as failure for DEM, because all NVM data has to be available      (inlined)
	j	.L126

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    86          default:      (inlined)
.L120:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    83                                                 at init (ErrorQueue is flushed and event status / eventMemory content needs to be available)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    84                                                 This is ensured as the checks during init are checked to be DEM_NVM_SUCCESS. All other states are handled as error */
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    85  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    86          default:
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    87              /*   NVM_REQ_NOT_OK: Indicates that the latest operation failed due to an unexpected event.  */
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    88              return DEM_NVM_FAILED;
	mov	d0,#1

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    88              return DEM_NVM_FAILED;      (inlined)
	j	.L127

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    90  }      (inlined)
.L127:
.L126:
.L125:
.L124:
.L123:
.L122:
.L121:
.L111:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   247      if(nvmResult != DEM_NVM_PENDING)      (inlined)
	jeq	d0,#2,.L128
.L453:
	movh.a	a12,#@his(Dem_NvMBlockStatusDoubleBuffer)
	lea	a12,[a12]@los(Dem_NvMBlockStatusDoubleBuffer)
.L818:
	mul	d15,d9,#5
	addsc.a	a15,a12,d15,#0
.L819:
	ld.bu	d15,[a15]
.L820:
	and	d15,#32
.L821:
	ne	d15,d15,#0
.L822:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    77      return ((Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_INTERNAL] & bitmask) != 0);      (inlined)
	j	.L129

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    78  }      (inlined)
.L129:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   250          if( Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_CLEAR_REQ) )      (inlined)
	jeq	d15,#0,.L130
.L823:
	mov	d1,#32
.L454:
	mul	d15,d9,#5
	addsc.a	a15,a12,d15,#0
.L824:
	ld.bu	d15,[a15]
.L825:
	xor	d1,d1,#255
.L826:
	and	d15,d1
	st.b	[a15],d15
.L455:
	mov	d1,#0
.L827:
	movh.a	a15,#@his(Dem_NvMAnyClearFailed)
	lea	a15,[a15]@los(Dem_NvMAnyClearFailed)
	ld.bu	d15,[a15]
.L828:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   253              Dem_NvMAnyClearFailed = ((Dem_NvMAnyClearFailed) || (nvmResult == DEM_NVM_FAILED));      (inlined)
	jne	d15,#0,.L131
.L829:
	jne	d0,#1,.L132
.L131:
	mov	d1,#1

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   253              Dem_NvMAnyClearFailed = ((Dem_NvMAnyClearFailed) || (nvmResult == DEM_NVM_FAILED));      (inlined)
.L132:
	st.b	[a15],d1

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   250          if( Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_CLEAR_REQ) )      (inlined)
.L130:
	mul	d15,d9,#5
	addsc.a	a15,a12,d15,#0
.L830:
	ld.bu	d15,[a15]
.L831:
	and	d15,#4
.L832:
	ne	d15,d15,#0
.L833:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    77      return ((Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_INTERNAL] & bitmask) != 0);      (inlined)
	j	.L133

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    78  }      (inlined)
.L133:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   257          if( Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_IMMEDIATE_REQ))      (inlined)
	jeq	d15,#0,.L134
.L834:
	mov	d0,#4
.L456:
	mul	d15,d9,#5
	addsc.a	a15,a12,d15,#0
.L835:
	ld.bu	d15,[a15]
.L836:
	xor	d0,d0,#255
.L837:
	and	d15,d0
	st.b	[a15],d15

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   257          if( Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_IMMEDIATE_REQ))      (inlined)
.L134:
	mul	d15,d9,#5
	addsc.a	a15,a12,d15,#0
.L838:
	ld.bu	d15,[a15]
.L839:
	and	d15,#64
.L840:
	ne	d15,d15,#0
.L841:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    77      return ((Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_INTERNAL] & bitmask) != 0);      (inlined)
	j	.L135

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    78  }      (inlined)
.L135:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   264          if(!Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_EXCLUDE))      (inlined)
	jne	d15,#0,.L136
.L457:
	mul	d15,d9,#5
	addsc.a	a15,a12,d15,#0
.L842:
	ld.bu	d15,[a15]
.L843:
	and	d15,#8
.L844:
	ne	d15,d15,#0
.L845:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    77      return ((Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_INTERNAL] & bitmask) != 0);      (inlined)
	j	.L137

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    78  }      (inlined)
.L137:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   267              if( Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_CLEAR) )      (inlined)
	jeq	d15,#0,.L138
.L458:
	mov	d10,#1
.L462:
	lt.u	d15,d9,#6
.L846:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    59      return (demNvMId < DEM_NVM_CFG_NUM_BLOCKS_EXTENDED);      (inlined)
	j	.L139

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    60  }      (inlined)
.L139:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   172      if(Dem_NvMBlockIsUsingStorageBuffer(demNvMId))      (inlined)
	jeq	d15,#0,.L140

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   124      DEM_ASSERT((demNvMId < DEM_NVM_CFG_NUM_BLOCKS_EXTENDED), DEM_DET_APIID_NVMSTATEMACHINE, 0);      (inlined)
.L141:
	jlt.u	d9,#6,.L142
.L847:
	mov	d4,#54
	mov	d5,#0
	mov	d6,#211
	mov	d7,#0
	call	Det_ReportError

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   124      DEM_ASSERT((demNvMId < DEM_NVM_CFG_NUM_BLOCKS_EXTENDED), DEM_DET_APIID_NVMSTATEMACHINE, 0);      (inlined)
.L142:
	mov	d0,#0
.L603:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   126      for(storageBufferId = 0; storageBufferId < DEM_NVM_CFG_NUM_STORAGEBUFFER; storageBufferId++)      (inlined)
	j	.L143
.L144:
	mul	d15,d0,#28
.L848:
	movh.a	a15,#@his(Dem_NvMStorageBuffer)
	lea	a15,[a15]@los(Dem_NvMStorageBuffer)
.L849:
	addsc.a	a14,a15,d15,#0
.L605:
	lea	a15,[a14]24
	ld.bu	d15,[a15]
.L850:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   128          if(!Dem_NvMStorageBuffer[storageBufferId].busy)      (inlined)
	jne	d15,#0,.L145
.L851:
	mov	d15,#1
.L852:
	st.b	[a15],d15
.L853:
	st.b	[a14],d9
.L854:
	mul	d15,d9,#12
.L855:
	movh.a	a15,#@his(Dem_NvmBlockIdExtended)
	lea	a15,[a15]@los(Dem_NvmBlockIdExtended)
.L856:
	addsc.a	a15,a15,d15,#0
.L857:
	ld.bu	d15,[a15]8
.L606:
	movh.a	a2,#@his(DemCopyFctPtrTable)
	lea	a2,[a2]@los(DemCopyFctPtrTable)
.L858:
	addsc.a	a2,a2,d15,#2
	ld.a	a2,[a2]
.L859:
	mov.aa	a4,a14
	add.a	a4,#4
.L860:
	ld.a	a5,[a15]
.L861:
	ld.w	d4,[a15]4
	calli	a2
.L604:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   137              return &Dem_NvMStorageBuffer[storageBufferId];      (inlined)
	j	.L146

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   128          if(!Dem_NvMStorageBuffer[storageBufferId].busy)      (inlined)
.L145:
	add	d0,#1

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   126      for(storageBufferId = 0; storageBufferId < DEM_NVM_CFG_NUM_STORAGEBUFFER; storageBufferId++)      (inlined)
.L143:
	jlt.u	d0,#2,.L144
.L862:
	mov.a	a14,#0
.L607:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   140      return NULL_PTR;      (inlined)
	j	.L147

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   141  }      (inlined)
.L147:
.L146:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   175          if(demNvMStorageBuffer != NULL_PTR)      (inlined)
	jz.a	a14,.L148
.L863:
	addsc.a	a15,a13,d9,#1
	ld.hu	d4,[a15]0
.L864:
	mov.aa	a4,a14
	add.a	a4,#4
	call	NvM_WriteBlock
.L602:
	mov	d10,d2
.L608:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   178              if(returnValue != E_OK)      (inlined)
	jeq	d10,#0,.L149
.L465:
	mov	d15,#0
.L865:
	st.b	[a14]24,d15

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   178              if(returnValue != E_OK)      (inlined)
.L149:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   175          if(demNvMStorageBuffer != NULL_PTR)      (inlined)
.L148:
	j	.L150

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   172      if(Dem_NvMBlockIsUsingStorageBuffer(demNvMId))      (inlined)
.L140:
	addsc.a	a15,a13,d9,#1
	ld.hu	d4,[a15]0
.L866:
	mov.a	a4,#0
	call	NvM_WriteBlock
.L609:
	mov	d10,d2

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   184      else      (inlined)
.L150:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   188      return returnValue;      (inlined)
	j	.L151

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   189  }      (inlined)
.L151:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   271                  if(nvmResult == E_OK)      (inlined)
	jne	d10,#0,.L152
.L459:
	mul	d15,d9,#5
	addsc.a	a15,a12,d15,#0
.L867:
	ld.bu	d15,[a15]
.L868:
	or	d15,#32
	st.b	[a15],d15
.L466:
	mov	d0,#1
.L467:
	mul	d15,d9,#5
	addsc.a	a15,a12,d15,#0
.L869:
	ld.bu	d15,[a15]
.L870:
	xor	d0,d0,#255
.L871:
	and	d15,d0
	st.b	[a15],d15
.L468:
	mov	d0,#2
.L469:
	mul	d15,d9,#5
	addsc.a	a15,a12,d15,#0
.L872:
	ld.bu	d15,[a15]
.L873:
	xor	d0,d0,#255
.L874:
	and	d15,d0
	st.b	[a15],d15
.L470:
	mov	d0,#16
.L471:
	mul	d15,d9,#5
	addsc.a	a15,a12,d15,#0
.L875:
	ld.bu	d15,[a15]
.L876:
	xor	d0,d0,#255
.L877:
	and	d15,d0
	st.b	[a15],d15
.L472:
	mov	d0,#8
.L473:
	mul	d15,d9,#5
	addsc.a	a15,a12,d15,#0
.L878:
	ld.bu	d15,[a15]
.L879:
	xor	d0,d0,#255
.L880:
	and	d15,d0
	st.b	[a15],d15
.L474:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   273                      Dem_NvMBlockStatusSetBit(demNvMId, DEM_NVM_STATUSBITMASK_CLEAR_REQ);      (inlined)
	j	.L153

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   271                  if(nvmResult == E_OK)      (inlined)
.L152:
	mov	d8,#0

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   279                  else      (inlined)
.L153:
	j	.L154

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   267              if( Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_CLEAR) )      (inlined)
.L138:
	mul	d15,d9,#5
	addsc.a	a15,a12,d15,#0
.L881:
	ld.bu	d15,[a15]
.L882:
	and	d15,#16
.L883:
	ne	d15,d15,#0
.L884:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    77      return ((Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_INTERNAL] & bitmask) != 0);      (inlined)
	j	.L155

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    78  }      (inlined)
.L155:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   285              else if( Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_INVALIDATE) )      (inlined)
	jeq	d15,#0,.L156
.L885:
	addsc.a	a15,a13,d9,#1
	ld.hu	d4,[a15]0
	call	NvM_InvalidateNvBlock
.L610:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   289                  if(nvmResult == E_OK)      (inlined)
	jne	d2,#0,.L157
.L475:
	mul	d15,d9,#5
	addsc.a	a15,a12,d15,#0
.L886:
	ld.bu	d15,[a15]
.L887:
	or	d15,#32
	st.b	[a15],d15
.L476:
	mov	d0,#16
.L477:
	mul	d15,d9,#5
	addsc.a	a15,a12,d15,#0
.L888:
	ld.bu	d15,[a15]
.L889:
	xor	d0,d0,#255
.L890:
	and	d15,d0
	st.b	[a15],d15
.L478:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   291                      Dem_NvMBlockStatusSetBit(demNvMId, DEM_NVM_STATUSBITMASK_CLEAR_REQ);      (inlined)
	j	.L158

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   289                  if(nvmResult == E_OK)      (inlined)
.L157:
	mov	d8,#0

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   294                  else      (inlined)
.L158:
	j	.L159

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   285              else if( Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_INVALIDATE) )      (inlined)
.L156:
	mul	d15,d9,#5
	addsc.a	a15,a12,d15,#0
.L891:
	ld.bu	d15,[a15]
.L892:
	and	d15,#2
.L893:
	ne	d15,d15,#0
.L894:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    77      return ((Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_INTERNAL] & bitmask) != 0);      (inlined)
	j	.L160

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    78  }      (inlined)
.L160:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   300              else if( Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_IMMEDIATE) )      (inlined)
	jeq	d15,#0,.L161
.L479:
	mov	d10,#1
.L483:
	lt.u	d15,d9,#6
.L895:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    59      return (demNvMId < DEM_NVM_CFG_NUM_BLOCKS_EXTENDED);      (inlined)
	j	.L162

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    60  }      (inlined)
.L162:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   172      if(Dem_NvMBlockIsUsingStorageBuffer(demNvMId))      (inlined)
	jeq	d15,#0,.L163

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   124      DEM_ASSERT((demNvMId < DEM_NVM_CFG_NUM_BLOCKS_EXTENDED), DEM_DET_APIID_NVMSTATEMACHINE, 0);      (inlined)
.L164:
	jlt.u	d9,#6,.L165
.L896:
	mov	d4,#54
	mov	d5,#0
	mov	d6,#211
	mov	d7,#0
	call	Det_ReportError

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   124      DEM_ASSERT((demNvMId < DEM_NVM_CFG_NUM_BLOCKS_EXTENDED), DEM_DET_APIID_NVMSTATEMACHINE, 0);      (inlined)
.L165:
	mov	d0,#0
.L612:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   126      for(storageBufferId = 0; storageBufferId < DEM_NVM_CFG_NUM_STORAGEBUFFER; storageBufferId++)      (inlined)
	j	.L166
.L167:
	mul	d15,d0,#28
.L897:
	movh.a	a15,#@his(Dem_NvMStorageBuffer)
	lea	a15,[a15]@los(Dem_NvMStorageBuffer)
.L898:
	addsc.a	a14,a15,d15,#0
.L614:
	lea	a15,[a14]24
	ld.bu	d15,[a15]
.L899:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   128          if(!Dem_NvMStorageBuffer[storageBufferId].busy)      (inlined)
	jne	d15,#0,.L168
.L900:
	mov	d15,#1
.L901:
	st.b	[a15],d15
.L902:
	st.b	[a14],d9
.L903:
	mul	d15,d9,#12
.L904:
	movh.a	a15,#@his(Dem_NvmBlockIdExtended)
	lea	a15,[a15]@los(Dem_NvmBlockIdExtended)
.L905:
	addsc.a	a15,a15,d15,#0
.L906:
	ld.bu	d15,[a15]8
.L615:
	movh.a	a2,#@his(DemCopyFctPtrTable)
	lea	a2,[a2]@los(DemCopyFctPtrTable)
.L907:
	addsc.a	a2,a2,d15,#2
	ld.a	a2,[a2]
.L908:
	mov.aa	a4,a14
	add.a	a4,#4
.L909:
	ld.a	a5,[a15]
.L910:
	ld.w	d4,[a15]4
	calli	a2
.L613:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   137              return &Dem_NvMStorageBuffer[storageBufferId];      (inlined)
	j	.L169

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   128          if(!Dem_NvMStorageBuffer[storageBufferId].busy)      (inlined)
.L168:
	add	d0,#1

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   126      for(storageBufferId = 0; storageBufferId < DEM_NVM_CFG_NUM_STORAGEBUFFER; storageBufferId++)      (inlined)
.L166:
	jlt.u	d0,#2,.L167
.L911:
	mov.a	a14,#0
.L616:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   140      return NULL_PTR;      (inlined)
	j	.L170

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   141  }      (inlined)
.L170:
.L169:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   175          if(demNvMStorageBuffer != NULL_PTR)      (inlined)
	jz.a	a14,.L171
.L912:
	addsc.a	a15,a13,d9,#1
	ld.hu	d4,[a15]0
.L913:
	mov.aa	a4,a14
	add.a	a4,#4
	call	NvM_WriteBlock
.L611:
	mov	d10,d2
.L617:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   178              if(returnValue != E_OK)      (inlined)
	jeq	d10,#0,.L172
.L486:
	mov	d15,#0
.L914:
	st.b	[a14]24,d15

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   178              if(returnValue != E_OK)      (inlined)
.L172:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   175          if(demNvMStorageBuffer != NULL_PTR)      (inlined)
.L171:
	j	.L173

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   172      if(Dem_NvMBlockIsUsingStorageBuffer(demNvMId))      (inlined)
.L163:
	addsc.a	a15,a13,d9,#1
	ld.hu	d4,[a15]0
.L915:
	mov.a	a4,#0
	call	NvM_WriteBlock
.L618:
	mov	d10,d2

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   184      else      (inlined)
.L173:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   188      return returnValue;      (inlined)
	j	.L174

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   189  }      (inlined)
.L174:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   304                  if(nvmResult == E_OK)      (inlined)
	jne	d10,#0,.L175
.L480:
	mul	d15,d9,#5
	addsc.a	a15,a12,d15,#0
.L916:
	ld.bu	d15,[a15]
.L917:
	or	d15,#4
	st.b	[a15],d15
.L487:
	mov	d0,#1
.L488:
	mul	d15,d9,#5
	addsc.a	a15,a12,d15,#0
.L918:
	ld.bu	d15,[a15]
.L919:
	xor	d0,d0,#255
.L920:
	and	d15,d0
	st.b	[a15],d15
.L489:
	mov	d0,#2
.L490:
	mul	d15,d9,#5
	addsc.a	a15,a12,d15,#0
.L921:
	ld.bu	d15,[a15]
.L922:
	xor	d0,d0,#255
.L923:
	and	d15,d0
	st.b	[a15],d15
.L491:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   306                      Dem_NvMBlockStatusSetBit(demNvMId, DEM_NVM_STATUSBITMASK_IMMEDIATE_REQ);      (inlined)
	j	.L176

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   304                  if(nvmResult == E_OK)      (inlined)
.L175:
	mov	d8,#0

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   310                  else      (inlined)
.L176:
	j	.L177

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   300              else if( Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_IMMEDIATE) )      (inlined)
.L161:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   315              else      (inlined)
.L177:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   300              else if( Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_IMMEDIATE) )      (inlined)
.L159:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   285              else if( Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_INVALIDATE) )      (inlined)
.L154:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   264          if(!Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_EXCLUDE))      (inlined)
.L136:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   247      if(nvmResult != DEM_NVM_PENDING)      (inlined)
.L128:
	mov	d15,d8

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   321      return returnValue;      (inlined)
	j	.L178

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   322  }      (inlined)
.L178:
	jne	d15,#0,.L179
.L924:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   385          {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   386              break;
	j	.L180
.L179:
	ld.bu	d15,[a10]
.L925:
	add	d15,#1
	st.b	[a10],d15
.L107:
	ld.bu	d15,[a10]
.L926:
	jlt.u	d15,#7,.L108

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   387          }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   388      }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   389  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   390  #if(DEM_CFG_ERASE_ALL_DATA_SUPPORTED != DEM_CFG_ERASE_ALL_OFF)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   391      if(Dem_NvMIsInvalidateAllNVMBlocksRequested() && !Dem_NvMIsClearPending())
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   392      {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   393          if(Dem_NvMAnyClearFailed)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   394          {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   395              Dem_EraseAllNvMDataStatus = DEM_ERASE_ALL_STATUS_FAILED;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   396          }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   397          else
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   398          {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   399  #if(DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   400              if((Dem_EraseAllNvMDataStatus != DEM_ERASE_ALL_STATUS_HASHID_WRITE_PENDING)&&(Dem_EraseAllNvMDataStatus != DEM_ERASE_ALL_STATUS_SUCCESS))
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   401              {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   402                  DEM_MEMCPY(&Dem_HashIdInNvm,&Dem_HashIdInRom,DEM_SIZEOF_VAR(Dem_HashIdInRom));
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   403                  Dem_NvMClearBlockByWrite(DEM_NVM_ID_DEM_HASH_ID);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   404                  Dem_EraseAllNvMDataStatus = DEM_ERASE_ALL_STATUS_HASHID_WRITE_PENDING;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   405              }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   406              else
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   407  #endif
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   408              {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   409                  Dem_EraseAllNvMDataStatus = DEM_ERASE_ALL_STATUS_SUCCESS;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   410              }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   411          }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   412      }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   413  #endif
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   414  }
.L180:
	ret
.L323:
	
__Dem_NvMMainFunction_function_end:
	.size	Dem_NvMMainFunction,__Dem_NvMMainFunction_function_end-Dem_NvMMainFunction
.L272:
	; End of function
	
	.sdecl	'.text.Dem_Nvm.Dem_NvMShutdown',code,cluster('Dem_NvMShutdown')
	.sect	'.text.Dem_Nvm.Dem_NvMShutdown'
	.align	2
	
	.global	Dem_NvMShutdown

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   415  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   416  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   417  void Dem_NvMShutdown(void)
; Function Dem_NvMShutdown
.L246:
Dem_NvMShutdown:	.type	func
	mov	d15,#6
.L498:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     1   
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     2  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     3  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     4  #ifndef DEM_NVM_H
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     5  #define DEM_NVM_H
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     6  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     7  #include "NvM.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     8  #include "Dem_Main.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     9  #include "Dem_Nvm_Types.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    10  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    11  #include "Dem_Types.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    12  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    13  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    14  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    15  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    16  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    17  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    18  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    19  DEM_ARRAY_DECLARE(Dem_NvMBlockStatusDoubleBufferType, Dem_NvMBlockStatusDoubleBuffer, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    20  DEM_ARRAY_DECLARE(Dem_NvMStorageBufferType, Dem_NvMStorageBuffer, DEM_NVM_CFG_NUM_STORAGEBUFFER);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    21  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    22  extern Dem_EraseAllStatusType Dem_EraseAllNvMDataStatus;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    23  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    24  DEM_ARRAY_DECLARE(Dem_NvmHashIdType, Dem_HashIdInNvm, DEM_NVM_HASH_ID_SIZE);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    25  #endif
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    26  extern boolean Dem_NvMAnyClearFailed;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    27  #if(DEM_CFG_TRIGGER_TO_STORE_NVM_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    28  extern boolean Dem_NvMImmediateStorageRequested;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    29  #endif
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    30  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    31  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    32  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    33  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    34  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    35  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    36  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    37  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    38  DEM_ARRAY_DECLARE_CONST(NvM_BlockIdType, Dem_NvMBlockMap2NvmId, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    39  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdExtendedType, Dem_NvmBlockIdExtended, DEM_NVM_CFG_NUM_BLOCKS_EXTENDED);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    40  DEM_ARRAY_DECLARE_CONST(Dem_NvmCopyFunction, DemCopyFctPtrTable, DEM_NVM_CFG_COPYFCT_NUM);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    41  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    42  DEM_ARRAY_DECLARE_CONST(Dem_NvmHashIdType, Dem_HashIdInRom, DEM_NVM_HASH_ID_SIZE);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    43  #endif
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    44  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    45  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    46  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    47  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    48  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    49  DEM_INLINE NvM_BlockIdType Dem_NvMGetNvMBlocKId(Dem_NvmBlockIdType id)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    50  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    51      return Dem_NvMBlockMap2NvmId[id];
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    52  }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    53  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    54  DEM_INLINE Dem_NvmResultType Dem_NvmGetStatus (Dem_NvmBlockIdType id)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    55  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    56      NvM_RequestResultType result;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    57      if (NvM_GetErrorStatus (Dem_NvMGetNvMBlocKId(id), &result) == E_NOT_OK)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    58      {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    59          return DEM_NVM_FAILED;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    60      }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    61  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    62      switch (result)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    63      {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    64          case NVM_REQ_CANCELED:
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    65              return DEM_NVM_CANCELED;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    66  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    67          case NVM_REQ_OK:
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    68          case NVM_REQ_REDUNDANCY_FAILED:     /* Driver could trigger correction of the damaged part of the redundant block; data is read correctly nevertheless */
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    69          case NVM_REQ_RESTORED_FROM_ROM:
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    70              return DEM_NVM_SUCCESS;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    71  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    72          case NVM_REQ_PENDING:
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    73              return DEM_NVM_PENDING;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    74  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    75          case NVM_REQ_NV_INVALIDATED:
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    76              return DEM_NVM_INVALID;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    77  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    78          case NVM_REQ_INTEGRITY_FAILED:
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    79              return DEM_NVM_INTEGRITY_FAILED;    /* NVM_REQ_INTEGRITY_FAILED: description in NVM-doc: Indicates that the latest read operation did not find any valid data for this block on the persistent media. */
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    80  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    81          case NVM_REQ_BLOCK_SKIPPED:
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    82              return DEM_NVM_BLOCK_SKIPPED;       /* NVM_REQ_BLOCK_SKIPPED: if readall would be skipped, it is treated as failure for DEM, because all NVM data has to be available
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    83                                                 at init (ErrorQueue is flushed and event status / eventMemory content needs to be available)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    84                                                 This is ensured as the checks during init are checked to be DEM_NVM_SUCCESS. All other states are handled as error */
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    85  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    86          default:
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    87              /*   NVM_REQ_NOT_OK: Indicates that the latest operation failed due to an unexpected event.  */
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    88              return DEM_NVM_FAILED;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    89      }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    90  }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    91  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    92  DEM_INLINE void Dem_NvMWriteBlockOnShutdown(Dem_NvmBlockIdType id)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    93  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    94      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_SHUTDOWN] = DEM_NVM_STATUSBITMASK_SHUTDOWN;
	movh.a	a12,#@his(Dem_NvMBlockStatusDoubleBuffer)
	lea	a12,[a12]@los(Dem_NvMBlockStatusDoubleBuffer)
.L931:
	mul	d15,d15,#5
	addsc.a	a15,a12,d15,#0
.L932:
	mov	d15,#1
.L933:
	st.b	[a15]1,d15
.L499:
	call	Dem_PreStoredFFShutdown
.L495:
	mov	d1,#0
.L619:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    85      for(demNvMId = 0; demNvMId < DEM_NVM_CFG_NUM_BLOCKS_TOTAL; demNvMId++)      (inlined)
	j	.L181
.L182:
	mul	d15,d1,#5
	addsc.a	a15,a12,d15,#0
.L934:
	mov.aa	a2,a15
.L935:
	add.a	a2,#1
	ld.bu	d0,[a2]
.L936:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    88          if(Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_SHUTDOWN] != DEM_NVM_STATUSBITMASK_NONE)      (inlined)
	jeq	d0,#0,.L183
.L505:
	mul	d15,d1,#5
	addsc.a	a4,a12,d15,#0
.L937:
	ld.bu	d15,[a4]
.L938:
	or	d0,d15
	st.b	[a4],d0
.L506:
	mov	d15,#0
.L939:
	st.b	[a2],d15

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    88          if(Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_SHUTDOWN] != DEM_NVM_STATUSBITMASK_NONE)      (inlined)
.L183:
	mov.aa	a2,a15
.L940:
	add.a	a2,#2
	ld.bu	d0,[a2]
.L941:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    94          if(Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_IMMEDIATE] != DEM_NVM_STATUSBITMASK_NONE)      (inlined)
	jeq	d0,#0,.L184
.L509:
	mul	d15,d1,#5
	addsc.a	a4,a12,d15,#0
.L942:
	ld.bu	d15,[a4]
.L943:
	or	d0,d15
	st.b	[a4],d0
.L510:
	mov	d15,#0
.L944:
	st.b	[a2],d15

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    94          if(Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_IMMEDIATE] != DEM_NVM_STATUSBITMASK_NONE)      (inlined)
.L184:
	mov.aa	a2,a15
.L945:
	add.a	a2,#3
	ld.bu	d0,[a2]
.L946:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   100          if(Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_CLEAR] != DEM_NVM_STATUSBITMASK_NONE)      (inlined)
	jeq	d0,#0,.L185
.L511:
	mul	d15,d1,#5
	addsc.a	a4,a12,d15,#0
.L947:
	ld.bu	d15,[a4]
.L948:
	or	d0,d15
	st.b	[a4],d0
.L512:
	mov	d15,#0
.L949:
	st.b	[a2],d15

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   100          if(Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_CLEAR] != DEM_NVM_STATUSBITMASK_NONE)      (inlined)
.L185:
	ld.bu	d15,[a15]4
.L950:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   106          if(Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_EXCLUDE] != DEM_NVM_STATUSBITMASK_NONE)      (inlined)
	jeq	d15,#0,.L186
.L513:
	mul	d15,d1,#5
	addsc.a	a15,a12,d15,#0
.L951:
	ld.bu	d15,[a15]
.L952:
	or	d15,#64
	st.b	[a15],d15
.L514:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   108              Dem_NvMBlockStatusSetBit(demNvMId, DEM_NVM_STATUSBITMASK_EXCLUDE);      (inlined)
	j	.L187

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   106          if(Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_EXCLUDE] != DEM_NVM_STATUSBITMASK_NONE)      (inlined)
.L186:
	mov	d0,#64
.L515:
	mul	d15,d1,#5
	addsc.a	a15,a12,d15,#0
.L953:
	ld.bu	d15,[a15]
.L954:
	xor	d0,d0,#255
.L955:
	and	d15,d0
	st.b	[a15],d15

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   110          else      (inlined)
.L187:
	add	d1,#1

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    85      for(demNvMId = 0; demNvMId < DEM_NVM_CFG_NUM_BLOCKS_TOTAL; demNvMId++)      (inlined)
.L181:
	jlt.u	d1,#7,.L182
.L503:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   418  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   419      Dem_NvmBlockIdType demNvMId;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   420  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   421      Dem_NvMMarkUntrackedBlocksForShutdown();
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   422  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   423      Dem_NvMBlockStatusDoubleBufferHandling();
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   424  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   425      /* If Blocks couldn't be written with MainFunction, call setRamBlockStatusChanged for all changed Blocks*/
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   426      for(demNvMId = 0; demNvMId < DEM_NVM_CFG_NUM_BLOCKS_TOTAL; demNvMId++)
	mov	d8,#0
.L620:
	j	.L188
.L189:
	mul	d15,d8,#5
	addsc.a	a15,a12,d15,#0
.L956:
	ld.bu	d15,[a15]
.L957:
	and	d15,#64
.L958:
	ne	d15,d15,#0
.L959:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    77      return ((Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_INTERNAL] & bitmask) != 0);      (inlined)
	j	.L190

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    78  }      (inlined)
.L190:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   427      {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   428          if( Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_EXCLUDE))
	jeq	d15,#0,.L191
.L960:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   429          {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   430              continue;
	j	.L192
.L191:
	mul	d15,d8,#5
	addsc.a	a15,a12,d15,#0
.L961:
	ld.bu	d15,[a15]
.L962:
	and	d15,#1
.L963:
	ne	d15,d15,#0
.L964:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    77      return ((Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_INTERNAL] & bitmask) != 0);      (inlined)
	j	.L193

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    78  }      (inlined)
.L193:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   431          }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   432  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   433          if( Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_SHUTDOWN)
	jne	d15,#0,.L194
.L520:
	mul	d15,d8,#5
	addsc.a	a15,a12,d15,#0
.L965:
	ld.bu	d15,[a15]
.L966:
	and	d15,#2
.L967:
	ne	d15,d15,#0
.L968:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    77      return ((Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_INTERNAL] & bitmask) != 0);      (inlined)
	j	.L195

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    78  }      (inlined)
.L195:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   434              || Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_IMMEDIATE)
	jne	d15,#0,.L196
.L521:
	mul	d15,d8,#5
	addsc.a	a15,a12,d15,#0
.L969:
	ld.bu	d15,[a15]
.L970:
	and	d15,#8
.L971:
	ne	d15,d15,#0
.L972:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    77      return ((Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_INTERNAL] & bitmask) != 0);      (inlined)
	j	.L197

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    78  }      (inlined)
.L197:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   435              || Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_CLEAR)
	jne	d15,#0,.L198
.L522:
	mul	d15,d8,#5
	addsc.a	a15,a12,d15,#0
.L973:
	ld.bu	d15,[a15]
.L974:
	and	d15,#16
.L975:
	ne	d15,d15,#0
.L976:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    77      return ((Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_INTERNAL] & bitmask) != 0);      (inlined)
	j	.L199

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    78  }      (inlined)
.L199:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   436              || Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_INVALIDATE))
	jeq	d15,#0,.L200
.L198:
.L196:
.L194:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   437          {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   438              if(NvM_Rb_SetWriteAllTrigger(Dem_NvMBlockMap2NvmId[demNvMId], TRUE) == E_OK)
	movh.a	a15,#@his(Dem_NvMBlockMap2NvmId)
	lea	a15,[a15]@los(Dem_NvMBlockMap2NvmId)
.L977:
	addsc.a	a15,a15,d8,#1
	ld.hu	d4,[a15]0
.L978:
	mov	d5,#1
	call	NvM_Rb_SetWriteAllTrigger
.L979:
	jne	d2,#0,.L201
.L980:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   439              {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   440                  Dem_NvMBlockStatusClearBit(demNvMId, DEM_NVM_STATUSBITMASK_SHUTDOWN);
	mov	d0,#1
.L523:
	mul	d15,d8,#5
	addsc.a	a15,a12,d15,#0
.L981:
	ld.bu	d15,[a15]
.L982:
	xor	d0,d0,#255
.L983:
	and	d15,d0
	st.b	[a15],d15
.L524:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   441                  Dem_NvMBlockStatusClearBit(demNvMId, DEM_NVM_STATUSBITMASK_IMMEDIATE);
	mov	d0,#2
.L525:
	mul	d15,d8,#5
	addsc.a	a15,a12,d15,#0
.L984:
	ld.bu	d15,[a15]
.L985:
	xor	d0,d0,#255
.L986:
	and	d15,d0
	st.b	[a15],d15
.L526:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   442                  Dem_NvMBlockStatusClearBit(demNvMId, DEM_NVM_STATUSBITMASK_CLEAR);
	mov	d0,#8
.L527:
	mul	d15,d8,#5
	addsc.a	a15,a12,d15,#0
.L987:
	ld.bu	d15,[a15]
.L988:
	xor	d0,d0,#255
.L989:
	and	d15,d0
	st.b	[a15],d15
.L528:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   443                  Dem_NvMBlockStatusClearBit(demNvMId, DEM_NVM_STATUSBITMASK_INVALIDATE);
	mov	d0,#16
.L529:
	mul	d15,d8,#5
	addsc.a	a15,a12,d15,#0
.L990:
	ld.bu	d15,[a15]
.L991:
	xor	d0,d0,#255
.L992:
	and	d15,d0
	st.b	[a15],d15
.L530:
	j	.L202
.L201:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   444              }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   445              else
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   446              {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   447                  DEM_DET(DEM_DET_APIID_SHUTDOWN, DEM_E_INTERNAL);
	mov	d4,#54
	mov	d5,#0
	mov	d6,#3
	mov	d7,#80
	call	Det_ReportError
.L202:
.L200:
.L192:
	add	d8,#1
.L188:
	jlt.u	d8,#7,.L189
.L993:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   448              }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   449          }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   450      }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   451  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   452  }
	ret
.L492:
	
__Dem_NvMShutdown_function_end:
	.size	Dem_NvMShutdown,__Dem_NvMShutdown_function_end-Dem_NvMShutdown
.L277:
	; End of function
	
	.sdecl	'.text.Dem_Nvm.Dem_NvMIsClearPending',code,cluster('Dem_NvMIsClearPending')
	.sect	'.text.Dem_Nvm.Dem_NvMIsClearPending'
	.align	2
	
	.global	Dem_NvMIsClearPending

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   453  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   454  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   455  boolean Dem_NvMIsClearPending(void)
; Function Dem_NvMIsClearPending
.L248:
Dem_NvMIsClearPending:	.type	func

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   456  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   457      Dem_NvmBlockIdType demNvMId;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   458      for(demNvMId = 0; demNvMId < DEM_NVM_CFG_NUM_BLOCKS_TOTAL; demNvMId++)
	mov	d0,#0
.L621:
	j	.L203
.L204:
	movh.a	a15,#@his(Dem_NvMBlockStatusDoubleBuffer)
	lea	a15,[a15]@los(Dem_NvMBlockStatusDoubleBuffer)
.L998:
	mul	d15,d0,#5
	addsc.a	a2,a15,d15,#0
.L999:
	ld.bu	d15,[a2]
.L1000:
	and	d15,#8
.L1001:
	ne	d15,d15,#0
.L1002:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    77      return ((Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_INTERNAL] & bitmask) != 0);      (inlined)
	j	.L205

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    78  }      (inlined)
.L205:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   459      {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   460          if(     Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_CLEAR)
	jne	d15,#0,.L206
.L535:
	mul	d15,d0,#5
	addsc.a	a2,a15,d15,#0
.L1003:
	ld.bu	d15,[a2]
.L1004:
	and	d15,#16
.L1005:
	ne	d15,d15,#0
.L1006:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    77      return ((Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_INTERNAL] & bitmask) != 0);      (inlined)
	j	.L207

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    78  }      (inlined)
.L207:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   461              ||  Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_INVALIDATE)
	jne	d15,#0,.L208
.L536:
	mul	d15,d0,#5
	addsc.a	a2,a15,d15,#0
.L1007:
	ld.bu	d15,[a2]
.L1008:
	and	d15,#32
.L1009:
	ne	d15,d15,#0
.L1010:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    77      return ((Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_INTERNAL] & bitmask) != 0);      (inlined)
	j	.L209

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    78  }      (inlined)
.L209:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   462              ||  Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_CLEAR_REQ)
	jne	d15,#0,.L210
.L1011:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   463              || (Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_CLEAR] != DEM_NVM_STATUSBITMASK_NONE)
	mul	d15,d0,#5
	addsc.a	a15,a15,d15,#0
.L1012:
	ld.bu	d15,[a15]3
.L1013:
	jeq	d15,#0,.L211
.L210:
.L208:
.L206:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   464            )
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   465          {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   466              return TRUE;
	mov	d2,#1
.L1014:
	j	.L212
.L211:
	add	d0,#1
.L203:
	jlt.u	d0,#7,.L204
.L1015:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   467          }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   468      }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   469      return FALSE;
	mov	d2,#0
.L1016:
	j	.L213

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   470  }
.L213:
.L212:
	ret
.L531:
	
__Dem_NvMIsClearPending_function_end:
	.size	Dem_NvMIsClearPending,__Dem_NvMIsClearPending_function_end-Dem_NvMIsClearPending
.L282:
	; End of function
	
	.sdecl	'.text.Dem_Nvm.Dem_NvMNormalMemCopy',code,cluster('Dem_NvMNormalMemCopy')
	.sect	'.text.Dem_Nvm.Dem_NvMNormalMemCopy'
	.align	2
	
	.global	Dem_NvMNormalMemCopy

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   471  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   472  /* If the MARCO of DEM_MEMCPY can not be used, this standard function can support for the function point */
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   473  void Dem_NvMNormalMemCopy(void* Dest_pv, const void* Src_pcv, uint32 numBytes_s32)
; Function Dem_NvMNormalMemCopy
.L250:
Dem_NvMNormalMemCopy:	.type	func

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     3  #ifndef RBA_DIAGLIB_MEMUTILS_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     4  #define RBA_DIAGLIB_MEMUTILS_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     7  #include "rba_BswSrv.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     9  #define RBA_DIAGLIB_MEMCPY(xDest_p, xSrc_pc, numBytes_u32)                  rba_DiagLib_MemUtils_MemCpy((uint8*)(xDest_p),(const uint8*)(xSrc_pc),(uint32)(numBytes_u32))
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    10  #define RBA_DIAGLIB_MEMSET(xDest_p, xPattern_u32, numBytes_u32)             rba_DiagLib_MemUtils_MemSet((uint8*)(xDest_p),(sint32)(xPattern_u32),(uint32)(numBytes_u32))
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    11  #define RBA_DIAGLIB_MEMCMP(xSrc1_pc, xSrc2_pc, numBytes_u32)                rba_DiagLib_MemUtils_MemCmp((const uint8*)(xSrc1_pc),(const uint8*)(xSrc2_pc),(uint32)(numBytes_u32))
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    12  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    13  #define RBA_DIAGLIB_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    14  #include "rba_DiagLib_MemMap.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    15  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    16  /**
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    17   * Utility functions for MEMCPY, MEMSET, MEMCOMP.
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    18   */
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    19  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    20  LOCAL_INLINE void rba_DiagLib_MemUtils_MemCpy(uint8* xDest_p, const uint8* xSrc_pc, uint32 numBytes_s32)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    21  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    22      /* MR12 DIR 1.1 VIOLATION: Function rba_BswSrv_MemCopy converts argument 1 and 2 to pointer to void, function has no side effects */
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    23      (void) rba_BswSrv_MemCopy(xDest_p, xSrc_pc, numBytes_s32);
	call	rba_BswSrv_MemCopy
.L568:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   474  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   475      DEM_MEMCPY(Dest_pv, Src_pcv, numBytes_s32);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   476  }
	ret
.L560:
	
__Dem_NvMNormalMemCopy_function_end:
	.size	Dem_NvMNormalMemCopy,__Dem_NvMNormalMemCopy_function_end-Dem_NvMNormalMemCopy
.L307:
	; End of function
	
	.sdecl	'.text.Dem_Nvm.Dem_NvMIsBlockClearPending',code,cluster('Dem_NvMIsBlockClearPending')
	.sect	'.text.Dem_Nvm.Dem_NvMIsBlockClearPending'
	.align	2
	
	.global	Dem_NvMIsBlockClearPending

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   477  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   478  /* check single block the clear action is pending or not */
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   479  boolean Dem_NvMIsBlockClearPending( Dem_NvmBlockIdType demNvMId)
; Function Dem_NvMIsBlockClearPending
.L252:
Dem_NvMIsBlockClearPending:	.type	func
	movh.a	a2,#@his(Dem_NvMBlockStatusDoubleBuffer)
	lea	a2,[a2]@los(Dem_NvMBlockStatusDoubleBuffer)
.L1040:
	mul	d15,d4,#5
	addsc.a	a15,a2,d15,#0
.L1041:
	ld.bu	d15,[a15]
.L1042:
	and	d15,#8
.L1043:
	ne	d15,d15,#0
.L1044:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    77      return ((Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_INTERNAL] & bitmask) != 0);      (inlined)
	j	.L214

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    78  }      (inlined)
.L214:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   480  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   481      if (        Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_CLEAR)
	jne	d15,#0,.L215
.L546:
	mul	d15,d4,#5
	addsc.a	a15,a2,d15,#0
.L1045:
	ld.bu	d15,[a15]
.L1046:
	and	d15,#32
.L1047:
	ne	d15,d15,#0
.L1048:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    77      return ((Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_INTERNAL] & bitmask) != 0);      (inlined)
	j	.L216

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    78  }      (inlined)
.L216:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   482              ||  Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_CLEAR_REQ)
	jne	d15,#0,.L217
.L1049:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   483              || (Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_CLEAR] != DEM_NVM_STATUSBITMASK_NONE)
	mul	d15,d4,#5
	addsc.a	a15,a2,d15,#0
.L1050:
	ld.bu	d15,[a15]3
.L1051:
	jne	d15,#0,.L218
.L547:
	mul	d15,d4,#5
	addsc.a	a15,a2,d15,#0
.L1052:
	ld.bu	d15,[a15]
.L1053:
	and	d15,#16
.L1054:
	ne	d15,d15,#0
.L1055:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    77      return ((Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_INTERNAL] & bitmask) != 0);      (inlined)
	j	.L219

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    78  }      (inlined)
.L219:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   484              ||  Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_INVALIDATE)
	jeq	d15,#0,.L220
.L218:
.L217:
.L215:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   485         )
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   486      {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   487          return TRUE;
	mov	d2,#1
.L1056:
	j	.L221
.L220:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   488      }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   489      return FALSE;
	mov	d2,#0
.L1057:
	j	.L222

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   490  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   491  }
.L222:
.L221:
	ret
.L542:
	
__Dem_NvMIsBlockClearPending_function_end:
	.size	Dem_NvMIsBlockClearPending,__Dem_NvMIsBlockClearPending_function_end-Dem_NvMIsBlockClearPending
.L292:
	; End of function
	
	.sdecl	'.text.Dem_Nvm.Dem_NvMIsBlockAllowedToBeExcluded',code,cluster('Dem_NvMIsBlockAllowedToBeExcluded')
	.sect	'.text.Dem_Nvm.Dem_NvMIsBlockAllowedToBeExcluded'
	.align	2
	
	.global	Dem_NvMIsBlockAllowedToBeExcluded

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   492  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   493  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   494  boolean Dem_NvMIsBlockAllowedToBeExcluded( Dem_NvmBlockIdType demNvMId)
; Function Dem_NvMIsBlockAllowedToBeExcluded
.L254:
Dem_NvMIsBlockAllowedToBeExcluded:	.type	func

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   495  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   496      boolean RetVal = TRUE;
	mov	d2,#1
.L551:
	movh.a	a15,#@his(Dem_NvMBlockStatusDoubleBuffer)
	lea	a15,[a15]@los(Dem_NvMBlockStatusDoubleBuffer)
.L1062:
	mul	d15,d4,#5
	addsc.a	a2,a15,d15,#0
.L1063:
	ld.bu	d15,[a2]
.L1064:
	and	d15,#4
.L1065:
	ne	d15,d15,#0
.L1066:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    77      return ((Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_INTERNAL] & bitmask) != 0);      (inlined)
	j	.L223

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    78  }      (inlined)
.L223:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   497  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   498      if (    Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_IMMEDIATE_REQ)
	jne	d15,#0,.L224
.L554:
	mul	d15,d4,#5
	addsc.a	a2,a15,d15,#0
.L1067:
	ld.bu	d15,[a2]
.L1068:
	and	d15,#32
.L1069:
	ne	d15,d15,#0
.L1070:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    77      return ((Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_INTERNAL] & bitmask) != 0);      (inlined)
	j	.L225

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    78  }      (inlined)
.L225:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   499           || Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_CLEAR_REQ)
	jne	d15,#0,.L226
.L555:
	mul	d15,d4,#5
	addsc.a	a15,a15,d15,#0
.L1071:
	ld.bu	d15,[a15]
.L1072:
	and	d15,#64
.L1073:
	ne	d15,d15,#0
.L1074:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    77      return ((Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_INTERNAL] & bitmask) != 0);      (inlined)
	j	.L227

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    78  }      (inlined)
.L227:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   500           || Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_EXCLUDE)
	jeq	d15,#0,.L228
.L226:
.L224:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   501         )
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   502      {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   503          RetVal = FALSE;
	mov	d2,#0
.L228:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   504      }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   505  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   506      return RetVal;
	j	.L229

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   507  }
.L229:
	ret
.L548:
	
__Dem_NvMIsBlockAllowedToBeExcluded_function_end:
	.size	Dem_NvMIsBlockAllowedToBeExcluded,__Dem_NvMIsBlockAllowedToBeExcluded_function_end-Dem_NvMIsBlockAllowedToBeExcluded
.L297:
	; End of function
	
	.sdecl	'.text.Dem_Nvm.Dem_NvMIsBlockExcluded',code,cluster('Dem_NvMIsBlockExcluded')
	.sect	'.text.Dem_Nvm.Dem_NvMIsBlockExcluded'
	.align	2
	
	.global	Dem_NvMIsBlockExcluded

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   508  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   509  boolean Dem_NvMIsBlockExcluded( Dem_NvmBlockIdType demNvMId)
; Function Dem_NvMIsBlockExcluded
.L256:
Dem_NvMIsBlockExcluded:	.type	func
	mul	d15,d4,#5
.L1079:
	movh.a	a15,#@his(Dem_NvMBlockStatusDoubleBuffer)
	lea	a15,[a15]@los(Dem_NvMBlockStatusDoubleBuffer)
.L1080:
	addsc.a	a15,a15,d15,#0
.L1081:
	ld.bu	d15,[a15]
.L1082:
	and	d15,#64
.L1083:
	ne	d2,d15,#0
.L1084:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    77      return ((Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_INTERNAL] & bitmask) != 0);      (inlined)
	j	.L230

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    78  }      (inlined)
.L230:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   510  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   511      return Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_EXCLUDE);
	j	.L231

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   512  }
.L231:
	ret
.L556:
	
__Dem_NvMIsBlockExcluded_function_end:
	.size	Dem_NvMIsBlockExcluded,__Dem_NvMIsBlockExcluded_function_end-Dem_NvMIsBlockExcluded
.L302:
	; End of function
	
	.sdecl	'.text.Dem_Nvm.Dem_NvMIsImmediatePending',code,cluster('Dem_NvMIsImmediatePending')
	.sect	'.text.Dem_Nvm.Dem_NvMIsImmediatePending'
	.align	2
	
	.global	Dem_NvMIsImmediatePending

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   513  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   514  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   515  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   516  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   517  boolean Dem_NvMIsImmediatePending(void)
; Function Dem_NvMIsImmediatePending
.L258:
Dem_NvMIsImmediatePending:	.type	func

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   518  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   519      Dem_NvmBlockIdType demNvMId;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   520  #if(DEM_CFG_TRIGGER_TO_STORE_NVM_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   521      if(Dem_NvMIsImmediateStorageRequested())
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   522      {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   523          return TRUE;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   524      }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   525  #endif
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   526  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   527      for(demNvMId = 0; demNvMId < DEM_NVM_CFG_NUM_BLOCKS_TOTAL; demNvMId++)
	mov	d0,#0
.L622:
	j	.L232
.L233:
	movh.a	a15,#@his(Dem_NvMBlockStatusDoubleBuffer)
	lea	a15,[a15]@los(Dem_NvMBlockStatusDoubleBuffer)
.L1021:
	mul	d15,d0,#5
	addsc.a	a2,a15,d15,#0
.L1022:
	ld.bu	d15,[a2]
.L1023:
	and	d15,#2
.L1024:
	ne	d15,d15,#0
.L1025:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    77      return ((Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_INTERNAL] & bitmask) != 0);      (inlined)
	j	.L234

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    78  }      (inlined)
.L234:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   528      {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   529          if( Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_IMMEDIATE)||
	jne	d15,#0,.L235
.L541:
	mul	d15,d0,#5
	addsc.a	a2,a15,d15,#0
.L1026:
	ld.bu	d15,[a2]
.L1027:
	and	d15,#4
.L1028:
	ne	d15,d15,#0
.L1029:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    77      return ((Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_INTERNAL] & bitmask) != 0);      (inlined)
	j	.L236

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	    78  }      (inlined)
.L236:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   530              Dem_NvMBlockStatusIsBitSet(demNvMId, DEM_NVM_STATUSBITMASK_IMMEDIATE_REQ)||
	jne	d15,#0,.L237
.L1030:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   531              (Dem_NvMBlockStatusDoubleBuffer[demNvMId][DEM_NVM_STATUSINDEX_IMMEDIATE] != DEM_NVM_STATUSBITMASK_NONE))
	mul	d15,d0,#5
	addsc.a	a15,a15,d15,#0
.L1031:
	ld.bu	d15,[a15]2
.L1032:
	jeq	d15,#0,.L238
.L237:
.L235:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   532          {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   533              return TRUE;
	mov	d2,#1
.L1033:
	j	.L239
.L238:
	add	d0,#1
.L232:
	jlt.u	d0,#7,.L233
.L1034:

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   534          }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   535      }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   536      return FALSE;
	mov	d2,#0
.L1035:
	j	.L240

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   537  }
.L240:
.L239:
	ret
.L537:
	
__Dem_NvMIsImmediatePending_function_end:
	.size	Dem_NvMIsImmediatePending,__Dem_NvMIsImmediatePending_function_end-Dem_NvMIsImmediatePending
.L287:
	; End of function
	
	.sdecl	'.bss.Dem_Nvm.Dem_NvMBlockStatusDoubleBuffer',data,cluster('Dem_NvMBlockStatusDoubleBuffer')
	.sect	'.bss.Dem_Nvm.Dem_NvMBlockStatusDoubleBuffer'
	.global	Dem_NvMBlockStatusDoubleBuffer
Dem_NvMBlockStatusDoubleBuffer:	.type	object
	.size	Dem_NvMBlockStatusDoubleBuffer,35
	.space	35
	.sdecl	'.bss.Dem_Nvm.Dem_NvMStorageBuffer',data,cluster('Dem_NvMStorageBuffer')
	.sect	'.bss.Dem_Nvm.Dem_NvMStorageBuffer'
	.global	Dem_NvMStorageBuffer
	.align	4
Dem_NvMStorageBuffer:	.type	object
	.size	Dem_NvMStorageBuffer,56
	.space	56
	.sdecl	'.bss.Dem_Nvm.Dem_EraseAllNvMDataStatus',data,cluster('Dem_EraseAllNvMDataStatus')
	.sect	'.bss.Dem_Nvm.Dem_EraseAllNvMDataStatus'
	.global	Dem_EraseAllNvMDataStatus
Dem_EraseAllNvMDataStatus:	.type	object
	.size	Dem_EraseAllNvMDataStatus,1
	.space	1
	.sdecl	'.bss.Dem_Nvm.Dem_NvMAnyClearFailed',data,cluster('Dem_NvMAnyClearFailed')
	.sect	'.bss.Dem_Nvm.Dem_NvMAnyClearFailed'
	.global	Dem_NvMAnyClearFailed
Dem_NvMAnyClearFailed:	.type	object
	.size	Dem_NvMAnyClearFailed,1
	.space	1
	.sdecl	'.rodata.Dem_Nvm.Dem_NvMBlockMap2NvmId',data,rom,cluster('Dem_NvMBlockMap2NvmId')
	.sect	'.rodata.Dem_Nvm.Dem_NvMBlockMap2NvmId'
	.global	Dem_NvMBlockMap2NvmId
	.align	2
Dem_NvMBlockMap2NvmId:	.type	object
	.size	Dem_NvMBlockMap2NvmId,14
	.half	11,6,7,8
	.half	9,10,5
	.sdecl	'.rodata.Dem_Nvm.Dem_NvmBlockIdExtended',data,rom,cluster('Dem_NvmBlockIdExtended')
	.sect	'.rodata.Dem_Nvm.Dem_NvmBlockIdExtended'
	.global	Dem_NvmBlockIdExtended
	.align	4
Dem_NvmBlockIdExtended:	.type	object
	.size	Dem_NvmBlockIdExtended,72
	.word	Dem_GenericNvData,18
	.space	4
	.word	Dem_EvMemEventMemory,20
	.space	4
	.word	Dem_EvMemEventMemory+20,20
	.space	4
	.word	Dem_EvMemEventMemory+40,20
	.space	4
	.word	Dem_EvMemEventMemory+60,20
	.space	4
	.word	Dem_EvMemEventMemory+80,20
	.space	4
	.sdecl	'.rodata.Dem_Nvm.DemCopyFctPtrTable',data,rom,cluster('DemCopyFctPtrTable')
	.sect	'.rodata.Dem_Nvm.DemCopyFctPtrTable'
	.global	DemCopyFctPtrTable
	.align	4
DemCopyFctPtrTable:	.type	object
	.size	DemCopyFctPtrTable,4
	.word	Dem_NvMNormalMemCopy
	.sdecl	'.data.Dem_Nvm._999001_lastIndexPreviousMain',data,cluster('_999001_lastIndexPreviousMain')
	.sect	'.data.Dem_Nvm._999001_lastIndexPreviousMain'
_999001_lastIndexPreviousMain:	.type	object
	.size	_999001_lastIndexPreviousMain,1
	.space	1
	.calls	'__INDIRECT__','Dem_NvMNormalMemCopy'
	.calls	'Dem_NvMMainFunction','NvM_GetErrorStatus'
	.calls	'Dem_NvMMainFunction','Det_ReportError'
	.calls	'Dem_NvMMainFunction','__INDIRECT__'
	.calls	'Dem_NvMMainFunction','NvM_WriteBlock'
	.calls	'Dem_NvMMainFunction','NvM_InvalidateNvBlock'
	.calls	'Dem_NvMShutdown','Dem_PreStoredFFShutdown'
	.calls	'Dem_NvMShutdown','NvM_Rb_SetWriteAllTrigger'
	.calls	'Dem_NvMShutdown','Det_ReportError'
	.calls	'Dem_NvMNormalMemCopy','rba_BswSrv_MemCopy'
	.calls	'Dem_NvMInit','',0
	.calls	'Dem_NvMMainFunction','',8
	.calls	'Dem_NvMShutdown','',0
	.calls	'Dem_NvMIsClearPending','',0
	.calls	'Dem_NvMNormalMemCopy','',0
	.calls	'Dem_NvMIsBlockClearPending','',0
	.calls	'Dem_NvMIsBlockAllowedToBeExcluded','',0
	.calls	'Dem_NvMIsBlockExcluded','',0
	.extern	Det_ReportError
	.extern	rba_BswSrv_MemCopy
	.extern	NvM_GetErrorStatus
	.extern	NvM_Rb_SetWriteAllTrigger
	.extern	NvM_WriteBlock
	.extern	NvM_InvalidateNvBlock
	.extern	Dem_GenericNvData
	.extern	Dem_PreStoredFFShutdown
	.extern	Dem_EvMemEventMemory
	.extern	__INDIRECT__
	.calls	'Dem_NvMIsImmediatePending','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L260:
	.word	25177
	.half	3
	.word	.L261
	.byte	4
.L259:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L262
.L324:
	.byte	2
	.byte	'unsigned char',0,1,8,3
	.word	137
	.byte	4
	.byte	'rba_DiagLib_Bit8SetBit',0,3,1,36,19,1,1,5
	.byte	'buffer',0,1,36,49
	.word	154
	.byte	5
	.byte	'bit_position',0,1,36,63
	.word	137
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8ClearBit',0,3,1,42,19,1,1,5
	.byte	'buffer',0,1,42,51
	.word	154
	.byte	5
	.byte	'bit_position',0,1,42,65
	.word	137
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8OverwriteBit',0,3,1,48,19,1,1,5
	.byte	'buffer',0,1,48,55
	.word	154
	.byte	5
	.byte	'bit_position',0,1,48,69
	.word	137
	.byte	5
	.byte	'will_bit_be_set',0,1,48,91
	.word	137
	.byte	7,6,6,0,0,8
	.byte	'rba_DiagLib_Bit8GetSingleBit',0,3,1,60,20
	.word	137
	.byte	1,1,5
	.byte	'value',0,1,60,55
	.word	137
	.byte	5
	.byte	'bit_position',0,1,60,68
	.word	137
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit8IsBitSet',0,3,1,64,22
	.word	137
	.byte	1,1,5
	.byte	'value',0,1,64,53
	.word	137
	.byte	5
	.byte	'bit_position',0,1,64,66
	.word	137
	.byte	7,6,0,0,8
	.byte	'rba_DiagLib_Bit8GetBits',0,3,1,69,20
	.word	137
	.byte	1,1,5
	.byte	'value',0,1,69,50
	.word	137
	.byte	5
	.byte	'bit_position',0,1,69,63
	.word	137
	.byte	5
	.byte	'number_of_bits',0,1,69,83
	.word	137
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8ClearBits',0,3,1,77,19,1,1,5
	.byte	'value',0,1,77,52
	.word	154
	.byte	5
	.byte	'bit_position',0,1,77,65
	.word	137
	.byte	5
	.byte	'number_of_bits',0,1,77,85
	.word	137
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8OverwriteBits',0,3,1,83,19,1,1,5
	.byte	'value',0,1,83,56
	.word	154
	.byte	5
	.byte	'bit_position',0,1,83,69
	.word	137
	.byte	5
	.byte	'number_of_bits',0,1,83,89
	.word	137
	.byte	5
	.byte	'newValue',0,1,83,111
	.word	137
	.byte	7,6,0,0,2
	.byte	'unsigned short int',0,2,7,3
	.word	854
	.byte	4
	.byte	'rba_DiagLib_Bit16SetBit',0,3,2,36,19,1,1,5
	.byte	'buffer',0,2,36,51
	.word	876
	.byte	5
	.byte	'bit_position',0,2,36,65
	.word	137
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit16ClearBit',0,3,2,42,19,1,1,5
	.byte	'buffer',0,2,42,53
	.word	876
	.byte	5
	.byte	'bit_position',0,2,42,67
	.word	137
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit16GetSingleBit',0,3,2,60,21
	.word	854
	.byte	1,1,5
	.byte	'value',0,2,60,58
	.word	854
	.byte	5
	.byte	'bit_position',0,2,60,71
	.word	137
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit16IsBitSet',0,3,2,65,22
	.word	137
	.byte	1,1,5
	.byte	'value',0,2,65,55
	.word	854
	.byte	5
	.byte	'bit_position',0,2,65,68
	.word	137
	.byte	7,6,0,0,8
	.byte	'rba_DiagLib_Bit16GetBits',0,3,2,70,21
	.word	854
	.byte	1,1,5
	.byte	'value',0,2,70,53
	.word	854
	.byte	5
	.byte	'bit_position',0,2,70,66
	.word	137
	.byte	5
	.byte	'number_of_bits',0,2,70,86
	.word	137
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit16ClearBits',0,3,2,78,19,1,1,5
	.byte	'value',0,2,78,54
	.word	876
	.byte	5
	.byte	'bit_position',0,2,78,67
	.word	137
	.byte	5
	.byte	'number_of_bits',0,2,78,87
	.word	137
	.byte	6,0
.L565:
	.byte	2
	.byte	'unsigned int',0,4,7,3
	.word	1365
	.byte	4
	.byte	'rba_DiagLib_Bit32SetBit',0,3,3,36,19,1,1,5
	.byte	'buffer',0,3,36,51
	.word	1381
	.byte	5
	.byte	'bit_position',0,3,36,65
	.word	137
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit32ClearBit',0,3,3,42,19,1,1,5
	.byte	'buffer',0,3,42,53
	.word	1381
	.byte	5
	.byte	'bit_position',0,3,42,67
	.word	137
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit32GetSingleBit',0,3,3,60,21
	.word	1365
	.byte	1,1,5
	.byte	'value',0,3,60,58
	.word	1365
	.byte	5
	.byte	'bit_position',0,3,60,71
	.word	137
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit32IsBitSet',0,3,3,65,22
	.word	137
	.byte	1,1,5
	.byte	'value',0,3,65,55
	.word	1365
	.byte	5
	.byte	'bit_position',0,3,65,68
	.word	137
	.byte	7,6,0,0,4
	.byte	'rba_DiagLib_Bit32ClearBits',0,3,3,78,19,1,1,5
	.byte	'value',0,3,78,54
	.word	1381
	.byte	5
	.byte	'bit_position',0,3,78,67
	.word	137
	.byte	5
	.byte	'number_of_bits',0,3,78,87
	.word	137
	.byte	6,0,8
	.byte	'rba_BswSrv_ByteOrderSwap32',0,3,4,125,21
	.word	1365
	.byte	1,1,5
	.byte	'Input_u32',0,4,125,55
	.word	1365
	.byte	6,0,8
	.byte	'rba_BswSrv_ByteOrderSwap16',0,3,4,150,1,21
	.word	854
	.byte	1,1,5
	.byte	'Input_u16',0,4,150,1,55
	.word	854
	.byte	6,0,9
	.word	137
	.byte	3
	.word	1892
.L567:
	.byte	4
	.byte	'rba_DiagLib_MemUtils_MemCpy',0,3,5,20,19,1,1
.L569:
	.byte	5
	.byte	'xDest_p',0,5,20,54
	.word	154
.L571:
	.byte	5
	.byte	'xSrc_pc',0,5,20,76
	.word	1897
.L573:
	.byte	5
	.byte	'numBytes_s32',0,5,20,92
	.word	1365
.L575:
	.byte	6,0,8
	.byte	'Dem_LibGetParamUI8',0,3,6,36,18
	.word	137
	.byte	1,1,5
	.byte	'parameter',0,6,36,44
	.word	137
	.byte	6,0,8
	.byte	'Dem_LibGetParamBool',0,3,6,41,20
	.word	137
	.byte	1,1,5
	.byte	'parameter',0,6,41,49
	.word	137
	.byte	6,0
.L340:
	.byte	8
	.byte	'Dem_NvMGetNvMBlocKId',0,3,7,49,28
	.word	854
	.byte	1,1
.L341:
	.byte	5
	.byte	'id',0,7,49,68
	.word	137
.L343:
	.byte	6,0
.L331:
	.byte	8
	.byte	'Dem_NvmGetStatus',0,3,7,54,30
	.word	137
	.byte	1,1
.L334:
	.byte	5
	.byte	'id',0,7,54,67
	.word	137
.L336:
	.byte	7,6,0,0
.L497:
	.byte	4
	.byte	'Dem_NvMWriteBlockOnShutdown',0,3,7,92,17,1,1
.L500:
	.byte	5
	.byte	'id',0,7,92,64
	.word	137
.L502:
	.byte	6,0,4
	.byte	'Dem_NvMStartClear',0,3,7,138,1,17,1,1,6,0,4
	.byte	'Dem_BitArraySetBit',0,3,8,33,17,1,1,5
	.byte	'buffer',0,8,33,36
	.word	1381
	.byte	5
	.byte	'bit_position',0,8,33,75
	.word	1365
	.byte	6,0,4
	.byte	'Dem_BitArrayClearBit',0,3,8,46,17,1,1,5
	.byte	'buffer',0,8,46,38
	.word	1381
	.byte	5
	.byte	'bit_position',0,8,46,77
	.word	1365
	.byte	6,0,4
	.byte	'Dem_BitArrayOverwriteBit',0,3,8,61,17,1,1,5
	.byte	'buffer',0,8,61,42
	.word	1381
	.byte	5
	.byte	'bit_position',0,8,62,25
	.word	1365
	.byte	5
	.byte	'will_bit_be_set',0,8,62,57
	.word	137
	.byte	7,6,6,0,0,9
	.word	1365
	.byte	3
	.word	2484
	.byte	8
	.byte	'Dem_BitArrayIsBitSet',0,3,8,75,30
	.word	137
	.byte	1,1,5
	.byte	'buffer',0,8,75,51
	.word	2489
	.byte	5
	.byte	'bit_position',0,8,75,95
	.word	1365
	.byte	6,0,8
	.byte	'Dem_ISO14229ByteIsTestFailed',0,3,9,122,30
	.word	137
	.byte	1,1,5
	.byte	'self',0,9,122,66
	.word	137
	.byte	7,6,0,0,8
	.byte	'Dem_ISO14229ByteIsTestFailedTOC',0,3,9,129,1,30
	.word	137
	.byte	1,1,5
	.byte	'self',0,9,129,1,69
	.word	137
	.byte	7,6,0,0,8
	.byte	'Dem_ISO14229ByteIsTestCompleteTOC',0,3,9,157,1,30
	.word	137
	.byte	1,1,5
	.byte	'self',0,9,157,1,71
	.word	137
	.byte	7,6,0,0,8
	.byte	'Dem_ISO14229ByteIsPendingDTC',0,3,9,164,1,30
	.word	137
	.byte	1,1,5
	.byte	'self',0,9,164,1,66
	.word	137
	.byte	7,6,0,0,8
	.byte	'Dem_ISO14229ByteIsWarningIndicatorRequested',0,3,9,177,1,30
	.word	137
	.byte	1,1,5
	.byte	'self',0,9,177,1,81
	.word	137
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetTestFailed',0,3,9,186,1,17,1,1,5
	.byte	'self',0,9,186,1,55
	.word	154
	.byte	5
	.byte	'setOrReset',0,9,186,1,79
	.word	137
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetTestFailedTOC',0,3,9,193,1,17,1,1,5
	.byte	'self',0,9,193,1,58
	.word	154
	.byte	5
	.byte	'setOrReset',0,9,193,1,82
	.word	137
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetTestFailedSLC',0,3,9,200,1,17,1,1,5
	.byte	'self',0,9,200,1,58
	.word	154
	.byte	5
	.byte	'setOrReset',0,9,200,1,82
	.word	137
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetTestCompleteTOC',0,3,9,214,1,17,1,1,5
	.byte	'self',0,9,214,1,60
	.word	154
	.byte	5
	.byte	'setOrReset',0,9,214,1,84
	.word	137
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetTestCompleteSLC',0,3,9,221,1,17,1,1,5
	.byte	'self',0,9,221,1,60
	.word	154
	.byte	5
	.byte	'setOrReset',0,9,221,1,84
	.word	137
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetPendingDTC',0,3,9,228,1,17,1,1,5
	.byte	'self',0,9,228,1,55
	.word	154
	.byte	5
	.byte	'setOrReset',0,9,228,1,79
	.word	137
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetConfirmedDTC',0,3,9,235,1,17,1,1,5
	.byte	'self',0,9,235,1,57
	.word	154
	.byte	5
	.byte	'setOrReset',0,9,235,1,81
	.word	137
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetWarningIndicatorRequested',0,3,9,242,1,17,1,1,5
	.byte	'self',0,9,242,1,70
	.word	154
	.byte	5
	.byte	'setOrReset',0,9,242,1,94
	.word	137
	.byte	7,6,0,0,8
	.byte	'Dem_isDtcIdValid',0,3,10,152,1,30
	.word	137
	.byte	1,1,5
	.byte	'id',0,10,152,1,62
	.word	854
	.byte	6,0,8
	.byte	'Dem_DtcIdFromEventId',0,3,10,158,1,27
	.word	854
	.byte	1,1,5
	.byte	'id',0,10,158,1,65
	.word	854
	.byte	6,0,8
	.byte	'Dem_DtcIdGetEventId',0,3,10,166,1,28
	.word	854
	.byte	1,1,5
	.byte	'dtcid',0,10,166,1,63
	.word	854
	.byte	6,0,8
	.byte	'Dem_DtcGroupIdIsValid',0,3,10,252,1,30
	.word	137
	.byte	1,1,5
	.byte	'dtcGroupID',0,10,252,1,72
	.word	137
	.byte	6,0,8
	.byte	'Dem_EnCoAreAllFulfilled',0,3,11,32,30
	.word	137
	.byte	1,1,5
	.byte	'enableConditionList',0,11,32,68
	.word	137
	.byte	6,0,8
	.byte	'rba_DiagLib_ByteOrderUtils_SwapByteOrderS',0,3,12,36,21
	.word	854
	.byte	1,1,5
	.byte	'val',0,12,36,70
	.word	854
	.byte	7,6,0,0,8
	.byte	'rba_DiagLib_ByteOrderUtils_SwapByteOrderL',0,3,12,41,21
	.word	1365
	.byte	1,1,5
	.byte	'val',0,12,41,70
	.word	1365
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetStoreTestFailedToNextOC',0,3,13,55,22
	.word	137
	.byte	1,1,5
	.byte	'indx',0,13,55,78
	.word	854
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetEventIsStoredInPrimary',0,3,13,75,22
	.word	137
	.byte	1,1,5
	.byte	'indx',0,13,75,77
	.word	854
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetAgingAllowed',0,3,13,95,22
	.word	137
	.byte	1,1,5
	.byte	'indx',0,13,95,67
	.word	854
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetOperationCycleID',0,3,13,122,20
	.word	137
	.byte	1,1,5
	.byte	'indx',0,13,122,69
	.word	854
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetAgingCycleID',0,3,13,129,1,20
	.word	137
	.byte	1,1,5
	.byte	'indx',0,13,129,1,65
	.word	854
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetFailureCycleID',0,3,13,136,1,20
	.word	137
	.byte	1,1,5
	.byte	'indx',0,13,136,1,67
	.word	854
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetDebounceMethodIndex',0,3,13,149,1,20
	.word	137
	.byte	1,1,5
	.byte	'indx',0,13,149,1,72
	.word	854
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetDebounceParamSettingIndex',0,3,13,155,1,21
	.word	854
	.byte	1,1,5
	.byte	'indx',0,13,155,1,79
	.word	854
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetAgingThreshold',0,3,13,168,1,20
	.word	137
	.byte	1,1,5
	.byte	'indx',0,13,168,1,67
	.word	854
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetEnableConditions',0,3,13,208,1,27
	.word	137
	.byte	1,1,5
	.byte	'indx',0,13,208,1,76
	.word	854
	.byte	6,0,2
	.byte	'short int',0,2,5,8
	.byte	'Dem_EvtGetDebounceLevel',0,3,14,193,1,19
	.word	4540
	.byte	1,1,5
	.byte	'EventId',0,14,193,1,60
	.word	854
	.byte	6,0,8
	.byte	'Dem_EvtGetLastReportedEvent',0,3,14,219,1,32
	.word	137
	.byte	1,1,5
	.byte	'EventId',0,14,219,1,77
	.word	854
	.byte	6,0,4
	.byte	'Dem_EvtIncreaseGlobalInitMonitoringCounter',0,3,14,227,3,17,1,1,6,0,4
	.byte	'Dem_EvtSetAnyInitMonitoring',0,3,14,233,3,17,1,1,5
	.byte	'reason',0,14,233,3,72
	.word	137
	.byte	7,6,0,0,8
	.byte	'Dem_EvtIsSuppressed',0,3,14,244,4,30
	.word	137
	.byte	1,1,5
	.byte	'EventId',0,14,244,4,67
	.word	854
	.byte	7,6,0,0,3
	.word	137
	.byte	4
	.byte	'Dem_EnvSetTrigger',0,3,15,17,17,1,1,5
	.byte	'trigger',0,15,17,52
	.word	4829
	.byte	5
	.byte	'trigger2set',0,15,17,77
	.word	137
	.byte	6,0,8
	.byte	'Dem_EnvIsAnyTriggerSet',0,3,15,22,30
	.word	137
	.byte	1,1,5
	.byte	'trigger2test',0,15,22,69
	.word	137
	.byte	6,0,2
	.byte	'unsigned long int',0,4,7,8
	.byte	'Dem_DebHandleDebounceAction__processBits',0,3,16,101,30
	.word	137
	.byte	1,1,5
	.byte	'EventId',0,16,101,87
	.word	854
	.byte	5
	.byte	'debAction',0,16,101,120
	.word	4954
	.byte	6,0,10
	.word	854
	.byte	3
	.word	5063
	.byte	4
	.byte	'Dem_ClientResultType_setResult',0,3,17,27,17,1,1,5
	.byte	'result',0,17,27,79
	.word	5068
	.byte	5
	.byte	'request',0,17,27,109
	.word	854
	.byte	5
	.byte	'newResult',0,17,27,133,1
	.word	137
	.byte	6,0,10
	.word	854
	.byte	3
	.word	5163
	.byte	4
	.byte	'Dem_ClientRequestType_setRequest',0,3,17,65,17,1,1,5
	.byte	'request',0,17,65,82
	.word	5168
	.byte	5
	.byte	'newRequest',0,17,65,97
	.word	137
	.byte	6,0,3
	.word	1365
	.byte	4
	.byte	'Dem_ClientSelectionType_invalidateSelectionResult',0,3,17,151,1,17,1,1,5
	.byte	'selection',0,17,151,1,93
	.word	5250
	.byte	6,0,8
	.byte	'Dem_ClientSelectionType_getTypeOfSelection',0,3,17,168,1,18
	.word	137
	.byte	1,1,5
	.byte	'selection',0,17,168,1,86
	.word	1365
	.byte	6,0,4
	.byte	'Dem_ClientClearMachine_SetMachineActiveClient',0,3,18,53,17,1,1,5
	.byte	'ClientId',0,18,53,80
	.word	137
	.byte	6,0,4
	.byte	'Dem_ClientClearMachine_SetMachineState',0,3,18,68,17,1,1,5
	.byte	'state',0,18,68,62
	.word	137
	.byte	6,0,8
	.byte	'Dem_ClientClearMachine_isClearDtcGroupAllDtcsSelected',0,3,18,78,20
	.word	137
	.byte	1,1,5
	.byte	'ClientId',0,18,78,91
	.word	137
	.byte	7,6,6,6,6,0,0,8
	.byte	'Dem_EvMemIsMemIdValid',0,3,19,103,30
	.word	137
	.byte	1,1,5
	.byte	'MemId',0,19,103,65
	.word	4954
	.byte	6,0,8
	.byte	'Dem_EvMemIsEventMemLocIdValid',0,3,19,112,30
	.word	137
	.byte	1,1,5
	.byte	'LocId',0,19,112,73
	.word	4954
	.byte	6,0,11,20,133,1,3,4,12
	.byte	'Status',0
	.word	854
	.byte	2,2,35,0,12
	.byte	'EventId',0
	.word	854
	.byte	2,2,35,2,0,13,20,131,1,9,4,12
	.byte	'Data',0
	.word	5739
	.byte	4,2,35,0,0,14,7
	.word	137
	.byte	15,6,0,11,20,144,1,9,20,12
	.byte	'Hdr',0
	.word	5779
	.byte	4,2,35,0,12
	.byte	'Data',0
	.word	5800
	.byte	7,2,35,4,12
	.byte	'FailureCounter',0
	.word	137
	.byte	1,2,35,11,12
	.byte	'FreezeFrameCounter',0
	.word	137
	.byte	1,2,35,12,12
	.byte	'AgingCounter',0
	.word	137
	.byte	1,2,35,13,12
	.byte	'OccurrenceCounter',0
	.word	137
	.byte	1,2,35,14,12
	.byte	'Trigger',0
	.word	137
	.byte	1,2,35,15,12
	.byte	'TimeId',0
	.word	1365
	.byte	4,2,35,16,0,9
	.word	5809
	.byte	3
	.word	5977
	.byte	8
	.byte	'Dem_EvMemGetEventMemStatusByPtr',0,3,19,134,1,25
	.word	4954
	.byte	1,1,5
	.byte	'EventMemory',0,19,134,1,89
	.word	5982
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemStatus',0,3,19,139,1,25
	.word	4954
	.byte	1,1,5
	.byte	'LocId',0,19,139,1,65
	.word	4954
	.byte	7,6,0,0,8
	.byte	'Dem_EvMemGetEventMemEventIdByPtr',0,3,19,152,1,28
	.word	854
	.byte	1,1,5
	.byte	'EventMemory',0,19,152,1,93
	.word	5982
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemTimeIdByPtr',0,3,19,170,1,19
	.word	1365
	.byte	1,1,5
	.byte	'EventMemory',0,19,170,1,83
	.word	5982
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemDtcStatusByPtr',0,3,19,188,1,18
	.word	137
	.byte	1,1,5
	.byte	'EventMemory',0,19,188,1,85
	.word	5982
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemFailureCounterByPtr',0,3,19,216,1,24
	.word	4954
	.byte	1,1,5
	.byte	'EventMemory',0,19,216,1,96
	.word	5982
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemOccurrenceCounterByPtr',0,3,19,233,1,25
	.word	4954
	.byte	1,1,5
	.byte	'EventMemory',0,19,233,1,100
	.word	5982
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemAgingCounterByPtr',0,3,19,133,2,25
	.word	4954
	.byte	1,1,5
	.byte	'EventMemory',0,19,133,2,95
	.word	5982
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemAgingCounter',0,3,19,144,2,25
	.word	4954
	.byte	1,1,5
	.byte	'LocId',0,19,144,2,71
	.word	4954
	.byte	7,6,0,0,4
	.byte	'Dem_EvMemSetEventMemAgingCounter',0,3,19,150,2,17,1,1,5
	.byte	'LocId',0,19,150,2,63
	.word	4954
	.byte	5
	.byte	'AgingCounter',0,19,150,2,83
	.word	4954
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr',0,3,19,161,2,25
	.word	4954
	.byte	1,1,5
	.byte	'EventMemory',0,19,161,2,103
	.word	5982
	.byte	6,0,2
	.byte	'char',0,1,6,8
	.byte	'Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr',0,3,19,213,2,18
	.word	6768
	.byte	1,1,5
	.byte	'EventMemory',0,19,213,2,92
	.word	5982
	.byte	6,0,8
	.byte	'Dem_EvMemGetMaxFdcSinceLastClearByPtr',0,3,19,224,2,18
	.word	6768
	.byte	1,1,5
	.byte	'EventMemory',0,19,224,2,88
	.word	5982
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemFreezeFrameCounterByPtr',0,3,19,238,3,25
	.word	4954
	.byte	1,1,5
	.byte	'EventMemory',0,19,238,3,101
	.word	5982
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemTriggerByPtr',0,3,19,141,4,28
	.word	137
	.byte	1,1,5
	.byte	'EventMemory',0,19,141,4,93
	.word	5982
	.byte	6,0,3
	.word	5809
	.byte	8
	.byte	'Dem_EvMemGetEventMemDataByPtr',0,3,19,170,4,19
	.word	154
	.byte	1,1,5
	.byte	'EventMemory',0,19,170,4,75
	.word	7073
	.byte	6,0,8
	.byte	'Dem_EvMemIsStored',0,3,19,206,4,30
	.word	137
	.byte	1,1,5
	.byte	'Status',0,19,206,4,61
	.word	4954
	.byte	6,0,8
	.byte	'Dem_EvMemIsEmpty',0,3,19,211,4,30
	.word	137
	.byte	1,1,5
	.byte	'Status',0,19,211,4,60
	.word	4954
	.byte	6,0,8
	.byte	'Dem_EvMemSetToEmpty',0,3,19,226,4,25
	.word	4954
	.byte	1,1,6,0,8
	.byte	'Dem_EvMemGetShadowVisibility',0,3,19,242,4,30
	.word	137
	.byte	1,1,6,0,8
	.byte	'Dem_EvMemGetEventMemStartLocId',0,3,19,131,5,25
	.word	4954
	.byte	1,1,5
	.byte	'MemId',0,19,131,5,69
	.word	4954
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemEndLocId',0,3,19,143,5,25
	.word	4954
	.byte	1,1,5
	.byte	'MemId',0,19,143,5,67
	.word	4954
	.byte	6,0,3
	.word	4954
	.byte	4
	.byte	'Dem_EvMemEventMemoryIteratorNew',0,3,19,179,5,17,1,1,5
	.byte	'MemId',0,19,179,5,63
	.word	7433
	.byte	6,0,9
	.word	4954
	.byte	3
	.word	7495
	.byte	8
	.byte	'Dem_EvMemEventMemoryIteratorIsValid',0,3,19,184,5,30
	.word	137
	.byte	1,1,5
	.byte	'MemId',0,19,184,5,86
	.word	7500
	.byte	6,0,4
	.byte	'Dem_EvMemEventMemoryIteratorNext',0,3,19,189,5,17,1,1,5
	.byte	'MemId',0,19,189,5,64
	.word	7433
	.byte	6,0,8
	.byte	'Dem_EvMemIsEdgeTrigger',0,3,19,247,5,30
	.word	137
	.byte	1,1,5
	.byte	'StatusOld',0,19,247,5,66
	.word	4954
	.byte	5
	.byte	'StatusNew',0,19,247,5,90
	.word	4954
	.byte	5
	.byte	'Trigger',0,19,247,5,114
	.word	4954
	.byte	6,0,8
	.byte	'Dem_EvMemGetRamStsMask',0,3,19,154,7,25
	.word	4954
	.byte	1,1,5
	.byte	'EventId',0,19,154,7,64
	.word	854
	.byte	7,6,0,0,8
	.byte	'Dem_EvMemGetCurrentAgingCycleCounterInt',0,3,21,20,25
	.word	4954
	.byte	1,1,5
	.byte	'EventId',0,21,20,81
	.word	854
	.byte	6,0,8
	.byte	'Dem_EvMemIsAged',0,3,21,61,30
	.word	137
	.byte	1,1,5
	.byte	'EventId',0,21,61,62
	.word	854
	.byte	5
	.byte	'LocId',0,21,61,84
	.word	4954
	.byte	5
	.byte	'StatusNew',0,21,61,104
	.word	4954
	.byte	6,0,8
	.byte	'Dem_EvMemGetMemIdForDTCOrigin',0,3,22,150,1,25
	.word	4954
	.byte	1,1,5
	.byte	'DTCOrigin',0,22,150,1,73
	.word	137
	.byte	6,0,8
	.byte	'Dem_EvMemGetMemIdForEvent',0,3,22,222,1,25
	.word	4954
	.byte	1,1,5
	.byte	'EventId',0,22,222,1,67
	.word	854
	.byte	7,6,0,0,8
	.byte	'Dem_EvtGetIsoByte',0,3,23,42,34
	.word	137
	.byte	1,1,5
	.byte	'EventId',0,23,42,69
	.word	854
	.byte	6,0
.L403:
	.byte	8
	.byte	'Dem_NvMBlockIsUsingStorageBuffer',0,3,24,57,20
	.word	137
	.byte	1,1
.L405:
	.byte	5
	.byte	'demNvMId',0,24,57,72
	.word	137
.L407:
	.byte	6,0
.L367:
	.byte	4
	.byte	'Dem_NvMBlockStatusClearBit',0,3,24,63,17,1,1
.L369:
	.byte	5
	.byte	'demNvMId',0,24,63,63
	.word	137
.L371:
	.byte	5
	.byte	'bitmask',0,24,63,96
	.word	137
.L373:
	.byte	6,0
.L353:
	.byte	4
	.byte	'Dem_NvMBlockStatusSetBit',0,3,24,69,17,1,1
.L356:
	.byte	5
	.byte	'demNvMId',0,24,69,61
	.word	137
.L358:
	.byte	5
	.byte	'bitmask',0,24,69,94
	.word	137
.L360:
	.byte	6,0
.L383:
	.byte	8
	.byte	'Dem_NvMBlockStatusIsBitSet',0,3,24,75,20
	.word	137
	.byte	1,1
.L385:
	.byte	5
	.byte	'demNvMId',0,24,75,66
	.word	137
.L387:
	.byte	5
	.byte	'bitmask',0,24,75,99
	.word	137
.L389:
	.byte	6,0
.L350:
	.byte	4
	.byte	'Dem_NvMBlockStatusDoubleBufferHandling',0,3,24,81,17,1,1
.L351:
	.byte	7,6,6,6,6,6,0,0,14,5
	.word	137
	.byte	15,4,0,14,10
	.word	854
	.byte	15,4,0,11,26,9,9,18,12
	.byte	'OperationCycleStates',0
	.word	137
	.byte	1,2,35,0,12
	.byte	'OperationCycleQualified',0
	.word	137
	.byte	1,2,35,1,12
	.byte	'Overflow',0
	.word	8417
	.byte	5,2,35,2,12
	.byte	'DtcIdsByOccurrenceTime',0
	.word	8426
	.byte	10,2,35,8,0,13,25,16,9,20,12
	.byte	'evMemData',0
	.word	5809
	.byte	20,2,35,0,12
	.byte	'genericNvData',0
	.word	8435
	.byte	18,2,35,0,0,11,25,43,9,28,12
	.byte	'id',0
	.word	137
	.byte	1,2,35,0,12
	.byte	'data',0
	.word	8554
	.byte	20,2,35,4,12
	.byte	'busy',0
	.word	137
	.byte	1,2,35,24,0
.L401:
	.byte	3
	.word	8602
.L408:
	.byte	8
	.byte	'Dem_NvMCopyToStorageBuffer',0,3,24,118,38
	.word	8648
	.byte	1,1
.L409:
	.byte	5
	.byte	'demNvMId',0,24,118,84
	.word	137
.L411:
	.byte	6,0
.L345:
	.byte	4
	.byte	'Dem_NvMReleaseStorageBuffer',0,3,24,144,1,17,1,1
.L347:
	.byte	5
	.byte	'storageBuffer',0,24,144,1,71
	.word	8648
.L349:
	.byte	6,0
.L326:
	.byte	4
	.byte	'Dem_NvMReleaseCompletedStorageBufferLocations',0,3,24,150,1,17,1,1
.L329:
	.byte	7,6,6,0,0
.L394:
	.byte	8
	.byte	'Dem_NvMWriteImmediate',0,3,24,167,1,27
	.word	137
	.byte	1,1
.L397:
	.byte	5
	.byte	'demNvMId',0,24,167,1,68
	.word	137
.L399:
	.byte	7,6,6,6,0,0
.L494:
	.byte	4
	.byte	'Dem_NvMMarkUntrackedBlocksForShutdown',0,3,24,193,1,17,1,1
.L496:
	.byte	7,6,0,0
.L374:
	.byte	8
	.byte	'Dem_NvMHandleStates',0,3,24,240,1,20
	.word	137
	.byte	1,1
.L376:
	.byte	5
	.byte	'demNvMId',0,24,240,1,59
	.word	137
.L378:
	.byte	7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,3
	.word	137
.L441:
	.byte	8
	.byte	'Dem_NvMBlockIdExtendedGetNextIndex',0,3,24,197,2,20
	.word	137
	.byte	1,1
.L443:
	.byte	5
	.byte	'it',0,24,197,2,75
	.word	9012
.L445:
	.byte	5
	.byte	'start',0,24,197,2,98
	.word	137
.L447:
	.byte	6,0,16
	.word	159
	.byte	17
	.word	189
	.byte	17
	.word	204
	.byte	6,0,16
	.word	227
	.byte	17
	.word	259
	.byte	17
	.word	274
	.byte	6,0,16
	.word	297
	.byte	17
	.word	333
	.byte	17
	.word	348
	.byte	17
	.word	369
	.byte	7,18
	.word	159
	.byte	17
	.word	189
	.byte	17
	.word	204
	.byte	19
	.word	225
	.byte	0,6,18
	.word	227
	.byte	17
	.word	259
	.byte	17
	.word	274
	.byte	19
	.word	295
	.byte	0,6,0,0,16
	.word	398
	.byte	17
	.word	438
	.byte	17
	.word	452
	.byte	6,0,16
	.word	475
	.byte	17
	.word	511
	.byte	17
	.word	525
	.byte	7,18
	.word	398
	.byte	17
	.word	438
	.byte	17
	.word	452
	.byte	19
	.word	473
	.byte	0,6,0,0,16
	.word	550
	.byte	17
	.word	585
	.byte	17
	.word	599
	.byte	17
	.word	620
	.byte	6,0,16
	.word	645
	.byte	17
	.word	678
	.byte	17
	.word	692
	.byte	17
	.word	713
	.byte	6,0,16
	.word	738
	.byte	17
	.word	775
	.byte	17
	.word	789
	.byte	17
	.word	810
	.byte	17
	.word	833
	.byte	7,18
	.word	645
	.byte	17
	.word	678
	.byte	17
	.word	692
	.byte	17
	.word	713
	.byte	19
	.word	736
	.byte	0,6,0,0,16
	.word	881
	.byte	17
	.word	912
	.byte	17
	.word	927
	.byte	6,0,16
	.word	950
	.byte	17
	.word	983
	.byte	17
	.word	998
	.byte	6,0,16
	.word	1021
	.byte	17
	.word	1062
	.byte	17
	.word	1076
	.byte	6,0,16
	.word	1099
	.byte	17
	.word	1136
	.byte	17
	.word	1150
	.byte	7,18
	.word	1021
	.byte	17
	.word	1062
	.byte	17
	.word	1076
	.byte	19
	.word	1097
	.byte	0,6,0,0,16
	.word	1175
	.byte	17
	.word	1211
	.byte	17
	.word	1225
	.byte	17
	.word	1246
	.byte	6,0,16
	.word	1271
	.byte	17
	.word	1305
	.byte	17
	.word	1319
	.byte	17
	.word	1340
	.byte	6,0,16
	.word	1386
	.byte	17
	.word	1417
	.byte	17
	.word	1432
	.byte	6,0,16
	.word	1455
	.byte	17
	.word	1488
	.byte	17
	.word	1503
	.byte	6,0,16
	.word	1526
	.byte	17
	.word	1567
	.byte	17
	.word	1581
	.byte	6,0,16
	.word	1604
	.byte	17
	.word	1641
	.byte	17
	.word	1655
	.byte	7,18
	.word	1526
	.byte	17
	.word	1567
	.byte	17
	.word	1581
	.byte	19
	.word	1602
	.byte	0,6,0,0,16
	.word	1680
	.byte	17
	.word	1714
	.byte	17
	.word	1728
	.byte	17
	.word	1749
	.byte	6,0,20
	.byte	'Det_ReportError',0,27,112,16
	.word	137
	.byte	1,1,1,1,5
	.byte	'ModuleId',0,27,112,39
	.word	854
	.byte	5
	.byte	'InstanceId',0,27,112,55
	.word	137
	.byte	5
	.byte	'ApiId',0,27,112,73
	.word	137
	.byte	5
	.byte	'ErrorId',0,27,112,86
	.word	137
	.byte	0,21
	.byte	'void',0
.L561:
	.byte	3
	.word	9693
	.byte	9
	.word	9693
.L563:
	.byte	3
	.word	9704
	.byte	20
	.byte	'rba_BswSrv_MemCopy',0,4,83,14
	.word	9699
	.byte	1,1,1,1,5
	.byte	'xDest_pv',0,4,83,39
	.word	9699
	.byte	5
	.byte	'xSrc_pcv',0,4,83,61
	.word	9709
	.byte	5
	.byte	'numBytes_u32',0,4,83,78
	.word	1365
	.byte	0,16
	.word	1774
	.byte	17
	.word	1812
	.byte	6,0,16
	.word	1832
	.byte	17
	.word	1871
	.byte	6,0,16
	.word	1902
	.byte	17
	.word	1937
	.byte	17
	.word	1953
	.byte	17
	.word	1969
	.byte	6,0,16
	.word	1992
	.byte	17
	.word	2022
	.byte	6,0,16
	.word	2042
	.byte	17
	.word	2073
	.byte	6,0,3
	.word	137
	.byte	20
	.byte	'NvM_GetErrorStatus',0,28,235,1,23
	.word	137
	.byte	1,1,1,1,5
	.byte	'BlockId',0,28,235,1,58
	.word	854
	.byte	5
	.byte	'RequestResultPtr',0,28,235,1,90
	.word	9871
	.byte	0,20
	.byte	'NvM_Rb_SetWriteAllTrigger',0,28,132,2,23
	.word	137
	.byte	1,1,1,1,5
	.byte	'BlockId',0,28,132,2,65
	.word	854
	.byte	5
	.byte	'WriteAllTrigger',0,28,132,2,82
	.word	137
	.byte	0,20
	.byte	'NvM_WriteBlock',0,28,190,2,23
	.word	137
	.byte	1,1,1,1,5
	.byte	'BlockId',0,28,190,2,54
	.word	854
	.byte	5
	.byte	'NvM_SrcPtr',0,28,190,2,75
	.word	9709
	.byte	0,20
	.byte	'NvM_InvalidateNvBlock',0,28,217,2,23
	.word	137
	.byte	1,1,1,1,5
	.byte	'BlockId',0,28,217,2,61
	.word	854
	.byte	0,16
	.word	2093
	.byte	17
	.word	2125
	.byte	6,0,16
	.word	2138
	.byte	17
	.word	2166
	.byte	7,18
	.word	2093
	.byte	17
	.word	2125
	.byte	19
	.word	2136
	.byte	0,6,0,0,16
	.word	2181
	.byte	17
	.word	2216
	.byte	6,0,16
	.word	2229
	.byte	6,0,16
	.word	2257
	.byte	17
	.word	2283
	.byte	17
	.word	2298
	.byte	6,0,16
	.word	2321
	.byte	17
	.word	2349
	.byte	17
	.word	2364
	.byte	6,0,16
	.word	2387
	.byte	17
	.word	2419
	.byte	17
	.word	2434
	.byte	17
	.word	2455
	.byte	7,18
	.word	2257
	.byte	17
	.word	2283
	.byte	17
	.word	2298
	.byte	19
	.word	2319
	.byte	0,6,18
	.word	2321
	.byte	17
	.word	2349
	.byte	17
	.word	2364
	.byte	19
	.word	2385
	.byte	0,6,0,0,16
	.word	2494
	.byte	17
	.word	2526
	.byte	17
	.word	2541
	.byte	6,0,16
	.word	2564
	.byte	17
	.word	2604
	.byte	7,18
	.word	475
	.byte	17
	.word	511
	.byte	17
	.word	525
	.byte	22
	.word	546
	.byte	18
	.word	398
	.byte	17
	.word	438
	.byte	17
	.word	452
	.byte	19
	.word	473
	.byte	0,19
	.word	547
	.byte	0,0,6,0,0,16
	.word	2621
	.byte	17
	.word	2665
	.byte	7,18
	.word	475
	.byte	17
	.word	511
	.byte	17
	.word	525
	.byte	22
	.word	546
	.byte	18
	.word	398
	.byte	17
	.word	438
	.byte	17
	.word	452
	.byte	19
	.word	473
	.byte	0,19
	.word	547
	.byte	0,0,6,0,0,16
	.word	2683
	.byte	17
	.word	2729
	.byte	7,18
	.word	475
	.byte	17
	.word	511
	.byte	17
	.word	525
	.byte	22
	.word	546
	.byte	18
	.word	398
	.byte	17
	.word	438
	.byte	17
	.word	452
	.byte	19
	.word	473
	.byte	0,19
	.word	547
	.byte	0,0,6,0,0,16
	.word	2747
	.byte	17
	.word	2788
	.byte	7,18
	.word	475
	.byte	17
	.word	511
	.byte	17
	.word	525
	.byte	22
	.word	546
	.byte	18
	.word	398
	.byte	17
	.word	438
	.byte	17
	.word	452
	.byte	19
	.word	473
	.byte	0,19
	.word	547
	.byte	0,0,6,0,0,16
	.word	2806
	.byte	17
	.word	2862
	.byte	7,18
	.word	475
	.byte	17
	.word	511
	.byte	17
	.word	525
	.byte	22
	.word	546
	.byte	18
	.word	398
	.byte	17
	.word	438
	.byte	17
	.word	452
	.byte	19
	.word	473
	.byte	0,19
	.word	547
	.byte	0,0,6,0,0,16
	.word	2880
	.byte	17
	.word	2918
	.byte	17
	.word	2932
	.byte	7,18
	.word	297
	.byte	17
	.word	333
	.byte	17
	.word	348
	.byte	17
	.word	369
	.byte	22
	.word	393
	.byte	18
	.word	159
	.byte	17
	.word	189
	.byte	17
	.word	204
	.byte	19
	.word	225
	.byte	0,19
	.word	394
	.byte	18
	.word	227
	.byte	17
	.word	259
	.byte	17
	.word	274
	.byte	19
	.word	295
	.byte	0,19
	.word	395
	.byte	0,0,6,0,0,16
	.word	2956
	.byte	17
	.word	2997
	.byte	17
	.word	3011
	.byte	7,18
	.word	297
	.byte	17
	.word	333
	.byte	17
	.word	348
	.byte	17
	.word	369
	.byte	22
	.word	393
	.byte	18
	.word	159
	.byte	17
	.word	189
	.byte	17
	.word	204
	.byte	19
	.word	225
	.byte	0,19
	.word	394
	.byte	18
	.word	227
	.byte	17
	.word	259
	.byte	17
	.word	274
	.byte	19
	.word	295
	.byte	0,19
	.word	395
	.byte	0,0,6,0,0,16
	.word	3035
	.byte	17
	.word	3076
	.byte	17
	.word	3090
	.byte	7,18
	.word	297
	.byte	17
	.word	333
	.byte	17
	.word	348
	.byte	17
	.word	369
	.byte	22
	.word	393
	.byte	18
	.word	159
	.byte	17
	.word	189
	.byte	17
	.word	204
	.byte	19
	.word	225
	.byte	0,19
	.word	394
	.byte	18
	.word	227
	.byte	17
	.word	259
	.byte	17
	.word	274
	.byte	19
	.word	295
	.byte	0,19
	.word	395
	.byte	0,0,6,0,0,16
	.word	3114
	.byte	17
	.word	3157
	.byte	17
	.word	3171
	.byte	7,18
	.word	297
	.byte	17
	.word	333
	.byte	17
	.word	348
	.byte	17
	.word	369
	.byte	22
	.word	393
	.byte	18
	.word	159
	.byte	17
	.word	189
	.byte	17
	.word	204
	.byte	19
	.word	225
	.byte	0,19
	.word	394
	.byte	18
	.word	227
	.byte	17
	.word	259
	.byte	17
	.word	274
	.byte	19
	.word	295
	.byte	0,19
	.word	395
	.byte	0,0,6,0,0,16
	.word	3195
	.byte	17
	.word	3238
	.byte	17
	.word	3252
	.byte	7,18
	.word	297
	.byte	17
	.word	333
	.byte	17
	.word	348
	.byte	17
	.word	369
	.byte	22
	.word	393
	.byte	18
	.word	159
	.byte	17
	.word	189
	.byte	17
	.word	204
	.byte	19
	.word	225
	.byte	0,19
	.word	394
	.byte	18
	.word	227
	.byte	17
	.word	259
	.byte	17
	.word	274
	.byte	19
	.word	295
	.byte	0,19
	.word	395
	.byte	0,0,6,0,0,16
	.word	3276
	.byte	17
	.word	3314
	.byte	17
	.word	3328
	.byte	7,18
	.word	297
	.byte	17
	.word	333
	.byte	17
	.word	348
	.byte	17
	.word	369
	.byte	22
	.word	393
	.byte	18
	.word	159
	.byte	17
	.word	189
	.byte	17
	.word	204
	.byte	19
	.word	225
	.byte	0,19
	.word	394
	.byte	18
	.word	227
	.byte	17
	.word	259
	.byte	17
	.word	274
	.byte	19
	.word	295
	.byte	0,19
	.word	395
	.byte	0,0,6,0,0,16
	.word	3352
	.byte	17
	.word	3392
	.byte	17
	.word	3406
	.byte	7,18
	.word	297
	.byte	17
	.word	333
	.byte	17
	.word	348
	.byte	17
	.word	369
	.byte	22
	.word	393
	.byte	18
	.word	159
	.byte	17
	.word	189
	.byte	17
	.word	204
	.byte	19
	.word	225
	.byte	0,19
	.word	394
	.byte	18
	.word	227
	.byte	17
	.word	259
	.byte	17
	.word	274
	.byte	19
	.word	295
	.byte	0,19
	.word	395
	.byte	0,0,6,0,0,16
	.word	3430
	.byte	17
	.word	3483
	.byte	17
	.word	3497
	.byte	7,18
	.word	297
	.byte	17
	.word	333
	.byte	17
	.word	348
	.byte	17
	.word	369
	.byte	22
	.word	393
	.byte	18
	.word	159
	.byte	17
	.word	189
	.byte	17
	.word	204
	.byte	19
	.word	225
	.byte	0,19
	.word	394
	.byte	18
	.word	227
	.byte	17
	.word	259
	.byte	17
	.word	274
	.byte	19
	.word	295
	.byte	0,19
	.word	395
	.byte	0,0,6,0,0,16
	.word	3521
	.byte	17
	.word	3550
	.byte	6,0,16
	.word	3564
	.byte	17
	.word	3597
	.byte	6,0,16
	.word	3611
	.byte	17
	.word	3643
	.byte	6,0,16
	.word	3660
	.byte	17
	.word	3694
	.byte	6,0,16
	.word	3716
	.byte	17
	.word	3751
	.byte	6,0,16
	.word	3781
	.byte	17
	.word	3834
	.byte	7,18
	.word	1832
	.byte	17
	.word	1871
	.byte	19
	.word	1890
	.byte	0,6,0,0,16
	.word	3850
	.byte	17
	.word	3903
	.byte	7,18
	.word	1774
	.byte	17
	.word	1812
	.byte	19
	.word	1830
	.byte	0,6,0,0,16
	.word	3919
	.byte	17
	.word	3970
	.byte	6,0,16
	.word	3985
	.byte	17
	.word	4035
	.byte	7,18
	.word	1099
	.byte	17
	.word	1136
	.byte	17
	.word	1150
	.byte	22
	.word	1171
	.byte	18
	.word	1021
	.byte	17
	.word	1062
	.byte	17
	.word	1076
	.byte	19
	.word	1097
	.byte	0,19
	.word	1172
	.byte	0,0,6,0,0,16
	.word	4052
	.byte	17
	.word	4092
	.byte	7,18
	.word	1099
	.byte	17
	.word	1136
	.byte	17
	.word	1150
	.byte	22
	.word	1171
	.byte	18
	.word	1021
	.byte	17
	.word	1062
	.byte	17
	.word	1076
	.byte	19
	.word	1097
	.byte	0,19
	.word	1172
	.byte	0,0,6,0,0,16
	.word	4109
	.byte	17
	.word	4153
	.byte	6,0,16
	.word	4168
	.byte	17
	.word	4209
	.byte	6,0,16
	.word	4225
	.byte	17
	.word	4268
	.byte	6,0,16
	.word	4284
	.byte	17
	.word	4332
	.byte	6,0,16
	.word	4348
	.byte	17
	.word	4402
	.byte	7,18
	.word	1175
	.byte	17
	.word	1211
	.byte	17
	.word	1225
	.byte	17
	.word	1246
	.byte	19
	.word	1269
	.byte	0,6,0,0,16
	.word	4420
	.byte	17
	.word	4463
	.byte	6,0,16
	.word	4479
	.byte	17
	.word	4524
	.byte	6,0,16
	.word	4553
	.byte	17
	.word	4589
	.byte	6,0,16
	.word	4608
	.byte	17
	.word	4648
	.byte	6,0,16
	.word	4667
	.byte	6,0,16
	.word	4720
	.byte	17
	.word	4756
	.byte	7,18
	.word	1386
	.byte	17
	.word	1417
	.byte	17
	.word	1432
	.byte	19
	.word	1453
	.byte	0,6,0,0,16
	.word	4776
	.byte	17
	.word	4808
	.byte	7,18
	.word	475
	.byte	17
	.word	511
	.byte	17
	.word	525
	.byte	22
	.word	546
	.byte	18
	.word	398
	.byte	17
	.word	438
	.byte	17
	.word	452
	.byte	19
	.word	473
	.byte	0,19
	.word	547
	.byte	0,0,6,0,0,16
	.word	4834
	.byte	17
	.word	4859
	.byte	17
	.word	4875
	.byte	6,0,16
	.word	4897
	.byte	17
	.word	4931
	.byte	6,0,23
	.byte	'Dem_PreStoredFFShutdown',0,29,50,6,1,1,1,1,16
	.word	4975
	.byte	17
	.word	5027
	.byte	17
	.word	5043
	.byte	6,0,16
	.word	5073
	.byte	17
	.word	5111
	.byte	17
	.word	5126
	.byte	17
	.word	5142
	.byte	6,0,16
	.word	5173
	.byte	17
	.word	5213
	.byte	17
	.word	5229
	.byte	6,0,16
	.word	5255
	.byte	17
	.word	5313
	.byte	6,0,16
	.word	5334
	.byte	17
	.word	5389
	.byte	6,0,16
	.word	5410
	.byte	17
	.word	5463
	.byte	6,0,16
	.word	5482
	.byte	17
	.word	5528
	.byte	6,0,16
	.word	5544
	.byte	17
	.word	5609
	.byte	7,18
	.word	1992
	.byte	17
	.word	2022
	.byte	19
	.word	2040
	.byte	0,6,18
	.word	1992
	.byte	17
	.word	2022
	.byte	19
	.word	2040
	.byte	0,6,18
	.word	5334
	.byte	17
	.word	5389
	.byte	19
	.word	5408
	.byte	0,6,18
	.word	5073
	.byte	17
	.word	5111
	.byte	17
	.word	5126
	.byte	17
	.word	5142
	.byte	19
	.word	5161
	.byte	0,6,0,0,16
	.word	5633
	.byte	17
	.word	5666
	.byte	6,0,16
	.word	5682
	.byte	17
	.word	5723
	.byte	6,0,16
	.word	5987
	.byte	17
	.word	6031
	.byte	6,0,16
	.word	6054
	.byte	17
	.word	6093
	.byte	7,18
	.word	5987
	.byte	17
	.word	6031
	.byte	19
	.word	6052
	.byte	0,6,0,0,16
	.word	6112
	.byte	17
	.word	6157
	.byte	6,0,16
	.word	6180
	.byte	17
	.word	6224
	.byte	6,0,16
	.word	6247
	.byte	17
	.word	6294
	.byte	6,0,16
	.word	6317
	.byte	17
	.word	6369
	.byte	6,0,16
	.word	6392
	.byte	17
	.word	6447
	.byte	6,0,16
	.word	6470
	.byte	17
	.word	6520
	.byte	6,0,16
	.word	6543
	.byte	17
	.word	6588
	.byte	7,18
	.word	6470
	.byte	17
	.word	6520
	.byte	19
	.word	6541
	.byte	0,6,0,0,16
	.word	6607
	.byte	17
	.word	6648
	.byte	17
	.word	6663
	.byte	6,0,16
	.word	6687
	.byte	17
	.word	6745
	.byte	6,0,16
	.word	6776
	.byte	17
	.word	6830
	.byte	6,0,16
	.word	6853
	.byte	17
	.word	6903
	.byte	6,0,16
	.word	6926
	.byte	17
	.word	6982
	.byte	6,0,16
	.word	7005
	.byte	17
	.word	7050
	.byte	6,0,16
	.word	7078
	.byte	17
	.word	7120
	.byte	6,0,16
	.word	7143
	.byte	17
	.word	7173
	.byte	6,0,16
	.word	7191
	.byte	17
	.word	7220
	.byte	6,0,16
	.word	7238
	.byte	6,0,16
	.word	7272
	.byte	6,0,16
	.word	7315
	.byte	17
	.word	7358
	.byte	6,0,16
	.word	7375
	.byte	17
	.word	7416
	.byte	6,0,16
	.word	7438
	.byte	17
	.word	7478
	.byte	6,0,16
	.word	7505
	.byte	17
	.word	7553
	.byte	6,0,16
	.word	7570
	.byte	17
	.word	7611
	.byte	6,0,16
	.word	7628
	.byte	17
	.word	7663
	.byte	17
	.word	7682
	.byte	17
	.word	7701
	.byte	6,0,16
	.word	7720
	.byte	17
	.word	7755
	.byte	7,18
	.word	3919
	.byte	17
	.word	3970
	.byte	19
	.word	3983
	.byte	0,6,0,0,16
	.word	7776
	.byte	17
	.word	7827
	.byte	6,0,16
	.word	7845
	.byte	17
	.word	7872
	.byte	17
	.word	7888
	.byte	17
	.word	7902
	.byte	6,0,16
	.word	7922
	.byte	17
	.word	7964
	.byte	6,0,16
	.word	7985
	.byte	17
	.word	8023
	.byte	7,18
	.word	3985
	.byte	17
	.word	4035
	.byte	22
	.word	4048
	.byte	18
	.word	1099
	.byte	17
	.word	1136
	.byte	17
	.word	1150
	.byte	22
	.word	1171
	.byte	18
	.word	1021
	.byte	17
	.word	1062
	.byte	17
	.word	1076
	.byte	19
	.word	1097
	.byte	0,19
	.word	1172
	.byte	0,0,19
	.word	4049
	.byte	0,0,6,0,0,16
	.word	8044
	.byte	17
	.word	8073
	.byte	6,0,16
	.word	8091
	.byte	17
	.word	8135
	.byte	6,0,16
	.word	8154
	.byte	17
	.word	8188
	.byte	17
	.word	8205
	.byte	6,0,16
	.word	8223
	.byte	17
	.word	8255
	.byte	17
	.word	8272
	.byte	6,0,16
	.word	8290
	.byte	17
	.word	8328
	.byte	17
	.word	8345
	.byte	6,0,16
	.word	8363
	.byte	7,18
	.word	8223
	.byte	17
	.word	8255
	.byte	17
	.word	8272
	.byte	19
	.word	8288
	.byte	0,6,18
	.word	8223
	.byte	17
	.word	8255
	.byte	17
	.word	8272
	.byte	19
	.word	8288
	.byte	0,6,18
	.word	8223
	.byte	17
	.word	8255
	.byte	17
	.word	8272
	.byte	19
	.word	8288
	.byte	0,6,18
	.word	8223
	.byte	17
	.word	8255
	.byte	17
	.word	8272
	.byte	19
	.word	8288
	.byte	0,6,18
	.word	8154
	.byte	17
	.word	8188
	.byte	17
	.word	8205
	.byte	19
	.word	8221
	.byte	0,6,0,0,16
	.word	8653
	.byte	17
	.word	8691
	.byte	6,0,16
	.word	8710
	.byte	17
	.word	8746
	.byte	6,0,16
	.word	8771
	.byte	7,18
	.word	8710
	.byte	17
	.word	8746
	.byte	19
	.word	8769
	.byte	0,6,18
	.word	2138
	.byte	17
	.word	2166
	.byte	22
	.word	2177
	.byte	18
	.word	2093
	.byte	17
	.word	2125
	.byte	19
	.word	2136
	.byte	0,19
	.word	2178
	.byte	0,0,6,0,0,16
	.word	8830
	.byte	17
	.word	8864
	.byte	7,18
	.word	8091
	.byte	17
	.word	8135
	.byte	19
	.word	8152
	.byte	0,6,18
	.word	8710
	.byte	17
	.word	8746
	.byte	19
	.word	8769
	.byte	0,6,18
	.word	8653
	.byte	17
	.word	8691
	.byte	19
	.word	8708
	.byte	0,6,0,0,16
	.word	8888
	.byte	7,18
	.word	2181
	.byte	17
	.word	2216
	.byte	19
	.word	2227
	.byte	0,6,0,0,16
	.word	8938
	.byte	17
	.word	8970
	.byte	7,18
	.word	8290
	.byte	17
	.word	8328
	.byte	17
	.word	8345
	.byte	19
	.word	8361
	.byte	0,6,18
	.word	8290
	.byte	17
	.word	8328
	.byte	17
	.word	8345
	.byte	19
	.word	8361
	.byte	0,6,18
	.word	8290
	.byte	17
	.word	8328
	.byte	17
	.word	8345
	.byte	19
	.word	8361
	.byte	0,6,18
	.word	8290
	.byte	17
	.word	8328
	.byte	17
	.word	8345
	.byte	19
	.word	8361
	.byte	0,6,18
	.word	8290
	.byte	17
	.word	8328
	.byte	17
	.word	8345
	.byte	19
	.word	8361
	.byte	0,6,18
	.word	8290
	.byte	17
	.word	8328
	.byte	17
	.word	8345
	.byte	19
	.word	8361
	.byte	0,6,18
	.word	8223
	.byte	17
	.word	8255
	.byte	17
	.word	8272
	.byte	19
	.word	8288
	.byte	0,6,18
	.word	8223
	.byte	17
	.word	8255
	.byte	17
	.word	8272
	.byte	19
	.word	8288
	.byte	0,6,18
	.word	8223
	.byte	17
	.word	8255
	.byte	17
	.word	8272
	.byte	19
	.word	8288
	.byte	0,6,18
	.word	8154
	.byte	17
	.word	8188
	.byte	17
	.word	8205
	.byte	19
	.word	8221
	.byte	0,6,18
	.word	8154
	.byte	17
	.word	8188
	.byte	17
	.word	8205
	.byte	19
	.word	8221
	.byte	0,6,18
	.word	8154
	.byte	17
	.word	8188
	.byte	17
	.word	8205
	.byte	19
	.word	8221
	.byte	0,6,18
	.word	8154
	.byte	17
	.word	8188
	.byte	17
	.word	8205
	.byte	19
	.word	8221
	.byte	0,6,18
	.word	8154
	.byte	17
	.word	8188
	.byte	17
	.word	8205
	.byte	19
	.word	8221
	.byte	0,6,18
	.word	8154
	.byte	17
	.word	8188
	.byte	17
	.word	8205
	.byte	19
	.word	8221
	.byte	0,6,18
	.word	8154
	.byte	17
	.word	8188
	.byte	17
	.word	8205
	.byte	19
	.word	8221
	.byte	0,6,18
	.word	8154
	.byte	17
	.word	8188
	.byte	17
	.word	8205
	.byte	19
	.word	8221
	.byte	0,6,18
	.word	8154
	.byte	17
	.word	8188
	.byte	17
	.word	8205
	.byte	19
	.word	8221
	.byte	0,6,18
	.word	2138
	.byte	17
	.word	2166
	.byte	22
	.word	2177
	.byte	18
	.word	2093
	.byte	17
	.word	2125
	.byte	19
	.word	2136
	.byte	0,19
	.word	2178
	.byte	0,0,6,18
	.word	8830
	.byte	17
	.word	8864
	.byte	22
	.word	8882
	.byte	18
	.word	8091
	.byte	17
	.word	8135
	.byte	19
	.word	8152
	.byte	0,19
	.word	8883
	.byte	18
	.word	8710
	.byte	17
	.word	8746
	.byte	19
	.word	8769
	.byte	0,19
	.word	8884
	.byte	18
	.word	8653
	.byte	17
	.word	8691
	.byte	19
	.word	8708
	.byte	0,19
	.word	8885
	.byte	0,0,6,18
	.word	8830
	.byte	17
	.word	8864
	.byte	22
	.word	8882
	.byte	18
	.word	8091
	.byte	17
	.word	8135
	.byte	19
	.word	8152
	.byte	0,19
	.word	8883
	.byte	18
	.word	8710
	.byte	17
	.word	8746
	.byte	19
	.word	8769
	.byte	0,19
	.word	8884
	.byte	18
	.word	8653
	.byte	17
	.word	8691
	.byte	19
	.word	8708
	.byte	0,19
	.word	8885
	.byte	0,0,6,0,0,16
	.word	9017
	.byte	17
	.word	9064
	.byte	17
	.word	9076
	.byte	6,0,24
	.byte	'__INDIRECT__',0,24,1,1,1,1,1,25,1,3
	.word	13732
	.byte	26
	.byte	'__codeptr',0,24,1,1
	.word	13734
	.byte	26
	.byte	'sint8',0,30,76,25
	.word	6768
	.byte	26
	.byte	'uint8',0,30,81,25
	.word	137
	.byte	26
	.byte	'sint16',0,30,86,25
	.word	4540
	.byte	26
	.byte	'uint16',0,30,91,25
	.word	854
	.byte	2
	.byte	'int',0,4,5,26
	.byte	'sint32',0,30,96,24
	.word	13815
	.byte	26
	.byte	'uint32',0,30,106,24
	.word	1365
	.byte	2
	.byte	'unsigned long long int',0,8,7,26
	.byte	'uint64',0,30,111,30
	.word	13852
	.byte	26
	.byte	'boolean',0,30,127,25
	.word	137
	.byte	26
	.byte	'uint8_least',0,30,137,1,25
	.word	4954
	.byte	26
	.byte	'uint16_least',0,30,147,1,25
	.word	4954
	.byte	26
	.byte	'StatusType',0,31,191,1,27
	.word	137
	.byte	26
	.byte	'Std_ReturnType',0,31,199,1,15
	.word	137
	.byte	11,31,206,1,9,8,12
	.byte	'vendorID',0
	.word	854
	.byte	2,2,35,0,12
	.byte	'moduleID',0
	.word	854
	.byte	2,2,35,2,12
	.byte	'sw_major_version',0
	.word	137
	.byte	1,2,35,4,12
	.byte	'sw_minor_version',0
	.word	137
	.byte	1,2,35,5,12
	.byte	'sw_patch_version',0
	.word	137
	.byte	1,2,35,6,0,26
	.byte	'Std_VersionInfoType',0,31,213,1,3
	.word	13996
	.byte	26
	.byte	'Dem_ClientRequestType',0,32,46,16
	.word	854
	.byte	26
	.byte	'Dem_ClientResultType',0,32,47,16
	.word	854
	.byte	26
	.byte	'Dem_ClientSelectionType',0,32,48,16
	.word	1365
	.byte	26
	.byte	'Dem_ClientPriorityType',0,32,50,15
	.word	137
	.byte	26
	.byte	'Dem_ComponentIdType',0,33,20,15
	.word	137
	.byte	26
	.byte	'PduIdType',0,34,22,19
	.word	854
	.byte	26
	.byte	'PduLengthType',0,34,26,19
	.word	854
	.byte	27,35,113,9,4,28
	.byte	'TP_DATACONF',0,0,28
	.byte	'TP_DATARETRY',0,1,28
	.byte	'TP_CONFPENDING',0,2,0,26
	.byte	'TpDataStateType',0,35,118,3
	.word	14336
	.byte	26
	.byte	'Can_IdType',0,36,32,16
	.word	1365
	.byte	26
	.byte	'Can_HwHandleType',0,36,43,16
	.word	854
	.byte	11,37,93,9,8,12
	.byte	'Class',0
	.word	137
	.byte	1,2,35,0,12
	.byte	'TIN',0
	.word	137
	.byte	1,2,35,1,12
	.byte	'ReturnAddress',0
	.word	1365
	.byte	4,2,35,4,0,26
	.byte	'OsTrapInfoType',0,37,97,3
	.word	14456
	.byte	14,68
	.word	1365
	.byte	15,16,0,11,37,154,1,9,68,12
	.byte	'store',0
	.word	14536
	.byte	68,2,35,0,0,14,68
	.word	14545
	.byte	15,0,0,26
	.byte	'Os_JumpBufType',0,37,156,1,3
	.word	14567
	.byte	26
	.byte	'Os_StackTraceType',0,37,174,1,18
	.word	1365
	.byte	11,37,175,1,9,8,12
	.byte	'sp',0
	.word	1365
	.byte	4,2,35,0,12
	.byte	'ctx',0
	.word	1365
	.byte	4,2,35,4,0,26
	.byte	'Os_StackValueType',0,37,175,1,63
	.word	14627
	.byte	26
	.byte	'Os_StackSizeType',0,37,176,1,27
	.word	14627
	.byte	29,1,1,3
	.word	14712
	.byte	26
	.byte	'Os_VoidVoidFunctionType',0,37,179,1,16
	.word	14715
	.byte	26
	.byte	'ApplicationType',0,37,193,1,23
	.word	137
	.byte	30
	.byte	'Os_ApplicationConfigurationType_s',0,37,198,1,16,2,12
	.byte	'app_id',0
	.word	137
	.byte	1,2,35,0,12
	.byte	'access',0
	.word	137
	.byte	1,2,35,1,0,26
	.byte	'Os_ApplicationConfigurationType',0,37,201,1,3
	.word	14778
	.byte	26
	.byte	'Os_CoreStateType',0,37,203,1,16
	.word	1365
	.byte	26
	.byte	'AreaIdType',0,37,204,1,16
	.word	854
	.byte	26
	.byte	'Os_PeripheralAddressType',0,37,212,1,22
	.word	1365
	.byte	26
	.byte	'TickType',0,37,221,1,22
	.word	1365
	.byte	26
	.byte	'Os_StopwatchTickType',0,37,225,1,22
	.word	1365
	.byte	26
	.byte	'Os_Lockable',0,37,234,1,18
	.word	1381
	.byte	26
	.byte	'CoreIdType',0,37,236,1,16
	.word	854
	.byte	26
	.byte	'SpinlockIdType',0,37,237,1,16
	.word	854
	.byte	27,37,239,1,9,4,28
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,28
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,26
	.byte	'TryToGetSpinlockType',0,37,239,1,74
	.word	15085
	.byte	27,37,174,2,9,4,28
	.byte	'APPLICATION_ACCESSIBLE',0,0,28
	.byte	'APPLICATION_RESTARTING',0,1,28
	.byte	'APPLICATION_TERMINATED',0,2,0,26
	.byte	'ApplicationStateType',0,37,174,2,92
	.word	15178
	.byte	31,1,1,32
	.word	137
	.byte	32
	.word	9699
	.byte	0,3
	.word	15290
	.byte	26
	.byte	'Os_FunctionEntryType',0,37,183,2,16
	.word	15304
	.byte	30
	.byte	'Os_MeterInfoType_s',0,37,193,2,16,48,12
	.byte	'elapsed',0
	.word	1365
	.byte	4,2,35,0,12
	.byte	'previous',0
	.word	1365
	.byte	4,2,35,4,12
	.byte	'max',0
	.word	1365
	.byte	4,2,35,8,12
	.byte	'cumulative',0
	.word	1365
	.byte	4,2,35,12,12
	.byte	'stackbase',0
	.word	14627
	.byte	8,2,35,16,12
	.byte	'stackusage',0
	.word	14627
	.byte	8,2,35,24,12
	.byte	'stackmax',0
	.word	14627
	.byte	8,2,35,32,12
	.byte	'stackbudget',0
	.word	14627
	.byte	8,2,35,40,0,26
	.byte	'Os_MeterInfoType',0,37,202,2,3
	.word	15339
	.byte	3
	.word	15339
	.byte	26
	.byte	'Os_MeterInfoRefType',0,37,203,2,50
	.word	15537
	.byte	26
	.byte	'EventMaskType',0,37,206,2,15
	.word	137
	.byte	26
	.byte	'Os_imaskType',0,37,211,2,16
	.word	1365
	.byte	30
	.byte	'Os_ISRDynType_s',0,37,213,2,16,48,12
	.byte	'meter',0
	.word	15339
	.byte	48,2,35,0,0,26
	.byte	'Os_ISRDynType',0,37,215,2,3
	.word	15616
	.byte	3
	.word	15616
	.byte	9
	.word	15677
	.byte	30
	.byte	'Os_ISRType_s',0,37,216,2,16,24,12
	.byte	'entry_function',0
	.word	14720
	.byte	4,2,35,0,12
	.byte	'dynamic',0
	.word	15682
	.byte	4,2,35,4,12
	.byte	'imask',0
	.word	1365
	.byte	4,2,35,8,12
	.byte	'stackbudget',0
	.word	14627
	.byte	8,2,35,12,12
	.byte	'access',0
	.word	137
	.byte	1,2,35,20,12
	.byte	'application',0
	.word	137
	.byte	1,2,35,21,0,26
	.byte	'Os_ISRType',0,37,223,2,3
	.word	15687
	.byte	3
	.word	14712
	.byte	9
	.word	15687
	.byte	3
	.word	15846
	.byte	26
	.byte	'ISRType',0,37,224,2,46
	.word	15851
	.byte	26
	.byte	'Os_bitmask',0,37,239,2,22
	.word	1365
	.byte	26
	.byte	'Os_pset0Type',0,37,240,2,20
	.word	1365
	.byte	26
	.byte	'Os_pset1Type',0,37,241,2,20
	.word	1365
	.byte	26
	.byte	'Os_pset2Type',0,37,242,2,20
	.word	1365
	.byte	13,37,243,2,9,4,12
	.byte	'p0',0
	.word	1365
	.byte	4,2,35,0,12
	.byte	'p1',0
	.word	1365
	.byte	4,2,35,0,12
	.byte	'p2',0
	.word	1365
	.byte	4,2,35,0,0,26
	.byte	'Os_psetType',0,37,247,2,3
	.word	15959
	.byte	13,37,249,2,9,4,12
	.byte	't0',0
	.word	1365
	.byte	4,2,35,0,12
	.byte	't1',0
	.word	1365
	.byte	4,2,35,0,12
	.byte	't2',0
	.word	1365
	.byte	4,2,35,0,0,26
	.byte	'Os_tpmaskType',0,37,253,2,3
	.word	16023
	.byte	26
	.byte	'Os_ActivationCountType',0,37,254,2,23
	.word	137
	.byte	30
	.byte	'Os_TaskDynType_s',0,37,128,3,16,120,12
	.byte	'terminate_jump_buf',0
	.word	14576
	.byte	68,2,35,0,12
	.byte	'meter',0
	.word	15339
	.byte	48,2,35,68,12
	.byte	'activation_count',0
	.word	137
	.byte	1,2,35,116,0,26
	.byte	'Os_TaskDynType',0,37,132,3,3
	.word	16121
	.byte	14,68
	.word	14545
	.byte	15,0,0,3
	.word	16121
	.byte	9
	.word	16247
	.byte	30
	.byte	'Os_TaskType_s',0,37,134,3,16,40,12
	.byte	'dynamic',0
	.word	16252
	.byte	4,2,35,0,12
	.byte	'entry_function',0
	.word	14720
	.byte	4,2,35,4,12
	.byte	'pset',0
	.word	15959
	.byte	4,2,35,8,12
	.byte	'base_tpmask',0
	.word	16023
	.byte	4,2,35,12,12
	.byte	'tpmask',0
	.word	16023
	.byte	4,2,35,16,12
	.byte	'core_id',0
	.word	854
	.byte	2,2,35,20,12
	.byte	'index',0
	.word	1365
	.byte	4,2,35,24,12
	.byte	'stackbudget',0
	.word	14627
	.byte	8,2,35,28,12
	.byte	'activation_count',0
	.word	137
	.byte	1,2,35,36,12
	.byte	'access',0
	.word	137
	.byte	1,2,35,37,12
	.byte	'application',0
	.word	137
	.byte	1,2,35,38,0,26
	.byte	'Os_TaskType',0,37,146,3,3
	.word	16257
	.byte	9
	.word	16257
	.byte	3
	.word	16507
	.byte	26
	.byte	'TaskType',0,37,147,3,47
	.word	16512
	.byte	33
	.byte	'Os_TaskStateType',0,37,155,3,6,4,28
	.byte	'SUSPENDED',0,0,28
	.byte	'READY',0,1,28
	.byte	'WAITING',0,2,28
	.byte	'RUNNING',0,3,0,26
	.byte	'TaskStateType',0,37,156,3,31
	.word	16535
	.byte	13,37,167,3,3,4,12
	.byte	'tpmask',0
	.word	16023
	.byte	4,2,35,0,0,30
	.byte	'Os_ResourceDynType_s',0,37,166,3,16,4,12
	.byte	'saved_priority',0
	.word	16622
	.byte	4,2,35,0,0,26
	.byte	'Os_ResourceDynType',0,37,170,3,3
	.word	16645
	.byte	3
	.word	16645
	.byte	9
	.word	16725
	.byte	30
	.byte	'Os_ResourceType_s',0,37,171,3,16,12,12
	.byte	'dynamic',0
	.word	16730
	.byte	4,2,35,0,12
	.byte	'tpmask',0
	.word	16023
	.byte	4,2,35,4,12
	.byte	'access',0
	.word	137
	.byte	1,2,35,8,0,26
	.byte	'Os_ResourceType',0,37,175,3,3
	.word	16735
	.byte	11,37,181,3,9,12,12
	.byte	'maxallowedvalue',0
	.word	1365
	.byte	4,2,35,0,12
	.byte	'ticksperbase',0
	.word	1365
	.byte	4,2,35,4,12
	.byte	'mincycle',0
	.word	1365
	.byte	4,2,35,8,0,26
	.byte	'AlarmBaseType',0,37,185,3,3
	.word	16834
	.byte	11,37,206,3,9,8,12
	.byte	'Running',0
	.word	137
	.byte	1,2,35,0,12
	.byte	'Pending',0
	.word	137
	.byte	1,2,35,1,12
	.byte	'Delay',0
	.word	1365
	.byte	4,2,35,4,0,26
	.byte	'Os_CounterStatusType',0,37,210,3,3
	.word	16929
	.byte	34
	.word	137
	.byte	1,1,3
	.word	17015
	.byte	26
	.byte	'Os_CounterIncrAdvType',0,37,217,3,22
	.word	17022
	.byte	30
	.byte	's_swd',0,37,222,3,12,4,12
	.byte	'count',0
	.word	1365
	.byte	4,2,35,0,0,13,37,221,3,3,4,12
	.byte	'sw',0
	.word	17058
	.byte	4,2,35,0,0,30
	.byte	'Os_CounterDynType_s',0,37,220,3,16,4,12
	.byte	'type_dependent',0
	.word	17086
	.byte	4,2,35,0,0,26
	.byte	'Os_CounterDynType',0,37,226,3,3
	.word	17105
	.byte	3
	.word	17105
	.byte	9
	.word	17183
	.byte	30
	.byte	'Os_CounterType_s',0,37,227,3,16,28,12
	.byte	'dynamic',0
	.word	17188
	.byte	4,2,35,0,12
	.byte	'advincr',0
	.word	17027
	.byte	4,2,35,4,12
	.byte	'base',0
	.word	16834
	.byte	12,2,35,8,12
	.byte	'core',0
	.word	9699
	.byte	4,2,35,20,12
	.byte	'access',0
	.word	137
	.byte	1,2,35,24,12
	.byte	'application',0
	.word	137
	.byte	1,2,35,25,0,26
	.byte	'Os_CounterType',0,37,234,3,3
	.word	17193
	.byte	3
	.word	17015
	.byte	9
	.word	17193
	.byte	3
	.word	17345
	.byte	26
	.byte	'CounterType',0,37,235,3,52
	.word	17350
	.byte	33
	.byte	'Os_ScheduleTableStatusType',0,37,240,3,6,4,28
	.byte	'SCHEDULETABLE_STOPPED',0,0,28
	.byte	'SCHEDULETABLE_NEXT',0,1,28
	.byte	'SCHEDULETABLE_WAITING',0,2,28
	.byte	'SCHEDULETABLE_RUNNING',0,3,28
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,26
	.byte	'ScheduleTableStatusType',0,37,241,3,41
	.word	17376
	.byte	9
	.word	.L623-.L260
	.byte	3
	.word	17576
	.byte	26
	.byte	'ScheduleTableType',0,37,128,4,58
	.word	17581
	.byte	30
	.byte	'Os_ScheduleTableDynType_s',0,37,130,4,16,16,12
	.byte	'match',0
	.word	1365
	.byte	4,2,35,0,12
	.byte	'next',0
	.word	17586
	.byte	4,2,35,4,12
	.byte	'state',0
	.word	17376
	.byte	4,2,35,8,12
	.byte	'config',0
	.word	854
	.byte	2,2,35,12,0,3
	.word	17613
	.byte	9
	.word	17706
.L623:
	.byte	30
	.byte	'Os_ScheduleTableType_s',0,37,247,3,16,16,12
	.byte	'dynamic',0
	.word	17711
	.byte	4,2,35,0,12
	.byte	'counter',0
	.word	17355
	.byte	4,2,35,4,12
	.byte	'repeat',0
	.word	137
	.byte	1,2,35,8,12
	.byte	'config',0
	.word	854
	.byte	2,2,35,10,12
	.byte	'initial',0
	.word	137
	.byte	1,2,35,12,12
	.byte	'access',0
	.word	137
	.byte	1,2,35,13,12
	.byte	'application',0
	.word	137
	.byte	1,2,35,14,0,26
	.byte	'Os_ScheduleTableType',0,37,255,3,3
	.word	17716
	.byte	9
	.word	17716
	.byte	3
	.word	17896
	.byte	9
	.word	17193
	.byte	3
	.word	17906
	.byte	10
	.word	15020
	.byte	10
	.word	15959
	.byte	10
	.word	15856
	.byte	10
	.word	16517
	.byte	10
	.word	16023
	.byte	10
	.word	137
	.byte	10
	.word	16517
	.byte	30
	.byte	'Os_ControlledCoreType_s',0,37,251,6,16,112,12
	.byte	'TrapInfo',0
	.word	14456
	.byte	8,2,35,0,12
	.byte	'lock_taskaccess',0
	.word	17916
	.byte	4,2,35,8,12
	.byte	'ReadyTasks',0
	.word	17921
	.byte	4,2,35,12,12
	.byte	'RunningISR',0
	.word	17926
	.byte	4,2,35,16,12
	.byte	'RunningTask',0
	.word	17931
	.byte	4,2,35,20,12
	.byte	'RunningTPMask',0
	.word	17936
	.byte	4,2,35,24,12
	.byte	'CurrentMeteredObject',0
	.word	15542
	.byte	4,2,35,28,12
	.byte	'IdleMeter',0
	.word	15339
	.byte	48,2,35,32,12
	.byte	'AppAccess',0
	.word	137
	.byte	1,2,35,80,12
	.byte	'AppOverride',0
	.word	17941
	.byte	1,2,35,81,12
	.byte	'GetStackValueAdjust',0
	.word	14627
	.byte	8,2,35,84,12
	.byte	'InErrorHook',0
	.word	137
	.byte	1,2,35,92,12
	.byte	'ChainTaskRef',0
	.word	17946
	.byte	4,2,35,96,12
	.byte	'GetStackUsageAdjust',0
	.word	14627
	.byte	8,2,35,100,12
	.byte	'InProtectionHook',0
	.word	137
	.byte	1,2,35,108,12
	.byte	'CoreIsActive',0
	.word	137
	.byte	1,2,35,109,12
	.byte	'InShutdownHook',0
	.word	137
	.byte	1,2,35,110,0,26
	.byte	'Os_ControlledCoreType',0,37,141,7,3
	.word	17951
	.byte	3
	.word	1365
	.byte	9
	.word	15687
	.byte	3
	.word	18407
	.byte	9
	.word	16257
	.byte	3
	.word	18417
	.byte	3
	.word	15339
	.byte	30
	.byte	'Os_AnyCoreType_s',0,37,151,7,16,96,12
	.byte	'DisableAllImask',0
	.word	1365
	.byte	4,2,35,0,12
	.byte	'SuspendAllImask',0
	.word	1365
	.byte	4,2,35,4,12
	.byte	'SuspendOSImask',0
	.word	1365
	.byte	4,2,35,8,12
	.byte	'DisableAllCount',0
	.word	1365
	.byte	4,2,35,12,12
	.byte	'SuspendAllCount',0
	.word	1365
	.byte	4,2,35,16,12
	.byte	'SuspendOSCount',0
	.word	1365
	.byte	4,2,35,20,12
	.byte	'RestartJumpBuf',0
	.word	14576
	.byte	68,2,35,24,12
	.byte	'Restartable',0
	.word	137
	.byte	1,2,35,92,0,26
	.byte	'Os_AnyCoreType',0,37,160,7,3
	.word	18432
	.byte	26
	.byte	'Can_TxObjPriorityClassType',0,38,219,3,16
	.word	1365
	.byte	30
	.byte	'Can_TxHwObjectConfigType',0,38,231,3,16,8,12
	.byte	'MsgObjId',0
	.word	137
	.byte	1,2,35,0,12
	.byte	'HwControllerId',0
	.word	137
	.byte	1,2,35,1,12
	.byte	'TxObjPriorityClass',0
	.word	1365
	.byte	4,2,35,4,0,26
	.byte	'Can_TxHwObjectConfigType',0,38,252,3,3
	.word	18709
	.byte	30
	.byte	'Can_RxHwObjectConfigType',0,38,129,4,16,12,12
	.byte	'MaskRef',0
	.word	1365
	.byte	4,2,35,0,12
	.byte	'MsgId',0
	.word	1365
	.byte	4,2,35,4,12
	.byte	'MsgObjId',0
	.word	137
	.byte	1,2,35,8,12
	.byte	'HwControllerId',0
	.word	137
	.byte	1,2,35,9,0,26
	.byte	'Can_RxHwObjectConfigType',0,38,147,4,3
	.word	18845
	.byte	14,4
	.word	137
	.byte	15,3,0,30
	.byte	'Can_ControllerMOMapConfigType',0,38,181,4,16,4,12
	.byte	'ControllerMOMap',0
	.word	18985
	.byte	4,2,35,0,0,26
	.byte	'Can_ControllerMOMapConfigType',0,38,184,4,3
	.word	18994
	.byte	30
	.byte	'Can_NPCRValueType',0,38,188,4,16,2,12
	.byte	'Can_NPCRValue',0
	.word	854
	.byte	2,2,35,0,0,26
	.byte	'Can_NPCRValueType',0,38,191,4,3
	.word	19095
	.byte	30
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,38,194,4,16,8,12
	.byte	'CanControllerBaudrate',0
	.word	1365
	.byte	4,2,35,0,12
	.byte	'CanControllerBaudrateCfg',0
	.word	854
	.byte	2,2,35,4,0,26
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,38,198,4,3
	.word	19170
	.byte	9
	.word	19170
	.byte	3
	.word	19335
	.byte	30
	.byte	'Can_BaudrateConfigPtrType',0,38,201,4,16,4,12
	.byte	'Can_kBaudrateConfigPtr',0
	.word	19340
	.byte	4,2,35,0,0,26
	.byte	'Can_BaudrateConfigPtrType',0,38,204,4,3
	.word	19345
	.byte	30
	.byte	'Can_EventHandlingType',0,38,226,4,16,4,12
	.byte	'CanEventType',0
	.word	18985
	.byte	4,2,35,0,0,26
	.byte	'Can_EventHandlingType',0,38,229,4,3
	.word	19445
	.byte	26
	.byte	'Rte_TransformerErrorCode',0,39,130,1,15
	.word	137
	.byte	26
	.byte	'Rte_TransformerClass',0,39,131,1,15
	.word	137
	.byte	11,39,168,1,9,12,12
	.byte	'in',0
	.word	9699
	.byte	4,2,35,0,12
	.byte	'out',0
	.word	9699
	.byte	4,2,35,4,12
	.byte	'used',0
	.word	854
	.byte	2,2,35,8,12
	.byte	'lost_data',0
	.word	137
	.byte	1,2,35,10,0,26
	.byte	'Rte_QDynType',0,39,173,1,3
	.word	19591
	.byte	27,39,175,1,9,4,28
	.byte	'RTE_DRA',0,0,28
	.byte	'RTE_WOWP',0,1,28
	.byte	'RTE_TASK',0,2,28
	.byte	'RTE_ARE',0,3,28
	.byte	'RTE_EV',0,4,28
	.byte	'RTE_MSI',0,5,0,26
	.byte	'Rte_NotificationType',0,39,182,1,3
	.word	19678
	.byte	14,128,8
	.word	137
	.byte	15,255,7,0,26
	.byte	'Impl_NVM_DstPtrType_1024',0,40,50,15
	.word	19776
	.byte	26
	.byte	'CanIf_u32_impl',0,40,69,16
	.word	1365
	.byte	26
	.byte	'CanIf_u16_impl',0,40,71,16
	.word	854
	.byte	26
	.byte	'CanIf_u8_impl',0,40,73,15
	.word	137
	.byte	26
	.byte	'CanIf_ControllerModeType_Enum_impl',0,40,88,15
	.word	137
	.byte	26
	.byte	'CanIf_PduModeType_Enum_impl',0,40,90,15
	.word	137
	.byte	11,40,92,9,2,12
	.byte	'DeviceMode',0
	.word	137
	.byte	1,2,35,0,12
	.byte	'ChannelMode',0
	.word	137
	.byte	1,2,35,1,0,26
	.byte	'CanIf_ControllerStateType_struct_impl',0,40,95,3
	.word	19967
	.byte	26
	.byte	'CanIf_NotifStatusType_Enum_impl',0,40,100,15
	.word	137
	.byte	26
	.byte	'CanSM_boolean_Impl',0,40,120,15
	.word	137
	.byte	26
	.byte	'CanSM_u8_Impl',0,40,123,15
	.word	137
	.byte	26
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,40,128,1,15
	.word	137
	.byte	26
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,40,132,1,15
	.word	137
	.byte	26
	.byte	'CanSM_u16_Impl',0,40,136,1,16
	.word	854
	.byte	26
	.byte	'CanSM_TimerStateType_Enum_impl',0,40,138,1,15
	.word	137
	.byte	11,40,140,1,9,4,12
	.byte	'cntTick_u16',0
	.word	854
	.byte	2,2,35,0,12
	.byte	'stTimer',0
	.word	137
	.byte	1,2,35,2,0,26
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,40,143,1,3
	.word	20308
	.byte	26
	.byte	'Com_impl_u16',0,40,154,1,16
	.word	854
	.byte	26
	.byte	'Com_impl_u8',0,40,157,1,15
	.word	137
	.byte	26
	.byte	'ComM_uint32_Impl',0,40,173,1,16
	.word	1365
	.byte	26
	.byte	'ComM_uint16_Impl',0,40,175,1,16
	.word	854
	.byte	26
	.byte	'ComM_uint8_Impl',0,40,177,1,15
	.word	137
	.byte	26
	.byte	'ComM_bool_Impl',0,40,179,1,15
	.word	137
	.byte	11,40,181,1,9,24,12
	.byte	'ChannelState_e',0
	.word	1365
	.byte	4,2,35,0,12
	.byte	'LightTimeoutCtr_u32',0
	.word	1365
	.byte	4,2,35,4,12
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	854
	.byte	2,2,35,8,12
	.byte	'ChannelMode_u8',0
	.word	137
	.byte	1,2,35,10,12
	.byte	'BusSmMode_u8',0
	.word	137
	.byte	1,2,35,11,12
	.byte	'UserRequestCtr_u8',0
	.word	137
	.byte	1,2,35,12,12
	.byte	'PassiveRequestState_u8',0
	.word	137
	.byte	1,2,35,13,12
	.byte	'PncRequestCtr_u8',0
	.word	137
	.byte	1,2,35,14,12
	.byte	'InhibitionReqStatus_u8',0
	.word	137
	.byte	1,2,35,15,12
	.byte	'NmNetworkRequestStatus_b',0
	.word	137
	.byte	1,2,35,16,12
	.byte	'DiagnosticRequestState_b',0
	.word	137
	.byte	1,2,35,17,12
	.byte	'CommunicationAllowed_b',0
	.word	137
	.byte	1,2,35,18,12
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	137
	.byte	1,2,35,19,12
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	137
	.byte	1,2,35,20,12
	.byte	'NmNetworkModeStatus_b',0
	.word	137
	.byte	1,2,35,21,0,26
	.byte	'ComM_ChannelStruct_Impl',0,40,197,1,3
	.word	20540
	.byte	11,40,206,1,9,10,12
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	854
	.byte	2,2,35,0,12
	.byte	'LimitToNoComCtr_u16',0
	.word	854
	.byte	2,2,35,2,12
	.byte	'RequestedUserMode_t',0
	.word	137
	.byte	1,2,35,4,12
	.byte	'IndicatedUserMode_t',0
	.word	137
	.byte	1,2,35,5,12
	.byte	'numChannelsInFullCom_u8',0
	.word	137
	.byte	1,2,35,6,12
	.byte	'numChannelsInSilentCom_u8',0
	.word	137
	.byte	1,2,35,7,12
	.byte	'numChannelsInNoCom_u8',0
	.word	137
	.byte	1,2,35,8,0,26
	.byte	'ComM_UserStruct_Impl',0,40,214,1,3
	.word	21044
	.byte	26
	.byte	'Dcm_IOOperationResponseType',0,40,252,1,15
	.word	137
	.byte	26
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	40,138,2,15
	.word	137
	.byte	26
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,40,146,2,15
	.word	137
	.byte	26
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,40,150,2,15
	.word	137
	.byte	26
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,40,154,2,15
	.word	137
	.byte	26
	.byte	'Dem_DTCFormatType',0,40,160,2,15
	.word	137
	.byte	26
	.byte	'Dem_DTCOriginType',0,40,162,2,15
	.word	137
	.byte	26
	.byte	'Dem_EventIdType',0,40,168,2,16
	.word	854
	.byte	26
	.byte	'Dem_EventStatusType',0,40,170,2,15
	.word	137
	.byte	26
	.byte	'Dem_InitMonitorReasonType',0,40,176,2,15
	.word	137
	.byte	26
	.byte	'Dem_OperationCycleIdType',0,40,179,2,15
	.word	137
	.byte	26
	.byte	'Dem_UdsStatusByteType',0,40,185,2,15
	.word	137
	.byte	26
	.byte	'NvM_BlockIdType',0,40,215,2,16
	.word	854
	.byte	26
	.byte	'NvM_RequestResultType',0,40,225,2,15
	.word	137
	.byte	26
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,40,243,3,34
	.word	19787
	.byte	14,128,8
	.word	137
	.byte	15,255,7,0,26
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,40,246,3,34
	.word	19787
	.byte	26
	.byte	'Dem_DTCGroupIdType',0,41,49,15
	.word	137
	.byte	26
	.byte	'Dem_DtcIdType',0,41,50,16
	.word	854
	.byte	26
	.byte	'Dem_ClientIdType',0,41,53,15
	.word	137
	.byte	26
	.byte	'Dem_DtcCodeType',0,41,55,16
	.word	1365
	.byte	26
	.byte	'Dem_boolean_least',0,41,60,17
	.word	137
	.byte	26
	.byte	'Dem_EventCategoryType',0,41,62,15
	.word	137
	.byte	26
	.byte	'Dem_DTCSeverityType',0,41,217,1,15
	.word	137
	.byte	26
	.byte	'Dem_EraseAllStatusType',0,41,240,2,15
	.word	137
	.byte	26
	.byte	'Dem_DebugDataType',0,41,131,3,16
	.word	1365
	.byte	26
	.byte	'Dem_DTCKindType',0,41,145,3,16
	.word	137
	.byte	26
	.byte	'Dem_TriggerType',0,41,167,3,15
	.word	137
	.byte	26
	.byte	'Dem_EnCoList',0,42,31,15
	.word	137
	.byte	26
	.byte	'Dem_OperationCycleList',0,43,23,15
	.word	137
	.byte	26
	.byte	'Dem_StoCoList',0,44,32,15
	.word	137
	.byte	26
	.byte	'rba_BswSrv_uint64',0,4,66,28
	.word	13852
	.byte	27,45,31,9,4,28
	.byte	'MEMIF_JOB_OK',0,0,28
	.byte	'MEMIF_JOB_FAILED',0,1,28
	.byte	'MEMIF_JOB_PENDING',0,2,28
	.byte	'MEMIF_JOB_CANCELED',0,3,28
	.byte	'MEMIF_BLOCK_INCONSISTENT',0,4,28
	.byte	'MEMIF_BLOCK_INVALID',0,5,0,26
	.byte	'MemIf_JobResultType',0,45,39,2
	.word	22518
	.byte	27,46,49,9,4,28
	.byte	'NVM_PRV_ACTIVITY_NOT_INIT',0,0,28
	.byte	'NVM_PRV_ACTIVITY_IDLE',0,1,28
	.byte	'NVM_PRV_ACTIVITY_ARBITRATE',0,2,28
	.byte	'NVM_PRV_ACTIVITY_JOB_START',0,3,28
	.byte	'NVM_PRV_ACTIVITY_POLL_RESULT',0,4,28
	.byte	'NVM_PRV_ACTIVITY_JOB_COMPLETE',0,5,28
	.byte	'NVM_PRV_ACTIVITY_RESULT_EVAL',0,6,0,26
	.byte	'NvM_Prv_Activities_ten',0,46,58,3
	.word	22676
	.byte	27,46,104,9,4,28
	.byte	'NvM_Prv_idJob_Idle_e',0,0,28
	.byte	'NvM_Prv_idJob_Read_e',0,1,28
	.byte	'NvM_Prv_idJob_Write_e',0,2,28
	.byte	'NvM_Prv_idJob_Erase_e',0,3,28
	.byte	'NvM_Prv_idJob_Restore_e',0,4,28
	.byte	'NvM_Prv_idJob_Maintain_e',0,5,28
	.byte	'NvM_Prv_idJob_Validate_e',0,6,28
	.byte	'NvM_Prv_idJob_Invalidate_e',0,7,28
	.byte	'NvM_Prv_idJob_ReadIdConfigForReadAll_e',0,8,28
	.byte	'NvM_Prv_idJob_InvalidateForFirstInitAll_e',0,9,28
	.byte	'NvM_Prv_idJob_RestoreForImplicitRecovery_e',0,10,28
	.byte	'NvM_Prv_idJob_InvalidateForRemoveNonResistant_e',0,11,28
	.byte	'NvM_Prv_idJob_Invalid_e',0,12,28
	.byte	'NvM_Prv_idJob_Count_e',0,13,0,26
	.byte	'NvM_Prv_idJob_ten',0,46,115,3
	.word	22917
	.byte	26
	.byte	'NvM_Prv_ServiceBit_tuo',0,46,168,1,16
	.word	854
	.byte	26
	.byte	'NvM_Prv_idService_tuo',0,46,173,1,15
	.word	137
	.byte	26
	.byte	'NvM_Prv_idQueue_tuo',0,46,206,1,15
	.word	137
	.byte	11,46,210,1,9,12,12
	.byte	'idService_uo',0
	.word	137
	.byte	1,2,35,0,12
	.byte	'idBlock_uo',0
	.word	854
	.byte	2,2,35,2,12
	.byte	'ServiceBit_uo',0
	.word	854
	.byte	2,2,35,4,12
	.byte	'BlockData_pv',0
	.word	9699
	.byte	4,2,35,8,0,26
	.byte	'NvM_Prv_QueueEntry_tst',0,46,225,1,3
	.word	23474
	.byte	11,46,227,1,9,20,12
	.byte	'idJob_en',0
	.word	22917
	.byte	4,2,35,0,12
	.byte	'idBlock_uo',0
	.word	854
	.byte	2,2,35,4,12
	.byte	'RamBlock_pu8',0
	.word	154
	.byte	4,2,35,8,12
	.byte	'idxDataset_u8',0
	.word	137
	.byte	1,2,35,12,12
	.byte	'Result_en',0
	.word	22518
	.byte	4,2,35,16,0,26
	.byte	'NvM_Prv_JobData_tst',0,46,240,1,3
	.word	23600
	.byte	26
	.byte	'Dem_EvtStateType',0,47,151,1,15
	.word	137
	.byte	26
	.byte	'Dem_EvMemOccurrenceCounterType',0,20,90,21
	.word	137
	.byte	26
	.byte	'Dem_EvMemAgingCounterType',0,20,99,21
	.word	137
	.byte	26
	.byte	'Dem_EvMemHdrType',0,20,141,1,4
	.word	5779
	.byte	26
	.byte	'Dem_EvMemEventMemoryType',0,20,213,1,4
	.word	5809
	.byte	26
	.byte	'Dem_GenericNvDataType',0,26,24,4
	.word	8435
	.byte	35
	.byte	'Dem_GenericNvData',0,26,28,30
	.word	8435
	.byte	1,1,26
	.byte	'Dem_NvmBlockIdType',0,25,14,34
	.word	137
	.byte	26
	.byte	'Dem_NvMStorageBufferData',0,25,37,3
	.word	8554
	.byte	31,1,1,32
	.word	9699
	.byte	32
	.word	9709
	.byte	32
	.word	1365
	.byte	0,3
	.word	24015
	.byte	26
	.byte	'Dem_NvmCopyFunction',0,25,40,16
	.word	24034
	.byte	26
	.byte	'Dem_NvMStorageBufferType',0,25,48,3
	.word	8602
	.byte	11,25,51,9,12,12
	.byte	'ramAdress',0
	.word	9699
	.byte	4,2,35,0,12
	.byte	'nvmBlockSize',0
	.word	1365
	.byte	4,2,35,4,12
	.byte	'copyFunctionPointerIndex',0
	.word	137
	.byte	1,2,35,8,0,26
	.byte	'Dem_NvmBlockIdExtendedType',0,25,56,3
	.word	24100
	.byte	26
	.byte	'Dem_NvmBlockStatusType',0,25,59,15
	.word	137
	.byte	14,5
	.word	137
	.byte	15,4,0,26
	.byte	'Dem_NvMBlockStatusDoubleBufferType',0,25,70,32
	.word	24247
	.byte	26
	.byte	'Dem_NvmResultType',0,25,78,31
	.word	137
.L576:
	.byte	14,35
	.word	24256
	.byte	15,6,0,14,5
	.word	137
	.byte	15,4,0
.L577:
	.byte	14,56
	.word	8602
	.byte	15,1,0,14,14
	.word	854
	.byte	15,6,0
.L578:
	.byte	9
	.word	24352
	.byte	14,72
	.word	24100
	.byte	15,5,0
.L579:
	.byte	9
	.word	24366
	.byte	14,4
	.word	24039
	.byte	15,0,0
.L580:
	.byte	9
	.word	24380
	.byte	3
	.word	24015
	.byte	26
	.byte	'Dem_EventIdIterator',0,10,27,22
	.word	4954
	.byte	26
	.byte	'Dem_DtcIdIterator',0,10,197,1,22
	.word	4954
	.byte	26
	.byte	'Dem_DtcGroupIdIterator',0,10,230,1,21
	.word	4954
	.byte	9
	.word	854
	.byte	3
	.word	24486
	.byte	11,10,171,2,9,8,12
	.byte	'it',0
	.word	24491
	.byte	4,2,35,0,12
	.byte	'end',0
	.word	24491
	.byte	4,2,35,4,0,26
	.byte	'Dem_EventIdListIterator',0,10,174,2,3
	.word	24496
	.byte	11,10,213,2,9,4,12
	.byte	'it',0
	.word	854
	.byte	2,2,35,0,12
	.byte	'end',0
	.word	854
	.byte	2,2,35,2,0,26
	.byte	'Dem_DtcIdListIterator',0,10,216,2,3
	.word	24561
	.byte	3
	.word	137
	.byte	36
	.word	137
	.byte	1,1,32
	.word	24624
	.byte	0,3
	.word	24629
	.byte	26
	.byte	'Dem_EvtClearAllowedFncType',0,13,12,26
	.word	24642
	.byte	36
	.word	137
	.byte	1,1,32
	.word	137
	.byte	0,3
	.word	24682
	.byte	26
	.byte	'Dem_InitMForEAllowedFncType',0,14,38,27
	.word	24695
	.byte	36
	.word	4954
	.byte	1,1,32
	.word	854
	.byte	32
	.word	24624
	.byte	32
	.word	9709
	.byte	32
	.word	854
	.byte	0,3
	.word	24736
	.byte	26
	.byte	'Dem_DebFilter',0,48,12,23
	.word	24764
	.byte	2
	.byte	'long int',0,4,5,3
	.word	24791
	.byte	31,1,1,32
	.word	9709
	.byte	32
	.word	854
	.byte	32
	.word	24803
	.byte	32
	.word	24803
	.byte	0,3
	.word	24808
	.byte	26
	.byte	'Dem_DebGetLimits',0,48,13,23
	.word	24832
	.byte	31,1,1,32
	.word	854
	.byte	32
	.word	9709
	.byte	32
	.word	854
	.byte	0,3
	.word	24862
	.byte	26
	.byte	'Dem_DebCyclic',0,48,14,16
	.word	24881
	.byte	26
	.byte	'Dem_DebouncedActionType',0,48,35,21
	.word	4954
	.byte	13,49,37,9,4,12
	.byte	'EnforceAlignment',0
	.word	1365
	.byte	4,2,35,0,12
	.byte	'Buffer',0
	.word	18985
	.byte	4,2,35,0,0,26
	.byte	'Dem_EvBuffEnvDataAlignedType',0,49,47,3
	.word	24940
	.byte	11,49,49,9,16,12
	.byte	'envData',0
	.word	24940
	.byte	4,2,35,0,12
	.byte	'eventType',0
	.word	137
	.byte	1,2,35,4,12
	.byte	'eventId',0
	.word	854
	.byte	2,2,35,6,12
	.byte	'debug0',0
	.word	1365
	.byte	4,2,35,8,12
	.byte	'debug1',0
	.word	1365
	.byte	4,2,35,12,0,26
	.byte	'Dem_EvBuffEvent',0,49,75,2
	.word	25025
	.byte	14,100
	.word	5809
	.byte	15,4,0,35
	.byte	'Dem_EvMemEventMemory',0,19,87,1
	.word	25140
	.byte	1,1,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L261:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32
	.byte	13,58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,11,1,0,0,8,46
	.byte	1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,38,0,73,19,0,0,10,53,0,73,19,0,0,11,19,1,58,15,59
	.byte	15,57,15,11,15,0,0,12,13,0,3,8,73,19,11,15,56,9,0,0,13,23,1,58,15,59,15,57,15,11,15,0,0,14,1,1,11,15,73
	.byte	19,0,0,15,33,0,47,15,0,0,16,46,1,49,19,0,0,17,5,0,49,19,0,0,18,29,1,49,19,0,0,19,11,0,49,19,0,0,20,46
	.byte	1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,21,59,0,3,8,0,0,22,11,1,49,19,0,0,23,46,0,3
	.byte	8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,24,46,0,3,8,58,15,59,15,57,15,54,15,63,12,60,12,0,0,25
	.byte	21,0,54,15,0,0,26,22,0,3,8,58,15,59,15,57,15,73,19,0,0,27,4,1,58,15,59,15,57,15,11,15,0,0,28,40,0,3,8
	.byte	28,13,0,0,29,21,0,54,15,39,12,0,0,30,19,1,3,8,58,15,59,15,57,15,11,15,0,0,31,21,1,54,15,39,12,0,0,32,5
	.byte	0,73,19,0,0,33,4,1,3,8,58,15,59,15,57,15,11,15,0,0,34,21,0,73,19,54,15,39,12,0,0,35,52,0,3,8,58,15,59
	.byte	15,57,15,73,19,63,12,60,12,0,0,36,21,1,73,19,54,15,39,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L262:
	.word	.L625-.L624
.L624:
	.half	3
	.word	.L627-.L626
.L626:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits32.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_MemUtils.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_Lib.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_BitArray.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_ISO14229Byte.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\enco\\Dem_EnableCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_ByteOrderUtils.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvTrigger.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\deb\\Dem_Deb.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientBaseHandling.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientClearMachine.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemTypes.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemAging.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMem.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_GenericNvData.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Det\\api\\Det.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\NvM\\api\\NvM.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientHandlingTypes.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_NodeId.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\api\\Dem_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_EnableCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_OperationCycle.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_StorageCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\MemIf\\api\\MemIf_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\NvM\\api\\NvM_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\deb\\Dem_DebBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuffEvent.h',0,0,0,0,0
.L627:
.L625:
	.sdecl	'.debug_info',debug,cluster('Dem_NvMInit')
	.sect	'.debug_info'
.L263:
	.word	185
	.half	3
	.word	.L264
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L266,.L265
	.byte	2
	.word	.L259
	.byte	3
	.byte	'Dem_NvMInit',0,1,208,2,6,1,1,1
	.word	.L242,.L322,.L241
	.byte	4
	.word	.L242,.L322
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_NvMInit')
	.sect	'.debug_abbrev'
.L264:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_NvMInit')
	.sect	'.debug_line'
.L265:
	.word	.L629-.L628
.L628:
	.half	3
	.word	.L631-.L630
.L630:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.c',0,0,0,0,0
.L631:
	.byte	5,1,7,0,5,2
	.word	.L242
	.byte	3,218,2,1,7,9
	.half	.L267-.L242
	.byte	0,1,1
.L629:
	.sdecl	'.debug_ranges',debug,cluster('Dem_NvMInit')
	.sect	'.debug_ranges'
.L266:
	.word	-1,.L242,0,.L267-.L242,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_NvMMainFunction')
	.sect	'.debug_info'
.L268:
	.word	3813
	.half	3
	.word	.L269
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L271,.L270
	.byte	2
	.word	.L259
	.byte	3
	.byte	'Dem_NvMMainFunction',0,1,222,2,6,1,1,1
	.word	.L244,.L323,.L243
	.byte	4
	.word	.L244,.L323
	.byte	5
	.byte	'lastIndexPreviousMain',0,1,224,2,18
	.word	.L324
	.byte	5,3
	.word	_999001_lastIndexPreviousMain
	.byte	6
	.byte	'currentWriteLocation',0,1,225,2,11
	.word	.L324,.L325
	.byte	7
	.word	.L326,.L327,.L328
	.byte	8
	.word	.L329,.L327,.L328
	.byte	6
	.byte	'storageBufferId',0,1,152,1,11
	.word	.L324,.L330
	.byte	7
	.word	.L331,.L332,.L333
	.byte	9
	.word	.L334,.L335
	.byte	10
	.word	.L336,.L337
	.byte	6
	.byte	'result',0,2,56,27
	.word	.L324,.L339
	.byte	7
	.word	.L340,.L332,.L333
	.byte	9
	.word	.L341,.L342
	.byte	11
	.word	.L343,.L344
	.byte	0,7
	.word	.L340,.L338,.L5
	.byte	9
	.word	.L341,.L342
	.byte	0,0,0,7
	.word	.L331,.L338,.L7
	.byte	9
	.word	.L334,.L335
	.byte	0,7
	.word	.L345,.L346,.L4
	.byte	9
	.word	.L347,.L348
	.byte	12
	.word	.L349,.L346,.L4
	.byte	0,0,0,7
	.word	.L350,.L328,.L32
	.byte	8
	.word	.L351,.L328,.L32
	.byte	6
	.byte	'demNvMId',0,1,83,11
	.word	.L324,.L352
	.byte	7
	.word	.L353,.L354,.L355
	.byte	9
	.word	.L356,.L357
	.byte	9
	.word	.L358,.L359
	.byte	12
	.word	.L360,.L354,.L355
	.byte	0,7
	.word	.L353,.L361,.L362
	.byte	9
	.word	.L356,.L357
	.byte	9
	.word	.L358,.L359
	.byte	12
	.word	.L360,.L361,.L362
	.byte	0,7
	.word	.L353,.L363,.L364
	.byte	9
	.word	.L356,.L357
	.byte	9
	.word	.L358,.L359
	.byte	12
	.word	.L360,.L363,.L364
	.byte	0,7
	.word	.L353,.L365,.L366
	.byte	9
	.word	.L356,.L357
	.byte	9
	.word	.L358,.L359
	.byte	12
	.word	.L360,.L365,.L366
	.byte	0,7
	.word	.L367,.L368,.L31
	.byte	9
	.word	.L369,.L370
	.byte	9
	.word	.L371,.L372
	.byte	12
	.word	.L373,.L368,.L31
	.byte	0,0,0,7
	.word	.L374,.L375,.L102
	.byte	9
	.word	.L376,.L377
	.byte	8
	.word	.L378,.L375,.L102
	.byte	6
	.byte	'nvmResult',0,1,242,1,23
	.word	.L324,.L379
	.byte	6
	.byte	'returnValue',0,1,243,1,13
	.word	.L324,.L380
	.byte	7
	.word	.L331,.L381,.L35
	.byte	9
	.word	.L334,.L335
	.byte	8
	.word	.L336,.L381,.L35
	.byte	6
	.byte	'result',0,2,56,27
	.word	.L324,.L382
	.byte	7
	.word	.L340,.L381,.L33
	.byte	9
	.word	.L341,.L342
	.byte	12
	.word	.L343,.L381,.L33
	.byte	0,0,0,7
	.word	.L383,.L384,.L53
	.byte	9
	.word	.L385,.L386
	.byte	9
	.word	.L387,.L388
	.byte	12
	.word	.L389,.L384,.L53
	.byte	0,7
	.word	.L367,.L390,.L391
	.byte	9
	.word	.L369,.L370
	.byte	9
	.word	.L371,.L372
	.byte	12
	.word	.L373,.L390,.L391
	.byte	0,7
	.word	.L383,.L54,.L57
	.byte	9
	.word	.L385,.L386
	.byte	9
	.word	.L387,.L388
	.byte	12
	.word	.L389,.L54,.L57
	.byte	0,7
	.word	.L367,.L392,.L58
	.byte	9
	.word	.L369,.L370
	.byte	9
	.word	.L371,.L372
	.byte	12
	.word	.L373,.L392,.L58
	.byte	0,7
	.word	.L383,.L58,.L59
	.byte	9
	.word	.L385,.L386
	.byte	9
	.word	.L387,.L388
	.byte	12
	.word	.L389,.L58,.L59
	.byte	0,7
	.word	.L383,.L393,.L61
	.byte	9
	.word	.L385,.L386
	.byte	9
	.word	.L387,.L388
	.byte	12
	.word	.L389,.L393,.L61
	.byte	0,7
	.word	.L394,.L395,.L396
	.byte	9
	.word	.L397,.L398
	.byte	8
	.word	.L399,.L395,.L396
	.byte	6
	.byte	'returnValue',0,1,169,1,20
	.word	.L324,.L400
	.byte	6
	.byte	'demNvMStorageBuffer',0,1,170,1,31
	.word	.L401,.L402
	.byte	7
	.word	.L403,.L404,.L63
	.byte	9
	.word	.L405,.L406
	.byte	12
	.word	.L407,.L404,.L63
	.byte	0,7
	.word	.L408,.L65,.L70
	.byte	9
	.word	.L409,.L410
	.byte	8
	.word	.L411,.L65,.L70
	.byte	6
	.byte	'storageBufferId',0,1,120,11
	.word	.L324,.L412
	.byte	6
	.byte	'copyfctpIndex',0,1,121,11
	.word	.L324,.L413
	.byte	0,0,7
	.word	.L345,.L414,.L72
	.byte	9
	.word	.L347,.L348
	.byte	12
	.word	.L349,.L414,.L72
	.byte	0,0,0,7
	.word	.L353,.L396,.L415
	.byte	9
	.word	.L356,.L357
	.byte	9
	.word	.L358,.L359
	.byte	12
	.word	.L360,.L396,.L415
	.byte	0,7
	.word	.L367,.L416,.L417
	.byte	9
	.word	.L369,.L370
	.byte	9
	.word	.L371,.L372
	.byte	12
	.word	.L373,.L416,.L417
	.byte	0,7
	.word	.L367,.L418,.L419
	.byte	9
	.word	.L369,.L370
	.byte	9
	.word	.L371,.L372
	.byte	12
	.word	.L373,.L418,.L419
	.byte	0,7
	.word	.L367,.L420,.L421
	.byte	9
	.word	.L369,.L370
	.byte	9
	.word	.L371,.L372
	.byte	12
	.word	.L373,.L420,.L421
	.byte	0,7
	.word	.L367,.L422,.L423
	.byte	9
	.word	.L369,.L370
	.byte	9
	.word	.L371,.L372
	.byte	12
	.word	.L373,.L422,.L423
	.byte	0,7
	.word	.L383,.L62,.L79
	.byte	9
	.word	.L385,.L386
	.byte	9
	.word	.L387,.L388
	.byte	12
	.word	.L389,.L62,.L79
	.byte	0,7
	.word	.L353,.L424,.L425
	.byte	9
	.word	.L356,.L357
	.byte	9
	.word	.L358,.L359
	.byte	12
	.word	.L360,.L424,.L425
	.byte	0,7
	.word	.L367,.L426,.L427
	.byte	9
	.word	.L369,.L370
	.byte	9
	.word	.L371,.L372
	.byte	12
	.word	.L373,.L426,.L427
	.byte	0,7
	.word	.L383,.L80,.L84
	.byte	9
	.word	.L385,.L386
	.byte	9
	.word	.L387,.L388
	.byte	12
	.word	.L389,.L80,.L84
	.byte	0,7
	.word	.L394,.L428,.L429
	.byte	9
	.word	.L397,.L398
	.byte	8
	.word	.L399,.L428,.L429
	.byte	6
	.byte	'returnValue',0,1,169,1,20
	.word	.L324,.L430
	.byte	6
	.byte	'demNvMStorageBuffer',0,1,170,1,31
	.word	.L401,.L431
	.byte	7
	.word	.L403,.L432,.L86
	.byte	9
	.word	.L405,.L406
	.byte	12
	.word	.L407,.L432,.L86
	.byte	0,7
	.word	.L408,.L88,.L93
	.byte	9
	.word	.L409,.L410
	.byte	8
	.word	.L411,.L88,.L93
	.byte	6
	.byte	'storageBufferId',0,1,120,11
	.word	.L324,.L433
	.byte	6
	.byte	'copyfctpIndex',0,1,121,11
	.word	.L324,.L434
	.byte	0,0,7
	.word	.L345,.L435,.L95
	.byte	9
	.word	.L347,.L348
	.byte	12
	.word	.L349,.L435,.L95
	.byte	0,0,0,7
	.word	.L353,.L429,.L436
	.byte	9
	.word	.L356,.L357
	.byte	9
	.word	.L358,.L359
	.byte	12
	.word	.L360,.L429,.L436
	.byte	0,7
	.word	.L367,.L437,.L438
	.byte	9
	.word	.L369,.L370
	.byte	9
	.word	.L371,.L372
	.byte	12
	.word	.L373,.L437,.L438
	.byte	0,7
	.word	.L367,.L439,.L440
	.byte	9
	.word	.L369,.L370
	.byte	9
	.word	.L371,.L372
	.byte	12
	.word	.L373,.L439,.L440
	.byte	0,0,0,7
	.word	.L441,.L442,.L106
	.byte	9
	.word	.L443,.L444
	.byte	9
	.word	.L445,.L446
	.byte	12
	.word	.L447,.L442,.L106
	.byte	0,7
	.word	.L374,.L448,.L178
	.byte	9
	.word	.L376,.L377
	.byte	8
	.word	.L378,.L448,.L178
	.byte	6
	.byte	'nvmResult',0,1,242,1,23
	.word	.L324,.L449
	.byte	6
	.byte	'returnValue',0,1,243,1,13
	.word	.L324,.L450
	.byte	7
	.word	.L331,.L451,.L111
	.byte	9
	.word	.L334,.L335
	.byte	8
	.word	.L336,.L451,.L111
	.byte	6
	.byte	'result',0,2,56,27
	.word	.L324,.L452
	.byte	7
	.word	.L340,.L451,.L109
	.byte	9
	.word	.L341,.L342
	.byte	12
	.word	.L343,.L451,.L109
	.byte	0,0,0,7
	.word	.L383,.L453,.L129
	.byte	9
	.word	.L385,.L386
	.byte	9
	.word	.L387,.L388
	.byte	12
	.word	.L389,.L453,.L129
	.byte	0,7
	.word	.L367,.L454,.L455
	.byte	9
	.word	.L369,.L370
	.byte	9
	.word	.L371,.L372
	.byte	12
	.word	.L373,.L454,.L455
	.byte	0,7
	.word	.L383,.L130,.L133
	.byte	9
	.word	.L385,.L386
	.byte	9
	.word	.L387,.L388
	.byte	12
	.word	.L389,.L130,.L133
	.byte	0,7
	.word	.L367,.L456,.L134
	.byte	9
	.word	.L369,.L370
	.byte	9
	.word	.L371,.L372
	.byte	12
	.word	.L373,.L456,.L134
	.byte	0,7
	.word	.L383,.L134,.L135
	.byte	9
	.word	.L385,.L386
	.byte	9
	.word	.L387,.L388
	.byte	12
	.word	.L389,.L134,.L135
	.byte	0,7
	.word	.L383,.L457,.L137
	.byte	9
	.word	.L385,.L386
	.byte	9
	.word	.L387,.L388
	.byte	12
	.word	.L389,.L457,.L137
	.byte	0,7
	.word	.L394,.L458,.L459
	.byte	9
	.word	.L397,.L398
	.byte	8
	.word	.L399,.L458,.L459
	.byte	6
	.byte	'returnValue',0,1,169,1,20
	.word	.L324,.L460
	.byte	6
	.byte	'demNvMStorageBuffer',0,1,170,1,31
	.word	.L401,.L461
	.byte	7
	.word	.L403,.L462,.L139
	.byte	9
	.word	.L405,.L406
	.byte	12
	.word	.L407,.L462,.L139
	.byte	0,7
	.word	.L408,.L141,.L146
	.byte	9
	.word	.L409,.L410
	.byte	8
	.word	.L411,.L141,.L146
	.byte	6
	.byte	'storageBufferId',0,1,120,11
	.word	.L324,.L463
	.byte	6
	.byte	'copyfctpIndex',0,1,121,11
	.word	.L324,.L464
	.byte	0,0,7
	.word	.L345,.L465,.L148
	.byte	9
	.word	.L347,.L348
	.byte	12
	.word	.L349,.L465,.L148
	.byte	0,0,0,7
	.word	.L353,.L459,.L466
	.byte	9
	.word	.L356,.L357
	.byte	9
	.word	.L358,.L359
	.byte	12
	.word	.L360,.L459,.L466
	.byte	0,7
	.word	.L367,.L467,.L468
	.byte	9
	.word	.L369,.L370
	.byte	9
	.word	.L371,.L372
	.byte	12
	.word	.L373,.L467,.L468
	.byte	0,7
	.word	.L367,.L469,.L470
	.byte	9
	.word	.L369,.L370
	.byte	9
	.word	.L371,.L372
	.byte	12
	.word	.L373,.L469,.L470
	.byte	0,7
	.word	.L367,.L471,.L472
	.byte	9
	.word	.L369,.L370
	.byte	9
	.word	.L371,.L372
	.byte	12
	.word	.L373,.L471,.L472
	.byte	0,7
	.word	.L367,.L473,.L474
	.byte	9
	.word	.L369,.L370
	.byte	9
	.word	.L371,.L372
	.byte	12
	.word	.L373,.L473,.L474
	.byte	0,7
	.word	.L383,.L138,.L155
	.byte	9
	.word	.L385,.L386
	.byte	9
	.word	.L387,.L388
	.byte	12
	.word	.L389,.L138,.L155
	.byte	0,7
	.word	.L353,.L475,.L476
	.byte	9
	.word	.L356,.L357
	.byte	9
	.word	.L358,.L359
	.byte	12
	.word	.L360,.L475,.L476
	.byte	0,7
	.word	.L367,.L477,.L478
	.byte	9
	.word	.L369,.L370
	.byte	9
	.word	.L371,.L372
	.byte	12
	.word	.L373,.L477,.L478
	.byte	0,7
	.word	.L383,.L156,.L160
	.byte	9
	.word	.L385,.L386
	.byte	9
	.word	.L387,.L388
	.byte	12
	.word	.L389,.L156,.L160
	.byte	0,7
	.word	.L394,.L479,.L480
	.byte	9
	.word	.L397,.L398
	.byte	8
	.word	.L399,.L479,.L480
	.byte	6
	.byte	'returnValue',0,1,169,1,20
	.word	.L324,.L481
	.byte	6
	.byte	'demNvMStorageBuffer',0,1,170,1,31
	.word	.L401,.L482
	.byte	7
	.word	.L403,.L483,.L162
	.byte	9
	.word	.L405,.L406
	.byte	12
	.word	.L407,.L483,.L162
	.byte	0,7
	.word	.L408,.L164,.L169
	.byte	9
	.word	.L409,.L410
	.byte	8
	.word	.L411,.L164,.L169
	.byte	6
	.byte	'storageBufferId',0,1,120,11
	.word	.L324,.L484
	.byte	6
	.byte	'copyfctpIndex',0,1,121,11
	.word	.L324,.L485
	.byte	0,0,7
	.word	.L345,.L486,.L171
	.byte	9
	.word	.L347,.L348
	.byte	12
	.word	.L349,.L486,.L171
	.byte	0,0,0,7
	.word	.L353,.L480,.L487
	.byte	9
	.word	.L356,.L357
	.byte	9
	.word	.L358,.L359
	.byte	12
	.word	.L360,.L480,.L487
	.byte	0,7
	.word	.L367,.L488,.L489
	.byte	9
	.word	.L369,.L370
	.byte	9
	.word	.L371,.L372
	.byte	12
	.word	.L373,.L488,.L489
	.byte	0,7
	.word	.L367,.L490,.L491
	.byte	9
	.word	.L369,.L370
	.byte	9
	.word	.L371,.L372
	.byte	12
	.word	.L373,.L490,.L491
	.byte	0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_NvMMainFunction')
	.sect	'.debug_abbrev'
.L269:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,6,52,0
	.byte	3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,1,49,16,17,1,18,1,0,0,9,5,0,49,16
	.byte	2,6,0,0,10,11,1,49,16,85,6,0,0,11,11,0,49,16,85,6,0,0,12,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_NvMMainFunction')
	.sect	'.debug_line'
.L270:
	.word	.L633-.L632
.L632:
	.half	3
	.word	.L635-.L634
.L634:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.h',0,0,0,0,0
.L635:
	.byte	5,6,7,0,5,2
	.word	.L244
	.byte	3,221,2,1,5,34,9
	.half	.L581-.L244
	.byte	3,3,1,5,32,9
	.half	.L636-.L581
	.byte	1,5,25,9
	.half	.L327-.L636
	.byte	3,185,126,1,4,2,5,12,9
	.half	.L332-.L327
	.byte	3,153,127,1,4,1,5,77,9
	.half	.L333-.L332
	.byte	3,231,0,1,5,32,9
	.half	.L3-.L333
	.byte	3,2,1,5,12,9
	.half	.L637-.L3
	.byte	1,5,32,9
	.half	.L638-.L637
	.byte	1,5,49,9
	.half	.L639-.L638
	.byte	1,5,9,9
	.half	.L640-.L639
	.byte	1,5,71,7,9
	.half	.L641-.L640
	.byte	3,2,1,4,2,5,33,9
	.half	.L338-.L641
	.byte	3,149,127,1,5,5,9
	.half	.L642-.L338
	.byte	1,5,56,9
	.half	.L5-.L642
	.byte	3,6,1,5,5,9
	.half	.L643-.L5
	.byte	1,5,9,7,9
	.half	.L644-.L643
	.byte	3,2,1,5,13,9
	.half	.L6-.L644
	.byte	3,3,1,5,14,9
	.half	.L645-.L6
	.byte	3,5,1,9
	.half	.L646-.L645
	.byte	3,5,1,9
	.half	.L647-.L646
	.byte	3,6,1,9
	.half	.L648-.L647
	.byte	3,3,1,9
	.half	.L649-.L648
	.byte	3,122,1,9
	.half	.L650-.L649
	.byte	3,117,1,9
	.half	.L651-.L650
	.byte	3,4,1,9
	.half	.L652-.L651
	.byte	3,1,1,5,13,9
	.half	.L13-.L652
	.byte	3,124,1,9
	.half	.L15-.L13
	.byte	3,5,1,9
	.half	.L9-.L15
	.byte	3,3,1,9
	.half	.L12-.L9
	.byte	3,3,1,9
	.half	.L10-.L12
	.byte	3,3,1,9
	.half	.L11-.L10
	.byte	3,3,1,9
	.half	.L16-.L11
	.byte	3,6,1,4,1,9
	.half	.L7-.L16
	.byte	3,198,0,1,5,27,7,9
	.half	.L346-.L7
	.byte	3,116,1,5,25,9
	.half	.L653-.L346
	.byte	1,5,94,9
	.half	.L4-.L653
	.byte	3,8,1,5,77,9
	.half	.L2-.L4
	.byte	1,5,18,7,9
	.half	.L328-.L2
	.byte	3,187,127,1,5,62,9
	.half	.L582-.L328
	.byte	1,5,12,9
	.half	.L26-.L582
	.byte	3,3,1,5,42,9
	.half	.L654-.L26
	.byte	1,5,53,9
	.half	.L655-.L654
	.byte	1,5,52,9
	.half	.L656-.L655
	.byte	1,5,9,9
	.half	.L657-.L656
	.byte	1,5,35,7,9
	.half	.L354-.L657
	.byte	3,111,1,5,45,9
	.half	.L658-.L354
	.byte	1,5,76,9
	.half	.L659-.L658
	.byte	1,5,86,9
	.half	.L355-.L659
	.byte	3,20,1,5,84,9
	.half	.L660-.L355
	.byte	1,5,53,9
	.half	.L27-.L660
	.byte	3,3,1,5,52,9
	.half	.L661-.L27
	.byte	1,5,9,9
	.half	.L662-.L661
	.byte	1,5,35,7,9
	.half	.L361-.L662
	.byte	3,105,1,5,45,9
	.half	.L663-.L361
	.byte	1,5,76,9
	.half	.L664-.L663
	.byte	1,5,87,9
	.half	.L362-.L664
	.byte	3,26,1,5,85,9
	.half	.L665-.L362
	.byte	1,5,53,9
	.half	.L28-.L665
	.byte	3,3,1,5,52,9
	.half	.L666-.L28
	.byte	1,5,9,9
	.half	.L667-.L666
	.byte	1,5,35,7,9
	.half	.L363-.L667
	.byte	3,99,1,5,45,9
	.half	.L668-.L363
	.byte	1,5,76,9
	.half	.L669-.L668
	.byte	1,5,83,9
	.half	.L364-.L669
	.byte	3,32,1,5,81,9
	.half	.L670-.L364
	.byte	1,5,52,9
	.half	.L29-.L670
	.byte	3,3,1,5,9,9
	.half	.L671-.L29
	.byte	1,5,35,7,9
	.half	.L365-.L671
	.byte	3,93,1,5,45,9
	.half	.L672-.L365
	.byte	1,5,76,9
	.half	.L673-.L672
	.byte	1,5,78,9
	.half	.L366-.L673
	.byte	3,37,1,5,50,9
	.half	.L30-.L366
	.byte	3,4,1,5,35,9
	.half	.L368-.L30
	.byte	3,81,1,5,45,9
	.half	.L674-.L368
	.byte	1,5,104,9
	.half	.L675-.L674
	.byte	1,5,76,9
	.half	.L676-.L675
	.byte	1,5,72,9
	.half	.L31-.L676
	.byte	3,20,1,5,62,9
	.half	.L25-.L31
	.byte	1,5,33,7,9
	.half	.L32-.L25
	.byte	3,159,2,1,5,25,9
	.half	.L375-.L32
	.byte	3,255,126,1,5,35,9
	.half	.L583-.L375
	.byte	3,2,1,4,2,5,33,9
	.half	.L381-.L583
	.byte	3,190,126,1,5,5,9
	.half	.L677-.L381
	.byte	1,5,56,9
	.half	.L33-.L677
	.byte	3,6,1,5,5,9
	.half	.L678-.L33
	.byte	1,5,9,7,9
	.half	.L679-.L678
	.byte	3,2,1,5,13,9
	.half	.L34-.L679
	.byte	3,3,1,5,14,9
	.half	.L680-.L34
	.byte	3,5,1,9
	.half	.L681-.L680
	.byte	3,5,1,9
	.half	.L682-.L681
	.byte	3,6,1,9
	.half	.L683-.L682
	.byte	3,3,1,9
	.half	.L684-.L683
	.byte	3,122,1,9
	.half	.L685-.L684
	.byte	3,117,1,9
	.half	.L686-.L685
	.byte	3,4,1,9
	.half	.L687-.L686
	.byte	3,1,1,5,13,9
	.half	.L41-.L687
	.byte	3,124,1,9
	.half	.L43-.L41
	.byte	3,5,1,9
	.half	.L37-.L43
	.byte	3,3,1,9
	.half	.L40-.L37
	.byte	3,3,1,9
	.half	.L38-.L40
	.byte	3,3,1,9
	.half	.L39-.L38
	.byte	3,3,1,9
	.half	.L44-.L39
	.byte	3,6,1,4,1,5,5,9
	.half	.L35-.L44
	.byte	3,159,1,1,5,14,7,9
	.half	.L384-.L35
	.byte	3,214,126,1,5,44,9
	.half	.L688-.L384
	.byte	1,5,54,9
	.half	.L689-.L688
	.byte	1,5,85,9
	.half	.L690-.L689
	.byte	1,5,96,9
	.half	.L691-.L690
	.byte	1,5,5,9
	.half	.L692-.L691
	.byte	1,5,9,9
	.half	.L53-.L692
	.byte	3,173,1,1,5,50,7,9
	.half	.L693-.L53
	.byte	3,2,1,5,35,9
	.half	.L390-.L693
	.byte	3,197,126,1,5,45,9
	.half	.L694-.L390
	.byte	1,5,104,9
	.half	.L695-.L694
	.byte	1,5,76,9
	.half	.L696-.L695
	.byte	1,5,62,9
	.half	.L391-.L696
	.byte	3,188,1,1,5,39,9
	.half	.L697-.L391
	.byte	1,5,38,9
	.half	.L698-.L697
	.byte	1,5,76,7,9
	.half	.L699-.L698
	.byte	1,5,62,7,9
	.half	.L55-.L699
	.byte	1,5,35,9
	.half	.L56-.L55
	.byte	1,5,44,9
	.half	.L54-.L56
	.byte	3,208,126,1,5,54,9
	.half	.L700-.L54
	.byte	1,5,85,9
	.half	.L701-.L700
	.byte	1,5,96,9
	.half	.L702-.L701
	.byte	1,5,5,9
	.half	.L703-.L702
	.byte	1,5,9,9
	.half	.L57-.L703
	.byte	3,180,1,1,5,50,7,9
	.half	.L704-.L57
	.byte	3,2,1,5,35,9
	.half	.L392-.L704
	.byte	3,190,126,1,5,45,9
	.half	.L705-.L392
	.byte	1,5,104,9
	.half	.L706-.L705
	.byte	1,5,76,9
	.half	.L707-.L706
	.byte	1,5,44,9
	.half	.L58-.L707
	.byte	3,12,1,5,54,9
	.half	.L708-.L58
	.byte	1,5,85,9
	.half	.L709-.L708
	.byte	1,5,96,9
	.half	.L710-.L709
	.byte	1,5,5,9
	.half	.L711-.L710
	.byte	1,5,13,9
	.half	.L59-.L711
	.byte	3,187,1,1,5,44,7,9
	.half	.L393-.L59
	.byte	3,197,126,1,5,54,9
	.half	.L712-.L393
	.byte	1,5,85,9
	.half	.L713-.L712
	.byte	1,5,96,9
	.half	.L714-.L713
	.byte	1,5,5,9
	.half	.L715-.L714
	.byte	1,5,13,9
	.half	.L61-.L715
	.byte	3,190,1,1,5,32,7,9
	.half	.L395-.L61
	.byte	3,158,127,1,5,22,9
	.half	.L404-.L395
	.byte	3,146,127,1,5,5,9
	.half	.L716-.L404
	.byte	1,9
	.half	.L63-.L716
	.byte	3,241,0,1,7,9
	.half	.L65-.L63
	.byte	3,80,1,7,9
	.half	.L717-.L65
	.byte	1,5,25,9
	.half	.L66-.L717
	.byte	3,2,1,5,77,9
	.half	.L585-.L66
	.byte	1,5,33,9
	.half	.L68-.L585
	.byte	3,2,1,5,13,9
	.half	.L718-.L68
	.byte	1,5,33,9
	.half	.L719-.L718
	.byte	1,5,50,9
	.half	.L587-.L719
	.byte	1,5,13,9
	.half	.L720-.L587
	.byte	1,5,58,7,9
	.half	.L721-.L720
	.byte	3,2,1,5,56,9
	.half	.L722-.L721
	.byte	1,5,54,9
	.half	.L723-.L722
	.byte	3,1,1,5,51,9
	.half	.L724-.L723
	.byte	3,2,1,5,29,9
	.half	.L725-.L724
	.byte	1,5,51,9
	.half	.L726-.L725
	.byte	1,5,61,9
	.half	.L727-.L726
	.byte	1,5,15,9
	.half	.L588-.L727
	.byte	3,2,1,5,33,9
	.half	.L728-.L588
	.byte	1,5,89,9
	.half	.L729-.L728
	.byte	1,5,129,1,9
	.half	.L730-.L729
	.byte	1,5,173,1,9
	.half	.L731-.L730
	.byte	1,5,13,9
	.half	.L586-.L731
	.byte	3,2,1,5,94,9
	.half	.L69-.L586
	.byte	3,117,1,5,77,9
	.half	.L67-.L69
	.byte	1,5,5,7,9
	.half	.L732-.L67
	.byte	3,14,1,5,9,9
	.half	.L70-.L732
	.byte	3,35,1,5,63,7,9
	.half	.L733-.L70
	.byte	3,2,1,5,96,9
	.half	.L734-.L733
	.byte	1,5,25,9
	.half	.L584-.L734
	.byte	1,5,13,9
	.half	.L590-.L584
	.byte	3,1,1,5,27,7,9
	.half	.L414-.L590
	.byte	3,96,1,5,25,9
	.half	.L735-.L414
	.byte	1,5,9,9
	.half	.L72-.L735
	.byte	3,29,1,5,59,9
	.half	.L64-.L72
	.byte	3,11,1,5,71,9
	.half	.L736-.L64
	.byte	1,5,21,9
	.half	.L591-.L736
	.byte	1,5,5,9
	.half	.L74-.L591
	.byte	3,2,1,5,17,9
	.half	.L75-.L74
	.byte	3,211,0,1,5,35,7,9
	.half	.L396-.L75
	.byte	3,184,126,1,5,45,9
	.half	.L737-.L396
	.byte	1,5,76,9
	.half	.L738-.L737
	.byte	1,5,58,9
	.half	.L415-.L738
	.byte	3,203,1,1,5,35,9
	.half	.L416-.L415
	.byte	3,175,126,1,5,45,9
	.half	.L739-.L416
	.byte	1,5,104,9
	.half	.L740-.L739
	.byte	1,5,76,9
	.half	.L741-.L740
	.byte	1,5,58,9
	.half	.L417-.L741
	.byte	3,210,1,1,5,35,9
	.half	.L418-.L417
	.byte	3,174,126,1,5,45,9
	.half	.L742-.L418
	.byte	1,5,104,9
	.half	.L743-.L742
	.byte	1,5,76,9
	.half	.L744-.L743
	.byte	1,5,58,9
	.half	.L419-.L744
	.byte	3,211,1,1,5,35,9
	.half	.L420-.L419
	.byte	3,173,126,1,5,45,9
	.half	.L745-.L420
	.byte	1,5,104,9
	.half	.L746-.L745
	.byte	1,5,76,9
	.half	.L747-.L746
	.byte	1,5,58,9
	.half	.L421-.L747
	.byte	3,212,1,1,5,35,9
	.half	.L422-.L421
	.byte	3,172,126,1,5,45,9
	.half	.L748-.L422
	.byte	1,5,104,9
	.half	.L749-.L748
	.byte	1,5,76,9
	.half	.L750-.L749
	.byte	1,5,88,9
	.half	.L423-.L750
	.byte	3,208,1,1,5,33,9
	.half	.L76-.L423
	.byte	3,8,1,5,17,9
	.half	.L77-.L76
	.byte	3,126,1,5,44,9
	.half	.L62-.L77
	.byte	3,182,126,1,5,54,9
	.half	.L751-.L62
	.byte	1,5,85,9
	.half	.L752-.L751
	.byte	1,5,96,9
	.half	.L753-.L752
	.byte	1,5,5,9
	.half	.L754-.L753
	.byte	1,5,18,9
	.half	.L79-.L754
	.byte	3,208,1,1,5,72,7,9
	.half	.L755-.L79
	.byte	3,2,1,5,17,9
	.half	.L592-.L755
	.byte	3,2,1,5,35,7,9
	.half	.L424-.L592
	.byte	3,166,126,1,5,45,9
	.half	.L756-.L424
	.byte	1,5,76,9
	.half	.L757-.L756
	.byte	1,5,58,9
	.half	.L425-.L757
	.byte	3,221,1,1,5,35,9
	.half	.L426-.L425
	.byte	3,157,126,1,5,45,9
	.half	.L758-.L426
	.byte	1,5,104,9
	.half	.L759-.L758
	.byte	1,5,76,9
	.half	.L760-.L759
	.byte	1,5,88,9
	.half	.L427-.L760
	.byte	3,226,1,1,5,33,9
	.half	.L81-.L427
	.byte	3,5,1,5,17,9
	.half	.L82-.L81
	.byte	3,126,1,5,44,9
	.half	.L80-.L82
	.byte	3,167,126,1,5,54,9
	.half	.L761-.L80
	.byte	1,5,85,9
	.half	.L762-.L761
	.byte	1,5,96,9
	.half	.L763-.L762
	.byte	1,5,5,9
	.half	.L764-.L763
	.byte	1,5,18,9
	.half	.L84-.L764
	.byte	3,223,1,1,5,32,7,9
	.half	.L428-.L84
	.byte	3,253,126,1,5,22,9
	.half	.L432-.L428
	.byte	3,146,127,1,5,5,9
	.half	.L765-.L432
	.byte	1,9
	.half	.L86-.L765
	.byte	3,241,0,1,7,9
	.half	.L88-.L86
	.byte	3,80,1,7,9
	.half	.L766-.L88
	.byte	1,5,25,9
	.half	.L89-.L766
	.byte	3,2,1,5,77,9
	.half	.L594-.L89
	.byte	1,5,33,9
	.half	.L91-.L594
	.byte	3,2,1,5,13,9
	.half	.L767-.L91
	.byte	1,5,33,9
	.half	.L768-.L767
	.byte	1,5,50,9
	.half	.L596-.L768
	.byte	1,5,13,9
	.half	.L769-.L596
	.byte	1,5,58,7,9
	.half	.L770-.L769
	.byte	3,2,1,5,56,9
	.half	.L771-.L770
	.byte	1,5,54,9
	.half	.L772-.L771
	.byte	3,1,1,5,51,9
	.half	.L773-.L772
	.byte	3,2,1,5,29,9
	.half	.L774-.L773
	.byte	1,5,51,9
	.half	.L775-.L774
	.byte	1,5,61,9
	.half	.L776-.L775
	.byte	1,5,15,9
	.half	.L597-.L776
	.byte	3,2,1,5,33,9
	.half	.L777-.L597
	.byte	1,5,89,9
	.half	.L778-.L777
	.byte	1,5,129,1,9
	.half	.L779-.L778
	.byte	1,5,173,1,9
	.half	.L780-.L779
	.byte	1,5,13,9
	.half	.L595-.L780
	.byte	3,2,1,5,94,9
	.half	.L92-.L595
	.byte	3,117,1,5,77,9
	.half	.L90-.L92
	.byte	1,5,5,7,9
	.half	.L781-.L90
	.byte	3,14,1,5,9,9
	.half	.L93-.L781
	.byte	3,35,1,5,63,7,9
	.half	.L782-.L93
	.byte	3,2,1,5,96,9
	.half	.L783-.L782
	.byte	1,5,25,9
	.half	.L593-.L783
	.byte	1,5,13,9
	.half	.L599-.L593
	.byte	3,1,1,5,27,7,9
	.half	.L435-.L599
	.byte	3,96,1,5,25,9
	.half	.L784-.L435
	.byte	1,5,9,9
	.half	.L95-.L784
	.byte	3,29,1,5,59,9
	.half	.L87-.L95
	.byte	3,11,1,5,71,9
	.half	.L785-.L87
	.byte	1,5,21,9
	.half	.L600-.L785
	.byte	1,5,5,9
	.half	.L97-.L600
	.byte	3,2,1,5,17,9
	.half	.L98-.L97
	.byte	3,244,0,1,5,35,7,9
	.half	.L429-.L98
	.byte	3,151,126,1,5,45,9
	.half	.L786-.L429
	.byte	1,5,76,9
	.half	.L787-.L786
	.byte	1,5,58,9
	.half	.L436-.L787
	.byte	3,236,1,1,5,35,9
	.half	.L437-.L436
	.byte	3,142,126,1,5,45,9
	.half	.L788-.L437
	.byte	1,5,104,9
	.half	.L789-.L788
	.byte	1,5,76,9
	.half	.L790-.L789
	.byte	1,5,58,9
	.half	.L438-.L790
	.byte	3,243,1,1,5,35,9
	.half	.L439-.L438
	.byte	3,141,126,1,5,45,9
	.half	.L791-.L439
	.byte	1,5,104,9
	.half	.L792-.L791
	.byte	1,5,76,9
	.half	.L793-.L792
	.byte	1,5,92,9
	.half	.L440-.L793
	.byte	3,241,1,1,5,33,9
	.half	.L99-.L440
	.byte	3,6,1,5,17,9
	.half	.L100-.L99
	.byte	3,126,1,5,5,9
	.half	.L52-.L100
	.byte	3,11,1,5,13,9
	.half	.L102-.L52
	.byte	3,51,1,7,9
	.half	.L794-.L102
	.byte	3,2,1,5,49,9
	.half	.L103-.L794
	.byte	3,2,1,5,71,9
	.half	.L795-.L103
	.byte	1,5,7,9
	.half	.L442-.L795
	.byte	3,79,1,5,10,9
	.half	.L796-.L442
	.byte	1,5,8,9
	.half	.L797-.L796
	.byte	3,1,1,5,5,9
	.half	.L798-.L797
	.byte	1,5,17,7,9
	.half	.L799-.L798
	.byte	3,2,1,5,15,9
	.half	.L800-.L799
	.byte	1,5,14,9
	.half	.L105-.L800
	.byte	3,2,1,5,19,9
	.half	.L801-.L105
	.byte	1,5,5,9
	.half	.L802-.L801
	.byte	1,5,94,9
	.half	.L106-.L802
	.byte	3,44,1,5,29,7,9
	.half	.L104-.L106
	.byte	3,2,1,5,27,9
	.half	.L803-.L104
	.byte	1,5,33,9
	.half	.L804-.L803
	.byte	3,4,1,5,31,9
	.half	.L805-.L804
	.byte	1,5,117,9
	.half	.L806-.L805
	.byte	1,5,33,9
	.half	.L108-.L806
	.byte	3,2,1,5,25,9
	.half	.L448-.L108
	.byte	3,243,126,1,5,35,9
	.half	.L601-.L448
	.byte	3,2,1,4,2,5,33,9
	.half	.L451-.L601
	.byte	3,190,126,1,5,5,9
	.half	.L807-.L451
	.byte	1,5,56,9
	.half	.L109-.L807
	.byte	3,6,1,5,5,9
	.half	.L808-.L109
	.byte	1,5,9,7,9
	.half	.L809-.L808
	.byte	3,2,1,5,13,9
	.half	.L110-.L809
	.byte	3,3,1,5,14,9
	.half	.L810-.L110
	.byte	3,5,1,9
	.half	.L811-.L810
	.byte	3,5,1,9
	.half	.L812-.L811
	.byte	3,6,1,9
	.half	.L813-.L812
	.byte	3,3,1,9
	.half	.L814-.L813
	.byte	3,122,1,9
	.half	.L815-.L814
	.byte	3,117,1,9
	.half	.L816-.L815
	.byte	3,4,1,9
	.half	.L817-.L816
	.byte	3,1,1,5,13,9
	.half	.L117-.L817
	.byte	3,124,1,9
	.half	.L119-.L117
	.byte	3,5,1,9
	.half	.L113-.L119
	.byte	3,3,1,9
	.half	.L116-.L113
	.byte	3,3,1,9
	.half	.L114-.L116
	.byte	3,3,1,9
	.half	.L115-.L114
	.byte	3,3,1,9
	.half	.L120-.L115
	.byte	3,6,1,4,1,5,5,9
	.half	.L111-.L120
	.byte	3,159,1,1,5,14,7,9
	.half	.L453-.L111
	.byte	3,214,126,1,5,44,9
	.half	.L818-.L453
	.byte	1,5,54,9
	.half	.L819-.L818
	.byte	1,5,85,9
	.half	.L820-.L819
	.byte	1,5,96,9
	.half	.L821-.L820
	.byte	1,5,5,9
	.half	.L822-.L821
	.byte	1,5,9,9
	.half	.L129-.L822
	.byte	3,173,1,1,5,50,7,9
	.half	.L823-.L129
	.byte	3,2,1,5,35,9
	.half	.L454-.L823
	.byte	3,197,126,1,5,45,9
	.half	.L824-.L454
	.byte	1,5,104,9
	.half	.L825-.L824
	.byte	1,5,76,9
	.half	.L826-.L825
	.byte	1,5,62,9
	.half	.L455-.L826
	.byte	3,188,1,1,5,39,9
	.half	.L827-.L455
	.byte	1,5,38,9
	.half	.L828-.L827
	.byte	1,5,76,7,9
	.half	.L829-.L828
	.byte	1,5,62,7,9
	.half	.L131-.L829
	.byte	1,5,35,9
	.half	.L132-.L131
	.byte	1,5,44,9
	.half	.L130-.L132
	.byte	3,208,126,1,5,54,9
	.half	.L830-.L130
	.byte	1,5,85,9
	.half	.L831-.L830
	.byte	1,5,96,9
	.half	.L832-.L831
	.byte	1,5,5,9
	.half	.L833-.L832
	.byte	1,5,9,9
	.half	.L133-.L833
	.byte	3,180,1,1,5,50,7,9
	.half	.L834-.L133
	.byte	3,2,1,5,35,9
	.half	.L456-.L834
	.byte	3,190,126,1,5,45,9
	.half	.L835-.L456
	.byte	1,5,104,9
	.half	.L836-.L835
	.byte	1,5,76,9
	.half	.L837-.L836
	.byte	1,5,44,9
	.half	.L134-.L837
	.byte	3,12,1,5,54,9
	.half	.L838-.L134
	.byte	1,5,85,9
	.half	.L839-.L838
	.byte	1,5,96,9
	.half	.L840-.L839
	.byte	1,5,5,9
	.half	.L841-.L840
	.byte	1,5,13,9
	.half	.L135-.L841
	.byte	3,187,1,1,5,44,7,9
	.half	.L457-.L135
	.byte	3,197,126,1,5,54,9
	.half	.L842-.L457
	.byte	1,5,85,9
	.half	.L843-.L842
	.byte	1,5,96,9
	.half	.L844-.L843
	.byte	1,5,5,9
	.half	.L845-.L844
	.byte	1,5,13,9
	.half	.L137-.L845
	.byte	3,190,1,1,5,32,7,9
	.half	.L458-.L137
	.byte	3,158,127,1,5,22,9
	.half	.L462-.L458
	.byte	3,146,127,1,5,5,9
	.half	.L846-.L462
	.byte	1,9
	.half	.L139-.L846
	.byte	3,241,0,1,7,9
	.half	.L141-.L139
	.byte	3,80,1,7,9
	.half	.L847-.L141
	.byte	1,5,25,9
	.half	.L142-.L847
	.byte	3,2,1,5,77,9
	.half	.L603-.L142
	.byte	1,5,33,9
	.half	.L144-.L603
	.byte	3,2,1,5,13,9
	.half	.L848-.L144
	.byte	1,5,33,9
	.half	.L849-.L848
	.byte	1,5,50,9
	.half	.L605-.L849
	.byte	1,5,13,9
	.half	.L850-.L605
	.byte	1,5,58,7,9
	.half	.L851-.L850
	.byte	3,2,1,5,56,9
	.half	.L852-.L851
	.byte	1,5,54,9
	.half	.L853-.L852
	.byte	3,1,1,5,51,9
	.half	.L854-.L853
	.byte	3,2,1,5,29,9
	.half	.L855-.L854
	.byte	1,5,51,9
	.half	.L856-.L855
	.byte	1,5,61,9
	.half	.L857-.L856
	.byte	1,5,15,9
	.half	.L606-.L857
	.byte	3,2,1,5,33,9
	.half	.L858-.L606
	.byte	1,5,89,9
	.half	.L859-.L858
	.byte	1,5,129,1,9
	.half	.L860-.L859
	.byte	1,5,173,1,9
	.half	.L861-.L860
	.byte	1,5,13,9
	.half	.L604-.L861
	.byte	3,2,1,5,94,9
	.half	.L145-.L604
	.byte	3,117,1,5,77,9
	.half	.L143-.L145
	.byte	1,5,5,7,9
	.half	.L862-.L143
	.byte	3,14,1,5,9,9
	.half	.L146-.L862
	.byte	3,35,1,5,63,7,9
	.half	.L863-.L146
	.byte	3,2,1,5,96,9
	.half	.L864-.L863
	.byte	1,5,25,9
	.half	.L602-.L864
	.byte	1,5,13,9
	.half	.L608-.L602
	.byte	3,1,1,5,27,7,9
	.half	.L465-.L608
	.byte	3,96,1,5,25,9
	.half	.L865-.L465
	.byte	1,5,9,9
	.half	.L148-.L865
	.byte	3,29,1,5,59,9
	.half	.L140-.L148
	.byte	3,11,1,5,71,9
	.half	.L866-.L140
	.byte	1,5,21,9
	.half	.L609-.L866
	.byte	1,5,5,9
	.half	.L150-.L609
	.byte	3,2,1,5,17,9
	.half	.L151-.L150
	.byte	3,211,0,1,5,35,7,9
	.half	.L459-.L151
	.byte	3,184,126,1,5,45,9
	.half	.L867-.L459
	.byte	1,5,76,9
	.half	.L868-.L867
	.byte	1,5,58,9
	.half	.L466-.L868
	.byte	3,203,1,1,5,35,9
	.half	.L467-.L466
	.byte	3,175,126,1,5,45,9
	.half	.L869-.L467
	.byte	1,5,104,9
	.half	.L870-.L869
	.byte	1,5,76,9
	.half	.L871-.L870
	.byte	1,5,58,9
	.half	.L468-.L871
	.byte	3,210,1,1,5,35,9
	.half	.L469-.L468
	.byte	3,174,126,1,5,45,9
	.half	.L872-.L469
	.byte	1,5,104,9
	.half	.L873-.L872
	.byte	1,5,76,9
	.half	.L874-.L873
	.byte	1,5,58,9
	.half	.L470-.L874
	.byte	3,211,1,1,5,35,9
	.half	.L471-.L470
	.byte	3,173,126,1,5,45,9
	.half	.L875-.L471
	.byte	1,5,104,9
	.half	.L876-.L875
	.byte	1,5,76,9
	.half	.L877-.L876
	.byte	1,5,58,9
	.half	.L472-.L877
	.byte	3,212,1,1,5,35,9
	.half	.L473-.L472
	.byte	3,172,126,1,5,45,9
	.half	.L878-.L473
	.byte	1,5,104,9
	.half	.L879-.L878
	.byte	1,5,76,9
	.half	.L880-.L879
	.byte	1,5,88,9
	.half	.L474-.L880
	.byte	3,208,1,1,5,33,9
	.half	.L152-.L474
	.byte	3,8,1,5,17,9
	.half	.L153-.L152
	.byte	3,126,1,5,44,9
	.half	.L138-.L153
	.byte	3,182,126,1,5,54,9
	.half	.L881-.L138
	.byte	1,5,85,9
	.half	.L882-.L881
	.byte	1,5,96,9
	.half	.L883-.L882
	.byte	1,5,5,9
	.half	.L884-.L883
	.byte	1,5,18,9
	.half	.L155-.L884
	.byte	3,208,1,1,5,72,7,9
	.half	.L885-.L155
	.byte	3,2,1,5,17,9
	.half	.L610-.L885
	.byte	3,2,1,5,35,7,9
	.half	.L475-.L610
	.byte	3,166,126,1,5,45,9
	.half	.L886-.L475
	.byte	1,5,76,9
	.half	.L887-.L886
	.byte	1,5,58,9
	.half	.L476-.L887
	.byte	3,221,1,1,5,35,9
	.half	.L477-.L476
	.byte	3,157,126,1,5,45,9
	.half	.L888-.L477
	.byte	1,5,104,9
	.half	.L889-.L888
	.byte	1,5,76,9
	.half	.L890-.L889
	.byte	1,5,88,9
	.half	.L478-.L890
	.byte	3,226,1,1,5,33,9
	.half	.L157-.L478
	.byte	3,5,1,5,17,9
	.half	.L158-.L157
	.byte	3,126,1,5,44,9
	.half	.L156-.L158
	.byte	3,167,126,1,5,54,9
	.half	.L891-.L156
	.byte	1,5,85,9
	.half	.L892-.L891
	.byte	1,5,96,9
	.half	.L893-.L892
	.byte	1,5,5,9
	.half	.L894-.L893
	.byte	1,5,18,9
	.half	.L160-.L894
	.byte	3,223,1,1,5,32,7,9
	.half	.L479-.L160
	.byte	3,253,126,1,5,22,9
	.half	.L483-.L479
	.byte	3,146,127,1,5,5,9
	.half	.L895-.L483
	.byte	1,9
	.half	.L162-.L895
	.byte	3,241,0,1,7,9
	.half	.L164-.L162
	.byte	3,80,1,7,9
	.half	.L896-.L164
	.byte	1,5,25,9
	.half	.L165-.L896
	.byte	3,2,1,5,77,9
	.half	.L612-.L165
	.byte	1,5,33,9
	.half	.L167-.L612
	.byte	3,2,1,5,13,9
	.half	.L897-.L167
	.byte	1,5,33,9
	.half	.L898-.L897
	.byte	1,5,50,9
	.half	.L614-.L898
	.byte	1,5,13,9
	.half	.L899-.L614
	.byte	1,5,58,7,9
	.half	.L900-.L899
	.byte	3,2,1,5,56,9
	.half	.L901-.L900
	.byte	1,5,54,9
	.half	.L902-.L901
	.byte	3,1,1,5,51,9
	.half	.L903-.L902
	.byte	3,2,1,5,29,9
	.half	.L904-.L903
	.byte	1,5,51,9
	.half	.L905-.L904
	.byte	1,5,61,9
	.half	.L906-.L905
	.byte	1,5,15,9
	.half	.L615-.L906
	.byte	3,2,1,5,33,9
	.half	.L907-.L615
	.byte	1,5,89,9
	.half	.L908-.L907
	.byte	1,5,129,1,9
	.half	.L909-.L908
	.byte	1,5,173,1,9
	.half	.L910-.L909
	.byte	1,5,13,9
	.half	.L613-.L910
	.byte	3,2,1,5,94,9
	.half	.L168-.L613
	.byte	3,117,1,5,77,9
	.half	.L166-.L168
	.byte	1,5,5,7,9
	.half	.L911-.L166
	.byte	3,14,1,5,9,9
	.half	.L169-.L911
	.byte	3,35,1,5,63,7,9
	.half	.L912-.L169
	.byte	3,2,1,5,96,9
	.half	.L913-.L912
	.byte	1,5,25,9
	.half	.L611-.L913
	.byte	1,5,13,9
	.half	.L617-.L611
	.byte	3,1,1,5,27,7,9
	.half	.L486-.L617
	.byte	3,96,1,5,25,9
	.half	.L914-.L486
	.byte	1,5,9,9
	.half	.L171-.L914
	.byte	3,29,1,5,59,9
	.half	.L163-.L171
	.byte	3,11,1,5,71,9
	.half	.L915-.L163
	.byte	1,5,21,9
	.half	.L618-.L915
	.byte	1,5,5,9
	.half	.L173-.L618
	.byte	3,2,1,5,17,9
	.half	.L174-.L173
	.byte	3,244,0,1,5,35,7,9
	.half	.L480-.L174
	.byte	3,151,126,1,5,45,9
	.half	.L916-.L480
	.byte	1,5,76,9
	.half	.L917-.L916
	.byte	1,5,58,9
	.half	.L487-.L917
	.byte	3,236,1,1,5,35,9
	.half	.L488-.L487
	.byte	3,142,126,1,5,45,9
	.half	.L918-.L488
	.byte	1,5,104,9
	.half	.L919-.L918
	.byte	1,5,76,9
	.half	.L920-.L919
	.byte	1,5,58,9
	.half	.L489-.L920
	.byte	3,243,1,1,5,35,9
	.half	.L490-.L489
	.byte	3,141,126,1,5,45,9
	.half	.L921-.L490
	.byte	1,5,104,9
	.half	.L922-.L921
	.byte	1,5,76,9
	.half	.L923-.L922
	.byte	1,5,92,9
	.half	.L491-.L923
	.byte	3,241,1,1,5,33,9
	.half	.L175-.L491
	.byte	3,6,1,5,17,9
	.half	.L176-.L175
	.byte	3,126,1,5,5,9
	.half	.L128-.L176
	.byte	3,11,1,5,13,9
	.half	.L178-.L128
	.byte	3,63,1,7,9
	.half	.L924-.L178
	.byte	3,2,1,5,119,9
	.half	.L179-.L924
	.byte	3,124,1,5,139,1,9
	.half	.L925-.L179
	.byte	1,5,66,9
	.half	.L107-.L925
	.byte	1,5,117,9
	.half	.L926-.L107
	.byte	1,5,1,7,9
	.half	.L180-.L926
	.byte	3,32,1,7,9
	.half	.L272-.L180
	.byte	0,1,1
.L633:
	.sdecl	'.debug_ranges',debug,cluster('Dem_NvMMainFunction')
	.sect	'.debug_ranges'
.L271:
	.word	-1,.L244,0,.L272-.L244,0,0
.L337:
	.word	-1,.L244,.L332-.L244,.L333-.L244,.L338-.L244,.L7-.L244,0,0
.L344:
	.word	-1,.L244,.L332-.L244,.L333-.L244,.L338-.L244,.L5-.L244,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_NvMShutdown')
	.sect	'.debug_info'
.L273:
	.word	955
	.half	3
	.word	.L274
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L276,.L275
	.byte	2
	.word	.L259
	.byte	3
	.byte	'Dem_NvMShutdown',0,1,161,3,6,1,1,1
	.word	.L246,.L492,.L245
	.byte	4
	.word	.L246,.L492
	.byte	5
	.byte	'demNvMId',0,1,163,3,24
	.word	.L324,.L493
	.byte	6
	.word	.L494,.L246,.L495
	.byte	7
	.word	.L496,.L246,.L495
	.byte	6
	.word	.L497,.L498,.L499
	.byte	8
	.word	.L500,.L501
	.byte	9
	.word	.L502,.L498,.L499
	.byte	0,0,0,6
	.word	.L350,.L495,.L503
	.byte	7
	.word	.L351,.L495,.L503
	.byte	5
	.byte	'demNvMId',0,1,83,11
	.word	.L324,.L504
	.byte	6
	.word	.L353,.L505,.L506
	.byte	8
	.word	.L356,.L507
	.byte	8
	.word	.L358,.L508
	.byte	9
	.word	.L360,.L505,.L506
	.byte	0,6
	.word	.L353,.L509,.L510
	.byte	8
	.word	.L356,.L507
	.byte	8
	.word	.L358,.L508
	.byte	9
	.word	.L360,.L509,.L510
	.byte	0,6
	.word	.L353,.L511,.L512
	.byte	8
	.word	.L356,.L507
	.byte	8
	.word	.L358,.L508
	.byte	9
	.word	.L360,.L511,.L512
	.byte	0,6
	.word	.L353,.L513,.L514
	.byte	8
	.word	.L356,.L507
	.byte	8
	.word	.L358,.L508
	.byte	9
	.word	.L360,.L513,.L514
	.byte	0,6
	.word	.L367,.L515,.L187
	.byte	8
	.word	.L369,.L516
	.byte	8
	.word	.L371,.L517
	.byte	9
	.word	.L373,.L515,.L187
	.byte	0,0,0,6
	.word	.L383,.L189,.L190
	.byte	8
	.word	.L385,.L518
	.byte	8
	.word	.L387,.L519
	.byte	9
	.word	.L389,.L189,.L190
	.byte	0,6
	.word	.L383,.L191,.L193
	.byte	8
	.word	.L385,.L518
	.byte	8
	.word	.L387,.L519
	.byte	9
	.word	.L389,.L191,.L193
	.byte	0,6
	.word	.L383,.L520,.L195
	.byte	8
	.word	.L385,.L518
	.byte	8
	.word	.L387,.L519
	.byte	9
	.word	.L389,.L520,.L195
	.byte	0,6
	.word	.L383,.L521,.L197
	.byte	8
	.word	.L385,.L518
	.byte	8
	.word	.L387,.L519
	.byte	9
	.word	.L389,.L521,.L197
	.byte	0,6
	.word	.L383,.L522,.L199
	.byte	8
	.word	.L385,.L518
	.byte	8
	.word	.L387,.L519
	.byte	9
	.word	.L389,.L522,.L199
	.byte	0,6
	.word	.L367,.L523,.L524
	.byte	8
	.word	.L369,.L516
	.byte	8
	.word	.L371,.L517
	.byte	9
	.word	.L373,.L523,.L524
	.byte	0,6
	.word	.L367,.L525,.L526
	.byte	8
	.word	.L369,.L516
	.byte	8
	.word	.L371,.L517
	.byte	9
	.word	.L373,.L525,.L526
	.byte	0,6
	.word	.L367,.L527,.L528
	.byte	8
	.word	.L369,.L516
	.byte	8
	.word	.L371,.L517
	.byte	9
	.word	.L373,.L527,.L528
	.byte	0,6
	.word	.L367,.L529,.L530
	.byte	8
	.word	.L369,.L516
	.byte	8
	.word	.L371,.L517
	.byte	9
	.word	.L373,.L529,.L530
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_NvMShutdown')
	.sect	'.debug_abbrev'
.L274:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6,29,1
	.byte	49,16,17,1,18,1,0,0,7,11,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_NvMShutdown')
	.sect	'.debug_line'
.L275:
	.word	.L928-.L927
.L927:
	.half	3
	.word	.L930-.L929
.L929:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.h',0,0,0,0,0
.L930:
	.byte	5,33,7,0,5,2
	.word	.L246
	.byte	3,194,1,1,4,2,5,5,9
	.half	.L498-.L246
	.byte	3,155,127,1,5,35,9
	.half	.L931-.L498
	.byte	1,5,72,9
	.half	.L932-.L931
	.byte	1,5,70,9
	.half	.L933-.L932
	.byte	1,4,1,5,28,9
	.half	.L499-.L933
	.byte	3,233,0,1,5,18,9
	.half	.L495-.L499
	.byte	3,142,127,1,5,62,9
	.half	.L619-.L495
	.byte	1,5,42,9
	.half	.L182-.L619
	.byte	3,3,1,5,53,9
	.half	.L934-.L182
	.byte	1,5,52,9
	.half	.L935-.L934
	.byte	1,5,9,9
	.half	.L936-.L935
	.byte	1,5,35,7,9
	.half	.L505-.L936
	.byte	3,111,1,5,45,9
	.half	.L937-.L505
	.byte	1,5,76,9
	.half	.L938-.L937
	.byte	1,5,86,9
	.half	.L506-.L938
	.byte	3,20,1,5,84,9
	.half	.L939-.L506
	.byte	1,5,53,9
	.half	.L183-.L939
	.byte	3,3,1,5,52,9
	.half	.L940-.L183
	.byte	1,5,9,9
	.half	.L941-.L940
	.byte	1,5,35,7,9
	.half	.L509-.L941
	.byte	3,105,1,5,45,9
	.half	.L942-.L509
	.byte	1,5,76,9
	.half	.L943-.L942
	.byte	1,5,87,9
	.half	.L510-.L943
	.byte	3,26,1,5,85,9
	.half	.L944-.L510
	.byte	1,5,53,9
	.half	.L184-.L944
	.byte	3,3,1,5,52,9
	.half	.L945-.L184
	.byte	1,5,9,9
	.half	.L946-.L945
	.byte	1,5,35,7,9
	.half	.L511-.L946
	.byte	3,99,1,5,45,9
	.half	.L947-.L511
	.byte	1,5,76,9
	.half	.L948-.L947
	.byte	1,5,83,9
	.half	.L512-.L948
	.byte	3,32,1,5,81,9
	.half	.L949-.L512
	.byte	1,5,52,9
	.half	.L185-.L949
	.byte	3,3,1,5,9,9
	.half	.L950-.L185
	.byte	1,5,35,7,9
	.half	.L513-.L950
	.byte	3,93,1,5,45,9
	.half	.L951-.L513
	.byte	1,5,76,9
	.half	.L952-.L951
	.byte	1,5,78,9
	.half	.L514-.L952
	.byte	3,37,1,5,50,9
	.half	.L186-.L514
	.byte	3,4,1,5,35,9
	.half	.L515-.L186
	.byte	3,81,1,5,45,9
	.half	.L953-.L515
	.byte	1,5,104,9
	.half	.L954-.L953
	.byte	1,5,76,9
	.half	.L955-.L954
	.byte	1,5,72,9
	.half	.L187-.L955
	.byte	3,20,1,5,62,9
	.half	.L181-.L187
	.byte	1,5,18,7,9
	.half	.L503-.L181
	.byte	3,213,2,1,5,62,9
	.half	.L620-.L503
	.byte	1,5,44,9
	.half	.L189-.L620
	.byte	3,163,125,1,5,54,9
	.half	.L956-.L189
	.byte	1,5,85,9
	.half	.L957-.L956
	.byte	1,5,96,9
	.half	.L958-.L957
	.byte	1,5,5,9
	.half	.L959-.L958
	.byte	1,5,9,9
	.half	.L190-.L959
	.byte	3,223,2,1,5,13,7,9
	.half	.L960-.L190
	.byte	3,2,1,5,44,9
	.half	.L191-.L960
	.byte	3,159,125,1,5,54,9
	.half	.L961-.L191
	.byte	1,5,85,9
	.half	.L962-.L961
	.byte	1,5,96,9
	.half	.L963-.L962
	.byte	1,5,5,9
	.half	.L964-.L963
	.byte	1,5,13,9
	.half	.L193-.L964
	.byte	3,228,2,1,5,44,7,9
	.half	.L520-.L193
	.byte	3,156,125,1,5,54,9
	.half	.L965-.L520
	.byte	1,5,85,9
	.half	.L966-.L965
	.byte	1,5,96,9
	.half	.L967-.L966
	.byte	1,5,5,9
	.half	.L968-.L967
	.byte	1,5,42,9
	.half	.L195-.L968
	.byte	3,229,2,1,5,44,7,9
	.half	.L521-.L195
	.byte	3,155,125,1,5,54,9
	.half	.L969-.L521
	.byte	1,5,85,9
	.half	.L970-.L969
	.byte	1,5,96,9
	.half	.L971-.L970
	.byte	1,5,5,9
	.half	.L972-.L971
	.byte	1,5,42,9
	.half	.L197-.L972
	.byte	3,230,2,1,5,44,7,9
	.half	.L522-.L197
	.byte	3,154,125,1,5,54,9
	.half	.L973-.L522
	.byte	1,5,85,9
	.half	.L974-.L973
	.byte	1,5,96,9
	.half	.L975-.L974
	.byte	1,5,5,9
	.half	.L976-.L975
	.byte	1,5,42,9
	.half	.L199-.L976
	.byte	3,231,2,1,7,9
	.half	.L194-.L199
	.byte	3,2,1,5,63,9
	.half	.L977-.L194
	.byte	1,5,75,9
	.half	.L978-.L977
	.byte	1,5,13,9
	.half	.L979-.L978
	.byte	1,5,54,7,9
	.half	.L980-.L979
	.byte	3,2,1,5,35,9
	.half	.L523-.L980
	.byte	3,137,125,1,5,45,9
	.half	.L981-.L523
	.byte	1,5,104,9
	.half	.L982-.L981
	.byte	1,5,76,9
	.half	.L983-.L982
	.byte	1,5,54,9
	.half	.L524-.L983
	.byte	3,248,2,1,5,35,9
	.half	.L525-.L524
	.byte	3,136,125,1,5,45,9
	.half	.L984-.L525
	.byte	1,5,104,9
	.half	.L985-.L984
	.byte	1,5,76,9
	.half	.L986-.L985
	.byte	1,5,54,9
	.half	.L526-.L986
	.byte	3,249,2,1,5,35,9
	.half	.L527-.L526
	.byte	3,135,125,1,5,45,9
	.half	.L987-.L527
	.byte	1,5,104,9
	.half	.L988-.L987
	.byte	1,5,76,9
	.half	.L989-.L988
	.byte	1,5,54,9
	.half	.L528-.L989
	.byte	3,250,2,1,5,35,9
	.half	.L529-.L528
	.byte	3,134,125,1,5,45,9
	.half	.L990-.L529
	.byte	1,5,104,9
	.half	.L991-.L990
	.byte	1,5,76,9
	.half	.L992-.L991
	.byte	1,5,85,9
	.half	.L530-.L992
	.byte	3,247,2,1,5,17,9
	.half	.L201-.L530
	.byte	3,7,1,5,72,9
	.half	.L192-.L201
	.byte	3,107,1,5,62,9
	.half	.L188-.L192
	.byte	1,5,1,7,9
	.half	.L993-.L188
	.byte	3,26,1,7,9
	.half	.L277-.L993
	.byte	0,1,1
.L928:
	.sdecl	'.debug_ranges',debug,cluster('Dem_NvMShutdown')
	.sect	'.debug_ranges'
.L276:
	.word	-1,.L246,0,.L277-.L246,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_NvMIsClearPending')
	.sect	'.debug_info'
.L278:
	.word	357
	.half	3
	.word	.L279
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L281,.L280
	.byte	2
	.word	.L259
	.byte	3
	.byte	'Dem_NvMIsClearPending',0,1,199,3,9
	.word	.L324
	.byte	1,1,1
	.word	.L248,.L531,.L247
	.byte	4
	.word	.L248,.L531
	.byte	5
	.byte	'demNvMId',0,1,201,3,24
	.word	.L324,.L532
	.byte	6
	.word	.L383,.L204,.L205
	.byte	7
	.word	.L385,.L533
	.byte	7
	.word	.L387,.L534
	.byte	8
	.word	.L389,.L204,.L205
	.byte	0,6
	.word	.L383,.L535,.L207
	.byte	7
	.word	.L385,.L533
	.byte	7
	.word	.L387,.L534
	.byte	8
	.word	.L389,.L535,.L207
	.byte	0,6
	.word	.L383,.L536,.L209
	.byte	7
	.word	.L385,.L533
	.byte	7
	.word	.L387,.L534
	.byte	8
	.word	.L389,.L536,.L209
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_NvMIsClearPending')
	.sect	'.debug_abbrev'
.L279:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6
	.byte	29,1,49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_NvMIsClearPending')
	.sect	'.debug_line'
.L280:
	.word	.L995-.L994
.L994:
	.half	3
	.word	.L997-.L996
.L996:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.c',0,0,0,0,0
.L997:
	.byte	5,18,7,0,5,2
	.word	.L248
	.byte	3,201,3,1,5,62,9
	.half	.L621-.L248
	.byte	1,5,14,9
	.half	.L204-.L621
	.byte	3,131,125,1,5,44,9
	.half	.L998-.L204
	.byte	1,5,54,9
	.half	.L999-.L998
	.byte	1,5,85,9
	.half	.L1000-.L999
	.byte	1,5,96,9
	.half	.L1001-.L1000
	.byte	1,5,5,9
	.half	.L1002-.L1001
	.byte	1,5,17,9
	.half	.L205-.L1002
	.byte	3,255,2,1,5,44,7,9
	.half	.L535-.L205
	.byte	3,129,125,1,5,54,9
	.half	.L1003-.L535
	.byte	1,5,85,9
	.half	.L1004-.L1003
	.byte	1,5,96,9
	.half	.L1005-.L1004
	.byte	1,5,5,9
	.half	.L1006-.L1005
	.byte	1,5,43,9
	.half	.L207-.L1006
	.byte	3,128,3,1,5,44,7,9
	.half	.L536-.L207
	.byte	3,128,125,1,5,54,9
	.half	.L1007-.L536
	.byte	1,5,85,9
	.half	.L1008-.L1007
	.byte	1,5,96,9
	.half	.L1009-.L1008
	.byte	1,5,5,9
	.half	.L1010-.L1009
	.byte	1,5,43,9
	.half	.L209-.L1010
	.byte	3,129,3,1,5,47,7,9
	.half	.L1011-.L209
	.byte	3,1,1,5,57,9
	.half	.L1012-.L1011
	.byte	1,5,85,9
	.half	.L1013-.L1012
	.byte	1,5,20,7,9
	.half	.L206-.L1013
	.byte	3,3,1,5,13,9
	.half	.L1014-.L206
	.byte	1,5,72,9
	.half	.L211-.L1014
	.byte	3,120,1,5,62,9
	.half	.L203-.L211
	.byte	1,5,12,7,9
	.half	.L1015-.L203
	.byte	3,11,1,5,5,9
	.half	.L1016-.L1015
	.byte	1,5,1,9
	.half	.L212-.L1016
	.byte	3,1,1,7,9
	.half	.L282-.L212
	.byte	0,1,1
.L995:
	.sdecl	'.debug_ranges',debug,cluster('Dem_NvMIsClearPending')
	.sect	'.debug_ranges'
.L281:
	.word	-1,.L248,0,.L282-.L248,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_NvMIsImmediatePending')
	.sect	'.debug_info'
.L283:
	.word	316
	.half	3
	.word	.L284
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L286,.L285
	.byte	2
	.word	.L259
	.byte	3
	.byte	'Dem_NvMIsImmediatePending',0,1,133,4,9
	.word	.L324
	.byte	1,1,1
	.word	.L258,.L537,.L257
	.byte	4
	.word	.L258,.L537
	.byte	5
	.byte	'demNvMId',0,1,135,4,24
	.word	.L324,.L538
	.byte	6
	.word	.L383,.L233,.L234
	.byte	7
	.word	.L385,.L539
	.byte	7
	.word	.L387,.L540
	.byte	8
	.word	.L389,.L233,.L234
	.byte	0,6
	.word	.L383,.L541,.L236
	.byte	7
	.word	.L385,.L539
	.byte	7
	.word	.L387,.L540
	.byte	8
	.word	.L389,.L541,.L236
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_NvMIsImmediatePending')
	.sect	'.debug_abbrev'
.L284:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6
	.byte	29,1,49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_NvMIsImmediatePending')
	.sect	'.debug_line'
.L285:
	.word	.L1018-.L1017
.L1017:
	.half	3
	.word	.L1020-.L1019
.L1019:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.c',0,0,0,0,0
.L1020:
	.byte	5,18,7,0,5,2
	.word	.L258
	.byte	3,142,4,1,5,62,9
	.half	.L622-.L258
	.byte	1,5,14,9
	.half	.L233-.L622
	.byte	3,190,124,1,5,44,9
	.half	.L1021-.L233
	.byte	1,5,54,9
	.half	.L1022-.L1021
	.byte	1,5,85,9
	.half	.L1023-.L1022
	.byte	1,5,96,9
	.half	.L1024-.L1023
	.byte	1,5,5,9
	.half	.L1025-.L1024
	.byte	1,5,13,9
	.half	.L234-.L1025
	.byte	3,196,3,1,5,44,7,9
	.half	.L541-.L234
	.byte	3,188,124,1,5,54,9
	.half	.L1026-.L541
	.byte	1,5,85,9
	.half	.L1027-.L1026
	.byte	1,5,96,9
	.half	.L1028-.L1027
	.byte	1,5,5,9
	.half	.L1029-.L1028
	.byte	1,5,39,9
	.half	.L236-.L1029
	.byte	3,197,3,1,5,44,7,9
	.half	.L1030-.L236
	.byte	3,1,1,5,54,9
	.half	.L1031-.L1030
	.byte	1,5,86,9
	.half	.L1032-.L1031
	.byte	1,5,20,7,9
	.half	.L235-.L1032
	.byte	3,2,1,5,13,9
	.half	.L1033-.L235
	.byte	1,5,72,9
	.half	.L238-.L1033
	.byte	3,122,1,5,62,9
	.half	.L232-.L238
	.byte	1,5,12,7,9
	.half	.L1034-.L232
	.byte	3,9,1,5,5,9
	.half	.L1035-.L1034
	.byte	1,5,1,9
	.half	.L239-.L1035
	.byte	3,1,1,7,9
	.half	.L287-.L239
	.byte	0,1,1
.L1018:
	.sdecl	'.debug_ranges',debug,cluster('Dem_NvMIsImmediatePending')
	.sect	'.debug_ranges'
.L286:
	.word	-1,.L258,0,.L287-.L258,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_NvMIsBlockClearPending')
	.sect	'.debug_info'
.L288:
	.word	362
	.half	3
	.word	.L289
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L291,.L290
	.byte	2
	.word	.L259
	.byte	3
	.byte	'Dem_NvMIsBlockClearPending',0,1,223,3,9
	.word	.L324
	.byte	1,1,1
	.word	.L252,.L542,.L251
	.byte	4
	.byte	'demNvMId',0,1,223,3,56
	.word	.L324,.L543
	.byte	5
	.word	.L252,.L542
	.byte	6
	.word	.L383,.L252,.L214
	.byte	7
	.word	.L385,.L544
	.byte	7
	.word	.L387,.L545
	.byte	8
	.word	.L389,.L252,.L214
	.byte	0,6
	.word	.L383,.L546,.L216
	.byte	7
	.word	.L385,.L544
	.byte	7
	.word	.L387,.L545
	.byte	8
	.word	.L389,.L546,.L216
	.byte	0,6
	.word	.L383,.L547,.L219
	.byte	7
	.word	.L385,.L544
	.byte	7
	.word	.L387,.L545
	.byte	8
	.word	.L389,.L547,.L219
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_NvMIsBlockClearPending')
	.sect	'.debug_abbrev'
.L289:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	29,1,49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_NvMIsBlockClearPending')
	.sect	'.debug_line'
.L290:
	.word	.L1037-.L1036
.L1036:
	.half	3
	.word	.L1039-.L1038
.L1038:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.c',0,0,0,0,0
.L1039:
	.byte	5,14,7,0,5,2
	.word	.L252
	.byte	3,204,0,1,5,44,9
	.half	.L1040-.L252
	.byte	1,5,54,9
	.half	.L1041-.L1040
	.byte	1,5,85,9
	.half	.L1042-.L1041
	.byte	1,5,96,9
	.half	.L1043-.L1042
	.byte	1,5,5,9
	.half	.L1044-.L1043
	.byte	1,5,17,9
	.half	.L214-.L1044
	.byte	3,148,3,1,5,44,7,9
	.half	.L546-.L214
	.byte	3,236,124,1,5,54,9
	.half	.L1045-.L546
	.byte	1,5,85,9
	.half	.L1046-.L1045
	.byte	1,5,96,9
	.half	.L1047-.L1046
	.byte	1,5,5,9
	.half	.L1048-.L1047
	.byte	1,5,43,9
	.half	.L216-.L1048
	.byte	3,149,3,1,5,47,7,9
	.half	.L1049-.L216
	.byte	3,1,1,5,57,9
	.half	.L1050-.L1049
	.byte	1,5,85,9
	.half	.L1051-.L1050
	.byte	1,5,44,7,9
	.half	.L547-.L1051
	.byte	3,234,124,1,5,54,9
	.half	.L1052-.L547
	.byte	1,5,85,9
	.half	.L1053-.L1052
	.byte	1,5,96,9
	.half	.L1054-.L1053
	.byte	1,5,5,9
	.half	.L1055-.L1054
	.byte	1,5,43,9
	.half	.L219-.L1055
	.byte	3,151,3,1,5,16,7,9
	.half	.L215-.L219
	.byte	3,3,1,5,9,9
	.half	.L1056-.L215
	.byte	1,5,12,9
	.half	.L220-.L1056
	.byte	3,2,1,5,5,9
	.half	.L1057-.L220
	.byte	1,5,1,9
	.half	.L221-.L1057
	.byte	3,2,1,7,9
	.half	.L292-.L221
	.byte	0,1,1
.L1037:
	.sdecl	'.debug_ranges',debug,cluster('Dem_NvMIsBlockClearPending')
	.sect	'.debug_ranges'
.L291:
	.word	-1,.L252,0,.L292-.L252,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_NvMIsBlockAllowedToBeExcluded')
	.sect	'.debug_info'
.L293:
	.word	389
	.half	3
	.word	.L294
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L296,.L295
	.byte	2
	.word	.L259
	.byte	3
	.byte	'Dem_NvMIsBlockAllowedToBeExcluded',0,1,238,3,9
	.word	.L324
	.byte	1,1,1
	.word	.L254,.L548,.L253
	.byte	4
	.byte	'demNvMId',0,1,238,3,63
	.word	.L324,.L549
	.byte	5
	.word	.L254,.L548
	.byte	6
	.byte	'RetVal',0,1,240,3,13
	.word	.L324,.L550
	.byte	7
	.word	.L383,.L551,.L223
	.byte	8
	.word	.L385,.L552
	.byte	8
	.word	.L387,.L553
	.byte	9
	.word	.L389,.L551,.L223
	.byte	0,7
	.word	.L383,.L554,.L225
	.byte	8
	.word	.L385,.L552
	.byte	8
	.word	.L387,.L553
	.byte	9
	.word	.L389,.L554,.L225
	.byte	0,7
	.word	.L383,.L555,.L227
	.byte	8
	.word	.L385,.L552
	.byte	8
	.word	.L387,.L553
	.byte	9
	.word	.L389,.L555,.L227
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_NvMIsBlockAllowedToBeExcluded')
	.sect	'.debug_abbrev'
.L294:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_NvMIsBlockAllowedToBeExcluded')
	.sect	'.debug_line'
.L295:
	.word	.L1059-.L1058
.L1058:
	.half	3
	.word	.L1061-.L1060
.L1060:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.c',0,0,0,0,0
.L1061:
	.byte	5,20,7,0,5,2
	.word	.L254
	.byte	3,239,3,1,5,14,9
	.half	.L551-.L254
	.byte	3,221,124,1,5,44,9
	.half	.L1062-.L551
	.byte	1,5,54,9
	.half	.L1063-.L1062
	.byte	1,5,85,9
	.half	.L1064-.L1063
	.byte	1,5,96,9
	.half	.L1065-.L1064
	.byte	1,5,5,9
	.half	.L1066-.L1065
	.byte	1,5,13,9
	.half	.L223-.L1066
	.byte	3,165,3,1,5,44,7,9
	.half	.L554-.L223
	.byte	3,219,124,1,5,54,9
	.half	.L1067-.L554
	.byte	1,5,85,9
	.half	.L1068-.L1067
	.byte	1,5,96,9
	.half	.L1069-.L1068
	.byte	1,5,5,9
	.half	.L1070-.L1069
	.byte	1,5,39,9
	.half	.L225-.L1070
	.byte	3,166,3,1,5,44,7,9
	.half	.L555-.L225
	.byte	3,218,124,1,5,54,9
	.half	.L1071-.L555
	.byte	1,5,85,9
	.half	.L1072-.L1071
	.byte	1,5,96,9
	.half	.L1073-.L1072
	.byte	1,5,5,9
	.half	.L1074-.L1073
	.byte	1,5,39,9
	.half	.L227-.L1074
	.byte	3,167,3,1,5,16,7,9
	.half	.L224-.L227
	.byte	3,3,1,5,5,9
	.half	.L228-.L224
	.byte	3,3,1,5,1,9
	.half	.L229-.L228
	.byte	3,1,1,7,9
	.half	.L297-.L229
	.byte	0,1,1
.L1059:
	.sdecl	'.debug_ranges',debug,cluster('Dem_NvMIsBlockAllowedToBeExcluded')
	.sect	'.debug_ranges'
.L296:
	.word	-1,.L254,0,.L297-.L254,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_NvMIsBlockExcluded')
	.sect	'.debug_info'
.L298:
	.word	268
	.half	3
	.word	.L299
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L301,.L300
	.byte	2
	.word	.L259
	.byte	3
	.byte	'Dem_NvMIsBlockExcluded',0,1,253,3,9
	.word	.L324
	.byte	1,1,1
	.word	.L256,.L556,.L255
	.byte	4
	.byte	'demNvMId',0,1,253,3,52
	.word	.L324,.L557
	.byte	5
	.word	.L256,.L556
	.byte	6
	.word	.L383,.L256,.L230
	.byte	7
	.word	.L385,.L558
	.byte	7
	.word	.L387,.L559
	.byte	8
	.word	.L389,.L256,.L230
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_NvMIsBlockExcluded')
	.sect	'.debug_abbrev'
.L299:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	29,1,49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_NvMIsBlockExcluded')
	.sect	'.debug_line'
.L300:
	.word	.L1076-.L1075
.L1075:
	.half	3
	.word	.L1078-.L1077
.L1077:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.c',0,0,0,0,0
.L1078:
	.byte	5,44,7,0,5,2
	.word	.L256
	.byte	3,204,0,1,5,14,9
	.half	.L1079-.L256
	.byte	1,5,44,9
	.half	.L1080-.L1079
	.byte	1,5,54,9
	.half	.L1081-.L1080
	.byte	1,5,85,9
	.half	.L1082-.L1081
	.byte	1,5,96,9
	.half	.L1083-.L1082
	.byte	1,5,5,9
	.half	.L1084-.L1083
	.byte	1,9
	.half	.L230-.L1084
	.byte	3,178,3,1,5,1,9
	.half	.L231-.L230
	.byte	3,1,1,7,9
	.half	.L302-.L231
	.byte	0,1,1
.L1076:
	.sdecl	'.debug_ranges',debug,cluster('Dem_NvMIsBlockExcluded')
	.sect	'.debug_ranges'
.L301:
	.word	-1,.L256,0,.L302-.L256,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_NvMNormalMemCopy')
	.sect	'.debug_info'
.L303:
	.word	317
	.half	3
	.word	.L304
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L306,.L305
	.byte	2
	.word	.L259
	.byte	3
	.byte	'Dem_NvMNormalMemCopy',0,1,217,3,6,1,1,1
	.word	.L250,.L560,.L249
	.byte	4
	.byte	'Dest_pv',0,1,217,3,33
	.word	.L561,.L562
	.byte	4
	.byte	'Src_pcv',0,1,217,3,54
	.word	.L563,.L564
	.byte	4
	.byte	'numBytes_s32',0,1,217,3,70
	.word	.L565,.L566
	.byte	5
	.word	.L250,.L560
	.byte	6
	.word	.L567,.L250,.L568
	.byte	7
	.word	.L569,.L570
	.byte	7
	.word	.L571,.L572
	.byte	7
	.word	.L573,.L574
	.byte	8
	.word	.L575,.L250,.L568
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_NvMNormalMemCopy')
	.sect	'.debug_abbrev'
.L304:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_NvMNormalMemCopy')
	.sect	'.debug_line'
.L305:
	.word	.L1086-.L1085
.L1085:
	.half	3
	.word	.L1088-.L1087
.L1087:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_MemUtils.h',0,0,0,0,0
.L1088:
	.byte	4,2,5,49,7,0,5,2
	.word	.L250
	.byte	3,22,1,4,1,5,1,9
	.half	.L568-.L250
	.byte	3,197,3,1,7,9
	.half	.L307-.L568
	.byte	0,1,1
.L1086:
	.sdecl	'.debug_ranges',debug,cluster('Dem_NvMNormalMemCopy')
	.sect	'.debug_ranges'
.L306:
	.word	-1,.L250,0,.L307-.L250,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_NvMBlockStatusDoubleBuffer')
	.sect	'.debug_info'
.L308:
	.word	181
	.half	3
	.word	.L309
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L259
	.byte	3
	.byte	'Dem_NvMBlockStatusDoubleBuffer',0,24,22,1
	.word	.L576
	.byte	1,5,3
	.word	Dem_NvMBlockStatusDoubleBuffer
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_NvMBlockStatusDoubleBuffer')
	.sect	'.debug_abbrev'
.L309:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_NvMStorageBuffer')
	.sect	'.debug_info'
.L310:
	.word	171
	.half	3
	.word	.L311
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L259
	.byte	3
	.byte	'Dem_NvMStorageBuffer',0,24,23,1
	.word	.L577
	.byte	1,5,3
	.word	Dem_NvMStorageBuffer
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_NvMStorageBuffer')
	.sect	'.debug_abbrev'
.L311:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_EraseAllNvMDataStatus')
	.sect	'.debug_info'
.L312:
	.word	176
	.half	3
	.word	.L313
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L259
	.byte	3
	.byte	'Dem_EraseAllNvMDataStatus',0,24,25,24
	.word	.L324
	.byte	1,5,3
	.word	Dem_EraseAllNvMDataStatus
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EraseAllNvMDataStatus')
	.sect	'.debug_abbrev'
.L313:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_NvMAnyClearFailed')
	.sect	'.debug_info'
.L314:
	.word	172
	.half	3
	.word	.L315
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L259
	.byte	3
	.byte	'Dem_NvMAnyClearFailed',0,24,30,9
	.word	.L324
	.byte	1,5,3
	.word	Dem_NvMAnyClearFailed
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_NvMAnyClearFailed')
	.sect	'.debug_abbrev'
.L315:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_NvMBlockMap2NvmId')
	.sect	'.debug_info'
.L316:
	.word	172
	.half	3
	.word	.L317
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L259
	.byte	3
	.byte	'Dem_NvMBlockMap2NvmId',0,24,43,1
	.word	.L578
	.byte	1,5,3
	.word	Dem_NvMBlockMap2NvmId
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_NvMBlockMap2NvmId')
	.sect	'.debug_abbrev'
.L317:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_NvmBlockIdExtended')
	.sect	'.debug_info'
.L318:
	.word	173
	.half	3
	.word	.L319
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L259
	.byte	3
	.byte	'Dem_NvmBlockIdExtended',0,24,44,1
	.word	.L579
	.byte	1,5,3
	.word	Dem_NvmBlockIdExtended
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_NvmBlockIdExtended')
	.sect	'.debug_abbrev'
.L319:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('DemCopyFctPtrTable')
	.sect	'.debug_info'
.L320:
	.word	169
	.half	3
	.word	.L321
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L259
	.byte	3
	.byte	'DemCopyFctPtrTable',0,24,48,1
	.word	.L580
	.byte	1,5,3
	.word	DemCopyFctPtrTable
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('DemCopyFctPtrTable')
	.sect	'.debug_abbrev'
.L321:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_NvMInit')
	.sect	'.debug_loc'
.L241:
	.word	-1,.L242,0,.L322-.L242
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_NvMIsBlockAllowedToBeExcluded')
	.sect	'.debug_loc'
.L253:
	.word	-1,.L254,0,.L548-.L254
	.half	2
	.byte	138,0
	.word	0,0
.L550:
	.word	-1,.L254,.L551-.L254,.L548-.L254
	.half	1
	.byte	82
	.word	0,0
.L553:
	.word	0,0
.L552:
	.word	0,0
.L549:
	.word	-1,.L254,0,.L548-.L254
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_NvMIsBlockClearPending')
	.sect	'.debug_loc'
.L251:
	.word	-1,.L252,0,.L542-.L252
	.half	2
	.byte	138,0
	.word	0,0
.L545:
	.word	0,0
.L544:
	.word	0,0
.L543:
	.word	-1,.L252,0,.L542-.L252
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_NvMIsBlockExcluded')
	.sect	'.debug_loc'
.L255:
	.word	-1,.L256,0,.L556-.L256
	.half	2
	.byte	138,0
	.word	0,0
.L559:
	.word	0,0
.L558:
	.word	0,0
.L557:
	.word	-1,.L256,0,.L556-.L256
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_NvMIsClearPending')
	.sect	'.debug_loc'
.L247:
	.word	-1,.L248,0,.L531-.L248
	.half	2
	.byte	138,0
	.word	0,0
.L534:
	.word	0,0
.L533:
	.word	0,0
.L532:
	.word	-1,.L248,.L621-.L248,.L531-.L248
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_NvMIsImmediatePending')
	.sect	'.debug_loc'
.L257:
	.word	-1,.L258,0,.L537-.L258
	.half	2
	.byte	138,0
	.word	0,0
.L540:
	.word	0,0
.L539:
	.word	0,0
.L538:
	.word	-1,.L258,.L622-.L258,.L537-.L258
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_NvMMainFunction')
	.sect	'.debug_loc'
.L243:
	.word	-1,.L244,0,.L581-.L244
	.half	2
	.byte	138,0
	.word	.L581-.L244,.L323-.L244
	.half	2
	.byte	138,8
	.word	.L323-.L244,.L323-.L244
	.half	2
	.byte	138,0
	.word	0,0
.L372:
	.word	0,0
.L359:
	.word	0,0
.L388:
	.word	0,0
.L464:
	.word	-1,.L244,.L606-.L244,.L145-.L244
	.half	1
	.byte	95
	.word	0,0
.L413:
	.word	-1,.L244,.L588-.L244,.L69-.L244
	.half	1
	.byte	95
	.word	0,0
.L485:
	.word	-1,.L244,.L615-.L244,.L168-.L244
	.half	1
	.byte	95
	.word	0,0
.L434:
	.word	-1,.L244,.L597-.L244,.L92-.L244
	.half	1
	.byte	95
	.word	0,0
.L325:
	.word	-1,.L244,0,.L323-.L244
	.half	2
	.byte	145,120
	.word	0,0
.L406:
	.word	0,0
.L370:
	.word	0,0
.L357:
	.word	0,0
.L386:
	.word	0,0
.L352:
	.word	-1,.L244,.L582-.L244,.L32-.L244
	.half	1
	.byte	81
	.word	0,0
.L410:
	.word	0,0
.L398:
	.word	0,0
.L377:
	.word	0,0
.L482:
	.word	-1,.L244,.L614-.L244,.L166-.L244
	.half	1
	.byte	110
	.word	.L616-.L244,.L163-.L244
	.half	1
	.byte	110
	.word	0,0
.L402:
	.word	-1,.L244,.L587-.L244,.L67-.L244
	.half	1
	.byte	111
	.word	.L589-.L244,.L64-.L244
	.half	1
	.byte	111
	.word	0,0
.L431:
	.word	-1,.L244,.L596-.L244,.L90-.L244
	.half	1
	.byte	111
	.word	.L598-.L244,.L87-.L244
	.half	1
	.byte	111
	.word	0,0
.L461:
	.word	-1,.L244,.L605-.L244,.L143-.L244
	.half	1
	.byte	110
	.word	.L607-.L244,.L140-.L244
	.half	1
	.byte	110
	.word	0,0
.L342:
	.word	0,0
.L335:
	.word	0,0
.L444:
	.word	0,0
.L379:
	.word	-1,.L244,.L592-.L244,.L80-.L244
	.half	1
	.byte	82
	.word	0,0
.L449:
	.word	-1,.L244,.L610-.L244,.L156-.L244
	.half	1
	.byte	82
	.word	0,0
.L339:
	.word	-1,.L244,0,.L323-.L244
	.half	2
	.byte	145,121
	.word	0,0
.L382:
	.word	-1,.L244,0,.L323-.L244
	.half	2
	.byte	145,121
	.word	0,0
.L452:
	.word	-1,.L244,0,.L323-.L244
	.half	2
	.byte	145,121
	.word	0,0
.L460:
	.word	-1,.L244,.L462-.L244,.L602-.L244
	.half	1
	.byte	90
	.word	.L602-.L244,.L148-.L244
	.half	1
	.byte	82
	.word	.L608-.L244,.L609-.L244
	.half	1
	.byte	90
	.word	.L609-.L244,.L150-.L244
	.half	1
	.byte	82
	.word	.L150-.L244,.L138-.L244
	.half	1
	.byte	90
	.word	0,0
.L400:
	.word	-1,.L244,.L404-.L244,.L584-.L244
	.half	1
	.byte	90
	.word	.L584-.L244,.L72-.L244
	.half	1
	.byte	82
	.word	.L590-.L244,.L591-.L244
	.half	1
	.byte	90
	.word	.L591-.L244,.L74-.L244
	.half	1
	.byte	82
	.word	.L74-.L244,.L62-.L244
	.half	1
	.byte	90
	.word	0,0
.L481:
	.word	-1,.L244,.L483-.L244,.L611-.L244
	.half	1
	.byte	90
	.word	.L611-.L244,.L171-.L244
	.half	1
	.byte	82
	.word	.L617-.L244,.L618-.L244
	.half	1
	.byte	90
	.word	.L618-.L244,.L173-.L244
	.half	1
	.byte	82
	.word	.L173-.L244,.L128-.L244
	.half	1
	.byte	90
	.word	0,0
.L430:
	.word	-1,.L244,.L432-.L244,.L593-.L244
	.half	1
	.byte	90
	.word	.L593-.L244,.L95-.L244
	.half	1
	.byte	82
	.word	.L599-.L244,.L600-.L244
	.half	1
	.byte	90
	.word	.L600-.L244,.L97-.L244
	.half	1
	.byte	82
	.word	.L97-.L244,.L52-.L244
	.half	1
	.byte	90
	.word	0,0
.L450:
	.word	-1,.L244,.L601-.L244,.L107-.L244
	.half	1
	.byte	88
	.word	0,0
.L380:
	.word	-1,.L244,.L583-.L244,.L108-.L244
	.half	1
	.byte	88
	.word	0,0
.L446:
	.word	0,0
.L348:
	.word	0,0
.L433:
	.word	-1,.L244,.L594-.L244,.L595-.L244
	.half	5
	.byte	144,32,157,32,0
	.word	.L92-.L244,.L93-.L244
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L412:
	.word	-1,.L244,.L585-.L244,.L586-.L244
	.half	5
	.byte	144,32,157,32,0
	.word	.L69-.L244,.L70-.L244
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L484:
	.word	-1,.L244,.L612-.L244,.L613-.L244
	.half	5
	.byte	144,32,157,32,0
	.word	.L168-.L244,.L169-.L244
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L463:
	.word	-1,.L244,.L603-.L244,.L604-.L244
	.half	5
	.byte	144,32,157,32,0
	.word	.L145-.L244,.L146-.L244
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L330:
	.word	-1,.L244,.L332-.L244,.L32-.L244
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_NvMNormalMemCopy')
	.sect	'.debug_loc'
.L249:
	.word	-1,.L250,0,.L560-.L250
	.half	2
	.byte	138,0
	.word	0,0
.L562:
	.word	-1,.L250,0,.L568-.L250
	.half	1
	.byte	100
	.word	0,0
.L564:
	.word	-1,.L250,0,.L568-.L250
	.half	1
	.byte	101
	.word	0,0
.L574:
	.word	0,0
.L566:
	.word	-1,.L250,0,.L568-.L250
	.half	1
	.byte	84
	.word	0,0
.L570:
	.word	0,0
.L572:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_NvMShutdown')
	.sect	'.debug_loc'
.L245:
	.word	-1,.L246,0,.L492-.L246
	.half	2
	.byte	138,0
	.word	0,0
.L517:
	.word	0,0
.L508:
	.word	0,0
.L519:
	.word	0,0
.L516:
	.word	0,0
.L507:
	.word	0,0
.L518:
	.word	0,0
.L504:
	.word	-1,.L246,.L619-.L246,.L189-.L246
	.half	1
	.byte	81
	.word	0,0
.L493:
	.word	-1,.L246,.L620-.L246,.L492-.L246
	.half	1
	.byte	88
	.word	0,0
.L501:
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L1089:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Dem_NvMInit')
	.sect	'.debug_frame'
	.word	24
	.word	.L1089,.L242,.L322-.L242
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Dem_NvMMainFunction')
	.sect	'.debug_frame'
	.word	36
	.word	.L1089,.L244,.L323-.L244
	.byte	4
	.word	(.L581-.L244)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L323-.L581)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_NvMShutdown')
	.sect	'.debug_frame'
	.word	12
	.word	.L1089,.L246,.L492-.L246
	.sdecl	'.debug_frame',debug,cluster('Dem_NvMIsClearPending')
	.sect	'.debug_frame'
	.word	24
	.word	.L1089,.L248,.L531-.L248
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_NvMNormalMemCopy')
	.sect	'.debug_frame'
	.word	12
	.word	.L1089,.L250,.L560-.L250
	.sdecl	'.debug_frame',debug,cluster('Dem_NvMIsBlockClearPending')
	.sect	'.debug_frame'
	.word	24
	.word	.L1089,.L252,.L542-.L252
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_NvMIsBlockAllowedToBeExcluded')
	.sect	'.debug_frame'
	.word	24
	.word	.L1089,.L254,.L548-.L254
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_NvMIsBlockExcluded')
	.sect	'.debug_frame'
	.word	24
	.word	.L1089,.L256,.L556-.L256
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Dem_NvMIsImmediatePending')
	.sect	'.debug_frame'
	.word	24
	.word	.L1089,.L258,.L537-.L258
	.byte	8,19,8,20,8,21,8,22,8,23,0,0

; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   538  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   539  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED != DEM_CFG_ERASE_ALL_OFF)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   540  Dem_HashIdCheckResultType Dem_NvmIsHashIDChanged(void)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   541  {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   542  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   543      Dem_NvmResultType NvmResult;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   544      uint8 i;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   545      Dem_HashIdCheckResultType HashCheckResult = DEM_HASH_ID_NO_CHANGE;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   546  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   547      NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_DEM_HASH_ID);
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   548      /* Data read successfully */
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   549      if (NvmResult == DEM_NVM_SUCCESS)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   550      {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   551          for(i=0;i<DEM_NVM_HASH_ID_SIZE;i++)
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   552          {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   553              if(Dem_HashIdInNvm[i] != Dem_HashIdInRom[i])
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   554              {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   555                  HashCheckResult = DEM_HASH_ID_MISMATCH;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   556                  break;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   557              }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   558          }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   559      }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   560      else
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   561      {
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   562          HashCheckResult = DEM_HASH_ID_CHECK_NOT_POSSIBLE;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   563      }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   564  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   565      return HashCheckResult;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   566  #else
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   567      return DEM_HASH_ID_CHECK_DISABLED;
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   568  #endif
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   569  }
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   570  #endif
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   571  
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   572  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   573  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.c	   574  

	; Module end
