	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc2792a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Dem\\src\\Dem_ConsisChk.src BSW\\src\\BSW\\Gen\\Dem\\src\\consischk\\Dem_ConsisChk.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Dem\\src\\consischk\\Dem_ConsisChk.c'

	
$TC16X
	
	.sdecl	'.text.Dem_ConsisChk.Dem_ConsistencyCheckForFailedDTC',code,cluster('Dem_ConsistencyCheckForFailedDTC')
	.sect	'.text.Dem_ConsisChk.Dem_ConsistencyCheckForFailedDTC'
	.align	2
	

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	     1  
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	     2  #include "Dem_ConsisChk.h"
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	     3  
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	     4  #include "Dem_Bfm.h"
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	     5  
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	     6  #include "Dem_Mapping.h"
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	     7  
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	     8  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	     9  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    10  
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    11  static void Dem_ConsistencyCheckForFailedDTC(void)
; Function Dem_ConsistencyCheckForFailedDTC
.L53:
Dem_ConsistencyCheckForFailedDTC:	.type	func
	sub.a	a10,#8
.L219:

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    12  {
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    13  	uint16_least LocId, EventMemStatus;
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    14  	uint32 MaxFailedTimeIdinEvMem = 0;
	mov	d3,#0
.L104:

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    15  	Dem_EventIdType EventIdForMaxFailedTimeId = 0;
	mov	d0,#0
.L105:

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    16  	Dem_DtcIdType LastFailed_DtcId;
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    17  
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    18  	for (Dem_EvMemEventMemoryLocIteratorNew     (&LocId, DEM_CFG_EVMEM_MEMID_PRIMARY);
	lea	a15,[a10]0
.L112:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   541  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   542  DEM_INLINE void Dem_EvMemSetEventMemTrigger(uint16_least LocId, Dem_TriggerType Trigger)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   543  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   544     DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   545     DEM_EVMEM_USEVAR(Trigger);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   546  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   547  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   548     Dem_EvMemEventMemory[LocId].Trigger = Trigger;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   549  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   550  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   551  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   552  /* --- Data --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   553  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is used to get address of element data and to fill the data block */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   554  DEM_INLINE uint8 *Dem_EvMemGetEventMemDataByPtr(Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   555  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   557  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   558  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   559  DEM_INLINE uint8 *Dem_EvMemGetEventMemData(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   560  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   561     return Dem_EvMemGetEventMemDataByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   562  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   563  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   564  DEM_INLINE uint16 Dem_EvMemGetEventMemDataSize(void)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   565  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   566     return DEM_SIZEOF_VAR(Dem_EvMemEventMemory[0].Data);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   567  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   568  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   569  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   570     Event Memory Status
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   571     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   572  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   573  /* the bits DEM_EVMEM_STSMASK_STORED and DEM_EVMEM_STSMASK_DELETED shall not be set at the same time */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   574  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   575  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedSLC(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   576  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   577     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED)) == (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   578  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   579  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   580  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestCompleteTFC(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   581  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   582      return ((Status & DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC) == DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   583  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   584  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   585  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedTFC (uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   586  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   587      return ((Status & DEM_EVMEM_STSMASK_TESTFAILED_TFC) == DEM_EVMEM_STSMASK_TESTFAILED_TFC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   588  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   589  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   590  DEM_INLINE Dem_boolean_least Dem_EvMemIsStored(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   591  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   592     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == DEM_EVMEM_STSMASK_STORED);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   593  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   594  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   595  DEM_INLINE Dem_boolean_least Dem_EvMemIsEmpty(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   596  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   597     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == 0u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   598  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   599  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   600  DEM_INLINE Dem_boolean_least Dem_EvMemIsDeleted(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   601  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   602     DEM_EVMEM_USEVAR(Status);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   603  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   604  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   605     return (Dem_boolean_least)((Status & DEM_EVMEM_STSMASK_DELETED) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   606  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   607     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   608  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   609  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   610  DEM_INLINE uint16_least Dem_EvMemSetToEmpty(void)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   611  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   612  	return 0u;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   613  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   614  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   615  DEM_INLINE uint16_least Dem_EvMemSetToDelete(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   616  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   617  	DEM_EVMEM_USEVAR(Status);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   618  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   619  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   620  	return (Status | DEM_EVMEM_STSMASK_DELETED) & (~DEM_EVMEM_STSMASK_STORED);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   621  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   622      return Dem_EvMemSetToEmpty();
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   623  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   624  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   625  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   626  DEM_INLINE Dem_boolean_least Dem_EvMemGetShadowVisibility(void)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   627  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   628  	return DEM_CFG_EVMEM_SHADOW_ENTRIES_VISIBLE;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   629  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   630  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   631  DEM_INLINE Dem_boolean_least Dem_EvMemIsVisible(uint16_least Status, Dem_boolean_least ShadowEntriesVisible)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   632  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   633  	return (Dem_boolean_least)( ( Dem_EvMemIsStored(Status)) ||
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   634  			                    (!Dem_EvMemIsEmpty (Status) && Dem_EvMemGetShadowVisibility() && ShadowEntriesVisible));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   635  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   636  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   637  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   638     Event Memory Iterators
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   639     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   640  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   641  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   642  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   643  DEM_INLINE uint16_least Dem_EvMemGetEventMemStartLocId(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   644  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   645  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   646  	DEM_EVMEM_USEVAR(MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   647  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   648  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   649  	return 0;
	mov	d1,#0

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   649  	return 0;      (inlined)
	j	.L2

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   653  }      (inlined)
.L2:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   650  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   651  	return Dem_EvMemLocIdList[MemId];
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   652  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   653  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   654  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   655  DEM_INLINE uint16_least Dem_EvMemGetEventMemEndLocId(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   656  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   657  	DEM_EVMEM_USEVAR(MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   658  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   659  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   660  	return DEM_CFG_MAX_NUMBER_EVENT_ENTRY_PRIMARY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   661  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   662  	return Dem_EvMemLocIdList[MemId+1u];
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   663  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   664  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   665  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   666  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   667  DEM_INLINE void Dem_EvMemEventMemoryLocIteratorNew (uint16_least *LocId, uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   668  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   669      *LocId = Dem_EvMemGetEventMemStartLocId(MemId);
	st.w	[a15],d1
.L113:

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    19  	     Dem_EvMemEventMemoryLocIteratorIsValid (&LocId, DEM_CFG_EVMEM_MEMID_PRIMARY);
	j	.L3

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    20  	     Dem_EvMemEventMemoryLocIteratorNext    (&LocId, DEM_CFG_EVMEM_MEMID_PRIMARY))
.L4:

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    21  	{
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    22  	    EventMemStatus = Dem_EvMemGetEventMemStatus (LocId);
	ld.w	d1,[a10]
.L124:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
	movh.a	a2,#@his(Dem_EvMemEventMemory)
	lea	a2,[a2]@los(Dem_EvMemEventMemory)
.L248:
	mul	d15,d1,#20
	addsc.a	a15,a2,d15,#0
.L132:
	ld.hu	d2,[a15]0
.L220:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;      (inlined)
	j	.L5

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }      (inlined)
.L5:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);      (inlined)
	j	.L6

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }      (inlined)
.L6:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   541  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   542  DEM_INLINE void Dem_EvMemSetEventMemTrigger(uint16_least LocId, Dem_TriggerType Trigger)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   543  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   544     DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   545     DEM_EVMEM_USEVAR(Trigger);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   546  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   547  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   548     Dem_EvMemEventMemory[LocId].Trigger = Trigger;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   549  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   550  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   551  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   552  /* --- Data --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   553  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is used to get address of element data and to fill the data block */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   554  DEM_INLINE uint8 *Dem_EvMemGetEventMemDataByPtr(Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   555  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   557  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   558  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   559  DEM_INLINE uint8 *Dem_EvMemGetEventMemData(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   560  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   561     return Dem_EvMemGetEventMemDataByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   562  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   563  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   564  DEM_INLINE uint16 Dem_EvMemGetEventMemDataSize(void)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   565  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   566     return DEM_SIZEOF_VAR(Dem_EvMemEventMemory[0].Data);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   567  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   568  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   569  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   570     Event Memory Status
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   571     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   572  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   573  /* the bits DEM_EVMEM_STSMASK_STORED and DEM_EVMEM_STSMASK_DELETED shall not be set at the same time */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   574  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   575  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedSLC(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   576  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   577     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED)) == (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   578  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   579  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   580  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestCompleteTFC(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   581  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   582      return ((Status & DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC) == DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   583  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   584  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   585  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedTFC (uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   586  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   587      return ((Status & DEM_EVMEM_STSMASK_TESTFAILED_TFC) == DEM_EVMEM_STSMASK_TESTFAILED_TFC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   588  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   589  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   590  DEM_INLINE Dem_boolean_least Dem_EvMemIsStored(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   591  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   592     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == DEM_EVMEM_STSMASK_STORED);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   593  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   594  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   595  DEM_INLINE Dem_boolean_least Dem_EvMemIsEmpty(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   596  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   597     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == 0u);
	mov	d1,#4224
.L249:
	and	d1,d2
.L250:
	eq	d15,d1,#0
.L251:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   597     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == 0u);      (inlined)
	j	.L7

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   598  }      (inlined)
.L7:

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    23  
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    24  	    //check for the location is empty
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    25  	    if (!Dem_EvMemIsEmpty (EventMemStatus))
	jne	d15,#0,.L8
.L129:

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    26  	    {
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    27  	        //Get the TimeStamp of the latest failed event
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    28  	        if((EventMemStatus & DEM_EVMEM_STSMASK_TESTFAILED) != 0u)
	jz.t	d2:0,.L9
.L130:

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    29  	        {
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    30  	            //Get the maximum TimeStamp and the eventId for that particular location
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    31  	            if(Dem_EvMemEventMemory[LocId].TimeId > MaxFailedTimeIdinEvMem)
	ld.w	d1,[a10]
.L252:
	mul	d15,d1,#20
	addsc.a	a15,a2,d15,#0
.L253:
	ld.w	d15,[a15]16
.L254:
	jge.u	d3,d15,.L10
.L255:

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    32  	            {
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    33  	                MaxFailedTimeIdinEvMem = Dem_EvMemEventMemory[LocId].TimeId;
	mov	d3,d15
.L256:

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    34  	                EventIdForMaxFailedTimeId = Dem_EvMemGetEventMemEventId(LocId);
	ld.w	d0,[a10]
.L110:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
	mul	d15,d0,#20
	addsc.a	a15,a2,d15,#0
.L141:
	ld.hu	d0,[a15]2
.L221:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;      (inlined)
	j	.L11

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }      (inlined)
.L11:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);      (inlined)
	j	.L12

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }      (inlined)
.L12:
.L10:
.L9:
.L8:
	lea	a15,[a10]0
.L146:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   541  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   542  DEM_INLINE void Dem_EvMemSetEventMemTrigger(uint16_least LocId, Dem_TriggerType Trigger)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   543  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   544     DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   545     DEM_EVMEM_USEVAR(Trigger);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   546  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   547  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   548     Dem_EvMemEventMemory[LocId].Trigger = Trigger;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   549  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   550  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   551  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   552  /* --- Data --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   553  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is used to get address of element data and to fill the data block */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   554  DEM_INLINE uint8 *Dem_EvMemGetEventMemDataByPtr(Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   555  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   557  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   558  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   559  DEM_INLINE uint8 *Dem_EvMemGetEventMemData(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   560  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   561     return Dem_EvMemGetEventMemDataByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   562  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   563  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   564  DEM_INLINE uint16 Dem_EvMemGetEventMemDataSize(void)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   565  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   566     return DEM_SIZEOF_VAR(Dem_EvMemEventMemory[0].Data);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   567  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   568  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   569  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   570     Event Memory Status
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   571     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   572  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   573  /* the bits DEM_EVMEM_STSMASK_STORED and DEM_EVMEM_STSMASK_DELETED shall not be set at the same time */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   574  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   575  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedSLC(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   576  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   577     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED)) == (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   578  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   579  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   580  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestCompleteTFC(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   581  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   582      return ((Status & DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC) == DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   583  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   584  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   585  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedTFC (uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   586  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   587      return ((Status & DEM_EVMEM_STSMASK_TESTFAILED_TFC) == DEM_EVMEM_STSMASK_TESTFAILED_TFC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   588  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   589  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   590  DEM_INLINE Dem_boolean_least Dem_EvMemIsStored(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   591  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   592     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == DEM_EVMEM_STSMASK_STORED);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   593  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   594  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   595  DEM_INLINE Dem_boolean_least Dem_EvMemIsEmpty(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   596  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   597     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == 0u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   598  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   599  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   600  DEM_INLINE Dem_boolean_least Dem_EvMemIsDeleted(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   601  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   602     DEM_EVMEM_USEVAR(Status);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   603  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   604  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   605     return (Dem_boolean_least)((Status & DEM_EVMEM_STSMASK_DELETED) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   606  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   607     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   608  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   609  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   610  DEM_INLINE uint16_least Dem_EvMemSetToEmpty(void)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   611  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   612  	return 0u;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   613  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   614  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   615  DEM_INLINE uint16_least Dem_EvMemSetToDelete(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   616  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   617  	DEM_EVMEM_USEVAR(Status);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   618  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   619  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   620  	return (Status | DEM_EVMEM_STSMASK_DELETED) & (~DEM_EVMEM_STSMASK_STORED);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   621  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   622      return Dem_EvMemSetToEmpty();
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   623  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   624  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   625  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   626  DEM_INLINE Dem_boolean_least Dem_EvMemGetShadowVisibility(void)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   627  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   628  	return DEM_CFG_EVMEM_SHADOW_ENTRIES_VISIBLE;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   629  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   630  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   631  DEM_INLINE Dem_boolean_least Dem_EvMemIsVisible(uint16_least Status, Dem_boolean_least ShadowEntriesVisible)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   632  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   633  	return (Dem_boolean_least)( ( Dem_EvMemIsStored(Status)) ||
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   634  			                    (!Dem_EvMemIsEmpty (Status) && Dem_EvMemGetShadowVisibility() && ShadowEntriesVisible));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   635  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   636  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   637  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   638     Event Memory Iterators
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   639     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   640  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   641  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   642  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   643  DEM_INLINE uint16_least Dem_EvMemGetEventMemStartLocId(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   644  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   645  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   646  	DEM_EVMEM_USEVAR(MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   647  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   648  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   649  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   650  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   651  	return Dem_EvMemLocIdList[MemId];
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   652  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   653  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   654  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   655  DEM_INLINE uint16_least Dem_EvMemGetEventMemEndLocId(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   656  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   657  	DEM_EVMEM_USEVAR(MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   658  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   659  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   660  	return DEM_CFG_MAX_NUMBER_EVENT_ENTRY_PRIMARY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   661  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   662  	return Dem_EvMemLocIdList[MemId+1u];
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   663  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   664  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   665  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   666  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   667  DEM_INLINE void Dem_EvMemEventMemoryLocIteratorNew (uint16_least *LocId, uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   668  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   669      *LocId = Dem_EvMemGetEventMemStartLocId(MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   670  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   671  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   672  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   673  DEM_INLINE Dem_boolean_least Dem_EvMemEventMemoryLocIteratorIsValid (const uint16_least *LocId, uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   674  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   675      return (Dem_boolean_least)(*LocId < Dem_EvMemGetEventMemEndLocId(MemId));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   676  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   677  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   678  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   679  DEM_INLINE void Dem_EvMemEventMemoryLocIteratorNext (uint16_least *LocId, uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   680  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   681      DEM_EVMEM_USEVAR(MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   682      (*LocId)++;
	ld.w	d1,[a15]
.L257:
	add	d1,#1
	st.w	[a15],d1
.L3:
	lea	a15,[a10]0
.L153:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   660  	return DEM_CFG_MAX_NUMBER_EVENT_ENTRY_PRIMARY;      (inlined)
	j	.L13

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   664  }      (inlined)
.L13:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   541  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   542  DEM_INLINE void Dem_EvMemSetEventMemTrigger(uint16_least LocId, Dem_TriggerType Trigger)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   543  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   544     DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   545     DEM_EVMEM_USEVAR(Trigger);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   546  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   547  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   548     Dem_EvMemEventMemory[LocId].Trigger = Trigger;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   549  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   550  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   551  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   552  /* --- Data --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   553  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is used to get address of element data and to fill the data block */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   554  DEM_INLINE uint8 *Dem_EvMemGetEventMemDataByPtr(Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   555  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   557  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   558  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   559  DEM_INLINE uint8 *Dem_EvMemGetEventMemData(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   560  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   561     return Dem_EvMemGetEventMemDataByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   562  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   563  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   564  DEM_INLINE uint16 Dem_EvMemGetEventMemDataSize(void)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   565  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   566     return DEM_SIZEOF_VAR(Dem_EvMemEventMemory[0].Data);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   567  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   568  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   569  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   570     Event Memory Status
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   571     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   572  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   573  /* the bits DEM_EVMEM_STSMASK_STORED and DEM_EVMEM_STSMASK_DELETED shall not be set at the same time */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   574  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   575  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedSLC(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   576  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   577     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED)) == (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   578  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   579  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   580  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestCompleteTFC(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   581  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   582      return ((Status & DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC) == DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   583  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   584  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   585  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedTFC (uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   586  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   587      return ((Status & DEM_EVMEM_STSMASK_TESTFAILED_TFC) == DEM_EVMEM_STSMASK_TESTFAILED_TFC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   588  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   589  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   590  DEM_INLINE Dem_boolean_least Dem_EvMemIsStored(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   591  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   592     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == DEM_EVMEM_STSMASK_STORED);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   593  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   594  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   595  DEM_INLINE Dem_boolean_least Dem_EvMemIsEmpty(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   596  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   597     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == 0u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   598  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   599  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   600  DEM_INLINE Dem_boolean_least Dem_EvMemIsDeleted(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   601  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   602     DEM_EVMEM_USEVAR(Status);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   603  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   604  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   605     return (Dem_boolean_least)((Status & DEM_EVMEM_STSMASK_DELETED) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   606  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   607     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   608  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   609  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   610  DEM_INLINE uint16_least Dem_EvMemSetToEmpty(void)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   611  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   612  	return 0u;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   613  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   614  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   615  DEM_INLINE uint16_least Dem_EvMemSetToDelete(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   616  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   617  	DEM_EVMEM_USEVAR(Status);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   618  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   619  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   620  	return (Status | DEM_EVMEM_STSMASK_DELETED) & (~DEM_EVMEM_STSMASK_STORED);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   621  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   622      return Dem_EvMemSetToEmpty();
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   623  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   624  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   625  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   626  DEM_INLINE Dem_boolean_least Dem_EvMemGetShadowVisibility(void)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   627  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   628  	return DEM_CFG_EVMEM_SHADOW_ENTRIES_VISIBLE;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   629  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   630  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   631  DEM_INLINE Dem_boolean_least Dem_EvMemIsVisible(uint16_least Status, Dem_boolean_least ShadowEntriesVisible)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   632  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   633  	return (Dem_boolean_least)( ( Dem_EvMemIsStored(Status)) ||
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   634  			                    (!Dem_EvMemIsEmpty (Status) && Dem_EvMemGetShadowVisibility() && ShadowEntriesVisible));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   635  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   636  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   637  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   638     Event Memory Iterators
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   639     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   640  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   641  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   642  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   643  DEM_INLINE uint16_least Dem_EvMemGetEventMemStartLocId(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   644  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   645  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   646  	DEM_EVMEM_USEVAR(MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   647  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   648  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   649  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   650  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   651  	return Dem_EvMemLocIdList[MemId];
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   652  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   653  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   654  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   655  DEM_INLINE uint16_least Dem_EvMemGetEventMemEndLocId(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   656  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   657  	DEM_EVMEM_USEVAR(MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   658  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   659  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   660  	return DEM_CFG_MAX_NUMBER_EVENT_ENTRY_PRIMARY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   661  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   662  	return Dem_EvMemLocIdList[MemId+1u];
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   663  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   664  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   665  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   666  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   667  DEM_INLINE void Dem_EvMemEventMemoryLocIteratorNew (uint16_least *LocId, uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   668  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   669      *LocId = Dem_EvMemGetEventMemStartLocId(MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   670  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   671  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   672  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   673  DEM_INLINE Dem_boolean_least Dem_EvMemEventMemoryLocIteratorIsValid (const uint16_least *LocId, uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   674  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   675      return (Dem_boolean_least)(*LocId < Dem_EvMemGetEventMemEndLocId(MemId));
	ld.w	d15,[a15]
.L258:
	lt.u	d15,d15,#5
.L259:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   675      return (Dem_boolean_least)(*LocId < Dem_EvMemGetEventMemEndLocId(MemId));      (inlined)
	j	.L14

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   676  }      (inlined)
.L14:
	jne	d15,#0,.L4
.L164:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
	movh.a	a15,#@his(Dem_MapEventIdToDtcId)
	lea	a15,[a15]@los(Dem_MapEventIdToDtcId)
.L260:
	addsc.a	a15,a15,d0,#1
	ld.hu	d0,[a15]0
.L222:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];      (inlined)
	j	.L15

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }      (inlined)
.L15:

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    35  	            }
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    36  	        }
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    37  	    }
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    38  	}
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    39  
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    40  	//Get the Last Failed DTC ID
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    41  	LastFailed_DtcId = Dem_DtcIdFromEventId (EventIdForMaxFailedTimeId);
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    42  
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    43  	//check if the Dtc Id already exist in the EvMem and it is the recently updated location
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    44  	if((MaxFailedTimeIdinEvMem != 0u) && (Dem_isDtcIdValid (LastFailed_DtcId)))
	jeq	d3,#0,.L16
.L168:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
	mov	d1,#0
.L261:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
	jeq	d0,#0,.L17
.L262:
	ge.u	d15,d0,#5
.L263:
	cmovn	d1,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
.L18:
.L17:
	j	.L19

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }      (inlined)
.L19:
	jeq	d1,#0,.L20
.L169:

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    45  	{
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    46  		//Update the Id of the DTCOccurenceByTime in the GenericNvdata
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    47  		Dem_EvMemGenSetDtcByOccIndex(LastFailed_DtcId,DEM_MOST_RECENT_FAILED_DTC);
	mov	d15,#2
.L172:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     3  #ifndef DEM_EVMEMGEN_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     4  #define DEM_EVMEMGEN_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     6  #include "Dem_EvMemGenTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     7  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     8  #include "Dem_EvMemBase.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     9  #include "Dem_DTCs.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    10  #include "Dem_GenericNvData.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    11  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    13  #define DEM_EVMEMGEN_MEMORY_BASE   Dem_GenericNvData
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    15  #if DEM_CFG_EVMEMGENERIC_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    16     #define DEM_EVMEMGEN_GET(OBJ)      (OBJ)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    17     #define DEM_EVMEMGEN_SET(OBJ,VAL)  (OBJ) = (VAL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    18     #define DEM_EVMEMGEN_CLEAROBJ(OBJ) DEM_EVMEM_CLEAROBJ(OBJ)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    19  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    20     #define DEM_EVMEMGEN_GET(OBJ)      0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    21     #define DEM_EVMEMGEN_SET(OBJ,VAL)  do {} while (0)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    22     #define DEM_EVMEMGEN_CLEAROBJ(OBJ) do {} while (0)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    23  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    25  /* -------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    26     service Dem_GetDTCByOccurrenceTime
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    27     -------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    28   */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    30  /* Get stored DtcId by occurrence */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    31  DEM_INLINE Dem_DtcIdType Dem_EvMemGenGetDtcIdByOccIndex(uint32 OccIndex)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    33  #if DEM_CFG_EVMEMGENERIC_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    34      return DEM_EVMEMGEN_GET(DEM_EVMEMGEN_MEMORY_BASE.DtcIdsByOccurrenceTime[OccIndex]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    35  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    36      DEM_UNUSED_PARAM(OccIndex);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    37      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    41  /* Set stored DtcId by occurrence */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    42  DEM_INLINE void Dem_EvMemGenSetDtcByOccIndex(Dem_DtcIdType DtcId,uint32 OccIndex)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    43  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    44  #if DEM_CFG_EVMEMGENERIC_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    45      DEM_EVMEMGEN_SET(DEM_EVMEMGEN_MEMORY_BASE.DtcIdsByOccurrenceTime[OccIndex],DtcId);
	movh.a	a15,#@his(Dem_GenericNvData)
	lea	a15,[a15]@los(Dem_GenericNvData)
	addsc.a	a15,a15,d15,#1
	st.h	[a15]8,d0
.L20:
.L16:

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    48  	}
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    49  }
	ret
.L94:
	
__Dem_ConsistencyCheckForFailedDTC_function_end:
	.size	Dem_ConsistencyCheckForFailedDTC,__Dem_ConsistencyCheckForFailedDTC_function_end-Dem_ConsistencyCheckForFailedDTC
.L71:
	; End of function
	
	.sdecl	'.text.Dem_ConsisChk.Dem_ConsistencyCheckForConfirmedDTC',code,cluster('Dem_ConsistencyCheckForConfirmedDTC')
	.sect	'.text.Dem_ConsisChk.Dem_ConsistencyCheckForConfirmedDTC'
	.align	2
	

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    50  
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    51  static void Dem_ConsistencyCheckForConfirmedDTC(void)
; Function Dem_ConsistencyCheckForConfirmedDTC
.L55:
Dem_ConsistencyCheckForConfirmedDTC:	.type	func
	sub.a	a10,#8
.L223:

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    52  {
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    53  	uint16_least LocId, EventMemStatus;
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    54  	uint32 MaxConfirmedTimeIdinEvMem = 0;
	mov	d3,#0
.L184:

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    55  	Dem_EventIdType EventIdForMaxConfirmedTimeId = 0;
	mov	d0,#0
.L185:

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    56  	Dem_DtcIdType LastConfirmed_DtcId;
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    57  
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    58  	for (Dem_EvMemEventMemoryLocIteratorNew     (&LocId, DEM_CFG_EVMEM_MEMID_PRIMARY);
	lea	a15,[a10]0
.L189:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   541  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   542  DEM_INLINE void Dem_EvMemSetEventMemTrigger(uint16_least LocId, Dem_TriggerType Trigger)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   543  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   544     DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   545     DEM_EVMEM_USEVAR(Trigger);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   546  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   547  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   548     Dem_EvMemEventMemory[LocId].Trigger = Trigger;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   549  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   550  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   551  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   552  /* --- Data --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   553  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is used to get address of element data and to fill the data block */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   554  DEM_INLINE uint8 *Dem_EvMemGetEventMemDataByPtr(Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   555  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   557  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   558  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   559  DEM_INLINE uint8 *Dem_EvMemGetEventMemData(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   560  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   561     return Dem_EvMemGetEventMemDataByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   562  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   563  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   564  DEM_INLINE uint16 Dem_EvMemGetEventMemDataSize(void)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   565  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   566     return DEM_SIZEOF_VAR(Dem_EvMemEventMemory[0].Data);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   567  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   568  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   569  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   570     Event Memory Status
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   571     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   572  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   573  /* the bits DEM_EVMEM_STSMASK_STORED and DEM_EVMEM_STSMASK_DELETED shall not be set at the same time */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   574  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   575  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedSLC(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   576  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   577     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED)) == (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   578  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   579  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   580  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestCompleteTFC(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   581  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   582      return ((Status & DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC) == DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   583  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   584  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   585  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedTFC (uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   586  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   587      return ((Status & DEM_EVMEM_STSMASK_TESTFAILED_TFC) == DEM_EVMEM_STSMASK_TESTFAILED_TFC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   588  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   589  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   590  DEM_INLINE Dem_boolean_least Dem_EvMemIsStored(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   591  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   592     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == DEM_EVMEM_STSMASK_STORED);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   593  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   594  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   595  DEM_INLINE Dem_boolean_least Dem_EvMemIsEmpty(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   596  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   597     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == 0u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   598  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   599  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   600  DEM_INLINE Dem_boolean_least Dem_EvMemIsDeleted(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   601  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   602     DEM_EVMEM_USEVAR(Status);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   603  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   604  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   605     return (Dem_boolean_least)((Status & DEM_EVMEM_STSMASK_DELETED) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   606  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   607     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   608  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   609  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   610  DEM_INLINE uint16_least Dem_EvMemSetToEmpty(void)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   611  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   612  	return 0u;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   613  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   614  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   615  DEM_INLINE uint16_least Dem_EvMemSetToDelete(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   616  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   617  	DEM_EVMEM_USEVAR(Status);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   618  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   619  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   620  	return (Status | DEM_EVMEM_STSMASK_DELETED) & (~DEM_EVMEM_STSMASK_STORED);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   621  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   622      return Dem_EvMemSetToEmpty();
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   623  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   624  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   625  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   626  DEM_INLINE Dem_boolean_least Dem_EvMemGetShadowVisibility(void)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   627  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   628  	return DEM_CFG_EVMEM_SHADOW_ENTRIES_VISIBLE;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   629  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   630  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   631  DEM_INLINE Dem_boolean_least Dem_EvMemIsVisible(uint16_least Status, Dem_boolean_least ShadowEntriesVisible)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   632  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   633  	return (Dem_boolean_least)( ( Dem_EvMemIsStored(Status)) ||
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   634  			                    (!Dem_EvMemIsEmpty (Status) && Dem_EvMemGetShadowVisibility() && ShadowEntriesVisible));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   635  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   636  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   637  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   638     Event Memory Iterators
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   639     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   640  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   641  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   642  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   643  DEM_INLINE uint16_least Dem_EvMemGetEventMemStartLocId(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   644  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   645  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   646  	DEM_EVMEM_USEVAR(MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   647  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   648  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   649  	return 0;
	mov	d1,#0

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   649  	return 0;      (inlined)
	j	.L21

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   653  }      (inlined)
.L21:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   650  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   651  	return Dem_EvMemLocIdList[MemId];
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   652  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   653  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   654  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   655  DEM_INLINE uint16_least Dem_EvMemGetEventMemEndLocId(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   656  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   657  	DEM_EVMEM_USEVAR(MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   658  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   659  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   660  	return DEM_CFG_MAX_NUMBER_EVENT_ENTRY_PRIMARY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   661  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   662  	return Dem_EvMemLocIdList[MemId+1u];
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   663  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   664  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   665  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   666  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   667  DEM_INLINE void Dem_EvMemEventMemoryLocIteratorNew (uint16_least *LocId, uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   668  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   669      *LocId = Dem_EvMemGetEventMemStartLocId(MemId);
	st.w	[a15],d1
.L190:

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    59  	     Dem_EvMemEventMemoryLocIteratorIsValid (&LocId, DEM_CFG_EVMEM_MEMID_PRIMARY);
	j	.L22

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    60  	     Dem_EvMemEventMemoryLocIteratorNext    (&LocId, DEM_CFG_EVMEM_MEMID_PRIMARY))
.L23:

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    61  
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    62  	{
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    63  	    EventMemStatus = Dem_EvMemGetEventMemStatus (LocId);
	ld.w	d1,[a10]
.L194:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
	movh.a	a2,#@his(Dem_EvMemEventMemory)
	lea	a2,[a2]@los(Dem_EvMemEventMemory)
.L268:
	mul	d15,d1,#20
	addsc.a	a15,a2,d15,#0
.L199:
	ld.hu	d2,[a15]0
.L224:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;      (inlined)
	j	.L24

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }      (inlined)
.L24:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);      (inlined)
	j	.L25

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }      (inlined)
.L25:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   541  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   542  DEM_INLINE void Dem_EvMemSetEventMemTrigger(uint16_least LocId, Dem_TriggerType Trigger)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   543  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   544     DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   545     DEM_EVMEM_USEVAR(Trigger);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   546  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   547  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   548     Dem_EvMemEventMemory[LocId].Trigger = Trigger;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   549  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   550  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   551  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   552  /* --- Data --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   553  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is used to get address of element data and to fill the data block */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   554  DEM_INLINE uint8 *Dem_EvMemGetEventMemDataByPtr(Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   555  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   557  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   558  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   559  DEM_INLINE uint8 *Dem_EvMemGetEventMemData(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   560  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   561     return Dem_EvMemGetEventMemDataByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   562  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   563  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   564  DEM_INLINE uint16 Dem_EvMemGetEventMemDataSize(void)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   565  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   566     return DEM_SIZEOF_VAR(Dem_EvMemEventMemory[0].Data);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   567  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   568  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   569  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   570     Event Memory Status
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   571     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   572  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   573  /* the bits DEM_EVMEM_STSMASK_STORED and DEM_EVMEM_STSMASK_DELETED shall not be set at the same time */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   574  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   575  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedSLC(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   576  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   577     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED)) == (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   578  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   579  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   580  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestCompleteTFC(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   581  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   582      return ((Status & DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC) == DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   583  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   584  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   585  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedTFC (uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   586  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   587      return ((Status & DEM_EVMEM_STSMASK_TESTFAILED_TFC) == DEM_EVMEM_STSMASK_TESTFAILED_TFC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   588  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   589  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   590  DEM_INLINE Dem_boolean_least Dem_EvMemIsStored(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   591  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   592     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == DEM_EVMEM_STSMASK_STORED);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   593  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   594  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   595  DEM_INLINE Dem_boolean_least Dem_EvMemIsEmpty(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   596  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   597     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == 0u);
	mov	d1,#4224
.L269:
	and	d1,d2
.L270:
	eq	d15,d1,#0
.L271:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   597     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == 0u);      (inlined)
	j	.L26

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   598  }      (inlined)
.L26:

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    64  
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    65  	    //check for the location is empty
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    66  	    if (!Dem_EvMemIsEmpty (EventMemStatus))
	jne	d15,#0,.L27
.L197:

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    67  	    {
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    68  	        //Get the TimeStamp for latest confirmed event
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    69  	        if((EventMemStatus & DEM_EVMEM_STSMASK_CONFIRMED) != 0u)
	jz.t	d2:3,.L28
.L198:

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    70  	        {
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    71  	            //Get the maximum TimeStamp and the eventId for that particular location
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    72  	            if(Dem_EvMemEventMemory[LocId].TimeId > MaxConfirmedTimeIdinEvMem)
	ld.w	d1,[a10]
.L272:
	mul	d15,d1,#20
	addsc.a	a15,a2,d15,#0
.L273:
	ld.w	d15,[a15]16
.L274:
	jge.u	d3,d15,.L29
.L275:

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    73  	            {
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    74  	                MaxConfirmedTimeIdinEvMem = Dem_EvMemEventMemory[LocId].TimeId;
	mov	d3,d15
.L276:

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    75  	                EventIdForMaxConfirmedTimeId = Dem_EvMemGetEventMemEventId(LocId);
	ld.w	d0,[a10]
.L188:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
	mul	d15,d0,#20
	addsc.a	a15,a2,d15,#0
.L202:
	ld.hu	d0,[a15]2
.L225:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;      (inlined)
	j	.L30

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }      (inlined)
.L30:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);      (inlined)
	j	.L31

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }      (inlined)
.L31:
.L29:
.L28:
.L27:
	lea	a15,[a10]0
.L204:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   541  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   542  DEM_INLINE void Dem_EvMemSetEventMemTrigger(uint16_least LocId, Dem_TriggerType Trigger)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   543  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   544     DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   545     DEM_EVMEM_USEVAR(Trigger);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   546  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   547  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   548     Dem_EvMemEventMemory[LocId].Trigger = Trigger;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   549  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   550  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   551  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   552  /* --- Data --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   553  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is used to get address of element data and to fill the data block */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   554  DEM_INLINE uint8 *Dem_EvMemGetEventMemDataByPtr(Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   555  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   557  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   558  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   559  DEM_INLINE uint8 *Dem_EvMemGetEventMemData(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   560  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   561     return Dem_EvMemGetEventMemDataByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   562  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   563  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   564  DEM_INLINE uint16 Dem_EvMemGetEventMemDataSize(void)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   565  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   566     return DEM_SIZEOF_VAR(Dem_EvMemEventMemory[0].Data);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   567  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   568  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   569  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   570     Event Memory Status
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   571     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   572  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   573  /* the bits DEM_EVMEM_STSMASK_STORED and DEM_EVMEM_STSMASK_DELETED shall not be set at the same time */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   574  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   575  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedSLC(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   576  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   577     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED)) == (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   578  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   579  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   580  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestCompleteTFC(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   581  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   582      return ((Status & DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC) == DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   583  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   584  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   585  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedTFC (uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   586  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   587      return ((Status & DEM_EVMEM_STSMASK_TESTFAILED_TFC) == DEM_EVMEM_STSMASK_TESTFAILED_TFC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   588  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   589  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   590  DEM_INLINE Dem_boolean_least Dem_EvMemIsStored(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   591  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   592     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == DEM_EVMEM_STSMASK_STORED);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   593  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   594  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   595  DEM_INLINE Dem_boolean_least Dem_EvMemIsEmpty(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   596  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   597     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == 0u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   598  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   599  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   600  DEM_INLINE Dem_boolean_least Dem_EvMemIsDeleted(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   601  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   602     DEM_EVMEM_USEVAR(Status);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   603  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   604  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   605     return (Dem_boolean_least)((Status & DEM_EVMEM_STSMASK_DELETED) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   606  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   607     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   608  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   609  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   610  DEM_INLINE uint16_least Dem_EvMemSetToEmpty(void)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   611  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   612  	return 0u;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   613  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   614  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   615  DEM_INLINE uint16_least Dem_EvMemSetToDelete(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   616  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   617  	DEM_EVMEM_USEVAR(Status);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   618  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   619  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   620  	return (Status | DEM_EVMEM_STSMASK_DELETED) & (~DEM_EVMEM_STSMASK_STORED);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   621  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   622      return Dem_EvMemSetToEmpty();
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   623  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   624  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   625  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   626  DEM_INLINE Dem_boolean_least Dem_EvMemGetShadowVisibility(void)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   627  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   628  	return DEM_CFG_EVMEM_SHADOW_ENTRIES_VISIBLE;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   629  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   630  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   631  DEM_INLINE Dem_boolean_least Dem_EvMemIsVisible(uint16_least Status, Dem_boolean_least ShadowEntriesVisible)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   632  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   633  	return (Dem_boolean_least)( ( Dem_EvMemIsStored(Status)) ||
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   634  			                    (!Dem_EvMemIsEmpty (Status) && Dem_EvMemGetShadowVisibility() && ShadowEntriesVisible));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   635  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   636  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   637  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   638     Event Memory Iterators
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   639     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   640  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   641  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   642  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   643  DEM_INLINE uint16_least Dem_EvMemGetEventMemStartLocId(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   644  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   645  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   646  	DEM_EVMEM_USEVAR(MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   647  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   648  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   649  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   650  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   651  	return Dem_EvMemLocIdList[MemId];
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   652  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   653  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   654  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   655  DEM_INLINE uint16_least Dem_EvMemGetEventMemEndLocId(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   656  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   657  	DEM_EVMEM_USEVAR(MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   658  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   659  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   660  	return DEM_CFG_MAX_NUMBER_EVENT_ENTRY_PRIMARY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   661  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   662  	return Dem_EvMemLocIdList[MemId+1u];
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   663  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   664  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   665  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   666  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   667  DEM_INLINE void Dem_EvMemEventMemoryLocIteratorNew (uint16_least *LocId, uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   668  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   669      *LocId = Dem_EvMemGetEventMemStartLocId(MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   670  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   671  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   672  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   673  DEM_INLINE Dem_boolean_least Dem_EvMemEventMemoryLocIteratorIsValid (const uint16_least *LocId, uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   674  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   675      return (Dem_boolean_least)(*LocId < Dem_EvMemGetEventMemEndLocId(MemId));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   676  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   677  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   678  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   679  DEM_INLINE void Dem_EvMemEventMemoryLocIteratorNext (uint16_least *LocId, uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   680  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   681      DEM_EVMEM_USEVAR(MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   682      (*LocId)++;
	ld.w	d1,[a15]
.L277:
	add	d1,#1
	st.w	[a15],d1
.L22:
	lea	a15,[a10]0
.L207:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   660  	return DEM_CFG_MAX_NUMBER_EVENT_ENTRY_PRIMARY;      (inlined)
	j	.L32

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   664  }      (inlined)
.L32:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   541  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   542  DEM_INLINE void Dem_EvMemSetEventMemTrigger(uint16_least LocId, Dem_TriggerType Trigger)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   543  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   544     DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   545     DEM_EVMEM_USEVAR(Trigger);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   546  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   547  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   548     Dem_EvMemEventMemory[LocId].Trigger = Trigger;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   549  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   550  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   551  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   552  /* --- Data --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   553  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is used to get address of element data and to fill the data block */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   554  DEM_INLINE uint8 *Dem_EvMemGetEventMemDataByPtr(Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   555  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   557  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   558  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   559  DEM_INLINE uint8 *Dem_EvMemGetEventMemData(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   560  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   561     return Dem_EvMemGetEventMemDataByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   562  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   563  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   564  DEM_INLINE uint16 Dem_EvMemGetEventMemDataSize(void)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   565  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   566     return DEM_SIZEOF_VAR(Dem_EvMemEventMemory[0].Data);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   567  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   568  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   569  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   570     Event Memory Status
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   571     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   572  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   573  /* the bits DEM_EVMEM_STSMASK_STORED and DEM_EVMEM_STSMASK_DELETED shall not be set at the same time */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   574  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   575  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedSLC(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   576  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   577     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED)) == (DEM_EVMEM_STSMASK_TESTFAILED_SLC | DEM_EVMEM_STSMASK_STORED));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   578  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   579  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   580  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestCompleteTFC(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   581  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   582      return ((Status & DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC) == DEM_EVMEM_STSMASK_TESTCOMPLETE_TFC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   583  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   584  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   585  DEM_INLINE Dem_boolean_least Dem_EvMemIsTestFailedTFC (uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   586  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   587      return ((Status & DEM_EVMEM_STSMASK_TESTFAILED_TFC) == DEM_EVMEM_STSMASK_TESTFAILED_TFC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   588  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   589  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   590  DEM_INLINE Dem_boolean_least Dem_EvMemIsStored(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   591  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   592     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == DEM_EVMEM_STSMASK_STORED);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   593  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   594  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   595  DEM_INLINE Dem_boolean_least Dem_EvMemIsEmpty(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   596  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   597     return (Dem_boolean_least)((Status & (DEM_EVMEM_STSMASK_STORED | DEM_EVMEM_STSMASK_DELETED)) == 0u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   598  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   599  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   600  DEM_INLINE Dem_boolean_least Dem_EvMemIsDeleted(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   601  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   602     DEM_EVMEM_USEVAR(Status);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   603  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   604  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   605     return (Dem_boolean_least)((Status & DEM_EVMEM_STSMASK_DELETED) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   606  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   607     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   608  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   609  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   610  DEM_INLINE uint16_least Dem_EvMemSetToEmpty(void)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   611  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   612  	return 0u;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   613  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   614  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   615  DEM_INLINE uint16_least Dem_EvMemSetToDelete(uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   616  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   617  	DEM_EVMEM_USEVAR(Status);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   618  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   619  #if DEM_CFG_EVMEM_SHADOW_ENTRIES_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   620  	return (Status | DEM_EVMEM_STSMASK_DELETED) & (~DEM_EVMEM_STSMASK_STORED);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   621  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   622      return Dem_EvMemSetToEmpty();
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   623  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   624  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   625  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   626  DEM_INLINE Dem_boolean_least Dem_EvMemGetShadowVisibility(void)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   627  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   628  	return DEM_CFG_EVMEM_SHADOW_ENTRIES_VISIBLE;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   629  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   630  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   631  DEM_INLINE Dem_boolean_least Dem_EvMemIsVisible(uint16_least Status, Dem_boolean_least ShadowEntriesVisible)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   632  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   633  	return (Dem_boolean_least)( ( Dem_EvMemIsStored(Status)) ||
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   634  			                    (!Dem_EvMemIsEmpty (Status) && Dem_EvMemGetShadowVisibility() && ShadowEntriesVisible));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   635  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   636  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   637  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   638     Event Memory Iterators
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   639     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   640  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   641  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   642  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   643  DEM_INLINE uint16_least Dem_EvMemGetEventMemStartLocId(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   644  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   645  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   646  	DEM_EVMEM_USEVAR(MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   647  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   648  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   649  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   650  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   651  	return Dem_EvMemLocIdList[MemId];
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   652  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   653  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   654  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   655  DEM_INLINE uint16_least Dem_EvMemGetEventMemEndLocId(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   656  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   657  	DEM_EVMEM_USEVAR(MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   658  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   659  #if (DEM_CFG_EVMEM_MAX_MEMS == 1)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   660  	return DEM_CFG_MAX_NUMBER_EVENT_ENTRY_PRIMARY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   661  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   662  	return Dem_EvMemLocIdList[MemId+1u];
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   663  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   664  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   665  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   666  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   667  DEM_INLINE void Dem_EvMemEventMemoryLocIteratorNew (uint16_least *LocId, uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   668  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   669      *LocId = Dem_EvMemGetEventMemStartLocId(MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   670  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   671  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   672  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   673  DEM_INLINE Dem_boolean_least Dem_EvMemEventMemoryLocIteratorIsValid (const uint16_least *LocId, uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   674  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   675      return (Dem_boolean_least)(*LocId < Dem_EvMemGetEventMemEndLocId(MemId));
	ld.w	d15,[a15]
.L278:
	lt.u	d15,d15,#5
.L279:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   675      return (Dem_boolean_least)(*LocId < Dem_EvMemGetEventMemEndLocId(MemId));      (inlined)
	j	.L33

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   676  }      (inlined)
.L33:
	jne	d15,#0,.L23
.L211:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
	movh.a	a15,#@his(Dem_MapEventIdToDtcId)
	lea	a15,[a15]@los(Dem_MapEventIdToDtcId)
.L280:
	addsc.a	a15,a15,d0,#1
	ld.hu	d0,[a15]0
.L226:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];      (inlined)
	j	.L34

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }      (inlined)
.L34:

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    76  	            }
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    77  	        }
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    78  	    }
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    79  
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    80  	}
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    81  
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    82  	//Get the Last Confirmed DTC ID
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    83  	LastConfirmed_DtcId = Dem_DtcIdFromEventId (EventIdForMaxConfirmedTimeId);
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    84  
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    85  	//check if the Dtc Id already exist in the EvMem and it is the recently updated location
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    86  	if((MaxConfirmedTimeIdinEvMem != 0u) && (Dem_isDtcIdValid (LastConfirmed_DtcId)))
	jeq	d3,#0,.L35
.L213:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
	mov	d1,#0
.L281:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
	jeq	d0,#0,.L36
.L282:
	ge.u	d15,d0,#5
.L283:
	cmovn	d1,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
.L37:
.L36:
	j	.L38

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }      (inlined)
.L38:
	jeq	d1,#0,.L39
.L214:

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    87  	{
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    88  		//Update the Id of the DTCOccurenceByTime in the GenericNvdata
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    89  		Dem_EvMemGenSetDtcByOccIndex(LastConfirmed_DtcId,DEM_MOST_REC_DET_CONFIRMED_DTC);
	mov	d15,#4
.L216:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     3  #ifndef DEM_EVMEMGEN_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     4  #define DEM_EVMEMGEN_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     6  #include "Dem_EvMemGenTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     7  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     8  #include "Dem_EvMemBase.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     9  #include "Dem_DTCs.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    10  #include "Dem_GenericNvData.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    11  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    13  #define DEM_EVMEMGEN_MEMORY_BASE   Dem_GenericNvData
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    15  #if DEM_CFG_EVMEMGENERIC_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    16     #define DEM_EVMEMGEN_GET(OBJ)      (OBJ)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    17     #define DEM_EVMEMGEN_SET(OBJ,VAL)  (OBJ) = (VAL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    18     #define DEM_EVMEMGEN_CLEAROBJ(OBJ) DEM_EVMEM_CLEAROBJ(OBJ)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    19  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    20     #define DEM_EVMEMGEN_GET(OBJ)      0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    21     #define DEM_EVMEMGEN_SET(OBJ,VAL)  do {} while (0)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    22     #define DEM_EVMEMGEN_CLEAROBJ(OBJ) do {} while (0)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    23  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    25  /* -------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    26     service Dem_GetDTCByOccurrenceTime
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    27     -------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    28   */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    30  /* Get stored DtcId by occurrence */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    31  DEM_INLINE Dem_DtcIdType Dem_EvMemGenGetDtcIdByOccIndex(uint32 OccIndex)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    33  #if DEM_CFG_EVMEMGENERIC_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    34      return DEM_EVMEMGEN_GET(DEM_EVMEMGEN_MEMORY_BASE.DtcIdsByOccurrenceTime[OccIndex]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    35  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    36      DEM_UNUSED_PARAM(OccIndex);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    37      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    41  /* Set stored DtcId by occurrence */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    42  DEM_INLINE void Dem_EvMemGenSetDtcByOccIndex(Dem_DtcIdType DtcId,uint32 OccIndex)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    43  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    44  #if DEM_CFG_EVMEMGENERIC_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    45      DEM_EVMEMGEN_SET(DEM_EVMEMGEN_MEMORY_BASE.DtcIdsByOccurrenceTime[OccIndex],DtcId);
	movh.a	a15,#@his(Dem_GenericNvData)
	lea	a15,[a15]@los(Dem_GenericNvData)
	addsc.a	a15,a15,d15,#1
	st.h	[a15]8,d0
.L39:
.L35:

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    90  	}
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    91  }
	ret
.L178:
	
__Dem_ConsistencyCheckForConfirmedDTC_function_end:
	.size	Dem_ConsistencyCheckForConfirmedDTC,__Dem_ConsistencyCheckForConfirmedDTC_function_end-Dem_ConsistencyCheckForConfirmedDTC
.L76:
	; End of function
	
	.sdecl	'.text.Dem_ConsisChk.Dem_ConsistencyCheckForDTC',code,cluster('Dem_ConsistencyCheckForDTC')
	.sect	'.text.Dem_ConsisChk.Dem_ConsistencyCheckForDTC'
	.align	2
	
	.global	Dem_ConsistencyCheckForDTC

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    92  
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    93  void Dem_ConsistencyCheckForDTC(void)
; Function Dem_ConsistencyCheckForDTC
.L57:
Dem_ConsistencyCheckForDTC:	.type	func

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     3  #ifndef DEM_EVMEMGEN_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     4  #define DEM_EVMEMGEN_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     6  #include "Dem_EvMemGenTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     7  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     8  #include "Dem_EvMemBase.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     9  #include "Dem_DTCs.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    10  #include "Dem_GenericNvData.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    11  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    13  #define DEM_EVMEMGEN_MEMORY_BASE   Dem_GenericNvData
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    15  #if DEM_CFG_EVMEMGENERIC_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    16     #define DEM_EVMEMGEN_GET(OBJ)      (OBJ)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    17     #define DEM_EVMEMGEN_SET(OBJ,VAL)  (OBJ) = (VAL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    18     #define DEM_EVMEMGEN_CLEAROBJ(OBJ) DEM_EVMEM_CLEAROBJ(OBJ)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    19  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    20     #define DEM_EVMEMGEN_GET(OBJ)      0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    21     #define DEM_EVMEMGEN_SET(OBJ,VAL)  do {} while (0)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    22     #define DEM_EVMEMGEN_CLEAROBJ(OBJ) do {} while (0)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    23  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    25  /* -------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    26     service Dem_GetDTCByOccurrenceTime
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    27     -------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    28   */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    30  /* Get stored DtcId by occurrence */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    31  DEM_INLINE Dem_DtcIdType Dem_EvMemGenGetDtcIdByOccIndex(uint32 OccIndex)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    33  #if DEM_CFG_EVMEMGENERIC_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    34      return DEM_EVMEMGEN_GET(DEM_EVMEMGEN_MEMORY_BASE.DtcIdsByOccurrenceTime[OccIndex]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    35  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    36      DEM_UNUSED_PARAM(OccIndex);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    37      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    41  /* Set stored DtcId by occurrence */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    42  DEM_INLINE void Dem_EvMemGenSetDtcByOccIndex(Dem_DtcIdType DtcId,uint32 OccIndex)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    43  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    44  #if DEM_CFG_EVMEMGENERIC_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    45      DEM_EVMEMGEN_SET(DEM_EVMEMGEN_MEMORY_BASE.DtcIdsByOccurrenceTime[OccIndex],DtcId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    46  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    47      DEM_UNUSED_PARAM(DtcId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    48      DEM_UNUSED_PARAM(OccIndex);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    49  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    50  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    52  /* Translates MemId to DtcOrigin  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    53  DEM_INLINE Dem_DTCOriginType Dem_EvMemGenGetDtcOrginFromMemId(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    54  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    55     Dem_DTCOriginType DtcOrigin = DEM_DTC_ORIGIN_PRIMARY_MEMORY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    57     if (Dem_LibGetParamBool(DEM_CFG_EVMEM_SECONDARY_MEMORY_SUPPORTED))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    58     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    59        if (MemId == DEM_CFG_EVMEM_MEMID_SECONDARY)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    60        {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    61           DtcOrigin = DEM_DTC_ORIGIN_SECONDARY_MEMORY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    62        }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    63     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    65     if (Dem_LibGetParamBool(DEM_CFG_EVMEM_MIRROR_MEMORY_SUPPORTED))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    66     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    67  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    68        if (MemId == DEM_CFG_EVMEM_MEMID_MIRROR)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    69        {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    70           DtcOrigin = DEM_DTC_ORIGIN_MIRROR_MEMORY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    71        }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    72     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    74     return DtcOrigin;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    76  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    78  /* Report event prototype function */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    79  DEM_INLINE void Dem_EvMemGenReportEvent(Dem_EventIdType EventId, uint32 FirstOccIndex, uint32 RecntOccIndex)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    80  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    81     Dem_DtcIdType DtcId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    82  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    83     /* get the DtcId of the reported event */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    84     DtcId = Dem_DtcIdFromEventId (EventId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    85     /* Is the DtcId valid ? */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    86     if (Dem_isDtcIdValid (DtcId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    87     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    88        /* Is stored DtcId of First Entry is invalid ? */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    89        /* HINT: the initial value is zero and therefore invalid! */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    90        if (!Dem_isDtcIdValid(Dem_EvMemGenGetDtcIdByOccIndex(FirstOccIndex)))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    91        {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    92           /* replace first entry */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    93           Dem_EvMemGenSetDtcByOccIndex(DtcId,FirstOccIndex);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    94           /* notify to store in NVM */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    95           Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_DEM_GENERIC_NV_DATA);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    96        }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    97        /* Is stored DtcId of Most Recent Entry is not yet stored ? */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    98        if (Dem_EvMemGenGetDtcIdByOccIndex(RecntOccIndex) != DtcId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    99        {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   100           /* replace most recent entry */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   101           Dem_EvMemGenSetDtcByOccIndex(DtcId,RecntOccIndex);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   102           /* notify to store in NVM */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   103           Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_DEM_GENERIC_NV_DATA);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   104        }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   105     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   108  /* report function to report failed events */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   109  DEM_INLINE void Dem_EvMemGenReportFailedEvent(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   110  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   111  	if(!Dem_GetEvMemLockInternal())
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   112  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   113  	    /* service Dem_GetDTCByOccurrenceTime has implicit origin DEM_DTC_ORIGIN_PRIMARY_MEMORY */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   114  	    if ( Dem_EvtParam_GetEventIsStoredInPrimary(EventId) )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   115  	    {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   116  	        /* call prototype function with first and recent FAILED indices */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   117  	        /* This call needs to be locked to avoid a simultaneous access in the Dem_Main task */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   118  	        DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   119  	        Dem_EvMemGenReportEvent(EventId,DEM_FIRST_FAILED_DTC,DEM_MOST_RECENT_FAILED_DTC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   120  	        DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   121  	    }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   122  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   123  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   124  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   125  /* report function to report confirmed events */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   126  DEM_INLINE void Dem_EvMemGenReportConfirmedEvent(Dem_EventIdType EventId, uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   127  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   128     /* service Dem_GetDTCByOccurrenceTime has implicit origin DEM_DTC_ORIGIN_PRIMARY_MEMORY */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   129     if (MemId == DEM_CFG_EVMEM_MEMID_PRIMARY)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   130     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   131        /* call prototype function with first and recent CONFIRMED indices */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   132        Dem_EvMemGenReportEvent(EventId,DEM_FIRST_DET_CONFIRMED_DTC,DEM_MOST_REC_DET_CONFIRMED_DTC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   133     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   134  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   136  /* clears the DTC Occurrence Entries */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   137  DEM_INLINE void Dem_EvMemGenClearDtcByOccurrenceTime(Dem_DTCOriginType DtcOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   138  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   139     DEM_UNUSED_PARAM(DtcOrigin);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   141     if (DtcOrigin == DEM_DTC_ORIGIN_PRIMARY_MEMORY)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   142     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   143         /* This call needs to be locked to avoid a simultaneous access in SetEventStatus context */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   144        DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   145        DEM_EVMEMGEN_CLEAROBJ(DEM_EVMEMGEN_MEMORY_BASE.DtcIdsByOccurrenceTime);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   146        DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   147        /* notify to store in NVM */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   148        Dem_NvMClearBlockByWrite(DEM_NVM_ID_DEM_GENERIC_NV_DATA);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   149     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   150  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   152  /* ------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   153    Service to get the Last failed and Last Confirmed DTCs
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   154     -----------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   155   */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   156  /* Get the Last Failed DTC */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   157  DEM_INLINE Dem_DtcIdType Dem_EvMemGenGetLastFailedDtcFromGenNvData(void)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   159  	return Dem_EvMemGenGetDtcIdByOccIndex(DEM_MOST_RECENT_FAILED_DTC);
	mov	d15,#2
.L81:
	movh.a	a15,#@his(Dem_GenericNvData)
	lea	a15,[a15]@los(Dem_GenericNvData)
	lea	a15,[a15]8
	addsc.a	a2,a15,d15,#1
	ld.hu	d15,[a2]0
.L236:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    34      return DEM_EVMEMGEN_GET(DEM_EVMEMGEN_MEMORY_BASE.DtcIdsByOccurrenceTime[OccIndex]);      (inlined)
	j	.L40

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    39  }      (inlined)
.L40:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   159  	return Dem_EvMemGenGetDtcIdByOccIndex(DEM_MOST_RECENT_FAILED_DTC);      (inlined)
	j	.L41

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   160  }      (inlined)
.L41:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
	mov	d0,#0
.L237:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
	jeq	d15,#0,.L42
.L238:
	ge.u	d15,d15,#5
.L239:
	cmovn	d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
.L43:
.L42:
	j	.L44

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }      (inlined)
.L44:

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    94  {
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    95  	//Check whether the Last failed DTC stored in the GenNv data is invalid or out of range
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    96  	if (!Dem_isDtcIdValid(Dem_EvMemGenGetLastFailedDtcFromGenNvData()))
	jne	d0,#0,.L45
.L86:

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    97  	{
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    98  		Dem_ConsistencyCheckForFailedDTC();
	call	Dem_ConsistencyCheckForFailedDTC
.L45:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     3  #ifndef DEM_EVMEMGEN_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     4  #define DEM_EVMEMGEN_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     6  #include "Dem_EvMemGenTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     7  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     8  #include "Dem_EvMemBase.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     9  #include "Dem_DTCs.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    10  #include "Dem_GenericNvData.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    11  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    13  #define DEM_EVMEMGEN_MEMORY_BASE   Dem_GenericNvData
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    15  #if DEM_CFG_EVMEMGENERIC_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    16     #define DEM_EVMEMGEN_GET(OBJ)      (OBJ)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    17     #define DEM_EVMEMGEN_SET(OBJ,VAL)  (OBJ) = (VAL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    18     #define DEM_EVMEMGEN_CLEAROBJ(OBJ) DEM_EVMEM_CLEAROBJ(OBJ)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    19  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    20     #define DEM_EVMEMGEN_GET(OBJ)      0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    21     #define DEM_EVMEMGEN_SET(OBJ,VAL)  do {} while (0)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    22     #define DEM_EVMEMGEN_CLEAROBJ(OBJ) do {} while (0)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    23  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    25  /* -------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    26     service Dem_GetDTCByOccurrenceTime
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    27     -------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    28   */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    30  /* Get stored DtcId by occurrence */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    31  DEM_INLINE Dem_DtcIdType Dem_EvMemGenGetDtcIdByOccIndex(uint32 OccIndex)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    33  #if DEM_CFG_EVMEMGENERIC_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    34      return DEM_EVMEMGEN_GET(DEM_EVMEMGEN_MEMORY_BASE.DtcIdsByOccurrenceTime[OccIndex]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    35  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    36      DEM_UNUSED_PARAM(OccIndex);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    37      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    41  /* Set stored DtcId by occurrence */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    42  DEM_INLINE void Dem_EvMemGenSetDtcByOccIndex(Dem_DtcIdType DtcId,uint32 OccIndex)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    43  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    44  #if DEM_CFG_EVMEMGENERIC_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    45      DEM_EVMEMGEN_SET(DEM_EVMEMGEN_MEMORY_BASE.DtcIdsByOccurrenceTime[OccIndex],DtcId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    46  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    47      DEM_UNUSED_PARAM(DtcId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    48      DEM_UNUSED_PARAM(OccIndex);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    49  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    50  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    52  /* Translates MemId to DtcOrigin  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    53  DEM_INLINE Dem_DTCOriginType Dem_EvMemGenGetDtcOrginFromMemId(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    54  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    55     Dem_DTCOriginType DtcOrigin = DEM_DTC_ORIGIN_PRIMARY_MEMORY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    57     if (Dem_LibGetParamBool(DEM_CFG_EVMEM_SECONDARY_MEMORY_SUPPORTED))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    58     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    59        if (MemId == DEM_CFG_EVMEM_MEMID_SECONDARY)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    60        {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    61           DtcOrigin = DEM_DTC_ORIGIN_SECONDARY_MEMORY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    62        }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    63     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    65     if (Dem_LibGetParamBool(DEM_CFG_EVMEM_MIRROR_MEMORY_SUPPORTED))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    66     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    67  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    68        if (MemId == DEM_CFG_EVMEM_MEMID_MIRROR)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    69        {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    70           DtcOrigin = DEM_DTC_ORIGIN_MIRROR_MEMORY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    71        }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    72     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    74     return DtcOrigin;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    76  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    78  /* Report event prototype function */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    79  DEM_INLINE void Dem_EvMemGenReportEvent(Dem_EventIdType EventId, uint32 FirstOccIndex, uint32 RecntOccIndex)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    80  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    81     Dem_DtcIdType DtcId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    82  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    83     /* get the DtcId of the reported event */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    84     DtcId = Dem_DtcIdFromEventId (EventId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    85     /* Is the DtcId valid ? */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    86     if (Dem_isDtcIdValid (DtcId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    87     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    88        /* Is stored DtcId of First Entry is invalid ? */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    89        /* HINT: the initial value is zero and therefore invalid! */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    90        if (!Dem_isDtcIdValid(Dem_EvMemGenGetDtcIdByOccIndex(FirstOccIndex)))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    91        {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    92           /* replace first entry */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    93           Dem_EvMemGenSetDtcByOccIndex(DtcId,FirstOccIndex);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    94           /* notify to store in NVM */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    95           Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_DEM_GENERIC_NV_DATA);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    96        }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    97        /* Is stored DtcId of Most Recent Entry is not yet stored ? */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    98        if (Dem_EvMemGenGetDtcIdByOccIndex(RecntOccIndex) != DtcId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    99        {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   100           /* replace most recent entry */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   101           Dem_EvMemGenSetDtcByOccIndex(DtcId,RecntOccIndex);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   102           /* notify to store in NVM */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   103           Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_DEM_GENERIC_NV_DATA);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   104        }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   105     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   108  /* report function to report failed events */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   109  DEM_INLINE void Dem_EvMemGenReportFailedEvent(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   110  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   111  	if(!Dem_GetEvMemLockInternal())
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   112  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   113  	    /* service Dem_GetDTCByOccurrenceTime has implicit origin DEM_DTC_ORIGIN_PRIMARY_MEMORY */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   114  	    if ( Dem_EvtParam_GetEventIsStoredInPrimary(EventId) )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   115  	    {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   116  	        /* call prototype function with first and recent FAILED indices */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   117  	        /* This call needs to be locked to avoid a simultaneous access in the Dem_Main task */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   118  	        DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   119  	        Dem_EvMemGenReportEvent(EventId,DEM_FIRST_FAILED_DTC,DEM_MOST_RECENT_FAILED_DTC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   120  	        DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   121  	    }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   122  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   123  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   124  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   125  /* report function to report confirmed events */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   126  DEM_INLINE void Dem_EvMemGenReportConfirmedEvent(Dem_EventIdType EventId, uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   127  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   128     /* service Dem_GetDTCByOccurrenceTime has implicit origin DEM_DTC_ORIGIN_PRIMARY_MEMORY */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   129     if (MemId == DEM_CFG_EVMEM_MEMID_PRIMARY)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   130     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   131        /* call prototype function with first and recent CONFIRMED indices */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   132        Dem_EvMemGenReportEvent(EventId,DEM_FIRST_DET_CONFIRMED_DTC,DEM_MOST_REC_DET_CONFIRMED_DTC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   133     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   134  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   136  /* clears the DTC Occurrence Entries */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   137  DEM_INLINE void Dem_EvMemGenClearDtcByOccurrenceTime(Dem_DTCOriginType DtcOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   138  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   139     DEM_UNUSED_PARAM(DtcOrigin);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   141     if (DtcOrigin == DEM_DTC_ORIGIN_PRIMARY_MEMORY)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   142     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   143         /* This call needs to be locked to avoid a simultaneous access in SetEventStatus context */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   144        DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   145        DEM_EVMEMGEN_CLEAROBJ(DEM_EVMEMGEN_MEMORY_BASE.DtcIdsByOccurrenceTime);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   146        DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   147        /* notify to store in NVM */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   148        Dem_NvMClearBlockByWrite(DEM_NVM_ID_DEM_GENERIC_NV_DATA);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   149     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   150  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   152  /* ------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   153    Service to get the Last failed and Last Confirmed DTCs
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   154     -----------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   155   */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   156  /* Get the Last Failed DTC */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   157  DEM_INLINE Dem_DtcIdType Dem_EvMemGenGetLastFailedDtcFromGenNvData(void)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   159  	return Dem_EvMemGenGetDtcIdByOccIndex(DEM_MOST_RECENT_FAILED_DTC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   162  /* Get the Last Confirmed DTCs */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   163  DEM_INLINE Dem_DtcIdType Dem_EvMemGenGetLastConfirmedDtcFromGenNvData(void)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   164  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   165  	return Dem_EvMemGenGetDtcIdByOccIndex(DEM_MOST_REC_DET_CONFIRMED_DTC);
	mov	d15,#4
.L92:
	addsc.a	a15,a15,d15,#1
	ld.hu	d15,[a15]0
.L240:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    34      return DEM_EVMEMGEN_GET(DEM_EVMEMGEN_MEMORY_BASE.DtcIdsByOccurrenceTime[OccIndex]);      (inlined)
	j	.L46

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    39  }      (inlined)
.L46:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   165  	return Dem_EvMemGenGetDtcIdByOccIndex(DEM_MOST_REC_DET_CONFIRMED_DTC);      (inlined)
	j	.L47

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   166  }      (inlined)
.L47:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
	mov	d0,#0
.L241:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
	jeq	d15,#0,.L48
.L242:
	ge.u	d15,d15,#5
.L243:
	cmovn	d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
.L49:
.L48:
	j	.L50

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }      (inlined)
.L50:

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	    99  	}
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	   100  
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	   101  	//Check whether the Last confirmed DTC stored in the GenNv data is invalid or out of range
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	   102  	if (!Dem_isDtcIdValid(Dem_EvMemGenGetLastConfirmedDtcFromGenNvData()))
	jne	d0,#0,.L51
.L93:

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	   103  	{
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	   104  		Dem_ConsistencyCheckForConfirmedDTC();
	call	Dem_ConsistencyCheckForConfirmedDTC
.L51:

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	   105  	}
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	   106  }
	ret
.L77:
	
__Dem_ConsistencyCheckForDTC_function_end:
	.size	Dem_ConsistencyCheckForDTC,__Dem_ConsistencyCheckForDTC_function_end-Dem_ConsistencyCheckForDTC
.L66:
	; End of function
	
	.calls	'Dem_ConsistencyCheckForDTC','Dem_ConsistencyCheckForFailedDTC'
	.calls	'Dem_ConsistencyCheckForDTC','Dem_ConsistencyCheckForConfirmedDTC'
	.calls	'Dem_ConsistencyCheckForFailedDTC','',8
	.calls	'Dem_ConsistencyCheckForConfirmedDTC','',8
	.extern	Dem_MapEventIdToDtcId
	.extern	Dem_GenericNvData
	.extern	Dem_EvMemEventMemory
	.calls	'Dem_ConsistencyCheckForDTC','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L59:
	.word	26086
	.half	3
	.word	.L60
	.byte	4
.L58:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\consischk\\Dem_ConsisChk.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L61
.L98:
	.byte	2
	.byte	'unsigned int',0,4,7,3
	.byte	'rba_BswSrv_ByteOrderSwap32',0,3,1,125,21
	.word	149
	.byte	1,1,4
	.byte	'Input_u32',0,1,125,55
	.word	149
	.byte	5,0
.L100:
	.byte	2
	.byte	'unsigned short int',0,2,7,3
	.byte	'rba_BswSrv_ByteOrderSwap16',0,3,1,150,1,21
	.word	223
	.byte	1,1,4
	.byte	'Input_u16',0,1,150,1,55
	.word	223
	.byte	5,0,2
	.byte	'unsigned char',0,1,8,6
	.word	305
	.byte	2
	.byte	'int',0,4,5,7
	.byte	'rba_DiagLib_MemUtils_MemSet',0,3,2,26,19,1,1,4
	.byte	'xDest_pv',0,2,26,54
	.word	322
	.byte	4
	.byte	'xPattern_u32',0,2,26,71
	.word	327
	.byte	4
	.byte	'numBytes_s32',0,2,26,92
	.word	149
	.byte	5,0,3
	.byte	'Dem_LibGetParamUI8',0,3,3,36,18
	.word	305
	.byte	1,1,4
	.byte	'parameter',0,3,36,44
	.word	305
	.byte	5,0,3
	.byte	'Dem_LibGetParamBool',0,3,3,41,20
	.word	305
	.byte	1,1,4
	.byte	'parameter',0,3,41,49
	.word	305
	.byte	5,0,3
	.byte	'Dem_Cfg_Dtc_GetDtcCode',0,3,4,99,30
	.word	149
	.byte	1,1,4
	.byte	'indx',0,4,99,67
	.word	223
	.byte	5,0,7
	.byte	'rba_DiagLib_Bit8SetBit',0,3,5,36,19,1,1,4
	.byte	'buffer',0,5,36,49
	.word	322
	.byte	4
	.byte	'bit_position',0,5,36,63
	.word	305
	.byte	5,0,7
	.byte	'rba_DiagLib_Bit8ClearBit',0,3,5,42,19,1,1,4
	.byte	'buffer',0,5,42,51
	.word	322
	.byte	4
	.byte	'bit_position',0,5,42,65
	.word	305
	.byte	5,0,7
	.byte	'rba_DiagLib_Bit8OverwriteBit',0,3,5,48,19,1,1,4
	.byte	'buffer',0,5,48,55
	.word	322
	.byte	4
	.byte	'bit_position',0,5,48,69
	.word	305
	.byte	4
	.byte	'will_bit_be_set',0,5,48,91
	.word	305
	.byte	8,5,5,0,0,3
	.byte	'rba_DiagLib_Bit8GetSingleBit',0,3,5,60,20
	.word	305
	.byte	1,1,4
	.byte	'value',0,5,60,55
	.word	305
	.byte	4
	.byte	'bit_position',0,5,60,68
	.word	305
	.byte	5,0,3
	.byte	'rba_DiagLib_Bit8IsBitSet',0,3,5,64,22
	.word	305
	.byte	1,1,4
	.byte	'value',0,5,64,53
	.word	305
	.byte	4
	.byte	'bit_position',0,5,64,66
	.word	305
	.byte	8,5,0,0,3
	.byte	'rba_DiagLib_Bit8GetBits',0,3,5,69,20
	.word	305
	.byte	1,1,4
	.byte	'value',0,5,69,50
	.word	305
	.byte	4
	.byte	'bit_position',0,5,69,63
	.word	305
	.byte	4
	.byte	'number_of_bits',0,5,69,83
	.word	305
	.byte	5,0,7
	.byte	'rba_DiagLib_Bit8ClearBits',0,3,5,77,19,1,1,4
	.byte	'value',0,5,77,52
	.word	322
	.byte	4
	.byte	'bit_position',0,5,77,65
	.word	305
	.byte	4
	.byte	'number_of_bits',0,5,77,85
	.word	305
	.byte	5,0,7
	.byte	'rba_DiagLib_Bit8OverwriteBits',0,3,5,83,19,1,1,4
	.byte	'value',0,5,83,56
	.word	322
	.byte	4
	.byte	'bit_position',0,5,83,69
	.word	305
	.byte	4
	.byte	'number_of_bits',0,5,83,89
	.word	305
	.byte	4
	.byte	'newValue',0,5,83,111
	.word	305
	.byte	8,5,0,0,6
	.word	223
	.byte	7
	.byte	'rba_DiagLib_Bit16SetBit',0,3,6,36,19,1,1,4
	.byte	'buffer',0,6,36,51
	.word	1275
	.byte	4
	.byte	'bit_position',0,6,36,65
	.word	305
	.byte	5,0,7
	.byte	'rba_DiagLib_Bit16ClearBit',0,3,6,42,19,1,1,4
	.byte	'buffer',0,6,42,53
	.word	1275
	.byte	4
	.byte	'bit_position',0,6,42,67
	.word	305
	.byte	5,0,3
	.byte	'rba_DiagLib_Bit16GetSingleBit',0,3,6,60,21
	.word	223
	.byte	1,1,4
	.byte	'value',0,6,60,58
	.word	223
	.byte	4
	.byte	'bit_position',0,6,60,71
	.word	305
	.byte	5,0,3
	.byte	'rba_DiagLib_Bit16IsBitSet',0,3,6,65,22
	.word	305
	.byte	1,1,4
	.byte	'value',0,6,65,55
	.word	223
	.byte	4
	.byte	'bit_position',0,6,65,68
	.word	305
	.byte	8,5,0,0,3
	.byte	'rba_DiagLib_Bit16GetBits',0,3,6,70,21
	.word	223
	.byte	1,1,4
	.byte	'value',0,6,70,53
	.word	223
	.byte	4
	.byte	'bit_position',0,6,70,66
	.word	305
	.byte	4
	.byte	'number_of_bits',0,6,70,86
	.word	305
	.byte	5,0,7
	.byte	'rba_DiagLib_Bit16ClearBits',0,3,6,78,19,1,1,4
	.byte	'value',0,6,78,54
	.word	1275
	.byte	4
	.byte	'bit_position',0,6,78,67
	.word	305
	.byte	4
	.byte	'number_of_bits',0,6,78,87
	.word	305
	.byte	5,0,6
	.word	149
	.byte	7
	.byte	'rba_DiagLib_Bit32SetBit',0,3,7,36,19,1,1,4
	.byte	'buffer',0,7,36,51
	.word	1764
	.byte	4
	.byte	'bit_position',0,7,36,65
	.word	305
	.byte	5,0,7
	.byte	'rba_DiagLib_Bit32ClearBit',0,3,7,42,19,1,1,4
	.byte	'buffer',0,7,42,53
	.word	1764
	.byte	4
	.byte	'bit_position',0,7,42,67
	.word	305
	.byte	5,0,3
	.byte	'rba_DiagLib_Bit32GetSingleBit',0,3,7,60,21
	.word	149
	.byte	1,1,4
	.byte	'value',0,7,60,58
	.word	149
	.byte	4
	.byte	'bit_position',0,7,60,71
	.word	305
	.byte	5,0,3
	.byte	'rba_DiagLib_Bit32IsBitSet',0,3,7,65,22
	.word	305
	.byte	1,1,4
	.byte	'value',0,7,65,55
	.word	149
	.byte	4
	.byte	'bit_position',0,7,65,68
	.word	305
	.byte	8,5,0,0,7
	.byte	'rba_DiagLib_Bit32ClearBits',0,3,7,78,19,1,1,4
	.byte	'value',0,7,78,54
	.word	1764
	.byte	4
	.byte	'bit_position',0,7,78,67
	.word	305
	.byte	4
	.byte	'number_of_bits',0,7,78,87
	.word	305
	.byte	5,0,7
	.byte	'Dem_BitArraySetBit',0,3,8,33,17,1,1,4
	.byte	'buffer',0,8,33,36
	.word	1764
	.byte	4
	.byte	'bit_position',0,8,33,75
	.word	149
	.byte	5,0,7
	.byte	'Dem_BitArrayClearBit',0,3,8,46,17,1,1,4
	.byte	'buffer',0,8,46,38
	.word	1764
	.byte	4
	.byte	'bit_position',0,8,46,77
	.word	149
	.byte	5,0,7
	.byte	'Dem_BitArrayOverwriteBit',0,3,8,61,17,1,1,4
	.byte	'buffer',0,8,61,42
	.word	1764
	.byte	4
	.byte	'bit_position',0,8,62,25
	.word	149
	.byte	4
	.byte	'will_bit_be_set',0,8,62,57
	.word	305
	.byte	8,5,5,0,0,9
	.word	149
	.byte	6
	.word	2384
	.byte	3
	.byte	'Dem_BitArrayIsBitSet',0,3,8,75,30
	.word	305
	.byte	1,1,4
	.byte	'buffer',0,8,75,51
	.word	2389
	.byte	4
	.byte	'bit_position',0,8,75,95
	.word	149
	.byte	5,0,3
	.byte	'Dem_ISO14229ByteIsTestFailed',0,3,9,122,30
	.word	305
	.byte	1,1,4
	.byte	'self',0,9,122,66
	.word	305
	.byte	8,5,0,0,3
	.byte	'Dem_ISO14229ByteIsTestFailedTOC',0,3,9,129,1,30
	.word	305
	.byte	1,1,4
	.byte	'self',0,9,129,1,69
	.word	305
	.byte	8,5,0,0,3
	.byte	'Dem_ISO14229ByteIsTestCompleteTOC',0,3,9,157,1,30
	.word	305
	.byte	1,1,4
	.byte	'self',0,9,157,1,71
	.word	305
	.byte	8,5,0,0,3
	.byte	'Dem_ISO14229ByteIsPendingDTC',0,3,9,164,1,30
	.word	305
	.byte	1,1,4
	.byte	'self',0,9,164,1,66
	.word	305
	.byte	8,5,0,0,3
	.byte	'Dem_ISO14229ByteIsWarningIndicatorRequested',0,3,9,177,1,30
	.word	305
	.byte	1,1,4
	.byte	'self',0,9,177,1,81
	.word	305
	.byte	8,5,0,0,7
	.byte	'Dem_ISO14229ByteSetTestFailed',0,3,9,186,1,17,1,1,4
	.byte	'self',0,9,186,1,55
	.word	322
	.byte	4
	.byte	'setOrReset',0,9,186,1,79
	.word	305
	.byte	8,5,0,0,7
	.byte	'Dem_ISO14229ByteSetTestFailedTOC',0,3,9,193,1,17,1,1,4
	.byte	'self',0,9,193,1,58
	.word	322
	.byte	4
	.byte	'setOrReset',0,9,193,1,82
	.word	305
	.byte	8,5,0,0,7
	.byte	'Dem_ISO14229ByteSetTestFailedSLC',0,3,9,200,1,17,1,1,4
	.byte	'self',0,9,200,1,58
	.word	322
	.byte	4
	.byte	'setOrReset',0,9,200,1,82
	.word	305
	.byte	8,5,0,0,7
	.byte	'Dem_ISO14229ByteSetTestCompleteTOC',0,3,9,214,1,17,1,1,4
	.byte	'self',0,9,214,1,60
	.word	322
	.byte	4
	.byte	'setOrReset',0,9,214,1,84
	.word	305
	.byte	8,5,0,0,7
	.byte	'Dem_ISO14229ByteSetTestCompleteSLC',0,3,9,221,1,17,1,1,4
	.byte	'self',0,9,221,1,60
	.word	322
	.byte	4
	.byte	'setOrReset',0,9,221,1,84
	.word	305
	.byte	8,5,0,0,7
	.byte	'Dem_ISO14229ByteSetPendingDTC',0,3,9,228,1,17,1,1,4
	.byte	'self',0,9,228,1,55
	.word	322
	.byte	4
	.byte	'setOrReset',0,9,228,1,79
	.word	305
	.byte	8,5,0,0,7
	.byte	'Dem_ISO14229ByteSetConfirmedDTC',0,3,9,235,1,17,1,1,4
	.byte	'self',0,9,235,1,57
	.word	322
	.byte	4
	.byte	'setOrReset',0,9,235,1,81
	.word	305
	.byte	8,5,0,0,7
	.byte	'Dem_ISO14229ByteSetWarningIndicatorRequested',0,3,9,242,1,17,1,1,4
	.byte	'self',0,9,242,1,70
	.word	322
	.byte	4
	.byte	'setOrReset',0,9,242,1,94
	.word	305
	.byte	8,5,0,0
.L85:
	.byte	3
	.byte	'Dem_isDtcIdValid',0,3,10,152,1,30
	.word	305
	.byte	1,1
.L87:
	.byte	4
	.byte	'id',0,10,152,1,62
	.word	223
.L89:
	.byte	5,0
.L163:
	.byte	3
	.byte	'Dem_DtcIdFromEventId',0,3,10,158,1,27
	.word	223
	.byte	1,1
.L165:
	.byte	4
	.byte	'id',0,10,158,1,65
	.word	223
.L167:
	.byte	5,0,3
	.byte	'Dem_DtcIdGetEventId',0,3,10,166,1,28
	.word	223
	.byte	1,1,4
	.byte	'dtcid',0,10,166,1,63
	.word	223
	.byte	5,0,3
	.byte	'Dem_DtcIdGetFirstEventId',0,3,10,174,1,28
	.word	223
	.byte	1,1,4
	.byte	'dtcid',0,10,174,1,68
	.word	223
	.byte	8,5,0,0,3
	.byte	'Dem_DtcGroupIdIsValid',0,3,10,252,1,30
	.word	305
	.byte	1,1,4
	.byte	'dtcGroupID',0,10,252,1,72
	.word	305
	.byte	5,0,9
	.word	223
	.byte	6
	.word	3672
	.byte	10,10,171,2,9,8,11
	.byte	'it',0
	.word	3677
	.byte	4,2,35,0,11
	.byte	'end',0
	.word	3677
	.byte	4,2,35,4,0,6
	.word	3682
	.byte	7
	.byte	'Dem_EventIdListIteratorNewFromDtcId',0,3,10,177,2,17,1,1,4
	.byte	'it',0,10,177,2,78
	.word	3714
	.byte	4
	.byte	'dtcid',0,10,177,2,96
	.word	223
	.byte	8,5,0,0,9
	.word	3682
	.byte	6
	.word	3794
	.byte	3
	.byte	'Dem_EventIdListIteratorIsValid',0,3,10,193,2,30
	.word	305
	.byte	1,1,4
	.byte	'it',0,10,193,2,92
	.word	3799
	.byte	5,0,7
	.byte	'Dem_EventIdListIteratorNext',0,3,10,198,2,17,1,1,4
	.byte	'it',0,10,198,2,70
	.word	3714
	.byte	5,0,3
	.byte	'Dem_EventIdListIteratorCurrent',0,3,10,203,2,28
	.word	223
	.byte	1,1,4
	.byte	'it',0,10,203,2,90
	.word	3799
	.byte	5,0,3
	.byte	'Dem_EnCoAreAllFulfilled',0,3,11,32,30
	.word	305
	.byte	1,1,4
	.byte	'enableConditionList',0,11,32,68
	.word	305
	.byte	5,0,3
	.byte	'Dem_NvMGetNvMBlocKId',0,3,12,49,28
	.word	223
	.byte	1,1,4
	.byte	'id',0,12,49,68
	.word	305
	.byte	5,0,3
	.byte	'Dem_NvmGetStatus',0,3,12,54,30
	.word	305
	.byte	1,1,4
	.byte	'id',0,12,54,67
	.word	305
	.byte	8,5,0,0,7
	.byte	'Dem_NvMWriteBlockOnShutdown',0,3,12,92,17,1,1,4
	.byte	'id',0,12,92,64
	.word	305
	.byte	5,0,7
	.byte	'Dem_NvMClearBlockByWrite',0,3,12,102,17,1,1,4
	.byte	'id',0,12,102,61
	.word	305
	.byte	5,0,7
	.byte	'Dem_NvMClearBlockByInvalidate',0,3,12,107,17,1,1,4
	.byte	'id',0,12,107,66
	.word	305
	.byte	5,0,7
	.byte	'Dem_NvMStartClear',0,3,12,138,1,17,1,1,5,0,3
	.byte	'Dem_NvMIsInvalidateAllNVMBlocksRequested',0,3,12,167,1,30
	.word	305
	.byte	1,1,5,0,3
	.byte	'rba_DiagLib_ByteOrderUtils_SwapByteOrderS',0,3,13,36,21
	.word	223
	.byte	1,1,4
	.byte	'val',0,13,36,70
	.word	223
	.byte	8,5,0,0,3
	.byte	'rba_DiagLib_ByteOrderUtils_SwapByteOrderL',0,3,13,41,21
	.word	149
	.byte	1,1,4
	.byte	'val',0,13,41,70
	.word	149
	.byte	8,5,0,0,3
	.byte	'Dem_EvtParam_GetStoreTestFailedToNextOC',0,3,14,55,22
	.word	305
	.byte	1,1,4
	.byte	'indx',0,14,55,78
	.word	223
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetEventIsStoredInPrimary',0,3,14,75,22
	.word	305
	.byte	1,1,4
	.byte	'indx',0,14,75,77
	.word	223
	.byte	8,5,0,0,3
	.byte	'Dem_EvtParam_GetEventIsStoredInSecondary',0,3,14,82,22
	.word	305
	.byte	1,1,4
	.byte	'indx',0,14,82,79
	.word	223
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetEventIsStoredInMirror',0,3,14,89,22
	.word	305
	.byte	1,1,4
	.byte	'indx',0,14,89,76
	.word	223
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetAgingAllowed',0,3,14,95,22
	.word	305
	.byte	1,1,4
	.byte	'indx',0,14,95,67
	.word	223
	.byte	8,5,0,0,3
	.byte	'Dem_EvtParam_GetOperationCycleID',0,3,14,122,20
	.word	305
	.byte	1,1,4
	.byte	'indx',0,14,122,69
	.word	223
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetAgingCycleID',0,3,14,129,1,20
	.word	305
	.byte	1,1,4
	.byte	'indx',0,14,129,1,65
	.word	223
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetFailureCycleID',0,3,14,136,1,20
	.word	305
	.byte	1,1,4
	.byte	'indx',0,14,136,1,67
	.word	223
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetDebounceMethodIndex',0,3,14,149,1,20
	.word	305
	.byte	1,1,4
	.byte	'indx',0,14,149,1,72
	.word	223
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetDebounceParamSettingIndex',0,3,14,155,1,21
	.word	223
	.byte	1,1,4
	.byte	'indx',0,14,155,1,79
	.word	223
	.byte	8,5,0,0,3
	.byte	'Dem_EvtParam_GetAgingThreshold',0,3,14,168,1,20
	.word	305
	.byte	1,1,4
	.byte	'indx',0,14,168,1,67
	.word	223
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetEnableConditions',0,3,14,208,1,27
	.word	305
	.byte	1,1,4
	.byte	'indx',0,14,208,1,76
	.word	223
	.byte	5,0,2
	.byte	'short int',0,2,5,3
	.byte	'Dem_EvtGetDebounceLevel',0,3,15,193,1,19
	.word	5237
	.byte	1,1,4
	.byte	'EventId',0,15,193,1,60
	.word	223
	.byte	5,0,3
	.byte	'Dem_EvtGetLastReportedEvent',0,3,15,219,1,32
	.word	305
	.byte	1,1,4
	.byte	'EventId',0,15,219,1,77
	.word	223
	.byte	5,0,7
	.byte	'Dem_EvtIncreaseGlobalInitMonitoringCounter',0,3,15,227,3,17,1,1,5,0,7
	.byte	'Dem_EvtSetAnyInitMonitoring',0,3,15,233,3,17,1,1,4
	.byte	'reason',0,15,233,3,72
	.word	305
	.byte	8,5,0,0,3
	.byte	'Dem_EvtIsSuppressed',0,3,15,244,4,30
	.word	305
	.byte	1,1,4
	.byte	'EventId',0,15,244,4,67
	.word	223
	.byte	8,5,0,0,6
	.word	305
	.byte	7
	.byte	'Dem_EnvSetTrigger',0,3,16,17,17,1,1,4
	.byte	'trigger',0,16,17,52
	.word	5526
	.byte	4
	.byte	'trigger2set',0,16,17,77
	.word	305
	.byte	5,0,3
	.byte	'Dem_EnvIsAnyTriggerSet',0,3,16,22,30
	.word	305
	.byte	1,1,4
	.byte	'trigger2test',0,16,22,69
	.word	305
	.byte	5,0
.L95:
	.byte	2
	.byte	'unsigned long int',0,4,7,3
	.byte	'Dem_DebHandleDebounceAction__processBits',0,3,17,101,30
	.word	305
	.byte	1,1,4
	.byte	'EventId',0,17,101,87
	.word	223
	.byte	4
	.byte	'debAction',0,17,101,120
	.word	5651
	.byte	5,0,12
	.word	223
	.byte	6
	.word	5760
	.byte	7
	.byte	'Dem_ClientResultType_setResult',0,3,18,27,17,1,1,4
	.byte	'result',0,18,27,79
	.word	5765
	.byte	4
	.byte	'request',0,18,27,109
	.word	223
	.byte	4
	.byte	'newResult',0,18,27,133,1
	.word	305
	.byte	5,0,12
	.word	223
	.byte	6
	.word	5860
	.byte	7
	.byte	'Dem_ClientRequestType_setRequest',0,3,18,65,17,1,1,4
	.byte	'request',0,18,65,82
	.word	5865
	.byte	4
	.byte	'newRequest',0,18,65,97
	.word	305
	.byte	5,0,6
	.word	149
	.byte	7
	.byte	'Dem_ClientSelectionType_invalidateSelectionResult',0,3,18,151,1,17,1,1,4
	.byte	'selection',0,18,151,1,93
	.word	5947
	.byte	5,0,3
	.byte	'Dem_ClientSelectionType_getTypeOfSelection',0,3,18,168,1,18
	.word	305
	.byte	1,1,4
	.byte	'selection',0,18,168,1,86
	.word	149
	.byte	5,0,7
	.byte	'Dem_ClientClearMachine_SetMachineActiveClient',0,3,19,53,17,1,1,4
	.byte	'ClientId',0,19,53,80
	.word	305
	.byte	5,0,7
	.byte	'Dem_ClientClearMachine_SetMachineState',0,3,19,68,17,1,1,4
	.byte	'state',0,19,68,62
	.word	305
	.byte	5,0,3
	.byte	'Dem_ClientClearMachine_isClearDtcGroupAllDtcsSelected',0,3,19,78,20
	.word	305
	.byte	1,1,4
	.byte	'ClientId',0,19,78,91
	.word	305
	.byte	8,5,5,5,5,0,0,3
	.byte	'Dem_EvMemIsMemIdValid',0,3,20,103,30
	.word	305
	.byte	1,1,4
	.byte	'MemId',0,20,103,65
	.word	5651
	.byte	5,0,3
	.byte	'Dem_EvMemIsEventMemLocIdValid',0,3,20,112,30
	.word	305
	.byte	1,1,4
	.byte	'LocId',0,20,112,73
	.word	5651
	.byte	5,0,10,21,133,1,3,4,11
	.byte	'Status',0
	.word	223
	.byte	2,2,35,0,11
	.byte	'EventId',0
	.word	223
	.byte	2,2,35,2,0,13,21,131,1,9,4,11
	.byte	'Data',0
	.word	6436
	.byte	4,2,35,0,0,14,7
	.word	305
	.byte	15,6,0,10,21,144,1,9,20,11
	.byte	'Hdr',0
	.word	6476
	.byte	4,2,35,0,11
	.byte	'Data',0
	.word	6497
	.byte	7,2,35,4,11
	.byte	'FailureCounter',0
	.word	305
	.byte	1,2,35,11,11
	.byte	'FreezeFrameCounter',0
	.word	305
	.byte	1,2,35,12,11
	.byte	'AgingCounter',0
	.word	305
	.byte	1,2,35,13,11
	.byte	'OccurrenceCounter',0
	.word	305
	.byte	1,2,35,14,11
	.byte	'Trigger',0
	.word	305
	.byte	1,2,35,15,11
	.byte	'TimeId',0
	.word	149
	.byte	4,2,35,16,0,9
	.word	6506
	.byte	6
	.word	6674
.L131:
	.byte	3
	.byte	'Dem_EvMemGetEventMemStatusByPtr',0,3,20,134,1,25
	.word	5651
	.byte	1,1
.L133:
	.byte	4
	.byte	'EventMemory',0,20,134,1,89
	.word	6679
.L135:
	.byte	5,0
.L123:
	.byte	3
	.byte	'Dem_EvMemGetEventMemStatus',0,3,20,139,1,25
	.word	5651
	.byte	1,1
.L125:
	.byte	4
	.byte	'LocId',0,20,139,1,65
	.word	5651
.L127:
	.byte	8,5,0,0
.L140:
	.byte	3
	.byte	'Dem_EvMemGetEventMemEventIdByPtr',0,3,20,152,1,28
	.word	223
	.byte	1,1
.L142:
	.byte	4
	.byte	'EventMemory',0,20,152,1,93
	.word	6679
.L144:
	.byte	5,0
.L103:
	.byte	3
	.byte	'Dem_EvMemGetEventMemEventId',0,3,20,157,1,28
	.word	223
	.byte	1,1
.L106:
	.byte	4
	.byte	'LocId',0,20,157,1,69
	.word	5651
.L108:
	.byte	8,5,0,0,3
	.byte	'Dem_EvMemGetEventMemTimeIdByPtr',0,3,20,170,1,19
	.word	149
	.byte	1,1,4
	.byte	'EventMemory',0,20,170,1,83
	.word	6679
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemDtcStatusByPtr',0,3,20,188,1,18
	.word	305
	.byte	1,1,4
	.byte	'EventMemory',0,20,188,1,85
	.word	6679
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemFailureCounterByPtr',0,3,20,216,1,24
	.word	5651
	.byte	1,1,4
	.byte	'EventMemory',0,20,216,1,96
	.word	6679
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemOccurrenceCounterByPtr',0,3,20,233,1,25
	.word	5651
	.byte	1,1,4
	.byte	'EventMemory',0,20,233,1,100
	.word	6679
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemAgingCounterByPtr',0,3,20,133,2,25
	.word	5651
	.byte	1,1,4
	.byte	'EventMemory',0,20,133,2,95
	.word	6679
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemAgingCounter',0,3,20,144,2,25
	.word	5651
	.byte	1,1,4
	.byte	'LocId',0,20,144,2,71
	.word	5651
	.byte	8,5,0,0,7
	.byte	'Dem_EvMemSetEventMemAgingCounter',0,3,20,150,2,17,1,1,4
	.byte	'LocId',0,20,150,2,63
	.word	5651
	.byte	4
	.byte	'AgingCounter',0,20,150,2,83
	.word	5651
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr',0,3,20,161,2,25
	.word	5651
	.byte	1,1,4
	.byte	'EventMemory',0,20,161,2,103
	.word	6679
	.byte	5,0,2
	.byte	'char',0,1,6,3
	.byte	'Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr',0,3,20,213,2,18
	.word	7524
	.byte	1,1,4
	.byte	'EventMemory',0,20,213,2,92
	.word	6679
	.byte	5,0,3
	.byte	'Dem_EvMemGetMaxFdcSinceLastClearByPtr',0,3,20,224,2,18
	.word	7524
	.byte	1,1,4
	.byte	'EventMemory',0,20,224,2,88
	.word	6679
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemFreezeFrameCounterByPtr',0,3,20,238,3,25
	.word	5651
	.byte	1,1,4
	.byte	'EventMemory',0,20,238,3,101
	.word	6679
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemTriggerByPtr',0,3,20,141,4,28
	.word	305
	.byte	1,1,4
	.byte	'EventMemory',0,20,141,4,93
	.word	6679
	.byte	5,0,6
	.word	6506
	.byte	3
	.byte	'Dem_EvMemGetEventMemDataByPtr',0,3,20,170,4,19
	.word	322
	.byte	1,1,4
	.byte	'EventMemory',0,20,170,4,75
	.word	7829
	.byte	5,0,3
	.byte	'Dem_EvMemIsStored',0,3,20,206,4,30
	.word	305
	.byte	1,1,4
	.byte	'Status',0,20,206,4,61
	.word	5651
	.byte	5,0
.L136:
	.byte	3
	.byte	'Dem_EvMemIsEmpty',0,3,20,211,4,30
	.word	305
	.byte	1,1
.L137:
	.byte	4
	.byte	'Status',0,20,211,4,60
	.word	5651
.L139:
	.byte	5,0,3
	.byte	'Dem_EvMemSetToEmpty',0,3,20,226,4,25
	.word	5651
	.byte	1,1,5,0,3
	.byte	'Dem_EvMemGetShadowVisibility',0,3,20,242,4,30
	.word	305
	.byte	1,1,5,0
.L119:
	.byte	3
	.byte	'Dem_EvMemGetEventMemStartLocId',0,3,20,131,5,25
	.word	5651
	.byte	1,1
.L120:
	.byte	4
	.byte	'MemId',0,20,131,5,69
	.word	5651
.L122:
	.byte	5,0
.L159:
	.byte	3
	.byte	'Dem_EvMemGetEventMemEndLocId',0,3,20,143,5,25
	.word	5651
	.byte	1,1
.L160:
	.byte	4
	.byte	'MemId',0,20,143,5,67
	.word	5651
.L162:
	.byte	5,0,6
	.word	5651
.L111:
	.byte	7
	.byte	'Dem_EvMemEventMemoryLocIteratorNew',0,3,20,155,5,17,1,1
.L114:
	.byte	4
	.byte	'LocId',0,20,155,5,67
	.word	8189
.L116:
	.byte	4
	.byte	'MemId',0,20,155,5,87
	.word	5651
.L118:
	.byte	8,5,0,0,9
	.word	5651
	.byte	6
	.word	8271
.L152:
	.byte	3
	.byte	'Dem_EvMemEventMemoryLocIteratorIsValid',0,3,20,161,5,30
	.word	305
	.byte	1,1
.L154:
	.byte	4
	.byte	'LocId',0,20,161,5,90
	.word	8276
.L156:
	.byte	4
	.byte	'MemId',0,20,161,5,110
	.word	5651
.L158:
	.byte	8,5,0,0
.L145:
	.byte	7
	.byte	'Dem_EvMemEventMemoryLocIteratorNext',0,3,20,167,5,17,1,1
.L147:
	.byte	4
	.byte	'LocId',0,20,167,5,68
	.word	8189
.L149:
	.byte	4
	.byte	'MemId',0,20,167,5,88
	.word	5651
.L151:
	.byte	5,0,7
	.byte	'Dem_EvMemEventMemoryIteratorNew',0,3,20,179,5,17,1,1,4
	.byte	'MemId',0,20,179,5,63
	.word	8189
	.byte	5,0,3
	.byte	'Dem_EvMemEventMemoryIteratorIsValid',0,3,20,184,5,30
	.word	305
	.byte	1,1,4
	.byte	'MemId',0,20,184,5,86
	.word	8276
	.byte	5,0,7
	.byte	'Dem_EvMemEventMemoryIteratorNext',0,3,20,189,5,17,1,1,4
	.byte	'MemId',0,20,189,5,64
	.word	8189
	.byte	5,0,3
	.byte	'Dem_EvMemIsOriginPrimary',0,3,20,224,5,30
	.word	305
	.byte	1,1,4
	.byte	'LocId',0,20,224,5,69
	.word	5651
	.byte	5,0,3
	.byte	'Dem_EvMemIsOriginSecondary',0,3,20,229,5,30
	.word	305
	.byte	1,1,4
	.byte	'LocId',0,20,229,5,71
	.word	5651
	.byte	5,0,3
	.byte	'Dem_EvMemIsEdgeTrigger',0,3,20,247,5,30
	.word	305
	.byte	1,1,4
	.byte	'StatusOld',0,20,247,5,66
	.word	5651
	.byte	4
	.byte	'StatusNew',0,20,247,5,90
	.word	5651
	.byte	4
	.byte	'Trigger',0,20,247,5,114
	.word	5651
	.byte	5,0,3
	.byte	'Dem_EvMemGetRamStsMask',0,3,20,154,7,25
	.word	5651
	.byte	1,1,4
	.byte	'EventId',0,20,154,7,64
	.word	223
	.byte	8,5,0,0,3
	.byte	'Dem_EvMemGetCurrentAgingCycleCounterInt',0,3,22,20,25
	.word	5651
	.byte	1,1,4
	.byte	'EventId',0,22,20,81
	.word	223
	.byte	5,0,3
	.byte	'Dem_EvMemIsAged',0,3,22,61,30
	.word	305
	.byte	1,1,4
	.byte	'EventId',0,22,61,62
	.word	223
	.byte	4
	.byte	'LocId',0,22,61,84
	.word	5651
	.byte	4
	.byte	'StatusNew',0,22,61,104
	.word	5651
	.byte	5,0,3
	.byte	'Dem_EvMemGetMemIdForDTCOrigin',0,3,23,150,1,25
	.word	5651
	.byte	1,1,4
	.byte	'DTCOrigin',0,23,150,1,73
	.word	305
	.byte	5,0,3
	.byte	'Dem_EvMemGetMemIdForEvent',0,3,23,222,1,25
	.word	5651
	.byte	1,1,4
	.byte	'EventId',0,23,222,1,67
	.word	223
	.byte	8,5,0,0,3
	.byte	'Dem_GetEvMemLockInternal',0,3,23,137,2,20
	.word	305
	.byte	1,1,5,0,3
	.byte	'Dem_DtcIsSuppressed',0,3,24,118,30
	.word	305
	.byte	1,1,4
	.byte	'dtcId',0,24,118,65
	.word	223
	.byte	8,5,0,0,3
	.byte	'Dem_DtcIsSuppressedDirectly',0,3,24,128,1,30
	.word	305
	.byte	1,1,4
	.byte	'dtcId',0,24,128,1,73
	.word	223
	.byte	5,0,3
	.byte	'Dem_EventUsesOrigin',0,3,24,137,2,30
	.word	305
	.byte	1,1,4
	.byte	'eventId',0,24,137,2,67
	.word	223
	.byte	4
	.byte	'origin',0,24,137,2,94
	.word	305
	.byte	8,5,5,5,0,0
.L80:
	.byte	3
	.byte	'Dem_EvMemGenGetDtcIdByOccIndex',0,3,25,31,26
	.word	223
	.byte	1,1
.L82:
	.byte	4
	.byte	'OccIndex',0,25,31,64
	.word	149
.L84:
	.byte	5,0
.L171:
	.byte	7
	.byte	'Dem_EvMemGenSetDtcByOccIndex',0,3,25,42,17,1,1
.L173:
	.byte	4
	.byte	'DtcId',0,25,42,60
	.word	223
.L175:
	.byte	4
	.byte	'OccIndex',0,25,42,73
	.word	149
.L177:
	.byte	5,0,7
	.byte	'Dem_EvMemGenReportEvent',0,3,25,79,17,1,1,4
	.byte	'EventId',0,25,79,57
	.word	223
	.byte	4
	.byte	'FirstOccIndex',0,25,79,73
	.word	149
	.byte	4
	.byte	'RecntOccIndex',0,25,79,95
	.word	149
	.byte	8,5,5,5,5,5,5,5,5,5,0,0
.L78:
	.byte	3
	.byte	'Dem_EvMemGenGetLastFailedDtcFromGenNvData',0,3,25,157,1,26
	.word	223
	.byte	1,1
.L79:
	.byte	8,5,0,0
.L90:
	.byte	3
	.byte	'Dem_EvMemGenGetLastConfirmedDtcFromGenNvData',0,3,25,163,1,26
	.word	223
	.byte	1,1
.L91:
	.byte	8,5,0,0,7
	.byte	'Dem_EvMemGenSetOverflow',0,3,25,174,1,17,1,1,4
	.byte	'DtcOrigin',0,25,174,1,59
	.word	305
	.byte	5,0,3
	.byte	'Dem_EvMemGenIsOverflow',0,3,25,184,1,20
	.word	305
	.byte	1,1,4
	.byte	'DtcOrigin',0,25,184,1,61
	.word	305
	.byte	5,0,3
	.byte	'Dem_EvtGetIsoByte',0,3,26,42,34
	.word	305
	.byte	1,1,4
	.byte	'EventId',0,26,42,69
	.word	223
	.byte	5,0,7
	.byte	'Dem_EvtSt_SetTestFailed',0,3,26,172,3,17,1,1,4
	.byte	'EventId',0,26,172,3,57
	.word	223
	.byte	4
	.byte	'setBit',0,26,172,3,84
	.word	305
	.byte	8,5,0,0,7
	.byte	'Dem_EvtSt_SetTestFailedSLC',0,3,26,179,3,17,1,1,4
	.byte	'EventId',0,26,179,3,60
	.word	223
	.byte	4
	.byte	'setBit',0,26,179,3,87
	.word	305
	.byte	8,5,0,0,7
	.byte	'Dem_EvtSt_SetTestCompleteSLC',0,3,26,186,3,17,1,1,4
	.byte	'EventId',0,26,186,3,63
	.word	223
	.byte	4
	.byte	'setBit',0,26,186,3,90
	.word	305
	.byte	8,5,0,0,7
	.byte	'Dem_EvtSt_SetConfirmedDTC',0,3,26,193,3,17,1,1,4
	.byte	'EventId',0,26,193,3,59
	.word	223
	.byte	4
	.byte	'setBit',0,26,193,3,86
	.word	305
	.byte	8,5,0,0,7
	.byte	'Dem_EvtSt_SetPendingDTC',0,3,26,200,3,17,1,1,4
	.byte	'EventId',0,26,200,3,57
	.word	223
	.byte	4
	.byte	'setBit',0,26,200,3,84
	.word	305
	.byte	8,5,0,0,16
	.word	165
	.byte	17
	.word	203
	.byte	5,0,16
	.word	245
	.byte	17
	.word	284
	.byte	5,0,16
	.word	334
	.byte	17
	.word	369
	.byte	17
	.word	386
	.byte	17
	.word	407
	.byte	5,0,16
	.word	430
	.byte	17
	.word	460
	.byte	5,0,16
	.word	480
	.byte	17
	.word	511
	.byte	5,0,16
	.word	531
	.byte	17
	.word	565
	.byte	5,0,16
	.word	580
	.byte	17
	.word	610
	.byte	17
	.word	625
	.byte	5,0,16
	.word	648
	.byte	17
	.word	680
	.byte	17
	.word	695
	.byte	5,0,16
	.word	718
	.byte	17
	.word	754
	.byte	17
	.word	769
	.byte	17
	.word	790
	.byte	8,18
	.word	580
	.byte	17
	.word	610
	.byte	17
	.word	625
	.byte	19
	.word	646
	.byte	0,5,18
	.word	648
	.byte	17
	.word	680
	.byte	17
	.word	695
	.byte	19
	.word	716
	.byte	0,5,0,0,16
	.word	819
	.byte	17
	.word	859
	.byte	17
	.word	873
	.byte	5,0,16
	.word	896
	.byte	17
	.word	932
	.byte	17
	.word	946
	.byte	8,18
	.word	819
	.byte	17
	.word	859
	.byte	17
	.word	873
	.byte	19
	.word	894
	.byte	0,5,0,0,16
	.word	971
	.byte	17
	.word	1006
	.byte	17
	.word	1020
	.byte	17
	.word	1041
	.byte	5,0,16
	.word	1066
	.byte	17
	.word	1099
	.byte	17
	.word	1113
	.byte	17
	.word	1134
	.byte	5,0,16
	.word	1159
	.byte	17
	.word	1196
	.byte	17
	.word	1210
	.byte	17
	.word	1231
	.byte	17
	.word	1254
	.byte	8,18
	.word	1066
	.byte	17
	.word	1099
	.byte	17
	.word	1113
	.byte	17
	.word	1134
	.byte	19
	.word	1157
	.byte	0,5,0,0,16
	.word	1280
	.byte	17
	.word	1311
	.byte	17
	.word	1326
	.byte	5,0,16
	.word	1349
	.byte	17
	.word	1382
	.byte	17
	.word	1397
	.byte	5,0,16
	.word	1420
	.byte	17
	.word	1461
	.byte	17
	.word	1475
	.byte	5,0,16
	.word	1498
	.byte	17
	.word	1535
	.byte	17
	.word	1549
	.byte	8,18
	.word	1420
	.byte	17
	.word	1461
	.byte	17
	.word	1475
	.byte	19
	.word	1496
	.byte	0,5,0,0,16
	.word	1574
	.byte	17
	.word	1610
	.byte	17
	.word	1624
	.byte	17
	.word	1645
	.byte	5,0,16
	.word	1670
	.byte	17
	.word	1704
	.byte	17
	.word	1718
	.byte	17
	.word	1739
	.byte	5,0,16
	.word	1769
	.byte	17
	.word	1800
	.byte	17
	.word	1815
	.byte	5,0,16
	.word	1838
	.byte	17
	.word	1871
	.byte	17
	.word	1886
	.byte	5,0,16
	.word	1909
	.byte	17
	.word	1950
	.byte	17
	.word	1964
	.byte	5,0,16
	.word	1987
	.byte	17
	.word	2024
	.byte	17
	.word	2038
	.byte	8,18
	.word	1909
	.byte	17
	.word	1950
	.byte	17
	.word	1964
	.byte	19
	.word	1985
	.byte	0,5,0,0,16
	.word	2063
	.byte	17
	.word	2097
	.byte	17
	.word	2111
	.byte	17
	.word	2132
	.byte	5,0,16
	.word	2157
	.byte	17
	.word	2183
	.byte	17
	.word	2198
	.byte	5,0,16
	.word	2221
	.byte	17
	.word	2249
	.byte	17
	.word	2264
	.byte	5,0,16
	.word	2287
	.byte	17
	.word	2319
	.byte	17
	.word	2334
	.byte	17
	.word	2355
	.byte	8,18
	.word	2157
	.byte	17
	.word	2183
	.byte	17
	.word	2198
	.byte	19
	.word	2219
	.byte	0,5,18
	.word	2221
	.byte	17
	.word	2249
	.byte	17
	.word	2264
	.byte	19
	.word	2285
	.byte	0,5,0,0,16
	.word	2394
	.byte	17
	.word	2426
	.byte	17
	.word	2441
	.byte	5,0,16
	.word	2464
	.byte	17
	.word	2504
	.byte	8,18
	.word	896
	.byte	17
	.word	932
	.byte	17
	.word	946
	.byte	20
	.word	967
	.byte	18
	.word	819
	.byte	17
	.word	859
	.byte	17
	.word	873
	.byte	19
	.word	894
	.byte	0,19
	.word	968
	.byte	0,0,5,0,0,16
	.word	2521
	.byte	17
	.word	2565
	.byte	8,18
	.word	896
	.byte	17
	.word	932
	.byte	17
	.word	946
	.byte	20
	.word	967
	.byte	18
	.word	819
	.byte	17
	.word	859
	.byte	17
	.word	873
	.byte	19
	.word	894
	.byte	0,19
	.word	968
	.byte	0,0,5,0,0,16
	.word	2583
	.byte	17
	.word	2629
	.byte	8,18
	.word	896
	.byte	17
	.word	932
	.byte	17
	.word	946
	.byte	20
	.word	967
	.byte	18
	.word	819
	.byte	17
	.word	859
	.byte	17
	.word	873
	.byte	19
	.word	894
	.byte	0,19
	.word	968
	.byte	0,0,5,0,0,16
	.word	2647
	.byte	17
	.word	2688
	.byte	8,18
	.word	896
	.byte	17
	.word	932
	.byte	17
	.word	946
	.byte	20
	.word	967
	.byte	18
	.word	819
	.byte	17
	.word	859
	.byte	17
	.word	873
	.byte	19
	.word	894
	.byte	0,19
	.word	968
	.byte	0,0,5,0,0,16
	.word	2706
	.byte	17
	.word	2762
	.byte	8,18
	.word	896
	.byte	17
	.word	932
	.byte	17
	.word	946
	.byte	20
	.word	967
	.byte	18
	.word	819
	.byte	17
	.word	859
	.byte	17
	.word	873
	.byte	19
	.word	894
	.byte	0,19
	.word	968
	.byte	0,0,5,0,0,16
	.word	2780
	.byte	17
	.word	2818
	.byte	17
	.word	2832
	.byte	8,18
	.word	718
	.byte	17
	.word	754
	.byte	17
	.word	769
	.byte	17
	.word	790
	.byte	20
	.word	814
	.byte	18
	.word	580
	.byte	17
	.word	610
	.byte	17
	.word	625
	.byte	19
	.word	646
	.byte	0,19
	.word	815
	.byte	18
	.word	648
	.byte	17
	.word	680
	.byte	17
	.word	695
	.byte	19
	.word	716
	.byte	0,19
	.word	816
	.byte	0,0,5,0,0,16
	.word	2856
	.byte	17
	.word	2897
	.byte	17
	.word	2911
	.byte	8,18
	.word	718
	.byte	17
	.word	754
	.byte	17
	.word	769
	.byte	17
	.word	790
	.byte	20
	.word	814
	.byte	18
	.word	580
	.byte	17
	.word	610
	.byte	17
	.word	625
	.byte	19
	.word	646
	.byte	0,19
	.word	815
	.byte	18
	.word	648
	.byte	17
	.word	680
	.byte	17
	.word	695
	.byte	19
	.word	716
	.byte	0,19
	.word	816
	.byte	0,0,5,0,0,16
	.word	2935
	.byte	17
	.word	2976
	.byte	17
	.word	2990
	.byte	8,18
	.word	718
	.byte	17
	.word	754
	.byte	17
	.word	769
	.byte	17
	.word	790
	.byte	20
	.word	814
	.byte	18
	.word	580
	.byte	17
	.word	610
	.byte	17
	.word	625
	.byte	19
	.word	646
	.byte	0,19
	.word	815
	.byte	18
	.word	648
	.byte	17
	.word	680
	.byte	17
	.word	695
	.byte	19
	.word	716
	.byte	0,19
	.word	816
	.byte	0,0,5,0,0,16
	.word	3014
	.byte	17
	.word	3057
	.byte	17
	.word	3071
	.byte	8,18
	.word	718
	.byte	17
	.word	754
	.byte	17
	.word	769
	.byte	17
	.word	790
	.byte	20
	.word	814
	.byte	18
	.word	580
	.byte	17
	.word	610
	.byte	17
	.word	625
	.byte	19
	.word	646
	.byte	0,19
	.word	815
	.byte	18
	.word	648
	.byte	17
	.word	680
	.byte	17
	.word	695
	.byte	19
	.word	716
	.byte	0,19
	.word	816
	.byte	0,0,5,0,0,16
	.word	3095
	.byte	17
	.word	3138
	.byte	17
	.word	3152
	.byte	8,18
	.word	718
	.byte	17
	.word	754
	.byte	17
	.word	769
	.byte	17
	.word	790
	.byte	20
	.word	814
	.byte	18
	.word	580
	.byte	17
	.word	610
	.byte	17
	.word	625
	.byte	19
	.word	646
	.byte	0,19
	.word	815
	.byte	18
	.word	648
	.byte	17
	.word	680
	.byte	17
	.word	695
	.byte	19
	.word	716
	.byte	0,19
	.word	816
	.byte	0,0,5,0,0,16
	.word	3176
	.byte	17
	.word	3214
	.byte	17
	.word	3228
	.byte	8,18
	.word	718
	.byte	17
	.word	754
	.byte	17
	.word	769
	.byte	17
	.word	790
	.byte	20
	.word	814
	.byte	18
	.word	580
	.byte	17
	.word	610
	.byte	17
	.word	625
	.byte	19
	.word	646
	.byte	0,19
	.word	815
	.byte	18
	.word	648
	.byte	17
	.word	680
	.byte	17
	.word	695
	.byte	19
	.word	716
	.byte	0,19
	.word	816
	.byte	0,0,5,0,0,16
	.word	3252
	.byte	17
	.word	3292
	.byte	17
	.word	3306
	.byte	8,18
	.word	718
	.byte	17
	.word	754
	.byte	17
	.word	769
	.byte	17
	.word	790
	.byte	20
	.word	814
	.byte	18
	.word	580
	.byte	17
	.word	610
	.byte	17
	.word	625
	.byte	19
	.word	646
	.byte	0,19
	.word	815
	.byte	18
	.word	648
	.byte	17
	.word	680
	.byte	17
	.word	695
	.byte	19
	.word	716
	.byte	0,19
	.word	816
	.byte	0,0,5,0,0,16
	.word	3330
	.byte	17
	.word	3383
	.byte	17
	.word	3397
	.byte	8,18
	.word	718
	.byte	17
	.word	754
	.byte	17
	.word	769
	.byte	17
	.word	790
	.byte	20
	.word	814
	.byte	18
	.word	580
	.byte	17
	.word	610
	.byte	17
	.word	625
	.byte	19
	.word	646
	.byte	0,19
	.word	815
	.byte	18
	.word	648
	.byte	17
	.word	680
	.byte	17
	.word	695
	.byte	19
	.word	716
	.byte	0,19
	.word	816
	.byte	0,0,5,0,0,16
	.word	3421
	.byte	17
	.word	3450
	.byte	5,0,16
	.word	3464
	.byte	17
	.word	3497
	.byte	5,0,16
	.word	3511
	.byte	17
	.word	3543
	.byte	5,0,16
	.word	3560
	.byte	17
	.word	3597
	.byte	8,18
	.word	3511
	.byte	17
	.word	3543
	.byte	19
	.word	3558
	.byte	0,5,0,0,16
	.word	3616
	.byte	17
	.word	3650
	.byte	5,0,16
	.word	3719
	.byte	17
	.word	3763
	.byte	17
	.word	3775
	.byte	8,18
	.word	3421
	.byte	17
	.word	3450
	.byte	19
	.word	3462
	.byte	0,5,0,0,16
	.word	3804
	.byte	17
	.word	3847
	.byte	5,0,16
	.word	3861
	.byte	17
	.word	3897
	.byte	5,0,16
	.word	3911
	.byte	17
	.word	3954
	.byte	5,0,16
	.word	3968
	.byte	17
	.word	4003
	.byte	5,0,16
	.word	4033
	.byte	17
	.word	4065
	.byte	5,0,16
	.word	4078
	.byte	17
	.word	4106
	.byte	8,18
	.word	4033
	.byte	17
	.word	4065
	.byte	19
	.word	4076
	.byte	0,5,0,0,16
	.word	4121
	.byte	17
	.word	4156
	.byte	5,0,16
	.word	4169
	.byte	17
	.word	4201
	.byte	5,0,16
	.word	4214
	.byte	17
	.word	4251
	.byte	5,0,16
	.word	4264
	.byte	5,0,16
	.word	4292
	.byte	5,0,16
	.word	4347
	.byte	17
	.word	4400
	.byte	8,18
	.word	245
	.byte	17
	.word	284
	.byte	19
	.word	303
	.byte	0,5,0,0,16
	.word	4416
	.byte	17
	.word	4469
	.byte	8,18
	.word	165
	.byte	17
	.word	203
	.byte	19
	.word	221
	.byte	0,5,0,0,16
	.word	4485
	.byte	17
	.word	4536
	.byte	5,0,16
	.word	4551
	.byte	17
	.word	4601
	.byte	8,18
	.word	1498
	.byte	17
	.word	1535
	.byte	17
	.word	1549
	.byte	20
	.word	1570
	.byte	18
	.word	1420
	.byte	17
	.word	1461
	.byte	17
	.word	1475
	.byte	19
	.word	1496
	.byte	0,19
	.word	1571
	.byte	0,0,5,0,0,16
	.word	4618
	.byte	17
	.word	4670
	.byte	5,0,16
	.word	4685
	.byte	17
	.word	4734
	.byte	5,0,16
	.word	4749
	.byte	17
	.word	4789
	.byte	8,18
	.word	1498
	.byte	17
	.word	1535
	.byte	17
	.word	1549
	.byte	20
	.word	1570
	.byte	18
	.word	1420
	.byte	17
	.word	1461
	.byte	17
	.word	1475
	.byte	19
	.word	1496
	.byte	0,19
	.word	1571
	.byte	0,0,5,0,0,16
	.word	4806
	.byte	17
	.word	4850
	.byte	5,0,16
	.word	4865
	.byte	17
	.word	4906
	.byte	5,0,16
	.word	4922
	.byte	17
	.word	4965
	.byte	5,0,16
	.word	4981
	.byte	17
	.word	5029
	.byte	5,0,16
	.word	5045
	.byte	17
	.word	5099
	.byte	8,18
	.word	1574
	.byte	17
	.word	1610
	.byte	17
	.word	1624
	.byte	17
	.word	1645
	.byte	19
	.word	1668
	.byte	0,5,0,0,16
	.word	5117
	.byte	17
	.word	5160
	.byte	5,0,16
	.word	5176
	.byte	17
	.word	5221
	.byte	5,0,16
	.word	5250
	.byte	17
	.word	5286
	.byte	5,0,16
	.word	5305
	.byte	17
	.word	5345
	.byte	5,0,16
	.word	5364
	.byte	5,0,16
	.word	5417
	.byte	17
	.word	5453
	.byte	8,18
	.word	1769
	.byte	17
	.word	1800
	.byte	17
	.word	1815
	.byte	19
	.word	1836
	.byte	0,5,0,0,16
	.word	5473
	.byte	17
	.word	5505
	.byte	8,18
	.word	896
	.byte	17
	.word	932
	.byte	17
	.word	946
	.byte	20
	.word	967
	.byte	18
	.word	819
	.byte	17
	.word	859
	.byte	17
	.word	873
	.byte	19
	.word	894
	.byte	0,19
	.word	968
	.byte	0,0,5,0,0,16
	.word	5531
	.byte	17
	.word	5556
	.byte	17
	.word	5572
	.byte	5,0,16
	.word	5594
	.byte	17
	.word	5628
	.byte	5,0,16
	.word	5672
	.byte	17
	.word	5724
	.byte	17
	.word	5740
	.byte	5,0,16
	.word	5770
	.byte	17
	.word	5808
	.byte	17
	.word	5823
	.byte	17
	.word	5839
	.byte	5,0,16
	.word	5870
	.byte	17
	.word	5910
	.byte	17
	.word	5926
	.byte	5,0,16
	.word	5952
	.byte	17
	.word	6010
	.byte	5,0,16
	.word	6031
	.byte	17
	.word	6086
	.byte	5,0,16
	.word	6107
	.byte	17
	.word	6160
	.byte	5,0,16
	.word	6179
	.byte	17
	.word	6225
	.byte	5,0,16
	.word	6241
	.byte	17
	.word	6306
	.byte	8,18
	.word	430
	.byte	17
	.word	460
	.byte	19
	.word	478
	.byte	0,5,18
	.word	430
	.byte	17
	.word	460
	.byte	19
	.word	478
	.byte	0,5,18
	.word	6031
	.byte	17
	.word	6086
	.byte	19
	.word	6105
	.byte	0,5,18
	.word	5770
	.byte	17
	.word	5808
	.byte	17
	.word	5823
	.byte	17
	.word	5839
	.byte	19
	.word	5858
	.byte	0,5,0,0,16
	.word	6330
	.byte	17
	.word	6363
	.byte	5,0,16
	.word	6379
	.byte	17
	.word	6420
	.byte	5,0,16
	.word	6684
	.byte	17
	.word	6728
	.byte	5,0,16
	.word	6751
	.byte	17
	.word	6790
	.byte	8,18
	.word	6684
	.byte	17
	.word	6728
	.byte	19
	.word	6749
	.byte	0,5,0,0,16
	.word	6809
	.byte	17
	.word	6854
	.byte	5,0,16
	.word	6877
	.byte	17
	.word	6917
	.byte	8,18
	.word	6809
	.byte	17
	.word	6854
	.byte	19
	.word	6875
	.byte	0,5,0,0,16
	.word	6936
	.byte	17
	.word	6980
	.byte	5,0,16
	.word	7003
	.byte	17
	.word	7050
	.byte	5,0,16
	.word	7073
	.byte	17
	.word	7125
	.byte	5,0,16
	.word	7148
	.byte	17
	.word	7203
	.byte	5,0,16
	.word	7226
	.byte	17
	.word	7276
	.byte	5,0,16
	.word	7299
	.byte	17
	.word	7344
	.byte	8,18
	.word	7226
	.byte	17
	.word	7276
	.byte	19
	.word	7297
	.byte	0,5,0,0,16
	.word	7363
	.byte	17
	.word	7404
	.byte	17
	.word	7419
	.byte	5,0,16
	.word	7443
	.byte	17
	.word	7501
	.byte	5,0,16
	.word	7532
	.byte	17
	.word	7586
	.byte	5,0,16
	.word	7609
	.byte	17
	.word	7659
	.byte	5,0,16
	.word	7682
	.byte	17
	.word	7738
	.byte	5,0,16
	.word	7761
	.byte	17
	.word	7806
	.byte	5,0,16
	.word	7834
	.byte	17
	.word	7876
	.byte	5,0,16
	.word	7899
	.byte	17
	.word	7929
	.byte	5,0,16
	.word	7947
	.byte	17
	.word	7976
	.byte	5,0,16
	.word	7994
	.byte	5,0,16
	.word	8028
	.byte	5,0,16
	.word	8071
	.byte	17
	.word	8114
	.byte	5,0,16
	.word	8131
	.byte	17
	.word	8172
	.byte	5,0,16
	.word	8194
	.byte	17
	.word	8237
	.byte	17
	.word	8252
	.byte	8,18
	.word	8071
	.byte	17
	.word	8114
	.byte	19
	.word	8129
	.byte	0,5,0,0,16
	.word	8281
	.byte	17
	.word	8332
	.byte	17
	.word	8347
	.byte	8,18
	.word	8131
	.byte	17
	.word	8172
	.byte	19
	.word	8187
	.byte	0,5,0,0,16
	.word	8366
	.byte	17
	.word	8410
	.byte	17
	.word	8425
	.byte	5,0,16
	.word	8442
	.byte	17
	.word	8482
	.byte	5,0,16
	.word	8499
	.byte	17
	.word	8547
	.byte	5,0,16
	.word	8564
	.byte	17
	.word	8605
	.byte	5,0,16
	.word	8622
	.byte	17
	.word	8659
	.byte	5,0,16
	.word	8676
	.byte	17
	.word	8715
	.byte	5,0,16
	.word	8732
	.byte	17
	.word	8767
	.byte	17
	.word	8786
	.byte	17
	.word	8805
	.byte	5,0,16
	.word	8824
	.byte	17
	.word	8859
	.byte	8,18
	.word	4485
	.byte	17
	.word	4536
	.byte	19
	.word	4549
	.byte	0,5,0,0,16
	.word	8880
	.byte	17
	.word	8931
	.byte	5,0,16
	.word	8949
	.byte	17
	.word	8976
	.byte	17
	.word	8992
	.byte	17
	.word	9006
	.byte	5,0,16
	.word	9026
	.byte	17
	.word	9068
	.byte	5,0,16
	.word	9089
	.byte	17
	.word	9127
	.byte	8,18
	.word	4551
	.byte	17
	.word	4601
	.byte	20
	.word	4614
	.byte	18
	.word	1498
	.byte	17
	.word	1535
	.byte	17
	.word	1549
	.byte	20
	.word	1570
	.byte	18
	.word	1420
	.byte	17
	.word	1461
	.byte	17
	.word	1475
	.byte	19
	.word	1496
	.byte	0,19
	.word	1571
	.byte	0,0,19
	.word	4615
	.byte	0,0,5,0,0,16
	.word	9148
	.byte	5,0,16
	.word	9187
	.byte	17
	.word	9218
	.byte	8,18
	.word	896
	.byte	17
	.word	932
	.byte	17
	.word	946
	.byte	20
	.word	967
	.byte	18
	.word	819
	.byte	17
	.word	859
	.byte	17
	.word	873
	.byte	19
	.word	894
	.byte	0,19
	.word	968
	.byte	0,0,5,0,0,16
	.word	9236
	.byte	17
	.word	9276
	.byte	5,0,16
	.word	9293
	.byte	17
	.word	9325
	.byte	17
	.word	9342
	.byte	8,18
	.word	4618
	.byte	17
	.word	4670
	.byte	19
	.word	4683
	.byte	0,5,18
	.word	4685
	.byte	17
	.word	4734
	.byte	19
	.word	4747
	.byte	0,5,18
	.word	4551
	.byte	17
	.word	4601
	.byte	20
	.word	4614
	.byte	18
	.word	1498
	.byte	17
	.word	1535
	.byte	17
	.word	1549
	.byte	20
	.word	1570
	.byte	18
	.word	1420
	.byte	17
	.word	1461
	.byte	17
	.word	1475
	.byte	19
	.word	1496
	.byte	0,19
	.word	1571
	.byte	0,0,19
	.word	4615
	.byte	0,0,5,0,0,16
	.word	9364
	.byte	17
	.word	9406
	.byte	5,0,16
	.word	9425
	.byte	17
	.word	9461
	.byte	17
	.word	9475
	.byte	5,0,16
	.word	9494
	.byte	17
	.word	9525
	.byte	17
	.word	9541
	.byte	17
	.word	9563
	.byte	8,18
	.word	3464
	.byte	17
	.word	3497
	.byte	19
	.word	3509
	.byte	0,5,18
	.word	9364
	.byte	17
	.word	9406
	.byte	19
	.word	9423
	.byte	0,5,18
	.word	9364
	.byte	17
	.word	9406
	.byte	19
	.word	9423
	.byte	0,5,18
	.word	4121
	.byte	17
	.word	4156
	.byte	19
	.word	4167
	.byte	0,5,18
	.word	4121
	.byte	17
	.word	4156
	.byte	19
	.word	4167
	.byte	0,5,18
	.word	9425
	.byte	17
	.word	9461
	.byte	17
	.word	9475
	.byte	19
	.word	9492
	.byte	0,5,18
	.word	9425
	.byte	17
	.word	9461
	.byte	17
	.word	9475
	.byte	19
	.word	9492
	.byte	0,5,18
	.word	3421
	.byte	17
	.word	3450
	.byte	19
	.word	3462
	.byte	0,5,18
	.word	3421
	.byte	17
	.word	3450
	.byte	19
	.word	3462
	.byte	0,5,0,0,16
	.word	9597
	.byte	8,18
	.word	9364
	.byte	17
	.word	9406
	.byte	19
	.word	9423
	.byte	0,5,0,0,16
	.word	9655
	.byte	8,18
	.word	9364
	.byte	17
	.word	9406
	.byte	19
	.word	9423
	.byte	0,5,0,0,16
	.word	9716
	.byte	17
	.word	9748
	.byte	5,0,16
	.word	9769
	.byte	17
	.word	9804
	.byte	5,0,16
	.word	9825
	.byte	17
	.word	9854
	.byte	5,0,16
	.word	9872
	.byte	17
	.word	9904
	.byte	17
	.word	9921
	.byte	8,18
	.word	2780
	.byte	17
	.word	2818
	.byte	17
	.word	2832
	.byte	20
	.word	2852
	.byte	18
	.word	718
	.byte	17
	.word	754
	.byte	17
	.word	769
	.byte	17
	.word	790
	.byte	20
	.word	814
	.byte	18
	.word	580
	.byte	17
	.word	610
	.byte	17
	.word	625
	.byte	19
	.word	646
	.byte	0,19
	.word	815
	.byte	18
	.word	648
	.byte	17
	.word	680
	.byte	17
	.word	695
	.byte	19
	.word	716
	.byte	0,19
	.word	816
	.byte	0,0,19
	.word	2853
	.byte	0,0,5,0,0,16
	.word	9941
	.byte	17
	.word	9976
	.byte	17
	.word	9993
	.byte	8,18
	.word	2935
	.byte	17
	.word	2976
	.byte	17
	.word	2990
	.byte	20
	.word	3010
	.byte	18
	.word	718
	.byte	17
	.word	754
	.byte	17
	.word	769
	.byte	17
	.word	790
	.byte	20
	.word	814
	.byte	18
	.word	580
	.byte	17
	.word	610
	.byte	17
	.word	625
	.byte	19
	.word	646
	.byte	0,19
	.word	815
	.byte	18
	.word	648
	.byte	17
	.word	680
	.byte	17
	.word	695
	.byte	19
	.word	716
	.byte	0,19
	.word	816
	.byte	0,0,19
	.word	3011
	.byte	0,0,5,0,0,16
	.word	10013
	.byte	17
	.word	10050
	.byte	17
	.word	10067
	.byte	8,18
	.word	3095
	.byte	17
	.word	3138
	.byte	17
	.word	3152
	.byte	20
	.word	3172
	.byte	18
	.word	718
	.byte	17
	.word	754
	.byte	17
	.word	769
	.byte	17
	.word	790
	.byte	20
	.word	814
	.byte	18
	.word	580
	.byte	17
	.word	610
	.byte	17
	.word	625
	.byte	19
	.word	646
	.byte	0,19
	.word	815
	.byte	18
	.word	648
	.byte	17
	.word	680
	.byte	17
	.word	695
	.byte	19
	.word	716
	.byte	0,19
	.word	816
	.byte	0,0,19
	.word	3173
	.byte	0,0,5,0,0,16
	.word	10087
	.byte	17
	.word	10121
	.byte	17
	.word	10138
	.byte	8,18
	.word	3252
	.byte	17
	.word	3292
	.byte	17
	.word	3306
	.byte	20
	.word	3326
	.byte	18
	.word	718
	.byte	17
	.word	754
	.byte	17
	.word	769
	.byte	17
	.word	790
	.byte	20
	.word	814
	.byte	18
	.word	580
	.byte	17
	.word	610
	.byte	17
	.word	625
	.byte	19
	.word	646
	.byte	0,19
	.word	815
	.byte	18
	.word	648
	.byte	17
	.word	680
	.byte	17
	.word	695
	.byte	19
	.word	716
	.byte	0,19
	.word	816
	.byte	0,0,19
	.word	3327
	.byte	0,0,5,0,0,16
	.word	10158
	.byte	17
	.word	10190
	.byte	17
	.word	10207
	.byte	8,18
	.word	3176
	.byte	17
	.word	3214
	.byte	17
	.word	3228
	.byte	20
	.word	3248
	.byte	18
	.word	718
	.byte	17
	.word	754
	.byte	17
	.word	769
	.byte	17
	.word	790
	.byte	20
	.word	814
	.byte	18
	.word	580
	.byte	17
	.word	610
	.byte	17
	.word	625
	.byte	19
	.word	646
	.byte	0,19
	.word	815
	.byte	18
	.word	648
	.byte	17
	.word	680
	.byte	17
	.word	695
	.byte	19
	.word	716
	.byte	0,19
	.word	816
	.byte	0,0,19
	.word	3249
	.byte	0,0,5,0,0,21,1,6
	.word	14771
	.byte	22
	.byte	'__codeptr',0,27,1,1
	.word	14773
	.byte	22
	.byte	'sint8',0,28,76,25
	.word	7524
	.byte	22
	.byte	'uint8',0,28,81,25
	.word	305
	.byte	22
	.byte	'sint16',0,28,86,25
	.word	5237
	.byte	22
	.byte	'uint16',0,28,91,25
	.word	223
	.byte	22
	.byte	'sint32',0,28,96,24
	.word	327
	.byte	22
	.byte	'uint32',0,28,106,24
	.word	149
	.byte	2
	.byte	'unsigned long long int',0,8,7,22
	.byte	'uint64',0,28,111,30
	.word	14884
	.byte	22
	.byte	'boolean',0,28,127,25
	.word	305
	.byte	22
	.byte	'uint8_least',0,28,137,1,25
	.word	5651
	.byte	22
	.byte	'uint16_least',0,28,147,1,25
	.word	5651
	.byte	22
	.byte	'StatusType',0,29,191,1,27
	.word	305
	.byte	22
	.byte	'Std_ReturnType',0,29,199,1,15
	.word	305
	.byte	10,29,206,1,9,8,11
	.byte	'vendorID',0
	.word	223
	.byte	2,2,35,0,11
	.byte	'moduleID',0
	.word	223
	.byte	2,2,35,2,11
	.byte	'sw_major_version',0
	.word	305
	.byte	1,2,35,4,11
	.byte	'sw_minor_version',0
	.word	305
	.byte	1,2,35,5,11
	.byte	'sw_patch_version',0
	.word	305
	.byte	1,2,35,6,0,22
	.byte	'Std_VersionInfoType',0,29,213,1,3
	.word	15028
	.byte	22
	.byte	'Dem_ClientRequestType',0,30,46,16
	.word	223
	.byte	22
	.byte	'Dem_ClientResultType',0,30,47,16
	.word	223
	.byte	22
	.byte	'Dem_ClientSelectionType',0,30,48,16
	.word	149
	.byte	22
	.byte	'Dem_ClientPriorityType',0,30,50,15
	.word	305
	.byte	22
	.byte	'Dem_ComponentIdType',0,31,20,15
	.word	305
	.byte	22
	.byte	'PduIdType',0,32,22,19
	.word	223
	.byte	22
	.byte	'PduLengthType',0,32,26,19
	.word	223
	.byte	23,33,113,9,4,24
	.byte	'TP_DATACONF',0,0,24
	.byte	'TP_DATARETRY',0,1,24
	.byte	'TP_CONFPENDING',0,2,0,22
	.byte	'TpDataStateType',0,33,118,3
	.word	15368
	.byte	22
	.byte	'Can_IdType',0,34,32,16
	.word	149
	.byte	22
	.byte	'Can_HwHandleType',0,34,43,16
	.word	223
	.byte	10,35,93,9,8,11
	.byte	'Class',0
	.word	305
	.byte	1,2,35,0,11
	.byte	'TIN',0
	.word	305
	.byte	1,2,35,1,11
	.byte	'ReturnAddress',0
	.word	149
	.byte	4,2,35,4,0,22
	.byte	'OsTrapInfoType',0,35,97,3
	.word	15488
	.byte	14,68
	.word	149
	.byte	15,16,0,10,35,154,1,9,68,11
	.byte	'store',0
	.word	15568
	.byte	68,2,35,0,0,14,68
	.word	15577
	.byte	15,0,0,22
	.byte	'Os_JumpBufType',0,35,156,1,3
	.word	15599
	.byte	22
	.byte	'Os_StackTraceType',0,35,174,1,18
	.word	149
	.byte	10,35,175,1,9,8,11
	.byte	'sp',0
	.word	149
	.byte	4,2,35,0,11
	.byte	'ctx',0
	.word	149
	.byte	4,2,35,4,0,22
	.byte	'Os_StackValueType',0,35,175,1,63
	.word	15659
	.byte	22
	.byte	'Os_StackSizeType',0,35,176,1,27
	.word	15659
	.byte	25,1,1,6
	.word	15744
	.byte	22
	.byte	'Os_VoidVoidFunctionType',0,35,179,1,16
	.word	15747
	.byte	22
	.byte	'ApplicationType',0,35,193,1,23
	.word	305
	.byte	26
	.byte	'Os_ApplicationConfigurationType_s',0,35,198,1,16,2,11
	.byte	'app_id',0
	.word	305
	.byte	1,2,35,0,11
	.byte	'access',0
	.word	305
	.byte	1,2,35,1,0,22
	.byte	'Os_ApplicationConfigurationType',0,35,201,1,3
	.word	15810
	.byte	22
	.byte	'Os_CoreStateType',0,35,203,1,16
	.word	149
	.byte	22
	.byte	'AreaIdType',0,35,204,1,16
	.word	223
	.byte	22
	.byte	'Os_PeripheralAddressType',0,35,212,1,22
	.word	149
	.byte	22
	.byte	'TickType',0,35,221,1,22
	.word	149
	.byte	22
	.byte	'Os_StopwatchTickType',0,35,225,1,22
	.word	149
	.byte	22
	.byte	'Os_Lockable',0,35,234,1,18
	.word	1764
	.byte	22
	.byte	'CoreIdType',0,35,236,1,16
	.word	223
	.byte	22
	.byte	'SpinlockIdType',0,35,237,1,16
	.word	223
	.byte	23,35,239,1,9,4,24
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,24
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,22
	.byte	'TryToGetSpinlockType',0,35,239,1,74
	.word	16117
	.byte	23,35,174,2,9,4,24
	.byte	'APPLICATION_ACCESSIBLE',0,0,24
	.byte	'APPLICATION_RESTARTING',0,1,24
	.byte	'APPLICATION_TERMINATED',0,2,0,22
	.byte	'ApplicationStateType',0,35,174,2,92
	.word	16210
	.byte	27
	.byte	'void',0,6
	.word	16322
	.byte	28,1,1,29
	.word	305
	.byte	29
	.word	16328
	.byte	0,6
	.word	16333
	.byte	22
	.byte	'Os_FunctionEntryType',0,35,183,2,16
	.word	16347
	.byte	26
	.byte	'Os_MeterInfoType_s',0,35,193,2,16,48,11
	.byte	'elapsed',0
	.word	149
	.byte	4,2,35,0,11
	.byte	'previous',0
	.word	149
	.byte	4,2,35,4,11
	.byte	'max',0
	.word	149
	.byte	4,2,35,8,11
	.byte	'cumulative',0
	.word	149
	.byte	4,2,35,12,11
	.byte	'stackbase',0
	.word	15659
	.byte	8,2,35,16,11
	.byte	'stackusage',0
	.word	15659
	.byte	8,2,35,24,11
	.byte	'stackmax',0
	.word	15659
	.byte	8,2,35,32,11
	.byte	'stackbudget',0
	.word	15659
	.byte	8,2,35,40,0,22
	.byte	'Os_MeterInfoType',0,35,202,2,3
	.word	16382
	.byte	6
	.word	16382
	.byte	22
	.byte	'Os_MeterInfoRefType',0,35,203,2,50
	.word	16580
	.byte	22
	.byte	'EventMaskType',0,35,206,2,15
	.word	305
	.byte	22
	.byte	'Os_imaskType',0,35,211,2,16
	.word	149
	.byte	26
	.byte	'Os_ISRDynType_s',0,35,213,2,16,48,11
	.byte	'meter',0
	.word	16382
	.byte	48,2,35,0,0,22
	.byte	'Os_ISRDynType',0,35,215,2,3
	.word	16659
	.byte	6
	.word	16659
	.byte	9
	.word	16720
	.byte	26
	.byte	'Os_ISRType_s',0,35,216,2,16,24,11
	.byte	'entry_function',0
	.word	15752
	.byte	4,2,35,0,11
	.byte	'dynamic',0
	.word	16725
	.byte	4,2,35,4,11
	.byte	'imask',0
	.word	149
	.byte	4,2,35,8,11
	.byte	'stackbudget',0
	.word	15659
	.byte	8,2,35,12,11
	.byte	'access',0
	.word	305
	.byte	1,2,35,20,11
	.byte	'application',0
	.word	305
	.byte	1,2,35,21,0,22
	.byte	'Os_ISRType',0,35,223,2,3
	.word	16730
	.byte	6
	.word	15744
	.byte	9
	.word	16730
	.byte	6
	.word	16889
	.byte	22
	.byte	'ISRType',0,35,224,2,46
	.word	16894
	.byte	22
	.byte	'Os_bitmask',0,35,239,2,22
	.word	149
	.byte	22
	.byte	'Os_pset0Type',0,35,240,2,20
	.word	149
	.byte	22
	.byte	'Os_pset1Type',0,35,241,2,20
	.word	149
	.byte	22
	.byte	'Os_pset2Type',0,35,242,2,20
	.word	149
	.byte	13,35,243,2,9,4,11
	.byte	'p0',0
	.word	149
	.byte	4,2,35,0,11
	.byte	'p1',0
	.word	149
	.byte	4,2,35,0,11
	.byte	'p2',0
	.word	149
	.byte	4,2,35,0,0,22
	.byte	'Os_psetType',0,35,247,2,3
	.word	17002
	.byte	13,35,249,2,9,4,11
	.byte	't0',0
	.word	149
	.byte	4,2,35,0,11
	.byte	't1',0
	.word	149
	.byte	4,2,35,0,11
	.byte	't2',0
	.word	149
	.byte	4,2,35,0,0,22
	.byte	'Os_tpmaskType',0,35,253,2,3
	.word	17066
	.byte	22
	.byte	'Os_ActivationCountType',0,35,254,2,23
	.word	305
	.byte	26
	.byte	'Os_TaskDynType_s',0,35,128,3,16,120,11
	.byte	'terminate_jump_buf',0
	.word	15608
	.byte	68,2,35,0,11
	.byte	'meter',0
	.word	16382
	.byte	48,2,35,68,11
	.byte	'activation_count',0
	.word	305
	.byte	1,2,35,116,0,22
	.byte	'Os_TaskDynType',0,35,132,3,3
	.word	17164
	.byte	14,68
	.word	15577
	.byte	15,0,0,6
	.word	17164
	.byte	9
	.word	17290
	.byte	26
	.byte	'Os_TaskType_s',0,35,134,3,16,40,11
	.byte	'dynamic',0
	.word	17295
	.byte	4,2,35,0,11
	.byte	'entry_function',0
	.word	15752
	.byte	4,2,35,4,11
	.byte	'pset',0
	.word	17002
	.byte	4,2,35,8,11
	.byte	'base_tpmask',0
	.word	17066
	.byte	4,2,35,12,11
	.byte	'tpmask',0
	.word	17066
	.byte	4,2,35,16,11
	.byte	'core_id',0
	.word	223
	.byte	2,2,35,20,11
	.byte	'index',0
	.word	149
	.byte	4,2,35,24,11
	.byte	'stackbudget',0
	.word	15659
	.byte	8,2,35,28,11
	.byte	'activation_count',0
	.word	305
	.byte	1,2,35,36,11
	.byte	'access',0
	.word	305
	.byte	1,2,35,37,11
	.byte	'application',0
	.word	305
	.byte	1,2,35,38,0,22
	.byte	'Os_TaskType',0,35,146,3,3
	.word	17300
	.byte	9
	.word	17300
	.byte	6
	.word	17550
	.byte	22
	.byte	'TaskType',0,35,147,3,47
	.word	17555
	.byte	30
	.byte	'Os_TaskStateType',0,35,155,3,6,4,24
	.byte	'SUSPENDED',0,0,24
	.byte	'READY',0,1,24
	.byte	'WAITING',0,2,24
	.byte	'RUNNING',0,3,0,22
	.byte	'TaskStateType',0,35,156,3,31
	.word	17578
	.byte	13,35,167,3,3,4,11
	.byte	'tpmask',0
	.word	17066
	.byte	4,2,35,0,0,26
	.byte	'Os_ResourceDynType_s',0,35,166,3,16,4,11
	.byte	'saved_priority',0
	.word	17665
	.byte	4,2,35,0,0,22
	.byte	'Os_ResourceDynType',0,35,170,3,3
	.word	17688
	.byte	6
	.word	17688
	.byte	9
	.word	17768
	.byte	26
	.byte	'Os_ResourceType_s',0,35,171,3,16,12,11
	.byte	'dynamic',0
	.word	17773
	.byte	4,2,35,0,11
	.byte	'tpmask',0
	.word	17066
	.byte	4,2,35,4,11
	.byte	'access',0
	.word	305
	.byte	1,2,35,8,0,22
	.byte	'Os_ResourceType',0,35,175,3,3
	.word	17778
	.byte	10,35,181,3,9,12,11
	.byte	'maxallowedvalue',0
	.word	149
	.byte	4,2,35,0,11
	.byte	'ticksperbase',0
	.word	149
	.byte	4,2,35,4,11
	.byte	'mincycle',0
	.word	149
	.byte	4,2,35,8,0,22
	.byte	'AlarmBaseType',0,35,185,3,3
	.word	17877
	.byte	10,35,206,3,9,8,11
	.byte	'Running',0
	.word	305
	.byte	1,2,35,0,11
	.byte	'Pending',0
	.word	305
	.byte	1,2,35,1,11
	.byte	'Delay',0
	.word	149
	.byte	4,2,35,4,0,22
	.byte	'Os_CounterStatusType',0,35,210,3,3
	.word	17972
	.byte	31
	.word	305
	.byte	1,1,6
	.word	18058
	.byte	22
	.byte	'Os_CounterIncrAdvType',0,35,217,3,22
	.word	18065
	.byte	26
	.byte	's_swd',0,35,222,3,12,4,11
	.byte	'count',0
	.word	149
	.byte	4,2,35,0,0,13,35,221,3,3,4,11
	.byte	'sw',0
	.word	18101
	.byte	4,2,35,0,0,26
	.byte	'Os_CounterDynType_s',0,35,220,3,16,4,11
	.byte	'type_dependent',0
	.word	18129
	.byte	4,2,35,0,0,22
	.byte	'Os_CounterDynType',0,35,226,3,3
	.word	18148
	.byte	6
	.word	18148
	.byte	9
	.word	18226
	.byte	26
	.byte	'Os_CounterType_s',0,35,227,3,16,28,11
	.byte	'dynamic',0
	.word	18231
	.byte	4,2,35,0,11
	.byte	'advincr',0
	.word	18070
	.byte	4,2,35,4,11
	.byte	'base',0
	.word	17877
	.byte	12,2,35,8,11
	.byte	'core',0
	.word	16328
	.byte	4,2,35,20,11
	.byte	'access',0
	.word	305
	.byte	1,2,35,24,11
	.byte	'application',0
	.word	305
	.byte	1,2,35,25,0,22
	.byte	'Os_CounterType',0,35,234,3,3
	.word	18236
	.byte	6
	.word	18058
	.byte	9
	.word	18236
	.byte	6
	.word	18388
	.byte	22
	.byte	'CounterType',0,35,235,3,52
	.word	18393
	.byte	30
	.byte	'Os_ScheduleTableStatusType',0,35,240,3,6,4,24
	.byte	'SCHEDULETABLE_STOPPED',0,0,24
	.byte	'SCHEDULETABLE_NEXT',0,1,24
	.byte	'SCHEDULETABLE_WAITING',0,2,24
	.byte	'SCHEDULETABLE_RUNNING',0,3,24
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,22
	.byte	'ScheduleTableStatusType',0,35,241,3,41
	.word	18419
	.byte	9
	.word	.L227-.L59
	.byte	6
	.word	18619
	.byte	22
	.byte	'ScheduleTableType',0,35,128,4,58
	.word	18624
	.byte	26
	.byte	'Os_ScheduleTableDynType_s',0,35,130,4,16,16,11
	.byte	'match',0
	.word	149
	.byte	4,2,35,0,11
	.byte	'next',0
	.word	18629
	.byte	4,2,35,4,11
	.byte	'state',0
	.word	18419
	.byte	4,2,35,8,11
	.byte	'config',0
	.word	223
	.byte	2,2,35,12,0,6
	.word	18656
	.byte	9
	.word	18749
.L227:
	.byte	26
	.byte	'Os_ScheduleTableType_s',0,35,247,3,16,16,11
	.byte	'dynamic',0
	.word	18754
	.byte	4,2,35,0,11
	.byte	'counter',0
	.word	18398
	.byte	4,2,35,4,11
	.byte	'repeat',0
	.word	305
	.byte	1,2,35,8,11
	.byte	'config',0
	.word	223
	.byte	2,2,35,10,11
	.byte	'initial',0
	.word	305
	.byte	1,2,35,12,11
	.byte	'access',0
	.word	305
	.byte	1,2,35,13,11
	.byte	'application',0
	.word	305
	.byte	1,2,35,14,0,22
	.byte	'Os_ScheduleTableType',0,35,255,3,3
	.word	18759
	.byte	9
	.word	18759
	.byte	6
	.word	18939
	.byte	9
	.word	18236
	.byte	6
	.word	18949
	.byte	12
	.word	16052
	.byte	12
	.word	17002
	.byte	12
	.word	16899
	.byte	12
	.word	17560
	.byte	12
	.word	17066
	.byte	12
	.word	305
	.byte	12
	.word	17560
	.byte	26
	.byte	'Os_ControlledCoreType_s',0,35,251,6,16,112,11
	.byte	'TrapInfo',0
	.word	15488
	.byte	8,2,35,0,11
	.byte	'lock_taskaccess',0
	.word	18959
	.byte	4,2,35,8,11
	.byte	'ReadyTasks',0
	.word	18964
	.byte	4,2,35,12,11
	.byte	'RunningISR',0
	.word	18969
	.byte	4,2,35,16,11
	.byte	'RunningTask',0
	.word	18974
	.byte	4,2,35,20,11
	.byte	'RunningTPMask',0
	.word	18979
	.byte	4,2,35,24,11
	.byte	'CurrentMeteredObject',0
	.word	16585
	.byte	4,2,35,28,11
	.byte	'IdleMeter',0
	.word	16382
	.byte	48,2,35,32,11
	.byte	'AppAccess',0
	.word	305
	.byte	1,2,35,80,11
	.byte	'AppOverride',0
	.word	18984
	.byte	1,2,35,81,11
	.byte	'GetStackValueAdjust',0
	.word	15659
	.byte	8,2,35,84,11
	.byte	'InErrorHook',0
	.word	305
	.byte	1,2,35,92,11
	.byte	'ChainTaskRef',0
	.word	18989
	.byte	4,2,35,96,11
	.byte	'GetStackUsageAdjust',0
	.word	15659
	.byte	8,2,35,100,11
	.byte	'InProtectionHook',0
	.word	305
	.byte	1,2,35,108,11
	.byte	'CoreIsActive',0
	.word	305
	.byte	1,2,35,109,11
	.byte	'InShutdownHook',0
	.word	305
	.byte	1,2,35,110,0,22
	.byte	'Os_ControlledCoreType',0,35,141,7,3
	.word	18994
	.byte	6
	.word	149
	.byte	9
	.word	16730
	.byte	6
	.word	19450
	.byte	9
	.word	17300
	.byte	6
	.word	19460
	.byte	6
	.word	16382
	.byte	26
	.byte	'Os_AnyCoreType_s',0,35,151,7,16,96,11
	.byte	'DisableAllImask',0
	.word	149
	.byte	4,2,35,0,11
	.byte	'SuspendAllImask',0
	.word	149
	.byte	4,2,35,4,11
	.byte	'SuspendOSImask',0
	.word	149
	.byte	4,2,35,8,11
	.byte	'DisableAllCount',0
	.word	149
	.byte	4,2,35,12,11
	.byte	'SuspendAllCount',0
	.word	149
	.byte	4,2,35,16,11
	.byte	'SuspendOSCount',0
	.word	149
	.byte	4,2,35,20,11
	.byte	'RestartJumpBuf',0
	.word	15608
	.byte	68,2,35,24,11
	.byte	'Restartable',0
	.word	305
	.byte	1,2,35,92,0,22
	.byte	'Os_AnyCoreType',0,35,160,7,3
	.word	19475
	.byte	22
	.byte	'Can_TxObjPriorityClassType',0,36,219,3,16
	.word	149
	.byte	26
	.byte	'Can_TxHwObjectConfigType',0,36,231,3,16,8,11
	.byte	'MsgObjId',0
	.word	305
	.byte	1,2,35,0,11
	.byte	'HwControllerId',0
	.word	305
	.byte	1,2,35,1,11
	.byte	'TxObjPriorityClass',0
	.word	149
	.byte	4,2,35,4,0,22
	.byte	'Can_TxHwObjectConfigType',0,36,252,3,3
	.word	19752
	.byte	26
	.byte	'Can_RxHwObjectConfigType',0,36,129,4,16,12,11
	.byte	'MaskRef',0
	.word	149
	.byte	4,2,35,0,11
	.byte	'MsgId',0
	.word	149
	.byte	4,2,35,4,11
	.byte	'MsgObjId',0
	.word	305
	.byte	1,2,35,8,11
	.byte	'HwControllerId',0
	.word	305
	.byte	1,2,35,9,0,22
	.byte	'Can_RxHwObjectConfigType',0,36,147,4,3
	.word	19888
	.byte	14,4
	.word	305
	.byte	15,3,0,26
	.byte	'Can_ControllerMOMapConfigType',0,36,181,4,16,4,11
	.byte	'ControllerMOMap',0
	.word	20028
	.byte	4,2,35,0,0,22
	.byte	'Can_ControllerMOMapConfigType',0,36,184,4,3
	.word	20037
	.byte	26
	.byte	'Can_NPCRValueType',0,36,188,4,16,2,11
	.byte	'Can_NPCRValue',0
	.word	223
	.byte	2,2,35,0,0,22
	.byte	'Can_NPCRValueType',0,36,191,4,3
	.word	20138
	.byte	26
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,36,194,4,16,8,11
	.byte	'CanControllerBaudrate',0
	.word	149
	.byte	4,2,35,0,11
	.byte	'CanControllerBaudrateCfg',0
	.word	223
	.byte	2,2,35,4,0,22
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,36,198,4,3
	.word	20213
	.byte	9
	.word	20213
	.byte	6
	.word	20378
	.byte	26
	.byte	'Can_BaudrateConfigPtrType',0,36,201,4,16,4,11
	.byte	'Can_kBaudrateConfigPtr',0
	.word	20383
	.byte	4,2,35,0,0,22
	.byte	'Can_BaudrateConfigPtrType',0,36,204,4,3
	.word	20388
	.byte	26
	.byte	'Can_EventHandlingType',0,36,226,4,16,4,11
	.byte	'CanEventType',0
	.word	20028
	.byte	4,2,35,0,0,22
	.byte	'Can_EventHandlingType',0,36,229,4,3
	.word	20488
	.byte	22
	.byte	'Rte_TransformerErrorCode',0,37,130,1,15
	.word	305
	.byte	22
	.byte	'Rte_TransformerClass',0,37,131,1,15
	.word	305
	.byte	10,37,168,1,9,12,11
	.byte	'in',0
	.word	16328
	.byte	4,2,35,0,11
	.byte	'out',0
	.word	16328
	.byte	4,2,35,4,11
	.byte	'used',0
	.word	223
	.byte	2,2,35,8,11
	.byte	'lost_data',0
	.word	305
	.byte	1,2,35,10,0,22
	.byte	'Rte_QDynType',0,37,173,1,3
	.word	20634
	.byte	23,37,175,1,9,4,24
	.byte	'RTE_DRA',0,0,24
	.byte	'RTE_WOWP',0,1,24
	.byte	'RTE_TASK',0,2,24
	.byte	'RTE_ARE',0,3,24
	.byte	'RTE_EV',0,4,24
	.byte	'RTE_MSI',0,5,0,22
	.byte	'Rte_NotificationType',0,37,182,1,3
	.word	20721
	.byte	14,128,8
	.word	305
	.byte	15,255,7,0,22
	.byte	'Impl_NVM_DstPtrType_1024',0,38,50,15
	.word	20819
	.byte	22
	.byte	'CanIf_u32_impl',0,38,69,16
	.word	149
	.byte	22
	.byte	'CanIf_u16_impl',0,38,71,16
	.word	223
	.byte	22
	.byte	'CanIf_u8_impl',0,38,73,15
	.word	305
	.byte	22
	.byte	'CanIf_ControllerModeType_Enum_impl',0,38,88,15
	.word	305
	.byte	22
	.byte	'CanIf_PduModeType_Enum_impl',0,38,90,15
	.word	305
	.byte	10,38,92,9,2,11
	.byte	'DeviceMode',0
	.word	305
	.byte	1,2,35,0,11
	.byte	'ChannelMode',0
	.word	305
	.byte	1,2,35,1,0,22
	.byte	'CanIf_ControllerStateType_struct_impl',0,38,95,3
	.word	21010
	.byte	22
	.byte	'CanIf_NotifStatusType_Enum_impl',0,38,100,15
	.word	305
	.byte	22
	.byte	'CanSM_boolean_Impl',0,38,120,15
	.word	305
	.byte	22
	.byte	'CanSM_u8_Impl',0,38,123,15
	.word	305
	.byte	22
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,38,128,1,15
	.word	305
	.byte	22
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,38,132,1,15
	.word	305
	.byte	22
	.byte	'CanSM_u16_Impl',0,38,136,1,16
	.word	223
	.byte	22
	.byte	'CanSM_TimerStateType_Enum_impl',0,38,138,1,15
	.word	305
	.byte	10,38,140,1,9,4,11
	.byte	'cntTick_u16',0
	.word	223
	.byte	2,2,35,0,11
	.byte	'stTimer',0
	.word	305
	.byte	1,2,35,2,0,22
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,38,143,1,3
	.word	21351
	.byte	22
	.byte	'Com_impl_u16',0,38,154,1,16
	.word	223
	.byte	22
	.byte	'Com_impl_u8',0,38,157,1,15
	.word	305
	.byte	22
	.byte	'ComM_uint32_Impl',0,38,173,1,16
	.word	149
	.byte	22
	.byte	'ComM_uint16_Impl',0,38,175,1,16
	.word	223
	.byte	22
	.byte	'ComM_uint8_Impl',0,38,177,1,15
	.word	305
	.byte	22
	.byte	'ComM_bool_Impl',0,38,179,1,15
	.word	305
	.byte	10,38,181,1,9,24,11
	.byte	'ChannelState_e',0
	.word	149
	.byte	4,2,35,0,11
	.byte	'LightTimeoutCtr_u32',0
	.word	149
	.byte	4,2,35,4,11
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	223
	.byte	2,2,35,8,11
	.byte	'ChannelMode_u8',0
	.word	305
	.byte	1,2,35,10,11
	.byte	'BusSmMode_u8',0
	.word	305
	.byte	1,2,35,11,11
	.byte	'UserRequestCtr_u8',0
	.word	305
	.byte	1,2,35,12,11
	.byte	'PassiveRequestState_u8',0
	.word	305
	.byte	1,2,35,13,11
	.byte	'PncRequestCtr_u8',0
	.word	305
	.byte	1,2,35,14,11
	.byte	'InhibitionReqStatus_u8',0
	.word	305
	.byte	1,2,35,15,11
	.byte	'NmNetworkRequestStatus_b',0
	.word	305
	.byte	1,2,35,16,11
	.byte	'DiagnosticRequestState_b',0
	.word	305
	.byte	1,2,35,17,11
	.byte	'CommunicationAllowed_b',0
	.word	305
	.byte	1,2,35,18,11
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	305
	.byte	1,2,35,19,11
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	305
	.byte	1,2,35,20,11
	.byte	'NmNetworkModeStatus_b',0
	.word	305
	.byte	1,2,35,21,0,22
	.byte	'ComM_ChannelStruct_Impl',0,38,197,1,3
	.word	21583
	.byte	10,38,206,1,9,10,11
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	223
	.byte	2,2,35,0,11
	.byte	'LimitToNoComCtr_u16',0
	.word	223
	.byte	2,2,35,2,11
	.byte	'RequestedUserMode_t',0
	.word	305
	.byte	1,2,35,4,11
	.byte	'IndicatedUserMode_t',0
	.word	305
	.byte	1,2,35,5,11
	.byte	'numChannelsInFullCom_u8',0
	.word	305
	.byte	1,2,35,6,11
	.byte	'numChannelsInSilentCom_u8',0
	.word	305
	.byte	1,2,35,7,11
	.byte	'numChannelsInNoCom_u8',0
	.word	305
	.byte	1,2,35,8,0,22
	.byte	'ComM_UserStruct_Impl',0,38,214,1,3
	.word	22087
	.byte	22
	.byte	'Dcm_IOOperationResponseType',0,38,252,1,15
	.word	305
	.byte	22
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	38,138,2,15
	.word	305
	.byte	22
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,38,146,2,15
	.word	305
	.byte	22
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,38,150,2,15
	.word	305
	.byte	22
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,38,154,2,15
	.word	305
	.byte	22
	.byte	'Dem_DTCFormatType',0,38,160,2,15
	.word	305
	.byte	22
	.byte	'Dem_DTCOriginType',0,38,162,2,15
	.word	305
	.byte	22
	.byte	'Dem_EventIdType',0,38,168,2,16
	.word	223
	.byte	22
	.byte	'Dem_EventStatusType',0,38,170,2,15
	.word	305
	.byte	22
	.byte	'Dem_InitMonitorReasonType',0,38,176,2,15
	.word	305
	.byte	22
	.byte	'Dem_OperationCycleIdType',0,38,179,2,15
	.word	305
	.byte	22
	.byte	'Dem_UdsStatusByteType',0,38,185,2,15
	.word	305
	.byte	22
	.byte	'NvM_BlockIdType',0,38,215,2,16
	.word	223
	.byte	22
	.byte	'NvM_RequestResultType',0,38,225,2,15
	.word	305
	.byte	22
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,38,243,3,34
	.word	20830
	.byte	14,128,8
	.word	305
	.byte	15,255,7,0,22
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,38,246,3,34
	.word	20830
	.byte	22
	.byte	'Dem_DTCGroupIdType',0,39,49,15
	.word	305
	.byte	22
	.byte	'Dem_DtcIdType',0,39,50,16
	.word	223
	.byte	22
	.byte	'Dem_ClientIdType',0,39,53,15
	.word	305
	.byte	22
	.byte	'Dem_DtcCodeType',0,39,55,16
	.word	149
	.byte	22
	.byte	'Dem_boolean_least',0,39,60,17
	.word	305
	.byte	22
	.byte	'Dem_EventCategoryType',0,39,62,15
	.word	305
	.byte	22
	.byte	'Dem_DTCSeverityType',0,39,217,1,15
	.word	305
	.byte	22
	.byte	'Dem_DebugDataType',0,39,131,3,16
	.word	149
	.byte	22
	.byte	'Dem_DTCKindType',0,39,145,3,16
	.word	305
	.byte	22
	.byte	'Dem_TriggerType',0,39,167,3,15
	.word	305
	.byte	22
	.byte	'Dem_EvtStateType',0,40,151,1,15
	.word	305
	.byte	22
	.byte	'Dem_DtcStateType',0,41,47,15
	.word	305
	.byte	22
	.byte	'rba_BswSrv_uint64',0,1,66,28
	.word	14884
	.byte	22
	.byte	'Dem_EvMemOccurrenceCounterType',0,21,90,21
	.word	305
	.byte	22
	.byte	'Dem_EvMemAgingCounterType',0,21,99,21
	.word	305
	.byte	22
	.byte	'Dem_EvMemHdrType',0,21,141,1,4
	.word	6476
	.byte	22
	.byte	'Dem_EvMemEventMemoryType',0,21,213,1,4
	.word	6506
	.byte	22
	.byte	'Dem_EnCoList',0,42,31,15
	.word	305
	.byte	22
	.byte	'Dem_OperationCycleList',0,43,23,15
	.word	305
	.byte	22
	.byte	'Dem_StoCoList',0,44,32,15
	.word	305
	.byte	22
	.byte	'Dem_EventIdIterator',0,10,27,22
	.word	5651
	.byte	14,12
	.word	223
	.byte	15,5,0,9
	.word	23741
	.byte	32
	.byte	'Dem_MapEventIdToDtcId',0,10,140,1,41
	.word	23750
	.byte	1,1,22
	.byte	'Dem_DtcIdIterator',0,10,197,1,22
	.word	5651
	.byte	22
	.byte	'Dem_DtcGroupIdIterator',0,10,230,1,21
	.word	5651
	.byte	22
	.byte	'Dem_EventIdListIterator',0,10,174,2,3
	.word	3682
	.byte	10,10,213,2,9,4,11
	.byte	'it',0
	.word	223
	.byte	2,2,35,0,11
	.byte	'end',0
	.word	223
	.byte	2,2,35,2,0,22
	.byte	'Dem_DtcIdListIterator',0,10,216,2,3
	.word	23880
	.byte	23,45,31,9,4,24
	.byte	'MEMIF_JOB_OK',0,0,24
	.byte	'MEMIF_JOB_FAILED',0,1,24
	.byte	'MEMIF_JOB_PENDING',0,2,24
	.byte	'MEMIF_JOB_CANCELED',0,3,24
	.byte	'MEMIF_BLOCK_INCONSISTENT',0,4,24
	.byte	'MEMIF_BLOCK_INVALID',0,5,0,22
	.byte	'MemIf_JobResultType',0,45,39,2
	.word	23943
	.byte	23,46,49,9,4,24
	.byte	'NVM_PRV_ACTIVITY_NOT_INIT',0,0,24
	.byte	'NVM_PRV_ACTIVITY_IDLE',0,1,24
	.byte	'NVM_PRV_ACTIVITY_ARBITRATE',0,2,24
	.byte	'NVM_PRV_ACTIVITY_JOB_START',0,3,24
	.byte	'NVM_PRV_ACTIVITY_POLL_RESULT',0,4,24
	.byte	'NVM_PRV_ACTIVITY_JOB_COMPLETE',0,5,24
	.byte	'NVM_PRV_ACTIVITY_RESULT_EVAL',0,6,0,22
	.byte	'NvM_Prv_Activities_ten',0,46,58,3
	.word	24101
	.byte	23,46,104,9,4,24
	.byte	'NvM_Prv_idJob_Idle_e',0,0,24
	.byte	'NvM_Prv_idJob_Read_e',0,1,24
	.byte	'NvM_Prv_idJob_Write_e',0,2,24
	.byte	'NvM_Prv_idJob_Erase_e',0,3,24
	.byte	'NvM_Prv_idJob_Restore_e',0,4,24
	.byte	'NvM_Prv_idJob_Maintain_e',0,5,24
	.byte	'NvM_Prv_idJob_Validate_e',0,6,24
	.byte	'NvM_Prv_idJob_Invalidate_e',0,7,24
	.byte	'NvM_Prv_idJob_ReadIdConfigForReadAll_e',0,8,24
	.byte	'NvM_Prv_idJob_InvalidateForFirstInitAll_e',0,9,24
	.byte	'NvM_Prv_idJob_RestoreForImplicitRecovery_e',0,10,24
	.byte	'NvM_Prv_idJob_InvalidateForRemoveNonResistant_e',0,11,24
	.byte	'NvM_Prv_idJob_Invalid_e',0,12,24
	.byte	'NvM_Prv_idJob_Count_e',0,13,0,22
	.byte	'NvM_Prv_idJob_ten',0,46,115,3
	.word	24342
	.byte	22
	.byte	'NvM_Prv_ServiceBit_tuo',0,46,168,1,16
	.word	223
	.byte	22
	.byte	'NvM_Prv_idService_tuo',0,46,173,1,15
	.word	305
	.byte	22
	.byte	'NvM_Prv_idQueue_tuo',0,46,206,1,15
	.word	305
	.byte	10,46,210,1,9,12,11
	.byte	'idService_uo',0
	.word	305
	.byte	1,2,35,0,11
	.byte	'idBlock_uo',0
	.word	223
	.byte	2,2,35,2,11
	.byte	'ServiceBit_uo',0
	.word	223
	.byte	2,2,35,4,11
	.byte	'BlockData_pv',0
	.word	16328
	.byte	4,2,35,8,0,22
	.byte	'NvM_Prv_QueueEntry_tst',0,46,225,1,3
	.word	24899
	.byte	10,46,227,1,9,20,11
	.byte	'idJob_en',0
	.word	24342
	.byte	4,2,35,0,11
	.byte	'idBlock_uo',0
	.word	223
	.byte	2,2,35,4,11
	.byte	'RamBlock_pu8',0
	.word	322
	.byte	4,2,35,8,11
	.byte	'idxDataset_u8',0
	.word	305
	.byte	1,2,35,12,11
	.byte	'Result_en',0
	.word	23943
	.byte	4,2,35,16,0,22
	.byte	'NvM_Prv_JobData_tst',0,46,240,1,3
	.word	25025
	.byte	14,5
	.word	305
	.byte	15,4,0,14,10
	.word	223
	.byte	15,4,0,10,47,9,9,18,11
	.byte	'OperationCycleStates',0
	.word	305
	.byte	1,2,35,0,11
	.byte	'OperationCycleQualified',0
	.word	305
	.byte	1,2,35,1,11
	.byte	'Overflow',0
	.word	25163
	.byte	5,2,35,2,11
	.byte	'DtcIdsByOccurrenceTime',0
	.word	25172
	.byte	10,2,35,8,0,22
	.byte	'Dem_GenericNvDataType',0,47,24,4
	.word	25181
	.byte	32
	.byte	'Dem_GenericNvData',0,47,28,30
	.word	25181
	.byte	1,1,22
	.byte	'Dem_NvmBlockIdType',0,48,14,34
	.word	305
	.byte	13,48,16,9,20,11
	.byte	'evMemData',0
	.word	6506
	.byte	20,2,35,0,11
	.byte	'genericNvData',0
	.word	25181
	.byte	18,2,35,0,0,22
	.byte	'Dem_NvMStorageBufferData',0,48,37,3
	.word	25385
	.byte	22
	.byte	'Dem_NvmBlockStatusType',0,48,59,15
	.word	305
	.byte	22
	.byte	'Dem_NvmResultType',0,48,78,31
	.word	305
	.byte	6
	.word	305
	.byte	33
	.word	305
	.byte	1,1,29
	.word	25523
	.byte	0,6
	.word	25528
	.byte	22
	.byte	'Dem_EvtClearAllowedFncType',0,14,12,26
	.word	25541
	.byte	33
	.word	305
	.byte	1,1,29
	.word	305
	.byte	0,6
	.word	25581
	.byte	22
	.byte	'Dem_InitMForEAllowedFncType',0,15,38,27
	.word	25594
	.byte	9
	.word	16322
	.byte	6
	.word	25635
	.byte	33
	.word	5651
	.byte	1,1,29
	.word	223
	.byte	29
	.word	25523
	.byte	29
	.word	25640
	.byte	29
	.word	223
	.byte	0,6
	.word	25645
	.byte	22
	.byte	'Dem_DebFilter',0,49,12,23
	.word	25673
	.byte	2
	.byte	'long int',0,4,5,6
	.word	25700
	.byte	28,1,1,29
	.word	25640
	.byte	29
	.word	223
	.byte	29
	.word	25712
	.byte	29
	.word	25712
	.byte	0,6
	.word	25717
	.byte	22
	.byte	'Dem_DebGetLimits',0,49,13,23
	.word	25741
	.byte	28,1,1,29
	.word	223
	.byte	29
	.word	25640
	.byte	29
	.word	223
	.byte	0,6
	.word	25771
	.byte	22
	.byte	'Dem_DebCyclic',0,49,14,16
	.word	25790
	.byte	22
	.byte	'Dem_DebouncedActionType',0,49,35,21
	.word	5651
	.byte	13,50,37,9,4,11
	.byte	'EnforceAlignment',0
	.word	149
	.byte	4,2,35,0,11
	.byte	'Buffer',0
	.word	20028
	.byte	4,2,35,0,0,22
	.byte	'Dem_EvBuffEnvDataAlignedType',0,50,47,3
	.word	25849
	.byte	10,50,49,9,16,11
	.byte	'envData',0
	.word	25849
	.byte	4,2,35,0,11
	.byte	'eventType',0
	.word	305
	.byte	1,2,35,4,11
	.byte	'eventId',0
	.word	223
	.byte	2,2,35,6,11
	.byte	'debug0',0
	.word	149
	.byte	4,2,35,8,11
	.byte	'debug1',0
	.word	149
	.byte	4,2,35,12,0,22
	.byte	'Dem_EvBuffEvent',0,50,75,2
	.word	25934
	.byte	14,100
	.word	6506
	.byte	15,4,0,32
	.byte	'Dem_EvMemEventMemory',0,20,87,1
	.word	26049
	.byte	1,1,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L60:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,46,1,3,8,32,13,58,15,59,15
	.byte	57,15,73,19,54,15,39,12,0,0,4,5,0,3,8,58,15,59,15,57,15,73,19,0,0,5,11,0,0,0,6,15,0,73,19,0,0,7,46,1,3
	.byte	8,32,13,58,15,59,15,57,15,54,15,39,12,0,0,8,11,1,0,0,9,38,0,73,19,0,0,10,19,1,58,15,59,15,57,15,11,15
	.byte	0,0,11,13,0,3,8,73,19,11,15,56,9,0,0,12,53,0,73,19,0,0,13,23,1,58,15,59,15,57,15,11,15,0,0,14,1,1,11,15
	.byte	73,19,0,0,15,33,0,47,15,0,0,16,46,1,49,19,0,0,17,5,0,49,19,0,0,18,29,1,49,19,0,0,19,11,0,49,19,0,0,20
	.byte	11,1,49,19,0,0,21,21,0,54,15,0,0,22,22,0,3,8,58,15,59,15,57,15,73,19,0,0,23,4,1,58,15,59,15,57,15,11,15
	.byte	0,0,24,40,0,3,8,28,13,0,0,25,21,0,54,15,39,12,0,0,26,19,1,3,8,58,15,59,15,57,15,11,15,0,0,27,59,0,3,8
	.byte	0,0,28,21,1,54,15,39,12,0,0,29,5,0,73,19,0,0,30,4,1,3,8,58,15,59,15,57,15,11,15,0,0,31,21,0,73,19,54,15
	.byte	39,12,0,0,32,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,33,21,1,73,19,54,15,39,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L61:
	.word	.L229-.L228
.L228:
	.half	3
	.word	.L231-.L230
.L230:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_MemUtils.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_Lib.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTC_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits32.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_BitArray.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_ISO14229Byte.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\enco\\Dem_EnableCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_ByteOrderUtils.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvTrigger.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\deb\\Dem_Deb.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientBaseHandling.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientClearMachine.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemTypes.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemAging.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMem.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemGen.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\consischk\\Dem_ConsisChk.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientHandlingTypes.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_NodeId.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\api\\Dem_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_EnableCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_OperationCycle.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_StorageCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\MemIf\\api\\MemIf_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\NvM\\api\\NvM_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_GenericNvData.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\deb\\Dem_DebBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuffEvent.h',0,0,0,0,0
.L231:
.L229:
	.sdecl	'.debug_info',debug,cluster('Dem_ConsistencyCheckForDTC')
	.sect	'.debug_info'
.L62:
	.word	412
	.half	3
	.word	.L63
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\consischk\\Dem_ConsisChk.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L65,.L64
	.byte	2
	.word	.L58
	.byte	3
	.byte	'Dem_ConsistencyCheckForDTC',0,1,93,6,1,1,1
	.word	.L57,.L77,.L56
	.byte	4
	.word	.L57,.L77
	.byte	5
	.word	.L78,.L57,.L41
	.byte	6
	.word	.L79,.L57,.L41
	.byte	5
	.word	.L80,.L81,.L40
	.byte	7
	.word	.L82,.L83
	.byte	8
	.word	.L84,.L81,.L40
	.byte	0,0,0,5
	.word	.L85,.L41,.L86
	.byte	7
	.word	.L87,.L88
	.byte	8
	.word	.L89,.L41,.L86
	.byte	0,5
	.word	.L90,.L45,.L47
	.byte	6
	.word	.L91,.L45,.L47
	.byte	5
	.word	.L80,.L92,.L46
	.byte	7
	.word	.L82,.L83
	.byte	8
	.word	.L84,.L92,.L46
	.byte	0,0,0,5
	.word	.L85,.L47,.L93
	.byte	7
	.word	.L87,.L88
	.byte	8
	.word	.L89,.L47,.L93
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_ConsistencyCheckForDTC')
	.sect	'.debug_abbrev'
.L63:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,29,1,49,16,17,1,18,1,0,0,6,11,1,49,16,17,1,18,1
	.byte	0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_ConsistencyCheckForDTC')
	.sect	'.debug_line'
.L64:
	.word	.L233-.L232
.L232:
	.half	3
	.word	.L235-.L234
.L234:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\consischk\\Dem_ConsisChk.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemGen.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0,0
.L235:
	.byte	4,2,5,40,7,0,5,2
	.word	.L57
	.byte	3,158,1,1,5,12,9
	.half	.L81-.L57
	.byte	3,131,127,1,5,5,9
	.half	.L236-.L81
	.byte	1,5,2,9
	.half	.L40-.L236
	.byte	3,253,0,1,4,3,5,21,9
	.half	.L41-.L40
	.byte	3,123,1,5,12,9
	.half	.L237-.L41
	.byte	1,5,28,7,9
	.half	.L238-.L237
	.byte	1,5,21,9
	.half	.L239-.L238
	.byte	1,5,4,9
	.half	.L42-.L239
	.byte	1,4,1,5,7,9
	.half	.L44-.L42
	.byte	3,70,1,5,35,7,9
	.half	.L86-.L44
	.byte	3,2,1,4,2,5,40,9
	.half	.L45-.L86
	.byte	3,195,0,1,5,12,9
	.half	.L92-.L45
	.byte	3,253,126,1,5,5,9
	.half	.L240-.L92
	.byte	1,5,2,9
	.half	.L46-.L240
	.byte	3,131,1,1,4,3,5,21,9
	.half	.L47-.L46
	.byte	3,117,1,5,12,9
	.half	.L241-.L47
	.byte	1,5,28,7,9
	.half	.L242-.L241
	.byte	1,5,21,9
	.half	.L243-.L242
	.byte	1,5,4,9
	.half	.L48-.L243
	.byte	1,4,1,5,7,9
	.half	.L50-.L48
	.byte	3,76,1,5,38,7,9
	.half	.L93-.L50
	.byte	3,2,1,5,1,9
	.half	.L51-.L93
	.byte	3,2,1,7,9
	.half	.L66-.L51
	.byte	0,1,1
.L233:
	.sdecl	'.debug_ranges',debug,cluster('Dem_ConsistencyCheckForDTC')
	.sect	'.debug_ranges'
.L65:
	.word	-1,.L57,0,.L66-.L57,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_ConsistencyCheckForFailedDTC')
	.sect	'.debug_info'
.L67:
	.word	910
	.half	3
	.word	.L68
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\consischk\\Dem_ConsisChk.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L70,.L69
	.byte	2
	.word	.L58
	.byte	3
	.byte	'Dem_ConsistencyCheckForFailedDTC',0,1,11,13,1,1
	.word	.L53,.L94,.L52
	.byte	4
	.word	.L53,.L94
	.byte	5
	.byte	'LocId',0,1,13,15
	.word	.L95,.L96
	.byte	5
	.byte	'EventMemStatus',0,1,13,22
	.word	.L95,.L97
	.byte	5
	.byte	'MaxFailedTimeIdinEvMem',0,1,14,9
	.word	.L98,.L99
	.byte	5
	.byte	'EventIdForMaxFailedTimeId',0,1,15,18
	.word	.L100,.L101
	.byte	5
	.byte	'LastFailed_DtcId',0,1,16,16
	.word	.L100,.L102
	.byte	6
	.word	.L103,.L104,.L105
	.byte	7
	.word	.L106,.L107
	.byte	8
	.word	.L108,.L109
	.byte	6
	.word	.L140,.L141,.L11
	.byte	7
	.word	.L142,.L143
	.byte	9
	.word	.L144,.L141,.L11
	.byte	0,0,0,6
	.word	.L111,.L112,.L113
	.byte	7
	.word	.L114,.L115
	.byte	7
	.word	.L116,.L117
	.byte	10
	.word	.L118,.L112,.L113
	.byte	6
	.word	.L119,.L112,.L2
	.byte	7
	.word	.L120,.L121
	.byte	9
	.word	.L122,.L112,.L2
	.byte	0,0,0,6
	.word	.L123,.L124,.L6
	.byte	7
	.word	.L125,.L126
	.byte	8
	.word	.L127,.L128
	.byte	6
	.word	.L131,.L132,.L5
	.byte	7
	.word	.L133,.L134
	.byte	9
	.word	.L135,.L132,.L5
	.byte	0,0,0,6
	.word	.L136,.L6,.L7
	.byte	7
	.word	.L137,.L138
	.byte	9
	.word	.L139,.L6,.L7
	.byte	0,6
	.word	.L123,.L129,.L130
	.byte	7
	.word	.L125,.L126
	.byte	0,6
	.word	.L103,.L110,.L8
	.byte	7
	.word	.L106,.L107
	.byte	0,6
	.word	.L145,.L146,.L3
	.byte	7
	.word	.L147,.L148
	.byte	7
	.word	.L149,.L150
	.byte	9
	.word	.L151,.L146,.L3
	.byte	0,6
	.word	.L152,.L153,.L14
	.byte	7
	.word	.L154,.L155
	.byte	7
	.word	.L156,.L157
	.byte	10
	.word	.L158,.L153,.L14
	.byte	6
	.word	.L159,.L153,.L13
	.byte	7
	.word	.L160,.L161
	.byte	9
	.word	.L162,.L153,.L13
	.byte	0,0,0,6
	.word	.L163,.L164,.L15
	.byte	7
	.word	.L165,.L166
	.byte	9
	.word	.L167,.L164,.L15
	.byte	0,6
	.word	.L85,.L168,.L169
	.byte	7
	.word	.L87,.L170
	.byte	9
	.word	.L89,.L168,.L169
	.byte	0,6
	.word	.L171,.L172,.L16
	.byte	7
	.word	.L173,.L174
	.byte	7
	.word	.L175,.L176
	.byte	9
	.word	.L177,.L172,.L16
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_ConsistencyCheckForFailedDTC')
	.sect	'.debug_abbrev'
.L68:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6,29,1,49,16
	.byte	17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,85,6,0,0,9,11,0,49,16,17,1,18,1,0,0,10,11,1,49,16,17,1
	.byte	18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_ConsistencyCheckForFailedDTC')
	.sect	'.debug_line'
.L69:
	.word	.L245-.L244
.L244:
	.half	3
	.word	.L247-.L246
.L246:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\consischk\\Dem_ConsisChk.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemGen.h',0,0,0,0,0
.L247:
	.byte	5,13,7,0,5,2
	.word	.L53
	.byte	3,10,1,5,32,9
	.half	.L219-.L53
	.byte	3,3,1,5,44,9
	.half	.L104-.L219
	.byte	3,1,1,5,48,9
	.half	.L105-.L104
	.byte	3,3,1,4,2,5,2,9
	.half	.L112-.L105
	.byte	3,247,4,1,5,12,9
	.half	.L2-.L112
	.byte	3,20,1,4,1,5,83,9
	.half	.L113-.L2
	.byte	3,246,122,1,5,51,9
	.half	.L4-.L113
	.byte	3,3,1,4,2,5,45,9
	.half	.L124-.L4
	.byte	3,247,0,1,5,65,9
	.half	.L248-.L124
	.byte	1,5,33,9
	.half	.L132-.L248
	.byte	3,123,1,5,5,9
	.half	.L220-.L132
	.byte	1,9
	.half	.L5-.L220
	.byte	3,5,1,5,67,9
	.half	.L6-.L5
	.byte	3,200,3,1,5,39,9
	.half	.L249-.L6
	.byte	1,5,97,9
	.half	.L250-.L249
	.byte	1,5,4,9
	.half	.L251-.L250
	.byte	1,4,1,5,11,9
	.half	.L7-.L251
	.byte	3,196,123,1,5,10,7,9
	.half	.L129-.L7
	.byte	3,3,1,5,38,7,9
	.half	.L130-.L129
	.byte	3,3,1,5,37,9
	.half	.L252-.L130
	.byte	1,5,44,9
	.half	.L253-.L252
	.byte	1,5,14,9
	.half	.L254-.L253
	.byte	1,5,41,7,9
	.half	.L255-.L254
	.byte	3,2,1,5,74,9
	.half	.L256-.L255
	.byte	3,1,1,4,2,5,66,9
	.half	.L110-.L256
	.byte	3,253,0,1,5,33,9
	.half	.L141-.L110
	.byte	3,123,1,5,5,9
	.half	.L221-.L141
	.byte	1,9
	.half	.L11-.L221
	.byte	3,5,1,4,1,5,48,9
	.half	.L8-.L11
	.byte	3,245,126,1,4,2,5,7,9
	.half	.L146-.L8
	.byte	3,150,5,1,5,13,9
	.half	.L257-.L146
	.byte	1,4,1,5,48,9
	.half	.L3-.L257
	.byte	3,233,122,1,4,2,5,2,9
	.half	.L153-.L3
	.byte	3,129,5,1,5,32,9
	.half	.L13-.L153
	.byte	3,15,1,5,39,9
	.half	.L258-.L13
	.byte	1,5,5,9
	.half	.L259-.L258
	.byte	1,4,1,5,83,9
	.half	.L14-.L259
	.byte	3,240,122,1,4,3,5,11,7,9
	.half	.L164-.L14
	.byte	3,141,1,1,5,32,9
	.half	.L260-.L164
	.byte	1,5,4,9
	.half	.L222-.L260
	.byte	1,4,1,5,5,9
	.half	.L15-.L222
	.byte	3,140,127,1,4,3,5,21,7,9
	.half	.L168-.L15
	.byte	3,238,0,1,5,12,9
	.half	.L261-.L168
	.byte	1,5,28,7,9
	.half	.L262-.L261
	.byte	1,5,21,9
	.half	.L263-.L262
	.byte	1,5,4,9
	.half	.L17-.L263
	.byte	1,4,1,5,57,9
	.half	.L19-.L17
	.byte	3,146,127,1,5,49,7,9
	.half	.L169-.L19
	.byte	3,3,1,4,4,5,5,9
	.half	.L172-.L169
	.byte	3,126,1,4,1,5,1,9
	.half	.L16-.L172
	.byte	3,4,1,7,9
	.half	.L71-.L16
	.byte	0,1,1
.L245:
	.sdecl	'.debug_ranges',debug,cluster('Dem_ConsistencyCheckForFailedDTC')
	.sect	'.debug_ranges'
.L70:
	.word	-1,.L53,0,.L71-.L53,0,0
.L109:
	.word	-1,.L53,.L104-.L53,.L105-.L53,.L110-.L53,.L8-.L53,0,0
.L128:
	.word	-1,.L53,.L124-.L53,.L6-.L53,.L129-.L53,.L130-.L53,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_ConsistencyCheckForConfirmedDTC')
	.sect	'.debug_info'
.L72:
	.word	922
	.half	3
	.word	.L73
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\consischk\\Dem_ConsisChk.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L75,.L74
	.byte	2
	.word	.L58
	.byte	3
	.byte	'Dem_ConsistencyCheckForConfirmedDTC',0,1,51,13,1,1
	.word	.L55,.L178,.L54
	.byte	4
	.word	.L55,.L178
	.byte	5
	.byte	'LocId',0,1,53,15
	.word	.L95,.L179
	.byte	5
	.byte	'EventMemStatus',0,1,53,22
	.word	.L95,.L180
	.byte	5
	.byte	'MaxConfirmedTimeIdinEvMem',0,1,54,9
	.word	.L98,.L181
	.byte	5
	.byte	'EventIdForMaxConfirmedTimeId',0,1,55,18
	.word	.L100,.L182
	.byte	5
	.byte	'LastConfirmed_DtcId',0,1,56,16
	.word	.L100,.L183
	.byte	6
	.word	.L103,.L184,.L185
	.byte	7
	.word	.L106,.L186
	.byte	8
	.word	.L108,.L187
	.byte	6
	.word	.L140,.L202,.L30
	.byte	7
	.word	.L142,.L203
	.byte	9
	.word	.L144,.L202,.L30
	.byte	0,0,0,6
	.word	.L111,.L189,.L190
	.byte	7
	.word	.L114,.L191
	.byte	7
	.word	.L116,.L192
	.byte	10
	.word	.L118,.L189,.L190
	.byte	6
	.word	.L119,.L189,.L21
	.byte	7
	.word	.L120,.L193
	.byte	9
	.word	.L122,.L189,.L21
	.byte	0,0,0,6
	.word	.L123,.L194,.L25
	.byte	7
	.word	.L125,.L195
	.byte	8
	.word	.L127,.L196
	.byte	6
	.word	.L131,.L199,.L24
	.byte	7
	.word	.L133,.L200
	.byte	9
	.word	.L135,.L199,.L24
	.byte	0,0,0,6
	.word	.L136,.L25,.L26
	.byte	7
	.word	.L137,.L201
	.byte	9
	.word	.L139,.L25,.L26
	.byte	0,6
	.word	.L123,.L197,.L198
	.byte	7
	.word	.L125,.L195
	.byte	0,6
	.word	.L103,.L188,.L27
	.byte	7
	.word	.L106,.L186
	.byte	0,6
	.word	.L145,.L204,.L22
	.byte	7
	.word	.L147,.L205
	.byte	7
	.word	.L149,.L206
	.byte	9
	.word	.L151,.L204,.L22
	.byte	0,6
	.word	.L152,.L207,.L33
	.byte	7
	.word	.L154,.L208
	.byte	7
	.word	.L156,.L209
	.byte	10
	.word	.L158,.L207,.L33
	.byte	6
	.word	.L159,.L207,.L32
	.byte	7
	.word	.L160,.L210
	.byte	9
	.word	.L162,.L207,.L32
	.byte	0,0,0,6
	.word	.L163,.L211,.L34
	.byte	7
	.word	.L165,.L212
	.byte	9
	.word	.L167,.L211,.L34
	.byte	0,6
	.word	.L85,.L213,.L214
	.byte	7
	.word	.L87,.L215
	.byte	9
	.word	.L89,.L213,.L214
	.byte	0,6
	.word	.L171,.L216,.L35
	.byte	7
	.word	.L173,.L217
	.byte	7
	.word	.L175,.L218
	.byte	9
	.word	.L177,.L216,.L35
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_ConsistencyCheckForConfirmedDTC')
	.sect	'.debug_abbrev'
.L73:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6,29,1,49,16
	.byte	17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,85,6,0,0,9,11,0,49,16,17,1,18,1,0,0,10,11,1,49,16,17,1
	.byte	18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_ConsistencyCheckForConfirmedDTC')
	.sect	'.debug_line'
.L74:
	.word	.L265-.L264
.L264:
	.half	3
	.word	.L267-.L266
.L266:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\consischk\\Dem_ConsisChk.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemGen.h',0,0,0,0,0
.L267:
	.byte	5,13,7,0,5,2
	.word	.L55
	.byte	3,50,1,5,35,9
	.half	.L223-.L55
	.byte	3,3,1,5,47,9
	.half	.L184-.L223
	.byte	3,1,1,5,48,9
	.half	.L185-.L184
	.byte	3,3,1,4,2,5,2,9
	.half	.L189-.L185
	.byte	3,207,4,1,5,12,9
	.half	.L21-.L189
	.byte	3,20,1,4,1,5,83,9
	.half	.L190-.L21
	.byte	3,158,123,1,5,51,9
	.half	.L23-.L190
	.byte	3,4,1,4,2,5,45,9
	.half	.L194-.L23
	.byte	3,206,0,1,5,65,9
	.half	.L268-.L194
	.byte	1,5,33,9
	.half	.L199-.L268
	.byte	3,123,1,5,5,9
	.half	.L224-.L199
	.byte	1,9
	.half	.L24-.L224
	.byte	3,5,1,5,67,9
	.half	.L25-.L24
	.byte	3,200,3,1,5,39,9
	.half	.L269-.L25
	.byte	1,5,97,9
	.half	.L270-.L269
	.byte	1,5,4,9
	.half	.L271-.L270
	.byte	1,4,1,5,11,9
	.half	.L26-.L271
	.byte	3,237,123,1,5,10,7,9
	.half	.L197-.L26
	.byte	3,3,1,5,38,7,9
	.half	.L198-.L197
	.byte	3,3,1,5,37,9
	.half	.L272-.L198
	.byte	1,5,44,9
	.half	.L273-.L272
	.byte	1,5,14,9
	.half	.L274-.L273
	.byte	1,5,44,7,9
	.half	.L275-.L274
	.byte	3,2,1,5,77,9
	.half	.L276-.L275
	.byte	3,1,1,4,2,5,66,9
	.half	.L188-.L276
	.byte	3,212,0,1,5,33,9
	.half	.L202-.L188
	.byte	3,123,1,5,5,9
	.half	.L225-.L202
	.byte	1,9
	.half	.L30-.L225
	.byte	3,5,1,4,1,5,48,9
	.half	.L27-.L30
	.byte	3,157,127,1,4,2,5,7,9
	.half	.L204-.L27
	.byte	3,238,4,1,5,13,9
	.half	.L277-.L204
	.byte	1,4,1,5,48,9
	.half	.L22-.L277
	.byte	3,145,123,1,4,2,5,2,9
	.half	.L207-.L22
	.byte	3,217,4,1,5,32,9
	.half	.L32-.L207
	.byte	3,15,1,5,39,9
	.half	.L278-.L32
	.byte	1,5,5,9
	.half	.L279-.L278
	.byte	1,4,1,5,83,9
	.half	.L33-.L279
	.byte	3,152,123,1,4,3,5,11,7,9
	.half	.L211-.L33
	.byte	3,229,0,1,5,32,9
	.half	.L280-.L211
	.byte	1,5,4,9
	.half	.L226-.L280
	.byte	1,4,1,5,5,9
	.half	.L34-.L226
	.byte	3,182,127,1,4,3,5,21,7,9
	.half	.L213-.L34
	.byte	3,196,0,1,5,12,9
	.half	.L281-.L213
	.byte	1,5,28,7,9
	.half	.L282-.L281
	.byte	1,5,21,9
	.half	.L283-.L282
	.byte	1,5,4,9
	.half	.L36-.L283
	.byte	1,4,1,5,60,9
	.half	.L38-.L36
	.byte	3,188,127,1,5,52,7,9
	.half	.L214-.L38
	.byte	3,3,1,4,4,5,5,9
	.half	.L216-.L214
	.byte	3,84,1,4,1,5,1,9
	.half	.L35-.L216
	.byte	3,46,1,7,9
	.half	.L76-.L35
	.byte	0,1,1
.L265:
	.sdecl	'.debug_ranges',debug,cluster('Dem_ConsistencyCheckForConfirmedDTC')
	.sect	'.debug_ranges'
.L75:
	.word	-1,.L55,0,.L76-.L55,0,0
.L187:
	.word	-1,.L55,.L184-.L55,.L185-.L55,.L188-.L55,.L27-.L55,0,0
.L196:
	.word	-1,.L55,.L194-.L55,.L25-.L55,.L197-.L55,.L198-.L55,0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_ConsistencyCheckForConfirmedDTC')
	.sect	'.debug_loc'
.L54:
	.word	-1,.L55,0,.L223-.L55
	.half	2
	.byte	138,0
	.word	.L223-.L55,.L178-.L55
	.half	2
	.byte	138,8
	.word	.L178-.L55,.L178-.L55
	.half	2
	.byte	138,0
	.word	0,0
.L217:
	.word	0,0
.L182:
	.word	-1,.L55,.L185-.L55,.L188-.L55
	.half	5
	.byte	144,32,157,32,0
	.word	.L225-.L55,.L226-.L55
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L180:
	.word	-1,.L55,.L224-.L55,.L22-.L55
	.half	1
	.byte	82
	.word	0,0
.L200:
	.word	0,0
.L203:
	.word	0,0
.L183:
	.word	-1,.L55,.L226-.L55,.L178-.L55
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L179:
	.word	-1,.L55,0,.L178-.L55
	.half	2
	.byte	145,120
	.word	0,0
.L195:
	.word	0,0
.L186:
	.word	0,0
.L191:
	.word	0,0
.L208:
	.word	0,0
.L205:
	.word	0,0
.L181:
	.word	-1,.L55,.L184-.L55,.L178-.L55
	.half	1
	.byte	83
	.word	0,0
.L193:
	.word	0,0
.L210:
	.word	0,0
.L192:
	.word	0,0
.L209:
	.word	0,0
.L206:
	.word	0,0
.L218:
	.word	0,0
.L201:
	.word	0,0
.L215:
	.word	0,0
.L212:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_ConsistencyCheckForDTC')
	.sect	'.debug_loc'
.L56:
	.word	-1,.L57,0,.L77-.L57
	.half	2
	.byte	138,0
	.word	0,0
.L83:
	.word	0,0
.L88:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_ConsistencyCheckForFailedDTC')
	.sect	'.debug_loc'
.L52:
	.word	-1,.L53,0,.L219-.L53
	.half	2
	.byte	138,0
	.word	.L219-.L53,.L94-.L53
	.half	2
	.byte	138,8
	.word	.L94-.L53,.L94-.L53
	.half	2
	.byte	138,0
	.word	0,0
.L174:
	.word	0,0
.L101:
	.word	-1,.L53,.L105-.L53,.L110-.L53
	.half	5
	.byte	144,32,157,32,0
	.word	.L221-.L53,.L222-.L53
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L97:
	.word	-1,.L53,.L220-.L53,.L3-.L53
	.half	1
	.byte	82
	.word	0,0
.L134:
	.word	0,0
.L143:
	.word	0,0
.L102:
	.word	-1,.L53,.L222-.L53,.L94-.L53
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L96:
	.word	-1,.L53,0,.L94-.L53
	.half	2
	.byte	145,120
	.word	0,0
.L126:
	.word	0,0
.L107:
	.word	0,0
.L115:
	.word	0,0
.L155:
	.word	0,0
.L148:
	.word	0,0
.L99:
	.word	-1,.L53,.L104-.L53,.L94-.L53
	.half	1
	.byte	83
	.word	0,0
.L121:
	.word	0,0
.L161:
	.word	0,0
.L117:
	.word	0,0
.L157:
	.word	0,0
.L150:
	.word	0,0
.L176:
	.word	0,0
.L138:
	.word	0,0
.L170:
	.word	0,0
.L166:
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L284:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Dem_ConsistencyCheckForFailedDTC')
	.sect	'.debug_frame'
	.word	44
	.word	.L284,.L53,.L94-.L53
	.byte	8,19,8,20,8,21,8,22,8,23,4
	.word	(.L219-.L53)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L94-.L219)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('Dem_ConsistencyCheckForConfirmedDTC')
	.sect	'.debug_frame'
	.word	44
	.word	.L284,.L55,.L178-.L55
	.byte	8,19,8,20,8,21,8,22,8,23,4
	.word	(.L223-.L55)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L178-.L223)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('Dem_ConsistencyCheckForDTC')
	.sect	'.debug_frame'
	.word	12
	.word	.L284,.L57,.L77-.L57

; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	   107  
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	   108  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\consischk\Dem_ConsisChk.c	   109  #include "Dem_Cfg_MemMap.h"

	; Module end
